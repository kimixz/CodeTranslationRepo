[
    {
        "method_name": "openFileIntent",
        "method_code": "public static Intent openFileIntent(Context context, User user, OCFile file) {\n        final Intent intent = new Intent(context, PreviewImageActivity.class);\n        intent.putExtra(FileActivity.EXTRA_FILE, file);\n        intent.putExtra(FileActivity.EXTRA_USER, user);\n        return intent;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled openFileIntent from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: openFileIntent\n\n        Method Code: public static Intent openFileIntent(Context context, User user, OCFile file) {\n        final Intent intent = new Intent(context, PreviewImageActivity.class);\n        intent.putExtra(FileActivity.EXTRA_FILE, file);\n        intent.putExtra(FileActivity.EXTRA_USER, user);\n        return intent;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func openFileIntent(context: UIViewController, user: User, file: OCFile) -> UIViewController {\n    let storyboard = UIStoryboard(name: \"Main\", bundle: nil)\n    let previewImageVC = storyboard.instantiateViewController(withIdentifier: \"PreviewImageActivity\") as! PreviewImageActivity\n    previewImageVC.file = file\n    previewImageVC.user = user\n    return previewImageVC\n}\n```"
    },
    {
        "method_name": "onCreate",
        "method_code": "@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        Log_OC.v(TAG, \"onCreate() start\");\n        // Set the default theme to replace the launch screen theme.\n        setTheme(R.style.Theme_ownCloud_Toolbar_Drawer);\n\n        super.onCreate(savedInstanceState);\n        loadSavedInstanceState(savedInstanceState);\n\n        /// USER INTERFACE\n        initLayout();\n        initUI();\n        initTaskRetainerFragment();\n\n        // Restoring after UI has been inflated.\n        if (savedInstanceState != null) {\n            showSortListGroup(savedInstanceState.getBoolean(KEY_IS_SORT_GROUP_VISIBLE));\n        }\n\n        if (Intent.ACTION_VIEW.equals(getIntent().getAction())) {\n            handleOpenFileViaIntent(getIntent());\n        }\n\n        mPlayerConnection = new PlayerServiceConnection(this);\n\n        checkStoragePath();\n\n        initSyncBroadcastReceiver();\n        observeWorkerState();\n        registerRefreshFolderEventReceiver();\n\n        OfflineFolderConflictManager offlineFolderConflictManager = new OfflineFolderConflictManager(this);\n        offlineFolderConflictManager.registerRefreshSearchEventReceiver();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreate from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onCreate\n\n        Method Code: @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        Log_OC.v(TAG, \"onCreate() start\");\n        // Set the default theme to replace the launch screen theme.\n        setTheme(R.style.Theme_ownCloud_Toolbar_Drawer);\n\n        super.onCreate(savedInstanceState);\n        loadSavedInstanceState(savedInstanceState);\n\n        /// USER INTERFACE\n        initLayout();\n        initUI();\n        initTaskRetainerFragment();\n\n        // Restoring after UI has been inflated.\n        if (savedInstanceState != null) {\n            showSortListGroup(savedInstanceState.getBoolean(KEY_IS_SORT_GROUP_VISIBLE));\n        }\n\n        if (Intent.ACTION_VIEW.equals(getIntent().getAction())) {\n            handleOpenFileViaIntent(getIntent());\n        }\n\n        mPlayerConnection = new PlayerServiceConnection(this);\n\n        checkStoragePath();\n\n        initSyncBroadcastReceiver();\n        observeWorkerState();\n        registerRefreshFolderEventReceiver();\n\n        OfflineFolderConflictManager offlineFolderConflictManager = new OfflineFolderConflictManager(this);\n        offlineFolderConflictManager.registerRefreshSearchEventReceiver();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    Log_OC.v(TAG, \"onCreate() start\")\n    // Set the default theme to replace the launch screen theme.\n    self.setTheme(R.style.Theme_ownCloud_Toolbar_Drawer)\n\n    loadSavedInstanceState(savedInstanceState: nil)\n\n    /// USER INTERFACE\n    initLayout()\n    initUI()\n    initTaskRetainerFragment()\n\n    // Restoring after UI has been inflated.\n    if let savedInstanceState = savedInstanceState {\n        showSortListGroup(isVisible: savedInstanceState.bool(forKey: KEY_IS_SORT_GROUP_VISIBLE))\n    }\n\n    if getIntent().action == Intent.ACTION_VIEW {\n        handleOpenFileViaIntent(intent: getIntent())\n    }\n\n    mPlayerConnection = PlayerServiceConnection(context: self)\n\n    checkStoragePath()\n\n    initSyncBroadcastReceiver()\n    observeWorkerState()\n    registerRefreshFolderEventReceiver()\n\n    let offlineFolderConflictManager = OfflineFolderConflictManager(context: self)\n    offlineFolderConflictManager.registerRefreshSearchEventReceiver()\n}\n```"
    },
    {
        "method_name": "loadSavedInstanceState",
        "method_code": "@SuppressWarnings(\"unchecked\")\n    private void loadSavedInstanceState(Bundle savedInstanceState) {\n        if (savedInstanceState != null) {\n            mWaitingToPreview = BundleExtensionsKt.getParcelableArgument(savedInstanceState, KEY_WAITING_TO_PREVIEW, OCFile.class);\n            mSyncInProgress = savedInstanceState.getBoolean(KEY_SYNC_IN_PROGRESS);\n            mWaitingToSend = BundleExtensionsKt.getParcelableArgument(savedInstanceState, KEY_WAITING_TO_SEND, OCFile.class);\n            searchQuery = savedInstanceState.getString(KEY_SEARCH_QUERY);\n            searchOpen = savedInstanceState.getBoolean(FileDisplayActivity.KEY_IS_SEARCH_OPEN, false);\n        } else {\n            mWaitingToPreview = null;\n            mSyncInProgress = false;\n            mWaitingToSend = null;\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled loadSavedInstanceState from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: loadSavedInstanceState\n\n        Method Code: @SuppressWarnings(\"unchecked\")\n    private void loadSavedInstanceState(Bundle savedInstanceState) {\n        if (savedInstanceState != null) {\n            mWaitingToPreview = BundleExtensionsKt.getParcelableArgument(savedInstanceState, KEY_WAITING_TO_PREVIEW, OCFile.class);\n            mSyncInProgress = savedInstanceState.getBoolean(KEY_SYNC_IN_PROGRESS);\n            mWaitingToSend = BundleExtensionsKt.getParcelableArgument(savedInstanceState, KEY_WAITING_TO_SEND, OCFile.class);\n            searchQuery = savedInstanceState.getString(KEY_SEARCH_QUERY);\n            searchOpen = savedInstanceState.getBoolean(FileDisplayActivity.KEY_IS_SEARCH_OPEN, false);\n        } else {\n            mWaitingToPreview = null;\n            mSyncInProgress = false;\n            mWaitingToSend = null;\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func loadSavedInstanceState(_ savedInstanceState: Bundle?) {\n    if let savedInstanceState = savedInstanceState {\n        mWaitingToPreview = savedInstanceState.getParcelableArgument(key: KEY_WAITING_TO_PREVIEW, type: OCFile.self)\n        mSyncInProgress = savedInstanceState.getBoolean(forKey: KEY_SYNC_IN_PROGRESS)\n        mWaitingToSend = savedInstanceState.getParcelableArgument(key: KEY_WAITING_TO_SEND, type: OCFile.self)\n        searchQuery = savedInstanceState.getString(forKey: KEY_SEARCH_QUERY)\n        searchOpen = savedInstanceState.getBoolean(forKey: FileDisplayActivity.KEY_IS_SEARCH_OPEN, defaultValue: false)\n    } else {\n        mWaitingToPreview = nil\n        mSyncInProgress = false\n        mWaitingToSend = nil\n    }\n}\n```"
    },
    {
        "method_name": "initLayout",
        "method_code": "private void initLayout() {\n        // Inflate and set the layout view\n        binding = FilesBinding.inflate(getLayoutInflater());\n        setContentView(binding.getRoot());\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled initLayout from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: initLayout\n\n        Method Code: private void initLayout() {\n        // Inflate and set the layout view\n        binding = FilesBinding.inflate(getLayoutInflater());\n        setContentView(binding.getRoot());\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func initLayout() {\n    // Inflate and set the layout view\n    binding = FilesBinding.inflate(getLayoutInflater())\n    setContentView(binding.getRoot())\n}\n```"
    },
    {
        "method_name": "initUI",
        "method_code": "private void initUI() {\n        setupHomeSearchToolbarWithSortAndListButtons();\n        mMenuButton.setOnClickListener(v -> openDrawer());\n        mSwitchAccountButton.setOnClickListener(v -> showManageAccountsDialog());\n        mNotificationButton.setOnClickListener(v -> startActivity(NotificationsActivity.class));\n        fastScrollUtils.fixAppBarForFastScroll(binding.appbar.appbar, binding.rootLayout);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled initUI from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: initUI\n\n        Method Code: private void initUI() {\n        setupHomeSearchToolbarWithSortAndListButtons();\n        mMenuButton.setOnClickListener(v -> openDrawer());\n        mSwitchAccountButton.setOnClickListener(v -> showManageAccountsDialog());\n        mNotificationButton.setOnClickListener(v -> startActivity(NotificationsActivity.class));\n        fastScrollUtils.fixAppBarForFastScroll(binding.appbar.appbar, binding.rootLayout);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func initUI() {\n    setupHomeSearchToolbarWithSortAndListButtons()\n    mMenuButton.addTarget(self, action: #selector(openDrawer), for: .touchUpInside)\n    mSwitchAccountButton.addTarget(self, action: #selector(showManageAccountsDialog), for: .touchUpInside)\n    mNotificationButton.addTarget(self, action: #selector(openNotificationsActivity), for: .touchUpInside)\n    fastScrollUtils.fixAppBarForFastScroll(binding.appbar.appbar, binding.rootLayout)\n}\n\n@objc private func openDrawer() {\n    // Implementation for opening drawer\n}\n\n@objc private func showManageAccountsDialog() {\n    // Implementation for showing manage accounts dialog\n}\n\n@objc private func openNotificationsActivity() {\n    let notificationsVC = NotificationsViewController()\n    self.present(notificationsVC, animated: true, completion: nil)\n}\n```"
    },
    {
        "method_name": "initTaskRetainerFragment",
        "method_code": "private void initTaskRetainerFragment() {\n        // Init Fragment without UI to retain AsyncTask across configuration changes\n        FragmentManager fm = getSupportFragmentManager();\n        TaskRetainerFragment taskRetainerFragment = (TaskRetainerFragment) fm.findFragmentByTag(TaskRetainerFragment.FTAG_TASK_RETAINER_FRAGMENT);\n        if (taskRetainerFragment == null) {\n            taskRetainerFragment = new TaskRetainerFragment();\n            fm.beginTransaction().add(taskRetainerFragment, TaskRetainerFragment.FTAG_TASK_RETAINER_FRAGMENT).commit();\n        }   // else, Fragment already created and retained across configuration change\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled initTaskRetainerFragment from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: initTaskRetainerFragment\n\n        Method Code: private void initTaskRetainerFragment() {\n        // Init Fragment without UI to retain AsyncTask across configuration changes\n        FragmentManager fm = getSupportFragmentManager();\n        TaskRetainerFragment taskRetainerFragment = (TaskRetainerFragment) fm.findFragmentByTag(TaskRetainerFragment.FTAG_TASK_RETAINER_FRAGMENT);\n        if (taskRetainerFragment == null) {\n            taskRetainerFragment = new TaskRetainerFragment();\n            fm.beginTransaction().add(taskRetainerFragment, TaskRetainerFragment.FTAG_TASK_RETAINER_FRAGMENT).commit();\n        }   // else, Fragment already created and retained across configuration change\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func initTaskRetainerFragment() {\n    // Init Fragment without UI to retain AsyncTask across configuration changes\n    let fm = self.supportFragmentManager\n    var taskRetainerFragment = fm.findFragment(byTag: TaskRetainerFragment.FTAG_TASK_RETAINER_FRAGMENT) as? TaskRetainerFragment\n    if taskRetainerFragment == nil {\n        taskRetainerFragment = TaskRetainerFragment()\n        fm.beginTransaction().add(taskRetainerFragment!, withTag: TaskRetainerFragment.FTAG_TASK_RETAINER_FRAGMENT).commit()\n    }   // else, Fragment already created and retained across configuration change\n}\n```"
    },
    {
        "method_name": "checkStoragePath",
        "method_code": "private void checkStoragePath() {\n        String newStorage = Environment.getExternalStorageDirectory().getAbsolutePath();\n        String storagePath = preferences.getStoragePath(newStorage);\n        if (!preferences.isStoragePathValid() && !new File(storagePath).exists()) {\n            // falling back to default\n            preferences.setStoragePath(newStorage);\n            preferences.setStoragePathValid();\n            MainApp.setStoragePath(newStorage);\n\n            try {\n                final MaterialAlertDialogBuilder builder = new MaterialAlertDialogBuilder(this, R.style.Theme_ownCloud_Dialog)\n                    .setTitle(R.string.wrong_storage_path)\n                    .setMessage(R.string.wrong_storage_path_desc)\n                    .setPositiveButton(R.string.dialog_close, (dialog, which) -> dialog.dismiss())\n                    .setIcon(R.drawable.ic_settings);\n\n                viewThemeUtils.dialog.colorMaterialAlertDialogBackground(getApplicationContext(), builder);\n\n                builder.create().show();\n            } catch (WindowManager.BadTokenException e) {\n                Log_OC.e(TAG, \"Error showing wrong storage info, so skipping it: \" + e.getMessage());\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled checkStoragePath from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: checkStoragePath\n\n        Method Code: private void checkStoragePath() {\n        String newStorage = Environment.getExternalStorageDirectory().getAbsolutePath();\n        String storagePath = preferences.getStoragePath(newStorage);\n        if (!preferences.isStoragePathValid() && !new File(storagePath).exists()) {\n            // falling back to default\n            preferences.setStoragePath(newStorage);\n            preferences.setStoragePathValid();\n            MainApp.setStoragePath(newStorage);\n\n            try {\n                final MaterialAlertDialogBuilder builder = new MaterialAlertDialogBuilder(this, R.style.Theme_ownCloud_Dialog)\n                    .setTitle(R.string.wrong_storage_path)\n                    .setMessage(R.string.wrong_storage_path_desc)\n                    .setPositiveButton(R.string.dialog_close, (dialog, which) -> dialog.dismiss())\n                    .setIcon(R.drawable.ic_settings);\n\n                viewThemeUtils.dialog.colorMaterialAlertDialogBackground(getApplicationContext(), builder);\n\n                builder.create().show();\n            } catch (WindowManager.BadTokenException e) {\n                Log_OC.e(TAG, \"Error showing wrong storage info, so skipping it: \" + e.getMessage());\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func checkStoragePath() {\n    let newStorage = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!.path\n    let storagePath = preferences.getStoragePath(newStorage)\n    if !preferences.isStoragePathValid() && !FileManager.default.fileExists(atPath: storagePath) {\n        // falling back to default\n        preferences.setStoragePath(newStorage)\n        preferences.setStoragePathValid()\n        MainApp.setStoragePath(newStorage)\n\n        do {\n            let alert = UIAlertController(title: NSLocalizedString(\"wrong_storage_path\", comment: \"\"),\n                                          message: NSLocalizedString(\"wrong_storage_path_desc\", comment: \"\"),\n                                          preferredStyle: .alert)\n            alert.addAction(UIAlertAction(title: NSLocalizedString(\"dialog_close\", comment: \"\"), style: .default, handler: { _ in\n                alert.dismiss(animated: true, completion: nil)\n            }))\n            alert.view.tintColor = UIColor(named: \"ic_settings\")\n            self.present(alert, animated: true, completion: nil)\n        } catch {\n            print(\"Error showing wrong storage info, so skipping it: \\(error.localizedDescription)\")\n        }\n    }\n}\n```"
    },
    {
        "method_name": "onConfigurationChanged",
        "method_code": "@Override\n    public void onConfigurationChanged(@NonNull Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {\n            StoragePermissionDialogFragment fragment = (StoragePermissionDialogFragment) getSupportFragmentManager().findFragmentByTag(PERMISSION_CHOICE_DIALOG_TAG);\n            if (fragment != null) {\n                Dialog dialog = fragment.getDialog();\n\n                if (dialog != null && dialog.isShowing()) {\n                    dialog.dismiss();\n                    getSupportFragmentManager().beginTransaction().remove(fragment).commitNowAllowingStateLoss();\n                    PermissionUtil.requestExternalStoragePermission(this, viewThemeUtils);\n                }\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onConfigurationChanged from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onConfigurationChanged\n\n        Method Code: @Override\n    public void onConfigurationChanged(@NonNull Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {\n            StoragePermissionDialogFragment fragment = (StoragePermissionDialogFragment) getSupportFragmentManager().findFragmentByTag(PERMISSION_CHOICE_DIALOG_TAG);\n            if (fragment != null) {\n                Dialog dialog = fragment.getDialog();\n\n                if (dialog != null && dialog.isShowing()) {\n                    dialog.dismiss();\n                    getSupportFragmentManager().beginTransaction().remove(fragment).commitNowAllowingStateLoss();\n                    PermissionUtil.requestExternalStoragePermission(this, viewThemeUtils);\n                }\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n\n    if #available(iOS 14.0, *) {\n        if let fragment = self.presentedViewController as? StoragePermissionDialogFragment {\n            if let dialog = fragment.dialog, dialog.isBeingPresented {\n                dialog.dismiss(animated: false) {\n                    self.dismiss(animated: false, completion: nil)\n                    PermissionUtil.requestExternalStoragePermission(self, viewThemeUtils: viewThemeUtils)\n                }\n            }\n        }\n    }\n}\n```"
    },
    {
        "method_name": "onPostCreate",
        "method_code": "@Override\n    protected void onPostCreate(Bundle savedInstanceState) {\n        super.onPostCreate(savedInstanceState);\n\n        // handle notification permission on API level >= 33\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\n            // request notification permission first and then prompt for storage permissions\n            // storage permissions handled in onRequestPermissionsResult\n            PermissionUtil.requestNotificationPermission(this);\n        } else {\n            PermissionUtil.requestExternalStoragePermission(this, viewThemeUtils);\n        }\n\n        if (IntentExtensionsKt.getParcelableArgument(getIntent(), OCFileListFragment.SEARCH_EVENT, SearchEvent.class) != null) {\n            switchToSearchFragment(savedInstanceState);\n            setupDrawer();\n        } else {\n            createMinFragments(savedInstanceState);\n            syncAndUpdateFolder(true);\n        }\n\n        if (OPEN_FILE.equals(getIntent().getAction())) {\n            getSupportFragmentManager().executePendingTransactions();\n            onOpenFileIntent(getIntent());\n        } else if (RESTART.equals(getIntent().getAction())) {\n            // most likely switched to different account\n            DisplayUtils.showSnackMessage(this, String.format(getString(R.string.logged_in_as), accountManager.getUser().getAccountName()));\n        }\n\n        upgradeNotificationForInstantUpload();\n        checkOutdatedServer();\n        checkNotifications();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onPostCreate from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onPostCreate\n\n        Method Code: @Override\n    protected void onPostCreate(Bundle savedInstanceState) {\n        super.onPostCreate(savedInstanceState);\n\n        // handle notification permission on API level >= 33\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\n            // request notification permission first and then prompt for storage permissions\n            // storage permissions handled in onRequestPermissionsResult\n            PermissionUtil.requestNotificationPermission(this);\n        } else {\n            PermissionUtil.requestExternalStoragePermission(this, viewThemeUtils);\n        }\n\n        if (IntentExtensionsKt.getParcelableArgument(getIntent(), OCFileListFragment.SEARCH_EVENT, SearchEvent.class) != null) {\n            switchToSearchFragment(savedInstanceState);\n            setupDrawer();\n        } else {\n            createMinFragments(savedInstanceState);\n            syncAndUpdateFolder(true);\n        }\n\n        if (OPEN_FILE.equals(getIntent().getAction())) {\n            getSupportFragmentManager().executePendingTransactions();\n            onOpenFileIntent(getIntent());\n        } else if (RESTART.equals(getIntent().getAction())) {\n            // most likely switched to different account\n            DisplayUtils.showSnackMessage(this, String.format(getString(R.string.logged_in_as), accountManager.getUser().getAccountName()));\n        }\n\n        upgradeNotificationForInstantUpload();\n        checkOutdatedServer();\n        checkNotifications();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n\n    // handle notification permission on API level >= 33\n    if #available(iOS 16.0, *) {\n        // request notification permission first and then prompt for storage permissions\n        // storage permissions handled in onRequestPermissionsResult\n        PermissionUtil.requestNotificationPermission(self)\n    } else {\n        PermissionUtil.requestExternalStoragePermission(self, viewThemeUtils: viewThemeUtils)\n    }\n\n    if let searchEvent = getIntent().getParcelableArgument(OCFileListFragment.SEARCH_EVENT, SearchEvent.self) {\n        switchToSearchFragment(savedInstanceState)\n        setupDrawer()\n    } else {\n        createMinFragments(savedInstanceState)\n        syncAndUpdateFolder(true)\n    }\n\n    if getIntent().action == OPEN_FILE {\n        getSupportFragmentManager().executePendingTransactions()\n        onOpenFileIntent(getIntent())\n    } else if getIntent().action == RESTART {\n        // most likely switched to different account\n        DisplayUtils.showSnackMessage(self, String(format: getString(R.string.logged_in_as), accountManager.getUser().getAccountName()))\n    }\n\n    upgradeNotificationForInstantUpload()\n    checkOutdatedServer()\n    checkNotifications()\n}\n```"
    },
    {
        "method_name": "getActivity",
        "method_code": "private Activity getActivity() {\n        return this;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getActivity from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: getActivity\n\n        Method Code: private Activity getActivity() {\n        return this;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getActivity() -> UIViewController {\n    return self\n}\n```"
    },
    {
        "method_name": "upgradeNotificationForInstantUpload",
        "method_code": "private void upgradeNotificationForInstantUpload() {\n        // check for Android 6+ if legacy instant upload is activated --> disable + show info\n        if (preferences.instantPictureUploadEnabled() || preferences.instantVideoUploadEnabled()) {\n            preferences.removeLegacyPreferences();\n            // show info pop-up\n            new MaterialAlertDialogBuilder(this, R.style.Theme_ownCloud_Dialog).setTitle(R.string.drawer_synced_folders).setMessage(R.string.synced_folders_new_info).setPositiveButton(R.string.drawer_open, (dialog, which) -> {\n                // show instant upload\n                Intent syncedFoldersIntent = new Intent(getApplicationContext(), SyncedFoldersActivity.class);\n                dialog.dismiss();\n                startActivity(syncedFoldersIntent);\n            }).setNegativeButton(R.string.drawer_close, (dialog, which) -> dialog.dismiss()).setIcon(R.drawable.nav_synced_folders).show();\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled upgradeNotificationForInstantUpload from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: upgradeNotificationForInstantUpload\n\n        Method Code: private void upgradeNotificationForInstantUpload() {\n        // check for Android 6+ if legacy instant upload is activated --> disable + show info\n        if (preferences.instantPictureUploadEnabled() || preferences.instantVideoUploadEnabled()) {\n            preferences.removeLegacyPreferences();\n            // show info pop-up\n            new MaterialAlertDialogBuilder(this, R.style.Theme_ownCloud_Dialog).setTitle(R.string.drawer_synced_folders).setMessage(R.string.synced_folders_new_info).setPositiveButton(R.string.drawer_open, (dialog, which) -> {\n                // show instant upload\n                Intent syncedFoldersIntent = new Intent(getApplicationContext(), SyncedFoldersActivity.class);\n                dialog.dismiss();\n                startActivity(syncedFoldersIntent);\n            }).setNegativeButton(R.string.drawer_close, (dialog, which) -> dialog.dismiss()).setIcon(R.drawable.nav_synced_folders).show();\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func upgradeNotificationForInstantUpload() {\n    // check for iOS equivalent if legacy instant upload is activated --> disable + show info\n    if preferences.instantPictureUploadEnabled() || preferences.instantVideoUploadEnabled() {\n        preferences.removeLegacyPreferences()\n        // show info pop-up\n        let alert = UIAlertController(title: NSLocalizedString(\"drawer_synced_folders\", comment: \"\"), message: NSLocalizedString(\"synced_folders_new_info\", comment: \"\"), preferredStyle: .alert)\n        alert.addAction(UIAlertAction(title: NSLocalizedString(\"drawer_open\", comment: \"\"), style: .default, handler: { _ in\n            // show instant upload\n            let syncedFoldersVC = SyncedFoldersViewController()\n            self.present(syncedFoldersVC, animated: true, completion: nil)\n        }))\n        alert.addAction(UIAlertAction(title: NSLocalizedString(\"drawer_close\", comment: \"\"), style: .cancel, handler: nil))\n        alert.view.tintColor = UIColor(named: \"nav_synced_folders\")\n        self.present(alert, animated: true, completion: nil)\n    }\n}\n```"
    },
    {
        "method_name": "checkOutdatedServer",
        "method_code": "private void checkOutdatedServer() {\n        Optional<User> user = getUser();\n        // show outdated warning\n        if (user.isPresent() && CapabilityUtils.checkOutdatedWarning(getResources(), user.get().getServer().getVersion(), getCapabilities().getExtendedSupport().isTrue())) {\n            DisplayUtils.showServerOutdatedSnackbar(this, Snackbar.LENGTH_LONG);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled checkOutdatedServer from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: checkOutdatedServer\n\n        Method Code: private void checkOutdatedServer() {\n        Optional<User> user = getUser();\n        // show outdated warning\n        if (user.isPresent() && CapabilityUtils.checkOutdatedWarning(getResources(), user.get().getServer().getVersion(), getCapabilities().getExtendedSupport().isTrue())) {\n            DisplayUtils.showServerOutdatedSnackbar(this, Snackbar.LENGTH_LONG);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func checkOutdatedServer() {\n    if let user = getUser(), CapabilityUtils.checkOutdatedWarning(resources: getResources(), version: user.getServer().getVersion(), isExtendedSupport: getCapabilities().getExtendedSupport().isTrue()) {\n        DisplayUtils.showServerOutdatedSnackbar(self, duration: .long)\n    }\n}\n```"
    },
    {
        "method_name": "checkNotifications",
        "method_code": "private void checkNotifications() {\n        new Thread(() -> {\n            try {\n                RemoteOperationResult<List<Notification>> result = new GetNotificationsRemoteOperation()\n                    .execute(clientFactory.createNextcloudClient(accountManager.getUser()));\n                \n                if (result.isSuccess() && !result.getResultData().isEmpty()) {\n                    runOnUiThread(() -> mNotificationButton.setVisibility(View.VISIBLE));\n                } else {\n                    runOnUiThread(() -> mNotificationButton.setVisibility(View.GONE));\n                }\n                \n            } catch (ClientFactory.CreationException e) {\n                Log_OC.e(TAG, \"Could not fetch notifications!\");\n            }\n        }).start();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled checkNotifications from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: checkNotifications\n\n        Method Code: private void checkNotifications() {\n        new Thread(() -> {\n            try {\n                RemoteOperationResult<List<Notification>> result = new GetNotificationsRemoteOperation()\n                    .execute(clientFactory.createNextcloudClient(accountManager.getUser()));\n                \n                if (result.isSuccess() && !result.getResultData().isEmpty()) {\n                    runOnUiThread(() -> mNotificationButton.setVisibility(View.VISIBLE));\n                } else {\n                    runOnUiThread(() -> mNotificationButton.setVisibility(View.GONE));\n                }\n                \n            } catch (ClientFactory.CreationException e) {\n                Log_OC.e(TAG, \"Could not fetch notifications!\");\n            }\n        }).start();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func checkNotifications() {\n    DispatchQueue.global().async {\n        do {\n            let client = try clientFactory.createNextcloudClient(accountManager.getUser())\n            let result = GetNotificationsRemoteOperation().execute(client)\n            \n            DispatchQueue.main.async {\n                if result.isSuccess && !result.resultData.isEmpty {\n                    self.mNotificationButton.isHidden = false\n                } else {\n                    self.mNotificationButton.isHidden = true\n                }\n            }\n        } catch {\n            Log_OC.e(TAG, \"Could not fetch notifications!\")\n        }\n    }\n}\n```"
    },
    {
        "method_name": "onRequestPermissionsResult",
        "method_code": "@Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        switch (requestCode) {\n            case PermissionUtil.PERMISSIONS_POST_NOTIFICATIONS:\n                // handle notification permission on API level >= 33\n                // dialogue was dismissed -> prompt for storage permissions\n                PermissionUtil.requestExternalStoragePermission(this, viewThemeUtils);\n                break;\n            case PermissionUtil.PERMISSIONS_EXTERNAL_STORAGE:\n                // If request is cancelled, result arrays are empty.\n                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                    // permission was granted\n                    EventBus.getDefault().post(new TokenPushEvent());\n                    syncAndUpdateFolder(true);\n                    // toggle on is save since this is the only scenario this code gets accessed\n                }\n                break;\n            case PermissionUtil.PERMISSIONS_CAMERA:\n                // If request is cancelled, result arrays are empty.\n                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                    // permission was granted\n                    getOCFileListFragmentFromFile().directCameraUpload();\n                }\n                break;\n            default:\n                super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onRequestPermissionsResult from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onRequestPermissionsResult\n\n        Method Code: @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        switch (requestCode) {\n            case PermissionUtil.PERMISSIONS_POST_NOTIFICATIONS:\n                // handle notification permission on API level >= 33\n                // dialogue was dismissed -> prompt for storage permissions\n                PermissionUtil.requestExternalStoragePermission(this, viewThemeUtils);\n                break;\n            case PermissionUtil.PERMISSIONS_EXTERNAL_STORAGE:\n                // If request is cancelled, result arrays are empty.\n                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                    // permission was granted\n                    EventBus.getDefault().post(new TokenPushEvent());\n                    syncAndUpdateFolder(true);\n                    // toggle on is save since this is the only scenario this code gets accessed\n                }\n                break;\n            case PermissionUtil.PERMISSIONS_CAMERA:\n                // If request is cancelled, result arrays are empty.\n                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                    // permission was granted\n                    getOCFileListFragmentFromFile().directCameraUpload();\n                }\n                break;\n            default:\n                super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onRequestPermissionsResult(_ requestCode: Int, _ permissions: [String], _ grantResults: [Int]) {\n    switch requestCode {\n    case PermissionUtil.PERMISSIONS_POST_NOTIFICATIONS:\n        // handle notification permission on API level >= 33\n        // dialogue was dismissed -> prompt for storage permissions\n        PermissionUtil.requestExternalStoragePermission(self, viewThemeUtils: viewThemeUtils)\n    case PermissionUtil.PERMISSIONS_EXTERNAL_STORAGE:\n        // If request is cancelled, result arrays are empty.\n        if grantResults.count > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED {\n            // permission was granted\n            EventBus.getDefault().post(TokenPushEvent())\n            syncAndUpdateFolder(true)\n            // toggle on is save since this is the only scenario this code gets accessed\n        }\n    case PermissionUtil.PERMISSIONS_CAMERA:\n        // If request is cancelled, result arrays are empty.\n        if grantResults.count > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED {\n            // permission was granted\n            getOCFileListFragmentFromFile().directCameraUpload()\n        }\n    default:\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\n    }\n}\n```"
    },
    {
        "method_name": "switchToSearchFragment",
        "method_code": "private void switchToSearchFragment(Bundle savedInstanceState) {\n        if (savedInstanceState == null) {\n            OCFileListFragment listOfFiles = new OCFileListFragment();\n            Bundle args = new Bundle();\n\n            args.putParcelable(OCFileListFragment.SEARCH_EVENT,\n                               IntentExtensionsKt.getParcelableArgument(getIntent(),\n                                                                        OCFileListFragment.SEARCH_EVENT,\n                                                                        SearchEvent.class));\n            args.putBoolean(OCFileListFragment.ARG_ALLOW_CONTEXTUAL_ACTIONS, true);\n\n            listOfFiles.setArguments(args);\n            FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n            transaction.add(R.id.left_fragment_container, listOfFiles, TAG_LIST_OF_FILES);\n            transaction.commit();\n        } else {\n            getSupportFragmentManager().findFragmentByTag(TAG_LIST_OF_FILES);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled switchToSearchFragment from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: switchToSearchFragment\n\n        Method Code: private void switchToSearchFragment(Bundle savedInstanceState) {\n        if (savedInstanceState == null) {\n            OCFileListFragment listOfFiles = new OCFileListFragment();\n            Bundle args = new Bundle();\n\n            args.putParcelable(OCFileListFragment.SEARCH_EVENT,\n                               IntentExtensionsKt.getParcelableArgument(getIntent(),\n                                                                        OCFileListFragment.SEARCH_EVENT,\n                                                                        SearchEvent.class));\n            args.putBoolean(OCFileListFragment.ARG_ALLOW_CONTEXTUAL_ACTIONS, true);\n\n            listOfFiles.setArguments(args);\n            FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n            transaction.add(R.id.left_fragment_container, listOfFiles, TAG_LIST_OF_FILES);\n            transaction.commit();\n        } else {\n            getSupportFragmentManager().findFragmentByTag(TAG_LIST_OF_FILES);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func switchToSearchFragment(savedInstanceState: Bundle?) {\n    if savedInstanceState == nil {\n        let listOfFiles = OCFileListFragment()\n        var args = Bundle()\n\n        if let searchEvent = getIntent().getParcelableArgument(key: OCFileListFragment.SEARCH_EVENT, type: SearchEvent.self) {\n            args.putParcelable(OCFileListFragment.SEARCH_EVENT, searchEvent)\n        }\n        args.putBoolean(OCFileListFragment.ARG_ALLOW_CONTEXTUAL_ACTIONS, true)\n\n        listOfFiles.arguments = args\n        let transaction = supportFragmentManager.beginTransaction()\n        transaction.add(R.id.left_fragment_container, listOfFiles, TAG_LIST_OF_FILES)\n        transaction.commit()\n    } else {\n        _ = supportFragmentManager.findFragment(byTag: TAG_LIST_OF_FILES)\n    }\n}\n```"
    },
    {
        "method_name": "createMinFragments",
        "method_code": "private void createMinFragments(Bundle savedInstanceState) {\n        if (savedInstanceState == null) {\n            OCFileListFragment listOfFiles = new OCFileListFragment();\n            Bundle args = new Bundle();\n            args.putBoolean(OCFileListFragment.ARG_ALLOW_CONTEXTUAL_ACTIONS, true);\n            listOfFiles.setArguments(args);\n            FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n            transaction.add(R.id.left_fragment_container, listOfFiles, TAG_LIST_OF_FILES);\n            transaction.commit();\n        } else {\n            getSupportFragmentManager().findFragmentByTag(TAG_LIST_OF_FILES);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled createMinFragments from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: createMinFragments\n\n        Method Code: private void createMinFragments(Bundle savedInstanceState) {\n        if (savedInstanceState == null) {\n            OCFileListFragment listOfFiles = new OCFileListFragment();\n            Bundle args = new Bundle();\n            args.putBoolean(OCFileListFragment.ARG_ALLOW_CONTEXTUAL_ACTIONS, true);\n            listOfFiles.setArguments(args);\n            FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n            transaction.add(R.id.left_fragment_container, listOfFiles, TAG_LIST_OF_FILES);\n            transaction.commit();\n        } else {\n            getSupportFragmentManager().findFragmentByTag(TAG_LIST_OF_FILES);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func createMinFragments(savedInstanceState: Bundle?) {\n    if savedInstanceState == nil {\n        let listOfFiles = OCFileListFragment()\n        var args = Bundle()\n        args.putBoolean(OCFileListFragment.ARG_ALLOW_CONTEXTUAL_ACTIONS, true)\n        listOfFiles.arguments = args\n        let transaction = self.supportFragmentManager.beginTransaction()\n        transaction.add(R.id.left_fragment_container, listOfFiles, TAG_LIST_OF_FILES)\n        transaction.commit()\n    } else {\n        self.supportFragmentManager.findFragment(byTag: TAG_LIST_OF_FILES)\n    }\n}\n```"
    },
    {
        "method_name": "initFragments",
        "method_code": "private void initFragments() {\n        /// First fragment\n        OCFileListFragment listOfFiles = getListOfFilesFragment();\n        if (listOfFiles != null && TextUtils.isEmpty(searchQuery)) {\n            listOfFiles.listDirectory(getCurrentDir(), getFile(), MainApp.isOnlyOnDevice(), false);\n        } else {\n            Log_OC.e(TAG, \"Still have a chance to lose the initialization of list fragment >(\");\n        }\n\n        /// reset views\n        resetTitleBarAndScrolling();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled initFragments from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: initFragments\n\n        Method Code: private void initFragments() {\n        /// First fragment\n        OCFileListFragment listOfFiles = getListOfFilesFragment();\n        if (listOfFiles != null && TextUtils.isEmpty(searchQuery)) {\n            listOfFiles.listDirectory(getCurrentDir(), getFile(), MainApp.isOnlyOnDevice(), false);\n        } else {\n            Log_OC.e(TAG, \"Still have a chance to lose the initialization of list fragment >(\");\n        }\n\n        /// reset views\n        resetTitleBarAndScrolling();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func initFragments() {\n    /// First fragment\n    if let listOfFiles = getListOfFilesFragment(), searchQuery.isEmpty {\n        listOfFiles.listDirectory(getCurrentDir(), getFile(), MainApp.isOnlyOnDevice(), false)\n    } else {\n        Log_OC.e(TAG, \"Still have a chance to lose the initialization of list fragment >(\")\n    }\n\n    /// reset views\n    resetTitleBarAndScrolling()\n}\n```"
    },
    {
        "method_name": "onNewIntent",
        "method_code": "@Override\n    protected void onNewIntent(Intent intent) {\n        super.onNewIntent(intent);\n        setIntent(intent);\n\n        if (ACTION_DETAILS.equalsIgnoreCase(intent.getAction())) {\n            OCFile file = IntentExtensionsKt.getParcelableArgument(intent, EXTRA_FILE, OCFile.class);\n            setFile(file);\n            setIntent(intent);\n            showDetails(file);\n        } else if (Intent.ACTION_VIEW.equals(intent.getAction())) {\n            handleOpenFileViaIntent(intent);\n        } else if (OPEN_FILE.equals(intent.getAction())) {\n            onOpenFileIntent(intent);\n        } else if (RESTART.equals(intent.getAction())) {\n            finish();\n            startActivity(intent);\n        } else {\n            // Verify the action and get the query\n            if (Intent.ACTION_SEARCH.equals(intent.getAction())) {\n                setIntent(intent);\n\n                SearchEvent searchEvent = IntentExtensionsKt.getParcelableArgument(intent, OCFileListFragment.SEARCH_EVENT, SearchEvent.class);\n                if (searchEvent != null) {\n                    if (SearchRemoteOperation.SearchType.PHOTO_SEARCH == searchEvent.getSearchType()) {\n                        Log_OC.d(this, \"Switch to photo search fragment\");\n\n                        GalleryFragment photoFragment = new GalleryFragment();\n                        Bundle bundle = new Bundle();\n                        bundle.putParcelable(OCFileListFragment.SEARCH_EVENT, searchEvent);\n                        photoFragment.setArguments(bundle);\n                        setLeftFragment(photoFragment);\n                    } else if (searchEvent.getSearchType() == SearchRemoteOperation.SearchType.SHARED_FILTER) {\n                        Log_OC.d(this, \"Switch to shared fragment\");\n                        SharedListFragment sharedListFragment = new SharedListFragment();\n                        Bundle bundle = new Bundle();\n                        bundle.putParcelable(OCFileListFragment.SEARCH_EVENT, searchEvent);\n                        sharedListFragment.setArguments(bundle);\n                        setLeftFragment(sharedListFragment);\n                    } else {\n                        Log_OC.d(this, \"Switch to oc file search fragment\");\n\n                        OCFileListFragment photoFragment = new OCFileListFragment();\n                        Bundle bundle = new Bundle();\n                        bundle.putParcelable(OCFileListFragment.SEARCH_EVENT, searchEvent);\n                        photoFragment.setArguments(bundle);\n                        setLeftFragment(photoFragment);\n                    }\n                }\n            } else if (ALL_FILES.equals(intent.getAction())) {\n                Log_OC.d(this, \"Switch to oc file fragment\");\n                DrawerActivity.menuItemId = R.id.nav_all_files;\n                setLeftFragment(new OCFileListFragment());\n                getSupportFragmentManager().executePendingTransactions();\n                browseToRoot();\n            } else if (LIST_GROUPFOLDERS.equals(intent.getAction())) {\n                Log_OC.d(this, \"Switch to list groupfolders fragment\");\n                DrawerActivity.menuItemId = R.id.nav_groupfolders;\n                setLeftFragment(new GroupfolderListFragment());\n                getSupportFragmentManager().executePendingTransactions();\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onNewIntent from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onNewIntent\n\n        Method Code: @Override\n    protected void onNewIntent(Intent intent) {\n        super.onNewIntent(intent);\n        setIntent(intent);\n\n        if (ACTION_DETAILS.equalsIgnoreCase(intent.getAction())) {\n            OCFile file = IntentExtensionsKt.getParcelableArgument(intent, EXTRA_FILE, OCFile.class);\n            setFile(file);\n            setIntent(intent);\n            showDetails(file);\n        } else if (Intent.ACTION_VIEW.equals(intent.getAction())) {\n            handleOpenFileViaIntent(intent);\n        } else if (OPEN_FILE.equals(intent.getAction())) {\n            onOpenFileIntent(intent);\n        } else if (RESTART.equals(intent.getAction())) {\n            finish();\n            startActivity(intent);\n        } else {\n            // Verify the action and get the query\n            if (Intent.ACTION_SEARCH.equals(intent.getAction())) {\n                setIntent(intent);\n\n                SearchEvent searchEvent = IntentExtensionsKt.getParcelableArgument(intent, OCFileListFragment.SEARCH_EVENT, SearchEvent.class);\n                if (searchEvent != null) {\n                    if (SearchRemoteOperation.SearchType.PHOTO_SEARCH == searchEvent.getSearchType()) {\n                        Log_OC.d(this, \"Switch to photo search fragment\");\n\n                        GalleryFragment photoFragment = new GalleryFragment();\n                        Bundle bundle = new Bundle();\n                        bundle.putParcelable(OCFileListFragment.SEARCH_EVENT, searchEvent);\n                        photoFragment.setArguments(bundle);\n                        setLeftFragment(photoFragment);\n                    } else if (searchEvent.getSearchType() == SearchRemoteOperation.SearchType.SHARED_FILTER) {\n                        Log_OC.d(this, \"Switch to shared fragment\");\n                        SharedListFragment sharedListFragment = new SharedListFragment();\n                        Bundle bundle = new Bundle();\n                        bundle.putParcelable(OCFileListFragment.SEARCH_EVENT, searchEvent);\n                        sharedListFragment.setArguments(bundle);\n                        setLeftFragment(sharedListFragment);\n                    } else {\n                        Log_OC.d(this, \"Switch to oc file search fragment\");\n\n                        OCFileListFragment photoFragment = new OCFileListFragment();\n                        Bundle bundle = new Bundle();\n                        bundle.putParcelable(OCFileListFragment.SEARCH_EVENT, searchEvent);\n                        photoFragment.setArguments(bundle);\n                        setLeftFragment(photoFragment);\n                    }\n                }\n            } else if (ALL_FILES.equals(intent.getAction())) {\n                Log_OC.d(this, \"Switch to oc file fragment\");\n                DrawerActivity.menuItemId = R.id.nav_all_files;\n                setLeftFragment(new OCFileListFragment());\n                getSupportFragmentManager().executePendingTransactions();\n                browseToRoot();\n            } else if (LIST_GROUPFOLDERS.equals(intent.getAction())) {\n                Log_OC.d(this, \"Switch to list groupfolders fragment\");\n                DrawerActivity.menuItemId = R.id.nav_groupfolders;\n                setLeftFragment(new GroupfolderListFragment());\n                getSupportFragmentManager().executePendingTransactions();\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onNewIntent(_ intent: Intent) {\n    super.onNewIntent(intent)\n    setIntent(intent)\n\n    if intent.action?.caseInsensitiveCompare(ACTION_DETAILS) == .orderedSame {\n        if let file: OCFile = intent.getParcelableArgument(EXTRA_FILE, OCFile.self) {\n            setFile(file)\n            setIntent(intent)\n            showDetails(file)\n        }\n    } else if intent.action == Intent.ACTION_VIEW {\n        handleOpenFileViaIntent(intent)\n    } else if intent.action == OPEN_FILE {\n        onOpenFileIntent(intent)\n    } else if intent.action == RESTART {\n        finish()\n        startActivity(intent)\n    } else {\n        if intent.action == Intent.ACTION_SEARCH {\n            setIntent(intent)\n\n            if let searchEvent: SearchEvent = intent.getParcelableArgument(OCFileListFragment.SEARCH_EVENT, SearchEvent.self) {\n                switch searchEvent.searchType {\n                case .PHOTO_SEARCH:\n                    Log_OC.d(self, \"Switch to photo search fragment\")\n                    let photoFragment = GalleryFragment()\n                    let bundle = Bundle()\n                    bundle.putParcelable(OCFileListFragment.SEARCH_EVENT, searchEvent)\n                    photoFragment.arguments = bundle\n                    setLeftFragment(photoFragment)\n                case .SHARED_FILTER:\n                    Log_OC.d(self, \"Switch to shared fragment\")\n                    let sharedListFragment = SharedListFragment()\n                    let bundle = Bundle()\n                    bundle.putParcelable(OCFileListFragment.SEARCH_EVENT, searchEvent)\n                    sharedListFragment.arguments = bundle\n                    setLeftFragment(sharedListFragment)\n                default:\n                    Log_OC.d(self, \"Switch to oc file search fragment\")\n                    let photoFragment = OCFileListFragment()\n                    let bundle = Bundle()\n                    bundle.putParcelable(OCFileListFragment.SEARCH_EVENT, searchEvent)\n                    photoFragment.arguments = bundle\n                    setLeftFragment(photoFragment)\n                }\n            }\n        } else if intent.action == ALL_FILES {\n            Log_OC.d(self, \"Switch to oc file fragment\")\n            DrawerActivity.menuItemId = R.id.nav_all_files\n            setLeftFragment(OCFileListFragment())\n            getSupportFragmentManager().executePendingTransactions()\n            browseToRoot()\n        } else if intent.action == LIST_GROUPFOLDERS {\n            Log_OC.d(self, \"Switch to list groupfolders fragment\")\n            DrawerActivity.menuItemId = R.id.nav_groupfolders\n            setLeftFragment(GroupfolderListFragment())\n            getSupportFragmentManager().executePendingTransactions()\n        }\n    }\n}\n```"
    },
    {
        "method_name": "onOpenFileIntent",
        "method_code": "private void onOpenFileIntent(Intent intent) {\n        String extra = intent.getStringExtra(EXTRA_FILE);\n        OCFile file = getStorageManager().getFileByDecryptedRemotePath(extra);\n        if (file != null) {\n            OCFileListFragment fileFragment;\n            final Fragment leftFragment = getLeftFragment();\n            if (leftFragment instanceof OCFileListFragment) {\n                fileFragment = (OCFileListFragment) leftFragment;\n            } else {\n                fileFragment = new OCFileListFragment();\n                setLeftFragment(fileFragment);\n            }\n            fileFragment.onItemClicked(file);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onOpenFileIntent from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onOpenFileIntent\n\n        Method Code: private void onOpenFileIntent(Intent intent) {\n        String extra = intent.getStringExtra(EXTRA_FILE);\n        OCFile file = getStorageManager().getFileByDecryptedRemotePath(extra);\n        if (file != null) {\n            OCFileListFragment fileFragment;\n            final Fragment leftFragment = getLeftFragment();\n            if (leftFragment instanceof OCFileListFragment) {\n                fileFragment = (OCFileListFragment) leftFragment;\n            } else {\n                fileFragment = new OCFileListFragment();\n                setLeftFragment(fileFragment);\n            }\n            fileFragment.onItemClicked(file);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func onOpenFileIntent(intent: Intent) {\n    if let extra = intent.getStringExtra(EXTRA_FILE) {\n        if let file = getStorageManager().getFileByDecryptedRemotePath(extra) {\n            var fileFragment: OCFileListFragment\n            let leftFragment = getLeftFragment()\n            if let existingFragment = leftFragment as? OCFileListFragment {\n                fileFragment = existingFragment\n            } else {\n                fileFragment = OCFileListFragment()\n                setLeftFragment(fileFragment)\n            }\n            fileFragment.onItemClicked(file)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "setLeftFragment",
        "method_code": "private void setLeftFragment(Fragment fragment) {\n        setLeftFragment(fragment, true);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setLeftFragment from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: setLeftFragment\n\n        Method Code: private void setLeftFragment(Fragment fragment) {\n        setLeftFragment(fragment, true);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setLeftFragment(_ fragment: Fragment) {\n    setLeftFragment(fragment, true)\n}\n```"
    },
    {
        "method_name": "setLeftFragment",
        "method_code": "private void setLeftFragment(Fragment fragment, boolean showSortListGroup) {\n        if (searchView != null) {\n            searchView.post(() -> searchView.setQuery(searchQuery, true));\n        }\n        setDrawerIndicatorEnabled(false);\n\n        //clear the subtitle while navigating to any other screen from Media screen\n        clearToolbarSubtitle();\n\n        showSortListGroup(showSortListGroup);\n\n        FragmentManager fragmentManager = getSupportFragmentManager();\n        if (ActivityExtensionsKt.isActive(this) && !fragmentManager.isDestroyed()) {\n            FragmentTransaction transaction = fragmentManager.beginTransaction();\n            transaction.addToBackStack(null);\n            transaction.replace(R.id.left_fragment_container, fragment, TAG_LIST_OF_FILES);\n            transaction.commit();\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setLeftFragment from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: setLeftFragment\n\n        Method Code: private void setLeftFragment(Fragment fragment, boolean showSortListGroup) {\n        if (searchView != null) {\n            searchView.post(() -> searchView.setQuery(searchQuery, true));\n        }\n        setDrawerIndicatorEnabled(false);\n\n        //clear the subtitle while navigating to any other screen from Media screen\n        clearToolbarSubtitle();\n\n        showSortListGroup(showSortListGroup);\n\n        FragmentManager fragmentManager = getSupportFragmentManager();\n        if (ActivityExtensionsKt.isActive(this) && !fragmentManager.isDestroyed()) {\n            FragmentTransaction transaction = fragmentManager.beginTransaction();\n            transaction.addToBackStack(null);\n            transaction.replace(R.id.left_fragment_container, fragment, TAG_LIST_OF_FILES);\n            transaction.commit();\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setLeftFragment(fragment: Fragment, showSortListGroup: Bool) {\n    if let searchView = searchView {\n        searchView.post {\n            searchView.setQuery(searchQuery, true)\n        }\n    }\n    setDrawerIndicatorEnabled(false)\n    \n    clearToolbarSubtitle()\n    \n    showSortListGroup(showSortListGroup)\n    \n    let fragmentManager = supportFragmentManager\n    if self.isActive() && !fragmentManager.isDestroyed {\n        let transaction = fragmentManager.beginTransaction()\n        transaction.addToBackStack(nil)\n        transaction.replace(R.id.left_fragment_container, fragment, TAG_LIST_OF_FILES)\n        transaction.commit()\n    }\n}\n```"
    },
    {
        "method_name": "getOCFileListFragmentFromFile",
        "method_code": "private OCFileListFragment getOCFileListFragmentFromFile() {\n        final Fragment leftFragment = getLeftFragment();\n        OCFileListFragment listOfFiles;\n\n        if (leftFragment instanceof OCFileListFragment) {\n            listOfFiles = (OCFileListFragment) leftFragment;\n        } else {\n            listOfFiles = new OCFileListFragment();\n            Bundle args = new Bundle();\n            args.putBoolean(OCFileListFragment.ARG_ALLOW_CONTEXTUAL_ACTIONS, true);\n            listOfFiles.setArguments(args);\n\n            FragmentManager fm = getSupportFragmentManager();\n            boolean isExecutingTransactions = !fm.isStateSaved() && !fm.executePendingTransactions();\n\n            if (isExecutingTransactions) {\n                setLeftFragment(listOfFiles);\n                fm.executePendingTransactions();\n            } else {\n                new Handler(Looper.getMainLooper()).post(() -> {\n                    setLeftFragment(listOfFiles);\n                    fm.executePendingTransactions();\n                });\n            }\n        }\n\n        return listOfFiles;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getOCFileListFragmentFromFile from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: getOCFileListFragmentFromFile\n\n        Method Code: private OCFileListFragment getOCFileListFragmentFromFile() {\n        final Fragment leftFragment = getLeftFragment();\n        OCFileListFragment listOfFiles;\n\n        if (leftFragment instanceof OCFileListFragment) {\n            listOfFiles = (OCFileListFragment) leftFragment;\n        } else {\n            listOfFiles = new OCFileListFragment();\n            Bundle args = new Bundle();\n            args.putBoolean(OCFileListFragment.ARG_ALLOW_CONTEXTUAL_ACTIONS, true);\n            listOfFiles.setArguments(args);\n\n            FragmentManager fm = getSupportFragmentManager();\n            boolean isExecutingTransactions = !fm.isStateSaved() && !fm.executePendingTransactions();\n\n            if (isExecutingTransactions) {\n                setLeftFragment(listOfFiles);\n                fm.executePendingTransactions();\n            } else {\n                new Handler(Looper.getMainLooper()).post(() -> {\n                    setLeftFragment(listOfFiles);\n                    fm.executePendingTransactions();\n                });\n            }\n        }\n\n        return listOfFiles;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getOCFileListFragmentFromFile() -> OCFileListFragment {\n    let leftFragment = getLeftFragment()\n    var listOfFiles: OCFileListFragment\n\n    if let leftFragment = leftFragment as? OCFileListFragment {\n        listOfFiles = leftFragment\n    } else {\n        listOfFiles = OCFileListFragment()\n        var args = Bundle()\n        args.setValue(true, forKey: OCFileListFragment.ARG_ALLOW_CONTEXTUAL_ACTIONS)\n        listOfFiles.setArguments(args)\n\n        let fm = getSupportFragmentManager()\n        let isExecutingTransactions = !fm.isStateSaved && !fm.executePendingTransactions()\n\n        if isExecutingTransactions {\n            setLeftFragment(listOfFiles)\n            fm.executePendingTransactions()\n        } else {\n            DispatchQueue.main.async {\n                self.setLeftFragment(listOfFiles)\n                fm.executePendingTransactions()\n            }\n        }\n    }\n\n    return listOfFiles\n}\n```"
    },
    {
        "method_name": "showFileActions",
        "method_code": "public void showFileActions(OCFile file) {\n        dismissLoadingDialog();\n        OCFileListFragment listOfFiles = getOCFileListFragmentFromFile();\n        browseUp(listOfFiles);\n        listOfFiles.onOverflowIconClicked(file, null);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showFileActions from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: showFileActions\n\n        Method Code: public void showFileActions(OCFile file) {\n        dismissLoadingDialog();\n        OCFileListFragment listOfFiles = getOCFileListFragmentFromFile();\n        browseUp(listOfFiles);\n        listOfFiles.onOverflowIconClicked(file, null);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc showFileActions(file: OCFile) {\n    dismissLoadingDialog()\n    let listOfFiles = getOCFileListFragmentFromFile()\n    browseUp(listOfFiles: listOfFiles)\n    listOfFiles.onOverflowIconClicked(file: file, sender: nil)\n}\n```"
    },
    {
        "method_name": "getLeftFragment",
        "method_code": "public @androidx.annotation.Nullable Fragment getLeftFragment() {\n        return getSupportFragmentManager().findFragmentByTag(FileDisplayActivity.TAG_LIST_OF_FILES);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getLeftFragment from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: getLeftFragment\n\n        Method Code: public @androidx.annotation.Nullable Fragment getLeftFragment() {\n        return getSupportFragmentManager().findFragmentByTag(FileDisplayActivity.TAG_LIST_OF_FILES);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getLeftFragment() -> Fragment? {\n    return supportFragmentManager.findFragment(byTag: FileDisplayActivity.TAG_LIST_OF_FILES)\n}\n```"
    },
    {
        "method_name": "getListOfFilesFragment",
        "method_code": "public @androidx.annotation.Nullable\n    @Deprecated OCFileListFragment getListOfFilesFragment() {\n        Fragment listOfFiles = getSupportFragmentManager().findFragmentByTag(FileDisplayActivity.TAG_LIST_OF_FILES);\n        if (listOfFiles instanceof OCFileListFragment) {\n            return (OCFileListFragment) listOfFiles;\n        }\n        Log_OC.e(TAG, \"Access to unexisting list of files fragment!!\");\n        return null;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getListOfFilesFragment from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: getListOfFilesFragment\n\n        Method Code: public @androidx.annotation.Nullable\n    @Deprecated OCFileListFragment getListOfFilesFragment() {\n        Fragment listOfFiles = getSupportFragmentManager().findFragmentByTag(FileDisplayActivity.TAG_LIST_OF_FILES);\n        if (listOfFiles instanceof OCFileListFragment) {\n            return (OCFileListFragment) listOfFiles;\n        }\n        Log_OC.e(TAG, \"Access to unexisting list of files fragment!!\");\n        return null;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\n@available(*, deprecated)\nfunc getListOfFilesFragment() -> OCFileListFragment? {\n    let listOfFiles = self.supportFragmentManager.findFragment(byTag: FileDisplayActivity.TAG_LIST_OF_FILES)\n    if let fileListFragment = listOfFiles as? OCFileListFragment {\n        return fileListFragment\n    }\n    Log_OC.e(TAG, \"Access to unexisting list of files fragment!!\")\n    return nil\n}\n```"
    },
    {
        "method_name": "resetTitleBarAndScrolling",
        "method_code": "protected void resetTitleBarAndScrolling() {\n        updateActionBarTitleAndHomeButton(null);\n        resetScrolling(true);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled resetTitleBarAndScrolling from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: resetTitleBarAndScrolling\n\n        Method Code: protected void resetTitleBarAndScrolling() {\n        updateActionBarTitleAndHomeButton(null);\n        resetScrolling(true);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc resetTitleBarAndScrolling() {\n    updateActionBarTitleAndHomeButton(nil)\n    resetScrolling(true)\n}\n```"
    },
    {
        "method_name": "updateListOfFilesFragment",
        "method_code": "public void updateListOfFilesFragment(boolean fromSearch) {\n        OCFileListFragment fileListFragment = getListOfFilesFragment();\n        if (fileListFragment != null) {\n            fileListFragment.listDirectory(MainApp.isOnlyOnDevice(), fromSearch);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled updateListOfFilesFragment from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: updateListOfFilesFragment\n\n        Method Code: public void updateListOfFilesFragment(boolean fromSearch) {\n        OCFileListFragment fileListFragment = getListOfFilesFragment();\n        if (fileListFragment != null) {\n            fileListFragment.listDirectory(MainApp.isOnlyOnDevice(), fromSearch);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc updateListOfFilesFragment(fromSearch: Bool) {\n    if let fileListFragment = getListOfFilesFragment() {\n        fileListFragment.listDirectory(MainApp.isOnlyOnDevice(), fromSearch: fromSearch)\n    }\n}\n```"
    },
    {
        "method_name": "resetSearchView",
        "method_code": "public void resetSearchView() {\n        OCFileListFragment fileListFragment = getListOfFilesFragment();\n\n        if (fileListFragment != null) {\n            fileListFragment.setSearchFragment(false);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled resetSearchView from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: resetSearchView\n\n        Method Code: public void resetSearchView() {\n        OCFileListFragment fileListFragment = getListOfFilesFragment();\n\n        if (fileListFragment != null) {\n            fileListFragment.setSearchFragment(false);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc resetSearchView() {\n    if let fileListFragment = getListOfFilesFragment() {\n        fileListFragment.setSearchFragment(false)\n    }\n}\n```"
    },
    {
        "method_name": "refreshDetailsFragmentIfVisible",
        "method_code": "protected void refreshDetailsFragmentIfVisible(String downloadEvent, String downloadedRemotePath, boolean success) {\n        Fragment leftFragment = getLeftFragment();\n        if (leftFragment instanceof FileDetailFragment) {\n            boolean waitedPreview = mWaitingToPreview != null && mWaitingToPreview.getRemotePath().equals(downloadedRemotePath);\n            FileDetailFragment detailsFragment = (FileDetailFragment) leftFragment;\n            OCFile fileInFragment = detailsFragment.getFile();\n            if (fileInFragment != null && !downloadedRemotePath.equals(fileInFragment.getRemotePath())) {\n                // the user browsed to other file ; forget the automatic preview\n                mWaitingToPreview = null;\n\n            } else if (downloadEvent.equals(FileDownloadWorker.Companion.getDownloadAddedMessage())) {\n                // grant that the details fragment updates the progress bar\n                detailsFragment.listenForTransferProgress();\n                detailsFragment.updateFileDetails(true, false);\n\n            } else if (downloadEvent.equals(FileDownloadWorker.Companion.getDownloadFinishMessage())) {\n                //  update the details panel\n                boolean detailsFragmentChanged = false;\n                if (waitedPreview) {\n                    if (success) {\n                        // update the file from database, for the local storage path\n                        mWaitingToPreview = getStorageManager().getFileById(mWaitingToPreview.getFileId());\n\n                        if (PreviewMediaActivity.Companion.canBePreviewed(mWaitingToPreview)) {\n                            startMediaPreview(mWaitingToPreview, 0, true, true, true, true);\n                            detailsFragmentChanged = true;\n                        } else if (MimeTypeUtil.isVCard(mWaitingToPreview.getMimeType())) {\n                            startContactListFragment(mWaitingToPreview);\n                            detailsFragmentChanged = true;\n                        } else if (PreviewTextFileFragment.canBePreviewed(mWaitingToPreview)) {\n                            startTextPreview(mWaitingToPreview, true);\n                            detailsFragmentChanged = true;\n                        } else if (MimeTypeUtil.isPDF(mWaitingToPreview)) {\n                            startPdfPreview(mWaitingToPreview);\n                            detailsFragmentChanged = true;\n                        } else {\n                            getFileOperationsHelper().openFile(mWaitingToPreview);\n                        }\n                    }\n                    mWaitingToPreview = null;\n                }\n                if (!detailsFragmentChanged) {\n                    detailsFragment.updateFileDetails(false, success);\n                }\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled refreshDetailsFragmentIfVisible from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: refreshDetailsFragmentIfVisible\n\n        Method Code: protected void refreshDetailsFragmentIfVisible(String downloadEvent, String downloadedRemotePath, boolean success) {\n        Fragment leftFragment = getLeftFragment();\n        if (leftFragment instanceof FileDetailFragment) {\n            boolean waitedPreview = mWaitingToPreview != null && mWaitingToPreview.getRemotePath().equals(downloadedRemotePath);\n            FileDetailFragment detailsFragment = (FileDetailFragment) leftFragment;\n            OCFile fileInFragment = detailsFragment.getFile();\n            if (fileInFragment != null && !downloadedRemotePath.equals(fileInFragment.getRemotePath())) {\n                // the user browsed to other file ; forget the automatic preview\n                mWaitingToPreview = null;\n\n            } else if (downloadEvent.equals(FileDownloadWorker.Companion.getDownloadAddedMessage())) {\n                // grant that the details fragment updates the progress bar\n                detailsFragment.listenForTransferProgress();\n                detailsFragment.updateFileDetails(true, false);\n\n            } else if (downloadEvent.equals(FileDownloadWorker.Companion.getDownloadFinishMessage())) {\n                //  update the details panel\n                boolean detailsFragmentChanged = false;\n                if (waitedPreview) {\n                    if (success) {\n                        // update the file from database, for the local storage path\n                        mWaitingToPreview = getStorageManager().getFileById(mWaitingToPreview.getFileId());\n\n                        if (PreviewMediaActivity.Companion.canBePreviewed(mWaitingToPreview)) {\n                            startMediaPreview(mWaitingToPreview, 0, true, true, true, true);\n                            detailsFragmentChanged = true;\n                        } else if (MimeTypeUtil.isVCard(mWaitingToPreview.getMimeType())) {\n                            startContactListFragment(mWaitingToPreview);\n                            detailsFragmentChanged = true;\n                        } else if (PreviewTextFileFragment.canBePreviewed(mWaitingToPreview)) {\n                            startTextPreview(mWaitingToPreview, true);\n                            detailsFragmentChanged = true;\n                        } else if (MimeTypeUtil.isPDF(mWaitingToPreview)) {\n                            startPdfPreview(mWaitingToPreview);\n                            detailsFragmentChanged = true;\n                        } else {\n                            getFileOperationsHelper().openFile(mWaitingToPreview);\n                        }\n                    }\n                    mWaitingToPreview = null;\n                }\n                if (!detailsFragmentChanged) {\n                    detailsFragment.updateFileDetails(false, success);\n                }\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc refreshDetailsFragmentIfVisible(downloadEvent: String, downloadedRemotePath: String, success: Bool) {\n    if let leftFragment = getLeftFragment() as? FileDetailFragment {\n        let waitedPreview = mWaitingToPreview != nil && mWaitingToPreview?.remotePath == downloadedRemotePath\n        if let fileInFragment = leftFragment.getFile(), downloadedRemotePath != fileInFragment.remotePath {\n            mWaitingToPreview = nil\n        } else if downloadEvent == FileDownloadWorker.Companion.downloadAddedMessage {\n            leftFragment.listenForTransferProgress()\n            leftFragment.updateFileDetails(true, false)\n        } else if downloadEvent == FileDownloadWorker.Companion.downloadFinishMessage {\n            var detailsFragmentChanged = false\n            if waitedPreview {\n                if success {\n                    mWaitingToPreview = getStorageManager().getFileById(mWaitingToPreview!.fileId)\n                    if PreviewMediaActivity.Companion.canBePreviewed(mWaitingToPreview) {\n                        startMediaPreview(file: mWaitingToPreview!, position: 0, animated: true, showToolbar: true, showBottomBar: true, showTitle: true)\n                        detailsFragmentChanged = true\n                    } else if MimeTypeUtil.isVCard(mWaitingToPreview!.mimeType) {\n                        startContactListFragment(file: mWaitingToPreview!)\n                        detailsFragmentChanged = true\n                    } else if PreviewTextFileFragment.canBePreviewed(mWaitingToPreview) {\n                        startTextPreview(file: mWaitingToPreview!, animated: true)\n                        detailsFragmentChanged = true\n                    } else if MimeTypeUtil.isPDF(mWaitingToPreview!.mimeType) {\n                        startPdfPreview(file: mWaitingToPreview!)\n                        detailsFragmentChanged = true\n                    } else {\n                        getFileOperationsHelper().openFile(mWaitingToPreview!)\n                    }\n                }\n                mWaitingToPreview = nil\n            }\n            if !detailsFragmentChanged {\n                leftFragment.updateFileDetails(false, success)\n            }\n        }\n    }\n}\n```"
    },
    {
        "method_name": "onPrepareOptionsMenu",
        "method_code": "@Override\n    public boolean onPrepareOptionsMenu(Menu menu) {\n        boolean drawerOpen = isDrawerOpen();\n\n        for (MenuItem menuItem : mDrawerMenuItemstoShowHideList) {\n            menuItem.setVisible(!drawerOpen);\n        }\n\n        return super.onPrepareOptionsMenu(menu);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onPrepareOptionsMenu from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onPrepareOptionsMenu\n\n        Method Code: @Override\n    public boolean onPrepareOptionsMenu(Menu menu) {\n        boolean drawerOpen = isDrawerOpen();\n\n        for (MenuItem menuItem : mDrawerMenuItemstoShowHideList) {\n            menuItem.setVisible(!drawerOpen);\n        }\n\n        return super.onPrepareOptionsMenu(menu);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func prepare(for segue: UIStoryboardSegue, sender: Any?) -> Bool {\n    let drawerOpen = isDrawerOpen()\n\n    for menuItem in mDrawerMenuItemstoShowHideList {\n        menuItem.isVisible = !drawerOpen\n    }\n\n    return super.prepare(for: segue, sender: sender)\n}\n```"
    },
    {
        "method_name": "onCreateOptionsMenu",
        "method_code": "@Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        MenuInflater inflater = getMenuInflater();\n        inflater.inflate(R.menu.activity_file_display, menu);\n\n        menu.findItem(R.id.action_select_all).setVisible(false);\n        MenuItem searchMenuItem = menu.findItem(R.id.action_search);\n        searchView = (SearchView) MenuItemCompat.getActionView(searchMenuItem);\n        searchMenuItem.setVisible(false);\n        mSearchText.setOnClickListener(v -> {\n            showSearchView();\n            searchView.setIconified(false);\n        });\n\n        viewThemeUtils.androidx.themeToolbarSearchView(searchView);\n\n        // populate list of menu items to show/hide when drawer is opened/closed\n        mDrawerMenuItemstoShowHideList = new ArrayList<>(1);\n        mDrawerMenuItemstoShowHideList.add(searchMenuItem);\n\n        //focus the SearchView\n        if (!TextUtils.isEmpty(searchQuery)) {\n            searchView.post(() -> {\n                searchView.setIconified(false);\n                searchView.setQuery(searchQuery, true);\n                searchView.clearFocus();\n            });\n        }\n\n        final View mSearchEditFrame = searchView.findViewById(androidx.appcompat.R.id.search_edit_frame);\n\n        searchView.setOnCloseListener(() -> {\n            if (TextUtils.isEmpty(searchView.getQuery().toString())) {\n                searchView.onActionViewCollapsed();\n                setDrawerIndicatorEnabled(isDrawerIndicatorAvailable()); // order matters\n                getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n                mDrawerToggle.syncState();\n\n                OCFileListFragment ocFileListFragment = getListOfFilesFragment();\n                if (ocFileListFragment != null) {\n                    ocFileListFragment.setSearchFragment(false);\n                    ocFileListFragment.refreshDirectory();\n                }\n            } else {\n                searchView.post(() -> searchView.setQuery(\"\", true));\n            }\n            return true;\n        });\n\n        ViewTreeObserver vto = mSearchEditFrame.getViewTreeObserver();\n        vto.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {\n            int oldVisibility = -1;\n\n            @Override\n            public void onGlobalLayout() {\n\n                int currentVisibility = mSearchEditFrame.getVisibility();\n\n                if (currentVisibility != oldVisibility) {\n                    if (currentVisibility == View.VISIBLE) {\n                        setDrawerIndicatorEnabled(false);\n                    }\n\n                    oldVisibility = currentVisibility;\n                }\n\n            }\n        });\n\n        return super.onCreateOptionsMenu(menu);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreateOptionsMenu from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onCreateOptionsMenu\n\n        Method Code: @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        MenuInflater inflater = getMenuInflater();\n        inflater.inflate(R.menu.activity_file_display, menu);\n\n        menu.findItem(R.id.action_select_all).setVisible(false);\n        MenuItem searchMenuItem = menu.findItem(R.id.action_search);\n        searchView = (SearchView) MenuItemCompat.getActionView(searchMenuItem);\n        searchMenuItem.setVisible(false);\n        mSearchText.setOnClickListener(v -> {\n            showSearchView();\n            searchView.setIconified(false);\n        });\n\n        viewThemeUtils.androidx.themeToolbarSearchView(searchView);\n\n        // populate list of menu items to show/hide when drawer is opened/closed\n        mDrawerMenuItemstoShowHideList = new ArrayList<>(1);\n        mDrawerMenuItemstoShowHideList.add(searchMenuItem);\n\n        //focus the SearchView\n        if (!TextUtils.isEmpty(searchQuery)) {\n            searchView.post(() -> {\n                searchView.setIconified(false);\n                searchView.setQuery(searchQuery, true);\n                searchView.clearFocus();\n            });\n        }\n\n        final View mSearchEditFrame = searchView.findViewById(androidx.appcompat.R.id.search_edit_frame);\n\n        searchView.setOnCloseListener(() -> {\n            if (TextUtils.isEmpty(searchView.getQuery().toString())) {\n                searchView.onActionViewCollapsed();\n                setDrawerIndicatorEnabled(isDrawerIndicatorAvailable()); // order matters\n                getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n                mDrawerToggle.syncState();\n\n                OCFileListFragment ocFileListFragment = getListOfFilesFragment();\n                if (ocFileListFragment != null) {\n                    ocFileListFragment.setSearchFragment(false);\n                    ocFileListFragment.refreshDirectory();\n                }\n            } else {\n                searchView.post(() -> searchView.setQuery(\"\", true));\n            }\n            return true;\n        });\n\n        ViewTreeObserver vto = mSearchEditFrame.getViewTreeObserver();\n        vto.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {\n            int oldVisibility = -1;\n\n            @Override\n            public void onGlobalLayout() {\n\n                int currentVisibility = mSearchEditFrame.getVisibility();\n\n                if (currentVisibility != oldVisibility) {\n                    if (currentVisibility == View.VISIBLE) {\n                        setDrawerIndicatorEnabled(false);\n                    }\n\n                    oldVisibility = currentVisibility;\n                }\n\n            }\n        });\n\n        return super.onCreateOptionsMenu(menu);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onCreateOptionsMenu(_ menu: Menu) -> Bool {\n    let inflater = menuInflater\n    inflater.inflate(R.menu.activity_file_display, menu)\n\n    menu.findItem(R.id.action_select_all)?.isVisible = false\n    let searchMenuItem = menu.findItem(R.id.action_search)\n    searchView = searchMenuItem?.actionView as? UISearchBar\n    searchMenuItem?.isVisible = false\n    mSearchText.addTarget(self, action: #selector(showSearchView), for: .touchUpInside)\n\n    viewThemeUtils.androidx.themeToolbarSearchView(searchView)\n\n    mDrawerMenuItemstoShowHideList = [searchMenuItem].compactMap { $0 }\n\n    if !searchQuery.isEmpty {\n        searchView?.post {\n            self.searchView?.isIconified = false\n            self.searchView?.text = self.searchQuery\n            self.searchView?.resignFirstResponder()\n        }\n    }\n\n    let mSearchEditFrame = searchView?.value(forKey: \"searchField\") as? UIView\n\n    searchView?.delegate = self\n\n    let vto = mSearchEditFrame?.viewTreeObserver\n    vto?.addOnGlobalLayoutListener {\n        var oldVisibility = -1\n\n        let currentVisibility = mSearchEditFrame?.isHidden == true ? View.GONE : View.VISIBLE\n\n        if currentVisibility != oldVisibility {\n            if currentVisibility == View.VISIBLE {\n                self.setDrawerIndicatorEnabled(false)\n            }\n\n            oldVisibility = currentVisibility\n        }\n    }\n\n    return super.onCreateOptionsMenu(menu)\n}\n\n@objc func showSearchView() {\n    searchView?.isIconified = false\n}\n\nfunc searchBarShouldEndEditing(_ searchBar: UISearchBar) -> Bool {\n    if searchBar.text?.isEmpty ?? true {\n        searchBar.resignFirstResponder()\n        setDrawerIndicatorEnabled(isDrawerIndicatorAvailable())\n        navigationController?.navigationBar.topItem?.hidesBackButton = false\n        mDrawerToggle.syncState()\n\n        if let ocFileListFragment = getListOfFilesFragment() {\n            ocFileListFragment.setSearchFragment(false)\n            ocFileListFragment.refreshDirectory()\n        }\n    } else {\n        searchBar.text = \"\"\n    }\n    return true\n}\n```"
    },
    {
        "method_name": "onGlobalLayout",
        "method_code": "@Override\n            public void onGlobalLayout() {\n\n                int currentVisibility = mSearchEditFrame.getVisibility();\n\n                if (currentVisibility != oldVisibility) {\n                    if (currentVisibility == View.VISIBLE) {\n                        setDrawerIndicatorEnabled(false);\n                    }\n\n                    oldVisibility = currentVisibility;\n                }\n\n            }",
        "prompt": "\n        Please translate the following Java (Android) method titled onGlobalLayout from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onGlobalLayout\n\n        Method Code: @Override\n            public void onGlobalLayout() {\n\n                int currentVisibility = mSearchEditFrame.getVisibility();\n\n                if (currentVisibility != oldVisibility) {\n                    if (currentVisibility == View.VISIBLE) {\n                        setDrawerIndicatorEnabled(false);\n                    }\n\n                    oldVisibility = currentVisibility;\n                }\n\n            }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onGlobalLayout() {\n    let currentVisibility = mSearchEditFrame.isHidden ? View.GONE : View.VISIBLE\n\n    if currentVisibility != oldVisibility {\n        if currentVisibility == View.VISIBLE {\n            setDrawerIndicatorEnabled(false)\n        }\n\n        oldVisibility = currentVisibility\n    }\n}\n```"
    },
    {
        "method_name": "onOptionsItemSelected",
        "method_code": "@Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        boolean retval = true;\n\n        int itemId = item.getItemId();\n\n        if (itemId == android.R.id.home) {\n            if (!isDrawerOpen() && !isSearchOpen() && isRoot(getCurrentDir()) && getLeftFragment() instanceof OCFileListFragment) {\n                openDrawer();\n            } else {\n                onBackPressed();\n            }\n        } else if (itemId == R.id.action_select_all) {\n            OCFileListFragment fragment = getListOfFilesFragment();\n\n            if (fragment != null) {\n                fragment.selectAllFiles(true);\n            }\n        } else {\n            retval = super.onOptionsItemSelected(item);\n        }\n\n        return retval;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onOptionsItemSelected from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onOptionsItemSelected\n\n        Method Code: @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        boolean retval = true;\n\n        int itemId = item.getItemId();\n\n        if (itemId == android.R.id.home) {\n            if (!isDrawerOpen() && !isSearchOpen() && isRoot(getCurrentDir()) && getLeftFragment() instanceof OCFileListFragment) {\n                openDrawer();\n            } else {\n                onBackPressed();\n            }\n        } else if (itemId == R.id.action_select_all) {\n            OCFileListFragment fragment = getListOfFilesFragment();\n\n            if (fragment != null) {\n                fragment.selectAllFiles(true);\n            }\n        } else {\n            retval = super.onOptionsItemSelected(item);\n        }\n\n        return retval;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onOptionsItemSelected(_ item: MenuItem) -> Bool {\n    var retval = true\n\n    let itemId = item.itemId\n\n    if itemId == android.R.id.home {\n        if !isDrawerOpen() && !isSearchOpen() && isRoot(getCurrentDir()) && getLeftFragment() is OCFileListFragment {\n            openDrawer()\n        } else {\n            onBackPressed()\n        }\n    } else if itemId == R.id.action_select_all {\n        if let fragment = getListOfFilesFragment() {\n            fragment.selectAllFiles(true)\n        }\n    } else {\n        retval = super.onOptionsItemSelected(item)\n    }\n\n    return retval\n}\n```"
    },
    {
        "method_name": "onActivityResult",
        "method_code": "@Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        if (requestCode == REQUEST_CODE__SELECT_CONTENT_FROM_APPS && (resultCode == RESULT_OK || resultCode == UploadFilesActivity.RESULT_OK_AND_MOVE)) {\n\n            requestUploadOfContentFromApps(data, resultCode);\n\n        } else if (requestCode == REQUEST_CODE__SELECT_FILES_FROM_FILE_SYSTEM && (resultCode == RESULT_OK || resultCode == UploadFilesActivity.RESULT_OK_AND_MOVE || resultCode == UploadFilesActivity.RESULT_OK_AND_DO_NOTHING || resultCode == UploadFilesActivity.RESULT_OK_AND_DELETE)) {\n\n            requestUploadOfFilesFromFileSystem(data, resultCode);\n\n        } else if ((requestCode == REQUEST_CODE__UPLOAD_FROM_CAMERA || requestCode == REQUEST_CODE__UPLOAD_FROM_VIDEO_CAMERA) && (resultCode == RESULT_OK || resultCode == UploadFilesActivity.RESULT_OK_AND_DELETE)) {\n\n            new CheckAvailableSpaceTask(new CheckAvailableSpaceTask.CheckAvailableSpaceListener() {\n                @Override\n                public void onCheckAvailableSpaceStart() {\n                    Log_OC.d(this, \"onCheckAvailableSpaceStart\");\n                }\n\n                @Override\n                public void onCheckAvailableSpaceFinish(boolean hasEnoughSpaceAvailable, String... filesToUpload) {\n                    Log_OC.d(this, \"onCheckAvailableSpaceFinish\");\n\n                    if (hasEnoughSpaceAvailable) {\n                        File file = new File(filesToUpload[0]);\n                        File renamedFile;\n                        if (requestCode == REQUEST_CODE__UPLOAD_FROM_CAMERA) {\n                            renamedFile = new File(file.getParent() + PATH_SEPARATOR + FileOperationsHelper.getCapturedImageName());\n                        } else {\n                            renamedFile = new File(file.getParent() + PATH_SEPARATOR + FileOperationsHelper.getCapturedVideoName());\n                        }\n\n                        if (!file.renameTo(renamedFile)) {\n                            DisplayUtils.showSnackMessage(getActivity(), R.string.error_uploading_direct_camera_upload);\n                            return;\n                        }\n\n                        requestUploadOfFilesFromFileSystem(renamedFile.getParentFile().getAbsolutePath(), new String[]{renamedFile.getAbsolutePath()}, FileUploadWorker.LOCAL_BEHAVIOUR_DELETE);\n                    }\n                }\n            }, new String[]{FileOperationsHelper.createCameraFile(getActivity(), requestCode == REQUEST_CODE__UPLOAD_FROM_VIDEO_CAMERA).getAbsolutePath()}).execute();\n        } else if (requestCode == REQUEST_CODE__MOVE_OR_COPY_FILES && resultCode == RESULT_OK) {\n            exitSelectionMode();\n        } else if (requestCode == PermissionUtil.REQUEST_CODE_MANAGE_ALL_FILES) {\n            syncAndUpdateFolder(true);\n        } else {\n            super.onActivityResult(requestCode, resultCode, data);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onActivityResult from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onActivityResult\n\n        Method Code: @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        if (requestCode == REQUEST_CODE__SELECT_CONTENT_FROM_APPS && (resultCode == RESULT_OK || resultCode == UploadFilesActivity.RESULT_OK_AND_MOVE)) {\n\n            requestUploadOfContentFromApps(data, resultCode);\n\n        } else if (requestCode == REQUEST_CODE__SELECT_FILES_FROM_FILE_SYSTEM && (resultCode == RESULT_OK || resultCode == UploadFilesActivity.RESULT_OK_AND_MOVE || resultCode == UploadFilesActivity.RESULT_OK_AND_DO_NOTHING || resultCode == UploadFilesActivity.RESULT_OK_AND_DELETE)) {\n\n            requestUploadOfFilesFromFileSystem(data, resultCode);\n\n        } else if ((requestCode == REQUEST_CODE__UPLOAD_FROM_CAMERA || requestCode == REQUEST_CODE__UPLOAD_FROM_VIDEO_CAMERA) && (resultCode == RESULT_OK || resultCode == UploadFilesActivity.RESULT_OK_AND_DELETE)) {\n\n            new CheckAvailableSpaceTask(new CheckAvailableSpaceTask.CheckAvailableSpaceListener() {\n                @Override\n                public void onCheckAvailableSpaceStart() {\n                    Log_OC.d(this, \"onCheckAvailableSpaceStart\");\n                }\n\n                @Override\n                public void onCheckAvailableSpaceFinish(boolean hasEnoughSpaceAvailable, String... filesToUpload) {\n                    Log_OC.d(this, \"onCheckAvailableSpaceFinish\");\n\n                    if (hasEnoughSpaceAvailable) {\n                        File file = new File(filesToUpload[0]);\n                        File renamedFile;\n                        if (requestCode == REQUEST_CODE__UPLOAD_FROM_CAMERA) {\n                            renamedFile = new File(file.getParent() + PATH_SEPARATOR + FileOperationsHelper.getCapturedImageName());\n                        } else {\n                            renamedFile = new File(file.getParent() + PATH_SEPARATOR + FileOperationsHelper.getCapturedVideoName());\n                        }\n\n                        if (!file.renameTo(renamedFile)) {\n                            DisplayUtils.showSnackMessage(getActivity(), R.string.error_uploading_direct_camera_upload);\n                            return;\n                        }\n\n                        requestUploadOfFilesFromFileSystem(renamedFile.getParentFile().getAbsolutePath(), new String[]{renamedFile.getAbsolutePath()}, FileUploadWorker.LOCAL_BEHAVIOUR_DELETE);\n                    }\n                }\n            }, new String[]{FileOperationsHelper.createCameraFile(getActivity(), requestCode == REQUEST_CODE__UPLOAD_FROM_VIDEO_CAMERA).getAbsolutePath()}).execute();\n        } else if (requestCode == REQUEST_CODE__MOVE_OR_COPY_FILES && resultCode == RESULT_OK) {\n            exitSelectionMode();\n        } else if (requestCode == PermissionUtil.REQUEST_CODE_MANAGE_ALL_FILES) {\n            syncAndUpdateFolder(true);\n        } else {\n            super.onActivityResult(requestCode, resultCode, data);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n    if requestCode == REQUEST_CODE__SELECT_CONTENT_FROM_APPS && (resultCode == RESULT_OK || resultCode == UploadFilesActivity.RESULT_OK_AND_MOVE) {\n        \n        requestUploadOfContentFromApps(data, resultCode: resultCode)\n        \n    } else if requestCode == REQUEST_CODE__SELECT_FILES_FROM_FILE_SYSTEM && (resultCode == RESULT_OK || resultCode == UploadFilesActivity.RESULT_OK_AND_MOVE || resultCode == UploadFilesActivity.RESULT_OK_AND_DO_NOTHING || resultCode == UploadFilesActivity.RESULT_OK_AND_DELETE) {\n        \n        requestUploadOfFilesFromFileSystem(data, resultCode: resultCode)\n        \n    } else if (requestCode == REQUEST_CODE__UPLOAD_FROM_CAMERA || requestCode == REQUEST_CODE__UPLOAD_FROM_VIDEO_CAMERA) && (resultCode == RESULT_OK || resultCode == UploadFilesActivity.RESULT_OK_AND_DELETE) {\n        \n        CheckAvailableSpaceTask(listener: CheckAvailableSpaceTask.CheckAvailableSpaceListener(\n            onCheckAvailableSpaceStart: {\n                Log_OC.d(self, \"onCheckAvailableSpaceStart\")\n            },\n            onCheckAvailableSpaceFinish: { hasEnoughSpaceAvailable, filesToUpload in\n                Log_OC.d(self, \"onCheckAvailableSpaceFinish\")\n                \n                if hasEnoughSpaceAvailable {\n                    let file = File(filesToUpload[0])\n                    let renamedFile: File\n                    if requestCode == REQUEST_CODE__UPLOAD_FROM_CAMERA {\n                        renamedFile = File(file.getParent() + PATH_SEPARATOR + FileOperationsHelper.getCapturedImageName())\n                    } else {\n                        renamedFile = File(file.getParent() + PATH_SEPARATOR + FileOperationsHelper.getCapturedVideoName())\n                    }\n                    \n                    if !file.renameTo(renamedFile) {\n                        DisplayUtils.showSnackMessage(getActivity(), R.string.error_uploading_direct_camera_upload)\n                        return\n                    }\n                    \n                    requestUploadOfFilesFromFileSystem(renamedFile.getParentFile().getAbsolutePath(), files: [renamedFile.getAbsolutePath()], localBehaviour: FileUploadWorker.LOCAL_BEHAVIOUR_DELETE)\n                }\n            }\n        ), files: [FileOperationsHelper.createCameraFile(getActivity(), isVideo: requestCode == REQUEST_CODE__UPLOAD_FROM_VIDEO_CAMERA).getAbsolutePath()]).execute()\n        \n    } else if requestCode == REQUEST_CODE__MOVE_OR_COPY_FILES && resultCode == RESULT_OK {\n        exitSelectionMode()\n    } else if requestCode == PermissionUtil.REQUEST_CODE_MANAGE_ALL_FILES {\n        syncAndUpdateFolder(true)\n    } else {\n        super.onActivityResult(requestCode, resultCode, data)\n    }\n}\n```"
    },
    {
        "method_name": "onCheckAvailableSpaceStart",
        "method_code": "@Override\n                public void onCheckAvailableSpaceStart() {\n                    Log_OC.d(this, \"onCheckAvailableSpaceStart\");\n                }",
        "prompt": "\n        Please translate the following Java (Android) method titled onCheckAvailableSpaceStart from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onCheckAvailableSpaceStart\n\n        Method Code: @Override\n                public void onCheckAvailableSpaceStart() {\n                    Log_OC.d(this, \"onCheckAvailableSpaceStart\");\n                }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onCheckAvailableSpaceStart() {\n    Log_OC.d(self, \"onCheckAvailableSpaceStart\")\n}\n```"
    },
    {
        "method_name": "onCheckAvailableSpaceFinish",
        "method_code": "@Override\n                public void onCheckAvailableSpaceFinish(boolean hasEnoughSpaceAvailable, String... filesToUpload) {\n                    Log_OC.d(this, \"onCheckAvailableSpaceFinish\");\n\n                    if (hasEnoughSpaceAvailable) {\n                        File file = new File(filesToUpload[0]);\n                        File renamedFile;\n                        if (requestCode == REQUEST_CODE__UPLOAD_FROM_CAMERA) {\n                            renamedFile = new File(file.getParent() + PATH_SEPARATOR + FileOperationsHelper.getCapturedImageName());\n                        } else {\n                            renamedFile = new File(file.getParent() + PATH_SEPARATOR + FileOperationsHelper.getCapturedVideoName());\n                        }\n\n                        if (!file.renameTo(renamedFile)) {\n                            DisplayUtils.showSnackMessage(getActivity(), R.string.error_uploading_direct_camera_upload);\n                            return;\n                        }\n\n                        requestUploadOfFilesFromFileSystem(renamedFile.getParentFile().getAbsolutePath(), new String[]{renamedFile.getAbsolutePath()}, FileUploadWorker.LOCAL_BEHAVIOUR_DELETE);\n                    }\n                }",
        "prompt": "\n        Please translate the following Java (Android) method titled onCheckAvailableSpaceFinish from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onCheckAvailableSpaceFinish\n\n        Method Code: @Override\n                public void onCheckAvailableSpaceFinish(boolean hasEnoughSpaceAvailable, String... filesToUpload) {\n                    Log_OC.d(this, \"onCheckAvailableSpaceFinish\");\n\n                    if (hasEnoughSpaceAvailable) {\n                        File file = new File(filesToUpload[0]);\n                        File renamedFile;\n                        if (requestCode == REQUEST_CODE__UPLOAD_FROM_CAMERA) {\n                            renamedFile = new File(file.getParent() + PATH_SEPARATOR + FileOperationsHelper.getCapturedImageName());\n                        } else {\n                            renamedFile = new File(file.getParent() + PATH_SEPARATOR + FileOperationsHelper.getCapturedVideoName());\n                        }\n\n                        if (!file.renameTo(renamedFile)) {\n                            DisplayUtils.showSnackMessage(getActivity(), R.string.error_uploading_direct_camera_upload);\n                            return;\n                        }\n\n                        requestUploadOfFilesFromFileSystem(renamedFile.getParentFile().getAbsolutePath(), new String[]{renamedFile.getAbsolutePath()}, FileUploadWorker.LOCAL_BEHAVIOUR_DELETE);\n                    }\n                }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onCheckAvailableSpaceFinish(hasEnoughSpaceAvailable: Bool, filesToUpload: String...) {\n    print(\"onCheckAvailableSpaceFinish\")\n\n    if hasEnoughSpaceAvailable {\n        let file = File(filesToUpload[0])\n        var renamedFile: File\n        if requestCode == REQUEST_CODE__UPLOAD_FROM_CAMERA {\n            renamedFile = File(file.parent + PATH_SEPARATOR + FileOperationsHelper.getCapturedImageName())\n        } else {\n            renamedFile = File(file.parent + PATH_SEPARATOR + FileOperationsHelper.getCapturedVideoName())\n        }\n\n        if !file.renameTo(renamedFile) {\n            DisplayUtils.showSnackMessage(getActivity(), R.string.error_uploading_direct_camera_upload)\n            return\n        }\n\n        requestUploadOfFilesFromFileSystem(renamedFile.parentFile.absolutePath, [renamedFile.absolutePath], FileUploadWorker.LOCAL_BEHAVIOUR_DELETE)\n    }\n}\n```"
    },
    {
        "method_name": "exitSelectionMode",
        "method_code": "private void exitSelectionMode() {\n        OCFileListFragment ocFileListFragment = getListOfFilesFragment();\n        if (ocFileListFragment != null) {\n            ocFileListFragment.exitSelectionMode();\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled exitSelectionMode from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: exitSelectionMode\n\n        Method Code: private void exitSelectionMode() {\n        OCFileListFragment ocFileListFragment = getListOfFilesFragment();\n        if (ocFileListFragment != null) {\n            ocFileListFragment.exitSelectionMode();\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func exitSelectionMode() {\n    if let ocFileListFragment = getListOfFilesFragment() {\n        ocFileListFragment.exitSelectionMode()\n    }\n}\n```"
    },
    {
        "method_name": "requestUploadOfFilesFromFileSystem",
        "method_code": "private void requestUploadOfFilesFromFileSystem(Intent data, int resultCode) {\n        String[] filePaths = data.getStringArrayExtra(UploadFilesActivity.EXTRA_CHOSEN_FILES);\n        String basePath = data.getStringExtra(UploadFilesActivity.LOCAL_BASE_PATH);\n        requestUploadOfFilesFromFileSystem(basePath, filePaths, resultCode);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled requestUploadOfFilesFromFileSystem from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: requestUploadOfFilesFromFileSystem\n\n        Method Code: private void requestUploadOfFilesFromFileSystem(Intent data, int resultCode) {\n        String[] filePaths = data.getStringArrayExtra(UploadFilesActivity.EXTRA_CHOSEN_FILES);\n        String basePath = data.getStringExtra(UploadFilesActivity.LOCAL_BASE_PATH);\n        requestUploadOfFilesFromFileSystem(basePath, filePaths, resultCode);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func requestUploadOfFilesFromFileSystem(data: Intent, resultCode: Int) {\n    if let filePaths = data.getStringArrayExtra(UploadFilesActivity.EXTRA_CHOSEN_FILES),\n       let basePath = data.getStringExtra(UploadFilesActivity.LOCAL_BASE_PATH) {\n        requestUploadOfFilesFromFileSystem(basePath: basePath, filePaths: filePaths, resultCode: resultCode)\n    }\n}\n```"
    },
    {
        "method_name": "getRemotePaths",
        "method_code": "private String[] getRemotePaths(String directory, String[] filePaths, String localBasePath) {\n        String[] remotePaths = new String[filePaths.length];\n        for (int j = 0; j < remotePaths.length; j++) {\n            String relativePath = StringUtils.removePrefix(filePaths[j], localBasePath);\n            remotePaths[j] = directory + relativePath;\n        }\n\n        return remotePaths;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getRemotePaths from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: getRemotePaths\n\n        Method Code: private String[] getRemotePaths(String directory, String[] filePaths, String localBasePath) {\n        String[] remotePaths = new String[filePaths.length];\n        for (int j = 0; j < remotePaths.length; j++) {\n            String relativePath = StringUtils.removePrefix(filePaths[j], localBasePath);\n            remotePaths[j] = directory + relativePath;\n        }\n\n        return remotePaths;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getRemotePaths(directory: String, filePaths: [String], localBasePath: String) -> [String] {\n    var remotePaths = [String](repeating: \"\", count: filePaths.count)\n    for j in 0..<remotePaths.count {\n        let relativePath = filePaths[j].replacingOccurrences(of: localBasePath, with: \"\")\n        remotePaths[j] = directory + relativePath\n    }\n    return remotePaths\n}\n```"
    },
    {
        "method_name": "requestUploadOfFilesFromFileSystem",
        "method_code": "private void requestUploadOfFilesFromFileSystem(String localBasePath, String[] filePaths, int resultCode) {\n        if (localBasePath != null && filePaths != null) {\n            if (!localBasePath.endsWith(\"/\")) {\n                localBasePath = localBasePath + \"/\";\n            }\n\n            String remotePathBase = getCurrentDir().getRemotePath();\n            String[] decryptedRemotePaths = getRemotePaths(remotePathBase, filePaths, localBasePath);\n\n            int behaviour = switch (resultCode) {\n                case UploadFilesActivity.RESULT_OK_AND_MOVE -> FileUploadWorker.LOCAL_BEHAVIOUR_MOVE;\n                case UploadFilesActivity.RESULT_OK_AND_DELETE -> FileUploadWorker.LOCAL_BEHAVIOUR_DELETE;\n                default -> FileUploadWorker.LOCAL_BEHAVIOUR_FORGET;\n            };\n\n            connectivityService.isNetworkAndServerAvailable(result -> {\n                if (result) {\n                    boolean isValidFolderPath = FileNameValidator.INSTANCE.checkFolderPath(remotePathBase,getCapabilities(),this);\n                    if (!isValidFolderPath) {\n                        DisplayUtils.showSnackMessage(this, R.string.file_name_validator_error_contains_reserved_names_or_invalid_characters);\n                        return;\n                    }\n\n                    FileUploadHelper.Companion.instance().uploadNewFiles(getUser().orElseThrow(RuntimeException::new),\n                                                                         filePaths,\n                                                                         decryptedRemotePaths,\n                                                                         behaviour,\n                                                                         true,\n                                                                         UploadFileOperation.CREATED_BY_USER,\n                                                                         false,\n                                                                         false,\n                                                                         NameCollisionPolicy.ASK_USER);\n                } else {\n                    fileDataStorageManager.addCreateFileOfflineOperation(filePaths, decryptedRemotePaths);\n                }\n            });\n        } else {\n            Log_OC.d(TAG, \"User clicked on 'Update' with no selection\");\n            DisplayUtils.showSnackMessage(this, R.string.filedisplay_no_file_selected);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled requestUploadOfFilesFromFileSystem from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: requestUploadOfFilesFromFileSystem\n\n        Method Code: private void requestUploadOfFilesFromFileSystem(String localBasePath, String[] filePaths, int resultCode) {\n        if (localBasePath != null && filePaths != null) {\n            if (!localBasePath.endsWith(\"/\")) {\n                localBasePath = localBasePath + \"/\";\n            }\n\n            String remotePathBase = getCurrentDir().getRemotePath();\n            String[] decryptedRemotePaths = getRemotePaths(remotePathBase, filePaths, localBasePath);\n\n            int behaviour = switch (resultCode) {\n                case UploadFilesActivity.RESULT_OK_AND_MOVE -> FileUploadWorker.LOCAL_BEHAVIOUR_MOVE;\n                case UploadFilesActivity.RESULT_OK_AND_DELETE -> FileUploadWorker.LOCAL_BEHAVIOUR_DELETE;\n                default -> FileUploadWorker.LOCAL_BEHAVIOUR_FORGET;\n            };\n\n            connectivityService.isNetworkAndServerAvailable(result -> {\n                if (result) {\n                    boolean isValidFolderPath = FileNameValidator.INSTANCE.checkFolderPath(remotePathBase,getCapabilities(),this);\n                    if (!isValidFolderPath) {\n                        DisplayUtils.showSnackMessage(this, R.string.file_name_validator_error_contains_reserved_names_or_invalid_characters);\n                        return;\n                    }\n\n                    FileUploadHelper.Companion.instance().uploadNewFiles(getUser().orElseThrow(RuntimeException::new),\n                                                                         filePaths,\n                                                                         decryptedRemotePaths,\n                                                                         behaviour,\n                                                                         true,\n                                                                         UploadFileOperation.CREATED_BY_USER,\n                                                                         false,\n                                                                         false,\n                                                                         NameCollisionPolicy.ASK_USER);\n                } else {\n                    fileDataStorageManager.addCreateFileOfflineOperation(filePaths, decryptedRemotePaths);\n                }\n            });\n        } else {\n            Log_OC.d(TAG, \"User clicked on 'Update' with no selection\");\n            DisplayUtils.showSnackMessage(this, R.string.filedisplay_no_file_selected);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func requestUploadOfFilesFromFileSystem(localBasePath: String?, filePaths: [String]?, resultCode: Int) {\n    guard var localBasePath = localBasePath, let filePaths = filePaths else {\n        Log_OC.d(TAG, \"User clicked on 'Update' with no selection\")\n        DisplayUtils.showSnackMessage(self, R.string.filedisplay_no_file_selected)\n        return\n    }\n    \n    if !localBasePath.hasSuffix(\"/\") {\n        localBasePath += \"/\"\n    }\n    \n    let remotePathBase = getCurrentDir().remotePath\n    let decryptedRemotePaths = getRemotePaths(remotePathBase: remotePathBase, filePaths: filePaths, localBasePath: localBasePath)\n    \n    let behaviour: Int\n    switch resultCode {\n    case UploadFilesActivity.RESULT_OK_AND_MOVE:\n        behaviour = FileUploadWorker.LOCAL_BEHAVIOUR_MOVE\n    case UploadFilesActivity.RESULT_OK_AND_DELETE:\n        behaviour = FileUploadWorker.LOCAL_BEHAVIOUR_DELETE\n    default:\n        behaviour = FileUploadWorker.LOCAL_BEHAVIOUR_FORGET\n    }\n    \n    connectivityService.isNetworkAndServerAvailable { result in\n        if result {\n            let isValidFolderPath = FileNameValidator.INSTANCE.checkFolderPath(remotePathBase, getCapabilities(), self)\n            if !isValidFolderPath {\n                DisplayUtils.showSnackMessage(self, R.string.file_name_validator_error_contains_reserved_names_or_invalid_characters)\n                return\n            }\n            \n            FileUploadHelper.Companion.instance().uploadNewFiles(\n                getUser().orElseThrow { RuntimeException() },\n                filePaths: filePaths,\n                decryptedRemotePaths: decryptedRemotePaths,\n                behaviour: behaviour,\n                true,\n                UploadFileOperation.CREATED_BY_USER,\n                false,\n                false,\n                NameCollisionPolicy.ASK_USER\n            )\n        } else {\n            fileDataStorageManager.addCreateFileOfflineOperation(filePaths, decryptedRemotePaths)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "requestUploadOfContentFromApps",
        "method_code": "private void requestUploadOfContentFromApps(Intent contentIntent, int resultCode) {\n\n        ArrayList<Parcelable> streamsToUpload = new ArrayList<>();\n\n        if (contentIntent.getClipData() != null && contentIntent.getClipData().getItemCount() > 0) {\n\n            for (int i = 0; i < contentIntent.getClipData().getItemCount(); i++) {\n                streamsToUpload.add(contentIntent.getClipData().getItemAt(i).getUri());\n            }\n\n        } else {\n            streamsToUpload.add(contentIntent.getData());\n        }\n\n        int behaviour = (resultCode == UploadFilesActivity.RESULT_OK_AND_MOVE) ? FileUploadWorker.LOCAL_BEHAVIOUR_MOVE : FileUploadWorker.LOCAL_BEHAVIOUR_COPY;\n\n        OCFile currentDir = getCurrentDir();\n        String remotePath = (currentDir != null) ? currentDir.getRemotePath() : OCFile.ROOT_PATH;\n\n        UriUploader uploader = new UriUploader(this, streamsToUpload, remotePath, getUser().orElseThrow(RuntimeException::new), behaviour, false, // Not show waiting dialog while file is being copied from private storage\n                                               null  // Not needed copy temp task listener\n        );\n\n        uploader.uploadUris();\n\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled requestUploadOfContentFromApps from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: requestUploadOfContentFromApps\n\n        Method Code: private void requestUploadOfContentFromApps(Intent contentIntent, int resultCode) {\n\n        ArrayList<Parcelable> streamsToUpload = new ArrayList<>();\n\n        if (contentIntent.getClipData() != null && contentIntent.getClipData().getItemCount() > 0) {\n\n            for (int i = 0; i < contentIntent.getClipData().getItemCount(); i++) {\n                streamsToUpload.add(contentIntent.getClipData().getItemAt(i).getUri());\n            }\n\n        } else {\n            streamsToUpload.add(contentIntent.getData());\n        }\n\n        int behaviour = (resultCode == UploadFilesActivity.RESULT_OK_AND_MOVE) ? FileUploadWorker.LOCAL_BEHAVIOUR_MOVE : FileUploadWorker.LOCAL_BEHAVIOUR_COPY;\n\n        OCFile currentDir = getCurrentDir();\n        String remotePath = (currentDir != null) ? currentDir.getRemotePath() : OCFile.ROOT_PATH;\n\n        UriUploader uploader = new UriUploader(this, streamsToUpload, remotePath, getUser().orElseThrow(RuntimeException::new), behaviour, false, // Not show waiting dialog while file is being copied from private storage\n                                               null  // Not needed copy temp task listener\n        );\n\n        uploader.uploadUris();\n\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func requestUploadOfContentFromApps(contentIntent: Intent, resultCode: Int) {\n    var streamsToUpload: [Parcelable] = []\n\n    if let clipData = contentIntent.clipData, clipData.itemCount > 0 {\n        for i in 0..<clipData.itemCount {\n            if let uri = clipData.getItemAt(i).uri {\n                streamsToUpload.append(uri)\n            }\n        }\n    } else if let data = contentIntent.data {\n        streamsToUpload.append(data)\n    }\n\n    let behaviour = (resultCode == UploadFilesActivity.RESULT_OK_AND_MOVE) ? FileUploadWorker.LOCAL_BEHAVIOUR_MOVE : FileUploadWorker.LOCAL_BEHAVIOUR_COPY\n\n    let currentDir = getCurrentDir()\n    let remotePath = currentDir?.remotePath ?? OCFile.ROOT_PATH\n\n    guard let user = getUser() else {\n        fatalError(\"User not found\")\n    }\n\n    let uploader = UriUploader(context: self, uris: streamsToUpload, remotePath: remotePath, user: user, behaviour: behaviour, showWaitingDialog: false, copyTempTaskListener: nil)\n\n    uploader.uploadUris()\n}\n```"
    },
    {
        "method_name": "isSearchOpen",
        "method_code": "private boolean isSearchOpen() {\n        if (searchView == null) {\n            return false;\n        } else {\n            View mSearchEditFrame = searchView.findViewById(androidx.appcompat.R.id.search_edit_frame);\n            return mSearchEditFrame != null && mSearchEditFrame.getVisibility() == View.VISIBLE;\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled isSearchOpen from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: isSearchOpen\n\n        Method Code: private boolean isSearchOpen() {\n        if (searchView == null) {\n            return false;\n        } else {\n            View mSearchEditFrame = searchView.findViewById(androidx.appcompat.R.id.search_edit_frame);\n            return mSearchEditFrame != null && mSearchEditFrame.getVisibility() == View.VISIBLE;\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func isSearchOpen() -> Bool {\n    guard let searchView = searchView else {\n        return false\n    }\n    if let mSearchEditFrame = searchView.viewWithTag(androidx.appcompat.R.id.search_edit_frame) {\n        return mSearchEditFrame.isHidden == false\n    }\n    return false\n}\n```"
    },
    {
        "method_name": "isRootDirectory",
        "method_code": "private Boolean isRootDirectory() {\n        OCFile currentDir = getCurrentDir();\n        return (currentDir == null || currentDir.getParentId() == FileDataStorageManager.ROOT_PARENT_ID);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled isRootDirectory from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: isRootDirectory\n\n        Method Code: private Boolean isRootDirectory() {\n        OCFile currentDir = getCurrentDir();\n        return (currentDir == null || currentDir.getParentId() == FileDataStorageManager.ROOT_PARENT_ID);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func isRootDirectory() -> Bool {\n    let currentDir = getCurrentDir()\n    return currentDir == nil || currentDir?.getParentId() == FileDataStorageManager.ROOT_PARENT_ID\n}\n```"
    },
    {
        "method_name": "onBackPressed",
        "method_code": "@SuppressFBWarnings(\"ITC_INHERITANCE_TYPE_CHECKING\")\n    @Override\n    // TODO Apply fail fast principle\n    public void onBackPressed() {\n        if (isSearchOpen()) {\n            resetSearchAction();\n            return;\n        }\n\n        if (isDrawerOpen()) {\n            super.onBackPressed();\n            return;\n        }\n\n        if (getLeftFragment() instanceof OCFileListFragment listOfFiles) {\n            if (isRoot(getCurrentDir())) {\n                finish();\n            } else {\n                browseUp(listOfFiles);\n            }\n        } else {\n            popBack();\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onBackPressed from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onBackPressed\n\n        Method Code: @SuppressFBWarnings(\"ITC_INHERITANCE_TYPE_CHECKING\")\n    @Override\n    // TODO Apply fail fast principle\n    public void onBackPressed() {\n        if (isSearchOpen()) {\n            resetSearchAction();\n            return;\n        }\n\n        if (isDrawerOpen()) {\n            super.onBackPressed();\n            return;\n        }\n\n        if (getLeftFragment() instanceof OCFileListFragment listOfFiles) {\n            if (isRoot(getCurrentDir())) {\n                finish();\n            } else {\n                browseUp(listOfFiles);\n            }\n        } else {\n            popBack();\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onBackPressed() {\n    if isSearchOpen() {\n        resetSearchAction()\n        return\n    }\n\n    if isDrawerOpen() {\n        super.onBackPressed()\n        return\n    }\n\n    if let listOfFiles = getLeftFragment() as? OCFileListFragment {\n        if isRoot(getCurrentDir()) {\n            finish()\n        } else {\n            browseUp(listOfFiles)\n        }\n    } else {\n        popBack()\n    }\n}\n```"
    },
    {
        "method_name": "browseUp",
        "method_code": "private void browseUp(OCFileListFragment listOfFiles) {\n        listOfFiles.onBrowseUp();\n        setFile(listOfFiles.getCurrentFile());\n        listOfFiles.setFabVisible(true);\n        listOfFiles.registerFabListener();\n        resetTitleBarAndScrolling();\n        setDrawerAllFiles();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled browseUp from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: browseUp\n\n        Method Code: private void browseUp(OCFileListFragment listOfFiles) {\n        listOfFiles.onBrowseUp();\n        setFile(listOfFiles.getCurrentFile());\n        listOfFiles.setFabVisible(true);\n        listOfFiles.registerFabListener();\n        resetTitleBarAndScrolling();\n        setDrawerAllFiles();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func browseUp(listOfFiles: OCFileListFragment) {\n    listOfFiles.onBrowseUp()\n    setFile(file: listOfFiles.getCurrentFile())\n    listOfFiles.setFabVisible(true)\n    listOfFiles.registerFabListener()\n    resetTitleBarAndScrolling()\n    setDrawerAllFiles()\n}\n```"
    },
    {
        "method_name": "resetSearchAction",
        "method_code": "private void resetSearchAction() {\n        Fragment leftFragment = getLeftFragment();\n        if (isSearchOpen() && searchView != null) {\n            searchView.setQuery(\"\", true);\n            searchView.onActionViewCollapsed();\n            searchView.clearFocus();\n\n            if (isRoot(getCurrentDir()) && leftFragment instanceof OCFileListFragment listOfFiles) {\n\n                // Remove the list to the original state\n                ArrayList<String> listOfHiddenFiles = listOfFiles.getAdapter().listOfHiddenFiles;\n                listOfFiles.performSearch(\"\", listOfHiddenFiles, true);\n\n                hideSearchView(getCurrentDir());\n                setDrawerIndicatorEnabled(isDrawerIndicatorAvailable());\n            }\n            if (leftFragment instanceof UnifiedSearchFragment) {\n                showSortListGroup(false);\n                super.onBackPressed();\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled resetSearchAction from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: resetSearchAction\n\n        Method Code: private void resetSearchAction() {\n        Fragment leftFragment = getLeftFragment();\n        if (isSearchOpen() && searchView != null) {\n            searchView.setQuery(\"\", true);\n            searchView.onActionViewCollapsed();\n            searchView.clearFocus();\n\n            if (isRoot(getCurrentDir()) && leftFragment instanceof OCFileListFragment listOfFiles) {\n\n                // Remove the list to the original state\n                ArrayList<String> listOfHiddenFiles = listOfFiles.getAdapter().listOfHiddenFiles;\n                listOfFiles.performSearch(\"\", listOfHiddenFiles, true);\n\n                hideSearchView(getCurrentDir());\n                setDrawerIndicatorEnabled(isDrawerIndicatorAvailable());\n            }\n            if (leftFragment instanceof UnifiedSearchFragment) {\n                showSortListGroup(false);\n                super.onBackPressed();\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func resetSearchAction() {\n    let leftFragment = getLeftFragment()\n    if isSearchOpen(), let searchView = searchView {\n        searchView.setQuery(\"\", submit: true)\n        searchView.onActionViewCollapsed()\n        searchView.clearFocus()\n\n        if isRoot(getCurrentDir()), let listOfFiles = leftFragment as? OCFileListFragment {\n            let listOfHiddenFiles = listOfFiles.getAdapter().listOfHiddenFiles\n            listOfFiles.performSearch(\"\", listOfHiddenFiles, true)\n\n            hideSearchView(getCurrentDir())\n            setDrawerIndicatorEnabled(isDrawerIndicatorAvailable())\n        }\n        if leftFragment is UnifiedSearchFragment {\n            showSortListGroup(false)\n            super.onBackPressed()\n        }\n    }\n}\n```"
    },
    {
        "method_name": "popBack",
        "method_code": "private void popBack() {\n        binding.fabMain.setImageResource(R.drawable.ic_plus);\n        resetScrolling(true);\n        showSortListGroup(false);\n        super.onBackPressed();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled popBack from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: popBack\n\n        Method Code: private void popBack() {\n        binding.fabMain.setImageResource(R.drawable.ic_plus);\n        resetScrolling(true);\n        showSortListGroup(false);\n        super.onBackPressed();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func popBack() {\n    binding.fabMain.setImage(UIImage(named: \"ic_plus\"), for: .normal)\n    resetScrolling(true)\n    showSortListGroup(false)\n    super.back()\n}\n```"
    },
    {
        "method_name": "onSaveInstanceState",
        "method_code": "@Override\n    protected void onSaveInstanceState(@NonNull Bundle outState) {\n        // responsibility of restore is preferred in onCreate() before than in\n        // onRestoreInstanceState when there are Fragments involved\n        super.onSaveInstanceState(outState);\n        FileExtensionsKt.logFileSize(mWaitingToPreview, TAG);\n        outState.putParcelable(FileDisplayActivity.KEY_WAITING_TO_PREVIEW, mWaitingToPreview);\n        outState.putBoolean(FileDisplayActivity.KEY_SYNC_IN_PROGRESS, mSyncInProgress);\n        // outState.putBoolean(FileDisplayActivity.KEY_REFRESH_SHARES_IN_PROGRESS,\n        // mRefreshSharesInProgress);\n        outState.putParcelable(FileDisplayActivity.KEY_WAITING_TO_SEND, mWaitingToSend);\n        if (searchView != null) {\n            outState.putBoolean(KEY_IS_SEARCH_OPEN, !searchView.isIconified());\n        }\n        outState.putString(KEY_SEARCH_QUERY, searchQuery);\n        outState.putBoolean(KEY_IS_SORT_GROUP_VISIBLE, sortListGroupVisibility());\n        Log_OC.v(TAG, \"onSaveInstanceState() end\");\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onSaveInstanceState from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onSaveInstanceState\n\n        Method Code: @Override\n    protected void onSaveInstanceState(@NonNull Bundle outState) {\n        // responsibility of restore is preferred in onCreate() before than in\n        // onRestoreInstanceState when there are Fragments involved\n        super.onSaveInstanceState(outState);\n        FileExtensionsKt.logFileSize(mWaitingToPreview, TAG);\n        outState.putParcelable(FileDisplayActivity.KEY_WAITING_TO_PREVIEW, mWaitingToPreview);\n        outState.putBoolean(FileDisplayActivity.KEY_SYNC_IN_PROGRESS, mSyncInProgress);\n        // outState.putBoolean(FileDisplayActivity.KEY_REFRESH_SHARES_IN_PROGRESS,\n        // mRefreshSharesInProgress);\n        outState.putParcelable(FileDisplayActivity.KEY_WAITING_TO_SEND, mWaitingToSend);\n        if (searchView != null) {\n            outState.putBoolean(KEY_IS_SEARCH_OPEN, !searchView.isIconified());\n        }\n        outState.putString(KEY_SEARCH_QUERY, searchQuery);\n        outState.putBoolean(KEY_IS_SORT_GROUP_VISIBLE, sortListGroupVisibility());\n        Log_OC.v(TAG, \"onSaveInstanceState() end\");\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func encodeRestorableState(with coder: NSCoder) {\n    super.encodeRestorableState(with: coder)\n    FileExtensions.logFileSize(mWaitingToPreview, TAG)\n    coder.encode(mWaitingToPreview, forKey: FileDisplayActivity.KEY_WAITING_TO_PREVIEW)\n    coder.encode(mSyncInProgress, forKey: FileDisplayActivity.KEY_SYNC_IN_PROGRESS)\n    // coder.encode(mRefreshSharesInProgress, forKey: FileDisplayActivity.KEY_REFRESH_SHARES_IN_PROGRESS)\n    coder.encode(mWaitingToSend, forKey: FileDisplayActivity.KEY_WAITING_TO_SEND)\n    if let searchView = searchView {\n        coder.encode(!searchView.isIconified, forKey: KEY_IS_SEARCH_OPEN)\n    }\n    coder.encode(searchQuery, forKey: KEY_SEARCH_QUERY)\n    coder.encode(sortListGroupVisibility(), forKey: KEY_IS_SORT_GROUP_VISIBLE)\n    Log_OC.v(TAG, \"encodeRestorableState() end\")\n}\n```"
    },
    {
        "method_name": "onResume",
        "method_code": "@Override\n    protected void onResume() {\n        Log_OC.v(TAG, \"onResume() start\");\n        super.onResume();\n        // Instead of onPostCreate, starting the loading in onResume for children fragments\n        Fragment leftFragment = getLeftFragment();\n\n        // Listen for sync messages\n        if (!(leftFragment instanceof OCFileListFragment) || !((OCFileListFragment) leftFragment).isSearchFragment()) {\n            initSyncBroadcastReceiver();\n        }\n\n        if (!(leftFragment instanceof OCFileListFragment)) {\n            if (leftFragment instanceof FileFragment) {\n                super.updateActionBarTitleAndHomeButton(((FileFragment) leftFragment).getFile());\n            }\n            return;\n        }\n\n        OCFileListFragment ocFileListFragment = (OCFileListFragment) leftFragment;\n\n        ocFileListFragment.setLoading(mSyncInProgress);\n        syncAndUpdateFolder(false, true);\n\n        OCFile startFile = null;\n        if (getIntent() != null) {\n            OCFile fileArgs = IntentExtensionsKt.getParcelableArgument(getIntent(), EXTRA_FILE, OCFile.class);\n            if (fileArgs != null) {\n                startFile = fileArgs;\n                setFile(startFile);\n            }\n        }\n\n        // refresh list of files\n        if (searchView != null && !TextUtils.isEmpty(searchQuery)) {\n            searchView.setQuery(searchQuery, false);\n        } else if (!ocFileListFragment.isSearchFragment() && startFile == null) {\n            updateListOfFilesFragment(false);\n            ocFileListFragment.registerFabListener();\n        } else {\n            ocFileListFragment.listDirectory(startFile, false, false);\n            updateActionBarTitleAndHomeButton(startFile);\n        }\n\n        // Listen for upload messages\n        IntentFilter uploadIntentFilter = new IntentFilter(FileUploadWorker.Companion.getUploadFinishMessage());\n        mUploadFinishReceiver = new UploadFinishReceiver();\n        localBroadcastManager.registerReceiver(mUploadFinishReceiver, uploadIntentFilter);\n\n        // Listen for download messages\n        IntentFilter downloadIntentFilter = new IntentFilter(FileDownloadWorker.Companion.getDownloadAddedMessage());\n        downloadIntentFilter.addAction(FileDownloadWorker.Companion.getDownloadFinishMessage());\n        mDownloadFinishReceiver = new DownloadFinishReceiver();\n        localBroadcastManager.registerReceiver(mDownloadFinishReceiver, downloadIntentFilter);\n\n        if (menuItemId == Menu.NONE) {\n            setDrawerAllFiles();\n        } else {\n            if (menuItemId == R.id.nav_all_files || menuItemId == R.id.nav_personal_files) {\n                setupHomeSearchToolbarWithSortAndListButtons();\n            } else {\n                setupToolbar();\n            }\n        }\n\n        if (ocFileListFragment instanceof GalleryFragment) {\n            updateActionBarTitleAndHomeButtonByString(getString(R.string.drawer_item_gallery));\n        }\n        //show in-app review dialog to user\n        inAppReviewHelper.showInAppReview(this);\n        \n        checkNotifications();\n\n        Log_OC.v(TAG, \"onResume() end\");\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onResume from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onResume\n\n        Method Code: @Override\n    protected void onResume() {\n        Log_OC.v(TAG, \"onResume() start\");\n        super.onResume();\n        // Instead of onPostCreate, starting the loading in onResume for children fragments\n        Fragment leftFragment = getLeftFragment();\n\n        // Listen for sync messages\n        if (!(leftFragment instanceof OCFileListFragment) || !((OCFileListFragment) leftFragment).isSearchFragment()) {\n            initSyncBroadcastReceiver();\n        }\n\n        if (!(leftFragment instanceof OCFileListFragment)) {\n            if (leftFragment instanceof FileFragment) {\n                super.updateActionBarTitleAndHomeButton(((FileFragment) leftFragment).getFile());\n            }\n            return;\n        }\n\n        OCFileListFragment ocFileListFragment = (OCFileListFragment) leftFragment;\n\n        ocFileListFragment.setLoading(mSyncInProgress);\n        syncAndUpdateFolder(false, true);\n\n        OCFile startFile = null;\n        if (getIntent() != null) {\n            OCFile fileArgs = IntentExtensionsKt.getParcelableArgument(getIntent(), EXTRA_FILE, OCFile.class);\n            if (fileArgs != null) {\n                startFile = fileArgs;\n                setFile(startFile);\n            }\n        }\n\n        // refresh list of files\n        if (searchView != null && !TextUtils.isEmpty(searchQuery)) {\n            searchView.setQuery(searchQuery, false);\n        } else if (!ocFileListFragment.isSearchFragment() && startFile == null) {\n            updateListOfFilesFragment(false);\n            ocFileListFragment.registerFabListener();\n        } else {\n            ocFileListFragment.listDirectory(startFile, false, false);\n            updateActionBarTitleAndHomeButton(startFile);\n        }\n\n        // Listen for upload messages\n        IntentFilter uploadIntentFilter = new IntentFilter(FileUploadWorker.Companion.getUploadFinishMessage());\n        mUploadFinishReceiver = new UploadFinishReceiver();\n        localBroadcastManager.registerReceiver(mUploadFinishReceiver, uploadIntentFilter);\n\n        // Listen for download messages\n        IntentFilter downloadIntentFilter = new IntentFilter(FileDownloadWorker.Companion.getDownloadAddedMessage());\n        downloadIntentFilter.addAction(FileDownloadWorker.Companion.getDownloadFinishMessage());\n        mDownloadFinishReceiver = new DownloadFinishReceiver();\n        localBroadcastManager.registerReceiver(mDownloadFinishReceiver, downloadIntentFilter);\n\n        if (menuItemId == Menu.NONE) {\n            setDrawerAllFiles();\n        } else {\n            if (menuItemId == R.id.nav_all_files || menuItemId == R.id.nav_personal_files) {\n                setupHomeSearchToolbarWithSortAndListButtons();\n            } else {\n                setupToolbar();\n            }\n        }\n\n        if (ocFileListFragment instanceof GalleryFragment) {\n            updateActionBarTitleAndHomeButtonByString(getString(R.string.drawer_item_gallery));\n        }\n        //show in-app review dialog to user\n        inAppReviewHelper.showInAppReview(this);\n        \n        checkNotifications();\n\n        Log_OC.v(TAG, \"onResume() end\");\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n    Log_OC.v(TAG, \"onResume() start\")\n    \n    let leftFragment = getLeftFragment()\n    \n    if !(leftFragment is OCFileListFragment) || !(leftFragment as! OCFileListFragment).isSearchFragment() {\n        initSyncBroadcastReceiver()\n    }\n    \n    if !(leftFragment is OCFileListFragment) {\n        if let fileFragment = leftFragment as? FileFragment {\n            super.updateActionBarTitleAndHomeButton(fileFragment.getFile())\n        }\n        return\n    }\n    \n    let ocFileListFragment = leftFragment as! OCFileListFragment\n    \n    ocFileListFragment.setLoading(mSyncInProgress)\n    syncAndUpdateFolder(false, true)\n    \n    var startFile: OCFile? = nil\n    if let intent = getIntent() {\n        if let fileArgs = intent.getParcelableArgument(EXTRA_FILE, OCFile.self) {\n            startFile = fileArgs\n            setFile(startFile)\n        }\n    }\n    \n    if let searchView = searchView, !searchQuery.isEmpty {\n        searchView.setQuery(searchQuery, false)\n    } else if !ocFileListFragment.isSearchFragment() && startFile == nil {\n        updateListOfFilesFragment(false)\n        ocFileListFragment.registerFabListener()\n    } else {\n        ocFileListFragment.listDirectory(startFile, false, false)\n        updateActionBarTitleAndHomeButton(startFile)\n    }\n    \n    let uploadIntentFilter = IntentFilter(FileUploadWorker.Companion.getUploadFinishMessage())\n    mUploadFinishReceiver = UploadFinishReceiver()\n    localBroadcastManager.registerReceiver(mUploadFinishReceiver, uploadIntentFilter)\n    \n    let downloadIntentFilter = IntentFilter(FileDownloadWorker.Companion.getDownloadAddedMessage())\n    downloadIntentFilter.addAction(FileDownloadWorker.Companion.getDownloadFinishMessage())\n    mDownloadFinishReceiver = DownloadFinishReceiver()\n    localBroadcastManager.registerReceiver(mDownloadFinishReceiver, downloadIntentFilter)\n    \n    if menuItemId == Menu.NONE {\n        setDrawerAllFiles()\n    } else {\n        if menuItemId == R.id.nav_all_files || menuItemId == R.id.nav_personal_files {\n            setupHomeSearchToolbarWithSortAndListButtons()\n        } else {\n            setupToolbar()\n        }\n    }\n    \n    if ocFileListFragment is GalleryFragment {\n        updateActionBarTitleAndHomeButtonByString(getString(R.string.drawer_item_gallery))\n    }\n    \n    inAppReviewHelper.showInAppReview(self)\n    \n    checkNotifications()\n    \n    Log_OC.v(TAG, \"onResume() end\")\n}\n```"
    },
    {
        "method_name": "setDrawerAllFiles",
        "method_code": "private void setDrawerAllFiles() {\n        if (MainApp.isOnlyPersonFiles()) {\n            menuItemId = R.id.nav_personal_files;\n        } else if (MainApp.isOnlyOnDevice()) {\n            menuItemId = R.id.nav_on_device;\n        } else if (menuItemId == Menu.NONE) {\n            menuItemId = R.id.nav_all_files;\n        }\n\n        setDrawerMenuItemChecked();\n\n        if (MainApp.isOnlyOnDevice()) {\n            setupToolbar();\n        } else {\n            setupHomeSearchToolbarWithSortAndListButtons();\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setDrawerAllFiles from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: setDrawerAllFiles\n\n        Method Code: private void setDrawerAllFiles() {\n        if (MainApp.isOnlyPersonFiles()) {\n            menuItemId = R.id.nav_personal_files;\n        } else if (MainApp.isOnlyOnDevice()) {\n            menuItemId = R.id.nav_on_device;\n        } else if (menuItemId == Menu.NONE) {\n            menuItemId = R.id.nav_all_files;\n        }\n\n        setDrawerMenuItemChecked();\n\n        if (MainApp.isOnlyOnDevice()) {\n            setupToolbar();\n        } else {\n            setupHomeSearchToolbarWithSortAndListButtons();\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setDrawerAllFiles() {\n    if MainApp.isOnlyPersonFiles() {\n        menuItemId = R.id.nav_personal_files\n    } else if MainApp.isOnlyOnDevice() {\n        menuItemId = R.id.nav_on_device\n    } else if menuItemId == Menu.NONE {\n        menuItemId = R.id.nav_all_files\n    }\n\n    setDrawerMenuItemChecked()\n\n    if MainApp.isOnlyOnDevice() {\n        setupToolbar()\n    } else {\n        setupHomeSearchToolbarWithSortAndListButtons()\n    }\n}\n```"
    },
    {
        "method_name": "initSyncBroadcastReceiver",
        "method_code": "public void initSyncBroadcastReceiver() {\n        if (mSyncBroadcastReceiver == null) {\n            IntentFilter syncIntentFilter = new IntentFilter(FileSyncAdapter.EVENT_FULL_SYNC_START);\n            syncIntentFilter.addAction(FileSyncAdapter.EVENT_FULL_SYNC_END);\n            syncIntentFilter.addAction(FileSyncAdapter.EVENT_FULL_SYNC_FOLDER_CONTENTS_SYNCED);\n            syncIntentFilter.addAction(RefreshFolderOperation.EVENT_SINGLE_FOLDER_CONTENTS_SYNCED);\n            syncIntentFilter.addAction(RefreshFolderOperation.EVENT_SINGLE_FOLDER_SHARES_SYNCED);\n            mSyncBroadcastReceiver = new SyncBroadcastReceiver();\n            localBroadcastManager.registerReceiver(mSyncBroadcastReceiver, syncIntentFilter);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled initSyncBroadcastReceiver from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: initSyncBroadcastReceiver\n\n        Method Code: public void initSyncBroadcastReceiver() {\n        if (mSyncBroadcastReceiver == null) {\n            IntentFilter syncIntentFilter = new IntentFilter(FileSyncAdapter.EVENT_FULL_SYNC_START);\n            syncIntentFilter.addAction(FileSyncAdapter.EVENT_FULL_SYNC_END);\n            syncIntentFilter.addAction(FileSyncAdapter.EVENT_FULL_SYNC_FOLDER_CONTENTS_SYNCED);\n            syncIntentFilter.addAction(RefreshFolderOperation.EVENT_SINGLE_FOLDER_CONTENTS_SYNCED);\n            syncIntentFilter.addAction(RefreshFolderOperation.EVENT_SINGLE_FOLDER_SHARES_SYNCED);\n            mSyncBroadcastReceiver = new SyncBroadcastReceiver();\n            localBroadcastManager.registerReceiver(mSyncBroadcastReceiver, syncIntentFilter);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc initSyncBroadcastReceiver() {\n    if mSyncBroadcastReceiver == nil {\n        let syncIntentFilter = NotificationCenter.default\n        syncIntentFilter.addObserver(self, selector: #selector(handleSyncEvent), name: NSNotification.Name(FileSyncAdapter.EVENT_FULL_SYNC_START), object: nil)\n        syncIntentFilter.addObserver(self, selector: #selector(handleSyncEvent), name: NSNotification.Name(FileSyncAdapter.EVENT_FULL_SYNC_END), object: nil)\n        syncIntentFilter.addObserver(self, selector: #selector(handleSyncEvent), name: NSNotification.Name(FileSyncAdapter.EVENT_FULL_SYNC_FOLDER_CONTENTS_SYNCED), object: nil)\n        syncIntentFilter.addObserver(self, selector: #selector(handleSyncEvent), name: NSNotification.Name(RefreshFolderOperation.EVENT_SINGLE_FOLDER_CONTENTS_SYNCED), object: nil)\n        syncIntentFilter.addObserver(self, selector: #selector(handleSyncEvent), name: NSNotification.Name(RefreshFolderOperation.EVENT_SINGLE_FOLDER_SHARES_SYNCED), object: nil)\n        mSyncBroadcastReceiver = SyncBroadcastReceiver()\n    }\n}\n\n@objc func handleSyncEvent(notification: NSNotification) {\n    // Handle the sync event\n}\n```"
    },
    {
        "method_name": "onPause",
        "method_code": "@Override\n    protected void onPause() {\n        Log_OC.v(TAG, \"onPause() start\");\n        if (mSyncBroadcastReceiver != null) {\n            localBroadcastManager.unregisterReceiver(mSyncBroadcastReceiver);\n            mSyncBroadcastReceiver = null;\n        }\n        if (mUploadFinishReceiver != null) {\n            localBroadcastManager.unregisterReceiver(mUploadFinishReceiver);\n            mUploadFinishReceiver = null;\n        }\n        if (mDownloadFinishReceiver != null) {\n            localBroadcastManager.unregisterReceiver(mDownloadFinishReceiver);\n            mDownloadFinishReceiver = null;\n        }\n\n        super.onPause();\n        Log_OC.v(TAG, \"onPause() end\");\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onPause from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onPause\n\n        Method Code: @Override\n    protected void onPause() {\n        Log_OC.v(TAG, \"onPause() start\");\n        if (mSyncBroadcastReceiver != null) {\n            localBroadcastManager.unregisterReceiver(mSyncBroadcastReceiver);\n            mSyncBroadcastReceiver = null;\n        }\n        if (mUploadFinishReceiver != null) {\n            localBroadcastManager.unregisterReceiver(mUploadFinishReceiver);\n            mUploadFinishReceiver = null;\n        }\n        if (mDownloadFinishReceiver != null) {\n            localBroadcastManager.unregisterReceiver(mDownloadFinishReceiver);\n            mDownloadFinishReceiver = null;\n        }\n\n        super.onPause();\n        Log_OC.v(TAG, \"onPause() end\");\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n    Log_OC.v(TAG, \"viewWillDisappear() start\")\n    \n    if mSyncBroadcastReceiver != nil {\n        localBroadcastManager.unregisterReceiver(mSyncBroadcastReceiver!)\n        mSyncBroadcastReceiver = nil\n    }\n    if mUploadFinishReceiver != nil {\n        localBroadcastManager.unregisterReceiver(mUploadFinishReceiver!)\n        mUploadFinishReceiver = nil\n    }\n    if mDownloadFinishReceiver != nil {\n        localBroadcastManager.unregisterReceiver(mDownloadFinishReceiver!)\n        mDownloadFinishReceiver = nil\n    }\n    \n    Log_OC.v(TAG, \"viewWillDisappear() end\")\n}\n```"
    },
    {
        "method_name": "onSortingOrderChosen",
        "method_code": "@Override\n    public void onSortingOrderChosen(FileSortOrder selection) {\n        OCFileListFragment ocFileListFragment = getListOfFilesFragment();\n        if (ocFileListFragment != null) {\n            ocFileListFragment.sortFiles(selection);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onSortingOrderChosen from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onSortingOrderChosen\n\n        Method Code: @Override\n    public void onSortingOrderChosen(FileSortOrder selection) {\n        OCFileListFragment ocFileListFragment = getListOfFilesFragment();\n        if (ocFileListFragment != null) {\n            ocFileListFragment.sortFiles(selection);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onSortingOrderChosen(_ selection: FileSortOrder) {\n    if let ocFileListFragment = getListOfFilesFragment() {\n        ocFileListFragment.sortFiles(selection)\n    }\n}\n```"
    },
    {
        "method_name": "downloadFile",
        "method_code": "@Override\n    public void downloadFile(OCFile file, String packageName, String activityName) {\n        startDownloadForSending(file, OCFileListFragment.DOWNLOAD_SEND, packageName, activityName);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled downloadFile from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: downloadFile\n\n        Method Code: @Override\n    public void downloadFile(OCFile file, String packageName, String activityName) {\n        startDownloadForSending(file, OCFileListFragment.DOWNLOAD_SEND, packageName, activityName);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func downloadFile(file: OCFile, packageName: String, activityName: String) {\n    startDownloadForSending(file: file, downloadType: OCFileListFragment.DOWNLOAD_SEND, packageName: packageName, activityName: activityName)\n}\n```"
    },
    {
        "method_name": "onReceive",
        "method_code": "@SuppressLint(\"VisibleForTests\")\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            try {\n                String event = intent.getAction();\n                Log_OC.d(TAG, \"Received broadcast \" + event);\n                String accountName = intent.getStringExtra(FileSyncAdapter.EXTRA_ACCOUNT_NAME);\n\n                String synchFolderRemotePath = intent.getStringExtra(FileSyncAdapter.EXTRA_FOLDER_PATH);\n                RemoteOperationResult synchResult = (RemoteOperationResult) DataHolderUtil.getInstance().retrieve(intent.getStringExtra(FileSyncAdapter.EXTRA_RESULT));\n                boolean sameAccount = getAccount() != null && accountName.equals(getAccount().name) && getStorageManager() != null;\n\n                if (sameAccount) {\n\n                    if (FileSyncAdapter.EVENT_FULL_SYNC_START.equals(event)) {\n                        mSyncInProgress = true;\n\n                    } else {\n                        OCFile currentFile = (getFile() == null) ? null : getStorageManager().getFileByPath(getFile().getRemotePath());\n                        OCFile currentDir = (getCurrentDir() == null) ? null : getStorageManager().getFileByPath(getCurrentDir().getRemotePath());\n\n                        if (currentDir == null) {\n                            // current folder was removed from the server\n                            DisplayUtils.showSnackMessage(getActivity(), R.string.sync_current_folder_was_removed, synchFolderRemotePath);\n\n                            browseToRoot();\n\n                        } else {\n                            if (currentFile == null && !getFile().isFolder()) {\n                                // currently selected file was removed in the server, and now we\n                                // know it\n                                resetTitleBarAndScrolling();\n                                currentFile = currentDir;\n                            }\n\n                            if (currentDir.getRemotePath().equals(synchFolderRemotePath)) {\n                                OCFileListFragment fileListFragment = getListOfFilesFragment();\n                                if (fileListFragment != null) {\n                                    fileListFragment.listDirectory(currentDir, MainApp.isOnlyOnDevice(), false);\n                                }\n                            }\n                            setFile(currentFile);\n                        }\n\n                        mSyncInProgress = !FileSyncAdapter.EVENT_FULL_SYNC_END.equals(event) && !RefreshFolderOperation.EVENT_SINGLE_FOLDER_SHARES_SYNCED.equals(event);\n\n                        if (RefreshFolderOperation.EVENT_SINGLE_FOLDER_CONTENTS_SYNCED.equals(event) && synchResult != null) {\n\n                            if (synchResult.isSuccess()) {\n                                hideInfoBox();\n                            } else {\n                                // TODO refactor and make common\n                                if (checkForRemoteOperationError(synchResult)) {\n                                    requestCredentialsUpdate(context);\n                                } else {\n                                    switch (synchResult.getCode()) {\n                                        case SSL_RECOVERABLE_PEER_UNVERIFIED:\n                                            showUntrustedCertDialog(synchResult);\n                                            break;\n\n                                        case MAINTENANCE_MODE:\n                                            showInfoBox(R.string.maintenance_mode);\n                                            break;\n\n                                        case NO_NETWORK_CONNECTION:\n                                            showInfoBox(R.string.offline_mode);\n                                            break;\n\n                                        case HOST_NOT_AVAILABLE:\n                                            showInfoBox(R.string.host_not_available);\n                                            break;\n\n                                        default:\n                                            // nothing to do\n                                            break;\n                                    }\n                                }\n                            }\n                        }\n                        DataHolderUtil.getInstance().delete(intent.getStringExtra(FileSyncAdapter.EXTRA_RESULT));\n\n                        Log_OC.d(TAG, \"Setting progress visibility to \" + mSyncInProgress);\n\n                        OCFileListFragment ocFileListFragment = getListOfFilesFragment();\n                        if (ocFileListFragment != null) {\n                            ocFileListFragment.setLoading(mSyncInProgress);\n                            if (!mSyncInProgress && !ocFileListFragment.isLoading()) {\n                                // update scrolling when load finishes\n                                if (ocFileListFragment.isEmpty()) {\n                                    lockScrolling();\n                                } else {\n                                    resetScrolling(false);\n                                }\n                            }\n                        }\n                        setBackgroundText();\n                    }\n                }\n\n                if (synchResult != null && synchResult.getCode() == ResultCode.SSL_RECOVERABLE_PEER_UNVERIFIED) {\n                    mLastSslUntrustedServerResult = synchResult;\n                }\n            } catch (RuntimeException e) {\n                // avoid app crashes after changing the serial id of RemoteOperationResult\n                // in owncloud library with broadcast notifications pending to process\n\n                try {\n                    DataHolderUtil.getInstance().delete(intent.getStringExtra(FileSyncAdapter.EXTRA_RESULT));\n                } catch (RuntimeException re) {\n                    // we did not send this intent, so ignoring\n                    Log_OC.i(TAG, \"Ignoring error deleting data\");\n                }\n            }\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled onReceive from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onReceive\n\n        Method Code: @SuppressLint(\"VisibleForTests\")\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            try {\n                String event = intent.getAction();\n                Log_OC.d(TAG, \"Received broadcast \" + event);\n                String accountName = intent.getStringExtra(FileSyncAdapter.EXTRA_ACCOUNT_NAME);\n\n                String synchFolderRemotePath = intent.getStringExtra(FileSyncAdapter.EXTRA_FOLDER_PATH);\n                RemoteOperationResult synchResult = (RemoteOperationResult) DataHolderUtil.getInstance().retrieve(intent.getStringExtra(FileSyncAdapter.EXTRA_RESULT));\n                boolean sameAccount = getAccount() != null && accountName.equals(getAccount().name) && getStorageManager() != null;\n\n                if (sameAccount) {\n\n                    if (FileSyncAdapter.EVENT_FULL_SYNC_START.equals(event)) {\n                        mSyncInProgress = true;\n\n                    } else {\n                        OCFile currentFile = (getFile() == null) ? null : getStorageManager().getFileByPath(getFile().getRemotePath());\n                        OCFile currentDir = (getCurrentDir() == null) ? null : getStorageManager().getFileByPath(getCurrentDir().getRemotePath());\n\n                        if (currentDir == null) {\n                            // current folder was removed from the server\n                            DisplayUtils.showSnackMessage(getActivity(), R.string.sync_current_folder_was_removed, synchFolderRemotePath);\n\n                            browseToRoot();\n\n                        } else {\n                            if (currentFile == null && !getFile().isFolder()) {\n                                // currently selected file was removed in the server, and now we\n                                // know it\n                                resetTitleBarAndScrolling();\n                                currentFile = currentDir;\n                            }\n\n                            if (currentDir.getRemotePath().equals(synchFolderRemotePath)) {\n                                OCFileListFragment fileListFragment = getListOfFilesFragment();\n                                if (fileListFragment != null) {\n                                    fileListFragment.listDirectory(currentDir, MainApp.isOnlyOnDevice(), false);\n                                }\n                            }\n                            setFile(currentFile);\n                        }\n\n                        mSyncInProgress = !FileSyncAdapter.EVENT_FULL_SYNC_END.equals(event) && !RefreshFolderOperation.EVENT_SINGLE_FOLDER_SHARES_SYNCED.equals(event);\n\n                        if (RefreshFolderOperation.EVENT_SINGLE_FOLDER_CONTENTS_SYNCED.equals(event) && synchResult != null) {\n\n                            if (synchResult.isSuccess()) {\n                                hideInfoBox();\n                            } else {\n                                // TODO refactor and make common\n                                if (checkForRemoteOperationError(synchResult)) {\n                                    requestCredentialsUpdate(context);\n                                } else {\n                                    switch (synchResult.getCode()) {\n                                        case SSL_RECOVERABLE_PEER_UNVERIFIED:\n                                            showUntrustedCertDialog(synchResult);\n                                            break;\n\n                                        case MAINTENANCE_MODE:\n                                            showInfoBox(R.string.maintenance_mode);\n                                            break;\n\n                                        case NO_NETWORK_CONNECTION:\n                                            showInfoBox(R.string.offline_mode);\n                                            break;\n\n                                        case HOST_NOT_AVAILABLE:\n                                            showInfoBox(R.string.host_not_available);\n                                            break;\n\n                                        default:\n                                            // nothing to do\n                                            break;\n                                    }\n                                }\n                            }\n                        }\n                        DataHolderUtil.getInstance().delete(intent.getStringExtra(FileSyncAdapter.EXTRA_RESULT));\n\n                        Log_OC.d(TAG, \"Setting progress visibility to \" + mSyncInProgress);\n\n                        OCFileListFragment ocFileListFragment = getListOfFilesFragment();\n                        if (ocFileListFragment != null) {\n                            ocFileListFragment.setLoading(mSyncInProgress);\n                            if (!mSyncInProgress && !ocFileListFragment.isLoading()) {\n                                // update scrolling when load finishes\n                                if (ocFileListFragment.isEmpty()) {\n                                    lockScrolling();\n                                } else {\n                                    resetScrolling(false);\n                                }\n                            }\n                        }\n                        setBackgroundText();\n                    }\n                }\n\n                if (synchResult != null && synchResult.getCode() == ResultCode.SSL_RECOVERABLE_PEER_UNVERIFIED) {\n                    mLastSslUntrustedServerResult = synchResult;\n                }\n            } catch (RuntimeException e) {\n                // avoid app crashes after changing the serial id of RemoteOperationResult\n                // in owncloud library with broadcast notifications pending to process\n\n                try {\n                    DataHolderUtil.getInstance().delete(intent.getStringExtra(FileSyncAdapter.EXTRA_RESULT));\n                } catch (RuntimeException re) {\n                    // we did not send this intent, so ignoring\n                    Log_OC.i(TAG, \"Ignoring error deleting data\");\n                }\n            }\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport UIKit\n\nclass FileDisplayActivity: UIViewController {\n    \n    var mSyncInProgress = false\n    var mLastSslUntrustedServerResult: RemoteOperationResult?\n    \n    func onReceive(context: Context, intent: Intent) {\n        do {\n            let event = intent.getAction()\n            Log_OC.d(TAG, \"Received broadcast \\(event)\")\n            let accountName = intent.getStringExtra(FileSyncAdapter.EXTRA_ACCOUNT_NAME)\n            \n            let synchFolderRemotePath = intent.getStringExtra(FileSyncAdapter.EXTRA_FOLDER_PATH)\n            let synchResult = DataHolderUtil.getInstance().retrieve(intent.getStringExtra(FileSyncAdapter.EXTRA_RESULT)) as? RemoteOperationResult\n            let sameAccount = getAccount() != nil && accountName == getAccount()?.name && getStorageManager() != nil\n            \n            if sameAccount {\n                \n                if FileSyncAdapter.EVENT_FULL_SYNC_START == event {\n                    mSyncInProgress = true\n                    \n                } else {\n                    var currentFile = (getFile() == nil) ? nil : getStorageManager()?.getFileByPath(getFile()!.getRemotePath())\n                    var currentDir = (getCurrentDir() == nil) ? nil : getStorageManager()?.getFileByPath(getCurrentDir()!.getRemotePath())\n                    \n                    if currentDir == nil {\n                        DisplayUtils.showSnackMessage(getActivity(), R.string.sync_current_folder_was_removed, synchFolderRemotePath)\n                        \n                        browseToRoot()\n                        \n                    } else {\n                        if currentFile == nil && !(getFile()?.isFolder() ?? true) {\n                            resetTitleBarAndScrolling()\n                            currentFile = currentDir\n                        }\n                        \n                        if currentDir?.getRemotePath() == synchFolderRemotePath {\n                            if let fileListFragment = getListOfFilesFragment() {\n                                fileListFragment.listDirectory(currentDir!, MainApp.isOnlyOnDevice(), false)\n                            }\n                        }\n                        setFile(currentFile)\n                    }\n                    \n                    mSyncInProgress = !(FileSyncAdapter.EVENT_FULL_SYNC_END == event) && !(RefreshFolderOperation.EVENT_SINGLE_FOLDER_SHARES_SYNCED == event)\n                    \n                    if RefreshFolderOperation.EVENT_SINGLE_FOLDER_CONTENTS_SYNCED == event && synchResult != nil {\n                        \n                        if synchResult!.isSuccess() {\n                            hideInfoBox()\n                        } else {\n                            if checkForRemoteOperationError(synchResult!) {\n                                requestCredentialsUpdate(context)\n                            } else {\n                                switch synchResult!.getCode() {\n                                case .SSL_RECOVERABLE_PEER_UNVERIFIED:\n                                    showUntrustedCertDialog(synchResult!)\n                                case .MAINTENANCE_MODE:\n                                    showInfoBox(R.string.maintenance_mode)\n                                case .NO_NETWORK_CONNECTION:\n                                    showInfoBox(R.string.offline_mode)\n                                case .HOST_NOT_AVAILABLE:\n                                    showInfoBox(R.string.host_not_available)\n                                default:\n                                    break\n                                }\n                            }\n                        }\n                    }\n                    DataHolderUtil.getInstance().delete(intent.getStringExtra(FileSyncAdapter.EXTRA_RESULT))\n                    \n                    Log_OC.d(TAG, \"Setting progress visibility to \\(mSyncInProgress)\")\n                    \n                    if let ocFileListFragment = getListOfFilesFragment() {\n                        ocFileListFragment.setLoading(mSyncInProgress)\n                        if !mSyncInProgress && !ocFileListFragment.isLoading() {\n                            if ocFileListFragment.isEmpty() {\n                                lockScrolling()\n                            } else {\n                                resetScrolling(false)\n                            }\n                        }\n                    }\n                    setBackgroundText()\n                }\n            }\n            \n            if synchResult != nil && synchResult!.getCode() == .SSL_RECOVERABLE_PEER_UNVERIFIED {\n                mLastSslUntrustedServerResult = synchResult\n            }\n        } catch {\n            do {\n                try DataHolderUtil.getInstance().delete(intent.getStringExtra(FileSyncAdapter.EXTRA_RESULT))\n            } catch {\n                Log_OC.i(TAG, \"Ignoring error deleting data\")\n            }\n        }\n    }\n}\n```"
    },
    {
        "method_name": "checkForRemoteOperationError",
        "method_code": "private boolean checkForRemoteOperationError(RemoteOperationResult syncResult) {\n        return ResultCode.UNAUTHORIZED == syncResult.getCode() || (syncResult.isException() && syncResult.getException() instanceof AuthenticatorException);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled checkForRemoteOperationError from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: checkForRemoteOperationError\n\n        Method Code: private boolean checkForRemoteOperationError(RemoteOperationResult syncResult) {\n        return ResultCode.UNAUTHORIZED == syncResult.getCode() || (syncResult.isException() && syncResult.getException() instanceof AuthenticatorException);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func checkForRemoteOperationError(syncResult: RemoteOperationResult) -> Bool {\n    return syncResult.getCode() == .UNAUTHORIZED || (syncResult.isException() && syncResult.getException() is AuthenticatorException)\n}\n```"
    },
    {
        "method_name": "setBackgroundText",
        "method_code": "private void setBackgroundText() {\n        final OCFileListFragment ocFileListFragment = getListOfFilesFragment();\n        if (ocFileListFragment != null) {\n            if (mSyncInProgress || getFile().getFileLength() > 0 && getStorageManager().getFolderContent(getFile(), false).isEmpty()) {\n                ocFileListFragment.setEmptyListLoadingMessage();\n            } else {\n                if (MainApp.isOnlyOnDevice()) {\n                    ocFileListFragment.setMessageForEmptyList(R.string.file_list_empty_headline, R.string.file_list_empty_on_device, R.drawable.ic_list_empty_folder, true);\n                } else {\n                    connectivityService.isNetworkAndServerAvailable(result -> {\n                        if (result) {\n                            ocFileListFragment.setEmptyListMessage(SearchType.NO_SEARCH);\n                        } else {\n                            ocFileListFragment.setEmptyListMessage(SearchType.OFFLINE_MODE);\n                        }\n                    });\n                }\n            }\n        } else {\n            Log_OC.e(TAG, \"OCFileListFragment is null\");\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setBackgroundText from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: setBackgroundText\n\n        Method Code: private void setBackgroundText() {\n        final OCFileListFragment ocFileListFragment = getListOfFilesFragment();\n        if (ocFileListFragment != null) {\n            if (mSyncInProgress || getFile().getFileLength() > 0 && getStorageManager().getFolderContent(getFile(), false).isEmpty()) {\n                ocFileListFragment.setEmptyListLoadingMessage();\n            } else {\n                if (MainApp.isOnlyOnDevice()) {\n                    ocFileListFragment.setMessageForEmptyList(R.string.file_list_empty_headline, R.string.file_list_empty_on_device, R.drawable.ic_list_empty_folder, true);\n                } else {\n                    connectivityService.isNetworkAndServerAvailable(result -> {\n                        if (result) {\n                            ocFileListFragment.setEmptyListMessage(SearchType.NO_SEARCH);\n                        } else {\n                            ocFileListFragment.setEmptyListMessage(SearchType.OFFLINE_MODE);\n                        }\n                    });\n                }\n            }\n        } else {\n            Log_OC.e(TAG, \"OCFileListFragment is null\");\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setBackgroundText() {\n    if let ocFileListFragment = getListOfFilesFragment() {\n        if mSyncInProgress || (getFile().fileLength > 0 && getStorageManager().getFolderContent(getFile(), false).isEmpty) {\n            ocFileListFragment.setEmptyListLoadingMessage()\n        } else {\n            if MainApp.isOnlyOnDevice() {\n                ocFileListFragment.setMessageForEmptyList(R.string.file_list_empty_headline, R.string.file_list_empty_on_device, R.drawable.ic_list_empty_folder, true)\n            } else {\n                connectivityService.isNetworkAndServerAvailable { result in\n                    if result {\n                        ocFileListFragment.setEmptyListMessage(.noSearch)\n                    } else {\n                        ocFileListFragment.setEmptyListMessage(.offlineMode)\n                    }\n                }\n            }\n        }\n    } else {\n        Log_OC.e(TAG, \"OCFileListFragment is null\")\n    }\n}\n```"
    },
    {
        "method_name": "onReceive",
        "method_code": "@Override\n        public void onReceive(Context context, Intent intent) {\n            String uploadedRemotePath = intent.getStringExtra(FileUploadWorker.EXTRA_REMOTE_PATH);\n            String accountName = intent.getStringExtra(FileUploadWorker.ACCOUNT_NAME);\n            Account account = getAccount();\n            boolean sameAccount = accountName != null && account != null && accountName.equals(account.name);\n            OCFile currentDir = getCurrentDir();\n            boolean isDescendant = currentDir != null && uploadedRemotePath != null && uploadedRemotePath.startsWith(currentDir.getRemotePath());\n\n            if (sameAccount && isDescendant) {\n                String linkedToRemotePath = intent.getStringExtra(FileUploadWorker.EXTRA_LINKED_TO_PATH);\n                if (linkedToRemotePath == null || isAscendant(linkedToRemotePath)) {\n                    updateListOfFilesFragment(false);\n                }\n            }\n\n            boolean uploadWasFine = intent.getBooleanExtra(FileUploadWorker.EXTRA_UPLOAD_RESULT, false);\n            boolean renamedInUpload = getFile().getRemotePath().equals(intent.getStringExtra(FileUploadWorker.EXTRA_OLD_REMOTE_PATH));\n\n            boolean sameFile = getFile().getRemotePath().equals(uploadedRemotePath) || renamedInUpload;\n            Fragment details = getLeftFragment();\n\n            if (sameAccount && sameFile && details instanceof FileDetailFragment) {\n                if (uploadWasFine) {\n                    setFile(getStorageManager().getFileByPath(uploadedRemotePath));\n                } else {\n                    //TODO remove upload progress bar after upload failed.\n                    Log_OC.d(TAG, \"Remove upload progress bar after upload failed\");\n                }\n                if (renamedInUpload) {\n                    String newName = new File(uploadedRemotePath).getName();\n                    DisplayUtils.showSnackMessage(getActivity(), R.string.filedetails_renamed_in_upload_msg, newName);\n                }\n                if (uploadWasFine || getFile().fileExists()) {\n                    ((FileDetailFragment) details).updateFileDetails(false, true);\n                } else {\n                    onBackPressed();\n                }\n\n                // Force the preview if the file is an image or text file\n                if (uploadWasFine) {\n                    OCFile ocFile = getFile();\n                    if (PreviewImageFragment.canBePreviewed(ocFile)) {\n                        startImagePreview(getFile(), true);\n                    } else if (PreviewTextFileFragment.canBePreviewed(ocFile)) {\n                        startTextPreview(ocFile, true);\n                    }\n                    // TODO what about other kind of previews?\n                }\n            }\n            OCFileListFragment ocFileListFragment = getListOfFilesFragment();\n            if (ocFileListFragment != null) {\n                ocFileListFragment.setLoading(false);\n            }\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled onReceive from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onReceive\n\n        Method Code: @Override\n        public void onReceive(Context context, Intent intent) {\n            String uploadedRemotePath = intent.getStringExtra(FileUploadWorker.EXTRA_REMOTE_PATH);\n            String accountName = intent.getStringExtra(FileUploadWorker.ACCOUNT_NAME);\n            Account account = getAccount();\n            boolean sameAccount = accountName != null && account != null && accountName.equals(account.name);\n            OCFile currentDir = getCurrentDir();\n            boolean isDescendant = currentDir != null && uploadedRemotePath != null && uploadedRemotePath.startsWith(currentDir.getRemotePath());\n\n            if (sameAccount && isDescendant) {\n                String linkedToRemotePath = intent.getStringExtra(FileUploadWorker.EXTRA_LINKED_TO_PATH);\n                if (linkedToRemotePath == null || isAscendant(linkedToRemotePath)) {\n                    updateListOfFilesFragment(false);\n                }\n            }\n\n            boolean uploadWasFine = intent.getBooleanExtra(FileUploadWorker.EXTRA_UPLOAD_RESULT, false);\n            boolean renamedInUpload = getFile().getRemotePath().equals(intent.getStringExtra(FileUploadWorker.EXTRA_OLD_REMOTE_PATH));\n\n            boolean sameFile = getFile().getRemotePath().equals(uploadedRemotePath) || renamedInUpload;\n            Fragment details = getLeftFragment();\n\n            if (sameAccount && sameFile && details instanceof FileDetailFragment) {\n                if (uploadWasFine) {\n                    setFile(getStorageManager().getFileByPath(uploadedRemotePath));\n                } else {\n                    //TODO remove upload progress bar after upload failed.\n                    Log_OC.d(TAG, \"Remove upload progress bar after upload failed\");\n                }\n                if (renamedInUpload) {\n                    String newName = new File(uploadedRemotePath).getName();\n                    DisplayUtils.showSnackMessage(getActivity(), R.string.filedetails_renamed_in_upload_msg, newName);\n                }\n                if (uploadWasFine || getFile().fileExists()) {\n                    ((FileDetailFragment) details).updateFileDetails(false, true);\n                } else {\n                    onBackPressed();\n                }\n\n                // Force the preview if the file is an image or text file\n                if (uploadWasFine) {\n                    OCFile ocFile = getFile();\n                    if (PreviewImageFragment.canBePreviewed(ocFile)) {\n                        startImagePreview(getFile(), true);\n                    } else if (PreviewTextFileFragment.canBePreviewed(ocFile)) {\n                        startTextPreview(ocFile, true);\n                    }\n                    // TODO what about other kind of previews?\n                }\n            }\n            OCFileListFragment ocFileListFragment = getListOfFilesFragment();\n            if (ocFileListFragment != null) {\n                ocFileListFragment.setLoading(false);\n            }\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onReceive(context: Context, intent: Intent) {\n    let uploadedRemotePath = intent.getStringExtra(FileUploadWorker.EXTRA_REMOTE_PATH)\n    let accountName = intent.getStringExtra(FileUploadWorker.ACCOUNT_NAME)\n    let account = getAccount()\n    let sameAccount = accountName != nil && account != nil && accountName == account?.name\n    let currentDir = getCurrentDir()\n    let isDescendant = currentDir != nil && uploadedRemotePath != nil && uploadedRemotePath!.hasPrefix(currentDir!.getRemotePath())\n\n    if sameAccount && isDescendant {\n        let linkedToRemotePath = intent.getStringExtra(FileUploadWorker.EXTRA_LINKED_TO_PATH)\n        if linkedToRemotePath == nil || isAscendant(linkedToRemotePath) {\n            updateListOfFilesFragment(false)\n        }\n    }\n\n    let uploadWasFine = intent.getBooleanExtra(FileUploadWorker.EXTRA_UPLOAD_RESULT, false)\n    let renamedInUpload = getFile().getRemotePath() == intent.getStringExtra(FileUploadWorker.EXTRA_OLD_REMOTE_PATH)\n\n    let sameFile = getFile().getRemotePath() == uploadedRemotePath || renamedInUpload\n    let details = getLeftFragment()\n\n    if sameAccount && sameFile && details is FileDetailFragment {\n        if uploadWasFine {\n            setFile(getStorageManager().getFileByPath(uploadedRemotePath))\n        } else {\n            //TODO remove upload progress bar after upload failed.\n            Log_OC.d(TAG, \"Remove upload progress bar after upload failed\")\n        }\n        if renamedInUpload {\n            let newName = URL(fileURLWithPath: uploadedRemotePath!).lastPathComponent\n            DisplayUtils.showSnackMessage(getActivity(), R.string.filedetails_renamed_in_upload_msg, newName)\n        }\n        if uploadWasFine || getFile().fileExists() {\n            (details as! FileDetailFragment).updateFileDetails(false, true)\n        } else {\n            onBackPressed()\n        }\n\n        // Force the preview if the file is an image or text file\n        if uploadWasFine {\n            let ocFile = getFile()\n            if PreviewImageFragment.canBePreviewed(ocFile) {\n                startImagePreview(getFile(), true)\n            } else if PreviewTextFileFragment.canBePreviewed(ocFile) {\n                startTextPreview(ocFile, true)\n            }\n            // TODO what about other kind of previews?\n        }\n    }\n    if let ocFileListFragment = getListOfFilesFragment() {\n        ocFileListFragment.setLoading(false)\n    }\n}\n```"
    },
    {
        "method_name": "isAscendant",
        "method_code": "private boolean isAscendant(String linkedToRemotePath) {\n            OCFile currentDir = getCurrentDir();\n            return currentDir != null && currentDir.getRemotePath().startsWith(linkedToRemotePath);\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled isAscendant from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: isAscendant\n\n        Method Code: private boolean isAscendant(String linkedToRemotePath) {\n            OCFile currentDir = getCurrentDir();\n            return currentDir != null && currentDir.getRemotePath().startsWith(linkedToRemotePath);\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func isAscendant(linkedToRemotePath: String) -> Bool {\n    if let currentDir = getCurrentDir() {\n        return currentDir.getRemotePath().hasPrefix(linkedToRemotePath)\n    }\n    return false\n}\n```"
    },
    {
        "method_name": "onReceive",
        "method_code": "@Override\n        public void onReceive(Context context, Intent intent) {\n            boolean sameAccount = isSameAccount(intent);\n            String downloadedRemotePath = intent.getStringExtra(FileDownloadWorker.EXTRA_REMOTE_PATH);\n            String downloadBehaviour = intent.getStringExtra(OCFileListFragment.DOWNLOAD_BEHAVIOUR);\n            boolean isDescendant = isDescendant(downloadedRemotePath);\n\n            if (sameAccount && isDescendant) {\n                String linkedToRemotePath = intent.getStringExtra(FileDownloadWorker.EXTRA_LINKED_TO_PATH);\n                if (linkedToRemotePath == null || isAscendant(linkedToRemotePath)) {\n                    updateListOfFilesFragment(false);\n                }\n                refreshDetailsFragmentIfVisible(intent.getAction(), downloadedRemotePath, intent.getBooleanExtra(FileDownloadWorker.EXTRA_DOWNLOAD_RESULT, false));\n            }\n\n            if (mWaitingToSend != null) {\n                // update file after downloading\n                mWaitingToSend = getStorageManager().getFileByRemoteId(mWaitingToSend.getRemoteId());\n                if (mWaitingToSend != null && mWaitingToSend.isDown() && OCFileListFragment.DOWNLOAD_SEND.equals(downloadBehaviour)) {\n                    String packageName = intent.getStringExtra(SendShareDialog.PACKAGE_NAME);\n                    String activityName = intent.getStringExtra(SendShareDialog.ACTIVITY_NAME);\n\n                    sendDownloadedFile(packageName, activityName);\n                }\n            }\n\n            if (mWaitingToPreview != null) {\n                mWaitingToPreview = getStorageManager().getFileByRemoteId(mWaitingToPreview.getRemoteId());\n                if (mWaitingToPreview != null && mWaitingToPreview.isDown() && EditImageActivity.OPEN_IMAGE_EDITOR.equals(downloadBehaviour)) {\n                    startImageEditor(mWaitingToPreview);\n                }\n            }\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled onReceive from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onReceive\n\n        Method Code: @Override\n        public void onReceive(Context context, Intent intent) {\n            boolean sameAccount = isSameAccount(intent);\n            String downloadedRemotePath = intent.getStringExtra(FileDownloadWorker.EXTRA_REMOTE_PATH);\n            String downloadBehaviour = intent.getStringExtra(OCFileListFragment.DOWNLOAD_BEHAVIOUR);\n            boolean isDescendant = isDescendant(downloadedRemotePath);\n\n            if (sameAccount && isDescendant) {\n                String linkedToRemotePath = intent.getStringExtra(FileDownloadWorker.EXTRA_LINKED_TO_PATH);\n                if (linkedToRemotePath == null || isAscendant(linkedToRemotePath)) {\n                    updateListOfFilesFragment(false);\n                }\n                refreshDetailsFragmentIfVisible(intent.getAction(), downloadedRemotePath, intent.getBooleanExtra(FileDownloadWorker.EXTRA_DOWNLOAD_RESULT, false));\n            }\n\n            if (mWaitingToSend != null) {\n                // update file after downloading\n                mWaitingToSend = getStorageManager().getFileByRemoteId(mWaitingToSend.getRemoteId());\n                if (mWaitingToSend != null && mWaitingToSend.isDown() && OCFileListFragment.DOWNLOAD_SEND.equals(downloadBehaviour)) {\n                    String packageName = intent.getStringExtra(SendShareDialog.PACKAGE_NAME);\n                    String activityName = intent.getStringExtra(SendShareDialog.ACTIVITY_NAME);\n\n                    sendDownloadedFile(packageName, activityName);\n                }\n            }\n\n            if (mWaitingToPreview != null) {\n                mWaitingToPreview = getStorageManager().getFileByRemoteId(mWaitingToPreview.getRemoteId());\n                if (mWaitingToPreview != null && mWaitingToPreview.isDown() && EditImageActivity.OPEN_IMAGE_EDITOR.equals(downloadBehaviour)) {\n                    startImageEditor(mWaitingToPreview);\n                }\n            }\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onReceive(context: Context, intent: Intent) {\n    let sameAccount = isSameAccount(intent: intent)\n    let downloadedRemotePath = intent.getStringExtra(FileDownloadWorker.EXTRA_REMOTE_PATH)\n    let downloadBehaviour = intent.getStringExtra(OCFileListFragment.DOWNLOAD_BEHAVIOUR)\n    let isDescendant = isDescendant(path: downloadedRemotePath)\n\n    if sameAccount && isDescendant {\n        let linkedToRemotePath = intent.getStringExtra(FileDownloadWorker.EXTRA_LINKED_TO_PATH)\n        if linkedToRemotePath == nil || isAscendant(path: linkedToRemotePath) {\n            updateListOfFilesFragment(reload: false)\n        }\n        refreshDetailsFragmentIfVisible(action: intent.getAction(), remotePath: downloadedRemotePath, downloadResult: intent.getBooleanExtra(FileDownloadWorker.EXTRA_DOWNLOAD_RESULT, defaultValue: false))\n    }\n\n    if mWaitingToSend != nil {\n        mWaitingToSend = getStorageManager().getFileByRemoteId(remoteId: mWaitingToSend.getRemoteId())\n        if mWaitingToSend != nil && mWaitingToSend.isDown() && OCFileListFragment.DOWNLOAD_SEND == downloadBehaviour {\n            let packageName = intent.getStringExtra(SendShareDialog.PACKAGE_NAME)\n            let activityName = intent.getStringExtra(SendShareDialog.ACTIVITY_NAME)\n\n            sendDownloadedFile(packageName: packageName, activityName: activityName)\n        }\n    }\n\n    if mWaitingToPreview != nil {\n        mWaitingToPreview = getStorageManager().getFileByRemoteId(remoteId: mWaitingToPreview.getRemoteId())\n        if mWaitingToPreview != nil && mWaitingToPreview.isDown() && EditImageActivity.OPEN_IMAGE_EDITOR == downloadBehaviour {\n            startImageEditor(file: mWaitingToPreview)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "isDescendant",
        "method_code": "private boolean isDescendant(String downloadedRemotePath) {\n            OCFile currentDir = getCurrentDir();\n            return currentDir != null && downloadedRemotePath != null && downloadedRemotePath.startsWith(currentDir.getRemotePath());\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled isDescendant from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: isDescendant\n\n        Method Code: private boolean isDescendant(String downloadedRemotePath) {\n            OCFile currentDir = getCurrentDir();\n            return currentDir != null && downloadedRemotePath != null && downloadedRemotePath.startsWith(currentDir.getRemotePath());\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func isDescendant(downloadedRemotePath: String?) -> Bool {\n    guard let currentDir = getCurrentDir(), let downloadedRemotePath = downloadedRemotePath else {\n        return false\n    }\n    return downloadedRemotePath.hasPrefix(currentDir.getRemotePath())\n}\n```"
    },
    {
        "method_name": "isAscendant",
        "method_code": "private boolean isAscendant(String linkedToRemotePath) {\n            OCFile currentDir = getCurrentDir();\n            return currentDir != null && currentDir.getRemotePath().startsWith(linkedToRemotePath);\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled isAscendant from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: isAscendant\n\n        Method Code: private boolean isAscendant(String linkedToRemotePath) {\n            OCFile currentDir = getCurrentDir();\n            return currentDir != null && currentDir.getRemotePath().startsWith(linkedToRemotePath);\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func isAscendant(linkedToRemotePath: String) -> Bool {\n    if let currentDir = getCurrentDir() {\n        return currentDir.getRemotePath().hasPrefix(linkedToRemotePath)\n    }\n    return false\n}\n```"
    },
    {
        "method_name": "isSameAccount",
        "method_code": "private boolean isSameAccount(Intent intent) {\n            String accountName = intent.getStringExtra(FileDownloadWorker.EXTRA_ACCOUNT_NAME);\n            return accountName != null && getAccount() != null && accountName.equals(getAccount().name);\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled isSameAccount from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: isSameAccount\n\n        Method Code: private boolean isSameAccount(Intent intent) {\n            String accountName = intent.getStringExtra(FileDownloadWorker.EXTRA_ACCOUNT_NAME);\n            return accountName != null && getAccount() != null && accountName.equals(getAccount().name);\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func isSameAccount(intent: Intent) -> Bool {\n    if let accountName = intent.getStringExtra(FileDownloadWorker.EXTRA_ACCOUNT_NAME),\n       let account = getAccount() {\n        return accountName == account.name\n    }\n    return false\n}\n```"
    },
    {
        "method_name": "browseToRoot",
        "method_code": "public void browseToRoot() {\n        OCFileListFragment listOfFiles = getListOfFilesFragment();\n        if (listOfFiles != null) {  // should never be null, indeed\n            OCFile root = getStorageManager().getFileByPath(OCFile.ROOT_PATH);\n            listOfFiles.listDirectory(root, MainApp.isOnlyOnDevice(), false);\n            setFile(listOfFiles.getCurrentFile());\n            startSyncFolderOperation(root, false);\n        }\n        binding.fabMain.setImageResource(R.drawable.ic_plus);\n        resetTitleBarAndScrolling();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled browseToRoot from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: browseToRoot\n\n        Method Code: public void browseToRoot() {\n        OCFileListFragment listOfFiles = getListOfFilesFragment();\n        if (listOfFiles != null) {  // should never be null, indeed\n            OCFile root = getStorageManager().getFileByPath(OCFile.ROOT_PATH);\n            listOfFiles.listDirectory(root, MainApp.isOnlyOnDevice(), false);\n            setFile(listOfFiles.getCurrentFile());\n            startSyncFolderOperation(root, false);\n        }\n        binding.fabMain.setImageResource(R.drawable.ic_plus);\n        resetTitleBarAndScrolling();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc browseToRoot() {\n    if let listOfFiles = getListOfFilesFragment() {\n        if let root = getStorageManager().getFileByPath(OCFile.ROOT_PATH) {\n            listOfFiles.listDirectory(root, MainApp.isOnlyOnDevice(), false)\n            setFile(listOfFiles.getCurrentFile())\n            startSyncFolderOperation(root, false)\n        }\n    }\n    binding.fabMain.setImageResource(R.drawable.ic_plus)\n    resetTitleBarAndScrolling()\n}\n```"
    },
    {
        "method_name": "onBrowsedDownTo",
        "method_code": "@Override\n    public void onBrowsedDownTo(OCFile directory) {\n        setFile(directory);\n        resetTitleBarAndScrolling();\n        // Sync Folder\n        startSyncFolderOperation(directory, false);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onBrowsedDownTo from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onBrowsedDownTo\n\n        Method Code: @Override\n    public void onBrowsedDownTo(OCFile directory) {\n        setFile(directory);\n        resetTitleBarAndScrolling();\n        // Sync Folder\n        startSyncFolderOperation(directory, false);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onBrowsedDownTo(directory: OCFile) {\n    setFile(directory)\n    resetTitleBarAndScrolling()\n    // Sync Folder\n    startSyncFolderOperation(directory, false)\n}\n```"
    },
    {
        "method_name": "showDetails",
        "method_code": "@Override\n    public void showDetails(OCFile file) {\n        showDetails(file, 0);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showDetails from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: showDetails\n\n        Method Code: @Override\n    public void showDetails(OCFile file) {\n        showDetails(file, 0);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func showDetails(_ file: OCFile) {\n    showDetails(file, 0)\n}\n```"
    },
    {
        "method_name": "showDetails",
        "method_code": "public void showDetails(OCFile file, int activeTab) {\n        User currentUser = getUser().orElseThrow(RuntimeException::new);\n\n        resetScrolling(true);\n\n        Fragment detailFragment = FileDetailFragment.newInstance(file, currentUser, activeTab);\n        setLeftFragment(detailFragment, false);\n        configureToolbarForPreview(file);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showDetails from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: showDetails\n\n        Method Code: public void showDetails(OCFile file, int activeTab) {\n        User currentUser = getUser().orElseThrow(RuntimeException::new);\n\n        resetScrolling(true);\n\n        Fragment detailFragment = FileDetailFragment.newInstance(file, currentUser, activeTab);\n        setLeftFragment(detailFragment, false);\n        configureToolbarForPreview(file);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc showDetails(file: OCFile, activeTab: Int) {\n    guard let currentUser = getUser() else {\n        fatalError(\"User not found\")\n    }\n\n    resetScrolling(true)\n\n    let detailFragment = FileDetailFragment.newInstance(file: file, user: currentUser, activeTab: activeTab)\n    setLeftFragment(fragment: detailFragment, animated: false)\n    configureToolbarForPreview(file: file)\n}\n```"
    },
    {
        "method_name": "lockScrolling",
        "method_code": "@VisibleForTesting\n    public void lockScrolling() {\n        binding.appbar.appbar.setExpanded(true, false);\n        final AppBarLayout.LayoutParams appbarParams = (AppBarLayout.LayoutParams) binding.appbar.toolbarFrame.getLayoutParams();\n        appbarParams.setScrollFlags(AppBarLayout.LayoutParams.SCROLL_FLAG_NO_SCROLL);\n        binding.appbar.toolbarFrame.setLayoutParams(appbarParams);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled lockScrolling from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: lockScrolling\n\n        Method Code: @VisibleForTesting\n    public void lockScrolling() {\n        binding.appbar.appbar.setExpanded(true, false);\n        final AppBarLayout.LayoutParams appbarParams = (AppBarLayout.LayoutParams) binding.appbar.toolbarFrame.getLayoutParams();\n        appbarParams.setScrollFlags(AppBarLayout.LayoutParams.SCROLL_FLAG_NO_SCROLL);\n        binding.appbar.toolbarFrame.setLayoutParams(appbarParams);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc lockScrolling() {\n    binding.appbar.appbar.setExpanded(true, animated: false)\n    if let appbarParams = binding.appbar.toolbarFrame.layoutParams as? AppBarLayout.LayoutParams {\n        appbarParams.scrollFlags = AppBarLayout.LayoutParams.ScrollFlags.noScroll\n        binding.appbar.toolbarFrame.layoutParams = appbarParams\n    }\n}\n```"
    },
    {
        "method_name": "resetScrolling",
        "method_code": "@VisibleForTesting\n    public void resetScrolling(boolean expandAppBar) {\n        AppBarLayout.LayoutParams appbarParams = (AppBarLayout.LayoutParams) binding.appbar.toolbarFrame.getLayoutParams();\n        appbarParams.setScrollFlags(AppBarLayout.LayoutParams.SCROLL_FLAG_SCROLL | AppBarLayout.LayoutParams.SCROLL_FLAG_ENTER_ALWAYS);\n        binding.appbar.toolbarFrame.setLayoutParams(appbarParams);\n        if (expandAppBar) {\n            binding.appbar.appbar.setExpanded(true, false);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled resetScrolling from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: resetScrolling\n\n        Method Code: @VisibleForTesting\n    public void resetScrolling(boolean expandAppBar) {\n        AppBarLayout.LayoutParams appbarParams = (AppBarLayout.LayoutParams) binding.appbar.toolbarFrame.getLayoutParams();\n        appbarParams.setScrollFlags(AppBarLayout.LayoutParams.SCROLL_FLAG_SCROLL | AppBarLayout.LayoutParams.SCROLL_FLAG_ENTER_ALWAYS);\n        binding.appbar.toolbarFrame.setLayoutParams(appbarParams);\n        if (expandAppBar) {\n            binding.appbar.appbar.setExpanded(true, false);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc resetScrolling(expandAppBar: Bool) {\n    if let appbarParams = binding.appbar.toolbarFrame.layoutParams as? AppBarLayout.LayoutParams {\n        appbarParams.scrollFlags = [AppBarLayout.LayoutParams.ScrollFlag.scroll, AppBarLayout.LayoutParams.ScrollFlag.enterAlways]\n        binding.appbar.toolbarFrame.layoutParams = appbarParams\n    }\n    if expandAppBar {\n        binding.appbar.appbar.setExpanded(true, animate: false)\n    }\n}\n```"
    },
    {
        "method_name": "updateActionBarTitleAndHomeButton",
        "method_code": "@Override\n    public void updateActionBarTitleAndHomeButton(OCFile chosenFile) {\n        if (chosenFile == null) {\n            chosenFile = getFile();     // if no file is passed, current file decides\n        }\n        super.updateActionBarTitleAndHomeButton(chosenFile);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled updateActionBarTitleAndHomeButton from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: updateActionBarTitleAndHomeButton\n\n        Method Code: @Override\n    public void updateActionBarTitleAndHomeButton(OCFile chosenFile) {\n        if (chosenFile == null) {\n            chosenFile = getFile();     // if no file is passed, current file decides\n        }\n        super.updateActionBarTitleAndHomeButton(chosenFile);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func updateActionBarTitleAndHomeButton(_ chosenFile: OCFile?) {\n    var fileToUse = chosenFile\n    if fileToUse == nil {\n        fileToUse = getFile() // if no file is passed, current file decides\n    }\n    super.updateActionBarTitleAndHomeButton(fileToUse)\n}\n```"
    },
    {
        "method_name": "isDrawerIndicatorAvailable",
        "method_code": "@Override\n    public boolean isDrawerIndicatorAvailable() {\n        return isRoot(getCurrentDir());\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled isDrawerIndicatorAvailable from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: isDrawerIndicatorAvailable\n\n        Method Code: @Override\n    public boolean isDrawerIndicatorAvailable() {\n        return isRoot(getCurrentDir());\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func isDrawerIndicatorAvailable() -> Bool {\n    return isRoot(getCurrentDir())\n}\n```"
    },
    {
        "method_name": "observeWorkerState",
        "method_code": "private void observeWorkerState() {\n        WorkerStateLiveData.Companion.instance().observe(this, state -> {\n            if (state instanceof WorkerState.DownloadStarted) {\n                Log_OC.d(TAG, \"Download worker started\");\n                handleDownloadWorkerState();\n            } else if (state instanceof WorkerState.DownloadFinished) {\n                fileDownloadProgressListener = null;\n            } else if (state instanceof WorkerState.UploadFinished) {\n                refreshList();\n            } else if (state instanceof  WorkerState.OfflineOperationsCompleted) {\n                refreshCurrentDirectory();\n            }\n        });\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled observeWorkerState from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: observeWorkerState\n\n        Method Code: private void observeWorkerState() {\n        WorkerStateLiveData.Companion.instance().observe(this, state -> {\n            if (state instanceof WorkerState.DownloadStarted) {\n                Log_OC.d(TAG, \"Download worker started\");\n                handleDownloadWorkerState();\n            } else if (state instanceof WorkerState.DownloadFinished) {\n                fileDownloadProgressListener = null;\n            } else if (state instanceof WorkerState.UploadFinished) {\n                refreshList();\n            } else if (state instanceof  WorkerState.OfflineOperationsCompleted) {\n                refreshCurrentDirectory();\n            }\n        });\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func observeWorkerState() {\n    WorkerStateLiveData.instance().observe(self) { state in\n        if state is WorkerState.DownloadStarted {\n            Log_OC.d(TAG, \"Download worker started\")\n            handleDownloadWorkerState()\n        } else if state is WorkerState.DownloadFinished {\n            fileDownloadProgressListener = nil\n        } else if state is WorkerState.UploadFinished {\n            refreshList()\n        } else if state is WorkerState.OfflineOperationsCompleted {\n            refreshCurrentDirectory()\n        }\n    }\n}\n```"
    },
    {
        "method_name": "refreshCurrentDirectory",
        "method_code": "public void refreshCurrentDirectory() {\n        OCFile currentDir = (getCurrentDir() != null) ?\n            getStorageManager().getFileByDecryptedRemotePath(getCurrentDir().getRemotePath()) : null;\n\n        OCFileListFragment fileListFragment =\n            (ActivityExtensionsKt.lastFragment(this) instanceof OCFileListFragment fragment) ? fragment : getListOfFilesFragment();\n\n        if (fileListFragment != null) {\n            fileListFragment.listDirectory(currentDir, false, false);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled refreshCurrentDirectory from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: refreshCurrentDirectory\n\n        Method Code: public void refreshCurrentDirectory() {\n        OCFile currentDir = (getCurrentDir() != null) ?\n            getStorageManager().getFileByDecryptedRemotePath(getCurrentDir().getRemotePath()) : null;\n\n        OCFileListFragment fileListFragment =\n            (ActivityExtensionsKt.lastFragment(this) instanceof OCFileListFragment fragment) ? fragment : getListOfFilesFragment();\n\n        if (fileListFragment != null) {\n            fileListFragment.listDirectory(currentDir, false, false);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc refreshCurrentDirectory() {\n    let currentDir = (getCurrentDir() != nil) ? getStorageManager().getFileByDecryptedRemotePath(getCurrentDir()!.getRemotePath()) : nil\n\n    let fileListFragment = (ActivityExtensionsKt.lastFragment(self) as? OCFileListFragment) ?? getListOfFilesFragment()\n\n    if let fileListFragment = fileListFragment {\n        fileListFragment.listDirectory(currentDir, false, false)\n    }\n}\n```"
    },
    {
        "method_name": "handleDownloadWorkerState",
        "method_code": "private void handleDownloadWorkerState() {\n        if (mWaitingToPreview != null && getStorageManager() != null) {\n            mWaitingToPreview = getStorageManager().getFileById(mWaitingToPreview.getFileId());\n            if (mWaitingToPreview != null && !mWaitingToPreview.isDown()) {\n                requestForDownload();\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled handleDownloadWorkerState from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: handleDownloadWorkerState\n\n        Method Code: private void handleDownloadWorkerState() {\n        if (mWaitingToPreview != null && getStorageManager() != null) {\n            mWaitingToPreview = getStorageManager().getFileById(mWaitingToPreview.getFileId());\n            if (mWaitingToPreview != null && !mWaitingToPreview.isDown()) {\n                requestForDownload();\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func handleDownloadWorkerState() {\n    if let waitingToPreview = mWaitingToPreview, let storageManager = getStorageManager() {\n        mWaitingToPreview = storageManager.getFileById(waitingToPreview.getFileId())\n        if let waitingToPreview = mWaitingToPreview, !waitingToPreview.isDown() {\n            requestForDownload()\n        }\n    }\n}\n```"
    },
    {
        "method_name": "newTransferenceServiceConnection",
        "method_code": "@Override\n    protected ServiceConnection newTransferenceServiceConnection() {\n        return new ListServiceConnection();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled newTransferenceServiceConnection from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: newTransferenceServiceConnection\n\n        Method Code: @Override\n    protected ServiceConnection newTransferenceServiceConnection() {\n        return new ListServiceConnection();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func newTransferenceServiceConnection() -> ServiceConnection {\n    return ListServiceConnection()\n}\n```"
    },
    {
        "method_name": "onServiceConnected",
        "method_code": "@Override\n        public void onServiceConnected(ComponentName name, IBinder service) {\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled onServiceConnected from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onServiceConnected\n\n        Method Code: @Override\n        public void onServiceConnected(ComponentName name, IBinder service) {\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onServiceConnected(name: ComponentName, service: IBinder) {\n}\n```"
    },
    {
        "method_name": "onServiceDisconnected",
        "method_code": "@Override\n        public void onServiceDisconnected(ComponentName component) {\n            if (component.equals(new ComponentName(FileDisplayActivity.this, FileDownloadWorker.class))) {\n                Log_OC.d(TAG, \"Download service disconnected\");\n                fileDownloadProgressListener = null;\n            }\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled onServiceDisconnected from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onServiceDisconnected\n\n        Method Code: @Override\n        public void onServiceDisconnected(ComponentName component) {\n            if (component.equals(new ComponentName(FileDisplayActivity.this, FileDownloadWorker.class))) {\n                Log_OC.d(TAG, \"Download service disconnected\");\n                fileDownloadProgressListener = null;\n            }\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onServiceDisconnected(_ component: ComponentName) {\n    if component == ComponentName(FileDisplayActivity.self, FileDownloadWorker.self) {\n        Log_OC.d(TAG, \"Download service disconnected\")\n        fileDownloadProgressListener = nil\n    }\n}\n```"
    },
    {
        "method_name": "onRemoteOperationFinish",
        "method_code": "@Override\n    public void onRemoteOperationFinish(RemoteOperation operation, RemoteOperationResult result) {\n        super.onRemoteOperationFinish(operation, result);\n\n        if (operation instanceof RemoveFileOperation) {\n            onRemoveFileOperationFinish((RemoveFileOperation) operation, result);\n        } else if (operation instanceof RenameFileOperation) {\n            onRenameFileOperationFinish((RenameFileOperation) operation, result);\n        } else if (operation instanceof SynchronizeFileOperation) {\n            onSynchronizeFileOperationFinish((SynchronizeFileOperation) operation, result);\n        } else if (operation instanceof CreateFolderOperation) {\n            onCreateFolderOperationFinish((CreateFolderOperation) operation, result);\n        } else if (operation instanceof MoveFileOperation) {\n            onMoveFileOperationFinish((MoveFileOperation) operation, result);\n        } else if (operation instanceof CopyFileOperation) {\n            onCopyFileOperationFinish((CopyFileOperation) operation, result);\n        } else if (operation instanceof RestoreFileVersionRemoteOperation) {\n            onRestoreFileVersionOperationFinish(result);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onRemoteOperationFinish from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onRemoteOperationFinish\n\n        Method Code: @Override\n    public void onRemoteOperationFinish(RemoteOperation operation, RemoteOperationResult result) {\n        super.onRemoteOperationFinish(operation, result);\n\n        if (operation instanceof RemoveFileOperation) {\n            onRemoveFileOperationFinish((RemoveFileOperation) operation, result);\n        } else if (operation instanceof RenameFileOperation) {\n            onRenameFileOperationFinish((RenameFileOperation) operation, result);\n        } else if (operation instanceof SynchronizeFileOperation) {\n            onSynchronizeFileOperationFinish((SynchronizeFileOperation) operation, result);\n        } else if (operation instanceof CreateFolderOperation) {\n            onCreateFolderOperationFinish((CreateFolderOperation) operation, result);\n        } else if (operation instanceof MoveFileOperation) {\n            onMoveFileOperationFinish((MoveFileOperation) operation, result);\n        } else if (operation instanceof CopyFileOperation) {\n            onCopyFileOperationFinish((CopyFileOperation) operation, result);\n        } else if (operation instanceof RestoreFileVersionRemoteOperation) {\n            onRestoreFileVersionOperationFinish(result);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onRemoteOperationFinish(operation: RemoteOperation, result: RemoteOperationResult) {\n    super.onRemoteOperationFinish(operation: operation, result: result)\n\n    if let removeFileOperation = operation as? RemoveFileOperation {\n        onRemoveFileOperationFinish(operation: removeFileOperation, result: result)\n    } else if let renameFileOperation = operation as? RenameFileOperation {\n        onRenameFileOperationFinish(operation: renameFileOperation, result: result)\n    } else if let synchronizeFileOperation = operation as? SynchronizeFileOperation {\n        onSynchronizeFileOperationFinish(operation: synchronizeFileOperation, result: result)\n    } else if let createFolderOperation = operation as? CreateFolderOperation {\n        onCreateFolderOperationFinish(operation: createFolderOperation, result: result)\n    } else if let moveFileOperation = operation as? MoveFileOperation {\n        onMoveFileOperationFinish(operation: moveFileOperation, result: result)\n    } else if let copyFileOperation = operation as? CopyFileOperation {\n        onCopyFileOperationFinish(operation: copyFileOperation, result: result)\n    } else if operation is RestoreFileVersionRemoteOperation {\n        onRestoreFileVersionOperationFinish(result: result)\n    }\n}\n```"
    },
    {
        "method_name": "refreshShowDetails",
        "method_code": "private void refreshShowDetails() {\n        Fragment details = getLeftFragment();\n        if (details instanceof FileFragment) {\n            OCFile file = ((FileFragment) details).getFile();\n            if (file != null) {\n                file = getStorageManager().getFileByPath(file.getRemotePath());\n                if (details instanceof PreviewTextFragment) {\n                    // Refresh  OCFile of the fragment\n                    ((PreviewTextFileFragment) details).updateFile(file);\n                } else {\n                    showDetails(file);\n                }\n            }\n            supportInvalidateOptionsMenu();\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled refreshShowDetails from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: refreshShowDetails\n\n        Method Code: private void refreshShowDetails() {\n        Fragment details = getLeftFragment();\n        if (details instanceof FileFragment) {\n            OCFile file = ((FileFragment) details).getFile();\n            if (file != null) {\n                file = getStorageManager().getFileByPath(file.getRemotePath());\n                if (details instanceof PreviewTextFragment) {\n                    // Refresh  OCFile of the fragment\n                    ((PreviewTextFileFragment) details).updateFile(file);\n                } else {\n                    showDetails(file);\n                }\n            }\n            supportInvalidateOptionsMenu();\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func refreshShowDetails() {\n    if let details = getLeftFragment() as? FileFragment {\n        var file = details.getFile()\n        if let file = file {\n            file = getStorageManager().getFileByPath(file.getRemotePath())\n            if let previewTextFragment = details as? PreviewTextFileFragment {\n                previewTextFragment.updateFile(file)\n            } else {\n                showDetails(file)\n            }\n        }\n        supportInvalidateOptionsMenu()\n    }\n}\n```"
    },
    {
        "method_name": "onRemoveFileOperationFinish",
        "method_code": "private void onRemoveFileOperationFinish(RemoveFileOperation operation, RemoteOperationResult result) {\n\n        if (!operation.isInBackground()) {\n            DisplayUtils.showSnackMessage(this, ErrorMessageAdapter.getErrorCauseMessage(result, operation, getResources()));\n        }\n\n        if (result.isSuccess()) {\n            OCFile removedFile = operation.getFile();\n            tryStopPlaying(removedFile);\n            Fragment leftFragment = getLeftFragment();\n\n            // check if file is still available, if so do nothing\n            boolean fileAvailable = getStorageManager().fileExists(removedFile.getFileId());\n            if (leftFragment instanceof FileFragment && !fileAvailable && removedFile.equals(((FileFragment) leftFragment).getFile())) {\n                setFile(getStorageManager().getFileById(removedFile.getParentId()));\n                resetTitleBarAndScrolling();\n            }\n            OCFile parentFile = getStorageManager().getFileById(removedFile.getParentId());\n            if (parentFile != null && parentFile.equals(getCurrentDir())) {\n                updateListOfFilesFragment(false);\n            } else if (getLeftFragment() instanceof GalleryFragment galleryFragment) {\n                galleryFragment.onRefresh();\n            }\n            supportInvalidateOptionsMenu();\n        } else {\n            if (result.isSslRecoverableException()) {\n                mLastSslUntrustedServerResult = result;\n                showUntrustedCertDialog(mLastSslUntrustedServerResult);\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onRemoveFileOperationFinish from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onRemoveFileOperationFinish\n\n        Method Code: private void onRemoveFileOperationFinish(RemoveFileOperation operation, RemoteOperationResult result) {\n\n        if (!operation.isInBackground()) {\n            DisplayUtils.showSnackMessage(this, ErrorMessageAdapter.getErrorCauseMessage(result, operation, getResources()));\n        }\n\n        if (result.isSuccess()) {\n            OCFile removedFile = operation.getFile();\n            tryStopPlaying(removedFile);\n            Fragment leftFragment = getLeftFragment();\n\n            // check if file is still available, if so do nothing\n            boolean fileAvailable = getStorageManager().fileExists(removedFile.getFileId());\n            if (leftFragment instanceof FileFragment && !fileAvailable && removedFile.equals(((FileFragment) leftFragment).getFile())) {\n                setFile(getStorageManager().getFileById(removedFile.getParentId()));\n                resetTitleBarAndScrolling();\n            }\n            OCFile parentFile = getStorageManager().getFileById(removedFile.getParentId());\n            if (parentFile != null && parentFile.equals(getCurrentDir())) {\n                updateListOfFilesFragment(false);\n            } else if (getLeftFragment() instanceof GalleryFragment galleryFragment) {\n                galleryFragment.onRefresh();\n            }\n            supportInvalidateOptionsMenu();\n        } else {\n            if (result.isSslRecoverableException()) {\n                mLastSslUntrustedServerResult = result;\n                showUntrustedCertDialog(mLastSslUntrustedServerResult);\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func onRemoveFileOperationFinish(operation: RemoveFileOperation, result: RemoteOperationResult) {\n    if !operation.isInBackground() {\n        DisplayUtils.showSnackMessage(self, ErrorMessageAdapter.getErrorCauseMessage(result, operation, getResources()))\n    }\n\n    if result.isSuccess() {\n        if let removedFile = operation.file {\n            tryStopPlaying(removedFile)\n            let leftFragment = getLeftFragment()\n\n            // check if file is still available, if so do nothing\n            let fileAvailable = getStorageManager().fileExists(removedFile.fileId)\n            if let fileFragment = leftFragment as? FileFragment, !fileAvailable, removedFile == fileFragment.file {\n                setFile(getStorageManager().getFileById(removedFile.parentId))\n                resetTitleBarAndScrolling()\n            }\n            if let parentFile = getStorageManager().getFileById(removedFile.parentId), parentFile == getCurrentDir() {\n                updateListOfFilesFragment(false)\n            } else if let galleryFragment = getLeftFragment() as? GalleryFragment {\n                galleryFragment.onRefresh()\n            }\n            supportInvalidateOptionsMenu()\n        }\n    } else {\n        if result.isSslRecoverableException() {\n            mLastSslUntrustedServerResult = result\n            showUntrustedCertDialog(mLastSslUntrustedServerResult)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "onRestoreFileVersionOperationFinish",
        "method_code": "private void onRestoreFileVersionOperationFinish(RemoteOperationResult result) {\n        if (result.isSuccess()) {\n            OCFile file = getFile();\n\n            // delete old local copy\n            if (file.isDown()) {\n                List<OCFile> list = new ArrayList<>();\n                list.add(file);\n                getFileOperationsHelper().removeFiles(list, true, true);\n\n                // download new version, only if file was previously download\n                getFileOperationsHelper().syncFile(file);\n            }\n\n            OCFile parent = getStorageManager().getFileById(file.getParentId());\n            startSyncFolderOperation(parent, true, true);\n\n            Fragment leftFragment = getLeftFragment();\n            if (leftFragment instanceof FileDetailFragment) {\n                FileDetailFragment fileDetailFragment = (FileDetailFragment) leftFragment;\n                fileDetailFragment.getFileDetailActivitiesFragment().reload();\n            }\n\n            DisplayUtils.showSnackMessage(this, R.string.file_version_restored_successfully);\n        } else {\n            DisplayUtils.showSnackMessage(this, R.string.file_version_restored_error);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onRestoreFileVersionOperationFinish from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onRestoreFileVersionOperationFinish\n\n        Method Code: private void onRestoreFileVersionOperationFinish(RemoteOperationResult result) {\n        if (result.isSuccess()) {\n            OCFile file = getFile();\n\n            // delete old local copy\n            if (file.isDown()) {\n                List<OCFile> list = new ArrayList<>();\n                list.add(file);\n                getFileOperationsHelper().removeFiles(list, true, true);\n\n                // download new version, only if file was previously download\n                getFileOperationsHelper().syncFile(file);\n            }\n\n            OCFile parent = getStorageManager().getFileById(file.getParentId());\n            startSyncFolderOperation(parent, true, true);\n\n            Fragment leftFragment = getLeftFragment();\n            if (leftFragment instanceof FileDetailFragment) {\n                FileDetailFragment fileDetailFragment = (FileDetailFragment) leftFragment;\n                fileDetailFragment.getFileDetailActivitiesFragment().reload();\n            }\n\n            DisplayUtils.showSnackMessage(this, R.string.file_version_restored_successfully);\n        } else {\n            DisplayUtils.showSnackMessage(this, R.string.file_version_restored_error);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func onRestoreFileVersionOperationFinish(result: RemoteOperationResult) {\n    if result.isSuccess() {\n        if let file = getFile() {\n            if file.isDown() {\n                var list = [OCFile]()\n                list.append(file)\n                getFileOperationsHelper().removeFiles(list, true, true)\n                getFileOperationsHelper().syncFile(file)\n            }\n\n            if let parent = getStorageManager().getFileById(file.getParentId()) {\n                startSyncFolderOperation(parent, true, true)\n            }\n\n            if let leftFragment = getLeftFragment() as? FileDetailFragment {\n                leftFragment.getFileDetailActivitiesFragment().reload()\n            }\n\n            DisplayUtils.showSnackMessage(self, R.string.file_version_restored_successfully)\n        }\n    } else {\n        DisplayUtils.showSnackMessage(self, R.string.file_version_restored_error)\n    }\n}\n```"
    },
    {
        "method_name": "tryStopPlaying",
        "method_code": "private void tryStopPlaying(OCFile file) {\n        // placeholder for stop-on-delete future code\n        if (mPlayerConnection != null && MimeTypeUtil.isAudio(file) && mPlayerConnection.isPlaying()) {\n            mPlayerConnection.stop(file);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled tryStopPlaying from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: tryStopPlaying\n\n        Method Code: private void tryStopPlaying(OCFile file) {\n        // placeholder for stop-on-delete future code\n        if (mPlayerConnection != null && MimeTypeUtil.isAudio(file) && mPlayerConnection.isPlaying()) {\n            mPlayerConnection.stop(file);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func tryStopPlaying(file: OCFile) {\n    // placeholder for stop-on-delete future code\n    if let playerConnection = mPlayerConnection, MimeTypeUtil.isAudio(file), playerConnection.isPlaying() {\n        playerConnection.stop(file)\n    }\n}\n```"
    },
    {
        "method_name": "onMoveFileOperationFinish",
        "method_code": "private void onMoveFileOperationFinish(MoveFileOperation operation, RemoteOperationResult result) {\n        if (result.isSuccess()) {\n            syncAndUpdateFolder(true);\n        } else {\n            try {\n                DisplayUtils.showSnackMessage(this, ErrorMessageAdapter.getErrorCauseMessage(result, operation, getResources()));\n\n            } catch (NotFoundException e) {\n                Log_OC.e(TAG, \"Error while trying to show fail message \", e);\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onMoveFileOperationFinish from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onMoveFileOperationFinish\n\n        Method Code: private void onMoveFileOperationFinish(MoveFileOperation operation, RemoteOperationResult result) {\n        if (result.isSuccess()) {\n            syncAndUpdateFolder(true);\n        } else {\n            try {\n                DisplayUtils.showSnackMessage(this, ErrorMessageAdapter.getErrorCauseMessage(result, operation, getResources()));\n\n            } catch (NotFoundException e) {\n                Log_OC.e(TAG, \"Error while trying to show fail message \", e);\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func onMoveFileOperationFinish(operation: MoveFileOperation, result: RemoteOperationResult) {\n    if result.isSuccess() {\n        syncAndUpdateFolder(true)\n    } else {\n        do {\n            try DisplayUtils.showSnackMessage(self, ErrorMessageAdapter.getErrorCauseMessage(result, operation, resources))\n        } catch let error as NSError {\n            Log_OC.e(TAG, \"Error while trying to show fail message \", error)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "onCopyFileOperationFinish",
        "method_code": "private void onCopyFileOperationFinish(CopyFileOperation operation, RemoteOperationResult result) {\n        if (result.isSuccess()) {\n            updateListOfFilesFragment(false);\n        } else {\n            try {\n                DisplayUtils.showSnackMessage(this, ErrorMessageAdapter.getErrorCauseMessage(result, operation, getResources()));\n\n            } catch (NotFoundException e) {\n                Log_OC.e(TAG, \"Error while trying to show fail message \", e);\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onCopyFileOperationFinish from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onCopyFileOperationFinish\n\n        Method Code: private void onCopyFileOperationFinish(CopyFileOperation operation, RemoteOperationResult result) {\n        if (result.isSuccess()) {\n            updateListOfFilesFragment(false);\n        } else {\n            try {\n                DisplayUtils.showSnackMessage(this, ErrorMessageAdapter.getErrorCauseMessage(result, operation, getResources()));\n\n            } catch (NotFoundException e) {\n                Log_OC.e(TAG, \"Error while trying to show fail message \", e);\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func onCopyFileOperationFinish(operation: CopyFileOperation, result: RemoteOperationResult) {\n    if result.isSuccess() {\n        updateListOfFilesFragment(false)\n    } else {\n        do {\n            try DisplayUtils.showSnackMessage(self, ErrorMessageAdapter.getErrorCauseMessage(result, operation, resources))\n        } catch let error as NSError {\n            Log_OC.e(TAG, \"Error while trying to show fail message \", error)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "onRenameFileOperationFinish",
        "method_code": "private void onRenameFileOperationFinish(RenameFileOperation operation, RemoteOperationResult result) {\n        Optional<User> optionalUser = getUser();\n        OCFile renamedFile = operation.getFile();\n        if (result.isSuccess() && optionalUser.isPresent()) {\n            final User currentUser = optionalUser.get();\n            Fragment leftFragment = getLeftFragment();\n            if (leftFragment instanceof FileFragment) {\n                final FileFragment fileFragment = (FileFragment) leftFragment;\n                if (fileFragment instanceof FileDetailFragment && renamedFile.equals(fileFragment.getFile())) {\n                    ((FileDetailFragment) fileFragment).updateFileDetails(renamedFile, currentUser);\n                    showDetails(renamedFile);\n\n                } else if (fileFragment instanceof PreviewMediaFragment && renamedFile.equals(fileFragment.getFile())) {\n                    ((PreviewMediaFragment) fileFragment).updateFile(renamedFile);\n                    if (PreviewMediaFragment.canBePreviewed(renamedFile)) {\n                        long position = ((PreviewMediaFragment) fileFragment).getPosition();\n                        startMediaPreview(renamedFile, position, true, true, true, false);\n                    } else {\n                        getFileOperationsHelper().openFile(renamedFile);\n                    }\n                } else if (fileFragment instanceof PreviewTextFragment && renamedFile.equals(fileFragment.getFile())) {\n                    ((PreviewTextFileFragment) fileFragment).updateFile(renamedFile);\n                    if (PreviewTextFileFragment.canBePreviewed(renamedFile)) {\n                        startTextPreview(renamedFile, true);\n                    } else {\n                        getFileOperationsHelper().openFile(renamedFile);\n                    }\n                }\n            }\n\n            OCFile file = getStorageManager().getFileById(renamedFile.getParentId());\n            if (file != null && file.equals(getCurrentDir())) {\n                updateListOfFilesFragment(false);\n            }\n\n        } else {\n            DisplayUtils.showSnackMessage(this, ErrorMessageAdapter.getErrorCauseMessage(result, operation, getResources()));\n\n            if (result.isSslRecoverableException()) {\n                mLastSslUntrustedServerResult = result;\n                showUntrustedCertDialog(mLastSslUntrustedServerResult);\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onRenameFileOperationFinish from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onRenameFileOperationFinish\n\n        Method Code: private void onRenameFileOperationFinish(RenameFileOperation operation, RemoteOperationResult result) {\n        Optional<User> optionalUser = getUser();\n        OCFile renamedFile = operation.getFile();\n        if (result.isSuccess() && optionalUser.isPresent()) {\n            final User currentUser = optionalUser.get();\n            Fragment leftFragment = getLeftFragment();\n            if (leftFragment instanceof FileFragment) {\n                final FileFragment fileFragment = (FileFragment) leftFragment;\n                if (fileFragment instanceof FileDetailFragment && renamedFile.equals(fileFragment.getFile())) {\n                    ((FileDetailFragment) fileFragment).updateFileDetails(renamedFile, currentUser);\n                    showDetails(renamedFile);\n\n                } else if (fileFragment instanceof PreviewMediaFragment && renamedFile.equals(fileFragment.getFile())) {\n                    ((PreviewMediaFragment) fileFragment).updateFile(renamedFile);\n                    if (PreviewMediaFragment.canBePreviewed(renamedFile)) {\n                        long position = ((PreviewMediaFragment) fileFragment).getPosition();\n                        startMediaPreview(renamedFile, position, true, true, true, false);\n                    } else {\n                        getFileOperationsHelper().openFile(renamedFile);\n                    }\n                } else if (fileFragment instanceof PreviewTextFragment && renamedFile.equals(fileFragment.getFile())) {\n                    ((PreviewTextFileFragment) fileFragment).updateFile(renamedFile);\n                    if (PreviewTextFileFragment.canBePreviewed(renamedFile)) {\n                        startTextPreview(renamedFile, true);\n                    } else {\n                        getFileOperationsHelper().openFile(renamedFile);\n                    }\n                }\n            }\n\n            OCFile file = getStorageManager().getFileById(renamedFile.getParentId());\n            if (file != null && file.equals(getCurrentDir())) {\n                updateListOfFilesFragment(false);\n            }\n\n        } else {\n            DisplayUtils.showSnackMessage(this, ErrorMessageAdapter.getErrorCauseMessage(result, operation, getResources()));\n\n            if (result.isSslRecoverableException()) {\n                mLastSslUntrustedServerResult = result;\n                showUntrustedCertDialog(mLastSslUntrustedServerResult);\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func onRenameFileOperationFinish(operation: RenameFileOperation, result: RemoteOperationResult) {\n    let optionalUser = getUser()\n    let renamedFile = operation.getFile()\n    if result.isSuccess, let currentUser = optionalUser {\n        if let leftFragment = getLeftFragment() as? FileFragment {\n            if let fileFragment = leftFragment as? FileDetailFragment, renamedFile == fileFragment.getFile() {\n                fileFragment.updateFileDetails(renamedFile, currentUser)\n                showDetails(renamedFile)\n            } else if let fileFragment = leftFragment as? PreviewMediaFragment, renamedFile == fileFragment.getFile() {\n                fileFragment.updateFile(renamedFile)\n                if PreviewMediaFragment.canBePreviewed(renamedFile) {\n                    let position = fileFragment.getPosition()\n                    startMediaPreview(renamedFile, position, true, true, true, false)\n                } else {\n                    getFileOperationsHelper().openFile(renamedFile)\n                }\n            } else if let fileFragment = leftFragment as? PreviewTextFileFragment, renamedFile == fileFragment.getFile() {\n                fileFragment.updateFile(renamedFile)\n                if PreviewTextFileFragment.canBePreviewed(renamedFile) {\n                    startTextPreview(renamedFile, true)\n                } else {\n                    getFileOperationsHelper().openFile(renamedFile)\n                }\n            }\n        }\n\n        if let file = getStorageManager().getFileById(renamedFile.getParentId()), file == getCurrentDir() {\n            updateListOfFilesFragment(false)\n        }\n    } else {\n        DisplayUtils.showSnackMessage(self, ErrorMessageAdapter.getErrorCauseMessage(result, operation, getResources()))\n\n        if result.isSslRecoverableException() {\n            mLastSslUntrustedServerResult = result\n            showUntrustedCertDialog(mLastSslUntrustedServerResult)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "onSynchronizeFileOperationFinish",
        "method_code": "private void onSynchronizeFileOperationFinish(SynchronizeFileOperation operation, RemoteOperationResult result) {\n        if (result.isSuccess() && operation.transferWasRequested()) {\n            OCFile syncedFile = operation.getLocalFile();\n            onTransferStateChanged(syncedFile, true, true);\n            supportInvalidateOptionsMenu();\n            refreshShowDetails();\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onSynchronizeFileOperationFinish from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onSynchronizeFileOperationFinish\n\n        Method Code: private void onSynchronizeFileOperationFinish(SynchronizeFileOperation operation, RemoteOperationResult result) {\n        if (result.isSuccess() && operation.transferWasRequested()) {\n            OCFile syncedFile = operation.getLocalFile();\n            onTransferStateChanged(syncedFile, true, true);\n            supportInvalidateOptionsMenu();\n            refreshShowDetails();\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func onSynchronizeFileOperationFinish(operation: SynchronizeFileOperation, result: RemoteOperationResult) {\n    if result.isSuccess() && operation.transferWasRequested() {\n        let syncedFile = operation.getLocalFile()\n        onTransferStateChanged(syncedFile, true, true)\n        supportInvalidateOptionsMenu()\n        refreshShowDetails()\n    }\n}\n```"
    },
    {
        "method_name": "onCreateFolderOperationFinish",
        "method_code": "private void onCreateFolderOperationFinish(CreateFolderOperation operation, RemoteOperationResult result) {\n        if (result.isSuccess()) {\n            OCFileListFragment fileListFragment = getListOfFilesFragment();\n            if (fileListFragment != null) {\n                fileListFragment.onItemClicked(getStorageManager().getFileByDecryptedRemotePath(operation.getRemotePath()));\n            }\n        } else {\n            try {\n                if (ResultCode.FOLDER_ALREADY_EXISTS == result.getCode()) {\n                    DisplayUtils.showSnackMessage(this, R.string.folder_already_exists);\n                } else {\n                    DisplayUtils.showSnackMessage(this, ErrorMessageAdapter.getErrorCauseMessage(result, operation, getResources()));\n                }\n            } catch (NotFoundException e) {\n                Log_OC.e(TAG, \"Error while trying to show fail message \", e);\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreateFolderOperationFinish from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onCreateFolderOperationFinish\n\n        Method Code: private void onCreateFolderOperationFinish(CreateFolderOperation operation, RemoteOperationResult result) {\n        if (result.isSuccess()) {\n            OCFileListFragment fileListFragment = getListOfFilesFragment();\n            if (fileListFragment != null) {\n                fileListFragment.onItemClicked(getStorageManager().getFileByDecryptedRemotePath(operation.getRemotePath()));\n            }\n        } else {\n            try {\n                if (ResultCode.FOLDER_ALREADY_EXISTS == result.getCode()) {\n                    DisplayUtils.showSnackMessage(this, R.string.folder_already_exists);\n                } else {\n                    DisplayUtils.showSnackMessage(this, ErrorMessageAdapter.getErrorCauseMessage(result, operation, getResources()));\n                }\n            } catch (NotFoundException e) {\n                Log_OC.e(TAG, \"Error while trying to show fail message \", e);\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func onCreateFolderOperationFinish(operation: CreateFolderOperation, result: RemoteOperationResult) {\n    if result.isSuccess() {\n        if let fileListFragment = getListOfFilesFragment() {\n            if let file = getStorageManager().getFileByDecryptedRemotePath(operation.getRemotePath()) {\n                fileListFragment.onItemClicked(file)\n            }\n        }\n    } else {\n        do {\n            if result.getCode() == .FOLDER_ALREADY_EXISTS {\n                DisplayUtils.showSnackMessage(self, R.string.folder_already_exists)\n            } else {\n                let errorMessage = try ErrorMessageAdapter.getErrorCauseMessage(result, operation, getResources())\n                DisplayUtils.showSnackMessage(self, errorMessage)\n            }\n        } catch let error as NSError {\n            Log_OC.e(TAG, \"Error while trying to show fail message \", error)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "onTransferStateChanged",
        "method_code": "@Override\n    public void onTransferStateChanged(OCFile file, boolean downloading, boolean uploading) {\n        updateListOfFilesFragment(false);\n        Fragment leftFragment = getLeftFragment();\n        Optional<User> optionalUser = getUser();\n        if (leftFragment instanceof FileDetailFragment && file.equals(((FileDetailFragment) leftFragment).getFile()) && optionalUser.isPresent()) {\n            final User currentUser = optionalUser.get();\n            if (downloading || uploading) {\n                ((FileDetailFragment) leftFragment).updateFileDetails(file, currentUser);\n            } else {\n                if (!file.fileExists()) {\n                    resetTitleBarAndScrolling();\n                } else {\n                    ((FileDetailFragment) leftFragment).updateFileDetails(false, true);\n                }\n            }\n        }\n\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onTransferStateChanged from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onTransferStateChanged\n\n        Method Code: @Override\n    public void onTransferStateChanged(OCFile file, boolean downloading, boolean uploading) {\n        updateListOfFilesFragment(false);\n        Fragment leftFragment = getLeftFragment();\n        Optional<User> optionalUser = getUser();\n        if (leftFragment instanceof FileDetailFragment && file.equals(((FileDetailFragment) leftFragment).getFile()) && optionalUser.isPresent()) {\n            final User currentUser = optionalUser.get();\n            if (downloading || uploading) {\n                ((FileDetailFragment) leftFragment).updateFileDetails(file, currentUser);\n            } else {\n                if (!file.fileExists()) {\n                    resetTitleBarAndScrolling();\n                } else {\n                    ((FileDetailFragment) leftFragment).updateFileDetails(false, true);\n                }\n            }\n        }\n\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onTransferStateChanged(file: OCFile, downloading: Bool, uploading: Bool) {\n    updateListOfFilesFragment(false)\n    if let leftFragment = getLeftFragment() as? FileDetailFragment, let currentUser = getUser() {\n        if file == leftFragment.getFile() {\n            if downloading || uploading {\n                leftFragment.updateFileDetails(file: file, user: currentUser)\n            } else {\n                if !file.fileExists() {\n                    resetTitleBarAndScrolling()\n                } else {\n                    leftFragment.updateFileDetails(false, true)\n                }\n            }\n        }\n    }\n}\n```"
    },
    {
        "method_name": "requestForDownload",
        "method_code": "private void requestForDownload() {\n        User user = getUser().orElseThrow(RuntimeException::new);\n        FileDownloadHelper.Companion.instance().downloadFileIfNotStartedBefore(user, mWaitingToPreview);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled requestForDownload from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: requestForDownload\n\n        Method Code: private void requestForDownload() {\n        User user = getUser().orElseThrow(RuntimeException::new);\n        FileDownloadHelper.Companion.instance().downloadFileIfNotStartedBefore(user, mWaitingToPreview);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func requestForDownload() {\n    guard let user = getUser() else {\n        fatalError(\"User not found\")\n    }\n    FileDownloadHelper.instance().downloadFileIfNotStartedBefore(user: user, file: mWaitingToPreview)\n}\n```"
    },
    {
        "method_name": "onSavedCertificate",
        "method_code": "@Override\n    public void onSavedCertificate() {\n        startSyncFolderOperation(getCurrentDir(), false);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onSavedCertificate from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onSavedCertificate\n\n        Method Code: @Override\n    public void onSavedCertificate() {\n        startSyncFolderOperation(getCurrentDir(), false);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onSavedCertificate() {\n    startSyncFolderOperation(getCurrentDir(), false)\n}\n```"
    },
    {
        "method_name": "startSyncFolderOperation",
        "method_code": "public void startSyncFolderOperation(OCFile folder, boolean ignoreETag) {\n        startSyncFolderOperation(folder, ignoreETag, false);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled startSyncFolderOperation from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: startSyncFolderOperation\n\n        Method Code: public void startSyncFolderOperation(OCFile folder, boolean ignoreETag) {\n        startSyncFolderOperation(folder, ignoreETag, false);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc startSyncFolderOperation(folder: OCFile, ignoreETag: Bool) {\n    startSyncFolderOperation(folder: folder, ignoreETag: ignoreETag, false)\n}\n```"
    },
    {
        "method_name": "startSyncFolderOperation",
        "method_code": "public void startSyncFolderOperation(final OCFile folder, final boolean ignoreETag, boolean ignoreFocus) {\n\n        // the execution is slightly delayed to allow the activity get the window focus if it's being started\n        // or if the method is called from a dialog that is being dismissed\n        if (TextUtils.isEmpty(searchQuery) && getUser().isPresent()) {\n            getHandler().postDelayed(() -> {\n                Optional<User> user = getUser();\n\n                if (!ignoreFocus && !hasWindowFocus() || !user.isPresent()) {\n                    // do not refresh if the user rotates the device while another window has focus\n                    // or if the current user is no longer valid\n                    return;\n                }\n\n                long currentSyncTime = System.currentTimeMillis();\n                mSyncInProgress = true;\n\n                // perform folder synchronization\n                RemoteOperation refreshFolderOperation = new RefreshFolderOperation(folder, currentSyncTime, false, ignoreETag, getStorageManager(), user.get(), getApplicationContext());\n                refreshFolderOperation.execute(getAccount(), MainApp.getAppContext(), FileDisplayActivity.this, null, null);\n\n                OCFileListFragment fragment = getListOfFilesFragment();\n\n                if (fragment != null && !(fragment instanceof GalleryFragment)) {\n                    fragment.setLoading(true);\n                }\n\n                setBackgroundText();\n            }, DELAY_TO_REQUEST_REFRESH_OPERATION_LATER);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled startSyncFolderOperation from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: startSyncFolderOperation\n\n        Method Code: public void startSyncFolderOperation(final OCFile folder, final boolean ignoreETag, boolean ignoreFocus) {\n\n        // the execution is slightly delayed to allow the activity get the window focus if it's being started\n        // or if the method is called from a dialog that is being dismissed\n        if (TextUtils.isEmpty(searchQuery) && getUser().isPresent()) {\n            getHandler().postDelayed(() -> {\n                Optional<User> user = getUser();\n\n                if (!ignoreFocus && !hasWindowFocus() || !user.isPresent()) {\n                    // do not refresh if the user rotates the device while another window has focus\n                    // or if the current user is no longer valid\n                    return;\n                }\n\n                long currentSyncTime = System.currentTimeMillis();\n                mSyncInProgress = true;\n\n                // perform folder synchronization\n                RemoteOperation refreshFolderOperation = new RefreshFolderOperation(folder, currentSyncTime, false, ignoreETag, getStorageManager(), user.get(), getApplicationContext());\n                refreshFolderOperation.execute(getAccount(), MainApp.getAppContext(), FileDisplayActivity.this, null, null);\n\n                OCFileListFragment fragment = getListOfFilesFragment();\n\n                if (fragment != null && !(fragment instanceof GalleryFragment)) {\n                    fragment.setLoading(true);\n                }\n\n                setBackgroundText();\n            }, DELAY_TO_REQUEST_REFRESH_OPERATION_LATER);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc startSyncFolderOperation(folder: OCFile, ignoreETag: Bool, ignoreFocus: Bool) {\n    if searchQuery.isEmpty, let user = getUser() {\n        DispatchQueue.main.asyncAfter(deadline: .now() + DELAY_TO_REQUEST_REFRESH_OPERATION_LATER) {\n            guard let user = self.getUser(), (!ignoreFocus && self.hasWindowFocus()) else {\n                return\n            }\n\n            let currentSyncTime = Date().timeIntervalSince1970 * 1000\n            self.mSyncInProgress = true\n\n            let refreshFolderOperation = RefreshFolderOperation(folder: folder, currentSyncTime: currentSyncTime, param3: false, ignoreETag: ignoreETag, storageManager: self.getStorageManager(), user: user, context: self.getApplicationContext())\n            refreshFolderOperation.execute(account: self.getAccount(), context: MainApp.getAppContext(), delegate: self, param4: nil, param5: nil)\n\n            if let fragment = self.getListOfFilesFragment(), !(fragment is GalleryFragment) {\n                fragment.setLoading(true)\n            }\n\n            self.setBackgroundText()\n        }\n    }\n}\n```"
    },
    {
        "method_name": "requestForDownload",
        "method_code": "private void requestForDownload(OCFile file, String downloadBehaviour, String packageName, String activityName) {\n        final User currentUser = getUser().orElseThrow(RuntimeException::new);\n        if (!FileDownloadHelper.Companion.instance().isDownloading(currentUser, file)) {\n            FileDownloadHelper.Companion.instance().downloadFile(currentUser, file, downloadBehaviour, DownloadType.DOWNLOAD, activityName, packageName, null);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled requestForDownload from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: requestForDownload\n\n        Method Code: private void requestForDownload(OCFile file, String downloadBehaviour, String packageName, String activityName) {\n        final User currentUser = getUser().orElseThrow(RuntimeException::new);\n        if (!FileDownloadHelper.Companion.instance().isDownloading(currentUser, file)) {\n            FileDownloadHelper.Companion.instance().downloadFile(currentUser, file, downloadBehaviour, DownloadType.DOWNLOAD, activityName, packageName, null);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func requestForDownload(file: OCFile, downloadBehaviour: String, packageName: String, activityName: String) {\n    guard let currentUser = getUser() else {\n        fatalError(\"User not found\")\n    }\n    if !FileDownloadHelper.instance().isDownloading(currentUser, file: file) {\n        FileDownloadHelper.instance().downloadFile(currentUser, file: file, downloadBehaviour: downloadBehaviour, downloadType: .download, activityName: activityName, packageName: packageName, completion: nil)\n    }\n}\n```"
    },
    {
        "method_name": "sendDownloadedFile",
        "method_code": "private void sendDownloadedFile(String packageName, String activityName) {\n        if (mWaitingToSend != null) {\n\n            Intent sendIntent = IntentUtil.createSendIntent(this, mWaitingToSend);\n            sendIntent.setComponent(new ComponentName(packageName, activityName));\n\n            // Show dialog\n            String sendTitle = getString(R.string.activity_chooser_send_file_title);\n            startActivity(Intent.createChooser(sendIntent, sendTitle));\n        } else {\n            Log_OC.e(TAG, \"Trying to send a NULL OCFile\");\n        }\n\n        mWaitingToSend = null;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled sendDownloadedFile from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: sendDownloadedFile\n\n        Method Code: private void sendDownloadedFile(String packageName, String activityName) {\n        if (mWaitingToSend != null) {\n\n            Intent sendIntent = IntentUtil.createSendIntent(this, mWaitingToSend);\n            sendIntent.setComponent(new ComponentName(packageName, activityName));\n\n            // Show dialog\n            String sendTitle = getString(R.string.activity_chooser_send_file_title);\n            startActivity(Intent.createChooser(sendIntent, sendTitle));\n        } else {\n            Log_OC.e(TAG, \"Trying to send a NULL OCFile\");\n        }\n\n        mWaitingToSend = null;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func sendDownloadedFile(packageName: String, activityName: String) {\n    if let waitingToSend = mWaitingToSend {\n        let sendIntent = IntentUtil.createSendIntent(context: self, file: waitingToSend)\n        sendIntent.setComponent(ComponentName(packageName: packageName, activityName: activityName))\n        \n        // Show dialog\n        let sendTitle = NSLocalizedString(\"activity_chooser_send_file_title\", comment: \"\")\n        startActivity(Intent.createChooser(sendIntent, sendTitle))\n    } else {\n        Log_OC.e(TAG, \"Trying to send a NULL OCFile\")\n    }\n    \n    mWaitingToSend = nil\n}\n```"
    },
    {
        "method_name": "startDownloadForSending",
        "method_code": "public void startDownloadForSending(OCFile file, String downloadBehaviour, String packageName, String activityName) {\n        mWaitingToSend = file;\n        requestForDownload(mWaitingToSend, downloadBehaviour, packageName, activityName);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled startDownloadForSending from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: startDownloadForSending\n\n        Method Code: public void startDownloadForSending(OCFile file, String downloadBehaviour, String packageName, String activityName) {\n        mWaitingToSend = file;\n        requestForDownload(mWaitingToSend, downloadBehaviour, packageName, activityName);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc startDownloadForSending(file: OCFile, downloadBehaviour: String, packageName: String, activityName: String) {\n    mWaitingToSend = file\n    requestForDownload(mWaitingToSend, downloadBehaviour: downloadBehaviour, packageName: packageName, activityName: activityName)\n}\n```"
    },
    {
        "method_name": "startImagePreview",
        "method_code": "public void startImagePreview(OCFile file, boolean showPreview) {\n        Intent showDetailsIntent = new Intent(this, PreviewImageActivity.class);\n        showDetailsIntent.putExtra(EXTRA_FILE, file);\n        showDetailsIntent.putExtra(EXTRA_LIVE_PHOTO_FILE, file.livePhotoVideo);\n        showDetailsIntent.putExtra(EXTRA_USER, getUser().orElseThrow(RuntimeException::new));\n        if (showPreview) {\n            startActivity(showDetailsIntent);\n        } else {\n            FileOperationsHelper fileOperationsHelper = new FileOperationsHelper(this, getUserAccountManager(), connectivityService, editorUtils);\n            fileOperationsHelper.startSyncForFileAndIntent(file, showDetailsIntent);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled startImagePreview from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: startImagePreview\n\n        Method Code: public void startImagePreview(OCFile file, boolean showPreview) {\n        Intent showDetailsIntent = new Intent(this, PreviewImageActivity.class);\n        showDetailsIntent.putExtra(EXTRA_FILE, file);\n        showDetailsIntent.putExtra(EXTRA_LIVE_PHOTO_FILE, file.livePhotoVideo);\n        showDetailsIntent.putExtra(EXTRA_USER, getUser().orElseThrow(RuntimeException::new));\n        if (showPreview) {\n            startActivity(showDetailsIntent);\n        } else {\n            FileOperationsHelper fileOperationsHelper = new FileOperationsHelper(this, getUserAccountManager(), connectivityService, editorUtils);\n            fileOperationsHelper.startSyncForFileAndIntent(file, showDetailsIntent);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc startImagePreview(file: OCFile, showPreview: Bool) {\n    let showDetailsIntent = PreviewImageActivity()\n    showDetailsIntent.extraFile = file\n    showDetailsIntent.extraLivePhotoFile = file.livePhotoVideo\n    showDetailsIntent.extraUser = try! getUser().getOrThrow()\n\n    if showPreview {\n        present(showDetailsIntent, animated: true, completion: nil)\n    } else {\n        let fileOperationsHelper = FileOperationsHelper(context: self, userAccountManager: getUserAccountManager(), connectivityService: connectivityService, editorUtils: editorUtils)\n        fileOperationsHelper.startSyncForFileAndIntent(file: file, intent: showDetailsIntent)\n    }\n}\n```"
    },
    {
        "method_name": "startImagePreview",
        "method_code": "public void startImagePreview(OCFile file, VirtualFolderType type, boolean showPreview) {\n        Intent showDetailsIntent = new Intent(this, PreviewImageActivity.class);\n        showDetailsIntent.putExtra(PreviewImageActivity.EXTRA_FILE, file);\n        showDetailsIntent.putExtra(EXTRA_LIVE_PHOTO_FILE, file.livePhotoVideo);\n        showDetailsIntent.putExtra(EXTRA_USER, getUser().orElseThrow(RuntimeException::new));\n        showDetailsIntent.putExtra(PreviewImageActivity.EXTRA_VIRTUAL_TYPE, type);\n\n        if (showPreview) {\n            startActivity(showDetailsIntent);\n        } else {\n            FileOperationsHelper fileOperationsHelper = new FileOperationsHelper(this,\n                                                                                 getUserAccountManager(),\n                                                                                 connectivityService,\n                                                                                 editorUtils);\n            fileOperationsHelper.startSyncForFileAndIntent(file, showDetailsIntent);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled startImagePreview from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: startImagePreview\n\n        Method Code: public void startImagePreview(OCFile file, VirtualFolderType type, boolean showPreview) {\n        Intent showDetailsIntent = new Intent(this, PreviewImageActivity.class);\n        showDetailsIntent.putExtra(PreviewImageActivity.EXTRA_FILE, file);\n        showDetailsIntent.putExtra(EXTRA_LIVE_PHOTO_FILE, file.livePhotoVideo);\n        showDetailsIntent.putExtra(EXTRA_USER, getUser().orElseThrow(RuntimeException::new));\n        showDetailsIntent.putExtra(PreviewImageActivity.EXTRA_VIRTUAL_TYPE, type);\n\n        if (showPreview) {\n            startActivity(showDetailsIntent);\n        } else {\n            FileOperationsHelper fileOperationsHelper = new FileOperationsHelper(this,\n                                                                                 getUserAccountManager(),\n                                                                                 connectivityService,\n                                                                                 editorUtils);\n            fileOperationsHelper.startSyncForFileAndIntent(file, showDetailsIntent);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc startImagePreview(file: OCFile, type: VirtualFolderType, showPreview: Bool) {\n    let showDetailsIntent = PreviewImageActivity()\n    showDetailsIntent.extraFile = file\n    showDetailsIntent.extraLivePhotoFile = file.livePhotoVideo\n    showDetailsIntent.extraUser = getUser() ?? { fatalError(\"User not found\") }()\n    showDetailsIntent.extraVirtualType = type\n\n    if showPreview {\n        present(showDetailsIntent, animated: true, completion: nil)\n    } else {\n        let fileOperationsHelper = FileOperationsHelper(context: self, \n                                                        userAccountManager: getUserAccountManager(), \n                                                        connectivityService: connectivityService, \n                                                        editorUtils: editorUtils)\n        fileOperationsHelper.startSyncForFileAndIntent(file: file, intent: showDetailsIntent)\n    }\n}\n```"
    },
    {
        "method_name": "startMediaPreview",
        "method_code": "public void startMediaPreview(OCFile file, long startPlaybackPosition, boolean autoplay, boolean showPreview, boolean streamMedia, boolean showInActivity) {\n        Optional<User> user = getUser();\n        if (!user.isPresent()) {\n            return; // not reachable under normal conditions\n        }\n        if (showPreview && file.isDown() && !file.isDownloading() || streamMedia) {\n            if (showInActivity) {\n                startMediaActivity(file, startPlaybackPosition, autoplay, user);\n            } else {\n                configureToolbarForPreview(file);\n                Fragment mediaFragment = PreviewMediaFragment.newInstance(file, user.get(), startPlaybackPosition, autoplay, false);\n                setLeftFragment(mediaFragment, false);\n            }\n        } else {\n            Intent previewIntent = new Intent();\n            previewIntent.putExtra(EXTRA_FILE, file);\n            previewIntent.putExtra(PreviewMediaFragment.EXTRA_START_POSITION, startPlaybackPosition);\n            previewIntent.putExtra(PreviewMediaFragment.EXTRA_AUTOPLAY, autoplay);\n            FileOperationsHelper fileOperationsHelper = new FileOperationsHelper(this, getUserAccountManager(), connectivityService, editorUtils);\n            fileOperationsHelper.startSyncForFileAndIntent(file, previewIntent);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled startMediaPreview from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: startMediaPreview\n\n        Method Code: public void startMediaPreview(OCFile file, long startPlaybackPosition, boolean autoplay, boolean showPreview, boolean streamMedia, boolean showInActivity) {\n        Optional<User> user = getUser();\n        if (!user.isPresent()) {\n            return; // not reachable under normal conditions\n        }\n        if (showPreview && file.isDown() && !file.isDownloading() || streamMedia) {\n            if (showInActivity) {\n                startMediaActivity(file, startPlaybackPosition, autoplay, user);\n            } else {\n                configureToolbarForPreview(file);\n                Fragment mediaFragment = PreviewMediaFragment.newInstance(file, user.get(), startPlaybackPosition, autoplay, false);\n                setLeftFragment(mediaFragment, false);\n            }\n        } else {\n            Intent previewIntent = new Intent();\n            previewIntent.putExtra(EXTRA_FILE, file);\n            previewIntent.putExtra(PreviewMediaFragment.EXTRA_START_POSITION, startPlaybackPosition);\n            previewIntent.putExtra(PreviewMediaFragment.EXTRA_AUTOPLAY, autoplay);\n            FileOperationsHelper fileOperationsHelper = new FileOperationsHelper(this, getUserAccountManager(), connectivityService, editorUtils);\n            fileOperationsHelper.startSyncForFileAndIntent(file, previewIntent);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc startMediaPreview(file: OCFile, startPlaybackPosition: Int64, autoplay: Bool, showPreview: Bool, streamMedia: Bool, showInActivity: Bool) {\n    guard let user = getUser() else {\n        return // not reachable under normal conditions\n    }\n    if showPreview && file.isDown() && !file.isDownloading() || streamMedia {\n        if showInActivity {\n            startMediaActivity(file: file, startPlaybackPosition: startPlaybackPosition, autoplay: autoplay, user: user)\n        } else {\n            configureToolbarForPreview(file: file)\n            let mediaFragment = PreviewMediaFragment.newInstance(file: file, user: user, startPlaybackPosition: startPlaybackPosition, autoplay: autoplay, false)\n            setLeftFragment(mediaFragment, false)\n        }\n    } else {\n        var previewIntent = Intent()\n        previewIntent.putExtra(EXTRA_FILE, file)\n        previewIntent.putExtra(PreviewMediaFragment.EXTRA_START_POSITION, startPlaybackPosition)\n        previewIntent.putExtra(PreviewMediaFragment.EXTRA_AUTOPLAY, autoplay)\n        let fileOperationsHelper = FileOperationsHelper(context: self, userAccountManager: getUserAccountManager(), connectivityService: connectivityService, editorUtils: editorUtils)\n        fileOperationsHelper.startSyncForFileAndIntent(file: file, intent: previewIntent)\n    }\n}\n```"
    },
    {
        "method_name": "startMediaActivity",
        "method_code": "private void startMediaActivity(OCFile file, long startPlaybackPosition, boolean autoplay, Optional<User> user) {\n        Intent previewMediaIntent = new Intent(this, PreviewMediaActivity.class);\n        previewMediaIntent.putExtra(PreviewMediaActivity.EXTRA_FILE, file);\n        previewMediaIntent.putExtra(PreviewMediaActivity.EXTRA_USER, user.get());\n        previewMediaIntent.putExtra(PreviewMediaActivity.EXTRA_START_POSITION, startPlaybackPosition);\n        previewMediaIntent.putExtra(PreviewMediaActivity.EXTRA_AUTOPLAY, autoplay);\n        startActivity(previewMediaIntent);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled startMediaActivity from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: startMediaActivity\n\n        Method Code: private void startMediaActivity(OCFile file, long startPlaybackPosition, boolean autoplay, Optional<User> user) {\n        Intent previewMediaIntent = new Intent(this, PreviewMediaActivity.class);\n        previewMediaIntent.putExtra(PreviewMediaActivity.EXTRA_FILE, file);\n        previewMediaIntent.putExtra(PreviewMediaActivity.EXTRA_USER, user.get());\n        previewMediaIntent.putExtra(PreviewMediaActivity.EXTRA_START_POSITION, startPlaybackPosition);\n        previewMediaIntent.putExtra(PreviewMediaActivity.EXTRA_AUTOPLAY, autoplay);\n        startActivity(previewMediaIntent);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func startMediaActivity(file: OCFile, startPlaybackPosition: Int64, autoplay: Bool, user: User?) {\n    let previewMediaIntent = Intent(context: self, activity: PreviewMediaActivity.self)\n    previewMediaIntent.putExtra(name: PreviewMediaActivity.EXTRA_FILE, value: file)\n    if let user = user {\n        previewMediaIntent.putExtra(name: PreviewMediaActivity.EXTRA_USER, value: user)\n    }\n    previewMediaIntent.putExtra(name: PreviewMediaActivity.EXTRA_START_POSITION, value: startPlaybackPosition)\n    previewMediaIntent.putExtra(name: PreviewMediaActivity.EXTRA_AUTOPLAY, value: autoplay)\n    startActivity(previewMediaIntent)\n}\n```"
    },
    {
        "method_name": "configureToolbarForPreview",
        "method_code": "public void configureToolbarForPreview(OCFile file) {\n        lockScrolling();\n        super.updateActionBarTitleAndHomeButton(file);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled configureToolbarForPreview from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: configureToolbarForPreview\n\n        Method Code: public void configureToolbarForPreview(OCFile file) {\n        lockScrolling();\n        super.updateActionBarTitleAndHomeButton(file);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc configureToolbarForPreview(file: OCFile) {\n    lockScrolling()\n    super.updateActionBarTitleAndHomeButton(file: file)\n}\n```"
    },
    {
        "method_name": "startTextPreview",
        "method_code": "public void startTextPreview(OCFile file, boolean showPreview) {\n        Optional<User> optUser = getUser();\n        if (!optUser.isPresent()) {\n            // remnants of old unsafe system; do not crash, silently stop\n            return;\n        }\n        User user = optUser.get();\n        if (showPreview) {\n            PreviewTextFileFragment fragment = PreviewTextFileFragment.create(user, file, searchOpen, searchQuery);\n            setLeftFragment(fragment, false);\n            configureToolbarForPreview(file);\n        } else {\n            Intent previewIntent = new Intent();\n            previewIntent.putExtra(EXTRA_FILE, file);\n            previewIntent.putExtra(TEXT_PREVIEW, true);\n            FileOperationsHelper fileOperationsHelper = new FileOperationsHelper(this, getUserAccountManager(), connectivityService, editorUtils);\n            fileOperationsHelper.startSyncForFileAndIntent(file, previewIntent);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled startTextPreview from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: startTextPreview\n\n        Method Code: public void startTextPreview(OCFile file, boolean showPreview) {\n        Optional<User> optUser = getUser();\n        if (!optUser.isPresent()) {\n            // remnants of old unsafe system; do not crash, silently stop\n            return;\n        }\n        User user = optUser.get();\n        if (showPreview) {\n            PreviewTextFileFragment fragment = PreviewTextFileFragment.create(user, file, searchOpen, searchQuery);\n            setLeftFragment(fragment, false);\n            configureToolbarForPreview(file);\n        } else {\n            Intent previewIntent = new Intent();\n            previewIntent.putExtra(EXTRA_FILE, file);\n            previewIntent.putExtra(TEXT_PREVIEW, true);\n            FileOperationsHelper fileOperationsHelper = new FileOperationsHelper(this, getUserAccountManager(), connectivityService, editorUtils);\n            fileOperationsHelper.startSyncForFileAndIntent(file, previewIntent);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc startTextPreview(file: OCFile, showPreview: Bool) {\n    guard let user = getUser() else {\n        // remnants of old unsafe system; do not crash, silently stop\n        return\n    }\n    if showPreview {\n        let fragment = PreviewTextFileFragment.create(user: user, file: file, searchOpen: searchOpen, searchQuery: searchQuery)\n        setLeftFragment(fragment, animated: false)\n        configureToolbarForPreview(file: file)\n    } else {\n        var previewIntent = Intent()\n        previewIntent.putExtra(EXTRA_FILE, file)\n        previewIntent.putExtra(TEXT_PREVIEW, true)\n        let fileOperationsHelper = FileOperationsHelper(context: self, userAccountManager: getUserAccountManager(), connectivityService: connectivityService, editorUtils: editorUtils)\n        fileOperationsHelper.startSyncForFileAndIntent(file: file, intent: previewIntent)\n    }\n}\n```"
    },
    {
        "method_name": "startRichWorkspacePreview",
        "method_code": "public void startRichWorkspacePreview(OCFile folder) {\n        Bundle args = new Bundle();\n        args.putParcelable(EXTRA_FILE, folder);\n        configureToolbarForPreview(folder);\n        Fragment textPreviewFragment = Fragment.instantiate(getApplicationContext(), PreviewTextStringFragment.class.getName(), args);\n        setLeftFragment(textPreviewFragment, false);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled startRichWorkspacePreview from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: startRichWorkspacePreview\n\n        Method Code: public void startRichWorkspacePreview(OCFile folder) {\n        Bundle args = new Bundle();\n        args.putParcelable(EXTRA_FILE, folder);\n        configureToolbarForPreview(folder);\n        Fragment textPreviewFragment = Fragment.instantiate(getApplicationContext(), PreviewTextStringFragment.class.getName(), args);\n        setLeftFragment(textPreviewFragment, false);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc startRichWorkspacePreview(folder: OCFile) {\n    var args = Bundle()\n    args.putParcelable(EXTRA_FILE, folder)\n    configureToolbarForPreview(folder: folder)\n    let textPreviewFragment = PreviewTextStringFragment.instantiate(context: getApplicationContext(), className: PreviewTextStringFragment.self, args: args)\n    setLeftFragment(fragment: textPreviewFragment, addToBackStack: false)\n}\n```"
    },
    {
        "method_name": "startContactListFragment",
        "method_code": "public void startContactListFragment(OCFile file) {\n        final User user = getUser().orElseThrow(RuntimeException::new);\n        ContactsPreferenceActivity.startActivityWithContactsFile(this, user, file);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled startContactListFragment from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: startContactListFragment\n\n        Method Code: public void startContactListFragment(OCFile file) {\n        final User user = getUser().orElseThrow(RuntimeException::new);\n        ContactsPreferenceActivity.startActivityWithContactsFile(this, user, file);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc startContactListFragment(file: OCFile) {\n    guard let user = getUser() else {\n        fatalError(\"User not found\")\n    }\n    ContactsPreferenceActivity.startActivityWithContactsFile(self, user, file)\n}\n```"
    },
    {
        "method_name": "startPdfPreview",
        "method_code": "public void startPdfPreview(OCFile file) {\n        if (getFileOperationsHelper().canOpenFile(file)) {\n            // prefer third party PDF apps\n            getFileOperationsHelper().openFile(file);\n        } else {\n            final Fragment pdfFragment = PreviewPdfFragment.newInstance(file);\n\n            setLeftFragment(pdfFragment, false);\n            configureToolbarForPreview(file);\n            setMainFabVisible(false);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled startPdfPreview from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: startPdfPreview\n\n        Method Code: public void startPdfPreview(OCFile file) {\n        if (getFileOperationsHelper().canOpenFile(file)) {\n            // prefer third party PDF apps\n            getFileOperationsHelper().openFile(file);\n        } else {\n            final Fragment pdfFragment = PreviewPdfFragment.newInstance(file);\n\n            setLeftFragment(pdfFragment, false);\n            configureToolbarForPreview(file);\n            setMainFabVisible(false);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc startPdfPreview(file: OCFile) {\n    if getFileOperationsHelper().canOpenFile(file) {\n        // prefer third party PDF apps\n        getFileOperationsHelper().openFile(file)\n    } else {\n        let pdfFragment = PreviewPdfFragment.newInstance(file: file)\n        \n        setLeftFragment(pdfFragment, animated: false)\n        configureToolbarForPreview(file: file)\n        setMainFabVisible(false)\n    }\n}\n```"
    },
    {
        "method_name": "startDownloadForPreview",
        "method_code": "public void startDownloadForPreview(OCFile file, OCFile parentFolder) {\n        final User currentUser = getUser().orElseThrow(RuntimeException::new);\n        Fragment detailFragment = FileDetailFragment.newInstance(file, parentFolder, currentUser);\n        setLeftFragment(detailFragment, false);\n        configureToolbarForPreview(file);\n        mWaitingToPreview = file;\n        requestForDownload();\n        setFile(file);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled startDownloadForPreview from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: startDownloadForPreview\n\n        Method Code: public void startDownloadForPreview(OCFile file, OCFile parentFolder) {\n        final User currentUser = getUser().orElseThrow(RuntimeException::new);\n        Fragment detailFragment = FileDetailFragment.newInstance(file, parentFolder, currentUser);\n        setLeftFragment(detailFragment, false);\n        configureToolbarForPreview(file);\n        mWaitingToPreview = file;\n        requestForDownload();\n        setFile(file);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc startDownloadForPreview(file: OCFile, parentFolder: OCFile) {\n    guard let currentUser = getUser() else {\n        fatalError(\"User not found\")\n    }\n    let detailFragment = FileDetailFragment.newInstance(file: file, parentFolder: parentFolder, currentUser: currentUser)\n    setLeftFragment(fragment: detailFragment, animated: false)\n    configureToolbarForPreview(file: file)\n    mWaitingToPreview = file\n    requestForDownload()\n    setFile(file: file)\n}\n```"
    },
    {
        "method_name": "startImageEditor",
        "method_code": "public void startImageEditor(OCFile file) {\n        if (file.isDown()) {\n            Intent editImageIntent = new Intent(this, EditImageActivity.class);\n            editImageIntent.putExtra(EditImageActivity.EXTRA_FILE, file);\n            startActivity(editImageIntent);\n        } else {\n            mWaitingToPreview = file;\n            requestForDownload(file, EditImageActivity.OPEN_IMAGE_EDITOR, getPackageName(), this.getClass().getSimpleName());\n            updateActionBarTitleAndHomeButton(file);\n            setFile(file);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled startImageEditor from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: startImageEditor\n\n        Method Code: public void startImageEditor(OCFile file) {\n        if (file.isDown()) {\n            Intent editImageIntent = new Intent(this, EditImageActivity.class);\n            editImageIntent.putExtra(EditImageActivity.EXTRA_FILE, file);\n            startActivity(editImageIntent);\n        } else {\n            mWaitingToPreview = file;\n            requestForDownload(file, EditImageActivity.OPEN_IMAGE_EDITOR, getPackageName(), this.getClass().getSimpleName());\n            updateActionBarTitleAndHomeButton(file);\n            setFile(file);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc startImageEditor(file: OCFile) {\n    if file.isDown() {\n        let editImageIntent = UIStoryboard(name: \"Main\", bundle: nil).instantiateViewController(withIdentifier: \"EditImageActivity\") as! EditImageActivity\n        editImageIntent.file = file\n        self.present(editImageIntent, animated: true, completion: nil)\n    } else {\n        mWaitingToPreview = file\n        requestForDownload(file: file, requestCode: EditImageActivity.OPEN_IMAGE_EDITOR, packageName: Bundle.main.bundleIdentifier!, className: String(describing: type(of: self)))\n        updateActionBarTitleAndHomeButton(file: file)\n        setFile(file: file)\n    }\n}\n```"
    },
    {
        "method_name": "cancelTransference",
        "method_code": "public void cancelTransference(OCFile file) {\n        getFileOperationsHelper().cancelTransference(file);\n        if (mWaitingToPreview != null && mWaitingToPreview.getRemotePath().equals(file.getRemotePath())) {\n            mWaitingToPreview = null;\n        }\n        if (mWaitingToSend != null && mWaitingToSend.getRemotePath().equals(file.getRemotePath())) {\n            mWaitingToSend = null;\n        }\n        onTransferStateChanged(file, false, false);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled cancelTransference from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: cancelTransference\n\n        Method Code: public void cancelTransference(OCFile file) {\n        getFileOperationsHelper().cancelTransference(file);\n        if (mWaitingToPreview != null && mWaitingToPreview.getRemotePath().equals(file.getRemotePath())) {\n            mWaitingToPreview = null;\n        }\n        if (mWaitingToSend != null && mWaitingToSend.getRemotePath().equals(file.getRemotePath())) {\n            mWaitingToSend = null;\n        }\n        onTransferStateChanged(file, false, false);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc cancelTransference(file: OCFile) {\n    getFileOperationsHelper().cancelTransference(file: file)\n    if let waitingToPreview = mWaitingToPreview, waitingToPreview.getRemotePath() == file.getRemotePath() {\n        mWaitingToPreview = nil\n    }\n    if let waitingToSend = mWaitingToSend, waitingToSend.getRemotePath() == file.getRemotePath() {\n        mWaitingToSend = nil\n    }\n    onTransferStateChanged(file: file, false, false)\n}\n```"
    },
    {
        "method_name": "cancelTransference",
        "method_code": "public void cancelTransference(Collection<OCFile> files) {\n        for (OCFile file : files) {\n            cancelTransference(file);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled cancelTransference from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: cancelTransference\n\n        Method Code: public void cancelTransference(Collection<OCFile> files) {\n        for (OCFile file : files) {\n            cancelTransference(file);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc cancelTransference(files: [OCFile]) {\n    for file in files {\n        cancelTransference(file: file)\n    }\n}\n```"
    },
    {
        "method_name": "onRefresh",
        "method_code": "@Override\n    public void onRefresh(boolean ignoreETag) {\n        syncAndUpdateFolder(ignoreETag);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onRefresh from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onRefresh\n\n        Method Code: @Override\n    public void onRefresh(boolean ignoreETag) {\n        syncAndUpdateFolder(ignoreETag);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onRefresh(ignoreETag: Bool) {\n    syncAndUpdateFolder(ignoreETag: ignoreETag)\n}\n```"
    },
    {
        "method_name": "onRefresh",
        "method_code": "@Override\n    public void onRefresh() {\n        syncAndUpdateFolder(true);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onRefresh from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onRefresh\n\n        Method Code: @Override\n    public void onRefresh() {\n        syncAndUpdateFolder(true);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onRefresh() {\n    syncAndUpdateFolder(true)\n}\n```"
    },
    {
        "method_name": "syncAndUpdateFolder",
        "method_code": "public void syncAndUpdateFolder(boolean ignoreETag) {\n        syncAndUpdateFolder(ignoreETag, false);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled syncAndUpdateFolder from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: syncAndUpdateFolder\n\n        Method Code: public void syncAndUpdateFolder(boolean ignoreETag) {\n        syncAndUpdateFolder(ignoreETag, false);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc syncAndUpdateFolder(ignoreETag: Bool) {\n    syncAndUpdateFolder(ignoreETag: ignoreETag, false)\n}\n```"
    },
    {
        "method_name": "syncAndUpdateFolder",
        "method_code": "private void syncAndUpdateFolder(boolean ignoreETag, boolean ignoreFocus) {\n        OCFileListFragment listOfFiles = getListOfFilesFragment();\n        if (listOfFiles != null && !listOfFiles.isSearchFragment()) {\n            OCFile folder = listOfFiles.getCurrentFile();\n            if (folder != null) {\n                startSyncFolderOperation(folder, ignoreETag, ignoreFocus);\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled syncAndUpdateFolder from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: syncAndUpdateFolder\n\n        Method Code: private void syncAndUpdateFolder(boolean ignoreETag, boolean ignoreFocus) {\n        OCFileListFragment listOfFiles = getListOfFilesFragment();\n        if (listOfFiles != null && !listOfFiles.isSearchFragment()) {\n            OCFile folder = listOfFiles.getCurrentFile();\n            if (folder != null) {\n                startSyncFolderOperation(folder, ignoreETag, ignoreFocus);\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func syncAndUpdateFolder(ignoreETag: Bool, ignoreFocus: Bool) {\n    if let listOfFiles = getListOfFilesFragment(), !listOfFiles.isSearchFragment() {\n        if let folder = listOfFiles.getCurrentFile() {\n            startSyncFolderOperation(folder: folder, ignoreETag: ignoreETag, ignoreFocus: ignoreFocus)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "showFiles",
        "method_code": "@Override\n    public void showFiles(boolean onDeviceOnly, boolean personalFiles) {\n        super.showFiles(onDeviceOnly, personalFiles);\n        if (onDeviceOnly) {\n            updateActionBarTitleAndHomeButtonByString(getString(R.string.drawer_item_on_device));\n        }\n        OCFileListFragment ocFileListFragment = getListOfFilesFragment();\n        if (ocFileListFragment != null && !(ocFileListFragment instanceof GalleryFragment) && !(ocFileListFragment instanceof SharedListFragment)) {\n            ocFileListFragment.refreshDirectory();\n        } else {\n            setLeftFragment(new OCFileListFragment());\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showFiles from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: showFiles\n\n        Method Code: @Override\n    public void showFiles(boolean onDeviceOnly, boolean personalFiles) {\n        super.showFiles(onDeviceOnly, personalFiles);\n        if (onDeviceOnly) {\n            updateActionBarTitleAndHomeButtonByString(getString(R.string.drawer_item_on_device));\n        }\n        OCFileListFragment ocFileListFragment = getListOfFilesFragment();\n        if (ocFileListFragment != null && !(ocFileListFragment instanceof GalleryFragment) && !(ocFileListFragment instanceof SharedListFragment)) {\n            ocFileListFragment.refreshDirectory();\n        } else {\n            setLeftFragment(new OCFileListFragment());\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func showFiles(onDeviceOnly: Bool, personalFiles: Bool) {\n    super.showFiles(onDeviceOnly: onDeviceOnly, personalFiles: personalFiles)\n    if onDeviceOnly {\n        updateActionBarTitleAndHomeButtonByString(getString(R.string.drawer_item_on_device))\n    }\n    if let ocFileListFragment = getListOfFilesFragment(), !(ocFileListFragment is GalleryFragment), !(ocFileListFragment is SharedListFragment) {\n        ocFileListFragment.refreshDirectory()\n    } else {\n        setLeftFragment(OCFileListFragment())\n    }\n}\n```"
    },
    {
        "method_name": "onMessageEvent",
        "method_code": "@Subscribe(threadMode = ThreadMode.BACKGROUND)\n    public void onMessageEvent(final SearchEvent event) {\n        if (SearchRemoteOperation.SearchType.PHOTO_SEARCH == event.getSearchType()) {\n            Log_OC.d(this, \"Switch to photo search fragment\");\n            setLeftFragment(new GalleryFragment());\n        } else if (event.getSearchType() == SearchRemoteOperation.SearchType.SHARED_FILTER) {\n            Log_OC.d(this, \"Switch to Shared fragment\");\n            setLeftFragment(new SharedListFragment());\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onMessageEvent from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onMessageEvent\n\n        Method Code: @Subscribe(threadMode = ThreadMode.BACKGROUND)\n    public void onMessageEvent(final SearchEvent event) {\n        if (SearchRemoteOperation.SearchType.PHOTO_SEARCH == event.getSearchType()) {\n            Log_OC.d(this, \"Switch to photo search fragment\");\n            setLeftFragment(new GalleryFragment());\n        } else if (event.getSearchType() == SearchRemoteOperation.SearchType.SHARED_FILTER) {\n            Log_OC.d(this, \"Switch to Shared fragment\");\n            setLeftFragment(new SharedListFragment());\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\n@objc func onMessageEvent(_ event: SearchEvent) {\n    if event.searchType == .photoSearch {\n        print(\"Switch to photo search fragment\")\n        setLeftFragment(GalleryFragment())\n    } else if event.searchType == .sharedFilter {\n        print(\"Switch to Shared fragment\")\n        setLeftFragment(SharedListFragment())\n    }\n}\n```"
    },
    {
        "method_name": "onMessageEvent",
        "method_code": "@Subscribe(threadMode = ThreadMode.MAIN)\n    public void onMessageEvent(SyncEventFinished event) {\n        Bundle bundle = event.getIntent().getExtras();\n        if (event.getIntent().getBooleanExtra(TEXT_PREVIEW, false)) {\n            startTextPreview((OCFile) bundle.get(EXTRA_FILE), true);\n        } else if (bundle.containsKey(PreviewMediaFragment.EXTRA_START_POSITION)) {\n            startMediaPreview((OCFile) bundle.get(EXTRA_FILE), (long) bundle.get(PreviewMediaFragment.EXTRA_START_POSITION), (boolean) bundle.get(PreviewMediaFragment.EXTRA_AUTOPLAY), true, true, true);\n        } else if (bundle.containsKey(PreviewImageActivity.EXTRA_VIRTUAL_TYPE)) {\n            startImagePreview((OCFile) bundle.get(EXTRA_FILE), (VirtualFolderType) bundle.get(PreviewImageActivity.EXTRA_VIRTUAL_TYPE), true);\n        } else {\n            startImagePreview((OCFile) bundle.get(EXTRA_FILE), true);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onMessageEvent from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onMessageEvent\n\n        Method Code: @Subscribe(threadMode = ThreadMode.MAIN)\n    public void onMessageEvent(SyncEventFinished event) {\n        Bundle bundle = event.getIntent().getExtras();\n        if (event.getIntent().getBooleanExtra(TEXT_PREVIEW, false)) {\n            startTextPreview((OCFile) bundle.get(EXTRA_FILE), true);\n        } else if (bundle.containsKey(PreviewMediaFragment.EXTRA_START_POSITION)) {\n            startMediaPreview((OCFile) bundle.get(EXTRA_FILE), (long) bundle.get(PreviewMediaFragment.EXTRA_START_POSITION), (boolean) bundle.get(PreviewMediaFragment.EXTRA_AUTOPLAY), true, true, true);\n        } else if (bundle.containsKey(PreviewImageActivity.EXTRA_VIRTUAL_TYPE)) {\n            startImagePreview((OCFile) bundle.get(EXTRA_FILE), (VirtualFolderType) bundle.get(PreviewImageActivity.EXTRA_VIRTUAL_TYPE), true);\n        } else {\n            startImagePreview((OCFile) bundle.get(EXTRA_FILE), true);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\n@objc func onMessageEvent(_ event: SyncEventFinished) {\n    let bundle = event.intent.extras\n    if event.intent.getBooleanExtra(TEXT_PREVIEW, defaultValue: false) {\n        startTextPreview(bundle[EXTRA_FILE] as! OCFile, true)\n    } else if bundle.contains(PreviewMediaFragment.EXTRA_START_POSITION) {\n        startMediaPreview(\n            bundle[EXTRA_FILE] as! OCFile,\n            bundle[PreviewMediaFragment.EXTRA_START_POSITION] as! Int64,\n            bundle[PreviewMediaFragment.EXTRA_AUTOPLAY] as! Bool,\n            true, true, true\n        )\n    } else if bundle.contains(PreviewImageActivity.EXTRA_VIRTUAL_TYPE) {\n        startImagePreview(\n            bundle[EXTRA_FILE] as! OCFile,\n            bundle[PreviewImageActivity.EXTRA_VIRTUAL_TYPE] as! VirtualFolderType,\n            true\n        )\n    } else {\n        startImagePreview(bundle[EXTRA_FILE] as! OCFile, true)\n    }\n}\n```"
    },
    {
        "method_name": "onMessageEvent",
        "method_code": "@Subscribe(threadMode = ThreadMode.BACKGROUND)\n    public void onMessageEvent(TokenPushEvent event) {\n        if (!preferences.isKeysReInitEnabled()) {\n            PushUtils.reinitKeys(getUserAccountManager());\n        } else {\n            PushUtils.pushRegistrationToServer(getUserAccountManager(), preferences.getPushToken());\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onMessageEvent from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onMessageEvent\n\n        Method Code: @Subscribe(threadMode = ThreadMode.BACKGROUND)\n    public void onMessageEvent(TokenPushEvent event) {\n        if (!preferences.isKeysReInitEnabled()) {\n            PushUtils.reinitKeys(getUserAccountManager());\n        } else {\n            PushUtils.pushRegistrationToServer(getUserAccountManager(), preferences.getPushToken());\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\n@objc func onMessageEvent(_ event: TokenPushEvent) {\n    if !preferences.isKeysReInitEnabled() {\n        PushUtils.reinitKeys(getUserAccountManager())\n    } else {\n        PushUtils.pushRegistrationToServer(getUserAccountManager(), preferences.getPushToken())\n    }\n}\n```"
    },
    {
        "method_name": "onStart",
        "method_code": "@Override\n    public void onStart() {\n        super.onStart();\n        final Optional<User> optionalUser = getUser();\n        final FileDataStorageManager storageManager = getStorageManager();\n        if (optionalUser.isPresent() && storageManager != null) {\n            /// Check whether the 'main' OCFile handled by the Activity is contained in the\n            // current Account\n            OCFile file = getFile();\n            // get parent from path\n            String parentPath = \"\";\n            if (file != null) {\n                if (file.isDown() && file.getLastSyncDateForProperties() == 0) {\n                    // upload in progress - right now, files are not inserted in the local\n                    // cache until the upload is successful get parent from path\n                    parentPath = file.getRemotePath().substring(0, file.getRemotePath().lastIndexOf(file.getFileName()));\n                    if (storageManager.getFileByPath(parentPath) == null) {\n                        file = null; // not able to know the directory where the file is uploading\n                    }\n                } else {\n                    file = storageManager.getFileByPath(file.getRemotePath());\n                    // currentDir = null if not in the current Account\n                }\n            }\n            if (file == null) {\n                // fall back to root folder\n                file = storageManager.getFileByPath(OCFile.ROOT_PATH);  // never returns null\n            }\n            setFile(file);\n\n            User user = optionalUser.get();\n            setupDrawer();\n\n            mSwitchAccountButton.setTag(user.getAccountName());\n            DisplayUtils.setAvatar(user, this, getResources().getDimension(R.dimen.nav_drawer_menu_avatar_radius), getResources(), mSwitchAccountButton, this);\n            final boolean userChanged = !user.nameEquals(lastDisplayedUser.orElse(null));\n            if (userChanged) {\n                Log_OC.d(TAG, \"Initializing Fragments in onAccountChanged..\");\n                initFragments();\n                if (file.isFolder() && TextUtils.isEmpty(searchQuery)) {\n                    startSyncFolderOperation(file, false);\n                }\n            } else {\n                updateActionBarTitleAndHomeButton(file.isFolder() ? null : file);\n            }\n        }\n        lastDisplayedUser = optionalUser;\n\n        EventBus.getDefault().post(new TokenPushEvent());\n        checkForNewDevVersionNecessary(getApplicationContext());\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onStart from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onStart\n\n        Method Code: @Override\n    public void onStart() {\n        super.onStart();\n        final Optional<User> optionalUser = getUser();\n        final FileDataStorageManager storageManager = getStorageManager();\n        if (optionalUser.isPresent() && storageManager != null) {\n            /// Check whether the 'main' OCFile handled by the Activity is contained in the\n            // current Account\n            OCFile file = getFile();\n            // get parent from path\n            String parentPath = \"\";\n            if (file != null) {\n                if (file.isDown() && file.getLastSyncDateForProperties() == 0) {\n                    // upload in progress - right now, files are not inserted in the local\n                    // cache until the upload is successful get parent from path\n                    parentPath = file.getRemotePath().substring(0, file.getRemotePath().lastIndexOf(file.getFileName()));\n                    if (storageManager.getFileByPath(parentPath) == null) {\n                        file = null; // not able to know the directory where the file is uploading\n                    }\n                } else {\n                    file = storageManager.getFileByPath(file.getRemotePath());\n                    // currentDir = null if not in the current Account\n                }\n            }\n            if (file == null) {\n                // fall back to root folder\n                file = storageManager.getFileByPath(OCFile.ROOT_PATH);  // never returns null\n            }\n            setFile(file);\n\n            User user = optionalUser.get();\n            setupDrawer();\n\n            mSwitchAccountButton.setTag(user.getAccountName());\n            DisplayUtils.setAvatar(user, this, getResources().getDimension(R.dimen.nav_drawer_menu_avatar_radius), getResources(), mSwitchAccountButton, this);\n            final boolean userChanged = !user.nameEquals(lastDisplayedUser.orElse(null));\n            if (userChanged) {\n                Log_OC.d(TAG, \"Initializing Fragments in onAccountChanged..\");\n                initFragments();\n                if (file.isFolder() && TextUtils.isEmpty(searchQuery)) {\n                    startSyncFolderOperation(file, false);\n                }\n            } else {\n                updateActionBarTitleAndHomeButton(file.isFolder() ? null : file);\n            }\n        }\n        lastDisplayedUser = optionalUser;\n\n        EventBus.getDefault().post(new TokenPushEvent());\n        checkForNewDevVersionNecessary(getApplicationContext());\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n    let optionalUser = getUser()\n    let storageManager = getStorageManager()\n    if let user = optionalUser, let storageManager = storageManager {\n        var file = getFile()\n        var parentPath = \"\"\n        if let file = file {\n            if file.isDown() && file.getLastSyncDateForProperties() == 0 {\n                parentPath = String(file.getRemotePath().prefix(file.getRemotePath().count - file.getFileName().count))\n                if storageManager.getFileByPath(parentPath) == nil {\n                    self.file = nil\n                }\n            } else {\n                self.file = storageManager.getFileByPath(file.getRemotePath())\n            }\n        }\n        if self.file == nil {\n            self.file = storageManager.getFileByPath(OCFile.ROOT_PATH)\n        }\n        setFile(self.file)\n\n        setupDrawer()\n\n        mSwitchAccountButton.tag = user.getAccountName()\n        DisplayUtils.setAvatar(user, self, getResources().getDimension(R.dimen.nav_drawer_menu_avatar_radius), getResources(), mSwitchAccountButton, self)\n        let userChanged = !user.nameEquals(lastDisplayedUser ?? nil)\n        if userChanged {\n            Log_OC.d(TAG, \"Initializing Fragments in onAccountChanged..\")\n            initFragments()\n            if file?.isFolder() == true && searchQuery.isEmpty {\n                startSyncFolderOperation(file!, false)\n            }\n        } else {\n            updateActionBarTitleAndHomeButton(file?.isFolder() == true ? nil : file)\n        }\n    }\n    lastDisplayedUser = optionalUser\n\n    EventBus.getDefault().post(TokenPushEvent())\n    checkForNewDevVersionNecessary(getApplicationContext())\n}\n```"
    },
    {
        "method_name": "registerRefreshFolderEventReceiver",
        "method_code": "private void registerRefreshFolderEventReceiver() {\n        IntentFilter filter = new IntentFilter(REFRESH_FOLDER_EVENT_RECEIVER);\n        LocalBroadcastManager.getInstance(this).registerReceiver(refreshFolderEventReceiver, filter);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled registerRefreshFolderEventReceiver from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: registerRefreshFolderEventReceiver\n\n        Method Code: private void registerRefreshFolderEventReceiver() {\n        IntentFilter filter = new IntentFilter(REFRESH_FOLDER_EVENT_RECEIVER);\n        LocalBroadcastManager.getInstance(this).registerReceiver(refreshFolderEventReceiver, filter);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func registerRefreshFolderEventReceiver() {\n    let filter = NotificationCenter.default.addObserver(forName: NSNotification.Name(rawValue: REFRESH_FOLDER_EVENT_RECEIVER), object: nil, queue: .main) { [weak self] notification in\n        self?.refreshFolderEventReceiver(notification)\n    }\n}\n```"
    },
    {
        "method_name": "onReceive",
        "method_code": "@Override\n        public void onReceive(Context context, Intent intent) {\n            syncAndUpdateFolder(true);\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled onReceive from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onReceive\n\n        Method Code: @Override\n        public void onReceive(Context context, Intent intent) {\n            syncAndUpdateFolder(true);\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onReceive(context: Context, intent: Intent) {\n    syncAndUpdateFolder(true)\n}\n```"
    },
    {
        "method_name": "onDestroy",
        "method_code": "@Override\n    protected void onDestroy() {\n        LocalBroadcastManager.getInstance(this).unregisterReceiver(refreshFolderEventReceiver);\n        super.onDestroy();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onDestroy from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onDestroy\n\n        Method Code: @Override\n    protected void onDestroy() {\n        LocalBroadcastManager.getInstance(this).unregisterReceiver(refreshFolderEventReceiver);\n        super.onDestroy();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n    NotificationCenter.default.removeObserver(self, name: .refreshFolderEvent, object: nil)\n}\n```"
    },
    {
        "method_name": "onRestart",
        "method_code": "@Override\n    protected void onRestart() {\n        super.onRestart();\n        checkForNewDevVersionNecessary(getApplicationContext());\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onRestart from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onRestart\n\n        Method Code: @Override\n    protected void onRestart() {\n        super.onRestart();\n        checkForNewDevVersionNecessary(getApplicationContext());\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n    checkForNewDevVersionNecessary(context: UIApplication.shared.delegate!.window!!.rootViewController!)\n}\n```"
    },
    {
        "method_name": "setSearchQuery",
        "method_code": "public void setSearchQuery(String query) {\n        searchQuery = query;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setSearchQuery from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: setSearchQuery\n\n        Method Code: public void setSearchQuery(String query) {\n        searchQuery = query;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setSearchQuery(query: String) {\n    searchQuery = query\n}\n```"
    },
    {
        "method_name": "handleOpenFileViaIntent",
        "method_code": "private void handleOpenFileViaIntent(Intent intent) {\n        DisplayUtils.showSnackMessage(this, getString(R.string.retrieving_file));\n\n        String userName = intent.getStringExtra(KEY_ACCOUNT);\n        String fileId = intent.getStringExtra(KEY_FILE_ID);\n        String filePath = intent.getStringExtra(KEY_FILE_PATH);\n\n        if (userName == null && fileId == null && intent.getData() != null) {\n            openDeepLink(intent.getData());\n        } else {\n            Optional<User> optionalUser = userName == null ? getUser() : getUserAccountManager().getUser(userName);\n            if (optionalUser.isPresent()) {\n                if (!TextUtils.isEmpty(fileId)) {\n                    openFile(optionalUser.get(), fileId);\n                } else if (!TextUtils.isEmpty(filePath)) {\n                    openFileByPath(optionalUser.get(), filePath);\n                } else {\n                    accountClicked(optionalUser.get().hashCode());\n                }\n            } else {\n                DisplayUtils.showSnackMessage(this, getString(R.string.associated_account_not_found));\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled handleOpenFileViaIntent from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: handleOpenFileViaIntent\n\n        Method Code: private void handleOpenFileViaIntent(Intent intent) {\n        DisplayUtils.showSnackMessage(this, getString(R.string.retrieving_file));\n\n        String userName = intent.getStringExtra(KEY_ACCOUNT);\n        String fileId = intent.getStringExtra(KEY_FILE_ID);\n        String filePath = intent.getStringExtra(KEY_FILE_PATH);\n\n        if (userName == null && fileId == null && intent.getData() != null) {\n            openDeepLink(intent.getData());\n        } else {\n            Optional<User> optionalUser = userName == null ? getUser() : getUserAccountManager().getUser(userName);\n            if (optionalUser.isPresent()) {\n                if (!TextUtils.isEmpty(fileId)) {\n                    openFile(optionalUser.get(), fileId);\n                } else if (!TextUtils.isEmpty(filePath)) {\n                    openFileByPath(optionalUser.get(), filePath);\n                } else {\n                    accountClicked(optionalUser.get().hashCode());\n                }\n            } else {\n                DisplayUtils.showSnackMessage(this, getString(R.string.associated_account_not_found));\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func handleOpenFileViaIntent(intent: Intent) {\n    DisplayUtils.showSnackMessage(self, getString(R.string.retrieving_file))\n\n    let userName = intent.getStringExtra(KEY_ACCOUNT)\n    let fileId = intent.getStringExtra(KEY_FILE_ID)\n    let filePath = intent.getStringExtra(KEY_FILE_PATH)\n\n    if userName == nil && fileId == nil && intent.data != nil {\n        openDeepLink(intent.data!)\n    } else {\n        let optionalUser = userName == nil ? getUser() : getUserAccountManager().getUser(userName!)\n        if let user = optionalUser {\n            if !TextUtils.isEmpty(fileId) {\n                openFile(user, fileId!)\n            } else if !TextUtils.isEmpty(filePath) {\n                openFileByPath(user, filePath!)\n            } else {\n                accountClicked(user.hash)\n            }\n        } else {\n            DisplayUtils.showSnackMessage(self, getString(R.string.associated_account_not_found))\n        }\n    }\n}\n```"
    },
    {
        "method_name": "openDeepLink",
        "method_code": "private void openDeepLink(Uri uri) {\n        DeepLinkHandler linkHandler = new DeepLinkHandler(getUserAccountManager());\n        DeepLinkHandler.Match match = linkHandler.parseDeepLink(uri);\n\n        if (match == null) {\n            handleDeepLink(uri);\n        } else if (match.getUsers().isEmpty()) {\n            DisplayUtils.showSnackMessage(this, getString(R.string.associated_account_not_found));\n        } else if (match.getUsers().size() == SINGLE_USER_SIZE) {\n            openFile(match.getUsers().get(0), match.getFileId());\n        } else {\n            selectUserAndOpenFile(match.getUsers(), match.getFileId());\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled openDeepLink from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: openDeepLink\n\n        Method Code: private void openDeepLink(Uri uri) {\n        DeepLinkHandler linkHandler = new DeepLinkHandler(getUserAccountManager());\n        DeepLinkHandler.Match match = linkHandler.parseDeepLink(uri);\n\n        if (match == null) {\n            handleDeepLink(uri);\n        } else if (match.getUsers().isEmpty()) {\n            DisplayUtils.showSnackMessage(this, getString(R.string.associated_account_not_found));\n        } else if (match.getUsers().size() == SINGLE_USER_SIZE) {\n            openFile(match.getUsers().get(0), match.getFileId());\n        } else {\n            selectUserAndOpenFile(match.getUsers(), match.getFileId());\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func openDeepLink(uri: URL) {\n    let linkHandler = DeepLinkHandler(userAccountManager: getUserAccountManager())\n    let match = linkHandler.parseDeepLink(uri: uri)\n\n    if match == nil {\n        handleDeepLink(uri: uri)\n    } else if match!.users.isEmpty {\n        DisplayUtils.showSnackMessage(self, message: NSLocalizedString(\"associated_account_not_found\", comment: \"\"))\n    } else if match!.users.count == SINGLE_USER_SIZE {\n        openFile(user: match!.users[0], fileId: match!.fileId)\n    } else {\n        selectUserAndOpenFile(users: match!.users, fileId: match!.fileId)\n    }\n}\n```"
    },
    {
        "method_name": "selectUserAndOpenFile",
        "method_code": "private void selectUserAndOpenFile(List<User> users, String fileId) {\n        final CharSequence[] userNames = new CharSequence[users.size()];\n        for (int i = 0; i < userNames.length; i++) {\n            userNames[i] = users.get(i).getAccountName();\n        }\n        final MaterialAlertDialogBuilder builder = new MaterialAlertDialogBuilder(this);\n        builder.setTitle(R.string.common_choose_account).setItems(userNames, (dialog, which) -> {\n            User user = users.get(which);\n            openFile(user, fileId);\n            showLoadingDialog(getString(R.string.retrieving_file));\n        });\n\n        viewThemeUtils.dialog.colorMaterialAlertDialogBackground(getApplicationContext(), builder);\n\n        final AlertDialog dialog = builder.create();\n        dismissLoadingDialog();\n        dialog.show();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled selectUserAndOpenFile from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: selectUserAndOpenFile\n\n        Method Code: private void selectUserAndOpenFile(List<User> users, String fileId) {\n        final CharSequence[] userNames = new CharSequence[users.size()];\n        for (int i = 0; i < userNames.length; i++) {\n            userNames[i] = users.get(i).getAccountName();\n        }\n        final MaterialAlertDialogBuilder builder = new MaterialAlertDialogBuilder(this);\n        builder.setTitle(R.string.common_choose_account).setItems(userNames, (dialog, which) -> {\n            User user = users.get(which);\n            openFile(user, fileId);\n            showLoadingDialog(getString(R.string.retrieving_file));\n        });\n\n        viewThemeUtils.dialog.colorMaterialAlertDialogBackground(getApplicationContext(), builder);\n\n        final AlertDialog dialog = builder.create();\n        dismissLoadingDialog();\n        dialog.show();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func selectUserAndOpenFile(users: [User], fileId: String) {\n    let userNames = users.map { $0.getAccountName() }\n    let builder = MaterialAlertDialogBuilder(context: self)\n    builder.setTitle(R.string.common_choose_account)\n        .setItems(userNames) { dialog, which in\n            let user = users[which]\n            openFile(user: user, fileId: fileId)\n            showLoadingDialog(message: getString(R.string.retrieving_file))\n        }\n\n    viewThemeUtils.dialog.colorMaterialAlertDialogBackground(context: getApplicationContext(), builder: builder)\n\n    let dialog = builder.create()\n    dismissLoadingDialog()\n    dialog.show()\n}\n```"
    },
    {
        "method_name": "openFile",
        "method_code": "private void openFile(User user, String fileId) {\n        setUser(user);\n\n        if (fileId == null) {\n            onFileRequestError(null);\n            return;\n        }\n\n        FileDataStorageManager storageManager = getStorageManager();\n\n        if (storageManager == null) {\n            storageManager = new FileDataStorageManager(user, getContentResolver());\n        }\n\n        FetchRemoteFileTask fetchRemoteFileTask = new FetchRemoteFileTask(user, fileId, storageManager, this);\n        fetchRemoteFileTask.execute();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled openFile from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: openFile\n\n        Method Code: private void openFile(User user, String fileId) {\n        setUser(user);\n\n        if (fileId == null) {\n            onFileRequestError(null);\n            return;\n        }\n\n        FileDataStorageManager storageManager = getStorageManager();\n\n        if (storageManager == null) {\n            storageManager = new FileDataStorageManager(user, getContentResolver());\n        }\n\n        FetchRemoteFileTask fetchRemoteFileTask = new FetchRemoteFileTask(user, fileId, storageManager, this);\n        fetchRemoteFileTask.execute();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func openFile(user: User, fileId: String?) {\n    setUser(user)\n\n    guard let fileId = fileId else {\n        onFileRequestError(nil)\n        return\n    }\n\n    var storageManager = getStorageManager()\n\n    if storageManager == nil {\n        storageManager = FileDataStorageManager(user: user, contentResolver: getContentResolver())\n    }\n\n    let fetchRemoteFileTask = FetchRemoteFileTask(user: user, fileId: fileId, storageManager: storageManager!, delegate: self)\n    fetchRemoteFileTask.execute()\n}\n```"
    },
    {
        "method_name": "openFileByPath",
        "method_code": "private void openFileByPath(User user, String filepath) {\n        setUser(user);\n\n        if (filepath == null) {\n            onFileRequestError(null);\n            return;\n        }\n\n        FileDataStorageManager storageManager = getStorageManager();\n\n        if (storageManager == null) {\n            storageManager = new FileDataStorageManager(user, getContentResolver());\n        }\n\n        OwnCloudClient client;\n        try {\n            client = clientFactory.create(user);\n        } catch (ClientFactory.CreationException e) {\n            onFileRequestError(null);\n            return;\n        }\n\n        GetRemoteFileTask getRemoteFileTask = new GetRemoteFileTask(this, filepath, client, storageManager, user);\n        asyncRunner.postQuickTask(getRemoteFileTask, this::onFileRequestResult, this::onFileRequestError);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled openFileByPath from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: openFileByPath\n\n        Method Code: private void openFileByPath(User user, String filepath) {\n        setUser(user);\n\n        if (filepath == null) {\n            onFileRequestError(null);\n            return;\n        }\n\n        FileDataStorageManager storageManager = getStorageManager();\n\n        if (storageManager == null) {\n            storageManager = new FileDataStorageManager(user, getContentResolver());\n        }\n\n        OwnCloudClient client;\n        try {\n            client = clientFactory.create(user);\n        } catch (ClientFactory.CreationException e) {\n            onFileRequestError(null);\n            return;\n        }\n\n        GetRemoteFileTask getRemoteFileTask = new GetRemoteFileTask(this, filepath, client, storageManager, user);\n        asyncRunner.postQuickTask(getRemoteFileTask, this::onFileRequestResult, this::onFileRequestError);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func openFileByPath(user: User, filepath: String?) {\n    setUser(user)\n\n    guard let filepath = filepath else {\n        onFileRequestError(nil)\n        return\n    }\n\n    var storageManager = getStorageManager()\n\n    if storageManager == nil {\n        storageManager = FileDataStorageManager(user: user, contentResolver: getContentResolver())\n    }\n\n    let client: OwnCloudClient\n    do {\n        client = try clientFactory.create(user: user)\n    } catch {\n        onFileRequestError(nil)\n        return\n    }\n\n    let getRemoteFileTask = GetRemoteFileTask(context: self, filepath: filepath, client: client, storageManager: storageManager!, user: user)\n    asyncRunner.postQuickTask(getRemoteFileTask, onSuccess: self.onFileRequestResult, onError: self.onFileRequestError)\n}\n```"
    },
    {
        "method_name": "onFileRequestError",
        "method_code": "private Unit onFileRequestError(Throwable throwable) {\n        dismissLoadingDialog();\n        DisplayUtils.showSnackMessage(this, getString(R.string.error_retrieving_file));\n        Log_OC.e(TAG, \"Requesting file from remote failed!\", throwable);\n        return null;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onFileRequestError from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onFileRequestError\n\n        Method Code: private Unit onFileRequestError(Throwable throwable) {\n        dismissLoadingDialog();\n        DisplayUtils.showSnackMessage(this, getString(R.string.error_retrieving_file));\n        Log_OC.e(TAG, \"Requesting file from remote failed!\", throwable);\n        return null;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func onFileRequestError(_ throwable: Error) {\n    dismissLoadingDialog()\n    DisplayUtils.showSnackMessage(self, getString(R.string.error_retrieving_file))\n    Log_OC.e(TAG, \"Requesting file from remote failed!\", throwable)\n}\n```"
    },
    {
        "method_name": "onFileRequestResult",
        "method_code": "private Unit onFileRequestResult(GetRemoteFileTask.Result result) {\n        dismissLoadingDialog();\n\n        setFile(result.getFile());\n\n        OCFileListFragment fileFragment = new OCFileListFragment();\n        setLeftFragment(fileFragment);\n\n        getSupportFragmentManager().executePendingTransactions();\n\n        fileFragment.onItemClicked(result.getFile());\n\n        return null;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onFileRequestResult from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: onFileRequestResult\n\n        Method Code: private Unit onFileRequestResult(GetRemoteFileTask.Result result) {\n        dismissLoadingDialog();\n\n        setFile(result.getFile());\n\n        OCFileListFragment fileFragment = new OCFileListFragment();\n        setLeftFragment(fileFragment);\n\n        getSupportFragmentManager().executePendingTransactions();\n\n        fileFragment.onItemClicked(result.getFile());\n\n        return null;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func onFileRequestResult(result: GetRemoteFileTask.Result) {\n    dismissLoadingDialog()\n\n    setFile(result.getFile())\n\n    let fileFragment = OCFileListFragment()\n    setLeftFragment(fileFragment)\n\n    getSupportFragmentManager().executePendingTransactions()\n\n    fileFragment.onItemClicked(result.getFile())\n}\n```"
    },
    {
        "method_name": "performUnifiedSearch",
        "method_code": "public void performUnifiedSearch(String query, ArrayList<String> listOfHiddenFiles) {\n        UnifiedSearchFragment unifiedSearchFragment = UnifiedSearchFragment.Companion.newInstance(query, listOfHiddenFiles);\n        setLeftFragment(unifiedSearchFragment, false);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled performUnifiedSearch from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: performUnifiedSearch\n\n        Method Code: public void performUnifiedSearch(String query, ArrayList<String> listOfHiddenFiles) {\n        UnifiedSearchFragment unifiedSearchFragment = UnifiedSearchFragment.Companion.newInstance(query, listOfHiddenFiles);\n        setLeftFragment(unifiedSearchFragment, false);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc performUnifiedSearch(query: String, listOfHiddenFiles: [String]) {\n    let unifiedSearchFragment = UnifiedSearchFragment.newInstance(query: query, listOfHiddenFiles: listOfHiddenFiles)\n    setLeftFragment(unifiedSearchFragment, false)\n}\n```"
    },
    {
        "method_name": "setMainFabVisible",
        "method_code": "public void setMainFabVisible(final boolean visible) {\n        final int visibility = visible ? View.VISIBLE : View.GONE;\n        binding.fabMain.setVisibility(visibility);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setMainFabVisible from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: setMainFabVisible\n\n        Method Code: public void setMainFabVisible(final boolean visible) {\n        final int visibility = visible ? View.VISIBLE : View.GONE;\n        binding.fabMain.setVisibility(visibility);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setMainFabVisible(_ visible: Bool) {\n    let visibility = visible ? UIView.Visibility.visible : UIView.Visibility.gone\n    binding.fabMain.visibility = visibility\n}\n```"
    },
    {
        "method_name": "showFile",
        "method_code": "public void showFile(OCFile selectedFile, String message) {\n        dismissLoadingDialog();\n\n        OCFileListFragment listOfFiles = getOCFileListFragmentFromFile();\n\n        if (TextUtils.isEmpty(message)) {\n            OCFile temp = getFile();\n            setFile(getCurrentDir());\n            listOfFiles.listDirectory(getCurrentDir(), temp, MainApp.isOnlyOnDevice(), false);\n            updateActionBarTitleAndHomeButton(null);\n        } else {\n            DisplayUtils.showSnackMessage(listOfFiles.getView(), message);\n        }\n\n        if (selectedFile != null) {\n            listOfFiles.onItemClicked(selectedFile);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showFile from FileDisplayActivity.java into Swift.\n\n        Input:\n\n        Method Name: showFile\n\n        Method Code: public void showFile(OCFile selectedFile, String message) {\n        dismissLoadingDialog();\n\n        OCFileListFragment listOfFiles = getOCFileListFragmentFromFile();\n\n        if (TextUtils.isEmpty(message)) {\n            OCFile temp = getFile();\n            setFile(getCurrentDir());\n            listOfFiles.listDirectory(getCurrentDir(), temp, MainApp.isOnlyOnDevice(), false);\n            updateActionBarTitleAndHomeButton(null);\n        } else {\n            DisplayUtils.showSnackMessage(listOfFiles.getView(), message);\n        }\n\n        if (selectedFile != null) {\n            listOfFiles.onItemClicked(selectedFile);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc showFile(selectedFile: OCFile?, message: String?) {\n    dismissLoadingDialog()\n\n    let listOfFiles = getOCFileListFragmentFromFile()\n\n    if message?.isEmpty ?? true {\n        let temp = getFile()\n        setFile(getCurrentDir())\n        listOfFiles.listDirectory(getCurrentDir(), temp: temp, onlyOnDevice: MainApp.isOnlyOnDevice(), false)\n        updateActionBarTitleAndHomeButton(nil)\n    } else {\n        DisplayUtils.showSnackMessage(view: listOfFiles.view, message: message!)\n    }\n\n    if let file = selectedFile {\n        listOfFiles.onItemClicked(file)\n    }\n}\n```"
    }
]