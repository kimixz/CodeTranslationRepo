[
    {
        "method_name": "createAvatar",
        "method_code": "NonNull\n    public static TextDrawable createAvatar(User user, float radiusInDp) {\n        String username = UserAccountManager.getDisplayName(user);\n        return createNamedAvatar(username, radiusInDp);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled createAvatar from TextDrawable.java into Swift.\n\n        Input:\n\n        Method Name: createAvatar\n\n        Method Code: NonNull\n    public static TextDrawable createAvatar(User user, float radiusInDp) {\n        String username = UserAccountManager.getDisplayName(user);\n        return createNamedAvatar(username, radiusInDp);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func createAvatar(user: User, radiusInDp: Float) -> TextDrawable {\n    let username = UserAccountManager.getDisplayName(user: user)\n    return createNamedAvatar(username: username, radiusInDp: radiusInDp)\n}\n```"
    },
    {
        "method_name": "createAvatarByUserId",
        "method_code": "NonNull\n    public static TextDrawable createAvatarByUserId(String userId, float radiusInDp) {\n        return createNamedAvatar(userId, radiusInDp);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled createAvatarByUserId from TextDrawable.java into Swift.\n\n        Input:\n\n        Method Name: createAvatarByUserId\n\n        Method Code: NonNull\n    public static TextDrawable createAvatarByUserId(String userId, float radiusInDp) {\n        return createNamedAvatar(userId, radiusInDp);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\npublic static func createAvatarByUserId(userId: String, radiusInDp: Float) -> TextDrawable {\n    return createNamedAvatar(userId: userId, radiusInDp: radiusInDp)\n}\n```"
    },
    {
        "method_name": "createNamedAvatar",
        "method_code": "NonNull\n    public static TextDrawable createNamedAvatar(String name, float radiusInDp) {\n        BitmapUtils.Color color = BitmapUtils.usernameToColor(name);\n        return new TextDrawable(extractCharsFromDisplayName(name), color, radiusInDp);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled createNamedAvatar from TextDrawable.java into Swift.\n\n        Input:\n\n        Method Name: createNamedAvatar\n\n        Method Code: NonNull\n    public static TextDrawable createNamedAvatar(String name, float radiusInDp) {\n        BitmapUtils.Color color = BitmapUtils.usernameToColor(name);\n        return new TextDrawable(extractCharsFromDisplayName(name), color, radiusInDp);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\npublic static func createNamedAvatar(name: String, radiusInDp: Float) -> TextDrawable {\n    let color = BitmapUtils.usernameToColor(name: name)\n    return TextDrawable(extractCharsFromDisplayName(name: name), color, radiusInDp)\n}\n```"
    },
    {
        "method_name": "extractCharsFromDisplayName",
        "method_code": "VisibleForTesting\n    public static String extractCharsFromDisplayName(@NonNull final String displayName) {\n        final String trimmed = displayName.trim();\n        if (trimmed.isEmpty()) {\n            return \"\";\n        }\n        String[] nameParts = trimmed.split(\"\\\\s+\");\n\n        StringBuilder firstTwoLetters = new StringBuilder();\n        for (int i = 0; i < Math.min(2, nameParts.length); i++) {\n            firstTwoLetters.append(nameParts[i].substring(0, 1).toUpperCase(Locale.getDefault()));\n        }\n\n        return firstTwoLetters.toString();\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled extractCharsFromDisplayName from TextDrawable.java into Swift.\n\n        Input:\n\n        Method Name: extractCharsFromDisplayName\n\n        Method Code: VisibleForTesting\n    public static String extractCharsFromDisplayName(@NonNull final String displayName) {\n        final String trimmed = displayName.trim();\n        if (trimmed.isEmpty()) {\n            return \"\";\n        }\n        String[] nameParts = trimmed.split(\"\\\\s+\");\n\n        StringBuilder firstTwoLetters = new StringBuilder();\n        for (int i = 0; i < Math.min(2, nameParts.length); i++) {\n            firstTwoLetters.append(nameParts[i].substring(0, 1).toUpperCase(Locale.getDefault()));\n        }\n\n        return firstTwoLetters.toString();\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport Foundation\n\nfunc extractCharsFromDisplayName(_ displayName: String) -> String {\n    let trimmed = displayName.trimmingCharacters(in: .whitespaces)\n    if trimmed.isEmpty {\n        return \"\"\n    }\n    let nameParts = trimmed.split(separator: \" \")\n\n    var firstTwoLetters = \"\"\n    for i in 0..<min(2, nameParts.count) {\n        if let firstChar = nameParts[i].first {\n            firstTwoLetters.append(firstChar.uppercased())\n        }\n    }\n\n    return firstTwoLetters\n}\n```"
    },
    {
        "method_name": "draw",
        "method_code": "Override\n    public void draw(@NonNull Canvas canvas) {\n        canvas.drawCircle(radius, radius, radius, background);\n\n        if (bigText) {\n            textPaint.setTextSize(1.8f * radius);\n        }\n\n        canvas.drawText(text, radius, radius - ((textPaint.descent() + textPaint.ascent()) / 2), textPaint);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled draw from TextDrawable.java into Swift.\n\n        Input:\n\n        Method Name: draw\n\n        Method Code: Override\n    public void draw(@NonNull Canvas canvas) {\n        canvas.drawCircle(radius, radius, radius, background);\n\n        if (bigText) {\n            textPaint.setTextSize(1.8f * radius);\n        }\n\n        canvas.drawText(text, radius, radius - ((textPaint.descent() + textPaint.ascent()) / 2), textPaint);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func draw(_ rect: CGRect) {\n    guard let context = UIGraphicsGetCurrentContext() else { return }\n    \n    let radius = rect.width / 2\n    context.setFillColor(background.cgColor)\n    context.fillEllipse(in: CGRect(x: 0, y: 0, width: rect.width, height: rect.height))\n    \n    if bigText {\n        textPaint.font = UIFont.systemFont(ofSize: 1.8 * radius)\n    }\n    \n    let textSize = text.size(withAttributes: [NSAttributedString.Key.font: textPaint])\n    let textRect = CGRect(x: radius - textSize.width / 2, y: radius - textSize.height / 2, width: textSize.width, height: textSize.height)\n    text.draw(in: textRect, withAttributes: [NSAttributedString.Key.font: textPaint, NSAttributedString.Key.foregroundColor: textPaintColor])\n}\n```"
    },
    {
        "method_name": "setAlpha",
        "method_code": "Override\n    public void setAlpha(int alpha) {\n        textPaint.setAlpha(alpha);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setAlpha from TextDrawable.java into Swift.\n\n        Input:\n\n        Method Name: setAlpha\n\n        Method Code: Override\n    public void setAlpha(int alpha) {\n        textPaint.setAlpha(alpha);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func setAlpha(_ alpha: Int) {\n    textPaint.alpha = alpha\n}\n```"
    },
    {
        "method_name": "setColorFilter",
        "method_code": "Override\n    public void setColorFilter(ColorFilter cf) {\n        textPaint.setColorFilter(cf);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setColorFilter from TextDrawable.java into Swift.\n\n        Input:\n\n        Method Name: setColorFilter\n\n        Method Code: Override\n    public void setColorFilter(ColorFilter cf) {\n        textPaint.setColorFilter(cf);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func setColorFilter(_ cf: ColorFilter?) {\n    textPaint.colorFilter = cf\n}\n```"
    },
    {
        "method_name": "getOpacity",
        "method_code": "Override\n    public int getOpacity() {\n        return PixelFormat.TRANSLUCENT;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getOpacity from TextDrawable.java into Swift.\n\n        Input:\n\n        Method Name: getOpacity\n\n        Method Code: Override\n    public int getOpacity() {\n        return PixelFormat.TRANSLUCENT;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func getOpacity() -> Int {\n    return PixelFormat.translucent\n}\n```"
    }
]