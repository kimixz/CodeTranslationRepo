[
    {
        "method_name": "getUrlFromFile",
        "method_code": "Nullable\n    private String getUrlFromFile(String storagePath, Pattern pattern) {\n        String url = null;\n\n        try (FileInputStream inputStream = new FileInputStream(storagePath);\n             InputStreamReader fr = new InputStreamReader(inputStream, StandardCharsets.UTF_8);\n             BufferedReader br = new BufferedReader(fr)) {\n            String line;\n            while ((line = br.readLine()) != null) {\n                Matcher m = pattern.matcher(line);\n                if (m.find()) {\n                    url = m.group(1);\n                    break;\n                }\n            }\n        } catch (IOException e) {\n            Log_OC.d(TAG, e.getMessage());\n        }\n\n        return url;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getUrlFromFile from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: getUrlFromFile\n\n        Method Code: Nullable\n    private String getUrlFromFile(String storagePath, Pattern pattern) {\n        String url = null;\n\n        try (FileInputStream inputStream = new FileInputStream(storagePath);\n             InputStreamReader fr = new InputStreamReader(inputStream, StandardCharsets.UTF_8);\n             BufferedReader br = new BufferedReader(fr)) {\n            String line;\n            while ((line = br.readLine()) != null) {\n                Matcher m = pattern.matcher(line);\n                if (m.find()) {\n                    url = m.group(1);\n                    break;\n                }\n            }\n        } catch (IOException e) {\n            Log_OC.d(TAG, e.getMessage());\n        }\n\n        return url;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getUrlFromFile(storagePath: String, pattern: NSRegularExpression) -> String? {\n    var url: String? = nil\n\n    do {\n        let fileContent = try String(contentsOfFile: storagePath, encoding: .utf8)\n        let lines = fileContent.components(separatedBy: .newlines)\n        for line in lines {\n            let range = NSRange(location: 0, length: line.utf16.count)\n            if let match = pattern.firstMatch(in: line, options: [], range: range) {\n                if let range = Range(match.range(at: 1), in: line) {\n                    url = String(line[range])\n                    break\n                }\n            }\n        }\n    } catch {\n        print(\"Error: \\(error.localizedDescription)\")\n    }\n\n    return url\n}\n```"
    },
    {
        "method_name": "createIntentFromFile",
        "method_code": "Nullable\n    private Intent createIntentFromFile(String storagePath) {\n        String url = null;\n        int lastIndexOfDot = storagePath.lastIndexOf('.');\n        if (lastIndexOfDot >= 0) {\n            String fileExt = storagePath.substring(lastIndexOfDot + 1);\n            if (FILE_EXTENSION_URL.equalsIgnoreCase(fileExt) || FILE_EXTENSION_DESKTOP.equalsIgnoreCase(fileExt)) {\n                // Windows internet shortcut file .url\n                // Ubuntu internet shortcut file .desktop\n                url = getUrlFromFile(storagePath, mPatternUrl);\n            } else if (FILE_EXTENSION_WEBLOC.equalsIgnoreCase(fileExt)) {\n                // mac internet shortcut file .webloc\n                url = getUrlFromFile(storagePath, mPatternString);\n            }\n        }\n        if (url == null) {\n            return null;\n        }\n        return new Intent(Intent.ACTION_VIEW, Uri.parse(url));\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled createIntentFromFile from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: createIntentFromFile\n\n        Method Code: Nullable\n    private Intent createIntentFromFile(String storagePath) {\n        String url = null;\n        int lastIndexOfDot = storagePath.lastIndexOf('.');\n        if (lastIndexOfDot >= 0) {\n            String fileExt = storagePath.substring(lastIndexOfDot + 1);\n            if (FILE_EXTENSION_URL.equalsIgnoreCase(fileExt) || FILE_EXTENSION_DESKTOP.equalsIgnoreCase(fileExt)) {\n                // Windows internet shortcut file .url\n                // Ubuntu internet shortcut file .desktop\n                url = getUrlFromFile(storagePath, mPatternUrl);\n            } else if (FILE_EXTENSION_WEBLOC.equalsIgnoreCase(fileExt)) {\n                // mac internet shortcut file .webloc\n                url = getUrlFromFile(storagePath, mPatternString);\n            }\n        }\n        if (url == null) {\n            return null;\n        }\n        return new Intent(Intent.ACTION_VIEW, Uri.parse(url));\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport Foundation\n\nfunc createIntentFromFile(storagePath: String) -> URL? {\n    var url: String? = nil\n    if let lastIndexOfDot = storagePath.lastIndex(of: \".\") {\n        let fileExt = String(storagePath[storagePath.index(after: lastIndexOfDot)...])\n        if fileExt.caseInsensitiveCompare(FILE_EXTENSION_URL) == .orderedSame || fileExt.caseInsensitiveCompare(FILE_EXTENSION_DESKTOP) == .orderedSame {\n            // Windows internet shortcut file .url\n            // Ubuntu internet shortcut file .desktop\n            url = getUrlFromFile(storagePath: storagePath, pattern: mPatternUrl)\n        } else if fileExt.caseInsensitiveCompare(FILE_EXTENSION_WEBLOC) == .orderedSame {\n            // mac internet shortcut file .webloc\n            url = getUrlFromFile(storagePath: storagePath, pattern: mPatternString)\n        }\n    }\n    if url == nil {\n        return nil\n    }\n    return URL(string: url!)\n}\n```"
    },
    {
        "method_name": "startSyncForFileAndIntent",
        "method_code": "ublic void startSyncForFileAndIntent(OCFile file, Intent intent) {\n        new Thread(() -> {\n            User user = fileActivity.getUser().orElseThrow(RuntimeException::new);\n            FileDataStorageManager storageManager = new FileDataStorageManager(user,\n                                                                               fileActivity.getContentResolver());\n\n            // check if file is in conflict (this is known due to latest folder refresh)\n            if (file.isInConflict()) {\n                syncFile(file, user, storageManager);\n                EventBus.getDefault().post(new SyncEventFinished(intent));\n\n                return;\n            }\n\n            // check if latest sync is >30s ago\n            OCFile parent = storageManager.getFileById(file.getParentId());\n            if (parent != null && parent.getLastSyncDateForData() + 30 * 1000 > System.currentTimeMillis()) {\n                EventBus.getDefault().post(new SyncEventFinished(intent));\n\n                return;\n            }\n\n            // if offline or walled garden, show old version with warning\n            if (!connectivityService.getConnectivity().isConnected() || connectivityService.isInternetWalled()) {\n                DisplayUtils.showSnackMessage(fileActivity, R.string.file_not_synced);\n                EventBus.getDefault().post(new SyncEventFinished(intent));\n\n                return;\n            }\n\n            // check for changed eTag\n            CheckEtagRemoteOperation checkEtagOperation = new CheckEtagRemoteOperation(file.getRemotePath(),\n                                                                                       file.getEtag());\n            RemoteOperationResult result = checkEtagOperation.execute(user, fileActivity);\n\n            // eTag changed, sync file\n            if (result.getCode() == RemoteOperationResult.ResultCode.ETAG_CHANGED) {\n                syncFile(file, user, storageManager);\n            }\n\n            EventBus.getDefault().post(new SyncEventFinished(intent));\n        }).start();\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled startSyncForFileAndIntent from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: startSyncForFileAndIntent\n\n        Method Code: ublic void startSyncForFileAndIntent(OCFile file, Intent intent) {\n        new Thread(() -> {\n            User user = fileActivity.getUser().orElseThrow(RuntimeException::new);\n            FileDataStorageManager storageManager = new FileDataStorageManager(user,\n                                                                               fileActivity.getContentResolver());\n\n            // check if file is in conflict (this is known due to latest folder refresh)\n            if (file.isInConflict()) {\n                syncFile(file, user, storageManager);\n                EventBus.getDefault().post(new SyncEventFinished(intent));\n\n                return;\n            }\n\n            // check if latest sync is >30s ago\n            OCFile parent = storageManager.getFileById(file.getParentId());\n            if (parent != null && parent.getLastSyncDateForData() + 30 * 1000 > System.currentTimeMillis()) {\n                EventBus.getDefault().post(new SyncEventFinished(intent));\n\n                return;\n            }\n\n            // if offline or walled garden, show old version with warning\n            if (!connectivityService.getConnectivity().isConnected() || connectivityService.isInternetWalled()) {\n                DisplayUtils.showSnackMessage(fileActivity, R.string.file_not_synced);\n                EventBus.getDefault().post(new SyncEventFinished(intent));\n\n                return;\n            }\n\n            // check for changed eTag\n            CheckEtagRemoteOperation checkEtagOperation = new CheckEtagRemoteOperation(file.getRemotePath(),\n                                                                                       file.getEtag());\n            RemoteOperationResult result = checkEtagOperation.execute(user, fileActivity);\n\n            // eTag changed, sync file\n            if (result.getCode() == RemoteOperationResult.ResultCode.ETAG_CHANGED) {\n                syncFile(file, user, storageManager);\n            }\n\n            EventBus.getDefault().post(new SyncEventFinished(intent));\n        }).start();\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc startSyncForFileAndIntent(file: OCFile, intent: Intent) {\n    DispatchQueue.global().async {\n        guard let user = fileActivity.getUser() else {\n            fatalError(\"User not found\")\n        }\n        let storageManager = FileDataStorageManager(user: user, contentResolver: fileActivity.getContentResolver())\n\n        // check if file is in conflict (this is known due to latest folder refresh)\n        if file.isInConflict() {\n            syncFile(file: file, user: user, storageManager: storageManager)\n            EventBus.default.post(SyncEventFinished(intent: intent))\n            return\n        }\n\n        // check if latest sync is >30s ago\n        if let parent = storageManager.getFileById(file.getParentId()), parent.getLastSyncDateForData() + 30 * 1000 > Date().timeIntervalSince1970 * 1000 {\n            EventBus.default.post(SyncEventFinished(intent: intent))\n            return\n        }\n\n        // if offline or walled garden, show old version with warning\n        if !connectivityService.getConnectivity().isConnected() || connectivityService.isInternetWalled() {\n            DisplayUtils.showSnackMessage(fileActivity, message: R.string.file_not_synced)\n            EventBus.default.post(SyncEventFinished(intent: intent))\n            return\n        }\n\n        // check for changed eTag\n        let checkEtagOperation = CheckEtagRemoteOperation(remotePath: file.getRemotePath(), eTag: file.getEtag())\n        let result = checkEtagOperation.execute(user: user, fileActivity: fileActivity)\n\n        // eTag changed, sync file\n        if result.getCode() == .ETAG_CHANGED {\n            syncFile(file: file, user: user, storageManager: storageManager)\n        }\n\n        EventBus.default.post(SyncEventFinished(intent: intent))\n    }\n}\n```"
    },
    {
        "method_name": "syncFile",
        "method_code": "rivate void syncFile(OCFile file, User user, FileDataStorageManager storageManager) {\n        fileActivity.runOnUiThread(() -> fileActivity.showLoadingDialog(fileActivity.getResources()\n                                                                            .getString(R.string.sync_in_progress)));\n\n        SynchronizeFileOperation sfo = new SynchronizeFileOperation(file,\n                                                                    null,\n                                                                    user,\n                                                                    true,\n                                                                    fileActivity,\n                                                                    storageManager,\n                                                                    false);\n        RemoteOperationResult result = sfo.execute(fileActivity);\n\n        if (result.getCode() == RemoteOperationResult.ResultCode.SYNC_CONFLICT) {\n            // ISSUE 5: if the user is not running the app (this is a service!),\n            // this can be very intrusive; a notification should be preferred\n            Intent intent = ConflictsResolveActivity.createIntent(file,\n                                                                  user,\n                                                                  -1,\n                                                                  Intent.FLAG_ACTIVITY_NEW_TASK,\n                                                                  fileActivity);\n\n            fileActivity.startActivity(intent);\n        } else {\n            if (file.isDown()) {\n                FileStorageUtils.checkIfFileFinishedSaving(file);\n                if (!result.isSuccess()) {\n                    DisplayUtils.showSnackMessage(fileActivity, R.string.file_not_synced);\n                    try {\n                        Thread.sleep(3000);\n                    } catch (InterruptedException e) {\n                        Log_OC.e(TAG, \"Failed to sleep for a bit\");\n                    }\n                }\n            }\n        }\n        fileActivity.dismissLoadingDialog();\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled syncFile from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: syncFile\n\n        Method Code: rivate void syncFile(OCFile file, User user, FileDataStorageManager storageManager) {\n        fileActivity.runOnUiThread(() -> fileActivity.showLoadingDialog(fileActivity.getResources()\n                                                                            .getString(R.string.sync_in_progress)));\n\n        SynchronizeFileOperation sfo = new SynchronizeFileOperation(file,\n                                                                    null,\n                                                                    user,\n                                                                    true,\n                                                                    fileActivity,\n                                                                    storageManager,\n                                                                    false);\n        RemoteOperationResult result = sfo.execute(fileActivity);\n\n        if (result.getCode() == RemoteOperationResult.ResultCode.SYNC_CONFLICT) {\n            // ISSUE 5: if the user is not running the app (this is a service!),\n            // this can be very intrusive; a notification should be preferred\n            Intent intent = ConflictsResolveActivity.createIntent(file,\n                                                                  user,\n                                                                  -1,\n                                                                  Intent.FLAG_ACTIVITY_NEW_TASK,\n                                                                  fileActivity);\n\n            fileActivity.startActivity(intent);\n        } else {\n            if (file.isDown()) {\n                FileStorageUtils.checkIfFileFinishedSaving(file);\n                if (!result.isSuccess()) {\n                    DisplayUtils.showSnackMessage(fileActivity, R.string.file_not_synced);\n                    try {\n                        Thread.sleep(3000);\n                    } catch (InterruptedException e) {\n                        Log_OC.e(TAG, \"Failed to sleep for a bit\");\n                    }\n                }\n            }\n        }\n        fileActivity.dismissLoadingDialog();\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func syncFile(file: OCFile, user: User, storageManager: FileDataStorageManager) {\n    DispatchQueue.main.async {\n        fileActivity.showLoadingDialog(fileActivity.resources.getString(R.string.sync_in_progress))\n    }\n\n    let sfo = SynchronizeFileOperation(file: file, user: user, fileActivity: fileActivity, storageManager: storageManager, isSync: true, isUpload: false)\n    let result = sfo.execute(fileActivity)\n\n    if result.code == .syncConflict {\n        let intent = ConflictsResolveActivity.createIntent(file: file, user: user, requestCode: -1, flags: .newTask, context: fileActivity)\n        fileActivity.startActivity(intent)\n    } else {\n        if file.isDown() {\n            FileStorageUtils.checkIfFileFinishedSaving(file)\n            if !result.isSuccess {\n                DisplayUtils.showSnackMessage(fileActivity, messageId: R.string.file_not_synced)\n                do {\n                    try Thread.sleep(forTimeInterval: 3.0)\n                } catch {\n                    Log_OC.e(TAG, \"Failed to sleep for a bit\")\n                }\n            }\n        }\n    }\n    fileActivity.dismissLoadingDialog()\n}\n```"
    },
    {
        "method_name": "canOpenFile",
        "method_code": "ublic boolean canOpenFile(OCFile file) {\n        final Intent openFileWithIntent = createOpenFileIntent(file);\n\n        List<ResolveInfo> launchables = fileActivity.getPackageManager().\n            queryIntentActivities(openFileWithIntent, PackageManager.GET_RESOLVED_FILTER);\n        return !launchables.isEmpty();\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled canOpenFile from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: canOpenFile\n\n        Method Code: ublic boolean canOpenFile(OCFile file) {\n        final Intent openFileWithIntent = createOpenFileIntent(file);\n\n        List<ResolveInfo> launchables = fileActivity.getPackageManager().\n            queryIntentActivities(openFileWithIntent, PackageManager.GET_RESOLVED_FILTER);\n        return !launchables.isEmpty();\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc canOpenFile(file: OCFile) -> Bool {\n    let openFileWithIntent = createOpenFileIntent(file: file)\n    let launchables = fileActivity.packageManager.queryIntentActivities(intent: openFileWithIntent, flags: PackageManager.GET_RESOLVED_FILTER)\n    return !launchables.isEmpty\n}\n```"
    },
    {
        "method_name": "openFile",
        "method_code": "ublic void openFile(OCFile file) {\n        if (file != null) {\n            final Intent openFileWithIntent = createOpenFileIntent(file);\n\n            List<ResolveInfo> launchables = fileActivity.getPackageManager().\n                queryIntentActivities(openFileWithIntent, PackageManager.GET_RESOLVED_FILTER);\n\n            if (launchables.isEmpty()) {\n                Optional<User> optionalUser = fileActivity.getUser();\n\n                if (optionalUser.isPresent() && editorUtils.isEditorAvailable(optionalUser.get(), file.getMimeType())) {\n                    openFileWithTextEditor(file, fileActivity);\n                } else {\n                    Account account = fileActivity.getAccount();\n                    OCCapability capability = fileActivity.getStorageManager().getCapability(account.name);\n                    if (capability.getRichDocumentsMimeTypeList().contains(file.getMimeType()) &&\n                        capability.getRichDocumentsDirectEditing().isTrue()) {\n                        openFileAsRichDocument(file, fileActivity);\n                        return;\n                    } else {\n                        DisplayUtils.showSnackMessage(fileActivity, R.string.file_list_no_app_for_file_type);\n                        return;\n                    }\n                }\n            }\n\n            fileActivity.showLoadingDialog(fileActivity.getResources().getString(R.string.sync_in_progress));\n            new Thread(new Runnable() {\n                @Override\n                public void run() {\n                    User user = currentAccount.getUser();\n                    FileDataStorageManager storageManager =\n                        new FileDataStorageManager(user, fileActivity.getContentResolver());\n                    // a fresh object is needed; many things could have occurred to the file\n                    // since it was registered to observe again, assuming that local files\n                    // are linked to a remote file AT MOST, SOMETHING TO BE DONE;\n                    SynchronizeFileOperation sfo = new SynchronizeFileOperation(file,\n                                                                                null,\n                                                                                user,\n                                                                                true,\n                                                                                fileActivity,\n                                                                                storageManager,\n                                                                                false);\n                    RemoteOperationResult result = sfo.execute(fileActivity);\n                    fileActivity.dismissLoadingDialog();\n                    if (result.getCode() == RemoteOperationResult.ResultCode.SYNC_CONFLICT) {\n                        // ISSUE 5: if the user is not running the app (this is a service!),\n                        // this can be very intrusive; a notification should be preferred\n                        Intent intent = ConflictsResolveActivity.createIntent(file,\n                                                                              user,\n                                                                              -1,\n                                                                              Intent.FLAG_ACTIVITY_NEW_TASK,\n                                                                              fileActivity);\n                        fileActivity.startActivity(intent);\n                    } else {\n                        if (!launchables.isEmpty()) {\n                            try {\n                                if (!result.isSuccess()) {\n                                    DisplayUtils.showSnackMessage(fileActivity, R.string.file_not_synced);\n                                    try {\n                                        Thread.sleep(3000);\n                                    } catch (InterruptedException e) {\n                                        Log_OC.e(TAG, \"Failed to sleep\");\n                                    }\n                                }\n\n                                openFileWithIntent.setFlags(openFileWithIntent.getFlags() |\n                                                                Intent.FLAG_ACTIVITY_NEW_TASK);\n                                fileActivity.startActivity(openFileWithIntent);\n                            } catch (ActivityNotFoundException exception) {\n                                DisplayUtils.showSnackMessage(fileActivity, R.string.file_list_no_app_for_file_type);\n                            }\n                        } else {\n                            DisplayUtils.showSnackMessage(fileActivity, R.string.file_list_no_app_for_file_type);\n                        }\n                    }\n\n                }\n            }).start();\n\n        } else {\n            Log_OC.e(TAG, \"Trying to open a NULL OCFile\");\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled openFile from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: openFile\n\n        Method Code: ublic void openFile(OCFile file) {\n        if (file != null) {\n            final Intent openFileWithIntent = createOpenFileIntent(file);\n\n            List<ResolveInfo> launchables = fileActivity.getPackageManager().\n                queryIntentActivities(openFileWithIntent, PackageManager.GET_RESOLVED_FILTER);\n\n            if (launchables.isEmpty()) {\n                Optional<User> optionalUser = fileActivity.getUser();\n\n                if (optionalUser.isPresent() && editorUtils.isEditorAvailable(optionalUser.get(), file.getMimeType())) {\n                    openFileWithTextEditor(file, fileActivity);\n                } else {\n                    Account account = fileActivity.getAccount();\n                    OCCapability capability = fileActivity.getStorageManager().getCapability(account.name);\n                    if (capability.getRichDocumentsMimeTypeList().contains(file.getMimeType()) &&\n                        capability.getRichDocumentsDirectEditing().isTrue()) {\n                        openFileAsRichDocument(file, fileActivity);\n                        return;\n                    } else {\n                        DisplayUtils.showSnackMessage(fileActivity, R.string.file_list_no_app_for_file_type);\n                        return;\n                    }\n                }\n            }\n\n            fileActivity.showLoadingDialog(fileActivity.getResources().getString(R.string.sync_in_progress));\n            new Thread(new Runnable() {\n                @Override\n                public void run() {\n                    User user = currentAccount.getUser();\n                    FileDataStorageManager storageManager =\n                        new FileDataStorageManager(user, fileActivity.getContentResolver());\n                    // a fresh object is needed; many things could have occurred to the file\n                    // since it was registered to observe again, assuming that local files\n                    // are linked to a remote file AT MOST, SOMETHING TO BE DONE;\n                    SynchronizeFileOperation sfo = new SynchronizeFileOperation(file,\n                                                                                null,\n                                                                                user,\n                                                                                true,\n                                                                                fileActivity,\n                                                                                storageManager,\n                                                                                false);\n                    RemoteOperationResult result = sfo.execute(fileActivity);\n                    fileActivity.dismissLoadingDialog();\n                    if (result.getCode() == RemoteOperationResult.ResultCode.SYNC_CONFLICT) {\n                        // ISSUE 5: if the user is not running the app (this is a service!),\n                        // this can be very intrusive; a notification should be preferred\n                        Intent intent = ConflictsResolveActivity.createIntent(file,\n                                                                              user,\n                                                                              -1,\n                                                                              Intent.FLAG_ACTIVITY_NEW_TASK,\n                                                                              fileActivity);\n                        fileActivity.startActivity(intent);\n                    } else {\n                        if (!launchables.isEmpty()) {\n                            try {\n                                if (!result.isSuccess()) {\n                                    DisplayUtils.showSnackMessage(fileActivity, R.string.file_not_synced);\n                                    try {\n                                        Thread.sleep(3000);\n                                    } catch (InterruptedException e) {\n                                        Log_OC.e(TAG, \"Failed to sleep\");\n                                    }\n                                }\n\n                                openFileWithIntent.setFlags(openFileWithIntent.getFlags() |\n                                                                Intent.FLAG_ACTIVITY_NEW_TASK);\n                                fileActivity.startActivity(openFileWithIntent);\n                            } catch (ActivityNotFoundException exception) {\n                                DisplayUtils.showSnackMessage(fileActivity, R.string.file_list_no_app_for_file_type);\n                            }\n                        } else {\n                            DisplayUtils.showSnackMessage(fileActivity, R.string.file_list_no_app_for_file_type);\n                        }\n                    }\n\n                }\n            }).start();\n\n        } else {\n            Log_OC.e(TAG, \"Trying to open a NULL OCFile\");\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc openFile(file: OCFile?) {\n    guard let file = file else {\n        Log_OC.e(TAG, \"Trying to open a NULL OCFile\")\n        return\n    }\n\n    let openFileWithIntent = createOpenFileIntent(file: file)\n    let launchables = fileActivity.packageManager.queryIntentActivities(intent: openFileWithIntent, flags: PackageManager.GET_RESOLVED_FILTER)\n\n    if launchables.isEmpty {\n        if let user = fileActivity.user, editorUtils.isEditorAvailable(user: user, mimeType: file.mimeType) {\n            openFileWithTextEditor(file: file, fileActivity: fileActivity)\n        } else {\n            let account = fileActivity.account\n            let capability = fileActivity.storageManager.getCapability(accountName: account.name)\n            if capability.richDocumentsMimeTypeList.contains(file.mimeType) && capability.richDocumentsDirectEditing.isTrue {\n                openFileAsRichDocument(file: file, fileActivity: fileActivity)\n                return\n            } else {\n                DisplayUtils.showSnackMessage(fileActivity: fileActivity, messageId: R.string.file_list_no_app_for_file_type)\n                return\n            }\n        }\n    }\n\n    fileActivity.showLoadingDialog(message: fileActivity.resources.getString(R.string.sync_in_progress))\n    DispatchQueue.global().async {\n        let user = currentAccount.user\n        let storageManager = FileDataStorageManager(user: user, contentResolver: fileActivity.contentResolver)\n        let sfo = SynchronizeFileOperation(file: file, user: user, fileActivity: fileActivity, storageManager: storageManager)\n        let result = sfo.execute(fileActivity: fileActivity)\n        fileActivity.dismissLoadingDialog()\n\n        if result.code == .syncConflict {\n            let intent = ConflictsResolveActivity.createIntent(file: file, user: user, flags: Intent.FLAG_ACTIVITY_NEW_TASK, fileActivity: fileActivity)\n            fileActivity.startActivity(intent: intent)\n        } else {\n            if !launchables.isEmpty {\n                do {\n                    if !result.isSuccess {\n                        DisplayUtils.showSnackMessage(fileActivity: fileActivity, messageId: R.string.file_not_synced)\n                        Thread.sleep(forTimeInterval: 3.0)\n                    }\n\n                    openFileWithIntent.flags = openFileWithIntent.flags | Intent.FLAG_ACTIVITY_NEW_TASK\n                    fileActivity.startActivity(intent: openFileWithIntent)\n                } catch {\n                    DisplayUtils.showSnackMessage(fileActivity: fileActivity, messageId: R.string.file_list_no_app_for_file_type)\n                }\n            } else {\n                DisplayUtils.showSnackMessage(fileActivity: fileActivity, messageId: R.string.file_list_no_app_for_file_type)\n            }\n        }\n    }\n}\n```"
    },
    {
        "method_name": "run",
        "method_code": "Override\n                public void run() {\n                    User user = currentAccount.getUser();\n                    FileDataStorageManager storageManager =\n                        new FileDataStorageManager(user, fileActivity.getContentResolver());\n                    // a fresh object is needed; many things could have occurred to the file\n                    // since it was registered to observe again, assuming that local files\n                    // are linked to a remote file AT MOST, SOMETHING TO BE DONE;\n                    SynchronizeFileOperation sfo = new SynchronizeFileOperation(file,\n                                                                                null,\n                                                                                user,\n                                                                                true,\n                                                                                fileActivity,\n                                                                                storageManager,\n                                                                                false);\n                    RemoteOperationResult result = sfo.execute(fileActivity);\n                    fileActivity.dismissLoadingDialog();\n                    if (result.getCode() == RemoteOperationResult.ResultCode.SYNC_CONFLICT) {\n                        // ISSUE 5: if the user is not running the app (this is a service!),\n                        // this can be very intrusive; a notification should be preferred\n                        Intent intent = ConflictsResolveActivity.createIntent(file,\n                                                                              user,\n                                                                              -1,\n                                                                              Intent.FLAG_ACTIVITY_NEW_TASK,\n                                                                              fileActivity);\n                        fileActivity.startActivity(intent);\n                    } else {\n                        if (!launchables.isEmpty()) {\n                            try {\n                                if (!result.isSuccess()) {\n                                    DisplayUtils.showSnackMessage(fileActivity, R.string.file_not_synced);\n                                    try {\n                                        Thread.sleep(3000);\n                                    } catch (InterruptedException e) {\n                                        Log_OC.e(TAG, \"Failed to sleep\");\n                                    }\n                                }\n\n                                openFileWithIntent.setFlags(openFileWithIntent.getFlags() |\n                                                                Intent.FLAG_ACTIVITY_NEW_TASK);\n                                fileActivity.startActivity(openFileWithIntent);\n                            } catch (ActivityNotFoundException exception) {\n                                DisplayUtils.showSnackMessage(fileActivity, R.string.file_list_no_app_for_file_type);\n                            }\n                        } else {\n                            DisplayUtils.showSnackMessage(fileActivity, R.string.file_list_no_app_for_file_type);\n                        }\n                    }\n\n                }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled run from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: run\n\n        Method Code: Override\n                public void run() {\n                    User user = currentAccount.getUser();\n                    FileDataStorageManager storageManager =\n                        new FileDataStorageManager(user, fileActivity.getContentResolver());\n                    // a fresh object is needed; many things could have occurred to the file\n                    // since it was registered to observe again, assuming that local files\n                    // are linked to a remote file AT MOST, SOMETHING TO BE DONE;\n                    SynchronizeFileOperation sfo = new SynchronizeFileOperation(file,\n                                                                                null,\n                                                                                user,\n                                                                                true,\n                                                                                fileActivity,\n                                                                                storageManager,\n                                                                                false);\n                    RemoteOperationResult result = sfo.execute(fileActivity);\n                    fileActivity.dismissLoadingDialog();\n                    if (result.getCode() == RemoteOperationResult.ResultCode.SYNC_CONFLICT) {\n                        // ISSUE 5: if the user is not running the app (this is a service!),\n                        // this can be very intrusive; a notification should be preferred\n                        Intent intent = ConflictsResolveActivity.createIntent(file,\n                                                                              user,\n                                                                              -1,\n                                                                              Intent.FLAG_ACTIVITY_NEW_TASK,\n                                                                              fileActivity);\n                        fileActivity.startActivity(intent);\n                    } else {\n                        if (!launchables.isEmpty()) {\n                            try {\n                                if (!result.isSuccess()) {\n                                    DisplayUtils.showSnackMessage(fileActivity, R.string.file_not_synced);\n                                    try {\n                                        Thread.sleep(3000);\n                                    } catch (InterruptedException e) {\n                                        Log_OC.e(TAG, \"Failed to sleep\");\n                                    }\n                                }\n\n                                openFileWithIntent.setFlags(openFileWithIntent.getFlags() |\n                                                                Intent.FLAG_ACTIVITY_NEW_TASK);\n                                fileActivity.startActivity(openFileWithIntent);\n                            } catch (ActivityNotFoundException exception) {\n                                DisplayUtils.showSnackMessage(fileActivity, R.string.file_list_no_app_for_file_type);\n                            }\n                        } else {\n                            DisplayUtils.showSnackMessage(fileActivity, R.string.file_list_no_app_for_file_type);\n                        }\n                    }\n\n                }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func run() {\n    let user = currentAccount.getUser()\n    let storageManager = FileDataStorageManager(user: user, contentResolver: fileActivity.contentResolver)\n    let sfo = SynchronizeFileOperation(file: file, \n                                       param: nil, \n                                       user: user, \n                                       flag: true, \n                                       fileActivity: fileActivity, \n                                       storageManager: storageManager, \n                                       anotherFlag: false)\n    let result = sfo.execute(fileActivity: fileActivity)\n    fileActivity.dismissLoadingDialog()\n    \n    if result.code == .syncConflict {\n        let intent = ConflictsResolveActivity.createIntent(file: file, \n                                                           user: user, \n                                                           param: -1, \n                                                           flags: .flagActivityNewTask, \n                                                           fileActivity: fileActivity)\n        fileActivity.startActivity(intent)\n    } else {\n        if !launchables.isEmpty {\n            do {\n                if !result.isSuccess {\n                    DisplayUtils.showSnackMessage(fileActivity: fileActivity, message: R.string.file_not_synced)\n                    do {\n                        try Thread.sleep(forTimeInterval: 3.0)\n                    } catch {\n                        Log_OC.e(TAG, \"Failed to sleep\")\n                    }\n                }\n                \n                openFileWithIntent.flags.insert(.flagActivityNewTask)\n                fileActivity.startActivity(openFileWithIntent)\n            } catch {\n                DisplayUtils.showSnackMessage(fileActivity: fileActivity, message: R.string.file_list_no_app_for_file_type)\n            }\n        } else {\n            DisplayUtils.showSnackMessage(fileActivity: fileActivity, message: R.string.file_list_no_app_for_file_type)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "openFileAsRichDocument",
        "method_code": "ublic void openFileAsRichDocument(OCFile file, Context context) {\n        Intent collaboraWebViewIntent = new Intent(context, RichDocumentsEditorWebView.class);\n        collaboraWebViewIntent.putExtra(ExternalSiteWebView.EXTRA_TITLE, \"Collabora\");\n        collaboraWebViewIntent.putExtra(ExternalSiteWebView.EXTRA_FILE, file);\n        collaboraWebViewIntent.putExtra(ExternalSiteWebView.EXTRA_SHOW_SIDEBAR, false);\n        context.startActivity(collaboraWebViewIntent);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled openFileAsRichDocument from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: openFileAsRichDocument\n\n        Method Code: ublic void openFileAsRichDocument(OCFile file, Context context) {\n        Intent collaboraWebViewIntent = new Intent(context, RichDocumentsEditorWebView.class);\n        collaboraWebViewIntent.putExtra(ExternalSiteWebView.EXTRA_TITLE, \"Collabora\");\n        collaboraWebViewIntent.putExtra(ExternalSiteWebView.EXTRA_FILE, file);\n        collaboraWebViewIntent.putExtra(ExternalSiteWebView.EXTRA_SHOW_SIDEBAR, false);\n        context.startActivity(collaboraWebViewIntent);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc openFileAsRichDocument(file: OCFile, context: UIViewController) {\n    let collaboraWebViewController = RichDocumentsEditorWebView()\n    collaboraWebViewController.title = \"Collabora\"\n    collaboraWebViewController.file = file\n    collaboraWebViewController.showSidebar = false\n    context.present(collaboraWebViewController, animated: true, completion: nil)\n}\n```"
    },
    {
        "method_name": "openFileWithTextEditor",
        "method_code": "ublic void openFileWithTextEditor(OCFile file, Context context) {\n        Intent textEditorIntent = new Intent(context, TextEditorWebView.class);\n        textEditorIntent.putExtra(ExternalSiteWebView.EXTRA_TITLE, \"Text\");\n        textEditorIntent.putExtra(ExternalSiteWebView.EXTRA_FILE, file);\n        textEditorIntent.putExtra(ExternalSiteWebView.EXTRA_SHOW_SIDEBAR, false);\n        context.startActivity(textEditorIntent);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled openFileWithTextEditor from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: openFileWithTextEditor\n\n        Method Code: ublic void openFileWithTextEditor(OCFile file, Context context) {\n        Intent textEditorIntent = new Intent(context, TextEditorWebView.class);\n        textEditorIntent.putExtra(ExternalSiteWebView.EXTRA_TITLE, \"Text\");\n        textEditorIntent.putExtra(ExternalSiteWebView.EXTRA_FILE, file);\n        textEditorIntent.putExtra(ExternalSiteWebView.EXTRA_SHOW_SIDEBAR, false);\n        context.startActivity(textEditorIntent);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc openFileWithTextEditor(file: OCFile, context: UIViewController) {\n    let textEditorViewController = TextEditorWebView()\n    textEditorViewController.title = \"Text\"\n    textEditorViewController.file = file\n    textEditorViewController.showSidebar = false\n    context.present(textEditorViewController, animated: true, completion: nil)\n}\n```"
    },
    {
        "method_name": "openRichWorkspaceWithTextEditor",
        "method_code": "ublic void openRichWorkspaceWithTextEditor(OCFile file, String url, Context context) {\n        Intent textEditorIntent = new Intent(context, TextEditorWebView.class);\n        textEditorIntent.putExtra(ExternalSiteWebView.EXTRA_TITLE, \"Text\");\n        textEditorIntent.putExtra(ExternalSiteWebView.EXTRA_URL, url);\n        textEditorIntent.putExtra(ExternalSiteWebView.EXTRA_FILE, file);\n        textEditorIntent.putExtra(ExternalSiteWebView.EXTRA_SHOW_SIDEBAR, false);\n        context.startActivity(textEditorIntent);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled openRichWorkspaceWithTextEditor from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: openRichWorkspaceWithTextEditor\n\n        Method Code: ublic void openRichWorkspaceWithTextEditor(OCFile file, String url, Context context) {\n        Intent textEditorIntent = new Intent(context, TextEditorWebView.class);\n        textEditorIntent.putExtra(ExternalSiteWebView.EXTRA_TITLE, \"Text\");\n        textEditorIntent.putExtra(ExternalSiteWebView.EXTRA_URL, url);\n        textEditorIntent.putExtra(ExternalSiteWebView.EXTRA_FILE, file);\n        textEditorIntent.putExtra(ExternalSiteWebView.EXTRA_SHOW_SIDEBAR, false);\n        context.startActivity(textEditorIntent);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc openRichWorkspaceWithTextEditor(file: OCFile, url: String, context: UIViewController) {\n    let storyboard = UIStoryboard(name: \"Main\", bundle: nil)\n    if let textEditorVC = storyboard.instantiateViewController(withIdentifier: \"TextEditorWebView\") as? TextEditorWebView {\n        textEditorVC.title = \"Text\"\n        textEditorVC.url = url\n        textEditorVC.file = file\n        textEditorVC.showSidebar = false\n        context.present(textEditorVC, animated: true, completion: nil)\n    }\n}\n```"
    },
    {
        "method_name": "createOpenFileIntent",
        "method_code": "NonNull\n    private Intent createOpenFileIntent(OCFile file) {\n        String storagePath = file.getStoragePath();\n        Uri fileUri = getFileUri(file, MainApp.getAppContext().getResources().getStringArray(R.array\n                                                                                                 .ms_office_extensions));\n        Intent openFileWithIntent = null;\n        int lastIndexOfDot = storagePath.lastIndexOf('.');\n        if (lastIndexOfDot >= 0) {\n            String fileExt = storagePath.substring(lastIndexOfDot + 1);\n            String guessedMimeType = MimeTypeMap.getSingleton().getMimeTypeFromExtension(fileExt);\n            if (guessedMimeType != null) {\n                openFileWithIntent = new Intent(Intent.ACTION_VIEW);\n                openFileWithIntent.setDataAndType(\n                    fileUri,\n                    guessedMimeType\n                                                 );\n            }\n        }\n\n        if (openFileWithIntent == null) {\n            openFileWithIntent = createIntentFromFile(storagePath);\n        }\n\n        if (openFileWithIntent == null) {\n            openFileWithIntent = new Intent(Intent.ACTION_VIEW);\n            openFileWithIntent.setDataAndType(\n                fileUri,\n                file.getMimeType()\n                                             );\n        }\n\n        openFileWithIntent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);\n        return openFileWithIntent;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled createOpenFileIntent from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: createOpenFileIntent\n\n        Method Code: NonNull\n    private Intent createOpenFileIntent(OCFile file) {\n        String storagePath = file.getStoragePath();\n        Uri fileUri = getFileUri(file, MainApp.getAppContext().getResources().getStringArray(R.array\n                                                                                                 .ms_office_extensions));\n        Intent openFileWithIntent = null;\n        int lastIndexOfDot = storagePath.lastIndexOf('.');\n        if (lastIndexOfDot >= 0) {\n            String fileExt = storagePath.substring(lastIndexOfDot + 1);\n            String guessedMimeType = MimeTypeMap.getSingleton().getMimeTypeFromExtension(fileExt);\n            if (guessedMimeType != null) {\n                openFileWithIntent = new Intent(Intent.ACTION_VIEW);\n                openFileWithIntent.setDataAndType(\n                    fileUri,\n                    guessedMimeType\n                                                 );\n            }\n        }\n\n        if (openFileWithIntent == null) {\n            openFileWithIntent = createIntentFromFile(storagePath);\n        }\n\n        if (openFileWithIntent == null) {\n            openFileWithIntent = new Intent(Intent.ACTION_VIEW);\n            openFileWithIntent.setDataAndType(\n                fileUri,\n                file.getMimeType()\n                                             );\n        }\n\n        openFileWithIntent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);\n        return openFileWithIntent;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport UIKit\n\nfunc createOpenFileIntent(file: OCFile) -> URL? {\n    let storagePath = file.getStoragePath()\n    let fileUri = getFileUri(file: file, extensions: MainApp.getAppContext().resources.stringArray(forKey: \"ms_office_extensions\"))\n    var openFileWithIntent: URL? = nil\n    if let lastIndexOfDot = storagePath.lastIndex(of: \".\") {\n        let fileExt = String(storagePath[storagePath.index(after: lastIndexOfDot)...])\n        if let guessedMimeType = MimeTypeMap.shared.getMimeTypeFromExtension(fileExt) {\n            openFileWithIntent = fileUri\n        }\n    }\n\n    if openFileWithIntent == nil {\n        openFileWithIntent = createIntentFromFile(storagePath: storagePath)\n    }\n\n    if openFileWithIntent == nil {\n        openFileWithIntent = fileUri\n    }\n\n    // Assuming the function returns a URL, as Swift does not have an Intent class like Android\n    return openFileWithIntent\n}\n```"
    },
    {
        "method_name": "getFileUri",
        "method_code": "rivate Uri getFileUri(OCFile file, String... officeExtensions) {\n        if (file.getFileName().contains(\".\") &&\n            Arrays.asList(officeExtensions).contains(file.getFileName().substring(file.getFileName().\n                                                                                      lastIndexOf(\".\") + 1)) &&\n            !file.getStoragePath().startsWith(MainApp.getAppContext().getFilesDir().getAbsolutePath())) {\n            return file.getLegacyExposedFileUri();\n        } else {\n            return file.getExposedFileUri(fileActivity);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getFileUri from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: getFileUri\n\n        Method Code: rivate Uri getFileUri(OCFile file, String... officeExtensions) {\n        if (file.getFileName().contains(\".\") &&\n            Arrays.asList(officeExtensions).contains(file.getFileName().substring(file.getFileName().\n                                                                                      lastIndexOf(\".\") + 1)) &&\n            !file.getStoragePath().startsWith(MainApp.getAppContext().getFilesDir().getAbsolutePath())) {\n            return file.getLegacyExposedFileUri();\n        } else {\n            return file.getExposedFileUri(fileActivity);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getFileUri(file: OCFile, officeExtensions: String...) -> URL? {\n    if let fileName = file.getFileName(), \n       fileName.contains(\".\"),\n       officeExtensions.contains(fileName.components(separatedBy: \".\").last ?? \"\"),\n       !file.getStoragePath().hasPrefix(MainApp.getAppContext().filesDir.path) {\n        return file.getLegacyExposedFileUri()\n    } else {\n        return file.getExposedFileUri(fileActivity)\n    }\n}\n```"
    },
    {
        "method_name": "streamMediaFile",
        "method_code": "ublic void streamMediaFile(OCFile file) {\n        fileActivity.showLoadingDialog(fileActivity.getString(R.string.wait_a_moment));\n        final User user = currentAccount.getUser();\n        new Thread(() -> {\n            StreamMediaFileOperation sfo = new StreamMediaFileOperation(file.getLocalId());\n            RemoteOperationResult result = sfo.execute(user, fileActivity);\n\n            fileActivity.dismissLoadingDialog();\n\n            if (!result.isSuccess()) {\n                DisplayUtils.showSnackMessage(fileActivity, R.string.stream_not_possible_headline);\n                return;\n            }\n\n            Intent openFileWithIntent = new Intent(Intent.ACTION_VIEW);\n            Uri uri = Uri.parse((String) result.getData().get(0));\n\n            openFileWithIntent.setDataAndType(uri, file.getMimeType());\n\n            fileActivity.startActivity(Intent.createChooser(openFileWithIntent,\n                                                            fileActivity.getString(R.string.stream)));\n        }).start();\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled streamMediaFile from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: streamMediaFile\n\n        Method Code: ublic void streamMediaFile(OCFile file) {\n        fileActivity.showLoadingDialog(fileActivity.getString(R.string.wait_a_moment));\n        final User user = currentAccount.getUser();\n        new Thread(() -> {\n            StreamMediaFileOperation sfo = new StreamMediaFileOperation(file.getLocalId());\n            RemoteOperationResult result = sfo.execute(user, fileActivity);\n\n            fileActivity.dismissLoadingDialog();\n\n            if (!result.isSuccess()) {\n                DisplayUtils.showSnackMessage(fileActivity, R.string.stream_not_possible_headline);\n                return;\n            }\n\n            Intent openFileWithIntent = new Intent(Intent.ACTION_VIEW);\n            Uri uri = Uri.parse((String) result.getData().get(0));\n\n            openFileWithIntent.setDataAndType(uri, file.getMimeType());\n\n            fileActivity.startActivity(Intent.createChooser(openFileWithIntent,\n                                                            fileActivity.getString(R.string.stream)));\n        }).start();\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc streamMediaFile(file: OCFile) {\n    fileActivity.showLoadingDialog(message: fileActivity.getString(R.string.wait_a_moment))\n    let user = currentAccount.user\n    DispatchQueue.global().async {\n        let sfo = StreamMediaFileOperation(localId: file.localId)\n        let result = sfo.execute(user: user, fileActivity: fileActivity)\n\n        DispatchQueue.main.async {\n            fileActivity.dismissLoadingDialog()\n\n            if !result.isSuccess {\n                DisplayUtils.showSnackMessage(fileActivity: fileActivity, message: R.string.stream_not_possible_headline)\n                return\n            }\n\n            if let uriString = result.getData().first as? String, let uri = URL(string: uriString) {\n                let openFileWithIntent = Intent(action: .view)\n                openFileWithIntent.setDataAndType(uri: uri, mimeType: file.mimeType)\n\n                fileActivity.startActivity(Intent.createChooser(intent: openFileWithIntent, title: fileActivity.getString(R.string.stream)))\n            }\n        }\n    }\n}\n```"
    },
    {
        "method_name": "shareFileViaPublicShare",
        "method_code": "ublic void shareFileViaPublicShare(OCFile file, String password) {\n        if (file != null) {\n            fileActivity.showLoadingDialog(fileActivity.getString(R.string.wait_a_moment));\n            Intent service = new Intent(fileActivity, OperationsService.class);\n            service.setAction(OperationsService.ACTION_CREATE_SHARE_VIA_LINK);\n            service.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount());\n            if (!TextUtils.isEmpty(password)) {\n                service.putExtra(OperationsService.EXTRA_SHARE_PASSWORD, password);\n            }\n            service.putExtra(OperationsService.EXTRA_REMOTE_PATH, file.getRemotePath());\n            mWaitingForOpId = fileActivity.getOperationsServiceBinder().queueNewOperation(service);\n\n        } else {\n            Log_OC.e(TAG, \"Trying to share a NULL OCFile\");\n            // TODO user-level error?\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled shareFileViaPublicShare from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: shareFileViaPublicShare\n\n        Method Code: ublic void shareFileViaPublicShare(OCFile file, String password) {\n        if (file != null) {\n            fileActivity.showLoadingDialog(fileActivity.getString(R.string.wait_a_moment));\n            Intent service = new Intent(fileActivity, OperationsService.class);\n            service.setAction(OperationsService.ACTION_CREATE_SHARE_VIA_LINK);\n            service.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount());\n            if (!TextUtils.isEmpty(password)) {\n                service.putExtra(OperationsService.EXTRA_SHARE_PASSWORD, password);\n            }\n            service.putExtra(OperationsService.EXTRA_REMOTE_PATH, file.getRemotePath());\n            mWaitingForOpId = fileActivity.getOperationsServiceBinder().queueNewOperation(service);\n\n        } else {\n            Log_OC.e(TAG, \"Trying to share a NULL OCFile\");\n            // TODO user-level error?\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc shareFileViaPublicShare(file: OCFile?, password: String?) {\n    if let file = file {\n        fileActivity.showLoadingDialog(fileActivity.getString(R.string.wait_a_moment))\n        let service = Intent(fileActivity, OperationsService.self)\n        service.setAction(OperationsService.ACTION_CREATE_SHARE_VIA_LINK)\n        service.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount())\n        if let password = password, !password.isEmpty {\n            service.putExtra(OperationsService.EXTRA_SHARE_PASSWORD, password)\n        }\n        service.putExtra(OperationsService.EXTRA_REMOTE_PATH, file.getRemotePath())\n        mWaitingForOpId = fileActivity.getOperationsServiceBinder().queueNewOperation(service)\n    } else {\n        Log_OC.e(TAG, \"Trying to share a NULL OCFile\")\n        // TODO user-level error?\n    }\n}\n```"
    },
    {
        "method_name": "shareFolderViaSecureFileDrop",
        "method_code": "ublic void shareFolderViaSecureFileDrop(@NonNull OCFile file) {\n        fileActivity.showLoadingDialog(fileActivity.getString(R.string.wait_a_moment));\n        Intent service = new Intent(fileActivity, OperationsService.class);\n        service.setAction(OperationsService.ACTION_CREATE_SECURE_FILE_DROP);\n        service.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount());\n        service.putExtra(OperationsService.EXTRA_REMOTE_PATH, file.getRemotePath());\n        mWaitingForOpId = fileActivity.getOperationsServiceBinder().queueNewOperation(service);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled shareFolderViaSecureFileDrop from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: shareFolderViaSecureFileDrop\n\n        Method Code: ublic void shareFolderViaSecureFileDrop(@NonNull OCFile file) {\n        fileActivity.showLoadingDialog(fileActivity.getString(R.string.wait_a_moment));\n        Intent service = new Intent(fileActivity, OperationsService.class);\n        service.setAction(OperationsService.ACTION_CREATE_SECURE_FILE_DROP);\n        service.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount());\n        service.putExtra(OperationsService.EXTRA_REMOTE_PATH, file.getRemotePath());\n        mWaitingForOpId = fileActivity.getOperationsServiceBinder().queueNewOperation(service);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc shareFolderViaSecureFileDrop(file: OCFile) {\n    fileActivity.showLoadingDialog(message: fileActivity.getString(R.string.wait_a_moment))\n    let service = Intent(context: fileActivity, serviceClass: OperationsService.self)\n    service.action = OperationsService.ACTION_CREATE_SECURE_FILE_DROP\n    service.putExtra(OperationsService.EXTRA_ACCOUNT, value: fileActivity.getAccount())\n    service.putExtra(OperationsService.EXTRA_REMOTE_PATH, value: file.getRemotePath())\n    mWaitingForOpId = fileActivity.getOperationsServiceBinder().queueNewOperation(intent: service)\n}\n```"
    },
    {
        "method_name": "getFileWithLink",
        "method_code": "ublic void getFileWithLink(@NonNull OCFile file, final ViewThemeUtils viewThemeUtils) {\n        List<OCShare> shares = fileActivity.getStorageManager().getSharesByPathAndType(file.getRemotePath(),\n                                                                                       ShareType.PUBLIC_LINK,\n                                                                                       \"\");\n\n        if (shares.size() == SINGLE_LINK_SIZE) {\n            FileActivity.copyAndShareFileLink(fileActivity, file, shares.get(0).getShareLink(), viewThemeUtils);\n        } else {\n            if (fileActivity instanceof FileDisplayActivity) {\n                ((FileDisplayActivity) fileActivity).showDetails(file, 1);\n            } else {\n                showShareFile(file);\n            }\n        }\n\n        fileActivity.refreshList();\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getFileWithLink from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: getFileWithLink\n\n        Method Code: ublic void getFileWithLink(@NonNull OCFile file, final ViewThemeUtils viewThemeUtils) {\n        List<OCShare> shares = fileActivity.getStorageManager().getSharesByPathAndType(file.getRemotePath(),\n                                                                                       ShareType.PUBLIC_LINK,\n                                                                                       \"\");\n\n        if (shares.size() == SINGLE_LINK_SIZE) {\n            FileActivity.copyAndShareFileLink(fileActivity, file, shares.get(0).getShareLink(), viewThemeUtils);\n        } else {\n            if (fileActivity instanceof FileDisplayActivity) {\n                ((FileDisplayActivity) fileActivity).showDetails(file, 1);\n            } else {\n                showShareFile(file);\n            }\n        }\n\n        fileActivity.refreshList();\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getFileWithLink(file: OCFile, viewThemeUtils: ViewThemeUtils) {\n    let shares = fileActivity.getStorageManager().getSharesByPathAndType(file.getRemotePath(), ShareType.PUBLIC_LINK, \"\")\n\n    if shares.count == SINGLE_LINK_SIZE {\n        FileActivity.copyAndShareFileLink(fileActivity, file, shares[0].getShareLink(), viewThemeUtils)\n    } else {\n        if let fileDisplayActivity = fileActivity as? FileDisplayActivity {\n            fileDisplayActivity.showDetails(file, 1)\n        } else {\n            showShareFile(file)\n        }\n    }\n\n    fileActivity.refreshList()\n}\n```"
    },
    {
        "method_name": "shareFileWithSharee",
        "method_code": "ublic void shareFileWithSharee(OCFile file, String shareeName, ShareType shareType, int permissions) {\n        if (file != null) {\n            // TODO check capability?\n            fileActivity.showLoadingDialog(fileActivity.getApplicationContext().\n                                               getString(R.string.wait_a_moment));\n\n            Intent service = new Intent(fileActivity, OperationsService.class);\n            service.setAction(OperationsService.ACTION_CREATE_SHARE_WITH_SHAREE);\n            service.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount());\n            service.putExtra(OperationsService.EXTRA_REMOTE_PATH, file.getRemotePath());\n            service.putExtra(OperationsService.EXTRA_SHARE_WITH, shareeName);\n            service.putExtra(OperationsService.EXTRA_SHARE_TYPE, shareType);\n            service.putExtra(OperationsService.EXTRA_SHARE_PERMISSIONS, permissions);\n            mWaitingForOpId = fileActivity.getOperationsServiceBinder().queueNewOperation(service);\n\n        } else {\n            Log_OC.e(TAG, \"Trying to share a NULL OCFile\");\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled shareFileWithSharee from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: shareFileWithSharee\n\n        Method Code: ublic void shareFileWithSharee(OCFile file, String shareeName, ShareType shareType, int permissions) {\n        if (file != null) {\n            // TODO check capability?\n            fileActivity.showLoadingDialog(fileActivity.getApplicationContext().\n                                               getString(R.string.wait_a_moment));\n\n            Intent service = new Intent(fileActivity, OperationsService.class);\n            service.setAction(OperationsService.ACTION_CREATE_SHARE_WITH_SHAREE);\n            service.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount());\n            service.putExtra(OperationsService.EXTRA_REMOTE_PATH, file.getRemotePath());\n            service.putExtra(OperationsService.EXTRA_SHARE_WITH, shareeName);\n            service.putExtra(OperationsService.EXTRA_SHARE_TYPE, shareType);\n            service.putExtra(OperationsService.EXTRA_SHARE_PERMISSIONS, permissions);\n            mWaitingForOpId = fileActivity.getOperationsServiceBinder().queueNewOperation(service);\n\n        } else {\n            Log_OC.e(TAG, \"Trying to share a NULL OCFile\");\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc shareFileWithSharee(file: OCFile?, shareeName: String, shareType: ShareType, permissions: Int) {\n    if let file = file {\n        // TODO check capability?\n        fileActivity.showLoadingDialog(fileActivity.applicationContext.getString(R.string.wait_a_moment))\n        \n        let service = Intent(fileActivity, OperationsService.self)\n        service.setAction(OperationsService.ACTION_CREATE_SHARE_WITH_SHAREE)\n        service.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount())\n        service.putExtra(OperationsService.EXTRA_REMOTE_PATH, file.getRemotePath())\n        service.putExtra(OperationsService.EXTRA_SHARE_WITH, shareeName)\n        service.putExtra(OperationsService.EXTRA_SHARE_TYPE, shareType)\n        service.putExtra(OperationsService.EXTRA_SHARE_PERMISSIONS, permissions)\n        mWaitingForOpId = fileActivity.getOperationsServiceBinder().queueNewOperation(service)\n        \n    } else {\n        Log_OC.e(TAG, \"Trying to share a NULL OCFile\")\n    }\n}\n```"
    },
    {
        "method_name": "shareFileWithSharee",
        "method_code": "ublic void shareFileWithSharee(OCFile file,\n                                    String shareeName,\n                                    ShareType shareType,\n                                    int permissions,\n                                    boolean hideFileDownload,\n                                    String password,\n                                    long expirationTimeInMillis,\n                                    String note,\n                                    String label,\n                                    boolean showLoadingDialog) {\n        if (file != null) {\n            // TODO check capability?\n            if (showLoadingDialog) {\n                fileActivity.showLoadingDialog(fileActivity.getApplicationContext().\n                                                   getString(R.string.wait_a_moment));\n            }\n\n            Intent service = new Intent(fileActivity, OperationsService.class);\n            service.setAction(OperationsService.ACTION_CREATE_SHARE_WITH_SHAREE);\n            service.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount());\n            service.putExtra(OperationsService.EXTRA_REMOTE_PATH, file.getRemotePath());\n            service.putExtra(OperationsService.EXTRA_SHARE_WITH, shareeName);\n            service.putExtra(OperationsService.EXTRA_SHARE_TYPE, shareType);\n            service.putExtra(OperationsService.EXTRA_SHARE_PERMISSIONS, permissions);\n            service.putExtra(OperationsService.EXTRA_SHARE_HIDE_FILE_DOWNLOAD, hideFileDownload);\n            service.putExtra(OperationsService.EXTRA_SHARE_PASSWORD, (password == null) ? \"\" : password);\n            service.putExtra(OperationsService.EXTRA_SHARE_EXPIRATION_DATE_IN_MILLIS, expirationTimeInMillis);\n            service.putExtra(OperationsService.EXTRA_SHARE_NOTE, (note == null) ? \"\" : note);\n            service.putExtra(OperationsService.EXTRA_SHARE_PUBLIC_LABEL, (label == null) ? \"\" : label);\n\n            mWaitingForOpId = fileActivity.getOperationsServiceBinder().queueNewOperation(service);\n\n        } else {\n            Log_OC.e(TAG, \"Trying to share a NULL OCFile\");\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled shareFileWithSharee from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: shareFileWithSharee\n\n        Method Code: ublic void shareFileWithSharee(OCFile file,\n                                    String shareeName,\n                                    ShareType shareType,\n                                    int permissions,\n                                    boolean hideFileDownload,\n                                    String password,\n                                    long expirationTimeInMillis,\n                                    String note,\n                                    String label,\n                                    boolean showLoadingDialog) {\n        if (file != null) {\n            // TODO check capability?\n            if (showLoadingDialog) {\n                fileActivity.showLoadingDialog(fileActivity.getApplicationContext().\n                                                   getString(R.string.wait_a_moment));\n            }\n\n            Intent service = new Intent(fileActivity, OperationsService.class);\n            service.setAction(OperationsService.ACTION_CREATE_SHARE_WITH_SHAREE);\n            service.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount());\n            service.putExtra(OperationsService.EXTRA_REMOTE_PATH, file.getRemotePath());\n            service.putExtra(OperationsService.EXTRA_SHARE_WITH, shareeName);\n            service.putExtra(OperationsService.EXTRA_SHARE_TYPE, shareType);\n            service.putExtra(OperationsService.EXTRA_SHARE_PERMISSIONS, permissions);\n            service.putExtra(OperationsService.EXTRA_SHARE_HIDE_FILE_DOWNLOAD, hideFileDownload);\n            service.putExtra(OperationsService.EXTRA_SHARE_PASSWORD, (password == null) ? \"\" : password);\n            service.putExtra(OperationsService.EXTRA_SHARE_EXPIRATION_DATE_IN_MILLIS, expirationTimeInMillis);\n            service.putExtra(OperationsService.EXTRA_SHARE_NOTE, (note == null) ? \"\" : note);\n            service.putExtra(OperationsService.EXTRA_SHARE_PUBLIC_LABEL, (label == null) ? \"\" : label);\n\n            mWaitingForOpId = fileActivity.getOperationsServiceBinder().queueNewOperation(service);\n\n        } else {\n            Log_OC.e(TAG, \"Trying to share a NULL OCFile\");\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc shareFileWithSharee(file: OCFile?, shareeName: String, shareType: ShareType, permissions: Int, hideFileDownload: Bool, password: String?, expirationTimeInMillis: Int64, note: String?, label: String?, showLoadingDialog: Bool) {\n    if let file = file {\n        // TODO check capability?\n        if showLoadingDialog {\n            fileActivity.showLoadingDialog(fileActivity.applicationContext.getString(R.string.wait_a_moment))\n        }\n\n        let service = Intent(context: fileActivity, serviceClass: OperationsService.self)\n        service.setAction(OperationsService.ACTION_CREATE_SHARE_WITH_SHAREE)\n        service.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount())\n        service.putExtra(OperationsService.EXTRA_REMOTE_PATH, file.getRemotePath())\n        service.putExtra(OperationsService.EXTRA_SHARE_WITH, shareeName)\n        service.putExtra(OperationsService.EXTRA_SHARE_TYPE, shareType)\n        service.putExtra(OperationsService.EXTRA_SHARE_PERMISSIONS, permissions)\n        service.putExtra(OperationsService.EXTRA_SHARE_HIDE_FILE_DOWNLOAD, hideFileDownload)\n        service.putExtra(OperationsService.EXTRA_SHARE_PASSWORD, password ?? \"\")\n        service.putExtra(OperationsService.EXTRA_SHARE_EXPIRATION_DATE_IN_MILLIS, expirationTimeInMillis)\n        service.putExtra(OperationsService.EXTRA_SHARE_NOTE, note ?? \"\")\n        service.putExtra(OperationsService.EXTRA_SHARE_PUBLIC_LABEL, label ?? \"\")\n\n        mWaitingForOpId = fileActivity.getOperationsServiceBinder().queueNewOperation(service)\n    } else {\n        Log_OC.e(TAG, \"Trying to share a NULL OCFile\")\n    }\n}\n```"
    },
    {
        "method_name": "restoreFileVersion",
        "method_code": "ublic void restoreFileVersion(FileVersion fileVersion) {\n        if (fileVersion != null) {\n            fileActivity.showLoadingDialog(fileActivity.getApplicationContext().\n                                               getString(R.string.wait_a_moment));\n\n            Intent service = new Intent(fileActivity, OperationsService.class);\n            service.setAction(OperationsService.ACTION_RESTORE_VERSION);\n            service.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount());\n            service.putExtra(OperationsService.EXTRA_FILE_VERSION, fileVersion);\n            mWaitingForOpId = fileActivity.getOperationsServiceBinder().queueNewOperation(service);\n        } else {\n            Log_OC.e(TAG, \"Trying to restore a NULL FileVersion\");\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled restoreFileVersion from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: restoreFileVersion\n\n        Method Code: ublic void restoreFileVersion(FileVersion fileVersion) {\n        if (fileVersion != null) {\n            fileActivity.showLoadingDialog(fileActivity.getApplicationContext().\n                                               getString(R.string.wait_a_moment));\n\n            Intent service = new Intent(fileActivity, OperationsService.class);\n            service.setAction(OperationsService.ACTION_RESTORE_VERSION);\n            service.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount());\n            service.putExtra(OperationsService.EXTRA_FILE_VERSION, fileVersion);\n            mWaitingForOpId = fileActivity.getOperationsServiceBinder().queueNewOperation(service);\n        } else {\n            Log_OC.e(TAG, \"Trying to restore a NULL FileVersion\");\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc restoreFileVersion(fileVersion: FileVersion?) {\n    if let fileVersion = fileVersion {\n        fileActivity.showLoadingDialog(message: NSLocalizedString(\"wait_a_moment\", comment: \"\"))\n\n        let service = Intent(context: fileActivity, serviceClass: OperationsService.self)\n        service.action = OperationsService.ACTION_RESTORE_VERSION\n        service.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount())\n        service.putExtra(OperationsService.EXTRA_FILE_VERSION, fileVersion)\n        mWaitingForOpId = fileActivity.getOperationsServiceBinder().queueNewOperation(service)\n    } else {\n        Log_OC.e(TAG, \"Trying to restore a NULL FileVersion\")\n    }\n}\n```"
    },
    {
        "method_name": "unshareShare",
        "method_code": "ublic void unshareShare(OCFile file, OCShare share) {\n\n        // Unshare the file: Create the intent\n        Intent unshareService = new Intent(fileActivity, OperationsService.class);\n        unshareService.setAction(OperationsService.ACTION_UNSHARE);\n        unshareService.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount());\n        unshareService.putExtra(OperationsService.EXTRA_REMOTE_PATH, file.getRemotePath());\n        unshareService.putExtra(OperationsService.EXTRA_SHARE_ID, share.getId());\n\n        queueShareIntent(unshareService);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled unshareShare from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: unshareShare\n\n        Method Code: ublic void unshareShare(OCFile file, OCShare share) {\n\n        // Unshare the file: Create the intent\n        Intent unshareService = new Intent(fileActivity, OperationsService.class);\n        unshareService.setAction(OperationsService.ACTION_UNSHARE);\n        unshareService.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount());\n        unshareService.putExtra(OperationsService.EXTRA_REMOTE_PATH, file.getRemotePath());\n        unshareService.putExtra(OperationsService.EXTRA_SHARE_ID, share.getId());\n\n        queueShareIntent(unshareService);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc unshareShare(file: OCFile, share: OCShare) {\n    // Unshare the file: Create the intent\n    let unshareService = Intent(context: fileActivity, serviceClass: OperationsService.self)\n    unshareService.action = OperationsService.ACTION_UNSHARE\n    unshareService.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount())\n    unshareService.putExtra(OperationsService.EXTRA_REMOTE_PATH, file.getRemotePath())\n    unshareService.putExtra(OperationsService.EXTRA_SHARE_ID, share.getId())\n\n    queueShareIntent(unshareService)\n}\n```"
    },
    {
        "method_name": "queueShareIntent",
        "method_code": "rivate void queueShareIntent(Intent shareIntent) {\n        // Unshare the file\n        mWaitingForOpId = fileActivity.getOperationsServiceBinder().queueNewOperation(shareIntent);\n\n        fileActivity.showLoadingDialog(fileActivity.getApplicationContext().getString(R.string.wait_a_moment));\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled queueShareIntent from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: queueShareIntent\n\n        Method Code: rivate void queueShareIntent(Intent shareIntent) {\n        // Unshare the file\n        mWaitingForOpId = fileActivity.getOperationsServiceBinder().queueNewOperation(shareIntent);\n\n        fileActivity.showLoadingDialog(fileActivity.getApplicationContext().getString(R.string.wait_a_moment));\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func queueShareIntent(shareIntent: Intent) {\n    // Unshare the file\n    mWaitingForOpId = fileActivity.getOperationsServiceBinder().queueNewOperation(shareIntent)\n\n    fileActivity.showLoadingDialog(fileActivity.getApplicationContext().getString(R.string.wait_a_moment))\n}\n```"
    },
    {
        "method_name": "showShareFile",
        "method_code": "ublic void showShareFile(OCFile file) {\n        Intent intent = new Intent(fileActivity, ShareActivity.class);\n        intent.putExtra(FileActivity.EXTRA_FILE, file);\n        intent.putExtra(FileActivity.EXTRA_USER, fileActivity.getUser().orElseThrow(RuntimeException::new));\n        fileActivity.startActivity(intent);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled showShareFile from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: showShareFile\n\n        Method Code: ublic void showShareFile(OCFile file) {\n        Intent intent = new Intent(fileActivity, ShareActivity.class);\n        intent.putExtra(FileActivity.EXTRA_FILE, file);\n        intent.putExtra(FileActivity.EXTRA_USER, fileActivity.getUser().orElseThrow(RuntimeException::new));\n        fileActivity.startActivity(intent);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc showShareFile(file: OCFile) {\n    let intent = Intent(context: fileActivity, target: ShareActivity.self)\n    intent.putExtra(FileActivity.EXTRA_FILE, file)\n    intent.putExtra(FileActivity.EXTRA_USER, fileActivity.getUser() ?? { fatalError() }())\n    fileActivity.startActivity(intent)\n}\n```"
    },
    {
        "method_name": "setLabelToPublicShare",
        "method_code": "ublic void setLabelToPublicShare(OCShare share, String label) {\n        // Set password updating share\n        Intent updateShareIntent = new Intent(fileActivity, OperationsService.class);\n        updateShareIntent.setAction(OperationsService.ACTION_UPDATE_PUBLIC_SHARE);\n        updateShareIntent.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount());\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_ID, share.getId());\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_PUBLIC_LABEL, (label == null) ? \"\" : label);\n\n        queueShareIntent(updateShareIntent);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setLabelToPublicShare from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: setLabelToPublicShare\n\n        Method Code: ublic void setLabelToPublicShare(OCShare share, String label) {\n        // Set password updating share\n        Intent updateShareIntent = new Intent(fileActivity, OperationsService.class);\n        updateShareIntent.setAction(OperationsService.ACTION_UPDATE_PUBLIC_SHARE);\n        updateShareIntent.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount());\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_ID, share.getId());\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_PUBLIC_LABEL, (label == null) ? \"\" : label);\n\n        queueShareIntent(updateShareIntent);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setLabelToPublicShare(share: OCShare, label: String?) {\n    let updateShareIntent = Intent(context: fileActivity, service: OperationsService.self)\n    updateShareIntent.action = OperationsService.ACTION_UPDATE_PUBLIC_SHARE\n    updateShareIntent.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount())\n    updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_ID, share.getId())\n    updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_PUBLIC_LABEL, label ?? \"\")\n\n    queueShareIntent(updateShareIntent)\n}\n```"
    },
    {
        "method_name": "setPasswordToShare",
        "method_code": "ublic void setPasswordToShare(OCShare share, String password) {\n        Intent updateShareIntent = new Intent(fileActivity, OperationsService.class);\n        if (TextUtils.isEmpty(share.getShareLink())) {\n            updateShareIntent.setAction(OperationsService.ACTION_UPDATE_USER_SHARE);\n        } else {\n            updateShareIntent.setAction(OperationsService.ACTION_UPDATE_PUBLIC_SHARE);\n        }\n        updateShareIntent.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount());\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_ID, share.getId());\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_PASSWORD, (password == null) ? \"\" : password);\n        queueShareIntent(updateShareIntent);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setPasswordToShare from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: setPasswordToShare\n\n        Method Code: ublic void setPasswordToShare(OCShare share, String password) {\n        Intent updateShareIntent = new Intent(fileActivity, OperationsService.class);\n        if (TextUtils.isEmpty(share.getShareLink())) {\n            updateShareIntent.setAction(OperationsService.ACTION_UPDATE_USER_SHARE);\n        } else {\n            updateShareIntent.setAction(OperationsService.ACTION_UPDATE_PUBLIC_SHARE);\n        }\n        updateShareIntent.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount());\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_ID, share.getId());\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_PASSWORD, (password == null) ? \"\" : password);\n        queueShareIntent(updateShareIntent);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setPasswordToShare(share: OCShare, password: String?) {\n    let updateShareIntent = Intent(fileActivity: fileActivity, serviceClass: OperationsService.self)\n    if share.getShareLink().isEmpty {\n        updateShareIntent.setAction(OperationsService.ACTION_UPDATE_USER_SHARE)\n    } else {\n        updateShareIntent.setAction(OperationsService.ACTION_UPDATE_PUBLIC_SHARE)\n    }\n    updateShareIntent.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount())\n    updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_ID, share.getId())\n    updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_PASSWORD, password ?? \"\")\n    queueShareIntent(updateShareIntent)\n}\n```"
    },
    {
        "method_name": "setExpirationDateToShare",
        "method_code": "ublic void setExpirationDateToShare(OCShare share, long expirationTimeInMillis) {\n        Intent updateShareIntent = new Intent(fileActivity, OperationsService.class);\n        updateShareIntent.setAction(OperationsService.ACTION_UPDATE_USER_SHARE);\n        updateShareIntent.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount());\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_ID, share.getId());\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_EXPIRATION_DATE_IN_MILLIS, expirationTimeInMillis);\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_PERMISSIONS, 0);\n        queueShareIntent(updateShareIntent);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setExpirationDateToShare from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: setExpirationDateToShare\n\n        Method Code: ublic void setExpirationDateToShare(OCShare share, long expirationTimeInMillis) {\n        Intent updateShareIntent = new Intent(fileActivity, OperationsService.class);\n        updateShareIntent.setAction(OperationsService.ACTION_UPDATE_USER_SHARE);\n        updateShareIntent.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount());\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_ID, share.getId());\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_EXPIRATION_DATE_IN_MILLIS, expirationTimeInMillis);\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_PERMISSIONS, 0);\n        queueShareIntent(updateShareIntent);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setExpirationDateToShare(share: OCShare, expirationTimeInMillis: Int64) {\n    let updateShareIntent = Intent(context: fileActivity, service: OperationsService.self)\n    updateShareIntent.action = OperationsService.ACTION_UPDATE_USER_SHARE\n    updateShareIntent.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount())\n    updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_ID, share.getId())\n    updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_EXPIRATION_DATE_IN_MILLIS, expirationTimeInMillis)\n    updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_PERMISSIONS, 0)\n    queueShareIntent(updateShareIntent)\n}\n```"
    },
    {
        "method_name": "setPermissionsToShare",
        "method_code": "ublic void setPermissionsToShare(OCShare share, int permissions) {\n        Intent updateShareIntent = new Intent(fileActivity, OperationsService.class);\n        updateShareIntent.setAction(OperationsService.ACTION_UPDATE_USER_SHARE);\n        updateShareIntent.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount());\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_ID, share.getId());\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_PERMISSIONS, permissions);\n        queueShareIntent(updateShareIntent);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setPermissionsToShare from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: setPermissionsToShare\n\n        Method Code: ublic void setPermissionsToShare(OCShare share, int permissions) {\n        Intent updateShareIntent = new Intent(fileActivity, OperationsService.class);\n        updateShareIntent.setAction(OperationsService.ACTION_UPDATE_USER_SHARE);\n        updateShareIntent.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount());\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_ID, share.getId());\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_PERMISSIONS, permissions);\n        queueShareIntent(updateShareIntent);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setPermissionsToShare(share: OCShare, permissions: Int) {\n    let updateShareIntent = Intent(context: fileActivity, service: OperationsService.self)\n    updateShareIntent.action = OperationsService.ACTION_UPDATE_USER_SHARE\n    updateShareIntent.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount())\n    updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_ID, share.getId())\n    updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_PERMISSIONS, permissions)\n    queueShareIntent(updateShareIntent)\n}\n```"
    },
    {
        "method_name": "setUploadPermissionsToPublicShare",
        "method_code": "ublic void setUploadPermissionsToPublicShare(OCShare share, boolean uploadPermission) {\n        Intent updateShareIntent = new Intent(fileActivity, OperationsService.class);\n        updateShareIntent.setAction(OperationsService.ACTION_UPDATE_USER_SHARE);\n        updateShareIntent.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount());\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_ID, share.getId());\n        if (uploadPermission) {\n            updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_PERMISSIONS, 3);\n        } else {\n            updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_PERMISSIONS, 1);\n        }\n\n        queueShareIntent(updateShareIntent);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setUploadPermissionsToPublicShare from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: setUploadPermissionsToPublicShare\n\n        Method Code: ublic void setUploadPermissionsToPublicShare(OCShare share, boolean uploadPermission) {\n        Intent updateShareIntent = new Intent(fileActivity, OperationsService.class);\n        updateShareIntent.setAction(OperationsService.ACTION_UPDATE_USER_SHARE);\n        updateShareIntent.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount());\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_ID, share.getId());\n        if (uploadPermission) {\n            updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_PERMISSIONS, 3);\n        } else {\n            updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_PERMISSIONS, 1);\n        }\n\n        queueShareIntent(updateShareIntent);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setUploadPermissionsToPublicShare(share: OCShare, uploadPermission: Bool) {\n    let updateShareIntent = Intent(context: fileActivity, service: OperationsService.self)\n    updateShareIntent.action = OperationsService.ACTION_UPDATE_USER_SHARE\n    updateShareIntent.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount())\n    updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_ID, share.getId())\n    if uploadPermission {\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_PERMISSIONS, 3)\n    } else {\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_PERMISSIONS, 1)\n    }\n    \n    queueShareIntent(updateShareIntent)\n}\n```"
    },
    {
        "method_name": "setHideFileDownloadPermissionsToPublicShare",
        "method_code": "ublic void setHideFileDownloadPermissionsToPublicShare(OCShare share, boolean hideFileDownload) {\n        Intent updateShareIntent = new Intent(fileActivity, OperationsService.class);\n        updateShareIntent.setAction(OperationsService.ACTION_UPDATE_PUBLIC_SHARE);\n        updateShareIntent.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount());\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_ID, share.getId());\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_HIDE_FILE_DOWNLOAD, hideFileDownload);\n\n        queueShareIntent(updateShareIntent);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setHideFileDownloadPermissionsToPublicShare from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: setHideFileDownloadPermissionsToPublicShare\n\n        Method Code: ublic void setHideFileDownloadPermissionsToPublicShare(OCShare share, boolean hideFileDownload) {\n        Intent updateShareIntent = new Intent(fileActivity, OperationsService.class);\n        updateShareIntent.setAction(OperationsService.ACTION_UPDATE_PUBLIC_SHARE);\n        updateShareIntent.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount());\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_ID, share.getId());\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_HIDE_FILE_DOWNLOAD, hideFileDownload);\n\n        queueShareIntent(updateShareIntent);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setHideFileDownloadPermissionsToPublicShare(share: OCShare, hideFileDownload: Bool) {\n    let updateShareIntent = Intent(context: fileActivity, service: OperationsService.self)\n    updateShareIntent.action = OperationsService.ACTION_UPDATE_PUBLIC_SHARE\n    updateShareIntent.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount())\n    updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_ID, share.getId())\n    updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_HIDE_FILE_DOWNLOAD, hideFileDownload)\n\n    queueShareIntent(updateShareIntent)\n}\n```"
    },
    {
        "method_name": "updateNoteToShare",
        "method_code": "ublic void updateNoteToShare(OCShare share, String note) {\n        Intent updateShareIntent = new Intent(fileActivity, OperationsService.class);\n        updateShareIntent.setAction(OperationsService.ACTION_UPDATE_SHARE_NOTE);\n        updateShareIntent.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount());\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_ID, share.getId());\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_NOTE, note);\n\n        queueShareIntent(updateShareIntent);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled updateNoteToShare from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: updateNoteToShare\n\n        Method Code: ublic void updateNoteToShare(OCShare share, String note) {\n        Intent updateShareIntent = new Intent(fileActivity, OperationsService.class);\n        updateShareIntent.setAction(OperationsService.ACTION_UPDATE_SHARE_NOTE);\n        updateShareIntent.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount());\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_ID, share.getId());\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_NOTE, note);\n\n        queueShareIntent(updateShareIntent);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc updateNoteToShare(share: OCShare, note: String) {\n    let updateShareIntent = Intent(fileActivity: fileActivity, serviceClass: OperationsService.self)\n    updateShareIntent.action = OperationsService.ACTION_UPDATE_SHARE_NOTE\n    updateShareIntent.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount())\n    updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_ID, share.getId())\n    updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_NOTE, note)\n\n    queueShareIntent(updateShareIntent)\n}\n```"
    },
    {
        "method_name": "updateShareInformation",
        "method_code": "ublic void updateShareInformation(OCShare share, int permissions,\n                                       boolean hideFileDownload, String password, long expirationTimeInMillis,\n                                       String label) {\n        Intent updateShareIntent = new Intent(fileActivity, OperationsService.class);\n        updateShareIntent.setAction(OperationsService.ACTION_UPDATE_SHARE_INFO);\n        updateShareIntent.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount());\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_ID, share.getId());\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_PERMISSIONS, permissions);\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_HIDE_FILE_DOWNLOAD, hideFileDownload);\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_PASSWORD, (password == null) ? \"\" : password);\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_EXPIRATION_DATE_IN_MILLIS, expirationTimeInMillis);\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_PUBLIC_LABEL, (label == null) ? \"\" : label);\n        queueShareIntent(updateShareIntent);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled updateShareInformation from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: updateShareInformation\n\n        Method Code: ublic void updateShareInformation(OCShare share, int permissions,\n                                       boolean hideFileDownload, String password, long expirationTimeInMillis,\n                                       String label) {\n        Intent updateShareIntent = new Intent(fileActivity, OperationsService.class);\n        updateShareIntent.setAction(OperationsService.ACTION_UPDATE_SHARE_INFO);\n        updateShareIntent.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount());\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_ID, share.getId());\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_PERMISSIONS, permissions);\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_HIDE_FILE_DOWNLOAD, hideFileDownload);\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_PASSWORD, (password == null) ? \"\" : password);\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_EXPIRATION_DATE_IN_MILLIS, expirationTimeInMillis);\n        updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_PUBLIC_LABEL, (label == null) ? \"\" : label);\n        queueShareIntent(updateShareIntent);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc updateShareInformation(share: OCShare, permissions: Int, hideFileDownload: Bool, password: String?, expirationTimeInMillis: Int64, label: String?) {\n    let updateShareIntent = Intent(fileActivity: fileActivity, serviceClass: OperationsService.self)\n    updateShareIntent.action = OperationsService.ACTION_UPDATE_SHARE_INFO\n    updateShareIntent.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount())\n    updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_ID, share.getId())\n    updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_PERMISSIONS, permissions)\n    updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_HIDE_FILE_DOWNLOAD, hideFileDownload)\n    updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_PASSWORD, password ?? \"\")\n    updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_EXPIRATION_DATE_IN_MILLIS, expirationTimeInMillis)\n    updateShareIntent.putExtra(OperationsService.EXTRA_SHARE_PUBLIC_LABEL, label ?? \"\")\n    queueShareIntent(updateShareIntent)\n}\n```"
    },
    {
        "method_name": "sendShareFile",
        "method_code": "ublic void sendShareFile(OCFile file, boolean hideNcSharingOptions) {\n        // Show dialog\n        FragmentManager fm = fileActivity.getSupportFragmentManager();\n        FragmentTransaction ft = fm.beginTransaction();\n        ft.addToBackStack(null);\n\n        OCCapability capability = fileActivity.getStorageManager().getCapability(fileActivity.getAccount().name);\n        SendShareDialog mSendShareDialog = SendShareDialog.newInstance(file, hideNcSharingOptions, capability);\n        mSendShareDialog.setFileOperationsHelper(this);\n        if (fm.findFragmentByTag(\"TAG_SEND_SHARE_DIALOG\") == null) {\n            mSendShareDialog.show(ft, \"TAG_SEND_SHARE_DIALOG\");\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled sendShareFile from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: sendShareFile\n\n        Method Code: ublic void sendShareFile(OCFile file, boolean hideNcSharingOptions) {\n        // Show dialog\n        FragmentManager fm = fileActivity.getSupportFragmentManager();\n        FragmentTransaction ft = fm.beginTransaction();\n        ft.addToBackStack(null);\n\n        OCCapability capability = fileActivity.getStorageManager().getCapability(fileActivity.getAccount().name);\n        SendShareDialog mSendShareDialog = SendShareDialog.newInstance(file, hideNcSharingOptions, capability);\n        mSendShareDialog.setFileOperationsHelper(this);\n        if (fm.findFragmentByTag(\"TAG_SEND_SHARE_DIALOG\") == null) {\n            mSendShareDialog.show(ft, \"TAG_SEND_SHARE_DIALOG\");\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc sendShareFile(file: OCFile, hideNcSharingOptions: Bool) {\n    // Show dialog\n    let fm = fileActivity.supportFragmentManager\n    let ft = fm.beginTransaction()\n    ft.addToBackStack(nil)\n\n    let capability = fileActivity.storageManager.getCapability(fileActivity.account.name)\n    let mSendShareDialog = SendShareDialog.newInstance(file: file, hideNcSharingOptions: hideNcSharingOptions, capability: capability)\n    mSendShareDialog.setFileOperationsHelper(self)\n    if fm.findFragment(byTag: \"TAG_SEND_SHARE_DIALOG\") == nil {\n        mSendShareDialog.show(ft, tag: \"TAG_SEND_SHARE_DIALOG\")\n    }\n}\n```"
    },
    {
        "method_name": "sendFiles",
        "method_code": "ublic void sendFiles(Set<OCFile> files) {\n        // Show dialog\n        FragmentManager fm = fileActivity.getSupportFragmentManager();\n        FragmentTransaction ft = fm.beginTransaction();\n        ft.addToBackStack(null);\n\n        SendFilesDialog sendFilesDialog = SendFilesDialog.Companion.newInstance(files);\n        sendFilesDialog.show(ft, \"TAG_SEND_SHARE_DIALOG\");\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled sendFiles from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: sendFiles\n\n        Method Code: ublic void sendFiles(Set<OCFile> files) {\n        // Show dialog\n        FragmentManager fm = fileActivity.getSupportFragmentManager();\n        FragmentTransaction ft = fm.beginTransaction();\n        ft.addToBackStack(null);\n\n        SendFilesDialog sendFilesDialog = SendFilesDialog.Companion.newInstance(files);\n        sendFilesDialog.show(ft, \"TAG_SEND_SHARE_DIALOG\");\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc sendFiles(files: Set<OCFile>) {\n    // Show dialog\n    let fm = fileActivity.supportFragmentManager\n    let ft = fm.beginTransaction()\n    ft.addToBackStack(nil)\n\n    let sendFilesDialog = SendFilesDialog.newInstance(files: files)\n    sendFilesDialog.show(ft, tag: \"TAG_SEND_SHARE_DIALOG\")\n}\n```"
    },
    {
        "method_name": "sendShareFile",
        "method_code": "ublic void sendShareFile(OCFile file) {\n        sendShareFile(file, !file.canReshare());\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled sendShareFile from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: sendShareFile\n\n        Method Code: ublic void sendShareFile(OCFile file) {\n        sendShareFile(file, !file.canReshare());\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc sendShareFile(file: OCFile) {\n    sendShareFile(file: file, !file.canReshare())\n}\n```"
    },
    {
        "method_name": "sendCachedImage",
        "method_code": "ublic void sendCachedImage(OCFile file, String packageName, String activityName) {\n        if (file != null) {\n            Context context = MainApp.getAppContext();\n            Intent sendIntent = new Intent(Intent.ACTION_SEND);\n            // set MimeType\n            sendIntent.setType(file.getMimeType());\n            sendIntent.setComponent(new ComponentName(packageName, activityName));\n            sendIntent.putExtra(Intent.EXTRA_STREAM, Uri.parse(\"content://\" +\n                                                                   context.getResources().getString(R.string.image_cache_provider_authority) +\n                                                                   file.getRemotePath()));\n            sendIntent.putExtra(Intent.ACTION_SEND, true);      // Send Action\n            sendIntent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n\n            fileActivity.startActivity(Intent.createChooser(sendIntent,\n                                                            context.getString(R.string.actionbar_send_file)));\n        } else {\n            Log_OC.wtf(TAG, \"Trying to send a NULL OCFile\");\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled sendCachedImage from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: sendCachedImage\n\n        Method Code: ublic void sendCachedImage(OCFile file, String packageName, String activityName) {\n        if (file != null) {\n            Context context = MainApp.getAppContext();\n            Intent sendIntent = new Intent(Intent.ACTION_SEND);\n            // set MimeType\n            sendIntent.setType(file.getMimeType());\n            sendIntent.setComponent(new ComponentName(packageName, activityName));\n            sendIntent.putExtra(Intent.EXTRA_STREAM, Uri.parse(\"content://\" +\n                                                                   context.getResources().getString(R.string.image_cache_provider_authority) +\n                                                                   file.getRemotePath()));\n            sendIntent.putExtra(Intent.ACTION_SEND, true);      // Send Action\n            sendIntent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n\n            fileActivity.startActivity(Intent.createChooser(sendIntent,\n                                                            context.getString(R.string.actionbar_send_file)));\n        } else {\n            Log_OC.wtf(TAG, \"Trying to send a NULL OCFile\");\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc sendCachedImage(file: OCFile?, packageName: String, activityName: String) {\n    if let file = file {\n        let context = MainApp.getAppContext()\n        let sendIntent = UIActivityViewController(activityItems: [], applicationActivities: nil)\n        \n        // Set MimeType\n        sendIntent.setValue(file.getMimeType(), forKey: \"mimeType\")\n        \n        let uriString = \"content://\" + (context.resources.getString(R.string.image_cache_provider_authority) ?? \"\") + file.getRemotePath()\n        if let uri = URL(string: uriString) {\n            sendIntent.setValue(uri, forKey: \"url\")\n        }\n        \n        sendIntent.setValue(true, forKey: \"actionSend\")\n        \n        // Present the activity view controller\n        fileActivity.present(sendIntent, animated: true, completion: nil)\n    } else {\n        Log_OC.wtf(TAG, \"Trying to send a NULL OCFile\")\n    }\n}\n```"
    },
    {
        "method_name": "setPictureAs",
        "method_code": "ublic void setPictureAs(OCFile file, View view) {\n        if (file != null) {\n            Context context = MainApp.getAppContext();\n            Intent intent = new Intent(Intent.ACTION_ATTACH_DATA);\n            Uri uri;\n\n            try {\n                if (file.isDown()) {\n                    File externalFile = new File(file.getStoragePath());\n\n                    intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n                    uri = FileProvider.getUriForFile(context,\n                                                     context.getResources().getString(R.string.file_provider_authority), externalFile);\n                } else {\n                    uri = Uri.parse(UriUtils.URI_CONTENT_SCHEME +\n                                        context.getResources().getString(R.string.image_cache_provider_authority) +\n                                        file.getRemotePath());\n                }\n\n                intent.setDataAndType(uri, file.getMimeType());\n                intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n                fileActivity.startActivityForResult(Intent.createChooser(intent,\n                                                                         fileActivity.getString(R.string.set_as)),\n                                                    200);\n\n                intent.setDataAndType(uri, file.getMimeType());\n            } catch (ActivityNotFoundException exception) {\n                DisplayUtils.showSnackMessage(view, R.string.picture_set_as_no_app);\n            }\n        } else {\n            Log_OC.wtf(TAG, \"Trying to send a NULL OCFile\");\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setPictureAs from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: setPictureAs\n\n        Method Code: ublic void setPictureAs(OCFile file, View view) {\n        if (file != null) {\n            Context context = MainApp.getAppContext();\n            Intent intent = new Intent(Intent.ACTION_ATTACH_DATA);\n            Uri uri;\n\n            try {\n                if (file.isDown()) {\n                    File externalFile = new File(file.getStoragePath());\n\n                    intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n                    uri = FileProvider.getUriForFile(context,\n                                                     context.getResources().getString(R.string.file_provider_authority), externalFile);\n                } else {\n                    uri = Uri.parse(UriUtils.URI_CONTENT_SCHEME +\n                                        context.getResources().getString(R.string.image_cache_provider_authority) +\n                                        file.getRemotePath());\n                }\n\n                intent.setDataAndType(uri, file.getMimeType());\n                intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n                fileActivity.startActivityForResult(Intent.createChooser(intent,\n                                                                         fileActivity.getString(R.string.set_as)),\n                                                    200);\n\n                intent.setDataAndType(uri, file.getMimeType());\n            } catch (ActivityNotFoundException exception) {\n                DisplayUtils.showSnackMessage(view, R.string.picture_set_as_no_app);\n            }\n        } else {\n            Log_OC.wtf(TAG, \"Trying to send a NULL OCFile\");\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setPictureAs(file: OCFile?, view: UIView) {\n    guard let file = file else {\n        print(\"Trying to send a NULL OCFile\")\n        return\n    }\n    \n    let context = MainApp.getAppContext()\n    let intent = UIActivityViewController(activityItems: [], applicationActivities: nil)\n    var uri: URL?\n    \n    do {\n        if file.isDown() {\n            let externalFile = URL(fileURLWithPath: file.getStoragePath())\n            uri = FileProvider.getUriForFile(context: context, authority: context.resources.getString(R.string.file_provider_authority), file: externalFile)\n        } else {\n            uri = URL(string: UriUtils.URI_CONTENT_SCHEME + context.resources.getString(R.string.image_cache_provider_authority) + file.getRemotePath())\n        }\n        \n        if let uri = uri {\n            intent.activityItems = [uri]\n            intent.excludedActivityTypes = [.assignToContact]\n            fileActivity.present(intent, animated: true, completion: nil)\n        }\n    } catch {\n        DisplayUtils.showSnackMessage(view: view, message: R.string.picture_set_as_no_app)\n    }\n}\n```"
    },
    {
        "method_name": "syncFile",
        "method_code": "ublic void syncFile(OCFile file) {\n        if (!file.isFolder()) {\n            Intent intent = new Intent(fileActivity, OperationsService.class);\n            intent.setAction(OperationsService.ACTION_SYNC_FILE);\n            intent.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount());\n            intent.putExtra(OperationsService.EXTRA_REMOTE_PATH, file.getRemotePath());\n            intent.putExtra(OperationsService.EXTRA_SYNC_FILE_CONTENTS, true);\n            mWaitingForOpId = fileActivity.getOperationsServiceBinder().queueNewOperation(intent);\n            fileActivity.showLoadingDialog(fileActivity.getApplicationContext().\n                                               getString(R.string.wait_a_moment));\n\n        } else {\n            Intent intent = new Intent(fileActivity, OperationsService.class);\n            intent.setAction(OperationsService.ACTION_SYNC_FOLDER);\n            intent.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount());\n            intent.putExtra(OperationsService.EXTRA_REMOTE_PATH, file.getRemotePath());\n            fileActivity.startService(intent);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled syncFile from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: syncFile\n\n        Method Code: ublic void syncFile(OCFile file) {\n        if (!file.isFolder()) {\n            Intent intent = new Intent(fileActivity, OperationsService.class);\n            intent.setAction(OperationsService.ACTION_SYNC_FILE);\n            intent.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount());\n            intent.putExtra(OperationsService.EXTRA_REMOTE_PATH, file.getRemotePath());\n            intent.putExtra(OperationsService.EXTRA_SYNC_FILE_CONTENTS, true);\n            mWaitingForOpId = fileActivity.getOperationsServiceBinder().queueNewOperation(intent);\n            fileActivity.showLoadingDialog(fileActivity.getApplicationContext().\n                                               getString(R.string.wait_a_moment));\n\n        } else {\n            Intent intent = new Intent(fileActivity, OperationsService.class);\n            intent.setAction(OperationsService.ACTION_SYNC_FOLDER);\n            intent.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount());\n            intent.putExtra(OperationsService.EXTRA_REMOTE_PATH, file.getRemotePath());\n            fileActivity.startService(intent);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc syncFile(file: OCFile) {\n    if !file.isFolder() {\n        let intent = Intent(context: fileActivity, service: OperationsService.self)\n        intent.setAction(OperationsService.ACTION_SYNC_FILE)\n        intent.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount())\n        intent.putExtra(OperationsService.EXTRA_REMOTE_PATH, file.getRemotePath())\n        intent.putExtra(OperationsService.EXTRA_SYNC_FILE_CONTENTS, true)\n        mWaitingForOpId = fileActivity.getOperationsServiceBinder().queueNewOperation(intent)\n        fileActivity.showLoadingDialog(fileActivity.getApplicationContext().getString(R.string.wait_a_moment))\n    } else {\n        let intent = Intent(context: fileActivity, service: OperationsService.self)\n        intent.setAction(OperationsService.ACTION_SYNC_FOLDER)\n        intent.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount())\n        intent.putExtra(OperationsService.EXTRA_REMOTE_PATH, file.getRemotePath())\n        fileActivity.startService(intent)\n    }\n}\n```"
    },
    {
        "method_name": "toggleFavoriteFiles",
        "method_code": "ublic void toggleFavoriteFiles(Collection<OCFile> files, boolean shouldBeFavorite) {\n        List<OCFile> toToggle = new ArrayList<>();\n        for (OCFile file : files) {\n            if (file.isFavorite() != shouldBeFavorite) {\n                toToggle.add(file);\n            }\n        }\n\n        for (OCFile file : toToggle) {\n            toggleFavoriteFile(file, shouldBeFavorite);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled toggleFavoriteFiles from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: toggleFavoriteFiles\n\n        Method Code: ublic void toggleFavoriteFiles(Collection<OCFile> files, boolean shouldBeFavorite) {\n        List<OCFile> toToggle = new ArrayList<>();\n        for (OCFile file : files) {\n            if (file.isFavorite() != shouldBeFavorite) {\n                toToggle.add(file);\n            }\n        }\n\n        for (OCFile file : toToggle) {\n            toggleFavoriteFile(file, shouldBeFavorite);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc toggleFavoriteFiles(files: [OCFile], shouldBeFavorite: Bool) {\n    var toToggle: [OCFile] = []\n    for file in files {\n        if file.isFavorite() != shouldBeFavorite {\n            toToggle.append(file)\n        }\n    }\n\n    for file in toToggle {\n        toggleFavoriteFile(file: file, shouldBeFavorite: shouldBeFavorite)\n    }\n}\n```"
    },
    {
        "method_name": "toggleFavoriteFile",
        "method_code": "ublic void toggleFavoriteFile(OCFile file, boolean shouldBeFavorite) {\n        if (file.isFavorite() != shouldBeFavorite) {\n            EventBus.getDefault().post(new FavoriteEvent(file.getRemotePath(), shouldBeFavorite));\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled toggleFavoriteFile from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: toggleFavoriteFile\n\n        Method Code: ublic void toggleFavoriteFile(OCFile file, boolean shouldBeFavorite) {\n        if (file.isFavorite() != shouldBeFavorite) {\n            EventBus.getDefault().post(new FavoriteEvent(file.getRemotePath(), shouldBeFavorite));\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc toggleFavoriteFile(file: OCFile, shouldBeFavorite: Bool) {\n    if file.isFavorite() != shouldBeFavorite {\n        EventBus.default.post(FavoriteEvent(remotePath: file.remotePath, shouldBeFavorite: shouldBeFavorite))\n    }\n}\n```"
    },
    {
        "method_name": "toggleEncryption",
        "method_code": "ublic void toggleEncryption(OCFile file, boolean shouldBeEncrypted) {\n        if (file.isEncrypted() != shouldBeEncrypted) {\n            EventBus.getDefault().post(new EncryptionEvent(file.getLocalId(),\n                                                           file.getRemoteId(),\n                                                           file.getRemotePath(),\n                                                           shouldBeEncrypted));\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled toggleEncryption from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: toggleEncryption\n\n        Method Code: ublic void toggleEncryption(OCFile file, boolean shouldBeEncrypted) {\n        if (file.isEncrypted() != shouldBeEncrypted) {\n            EventBus.getDefault().post(new EncryptionEvent(file.getLocalId(),\n                                                           file.getRemoteId(),\n                                                           file.getRemotePath(),\n                                                           shouldBeEncrypted));\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc toggleEncryption(file: OCFile, shouldBeEncrypted: Bool) {\n    if file.isEncrypted() != shouldBeEncrypted {\n        EventBus.default.post(EncryptionEvent(localId: file.localId,\n                                              remoteId: file.remoteId,\n                                              remotePath: file.remotePath,\n                                              shouldBeEncrypted: shouldBeEncrypted))\n    }\n}\n```"
    },
    {
        "method_name": "toggleFileLock",
        "method_code": "ublic void toggleFileLock(OCFile file, boolean shouldBeLocked) {\n        if (file.isLocked() != shouldBeLocked) {\n            EventBus.getDefault().post(new FileLockEvent(file.getRemotePath(), shouldBeLocked));\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled toggleFileLock from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: toggleFileLock\n\n        Method Code: ublic void toggleFileLock(OCFile file, boolean shouldBeLocked) {\n        if (file.isLocked() != shouldBeLocked) {\n            EventBus.getDefault().post(new FileLockEvent(file.getRemotePath(), shouldBeLocked));\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc toggleFileLock(file: OCFile, shouldBeLocked: Bool) {\n    if file.isLocked() != shouldBeLocked {\n        EventBus.default.post(FileLockEvent(remotePath: file.getRemotePath(), shouldBeLocked: shouldBeLocked))\n    }\n}\n```"
    },
    {
        "method_name": "renameFile",
        "method_code": "ublic void renameFile(OCFile file, String newFilename) {\n        Intent service = new Intent(fileActivity, OperationsService.class);\n\n        service.setAction(OperationsService.ACTION_RENAME);\n        service.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount());\n        service.putExtra(OperationsService.EXTRA_REMOTE_PATH, file.getRemotePath());\n        service.putExtra(OperationsService.EXTRA_NEWNAME, newFilename);\n        mWaitingForOpId = fileActivity.getOperationsServiceBinder().queueNewOperation(service);\n\n        fileActivity.refreshList();\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled renameFile from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: renameFile\n\n        Method Code: ublic void renameFile(OCFile file, String newFilename) {\n        Intent service = new Intent(fileActivity, OperationsService.class);\n\n        service.setAction(OperationsService.ACTION_RENAME);\n        service.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount());\n        service.putExtra(OperationsService.EXTRA_REMOTE_PATH, file.getRemotePath());\n        service.putExtra(OperationsService.EXTRA_NEWNAME, newFilename);\n        mWaitingForOpId = fileActivity.getOperationsServiceBinder().queueNewOperation(service);\n\n        fileActivity.refreshList();\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc renameFile(file: OCFile, newFilename: String) {\n    let service = Intent(context: fileActivity, serviceClass: OperationsService.self)\n    \n    service.setAction(OperationsService.ACTION_RENAME)\n    service.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount())\n    service.putExtra(OperationsService.EXTRA_REMOTE_PATH, file.getRemotePath())\n    service.putExtra(OperationsService.EXTRA_NEWNAME, newFilename)\n    mWaitingForOpId = fileActivity.getOperationsServiceBinder().queueNewOperation(service)\n    \n    fileActivity.refreshList()\n}\n```"
    },
    {
        "method_name": "removeFiles",
        "method_code": "ublic void removeFiles(Collection<OCFile> files, boolean onlyLocalCopy, boolean inBackground) {\n        for (OCFile file : files) {\n            // RemoveFile\n            Intent service = new Intent(fileActivity, OperationsService.class);\n            service.setAction(OperationsService.ACTION_REMOVE);\n            service.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount());\n            service.putExtra(OperationsService.EXTRA_FILE, file);\n            service.putExtra(OperationsService.EXTRA_REMOVE_ONLY_LOCAL, onlyLocalCopy);\n            service.putExtra(OperationsService.EXTRA_IN_BACKGROUND, inBackground);\n            mWaitingForOpId = fileActivity.getOperationsServiceBinder().queueNewOperation(service);\n        }\n\n        if (!inBackground) {\n            fileActivity.showLoadingDialog(fileActivity.getString(R.string.wait_a_moment));\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled removeFiles from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: removeFiles\n\n        Method Code: ublic void removeFiles(Collection<OCFile> files, boolean onlyLocalCopy, boolean inBackground) {\n        for (OCFile file : files) {\n            // RemoveFile\n            Intent service = new Intent(fileActivity, OperationsService.class);\n            service.setAction(OperationsService.ACTION_REMOVE);\n            service.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount());\n            service.putExtra(OperationsService.EXTRA_FILE, file);\n            service.putExtra(OperationsService.EXTRA_REMOVE_ONLY_LOCAL, onlyLocalCopy);\n            service.putExtra(OperationsService.EXTRA_IN_BACKGROUND, inBackground);\n            mWaitingForOpId = fileActivity.getOperationsServiceBinder().queueNewOperation(service);\n        }\n\n        if (!inBackground) {\n            fileActivity.showLoadingDialog(fileActivity.getString(R.string.wait_a_moment));\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc removeFiles(files: [OCFile], onlyLocalCopy: Bool, inBackground: Bool) {\n    for file in files {\n        let service = Intent(context: fileActivity, OperationsService.self)\n        service.setAction(OperationsService.ACTION_REMOVE)\n        service.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount())\n        service.putExtra(OperationsService.EXTRA_FILE, file)\n        service.putExtra(OperationsService.EXTRA_REMOVE_ONLY_LOCAL, onlyLocalCopy)\n        service.putExtra(OperationsService.EXTRA_IN_BACKGROUND, inBackground)\n        mWaitingForOpId = fileActivity.getOperationsServiceBinder().queueNewOperation(service)\n    }\n\n    if !inBackground {\n        fileActivity.showLoadingDialog(fileActivity.getString(R.string.wait_a_moment))\n    }\n}\n```"
    },
    {
        "method_name": "createFolder",
        "method_code": "ublic void createFolder(String remotePath) {\n        // Create Folder\n        Intent service = new Intent(fileActivity, OperationsService.class);\n        service.setAction(OperationsService.ACTION_CREATE_FOLDER);\n        service.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount());\n        service.putExtra(OperationsService.EXTRA_REMOTE_PATH, remotePath);\n        mWaitingForOpId = fileActivity.getOperationsServiceBinder().queueNewOperation(service);\n\n        fileActivity.showLoadingDialog(fileActivity.getString(R.string.wait_a_moment));\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled createFolder from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: createFolder\n\n        Method Code: ublic void createFolder(String remotePath) {\n        // Create Folder\n        Intent service = new Intent(fileActivity, OperationsService.class);\n        service.setAction(OperationsService.ACTION_CREATE_FOLDER);\n        service.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount());\n        service.putExtra(OperationsService.EXTRA_REMOTE_PATH, remotePath);\n        mWaitingForOpId = fileActivity.getOperationsServiceBinder().queueNewOperation(service);\n\n        fileActivity.showLoadingDialog(fileActivity.getString(R.string.wait_a_moment));\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc createFolder(remotePath: String) {\n    // Create Folder\n    let service = Intent(fileActivity: fileActivity, serviceClass: OperationsService.self)\n    service.action = OperationsService.ACTION_CREATE_FOLDER\n    service.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount())\n    service.putExtra(OperationsService.EXTRA_REMOTE_PATH, remotePath)\n    mWaitingForOpId = fileActivity.getOperationsServiceBinder().queueNewOperation(service)\n\n    fileActivity.showLoadingDialog(fileActivity.getString(R.string.wait_a_moment))\n}\n```"
    },
    {
        "method_name": "cancelTransference",
        "method_code": "ublic void cancelTransference(OCFile file) {\n        User currentUser = fileActivity.getUser().orElseThrow(IllegalStateException::new);\n        if (file.isFolder()) {\n            OperationsService.OperationsServiceBinder opsBinder =\n                fileActivity.getOperationsServiceBinder();\n            if (opsBinder != null) {\n                opsBinder.cancel(currentUser.toPlatformAccount(), file);\n            }\n        }\n\n        if (FileDownloadHelper.Companion.instance().isDownloading(currentUser, file)) {\n            List<OCFile> files = fileActivity.getStorageManager().getAllFilesRecursivelyInsideFolder(file);\n            FileDownloadHelper.Companion.instance().cancelPendingOrCurrentDownloads(currentUser, files);\n        }\n\n        if (FileUploadHelper.Companion.instance().isUploading(currentUser, file)) {\n            try {\n                FileUploadHelper.Companion.instance().cancelFileUpload(file.getRemotePath(), currentUser.getAccountName());\n            } catch (NoSuchElementException e) {\n                Log_OC.e(TAG, \"Error cancelling current upload because user does not exist!\");\n            }\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled cancelTransference from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: cancelTransference\n\n        Method Code: ublic void cancelTransference(OCFile file) {\n        User currentUser = fileActivity.getUser().orElseThrow(IllegalStateException::new);\n        if (file.isFolder()) {\n            OperationsService.OperationsServiceBinder opsBinder =\n                fileActivity.getOperationsServiceBinder();\n            if (opsBinder != null) {\n                opsBinder.cancel(currentUser.toPlatformAccount(), file);\n            }\n        }\n\n        if (FileDownloadHelper.Companion.instance().isDownloading(currentUser, file)) {\n            List<OCFile> files = fileActivity.getStorageManager().getAllFilesRecursivelyInsideFolder(file);\n            FileDownloadHelper.Companion.instance().cancelPendingOrCurrentDownloads(currentUser, files);\n        }\n\n        if (FileUploadHelper.Companion.instance().isUploading(currentUser, file)) {\n            try {\n                FileUploadHelper.Companion.instance().cancelFileUpload(file.getRemotePath(), currentUser.getAccountName());\n            } catch (NoSuchElementException e) {\n                Log_OC.e(TAG, \"Error cancelling current upload because user does not exist!\");\n            }\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc cancelTransference(file: OCFile) {\n    guard let currentUser = fileActivity.getUser() else {\n        fatalError(\"IllegalStateException\")\n    }\n    \n    if file.isFolder() {\n        if let opsBinder = fileActivity.getOperationsServiceBinder() {\n            opsBinder.cancel(currentUser.toPlatformAccount(), file)\n        }\n    }\n    \n    if FileDownloadHelper.instance().isDownloading(currentUser, file) {\n        let files = fileActivity.getStorageManager().getAllFilesRecursivelyInsideFolder(file)\n        FileDownloadHelper.instance().cancelPendingOrCurrentDownloads(currentUser, files)\n    }\n    \n    if FileUploadHelper.instance().isUploading(currentUser, file) {\n        do {\n            try FileUploadHelper.instance().cancelFileUpload(file.getRemotePath(), currentUser.getAccountName())\n        } catch {\n            Log_OC.e(TAG, \"Error cancelling current upload because user does not exist!\")\n        }\n    }\n}\n```"
    },
    {
        "method_name": "moveOrCopyFiles",
        "method_code": "ublic void moveOrCopyFiles(String action, final List<String> filePaths, final OCFile targetFolder) {\n        for (String path : filePaths) {\n            Intent service = new Intent(fileActivity, OperationsService.class);\n            service.setAction(action);\n            service.putExtra(OperationsService.EXTRA_NEW_PARENT_PATH, targetFolder.getRemotePath());\n            service.putExtra(OperationsService.EXTRA_REMOTE_PATH, path);\n            service.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount());\n            mWaitingForOpId = fileActivity.getOperationsServiceBinder().queueNewOperation(service);\n        }\n        fileActivity.showLoadingDialog(fileActivity.getString(R.string.wait_a_moment));\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled moveOrCopyFiles from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: moveOrCopyFiles\n\n        Method Code: ublic void moveOrCopyFiles(String action, final List<String> filePaths, final OCFile targetFolder) {\n        for (String path : filePaths) {\n            Intent service = new Intent(fileActivity, OperationsService.class);\n            service.setAction(action);\n            service.putExtra(OperationsService.EXTRA_NEW_PARENT_PATH, targetFolder.getRemotePath());\n            service.putExtra(OperationsService.EXTRA_REMOTE_PATH, path);\n            service.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount());\n            mWaitingForOpId = fileActivity.getOperationsServiceBinder().queueNewOperation(service);\n        }\n        fileActivity.showLoadingDialog(fileActivity.getString(R.string.wait_a_moment));\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc moveOrCopyFiles(action: String, filePaths: [String], targetFolder: OCFile) {\n    for path in filePaths {\n        let service = Intent(fileActivity: fileActivity, serviceClass: OperationsService.self)\n        service.setAction(action)\n        service.putExtra(OperationsService.EXTRA_NEW_PARENT_PATH, targetFolder.getRemotePath())\n        service.putExtra(OperationsService.EXTRA_REMOTE_PATH, path)\n        service.putExtra(OperationsService.EXTRA_ACCOUNT, fileActivity.getAccount())\n        mWaitingForOpId = fileActivity.getOperationsServiceBinder().queueNewOperation(service)\n    }\n    fileActivity.showLoadingDialog(fileActivity.getString(R.string.wait_a_moment))\n}\n```"
    },
    {
        "method_name": "exportFiles",
        "method_code": "ublic void exportFiles(Collection<OCFile> files,\n                            Context context,\n                            View view,\n                            BackgroundJobManager backgroundJobManager) {\n        if (context != null && view != null) {\n            DisplayUtils.showSnackMessage(view,\n                                          context.getResources().getQuantityString(\n                                              R.plurals.export_start,\n                                              files.size(),\n                                              files.size()\n                                                                                  ));\n        }\n\n        backgroundJobManager.startImmediateFilesExportJob(files);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled exportFiles from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: exportFiles\n\n        Method Code: ublic void exportFiles(Collection<OCFile> files,\n                            Context context,\n                            View view,\n                            BackgroundJobManager backgroundJobManager) {\n        if (context != null && view != null) {\n            DisplayUtils.showSnackMessage(view,\n                                          context.getResources().getQuantityString(\n                                              R.plurals.export_start,\n                                              files.size(),\n                                              files.size()\n                                                                                  ));\n        }\n\n        backgroundJobManager.startImmediateFilesExportJob(files);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc exportFiles(files: [OCFile], context: Context?, view: UIView?, backgroundJobManager: BackgroundJobManager) {\n    if let context = context, let view = view {\n        DisplayUtils.showSnackMessage(view: view, message: context.resources.getQuantityString(R.plurals.export_start, files.count, files.count))\n    }\n    \n    backgroundJobManager.startImmediateFilesExportJob(files: files)\n}\n```"
    },
    {
        "method_name": "getOpIdWaitingFor",
        "method_code": "ublic long getOpIdWaitingFor() {\n        return mWaitingForOpId;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getOpIdWaitingFor from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: getOpIdWaitingFor\n\n        Method Code: ublic long getOpIdWaitingFor() {\n        return mWaitingForOpId;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getOpIdWaitingFor() -> Int64 {\n    return mWaitingForOpId\n}\n```"
    },
    {
        "method_name": "setOpIdWaitingFor",
        "method_code": "ublic void setOpIdWaitingFor(long waitingForOpId) {\n        mWaitingForOpId = waitingForOpId;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setOpIdWaitingFor from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: setOpIdWaitingFor\n\n        Method Code: ublic void setOpIdWaitingFor(long waitingForOpId) {\n        mWaitingForOpId = waitingForOpId;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setOpIdWaitingFor(waitingForOpId: Int64) {\n    mWaitingForOpId = waitingForOpId\n}\n```"
    },
    {
        "method_name": "checkCurrentCredentials",
        "method_code": "ublic void checkCurrentCredentials(User user) {\n        Intent service = new Intent(fileActivity, OperationsService.class);\n        service.setAction(OperationsService.ACTION_CHECK_CURRENT_CREDENTIALS);\n        service.putExtra(OperationsService.EXTRA_ACCOUNT, user.toPlatformAccount());\n        mWaitingForOpId = fileActivity.getOperationsServiceBinder().queueNewOperation(service);\n\n        fileActivity.showLoadingDialog(fileActivity.getString(R.string.wait_checking_credentials));\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled checkCurrentCredentials from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: checkCurrentCredentials\n\n        Method Code: ublic void checkCurrentCredentials(User user) {\n        Intent service = new Intent(fileActivity, OperationsService.class);\n        service.setAction(OperationsService.ACTION_CHECK_CURRENT_CREDENTIALS);\n        service.putExtra(OperationsService.EXTRA_ACCOUNT, user.toPlatformAccount());\n        mWaitingForOpId = fileActivity.getOperationsServiceBinder().queueNewOperation(service);\n\n        fileActivity.showLoadingDialog(fileActivity.getString(R.string.wait_checking_credentials));\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc checkCurrentCredentials(user: User) {\n    let service = Intent(context: fileActivity, serviceClass: OperationsService.self)\n    service.action = OperationsService.ACTION_CHECK_CURRENT_CREDENTIALS\n    service.putExtra(OperationsService.EXTRA_ACCOUNT, user.toPlatformAccount())\n    mWaitingForOpId = fileActivity.getOperationsServiceBinder().queueNewOperation(service)\n\n    fileActivity.showLoadingDialog(message: fileActivity.getString(R.string.wait_checking_credentials))\n}\n```"
    },
    {
        "method_name": "uploadFromCamera",
        "method_code": "ublic void uploadFromCamera(Activity activity, int requestCode, boolean isVideo) {\n        Intent intent;\n        if (isVideo) {\n\n            // FIXME Not working on Emulator\n            intent = new Intent(MediaStore.ACTION_VIDEO_CAPTURE);\n        } else {\n            intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n        }\n\n        File cameraFile = createCameraFile(activity, isVideo);\n\n        Uri cameraUri = FileProvider.getUriForFile(activity.getApplicationContext(),\n                                                  activity.getResources().getString(R.string.file_provider_authority), cameraFile);\n        intent.putExtra(MediaStore.EXTRA_OUTPUT, cameraUri);\n\n        if (intent.resolveActivity(activity.getPackageManager()) != null) {\n            activity.startActivityForResult(intent, requestCode);\n        } else {\n            DisplayUtils.showSnackMessage(activity, \"No Camera found\");\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled uploadFromCamera from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: uploadFromCamera\n\n        Method Code: ublic void uploadFromCamera(Activity activity, int requestCode, boolean isVideo) {\n        Intent intent;\n        if (isVideo) {\n\n            // FIXME Not working on Emulator\n            intent = new Intent(MediaStore.ACTION_VIDEO_CAPTURE);\n        } else {\n            intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n        }\n\n        File cameraFile = createCameraFile(activity, isVideo);\n\n        Uri cameraUri = FileProvider.getUriForFile(activity.getApplicationContext(),\n                                                  activity.getResources().getString(R.string.file_provider_authority), cameraFile);\n        intent.putExtra(MediaStore.EXTRA_OUTPUT, cameraUri);\n\n        if (intent.resolveActivity(activity.getPackageManager()) != null) {\n            activity.startActivityForResult(intent, requestCode);\n        } else {\n            DisplayUtils.showSnackMessage(activity, \"No Camera found\");\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc uploadFromCamera(activity: UIViewController, requestCode: Int, isVideo: Bool) {\n    var intent: UIImagePickerController.SourceType\n    if isVideo {\n        intent = .camera\n    } else {\n        intent = .camera\n    }\n\n    let cameraFile = createCameraFile(activity: activity, isVideo: isVideo)\n\n    let cameraUri = FileManager.default.containerURL(forSecurityApplicationGroupIdentifier: \"group.com.example.app\")!.appendingPathComponent(cameraFile.path)\n\n    if UIImagePickerController.isSourceTypeAvailable(intent) {\n        let imagePickerController = UIImagePickerController()\n        imagePickerController.sourceType = intent\n        imagePickerController.mediaTypes = isVideo ? [\"public.movie\"] : [\"public.image\"]\n        imagePickerController.videoQuality = .typeHigh\n        imagePickerController.delegate = activity as? UIImagePickerControllerDelegate & UINavigationControllerDelegate\n        activity.present(imagePickerController, animated: true, completion: nil)\n    } else {\n        let alert = UIAlertController(title: \"Error\", message: \"No Camera found\", preferredStyle: .alert)\n        alert.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))\n        activity.present(alert, animated: true, completion: nil)\n    }\n}\n```"
    },
    {
        "method_name": "createCameraFile",
        "method_code": "ublic static File createCameraFile(Activity activity, boolean isVideo) {\n        String directory = isVideo ? Environment.DIRECTORY_MOVIES : Environment.DIRECTORY_PICTURES;\n        File storageDir = activity.getExternalFilesDir(directory);\n        String fileName = isVideo ? \"/directCameraUpload.mp4\" : \"/directCameraUpload.jpg\";\n        return new File(storageDir + fileName);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled createCameraFile from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: createCameraFile\n\n        Method Code: ublic static File createCameraFile(Activity activity, boolean isVideo) {\n        String directory = isVideo ? Environment.DIRECTORY_MOVIES : Environment.DIRECTORY_PICTURES;\n        File storageDir = activity.getExternalFilesDir(directory);\n        String fileName = isVideo ? \"/directCameraUpload.mp4\" : \"/directCameraUpload.jpg\";\n        return new File(storageDir + fileName);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport UIKit\n\nfunc createCameraFile(activity: UIViewController, isVideo: Bool) -> URL? {\n    let directory = isVideo ? FileManager.default.urls(for: .moviesDirectory, in: .userDomainMask).first : FileManager.default.urls(for: .picturesDirectory, in: .userDomainMask).first\n    let fileName = isVideo ? \"/directCameraUpload.mp4\" : \"/directCameraUpload.jpg\"\n    return directory?.appendingPathComponent(fileName)\n}\n```"
    },
    {
        "method_name": "getCapturedImageName",
        "method_code": "ublic static String getCapturedImageName() {\n        return getTimestampedFileName(\".jpg\");\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getCapturedImageName from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: getCapturedImageName\n\n        Method Code: ublic static String getCapturedImageName() {\n        return getTimestampedFileName(\".jpg\");\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func getCapturedImageName() -> String {\n    return getTimestampedFileName(\".jpg\")\n}\n```"
    },
    {
        "method_name": "getCapturedVideoName",
        "method_code": "ublic static String getCapturedVideoName() {\n        return getTimestampedFileName(\".mp4\");\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getCapturedVideoName from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: getCapturedVideoName\n\n        Method Code: ublic static String getCapturedVideoName() {\n        return getTimestampedFileName(\".mp4\");\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func getCapturedVideoName() -> String {\n    return getTimestampedFileName(\".mp4\")\n}\n```"
    },
    {
        "method_name": "getTimestampedFileName",
        "method_code": "ublic static String getTimestampedFileName(final String extension) {\n        return new SimpleDateFormat(\"yyyy-MM-dd_HHmmss\", Locale.US).format(new Date()) + extension;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getTimestampedFileName from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: getTimestampedFileName\n\n        Method Code: ublic static String getTimestampedFileName(final String extension) {\n        return new SimpleDateFormat(\"yyyy-MM-dd_HHmmss\", Locale.US).format(new Date()) + extension;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport Foundation\n\nfunc getTimestampedFileName(extension: String) -> String {\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"yyyy-MM-dd_HHmmss\"\n    dateFormatter.locale = Locale(identifier: \"en_US\")\n    let dateString = dateFormatter.string(from: Date())\n    return dateString + `extension`\n}\n```"
    },
    {
        "method_name": "getAvailableSpaceOnDevice",
        "method_code": "ublic static Long getAvailableSpaceOnDevice() {\n        StatFs stat;\n        try {\n            stat = new StatFs(MainApp.getStoragePath());\n        } catch (NullPointerException | IllegalArgumentException e) {\n            return -1L;\n        }\n\n        return stat.getBlockSizeLong() * stat.getAvailableBlocksLong();\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getAvailableSpaceOnDevice from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: getAvailableSpaceOnDevice\n\n        Method Code: ublic static Long getAvailableSpaceOnDevice() {\n        StatFs stat;\n        try {\n            stat = new StatFs(MainApp.getStoragePath());\n        } catch (NullPointerException | IllegalArgumentException e) {\n            return -1L;\n        }\n\n        return stat.getBlockSizeLong() * stat.getAvailableBlocksLong();\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport Foundation\n\nfunc getAvailableSpaceOnDevice() -> Int64 {\n    guard let storagePath = MainApp.getStoragePath() else {\n        return -1\n    }\n    \n    do {\n        let attributes = try FileManager.default.attributesOfFileSystem(forPath: storagePath)\n        if let blockSize = attributes[.systemSize] as? Int64, let availableBlocks = attributes[.systemFreeSize] as? Int64 {\n            return blockSize * availableBlocks\n        }\n    } catch {\n        return -1\n    }\n    \n    return -1\n}\n```"
    },
    {
        "method_name": "isEndToEndEncryptionSetup",
        "method_code": "ublic static boolean isEndToEndEncryptionSetup(Context context, User user) {\n        ArbitraryDataProvider arbitraryDataProvider = new ArbitraryDataProviderImpl(context);\n\n        String publicKey = arbitraryDataProvider.getValue(user, EncryptionUtils.PUBLIC_KEY);\n        String privateKey = arbitraryDataProvider.getValue(user, EncryptionUtils.PRIVATE_KEY);\n\n        return !publicKey.isEmpty() && !privateKey.isEmpty();\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isEndToEndEncryptionSetup from FileOperationsHelper.java into Swift.\n\n        Input:\n\n        Method Name: isEndToEndEncryptionSetup\n\n        Method Code: ublic static boolean isEndToEndEncryptionSetup(Context context, User user) {\n        ArbitraryDataProvider arbitraryDataProvider = new ArbitraryDataProviderImpl(context);\n\n        String publicKey = arbitraryDataProvider.getValue(user, EncryptionUtils.PUBLIC_KEY);\n        String privateKey = arbitraryDataProvider.getValue(user, EncryptionUtils.PRIVATE_KEY);\n\n        return !publicKey.isEmpty() && !privateKey.isEmpty();\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc isEndToEndEncryptionSetup(context: Context, user: User) -> Bool {\n    let arbitraryDataProvider = ArbitraryDataProviderImpl(context: context)\n\n    let publicKey = arbitraryDataProvider.getValue(user: user, key: EncryptionUtils.PUBLIC_KEY)\n    let privateKey = arbitraryDataProvider.getValue(user: user, key: EncryptionUtils.PRIVATE_KEY)\n\n    return !publicKey.isEmpty && !privateKey.isEmpty\n}\n```"
    }
]