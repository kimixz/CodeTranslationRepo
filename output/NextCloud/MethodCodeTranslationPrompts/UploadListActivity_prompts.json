[
    {
        "method_name": "createIntent",
        "method_code": "public static Intent createIntent(OCFile file, User user, Integer flag, Context context) {\n        Intent intent = new Intent(context, UploadListActivity.class);\n        if (flag != null) {\n            intent.setFlags(intent.getFlags() | flag);\n        }\n        intent.putExtra(ConflictsResolveActivity.EXTRA_FILE, file);\n        intent.putExtra(ConflictsResolveActivity.EXTRA_USER, user);\n\n        return intent;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled createIntent from UploadListActivity.java into Swift.\n\n        Input:\n\n        Method Name: createIntent\n\n        Method Code: public static Intent createIntent(OCFile file, User user, Integer flag, Context context) {\n        Intent intent = new Intent(context, UploadListActivity.class);\n        if (flag != null) {\n            intent.setFlags(intent.getFlags() | flag);\n        }\n        intent.putExtra(ConflictsResolveActivity.EXTRA_FILE, file);\n        intent.putExtra(ConflictsResolveActivity.EXTRA_USER, user);\n\n        return intent;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func createIntent(file: OCFile, user: User, flag: Int?, context: Context) -> Intent {\n    let intent = Intent(context: context, UploadListActivity.self)\n    if let flag = flag {\n        intent.setFlags(intent.getFlags() | flag)\n    }\n    intent.putExtra(ConflictsResolveActivity.EXTRA_FILE, file)\n    intent.putExtra(ConflictsResolveActivity.EXTRA_USER, user)\n    \n    return intent\n}\n```"
    },
    {
        "method_name": "onCreate",
        "method_code": "@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        throttler.setIntervalMillis(1000);\n\n        binding = UploadListLayoutBinding.inflate(getLayoutInflater());\n        setContentView(binding.getRoot());\n\n        swipeListRefreshLayout = binding.swipeContainingList;\n\n        // this activity has no file really bound, it's for multiple accounts at the same time; should no inherit\n        // from FileActivity; moreover, some behaviours inherited from FileActivity should be delegated to Fragments;\n        // but that's other story\n        setFile(null);\n\n        // setup toolbar\n        setupToolbar();\n\n        updateActionBarTitleAndHomeButtonByString(getString(R.string.uploads_view_title));\n\n        // setup drawer\n        setupDrawer();\n\n        setupContent();\n        observeWorkerState();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreate from UploadListActivity.java into Swift.\n\n        Input:\n\n        Method Name: onCreate\n\n        Method Code: @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        throttler.setIntervalMillis(1000);\n\n        binding = UploadListLayoutBinding.inflate(getLayoutInflater());\n        setContentView(binding.getRoot());\n\n        swipeListRefreshLayout = binding.swipeContainingList;\n\n        // this activity has no file really bound, it's for multiple accounts at the same time; should no inherit\n        // from FileActivity; moreover, some behaviours inherited from FileActivity should be delegated to Fragments;\n        // but that's other story\n        setFile(null);\n\n        // setup toolbar\n        setupToolbar();\n\n        updateActionBarTitleAndHomeButtonByString(getString(R.string.uploads_view_title));\n\n        // setup drawer\n        setupDrawer();\n\n        setupContent();\n        observeWorkerState();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n\n    throttler.setIntervalMillis(1000)\n\n    binding = UploadListLayoutBinding.inflate(getLayoutInflater())\n    view = binding.root\n\n    swipeListRefreshLayout = binding.swipeContainingList\n\n    // this activity has no file really bound, it's for multiple accounts at the same time; should no inherit\n    // from FileActivity; moreover, some behaviours inherited from FileActivity should be delegated to Fragments;\n    // but that's other story\n    setFile(nil)\n\n    // setup toolbar\n    setupToolbar()\n\n    updateActionBarTitleAndHomeButtonByString(getString(R.string.uploads_view_title))\n\n    // setup drawer\n    setupDrawer()\n\n    setupContent()\n    observeWorkerState()\n}\n```"
    },
    {
        "method_name": "observeWorkerState",
        "method_code": "private void observeWorkerState() {\n        WorkerStateLiveData.Companion.instance().observe(this, state -> {\n            if (state instanceof WorkerState.UploadStarted) {\n                Log_OC.d(TAG, \"Upload worker started\");\n                handleUploadWorkerState();\n            }\n        });\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled observeWorkerState from UploadListActivity.java into Swift.\n\n        Input:\n\n        Method Name: observeWorkerState\n\n        Method Code: private void observeWorkerState() {\n        WorkerStateLiveData.Companion.instance().observe(this, state -> {\n            if (state instanceof WorkerState.UploadStarted) {\n                Log_OC.d(TAG, \"Upload worker started\");\n                handleUploadWorkerState();\n            }\n        });\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func observeWorkerState() {\n    WorkerStateLiveData.instance().observe(self) { state in\n        if state is WorkerState.UploadStarted {\n            Log_OC.d(TAG, \"Upload worker started\")\n            handleUploadWorkerState()\n        }\n    }\n}\n```"
    },
    {
        "method_name": "handleUploadWorkerState",
        "method_code": "private void handleUploadWorkerState() {\n        uploadListAdapter.loadUploadItemsFromDb();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled handleUploadWorkerState from UploadListActivity.java into Swift.\n\n        Input:\n\n        Method Name: handleUploadWorkerState\n\n        Method Code: private void handleUploadWorkerState() {\n        uploadListAdapter.loadUploadItemsFromDb();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func handleUploadWorkerState() {\n    uploadListAdapter.loadUploadItemsFromDb()\n}\n```"
    },
    {
        "method_name": "setupContent",
        "method_code": "private void setupContent() {\n        binding.list.setEmptyView(binding.emptyList.getRoot());\n        binding.emptyList.getRoot().setVisibility(View.GONE);\n        binding.emptyList.emptyListIcon.setImageResource(R.drawable.uploads);\n        binding.emptyList.emptyListIcon.getDrawable().mutate();\n        binding.emptyList.emptyListIcon.setAlpha(0.5f);\n        binding.emptyList.emptyListIcon.setVisibility(View.VISIBLE);\n        binding.emptyList.emptyListViewHeadline.setText(getString(R.string.upload_list_empty_headline));\n        binding.emptyList.emptyListViewText.setText(getString(R.string.upload_list_empty_text_auto_upload));\n        binding.emptyList.emptyListViewText.setVisibility(View.VISIBLE);\n\n        uploadListAdapter = new UploadListAdapter(this,\n                                                  uploadsStorageManager,\n                                                  getStorageManager(),\n                                                  userAccountManager,\n                                                  connectivityService,\n                                                  powerManagementService,\n                                                  clock,\n                                                  viewThemeUtils);\n\n        final GridLayoutManager lm = new GridLayoutManager(this, 1);\n        uploadListAdapter.setLayoutManager(lm);\n\n        int spacing = getResources().getDimensionPixelSize(R.dimen.media_grid_spacing);\n        binding.list.addItemDecoration(new MediaGridItemDecoration(spacing));\n        binding.list.setLayoutManager(lm);\n        binding.list.setAdapter(uploadListAdapter);\n\n        viewThemeUtils.androidx.themeSwipeRefreshLayout(swipeListRefreshLayout);\n        swipeListRefreshLayout.setOnRefreshListener(this::refresh);\n\n        loadItems();\n        uploadListAdapter.loadUploadItemsFromDb();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setupContent from UploadListActivity.java into Swift.\n\n        Input:\n\n        Method Name: setupContent\n\n        Method Code: private void setupContent() {\n        binding.list.setEmptyView(binding.emptyList.getRoot());\n        binding.emptyList.getRoot().setVisibility(View.GONE);\n        binding.emptyList.emptyListIcon.setImageResource(R.drawable.uploads);\n        binding.emptyList.emptyListIcon.getDrawable().mutate();\n        binding.emptyList.emptyListIcon.setAlpha(0.5f);\n        binding.emptyList.emptyListIcon.setVisibility(View.VISIBLE);\n        binding.emptyList.emptyListViewHeadline.setText(getString(R.string.upload_list_empty_headline));\n        binding.emptyList.emptyListViewText.setText(getString(R.string.upload_list_empty_text_auto_upload));\n        binding.emptyList.emptyListViewText.setVisibility(View.VISIBLE);\n\n        uploadListAdapter = new UploadListAdapter(this,\n                                                  uploadsStorageManager,\n                                                  getStorageManager(),\n                                                  userAccountManager,\n                                                  connectivityService,\n                                                  powerManagementService,\n                                                  clock,\n                                                  viewThemeUtils);\n\n        final GridLayoutManager lm = new GridLayoutManager(this, 1);\n        uploadListAdapter.setLayoutManager(lm);\n\n        int spacing = getResources().getDimensionPixelSize(R.dimen.media_grid_spacing);\n        binding.list.addItemDecoration(new MediaGridItemDecoration(spacing));\n        binding.list.setLayoutManager(lm);\n        binding.list.setAdapter(uploadListAdapter);\n\n        viewThemeUtils.androidx.themeSwipeRefreshLayout(swipeListRefreshLayout);\n        swipeListRefreshLayout.setOnRefreshListener(this::refresh);\n\n        loadItems();\n        uploadListAdapter.loadUploadItemsFromDb();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setupContent() {\n    binding.list.emptyView = binding.emptyList.root\n    binding.emptyList.root.isHidden = true\n    binding.emptyList.emptyListIcon.image = UIImage(named: \"uploads\")\n    binding.emptyList.emptyListIcon.image?.withRenderingMode(.alwaysOriginal)\n    binding.emptyList.emptyListIcon.alpha = 0.5\n    binding.emptyList.emptyListIcon.isHidden = false\n    binding.emptyList.emptyListViewHeadline.text = NSLocalizedString(\"upload_list_empty_headline\", comment: \"\")\n    binding.emptyList.emptyListViewText.text = NSLocalizedString(\"upload_list_empty_text_auto_upload\", comment: \"\")\n    binding.emptyList.emptyListViewText.isHidden = false\n\n    uploadListAdapter = UploadListAdapter(\n        context: self,\n        uploadsStorageManager: uploadsStorageManager,\n        storageManager: getStorageManager(),\n        userAccountManager: userAccountManager,\n        connectivityService: connectivityService,\n        powerManagementService: powerManagementService,\n        clock: clock,\n        viewThemeUtils: viewThemeUtils\n    )\n\n    let lm = GridLayoutManager(context: self, spanCount: 1)\n    uploadListAdapter.setLayoutManager(lm)\n\n    let spacing = Int(UIApplication.shared.delegate?.window??.rootViewController?.view.frame.size.width ?? 0) // Assuming a method to get dimension\n    binding.list.addItemDecoration(MediaGridItemDecoration(spacing: spacing))\n    binding.list.layoutManager = lm\n    binding.list.adapter = uploadListAdapter\n\n    viewThemeUtils.androidxThemeSwipeRefreshLayout(swipeListRefreshLayout)\n    swipeListRefreshLayout.addTarget(self, action: #selector(refresh), for: .valueChanged)\n\n    loadItems()\n    uploadListAdapter.loadUploadItemsFromDb()\n}\n```"
    },
    {
        "method_name": "loadItems",
        "method_code": "private void loadItems() {\n        uploadListAdapter.loadUploadItemsFromDb();\n\n        if (uploadListAdapter.getItemCount() > 0) {\n            return;\n        }\n\n        swipeListRefreshLayout.setVisibility(View.VISIBLE);\n        swipeListRefreshLayout.setRefreshing(false);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled loadItems from UploadListActivity.java into Swift.\n\n        Input:\n\n        Method Name: loadItems\n\n        Method Code: private void loadItems() {\n        uploadListAdapter.loadUploadItemsFromDb();\n\n        if (uploadListAdapter.getItemCount() > 0) {\n            return;\n        }\n\n        swipeListRefreshLayout.setVisibility(View.VISIBLE);\n        swipeListRefreshLayout.setRefreshing(false);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func loadItems() {\n    uploadListAdapter.loadUploadItemsFromDb()\n\n    if uploadListAdapter.getItemCount() > 0 {\n        return\n    }\n\n    swipeListRefreshLayout.isHidden = false\n    swipeListRefreshLayout.isRefreshing = false\n}\n```"
    },
    {
        "method_name": "refresh",
        "method_code": "private void refresh() {\n        FilesSyncHelper.startFilesSyncForAllFolders(syncedFolderProvider,\n                                                    backgroundJobManager,\n                                                    true,\n                                                    new String[]{});\n\n        if (uploadsStorageManager.getFailedUploads().length > 0) {\n            new Thread(() -> {\n                FileUploadHelper.Companion.instance().retryFailedUploads(\n                    uploadsStorageManager,\n                    connectivityService,\n                    accountManager,\n                    powerManagementService);\n                this.runOnUiThread(() -> {\n                    uploadListAdapter.loadUploadItemsFromDb();\n                });\n            }).start();\n            DisplayUtils.showSnackMessage(this, R.string.uploader_local_files_uploaded);\n        }\n\n\n        // update UI\n        uploadListAdapter.loadUploadItemsFromDb();\n        swipeListRefreshLayout.setRefreshing(false);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled refresh from UploadListActivity.java into Swift.\n\n        Input:\n\n        Method Name: refresh\n\n        Method Code: private void refresh() {\n        FilesSyncHelper.startFilesSyncForAllFolders(syncedFolderProvider,\n                                                    backgroundJobManager,\n                                                    true,\n                                                    new String[]{});\n\n        if (uploadsStorageManager.getFailedUploads().length > 0) {\n            new Thread(() -> {\n                FileUploadHelper.Companion.instance().retryFailedUploads(\n                    uploadsStorageManager,\n                    connectivityService,\n                    accountManager,\n                    powerManagementService);\n                this.runOnUiThread(() -> {\n                    uploadListAdapter.loadUploadItemsFromDb();\n                });\n            }).start();\n            DisplayUtils.showSnackMessage(this, R.string.uploader_local_files_uploaded);\n        }\n\n\n        // update UI\n        uploadListAdapter.loadUploadItemsFromDb();\n        swipeListRefreshLayout.setRefreshing(false);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func refresh() {\n    FilesSyncHelper.startFilesSyncForAllFolders(syncedFolderProvider: syncedFolderProvider,\n                                                backgroundJobManager: backgroundJobManager,\n                                                force: true,\n                                                folderIds: [])\n\n    if uploadsStorageManager.getFailedUploads().count > 0 {\n        DispatchQueue.global().async {\n            FileUploadHelper.instance().retryFailedUploads(\n                uploadsStorageManager: uploadsStorageManager,\n                connectivityService: connectivityService,\n                accountManager: accountManager,\n                powerManagementService: powerManagementService)\n            DispatchQueue.main.async {\n                self.uploadListAdapter.loadUploadItemsFromDb()\n            }\n        }\n        DisplayUtils.showSnackMessage(context: self, messageId: R.string.uploader_local_files_uploaded)\n    }\n\n    // update UI\n    uploadListAdapter.loadUploadItemsFromDb()\n    swipeListRefreshLayout.setRefreshing(false)\n}\n```"
    },
    {
        "method_name": "onStart",
        "method_code": "@Override\n    protected void onStart() {\n        super.onStart();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onStart from UploadListActivity.java into Swift.\n\n        Input:\n\n        Method Name: onStart\n\n        Method Code: @Override\n    protected void onStart() {\n        super.onStart();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n```"
    },
    {
        "method_name": "onResume",
        "method_code": "@Override\n    protected void onResume() {\n        Log_OC.v(TAG, \"onResume() start\");\n        super.onResume();\n\n        // Listen for upload messages\n        uploadMessagesReceiver = new UploadMessagesReceiver();\n        IntentFilter uploadIntentFilter = new IntentFilter();\n        uploadIntentFilter.addAction(FileUploadWorker.Companion.getUploadsAddedMessage());\n        uploadIntentFilter.addAction(FileUploadWorker.Companion.getUploadStartMessage());\n        uploadIntentFilter.addAction(FileUploadWorker.Companion.getUploadFinishMessage());\n        localBroadcastManager.registerReceiver(uploadMessagesReceiver, uploadIntentFilter);\n\n        Log_OC.v(TAG, \"onResume() end\");\n\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onResume from UploadListActivity.java into Swift.\n\n        Input:\n\n        Method Name: onResume\n\n        Method Code: @Override\n    protected void onResume() {\n        Log_OC.v(TAG, \"onResume() start\");\n        super.onResume();\n\n        // Listen for upload messages\n        uploadMessagesReceiver = new UploadMessagesReceiver();\n        IntentFilter uploadIntentFilter = new IntentFilter();\n        uploadIntentFilter.addAction(FileUploadWorker.Companion.getUploadsAddedMessage());\n        uploadIntentFilter.addAction(FileUploadWorker.Companion.getUploadStartMessage());\n        uploadIntentFilter.addAction(FileUploadWorker.Companion.getUploadFinishMessage());\n        localBroadcastManager.registerReceiver(uploadMessagesReceiver, uploadIntentFilter);\n\n        Log_OC.v(TAG, \"onResume() end\");\n\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n    Log_OC.v(TAG, \"viewWillAppear() start\")\n\n    // Listen for upload messages\n    uploadMessagesReceiver = UploadMessagesReceiver()\n    let uploadIntentFilter = NotificationCenter.default\n    uploadIntentFilter.addObserver(uploadMessagesReceiver, selector: #selector(handleUploadsAdded), name: NSNotification.Name(FileUploadWorker.uploadsAddedMessage), object: nil)\n    uploadIntentFilter.addObserver(uploadMessagesReceiver, selector: #selector(handleUploadStart), name: NSNotification.Name(FileUploadWorker.uploadStartMessage), object: nil)\n    uploadIntentFilter.addObserver(uploadMessagesReceiver, selector: #selector(handleUploadFinish), name: NSNotification.Name(FileUploadWorker.uploadFinishMessage), object: nil)\n\n    Log_OC.v(TAG, \"viewWillAppear() end\")\n}\n```"
    },
    {
        "method_name": "onPause",
        "method_code": "@Override\n    protected void onPause() {\n        Log_OC.v(TAG, \"onPause() start\");\n        if (uploadMessagesReceiver != null) {\n            localBroadcastManager.unregisterReceiver(uploadMessagesReceiver);\n            uploadMessagesReceiver = null;\n        }\n        super.onPause();\n        Log_OC.v(TAG, \"onPause() end\");\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onPause from UploadListActivity.java into Swift.\n\n        Input:\n\n        Method Name: onPause\n\n        Method Code: @Override\n    protected void onPause() {\n        Log_OC.v(TAG, \"onPause() start\");\n        if (uploadMessagesReceiver != null) {\n            localBroadcastManager.unregisterReceiver(uploadMessagesReceiver);\n            uploadMessagesReceiver = null;\n        }\n        super.onPause();\n        Log_OC.v(TAG, \"onPause() end\");\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n    Log_OC.v(TAG, \"viewWillDisappear() start\")\n    if let receiver = uploadMessagesReceiver {\n        localBroadcastManager.removeObserver(receiver)\n        uploadMessagesReceiver = nil\n    }\n    Log_OC.v(TAG, \"viewWillDisappear() end\")\n}\n```"
    },
    {
        "method_name": "onCreateOptionsMenu",
        "method_code": "@Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        MenuInflater inflater = getMenuInflater();\n        inflater.inflate(R.menu.activity_upload_list, menu);\n        updateGlobalPauseIcon(menu.getItem(0));\n        return true;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreateOptionsMenu from UploadListActivity.java into Swift.\n\n        Input:\n\n        Method Name: onCreateOptionsMenu\n\n        Method Code: @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        MenuInflater inflater = getMenuInflater();\n        inflater.inflate(R.menu.activity_upload_list, menu);\n        updateGlobalPauseIcon(menu.getItem(0));\n        return true;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onCreateOptionsMenu(_ menu: Menu) -> Bool {\n    let inflater = menuInflater\n    inflater.inflate(R.menu.activity_upload_list, menu)\n    updateGlobalPauseIcon(menu.getItem(0))\n    return true\n}\n```"
    },
    {
        "method_name": "updateGlobalPauseIcon",
        "method_code": "@SuppressFBWarnings(\"RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT\")\n    private void updateGlobalPauseIcon(MenuItem pauseMenuItem) {\n        if (pauseMenuItem.getItemId() != R.id.action_toggle_global_pause) {\n            return;\n        }\n\n        int iconId;\n        String title;\n        if (preferences.isGlobalUploadPaused()) {\n            iconId = R.drawable.ic_global_resume;\n            title = getString(R.string.upload_action_global_upload_resume);\n        } else {\n            iconId = R.drawable.ic_global_pause;\n            title = getString(R.string.upload_action_global_upload_pause);\n        }\n\n        pauseMenuItem.setIcon(iconId);\n        pauseMenuItem.setTitle(title);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled updateGlobalPauseIcon from UploadListActivity.java into Swift.\n\n        Input:\n\n        Method Name: updateGlobalPauseIcon\n\n        Method Code: @SuppressFBWarnings(\"RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT\")\n    private void updateGlobalPauseIcon(MenuItem pauseMenuItem) {\n        if (pauseMenuItem.getItemId() != R.id.action_toggle_global_pause) {\n            return;\n        }\n\n        int iconId;\n        String title;\n        if (preferences.isGlobalUploadPaused()) {\n            iconId = R.drawable.ic_global_resume;\n            title = getString(R.string.upload_action_global_upload_resume);\n        } else {\n            iconId = R.drawable.ic_global_pause;\n            title = getString(R.string.upload_action_global_upload_pause);\n        }\n\n        pauseMenuItem.setIcon(iconId);\n        pauseMenuItem.setTitle(title);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc updateGlobalPauseIcon(pauseMenuItem: UIBarButtonItem) {\n    guard pauseMenuItem.tag == R.id.action_toggle_global_pause else {\n        return\n    }\n\n    let iconId: UIImage\n    let title: String\n    if preferences.isGlobalUploadPaused() {\n        iconId = UIImage(named: \"ic_global_resume\")!\n        title = NSLocalizedString(\"upload_action_global_upload_resume\", comment: \"\")\n    } else {\n        iconId = UIImage(named: \"ic_global_pause\")!\n        title = NSLocalizedString(\"upload_action_global_upload_pause\", comment: \"\")\n    }\n\n    pauseMenuItem.image = iconId\n    pauseMenuItem.title = title\n}\n```"
    },
    {
        "method_name": "toggleGlobalPause",
        "method_code": "@SuppressLint(\"NotifyDataSetChanged\")\n    private void toggleGlobalPause(MenuItem pauseMenuItem) {\n        preferences.setGlobalUploadPaused(!preferences.isGlobalUploadPaused());\n        updateGlobalPauseIcon(pauseMenuItem);\n\n        for (User user : accountManager.getAllUsers()) {\n            if (user != null) {\n                FileUploadHelper.Companion.instance().cancelAndRestartUploadJob(user);\n            }\n        }\n\n        uploadListAdapter.notifyDataSetChanged();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled toggleGlobalPause from UploadListActivity.java into Swift.\n\n        Input:\n\n        Method Name: toggleGlobalPause\n\n        Method Code: @SuppressLint(\"NotifyDataSetChanged\")\n    private void toggleGlobalPause(MenuItem pauseMenuItem) {\n        preferences.setGlobalUploadPaused(!preferences.isGlobalUploadPaused());\n        updateGlobalPauseIcon(pauseMenuItem);\n\n        for (User user : accountManager.getAllUsers()) {\n            if (user != null) {\n                FileUploadHelper.Companion.instance().cancelAndRestartUploadJob(user);\n            }\n        }\n\n        uploadListAdapter.notifyDataSetChanged();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func toggleGlobalPause(pauseMenuItem: MenuItem) {\n    preferences.setGlobalUploadPaused(!preferences.isGlobalUploadPaused())\n    updateGlobalPauseIcon(pauseMenuItem)\n\n    for user in accountManager.getAllUsers() {\n        if let user = user {\n            FileUploadHelper.instance().cancelAndRestartUploadJob(user: user)\n        }\n    }\n\n    uploadListAdapter.notifyDataSetChanged()\n}\n```"
    },
    {
        "method_name": "onOptionsItemSelected",
        "method_code": "@Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        int itemId = item.getItemId();\n\n        if (itemId == android.R.id.home) {\n            if (isDrawerOpen()) {\n                closeDrawer();\n            } else {\n                openDrawer();\n            }\n        } else if (itemId == R.id.action_toggle_global_pause) {\n            toggleGlobalPause(item);\n        } else {\n            return super.onOptionsItemSelected(item);\n        }\n\n        return true;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onOptionsItemSelected from UploadListActivity.java into Swift.\n\n        Input:\n\n        Method Name: onOptionsItemSelected\n\n        Method Code: @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        int itemId = item.getItemId();\n\n        if (itemId == android.R.id.home) {\n            if (isDrawerOpen()) {\n                closeDrawer();\n            } else {\n                openDrawer();\n            }\n        } else if (itemId == R.id.action_toggle_global_pause) {\n            toggleGlobalPause(item);\n        } else {\n            return super.onOptionsItemSelected(item);\n        }\n\n        return true;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onOptionsItemSelected(_ item: MenuItem) -> Bool {\n    let itemId = item.itemId\n\n    if itemId == android.R.id.home {\n        if isDrawerOpen() {\n            closeDrawer()\n        } else {\n            openDrawer()\n        }\n    } else if itemId == R.id.action_toggle_global_pause {\n        toggleGlobalPause(item)\n    } else {\n        return super.onOptionsItemSelected(item)\n    }\n\n    return true\n}\n```"
    },
    {
        "method_name": "onActivityResult",
        "method_code": "@Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n        if (requestCode == FileActivity.REQUEST_CODE__UPDATE_CREDENTIALS && resultCode == RESULT_OK) {\n            FilesSyncHelper.restartUploadsIfNeeded(uploadsStorageManager,\n                                                   userAccountManager,\n                                                   connectivityService,\n                                                   powerManagementService);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onActivityResult from UploadListActivity.java into Swift.\n\n        Input:\n\n        Method Name: onActivityResult\n\n        Method Code: @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n        if (requestCode == FileActivity.REQUEST_CODE__UPDATE_CREDENTIALS && resultCode == RESULT_OK) {\n            FilesSyncHelper.restartUploadsIfNeeded(uploadsStorageManager,\n                                                   userAccountManager,\n                                                   connectivityService,\n                                                   powerManagementService);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n    NotificationCenter.default.addObserver(self, selector: #selector(handleActivityResult(_:)), name: .activityResult, object: nil)\n}\n\n@objc func handleActivityResult(_ notification: Notification) {\n    guard let userInfo = notification.userInfo,\n          let requestCode = userInfo[\"requestCode\"] as? Int,\n          let resultCode = userInfo[\"resultCode\"] as? Int else { return }\n    \n    if requestCode == FileActivity.REQUEST_CODE__UPDATE_CREDENTIALS && resultCode == RESULT_OK {\n        FilesSyncHelper.restartUploadsIfNeeded(uploadsStorageManager: uploadsStorageManager,\n                                               userAccountManager: userAccountManager,\n                                               connectivityService: connectivityService,\n                                               powerManagementService: powerManagementService)\n    }\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n    NotificationCenter.default.removeObserver(self, name: .activityResult, object: nil)\n}\n```"
    },
    {
        "method_name": "onRemoteOperationFinish",
        "method_code": "@Override\n    public void onRemoteOperationFinish(RemoteOperation operation, RemoteOperationResult result) {\n        if (operation instanceof CheckCurrentCredentialsOperation) {\n            // Do not call super in this case; more refactoring needed around onRemoteOperationFinish :'(\n            getFileOperationsHelper().setOpIdWaitingFor(Long.MAX_VALUE);\n            dismissLoadingDialog();\n            Account account = (Account) result.getData().get(0);\n            if (!result.isSuccess()) {\n                requestCredentialsUpdate(this, account);\n\n            } else {\n                // already updated -> just retry!\n                FilesSyncHelper.restartUploadsIfNeeded(uploadsStorageManager,\n                                                       userAccountManager,\n                                                       connectivityService,\n                                                       powerManagementService);\n            }\n\n        } else {\n            super.onRemoteOperationFinish(operation, result);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onRemoteOperationFinish from UploadListActivity.java into Swift.\n\n        Input:\n\n        Method Name: onRemoteOperationFinish\n\n        Method Code: @Override\n    public void onRemoteOperationFinish(RemoteOperation operation, RemoteOperationResult result) {\n        if (operation instanceof CheckCurrentCredentialsOperation) {\n            // Do not call super in this case; more refactoring needed around onRemoteOperationFinish :'(\n            getFileOperationsHelper().setOpIdWaitingFor(Long.MAX_VALUE);\n            dismissLoadingDialog();\n            Account account = (Account) result.getData().get(0);\n            if (!result.isSuccess()) {\n                requestCredentialsUpdate(this, account);\n\n            } else {\n                // already updated -> just retry!\n                FilesSyncHelper.restartUploadsIfNeeded(uploadsStorageManager,\n                                                       userAccountManager,\n                                                       connectivityService,\n                                                       powerManagementService);\n            }\n\n        } else {\n            super.onRemoteOperationFinish(operation, result);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onRemoteOperationFinish(operation: RemoteOperation, result: RemoteOperationResult) {\n    if operation is CheckCurrentCredentialsOperation {\n        // Do not call super in this case; more refactoring needed around onRemoteOperationFinish :'(\n        getFileOperationsHelper().setOpIdWaitingFor(Int64.max)\n        dismissLoadingDialog()\n        if let account = result.getData().first as? Account {\n            if !result.isSuccess() {\n                requestCredentialsUpdate(self, account: account)\n            } else {\n                // already updated -> just retry!\n                FilesSyncHelper.restartUploadsIfNeeded(uploadsStorageManager: uploadsStorageManager,\n                                                       userAccountManager: userAccountManager,\n                                                       connectivityService: connectivityService,\n                                                       powerManagementService: powerManagementService)\n            }\n        }\n    } else {\n        super.onRemoteOperationFinish(operation: operation, result: result)\n    }\n}\n```"
    },
    {
        "method_name": "onReceive",
        "method_code": "@Override\n        public void onReceive(Context context, Intent intent) {\n\n            throttler.run(\"update_upload_list\", () -> {\n                uploadListAdapter.loadUploadItemsFromDb();\n            });\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled onReceive from UploadListActivity.java into Swift.\n\n        Input:\n\n        Method Name: onReceive\n\n        Method Code: @Override\n        public void onReceive(Context context, Intent intent) {\n\n            throttler.run(\"update_upload_list\", () -> {\n                uploadListAdapter.loadUploadItemsFromDb();\n            });\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onReceive(context: Context, intent: Intent) {\n    throttler.run(\"update_upload_list\") {\n        uploadListAdapter.loadUploadItemsFromDb()\n    }\n}\n```"
    }
]