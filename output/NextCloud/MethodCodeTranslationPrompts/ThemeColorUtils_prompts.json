[
    {
        "method_name": "unchangedPrimaryColor",
        "method_code": "public int unchangedPrimaryColor(Account account, Context context) {\n        try {\n            return Color.parseColor(getCapability(account, context).getServerColor());\n        } catch (Exception e) {\n            return context.getResources().getColor(R.color.primary);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled unchangedPrimaryColor from ThemeColorUtils.java into Swift.\n\n        Input:\n\n        Method Name: unchangedPrimaryColor\n\n        Method Code: public int unchangedPrimaryColor(Account account, Context context) {\n        try {\n            return Color.parseColor(getCapability(account, context).getServerColor());\n        } catch (Exception e) {\n            return context.getResources().getColor(R.color.primary);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc unchangedPrimaryColor(account: Account, context: Context) -> UIColor {\n    do {\n        return UIColor(hexString: getCapability(account: account, context: context).getServerColor())\n    } catch {\n        return UIColor(named: \"primary\") ?? UIColor.black\n    }\n}\n```"
    },
    {
        "method_name": "unchangedFontColor",
        "method_code": "public int unchangedFontColor(Context context) {\n        try {\n            return Color.parseColor(getCapability(context).getServerTextColor());\n        } catch (Exception e) {\n            if (PlatformThemeUtil.isDarkMode(context)) {\n                return Color.WHITE;\n            } else {\n                return Color.BLACK;\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled unchangedFontColor from ThemeColorUtils.java into Swift.\n\n        Input:\n\n        Method Name: unchangedFontColor\n\n        Method Code: public int unchangedFontColor(Context context) {\n        try {\n            return Color.parseColor(getCapability(context).getServerTextColor());\n        } catch (Exception e) {\n            if (PlatformThemeUtil.isDarkMode(context)) {\n                return Color.WHITE;\n            } else {\n                return Color.BLACK;\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc unchangedFontColor(context: Context) -> UIColor {\n    do {\n        return UIColor(hexString: getCapability(context).getServerTextColor())\n    } catch {\n        if PlatformThemeUtil.isDarkMode(context: context) {\n            return UIColor.white\n        } else {\n            return UIColor.black\n        }\n    }\n}\n```"
    }
]