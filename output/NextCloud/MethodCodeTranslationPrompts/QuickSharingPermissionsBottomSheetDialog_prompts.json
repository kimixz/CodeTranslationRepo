[
    {
        "method_name": "onCreate",
        "method_code": "@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        binding = QuickSharingPermissionsBottomSheetFragmentBinding.inflate(getLayoutInflater());\n        setContentView(binding.getRoot());\n\n        if (getWindow() != null) {\n            getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\n        }\n\n        viewThemeUtils.platform.themeDialog(binding.getRoot());\n\n        setUpRecyclerView();\n        setOnShowListener(d ->\n                              BottomSheetBehavior.from((View) binding.getRoot().getParent())\n                                  .setPeekHeight(binding.getRoot().getMeasuredHeight())\n                         );\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreate from QuickSharingPermissionsBottomSheetDialog.java into Swift.\n\n        Input:\n\n        Method Name: onCreate\n\n        Method Code: @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        binding = QuickSharingPermissionsBottomSheetFragmentBinding.inflate(getLayoutInflater());\n        setContentView(binding.getRoot());\n\n        if (getWindow() != null) {\n            getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\n        }\n\n        viewThemeUtils.platform.themeDialog(binding.getRoot());\n\n        setUpRecyclerView();\n        setOnShowListener(d ->\n                              BottomSheetBehavior.from((View) binding.getRoot().getParent())\n                                  .setPeekHeight(binding.getRoot().getMeasuredHeight())\n                         );\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    binding = QuickSharingPermissionsBottomSheetFragmentBinding.inflate(layoutInflater)\n    view = binding.root\n\n    if let window = self.view.window {\n        window.frame = CGRect(x: 0, y: 0, width: UIScreen.main.bounds.width, height: UIView.layoutFittingCompressedSize.height)\n    }\n\n    viewThemeUtils.platform.themeDialog(binding.root)\n\n    setUpRecyclerView()\n    self.presentingViewController?.presentationController?.delegate = self\n}\n\nfunc presentationControllerWillPresent(_ presentationController: UIPresentationController) {\n    if let bottomSheet = presentationController as? UISheetPresentationController {\n        bottomSheet.detents = [.medium()]\n        bottomSheet.prefersGrabberVisible = true\n    }\n}\n```"
    },
    {
        "method_name": "setUpRecyclerView",
        "method_code": "private void setUpRecyclerView() {\n        List<QuickPermissionModel> quickPermissionModelList = getQuickPermissionList();\n        QuickSharingPermissionsAdapter adapter = new QuickSharingPermissionsAdapter(\n            quickPermissionModelList,\n            new QuickSharingPermissionsAdapter.QuickSharingPermissionViewHolder.OnPermissionChangeListener() {\n                @Override\n                public void onPermissionChanged(int position) {\n                    handlePermissionChanged(quickPermissionModelList, position);\n                }\n\n                @Override\n                public void onDismissSheet() {\n                    dismiss();\n                }\n            },\n            viewThemeUtils\n        );\n        LinearLayoutManager linearLayoutManager = new LinearLayoutManager(fileActivity);\n        binding.rvQuickSharePermissions.setLayoutManager(linearLayoutManager);\n        binding.rvQuickSharePermissions.setAdapter(adapter);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setUpRecyclerView from QuickSharingPermissionsBottomSheetDialog.java into Swift.\n\n        Input:\n\n        Method Name: setUpRecyclerView\n\n        Method Code: private void setUpRecyclerView() {\n        List<QuickPermissionModel> quickPermissionModelList = getQuickPermissionList();\n        QuickSharingPermissionsAdapter adapter = new QuickSharingPermissionsAdapter(\n            quickPermissionModelList,\n            new QuickSharingPermissionsAdapter.QuickSharingPermissionViewHolder.OnPermissionChangeListener() {\n                @Override\n                public void onPermissionChanged(int position) {\n                    handlePermissionChanged(quickPermissionModelList, position);\n                }\n\n                @Override\n                public void onDismissSheet() {\n                    dismiss();\n                }\n            },\n            viewThemeUtils\n        );\n        LinearLayoutManager linearLayoutManager = new LinearLayoutManager(fileActivity);\n        binding.rvQuickSharePermissions.setLayoutManager(linearLayoutManager);\n        binding.rvQuickSharePermissions.setAdapter(adapter);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setUpRecyclerView() {\n    let quickPermissionModelList = getQuickPermissionList()\n    let adapter = QuickSharingPermissionsAdapter(\n        quickPermissionModelList: quickPermissionModelList,\n        onPermissionChangeListener: QuickSharingPermissionsAdapter.QuickSharingPermissionViewHolder.OnPermissionChangeListener(\n            onPermissionChanged: { position in\n                self.handlePermissionChanged(quickPermissionModelList: quickPermissionModelList, position: position)\n            },\n            onDismissSheet: {\n                self.dismiss()\n            }\n        ),\n        viewThemeUtils: viewThemeUtils\n    )\n    let linearLayoutManager = LinearLayoutManager(context: fileActivity)\n    binding.rvQuickSharePermissions.layoutManager = linearLayoutManager\n    binding.rvQuickSharePermissions.adapter = adapter\n}\n```"
    },
    {
        "method_name": "onPermissionChanged",
        "method_code": "@Override\n                public void onPermissionChanged(int position) {\n                    handlePermissionChanged(quickPermissionModelList, position);\n                }",
        "prompt": "\n        Please translate the following Java (Android) method titled onPermissionChanged from QuickSharingPermissionsBottomSheetDialog.java into Swift.\n\n        Input:\n\n        Method Name: onPermissionChanged\n\n        Method Code: @Override\n                public void onPermissionChanged(int position) {\n                    handlePermissionChanged(quickPermissionModelList, position);\n                }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onPermissionChanged(position: Int) {\n    handlePermissionChanged(quickPermissionModelList, position)\n}\n```"
    },
    {
        "method_name": "onDismissSheet",
        "method_code": "@Override\n                public void onDismissSheet() {\n                    dismiss();\n                }",
        "prompt": "\n        Please translate the following Java (Android) method titled onDismissSheet from QuickSharingPermissionsBottomSheetDialog.java into Swift.\n\n        Input:\n\n        Method Name: onDismissSheet\n\n        Method Code: @Override\n                public void onDismissSheet() {\n                    dismiss();\n                }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onDismissSheet() {\n    dismiss()\n}\n```"
    },
    {
        "method_name": "handlePermissionChanged",
        "method_code": "private void handlePermissionChanged(List<QuickPermissionModel> quickPermissionModelList, int position) {\n        if (quickPermissionModelList.get(position).getPermissionName().equalsIgnoreCase(fileActivity.getResources().getString(R.string.link_share_allow_upload_and_editing))\n            || quickPermissionModelList.get(position).getPermissionName().equalsIgnoreCase(fileActivity.getResources().getString(R.string.link_share_editing))) {\n            if (ocShare.isFolder()) {\n                actions.onQuickPermissionChanged(ocShare,\n                                                 MAXIMUM_PERMISSIONS_FOR_FOLDER);\n            } else {\n                actions.onQuickPermissionChanged(ocShare,\n                                                 MAXIMUM_PERMISSIONS_FOR_FILE);\n            }\n        } else if (quickPermissionModelList.get(position).getPermissionName().equalsIgnoreCase(fileActivity.getResources().getString(R.string\n                                                                                                                                                                                                                                                                                                                     .link_share_view_only))) {\n            actions.onQuickPermissionChanged(ocShare,\n                                             READ_PERMISSION_FLAG);\n\n        } else if (quickPermissionModelList.get(position).getPermissionName().equalsIgnoreCase(fileActivity.getResources().getString(R.string\n                                                                                                                                         .link_share_file_drop))) {\n            actions.onQuickPermissionChanged(ocShare,\n                                             CREATE_PERMISSION_FLAG);\n        }\n        dismiss();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled handlePermissionChanged from QuickSharingPermissionsBottomSheetDialog.java into Swift.\n\n        Input:\n\n        Method Name: handlePermissionChanged\n\n        Method Code: private void handlePermissionChanged(List<QuickPermissionModel> quickPermissionModelList, int position) {\n        if (quickPermissionModelList.get(position).getPermissionName().equalsIgnoreCase(fileActivity.getResources().getString(R.string.link_share_allow_upload_and_editing))\n            || quickPermissionModelList.get(position).getPermissionName().equalsIgnoreCase(fileActivity.getResources().getString(R.string.link_share_editing))) {\n            if (ocShare.isFolder()) {\n                actions.onQuickPermissionChanged(ocShare,\n                                                 MAXIMUM_PERMISSIONS_FOR_FOLDER);\n            } else {\n                actions.onQuickPermissionChanged(ocShare,\n                                                 MAXIMUM_PERMISSIONS_FOR_FILE);\n            }\n        } else if (quickPermissionModelList.get(position).getPermissionName().equalsIgnoreCase(fileActivity.getResources().getString(R.string\n                                                                                                                                                                                                                                                                                                                     .link_share_view_only))) {\n            actions.onQuickPermissionChanged(ocShare,\n                                             READ_PERMISSION_FLAG);\n\n        } else if (quickPermissionModelList.get(position).getPermissionName().equalsIgnoreCase(fileActivity.getResources().getString(R.string\n                                                                                                                                         .link_share_file_drop))) {\n            actions.onQuickPermissionChanged(ocShare,\n                                             CREATE_PERMISSION_FLAG);\n        }\n        dismiss();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func handlePermissionChanged(quickPermissionModelList: [QuickPermissionModel], position: Int) {\n    if quickPermissionModelList[position].permissionName.caseInsensitiveCompare(fileActivity.resources.getString(R.string.link_share_allow_upload_and_editing)) == .orderedSame ||\n        quickPermissionModelList[position].permissionName.caseInsensitiveCompare(fileActivity.resources.getString(R.string.link_share_editing)) == .orderedSame {\n        if ocShare.isFolder() {\n            actions.onQuickPermissionChanged(ocShare, MAXIMUM_PERMISSIONS_FOR_FOLDER)\n        } else {\n            actions.onQuickPermissionChanged(ocShare, MAXIMUM_PERMISSIONS_FOR_FILE)\n        }\n    } else if quickPermissionModelList[position].permissionName.caseInsensitiveCompare(fileActivity.resources.getString(R.string.link_share_view_only)) == .orderedSame {\n        actions.onQuickPermissionChanged(ocShare, READ_PERMISSION_FLAG)\n    } else if quickPermissionModelList[position].permissionName.caseInsensitiveCompare(fileActivity.resources.getString(R.string.link_share_file_drop)) == .orderedSame {\n        actions.onQuickPermissionChanged(ocShare, CREATE_PERMISSION_FLAG)\n    }\n    dismiss()\n}\n```"
    },
    {
        "method_name": "getQuickPermissionList",
        "method_code": "private List<QuickPermissionModel> getQuickPermissionList() {\n\n        String[] permissionArray;\n        if (ocShare.isFolder()) {\n            permissionArray =\n                fileActivity.getResources().getStringArray(R.array.folder_share_permission_dialog_values);\n        } else {\n            permissionArray =\n                fileActivity.getResources().getStringArray(R.array.file_share_permission_dialog_values);\n        }\n        //get the checked item position\n        int checkedItem = SharingMenuHelper.getPermissionCheckedItem(fileActivity, ocShare, permissionArray);\n\n\n        final List<QuickPermissionModel> quickPermissionModelList = new ArrayList<>(permissionArray.length);\n        for (int i = 0; i < permissionArray.length; i++) {\n            QuickPermissionModel quickPermissionModel = new QuickPermissionModel(permissionArray[i], checkedItem == i);\n            quickPermissionModelList.add(quickPermissionModel);\n        }\n        return quickPermissionModelList;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getQuickPermissionList from QuickSharingPermissionsBottomSheetDialog.java into Swift.\n\n        Input:\n\n        Method Name: getQuickPermissionList\n\n        Method Code: private List<QuickPermissionModel> getQuickPermissionList() {\n\n        String[] permissionArray;\n        if (ocShare.isFolder()) {\n            permissionArray =\n                fileActivity.getResources().getStringArray(R.array.folder_share_permission_dialog_values);\n        } else {\n            permissionArray =\n                fileActivity.getResources().getStringArray(R.array.file_share_permission_dialog_values);\n        }\n        //get the checked item position\n        int checkedItem = SharingMenuHelper.getPermissionCheckedItem(fileActivity, ocShare, permissionArray);\n\n\n        final List<QuickPermissionModel> quickPermissionModelList = new ArrayList<>(permissionArray.length);\n        for (int i = 0; i < permissionArray.length; i++) {\n            QuickPermissionModel quickPermissionModel = new QuickPermissionModel(permissionArray[i], checkedItem == i);\n            quickPermissionModelList.add(quickPermissionModel);\n        }\n        return quickPermissionModelList;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getQuickPermissionList() -> [QuickPermissionModel] {\n    let permissionArray: [String]\n    if ocShare.isFolder() {\n        permissionArray = fileActivity.resources.stringArray(for: R.array.folder_share_permission_dialog_values)\n    } else {\n        permissionArray = fileActivity.resources.stringArray(for: R.array.file_share_permission_dialog_values)\n    }\n    \n    let checkedItem = SharingMenuHelper.getPermissionCheckedItem(fileActivity, ocShare, permissionArray)\n    \n    var quickPermissionModelList = [QuickPermissionModel]()\n    for (index, permission) in permissionArray.enumerated() {\n        let quickPermissionModel = QuickPermissionModel(permission, checkedItem == index)\n        quickPermissionModelList.append(quickPermissionModel)\n    }\n    return quickPermissionModelList\n}\n```"
    },
    {
        "method_name": "onStop",
        "method_code": "@Override\n    protected void onStop() {\n        super.onStop();\n        binding = null;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onStop from QuickSharingPermissionsBottomSheetDialog.java into Swift.\n\n        Input:\n\n        Method Name: onStop\n\n        Method Code: @Override\n    protected void onStop() {\n        super.onStop();\n        binding = null;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n    binding = nil\n}\n```"
    },
    {
        "method_name": "onQuickPermissionChanged",
        "method_code": "void onQuickPermissionChanged(OCShare share, int permission);",
        "prompt": "\n        Please translate the following Java (Android) method titled onQuickPermissionChanged from QuickSharingPermissionsBottomSheetDialog.java into Swift.\n\n        Input:\n\n        Method Name: onQuickPermissionChanged\n\n        Method Code: void onQuickPermissionChanged(OCShare share, int permission);\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onQuickPermissionChanged(share: OCShare, permission: Int) {\n    // Method implementation goes here\n}\n```"
    }
]