[
    {
        "method_name": "getConnection",
        "method_code": "public URLConnection getConnection() throws IOException {\n        if (mUsername != null) {\n            String protocol = mUrl.getProtocol();\n            String userPass = mUsername + \":\" + mPassword;\n\n            if (\"ftp\".equalsIgnoreCase(protocol) || \"ftps\".equalsIgnoreCase(protocol)) {\n                String external = mUrl.toExternalForm();\n                String end = external.substring(protocol.length() + HTTP_SEP.length());\n                return new URL(protocol + HTTP_SEP + userPass + \"@\" + end).openConnection();\n            }\n\n            if (\"http\".equalsIgnoreCase(protocol) || \"https\".equalsIgnoreCase(protocol)) {\n                String encoded = new String(new Base64().encode(userPass.getBytes(\"UTF-8\")));\n                URLConnection connection = mUrl.openConnection();\n                connection.setRequestProperty(\"Authorization\", \"Basic \" + encoded);\n                return connection;\n            }\n        }\n        return mUrl.openConnection();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getConnection from CalendarSource.java into Swift.\n\n        Input:\n\n        Method Name: getConnection\n\n        Method Code: public URLConnection getConnection() throws IOException {\n        if (mUsername != null) {\n            String protocol = mUrl.getProtocol();\n            String userPass = mUsername + \":\" + mPassword;\n\n            if (\"ftp\".equalsIgnoreCase(protocol) || \"ftps\".equalsIgnoreCase(protocol)) {\n                String external = mUrl.toExternalForm();\n                String end = external.substring(protocol.length() + HTTP_SEP.length());\n                return new URL(protocol + HTTP_SEP + userPass + \"@\" + end).openConnection();\n            }\n\n            if (\"http\".equalsIgnoreCase(protocol) || \"https\".equalsIgnoreCase(protocol)) {\n                String encoded = new String(new Base64().encode(userPass.getBytes(\"UTF-8\")));\n                URLConnection connection = mUrl.openConnection();\n                connection.setRequestProperty(\"Authorization\", \"Basic \" + encoded);\n                return connection;\n            }\n        }\n        return mUrl.openConnection();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport Foundation\n\nfunc getConnection() throws -> URLConnection {\n    if let username = mUsername {\n        let protocol = mUrl.scheme\n        let userPass = \"\\(username):\\(mPassword)\"\n        \n        if protocol?.caseInsensitiveCompare(\"ftp\") == .orderedSame || protocol?.caseInsensitiveCompare(\"ftps\") == .orderedSame {\n            let external = mUrl.absoluteString\n            let end = external.dropFirst(protocol!.count + HTTP_SEP.count)\n            let urlString = \"\\(protocol!)\\(HTTP_SEP)\\(userPass)@\\(end)\"\n            if let url = URL(string: urlString) {\n                return try url.openConnection()\n            }\n        }\n        \n        if protocol?.caseInsensitiveCompare(\"http\") == .orderedSame || protocol?.caseInsensitiveCompare(\"https\") == .orderedSame {\n            if let encodedData = userPass.data(using: .utf8)?.base64EncodedString() {\n                var request = URLRequest(url: mUrl)\n                request.setValue(\"Basic \\(encodedData)\", forHTTPHeaderField: \"Authorization\")\n                return try URLSession.shared.data(for: request)\n            }\n        }\n    }\n    return try mUrl.openConnection()\n}\n```"
    },
    {
        "method_name": "getStream",
        "method_code": "public InputStream getStream() throws IOException {\n        if (mUri != null) {\n            return context.getContentResolver().openInputStream(mUri);\n        }\n        URLConnection c = this.getConnection();\n        return c == null ? null : c.getInputStream();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getStream from CalendarSource.java into Swift.\n\n        Input:\n\n        Method Name: getStream\n\n        Method Code: public InputStream getStream() throws IOException {\n        if (mUri != null) {\n            return context.getContentResolver().openInputStream(mUri);\n        }\n        URLConnection c = this.getConnection();\n        return c == null ? null : c.getInputStream();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getStream() throws -> InputStream? {\n    if let uri = mUri {\n        return context.contentResolver.openInputStream(uri)\n    }\n    let connection = self.getConnection()\n    return connection?.inputStream\n}\n```"
    },
    {
        "method_name": "toString",
        "method_code": "@Override\n    public String toString() {\n        return mString;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled toString from CalendarSource.java into Swift.\n\n        Input:\n\n        Method Name: toString\n\n        Method Code: @Override\n    public String toString() {\n        return mString;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride var description: String {\n    return mString\n}\n```"
    }
]