[
    {
        "method_name": "beforeClass",
        "method_code": "@BeforeClass\n    public static void beforeClass() {\n        Bundle arguments = androidx.test.platform.app.InstrumentationRegistry.getArguments();\n        Uri baseUrl = Uri.parse(arguments.getString(\"TEST_SERVER_URL\"));\n\n        AccountManager platformAccountManager = AccountManager.get(targetContext);\n        UserAccountManager userAccountManager = UserAccountManagerImpl.fromContext(targetContext);\n\n        for (Account account : platformAccountManager.getAccounts()) {\n            platformAccountManager.removeAccountExplicitly(account);\n        }\n\n        String loginName = \"user1\";\n        String password = \"user1\";\n\n        Account temp = new Account(loginName + \"@\" + baseUrl, MainApp.getAccountType(targetContext));\n        platformAccountManager.addAccountExplicitly(temp, password, null);\n        platformAccountManager.setUserData(temp, AccountUtils.Constants.KEY_OC_ACCOUNT_VERSION,\n                                           Integer.toString(UserAccountManager.ACCOUNT_VERSION));\n        platformAccountManager.setUserData(temp, AccountUtils.Constants.KEY_OC_VERSION, \"14.0.0.0\");\n        platformAccountManager.setUserData(temp, AccountUtils.Constants.KEY_OC_BASE_URL, baseUrl.toString());\n        platformAccountManager.setUserData(temp, AccountUtils.Constants.KEY_USER_ID, loginName); // same as userId\n\n        account1 = userAccountManager.getAccountByName(loginName + \"@\" + baseUrl);\n        user1 = userAccountManager.getUser(account1.name).orElseThrow(IllegalAccessError::new);\n\n        loginName = \"user2\";\n        password = \"user2\";\n\n        temp = new Account(loginName + \"@\" + baseUrl, MainApp.getAccountType(targetContext));\n        platformAccountManager.addAccountExplicitly(temp, password, null);\n        platformAccountManager.setUserData(temp, AccountUtils.Constants.KEY_OC_ACCOUNT_VERSION,\n                                           Integer.toString(UserAccountManager.ACCOUNT_VERSION));\n        platformAccountManager.setUserData(temp, AccountUtils.Constants.KEY_OC_VERSION, \"14.0.0.0\");\n        platformAccountManager.setUserData(temp, AccountUtils.Constants.KEY_OC_BASE_URL, baseUrl.toString());\n        platformAccountManager.setUserData(temp, AccountUtils.Constants.KEY_USER_ID, loginName); // same as userId\n\n        account2 = userAccountManager.getAccountByName(loginName + \"@\" + baseUrl);\n        account2Name = loginName + \"@\" + baseUrl;\n        account2DisplayName = \"User Two@\" + baseUrl;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled beforeClass from DrawerActivityIT.java into Swift.\n\n        Input:\n\n        Method Name: beforeClass\n\n        Method Code: @BeforeClass\n    public static void beforeClass() {\n        Bundle arguments = androidx.test.platform.app.InstrumentationRegistry.getArguments();\n        Uri baseUrl = Uri.parse(arguments.getString(\"TEST_SERVER_URL\"));\n\n        AccountManager platformAccountManager = AccountManager.get(targetContext);\n        UserAccountManager userAccountManager = UserAccountManagerImpl.fromContext(targetContext);\n\n        for (Account account : platformAccountManager.getAccounts()) {\n            platformAccountManager.removeAccountExplicitly(account);\n        }\n\n        String loginName = \"user1\";\n        String password = \"user1\";\n\n        Account temp = new Account(loginName + \"@\" + baseUrl, MainApp.getAccountType(targetContext));\n        platformAccountManager.addAccountExplicitly(temp, password, null);\n        platformAccountManager.setUserData(temp, AccountUtils.Constants.KEY_OC_ACCOUNT_VERSION,\n                                           Integer.toString(UserAccountManager.ACCOUNT_VERSION));\n        platformAccountManager.setUserData(temp, AccountUtils.Constants.KEY_OC_VERSION, \"14.0.0.0\");\n        platformAccountManager.setUserData(temp, AccountUtils.Constants.KEY_OC_BASE_URL, baseUrl.toString());\n        platformAccountManager.setUserData(temp, AccountUtils.Constants.KEY_USER_ID, loginName); // same as userId\n\n        account1 = userAccountManager.getAccountByName(loginName + \"@\" + baseUrl);\n        user1 = userAccountManager.getUser(account1.name).orElseThrow(IllegalAccessError::new);\n\n        loginName = \"user2\";\n        password = \"user2\";\n\n        temp = new Account(loginName + \"@\" + baseUrl, MainApp.getAccountType(targetContext));\n        platformAccountManager.addAccountExplicitly(temp, password, null);\n        platformAccountManager.setUserData(temp, AccountUtils.Constants.KEY_OC_ACCOUNT_VERSION,\n                                           Integer.toString(UserAccountManager.ACCOUNT_VERSION));\n        platformAccountManager.setUserData(temp, AccountUtils.Constants.KEY_OC_VERSION, \"14.0.0.0\");\n        platformAccountManager.setUserData(temp, AccountUtils.Constants.KEY_OC_BASE_URL, baseUrl.toString());\n        platformAccountManager.setUserData(temp, AccountUtils.Constants.KEY_USER_ID, loginName); // same as userId\n\n        account2 = userAccountManager.getAccountByName(loginName + \"@\" + baseUrl);\n        account2Name = loginName + \"@\" + baseUrl;\n        account2DisplayName = \"User Two@\" + baseUrl;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport Foundation\n\nclass DrawerActivityIT {\n    static var account1: Account?\n    static var user1: User?\n    static var account2: Account?\n    static var account2Name: String?\n    static var account2DisplayName: String?\n\n    static func beforeClass() {\n        let arguments = ProcessInfo.processInfo.environment\n        guard let baseUrlString = arguments[\"TEST_SERVER_URL\"], let baseUrl = URL(string: baseUrlString) else {\n            return\n        }\n\n        let platformAccountManager = AccountManager.shared\n        let userAccountManager = UserAccountManagerImpl.fromContext(targetContext)\n\n        for account in platformAccountManager.accounts {\n            platformAccountManager.removeAccountExplicitly(account)\n        }\n\n        var loginName = \"user1\"\n        var password = \"user1\"\n\n        var temp = Account(username: \"\\(loginName)@\\(baseUrl)\", accountType: MainApp.getAccountType(targetContext))\n        platformAccountManager.addAccountExplicitly(temp, password: password, userData: nil)\n        platformAccountManager.setUserData(temp, key: AccountUtils.Constants.KEY_OC_ACCOUNT_VERSION, value: String(UserAccountManager.ACCOUNT_VERSION))\n        platformAccountManager.setUserData(temp, key: AccountUtils.Constants.KEY_OC_VERSION, value: \"14.0.0.0\")\n        platformAccountManager.setUserData(temp, key: AccountUtils.Constants.KEY_OC_BASE_URL, value: baseUrl.absoluteString)\n        platformAccountManager.setUserData(temp, key: AccountUtils.Constants.KEY_USER_ID, value: loginName)\n\n        account1 = userAccountManager.getAccountByName(\"\\(loginName)@\\(baseUrl)\")\n        user1 = userAccountManager.getUser(account1!.name)\n\n        loginName = \"user2\"\n        password = \"user2\"\n\n        temp = Account(username: \"\\(loginName)@\\(baseUrl)\", accountType: MainApp.getAccountType(targetContext))\n        platformAccountManager.addAccountExplicitly(temp, password: password, userData: nil)\n        platformAccountManager.setUserData(temp, key: AccountUtils.Constants.KEY_OC_ACCOUNT_VERSION, value: String(UserAccountManager.ACCOUNT_VERSION))\n        platformAccountManager.setUserData(temp, key: AccountUtils.Constants.KEY_OC_VERSION, value: \"14.0.0.0\")\n        platformAccountManager.setUserData(temp, key: AccountUtils.Constants.KEY_OC_BASE_URL, value: baseUrl.absoluteString)\n        platformAccountManager.setUserData(temp, key: AccountUtils.Constants.KEY_USER_ID, value: loginName)\n\n        account2 = userAccountManager.getAccountByName(\"\\(loginName)@\\(baseUrl)\")\n        account2Name = \"\\(loginName)@\\(baseUrl)\"\n        account2DisplayName = \"User Two@\\(baseUrl)\"\n    }\n}\n```"
    },
    {
        "method_name": "switchAccountViaAccountList",
        "method_code": "@Test\n    public void switchAccountViaAccountList() {\n        FileDisplayActivity sut = activityRule.launchActivity(null);\n\n        sut.setUser(user1);\n\n        assertEquals(account1, sut.getUser().get().toPlatformAccount());\n\n        onView(withId(R.id.switch_account_button)).perform(click());\n\n        onView(anyOf(withText(account2Name), withText(account2DisplayName))).perform(click());\n\n        waitForIdleSync();\n\n        assertEquals(account2, sut.getUser().get().toPlatformAccount());\n\n        onView(withId(R.id.switch_account_button)).perform(click());\n        onView(withText(account1.name)).perform(click());\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled switchAccountViaAccountList from DrawerActivityIT.java into Swift.\n\n        Input:\n\n        Method Name: switchAccountViaAccountList\n\n        Method Code: @Test\n    public void switchAccountViaAccountList() {\n        FileDisplayActivity sut = activityRule.launchActivity(null);\n\n        sut.setUser(user1);\n\n        assertEquals(account1, sut.getUser().get().toPlatformAccount());\n\n        onView(withId(R.id.switch_account_button)).perform(click());\n\n        onView(anyOf(withText(account2Name), withText(account2DisplayName))).perform(click());\n\n        waitForIdleSync();\n\n        assertEquals(account2, sut.getUser().get().toPlatformAccount());\n\n        onView(withId(R.id.switch_account_button)).perform(click());\n        onView(withText(account1.name)).perform(click());\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc switchAccountViaAccountList() {\n    let sut = activityRule.launchActivity(nil)\n\n    sut.setUser(user1)\n\n    XCTAssertEqual(account1, sut.getUser().get().toPlatformAccount())\n\n    onView(withId: R.id.switch_account_button).perform(click())\n\n    onView(anyOf(withText: account2Name, withText: account2DisplayName)).perform(click())\n\n    waitForIdleSync()\n\n    XCTAssertEqual(account2, sut.getUser().get().toPlatformAccount())\n\n    onView(withId: R.id.switch_account_button).perform(click())\n    onView(withText: account1.name).perform(click())\n}\n```"
    }
]