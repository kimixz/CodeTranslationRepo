[
    {
        "method_name": "getShareType",
        "method_code": "ublic static ShareType getShareType(String authority) {\n\n        return sShareTypes.get(authority);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getShareType from UsersAndGroupsSearchProvider.java into Swift.\n\n        Input:\n\n        Method Name: getShareType\n\n        Method Code: ublic static ShareType getShareType(String authority) {\n\n        return sShareTypes.get(authority);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func getShareType(authority: String) -> ShareType? {\n    return sShareTypes[authority]\n}\n```"
    },
    {
        "method_name": "setActionShareWith",
        "method_code": "rivate static void setActionShareWith(@NonNull Context context) {\n        ACTION_SHARE_WITH = context.getString(R.string.users_and_groups_share_with);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setActionShareWith from UsersAndGroupsSearchProvider.java into Swift.\n\n        Input:\n\n        Method Name: setActionShareWith\n\n        Method Code: rivate static void setActionShareWith(@NonNull Context context) {\n        ACTION_SHARE_WITH = context.getString(R.string.users_and_groups_share_with);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate static func setActionShareWith(context: Context) {\n    ACTION_SHARE_WITH = context.getString(R.string.users_and_groups_share_with)\n}\n```"
    },
    {
        "method_name": "getType",
        "method_code": "Nullable\n    @Override\n    public String getType(@NonNull Uri uri) {\n        // TODO implement\n        return null;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getType from UsersAndGroupsSearchProvider.java into Swift.\n\n        Input:\n\n        Method Name: getType\n\n        Method Code: Nullable\n    @Override\n    public String getType(@NonNull Uri uri) {\n        // TODO implement\n        return null;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getType(uri: URL) -> String? {\n    // TODO implement\n    return nil\n}\n```"
    },
    {
        "method_name": "onCreate",
        "method_code": "Override\n    public boolean onCreate() {\n        AndroidInjection.inject(this);\n\n        if (getContext() == null) {\n            return false;\n        }\n\n        AUTHORITY = getContext().getString(R.string.users_and_groups_search_authority);\n        setActionShareWith(getContext());\n        DATA_USER = AUTHORITY + \".data.user\";\n        DATA_GROUP = AUTHORITY + \".data.group\";\n        DATA_ROOM = AUTHORITY + \".data.room\";\n        DATA_REMOTE = AUTHORITY + \".data.remote\";\n        DATA_EMAIL = AUTHORITY + \".data.email\";\n        DATA_CIRCLE = AUTHORITY + \".data.circle\";\n\n        sShareTypes.put(DATA_USER, ShareType.USER);\n        sShareTypes.put(DATA_GROUP, ShareType.GROUP);\n        sShareTypes.put(DATA_ROOM, ShareType.ROOM);\n        sShareTypes.put(DATA_REMOTE, ShareType.FEDERATED);\n        sShareTypes.put(DATA_EMAIL, ShareType.EMAIL);\n        sShareTypes.put(DATA_CIRCLE, ShareType.CIRCLE);\n\n        mUriMatcher = new UriMatcher(UriMatcher.NO_MATCH);\n        mUriMatcher.addURI(AUTHORITY, SearchManager.SUGGEST_URI_PATH_QUERY + \"/*\", SEARCH);\n\n        return true;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreate from UsersAndGroupsSearchProvider.java into Swift.\n\n        Input:\n\n        Method Name: onCreate\n\n        Method Code: Override\n    public boolean onCreate() {\n        AndroidInjection.inject(this);\n\n        if (getContext() == null) {\n            return false;\n        }\n\n        AUTHORITY = getContext().getString(R.string.users_and_groups_search_authority);\n        setActionShareWith(getContext());\n        DATA_USER = AUTHORITY + \".data.user\";\n        DATA_GROUP = AUTHORITY + \".data.group\";\n        DATA_ROOM = AUTHORITY + \".data.room\";\n        DATA_REMOTE = AUTHORITY + \".data.remote\";\n        DATA_EMAIL = AUTHORITY + \".data.email\";\n        DATA_CIRCLE = AUTHORITY + \".data.circle\";\n\n        sShareTypes.put(DATA_USER, ShareType.USER);\n        sShareTypes.put(DATA_GROUP, ShareType.GROUP);\n        sShareTypes.put(DATA_ROOM, ShareType.ROOM);\n        sShareTypes.put(DATA_REMOTE, ShareType.FEDERATED);\n        sShareTypes.put(DATA_EMAIL, ShareType.EMAIL);\n        sShareTypes.put(DATA_CIRCLE, ShareType.CIRCLE);\n\n        mUriMatcher = new UriMatcher(UriMatcher.NO_MATCH);\n        mUriMatcher.addURI(AUTHORITY, SearchManager.SUGGEST_URI_PATH_QUERY + \"/*\", SEARCH);\n\n        return true;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onCreate() -> Bool {\n    AndroidInjection.inject(self)\n\n    guard let context = getContext() else {\n        return false\n    }\n\n    AUTHORITY = context.getString(R.string.users_and_groups_search_authority)\n    setActionShareWith(context)\n    DATA_USER = AUTHORITY + \".data.user\"\n    DATA_GROUP = AUTHORITY + \".data.group\"\n    DATA_ROOM = AUTHORITY + \".data.room\"\n    DATA_REMOTE = AUTHORITY + \".data.remote\"\n    DATA_EMAIL = AUTHORITY + \".data.email\"\n    DATA_CIRCLE = AUTHORITY + \".data.circle\"\n\n    sShareTypes[DATA_USER] = ShareType.USER\n    sShareTypes[DATA_GROUP] = ShareType.GROUP\n    sShareTypes[DATA_ROOM] = ShareType.ROOM\n    sShareTypes[DATA_REMOTE] = ShareType.FEDERATED\n    sShareTypes[DATA_EMAIL] = ShareType.EMAIL\n    sShareTypes[DATA_CIRCLE] = ShareType.CIRCLE\n\n    mUriMatcher = UriMatcher(UriMatcher.NO_MATCH)\n    mUriMatcher.addURI(AUTHORITY, SearchManager.SUGGEST_URI_PATH_QUERY + \"/*\", SEARCH)\n\n    return true\n}\n```"
    },
    {
        "method_name": "query",
        "method_code": "Nullable\n    @Override\n    public Cursor query(@NonNull Uri uri, String[] projection, String selection, String[] selectionArgs,\n                        String sortOrder) {\n        Log_OC.d(TAG, \"query received in thread \" + Thread.currentThread().getName());\n\n        int match = mUriMatcher.match(uri);\n        if (match == SEARCH) {\n            return searchForUsersOrGroups(uri);\n        }\n        return null;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled query from UsersAndGroupsSearchProvider.java into Swift.\n\n        Input:\n\n        Method Name: query\n\n        Method Code: Nullable\n    @Override\n    public Cursor query(@NonNull Uri uri, String[] projection, String selection, String[] selectionArgs,\n                        String sortOrder) {\n        Log_OC.d(TAG, \"query received in thread \" + Thread.currentThread().getName());\n\n        int match = mUriMatcher.match(uri);\n        if (match == SEARCH) {\n            return searchForUsersOrGroups(uri);\n        }\n        return null;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc query(uri: URL, projection: [String]?, selection: String?, selectionArgs: [String]?, sortOrder: String?) -> Cursor? {\n    Log_OC.d(TAG, \"query received in thread \\(Thread.current.name ?? \"unknown\")\")\n\n    let match = mUriMatcher.match(uri)\n    if match == SEARCH {\n        return searchForUsersOrGroups(uri: uri)\n    }\n    return nil\n}\n```"
    },
    {
        "method_name": "searchForUsersOrGroups",
        "method_code": "rivate Cursor searchForUsersOrGroups(Uri uri) {\n\n        // TODO check searchConfig and filter results\n        Log.d(TAG, \"searchForUsersOrGroups: searchConfig only users: \" + searchConfig.getSearchOnlyUsers());\n\n        String lastPathSegment = uri.getLastPathSegment();\n\n        if (lastPathSegment == null) {\n            throw new IllegalArgumentException(\"Wrong URI passed!\");\n        }\n\n        // need to trust on the AccountUtils to get the current account since the query in the client side is not\n        // directly started by our code, but from SearchView implementation\n        User user = accountManager.getUser();\n\n        String userQuery = lastPathSegment.toLowerCase(Locale.ROOT);\n\n        // request to the OC server about users and groups matching userQuery\n        GetShareesRemoteOperation searchRequest = new GetShareesRemoteOperation(userQuery,\n                                                                                REQUESTED_PAGE,\n                                                                                RESULTS_PER_PAGE);\n        RemoteOperationResult<ArrayList<JSONObject>> result = searchRequest.execute(user, getContext());\n        List<JSONObject> names = new ArrayList<>();\n\n        if (result.isSuccess()) {\n            names = result.getResultData();\n        } else {\n            showErrorMessage(result);\n        }\n\n        MatrixCursor response = null;\n        // convert the responses from the OC server to the expected format\n        if (names.size() > 0) {\n            if (getContext() == null) {\n                throw new IllegalArgumentException(\"Context may not be null!\");\n            }\n\n            response = new MatrixCursor(COLUMNS);\n\n            Uri userBaseUri = new Uri.Builder().scheme(CONTENT).authority(DATA_USER).build();\n            Uri groupBaseUri = new Uri.Builder().scheme(CONTENT).authority(DATA_GROUP).build();\n            Uri roomBaseUri = new Uri.Builder().scheme(CONTENT).authority(DATA_ROOM).build();\n            Uri remoteBaseUri = new Uri.Builder().scheme(CONTENT).authority(DATA_REMOTE).build();\n            Uri emailBaseUri = new Uri.Builder().scheme(CONTENT).authority(DATA_EMAIL).build();\n            Uri circleBaseUri = new Uri.Builder().scheme(CONTENT).authority(DATA_CIRCLE).build();\n\n            FileDataStorageManager manager = new FileDataStorageManager(user,\n                                                                        getContext().getContentResolver());\n            boolean federatedShareAllowed = manager.getCapability(user.getAccountName())\n                .getFilesSharingFederationOutgoing()\n                .isTrue();\n\n            try {\n                Iterator<JSONObject> namesIt = names.iterator();\n                JSONObject item;\n                String displayName;\n                String subline = null;\n                Object icon = 0;\n                Uri dataUri;\n                int count = 0;\n                while (namesIt.hasNext()) {\n                    item = namesIt.next();\n                    dataUri = null;\n                    displayName = null;\n                    String userName = item.getString(GetShareesRemoteOperation.PROPERTY_LABEL);\n                    String name = item.isNull(\"name\") ? \"\" : item.getString(\"name\");\n                    JSONObject value = item.getJSONObject(GetShareesRemoteOperation.NODE_VALUE);\n                    ShareType type = ShareType.fromValue(value.getInt(GetShareesRemoteOperation.PROPERTY_SHARE_TYPE));\n                    String shareWith = value.getString(GetShareesRemoteOperation.PROPERTY_SHARE_WITH);\n\n                    Status status;\n                    JSONObject statusObject = item.optJSONObject(PROPERTY_STATUS);\n\n                    if (statusObject != null) {\n                        status = new Status(\n                            StatusType.valueOf(statusObject.getString(PROPERTY_STATUS).toUpperCase(Locale.US)),\n                            statusObject.isNull(PROPERTY_MESSAGE) ? \"\" : statusObject.getString(PROPERTY_MESSAGE),\n                            statusObject.isNull(PROPERTY_ICON) ? \"\" : statusObject.getString(PROPERTY_ICON),\n                            statusObject.isNull(PROPERTY_CLEAR_AT) ? -1 : statusObject.getLong(PROPERTY_CLEAR_AT));\n                    } else {\n                        status = new Status(StatusType.OFFLINE, \"\", \"\", -1);\n                    }\n\n                    if (searchConfig.getSearchOnlyUsers() && type != ShareType.USER) {\n                        // skip all types but users, as E2E secure share is only allowed to users on same server\n                        continue;\n                    }\n\n                    switch (type) {\n                        case GROUP:\n                            displayName = userName;\n                            icon = R.drawable.ic_group;\n                            dataUri = Uri.withAppendedPath(groupBaseUri, shareWith);\n                            break;\n\n                        case FEDERATED:\n                            if (federatedShareAllowed) {\n                                icon = R.drawable.ic_user;\n                                dataUri = Uri.withAppendedPath(remoteBaseUri, shareWith);\n\n                                if (userName.equals(shareWith)) {\n                                    displayName = name;\n                                    subline = getContext().getString(R.string.remote);\n                                } else {\n                                    String[] uriSplitted = shareWith.split(\"@\");\n                                    displayName = name;\n                                    subline = getContext().getString(R.string.share_known_remote_on_clarification,\n                                                                     uriSplitted[uriSplitted.length - 1]);\n                                }\n                            }\n                            break;\n\n                        case USER:\n                            displayName = userName;\n                            subline = (status.getMessage() == null || status.getMessage().isEmpty()) ? null :\n                                status.getMessage();\n                            Uri.Builder builder = Uri.parse(\"content://\" + AUTHORITY + \"/icon\").buildUpon();\n\n                            builder.appendQueryParameter(\"shareWith\", shareWith);\n                            builder.appendQueryParameter(\"displayName\", displayName);\n                            builder.appendQueryParameter(\"status\", status.getStatus().toString());\n\n                            if (!TextUtils.isEmpty(status.getIcon()) && !\"null\".equals(status.getIcon())) {\n                                builder.appendQueryParameter(\"icon\", status.getIcon());\n                            }\n\n                            icon = builder.build();\n\n                            dataUri = Uri.withAppendedPath(userBaseUri, shareWith);\n                            break;\n\n                        case EMAIL:\n                            icon = R.drawable.ic_email;\n                            displayName = name;\n                            subline = shareWith;\n                            dataUri = Uri.withAppendedPath(emailBaseUri, shareWith);\n                            break;\n\n                        case ROOM:\n                            icon = R.drawable.ic_talk;\n                            displayName = userName;\n                            dataUri = Uri.withAppendedPath(roomBaseUri, shareWith);\n                            break;\n\n                        case CIRCLE:\n                            icon = R.drawable.ic_circles;\n                            displayName = userName;\n                            dataUri = Uri.withAppendedPath(circleBaseUri, shareWith);\n                            break;\n\n                        default:\n                            break;\n                    }\n\n                    if (displayName != null && dataUri != null) {\n                        response.newRow()\n                            .add(count++)             // BaseColumns._ID\n                            .add(displayName)         // SearchManager.SUGGEST_COLUMN_TEXT_1\n                            .add(subline)             // SearchManager.SUGGEST_COLUMN_TEXT_2\n                            .add(icon)                // SearchManager.SUGGEST_COLUMN_ICON_1\n                            .add(dataUri);\n                    }\n                }\n\n            } catch (JSONException e) {\n                Log_OC.e(TAG, \"Exception while parsing data of users/groups\", e);\n            }\n        }\n\n        return response;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled searchForUsersOrGroups from UsersAndGroupsSearchProvider.java into Swift.\n\n        Input:\n\n        Method Name: searchForUsersOrGroups\n\n        Method Code: rivate Cursor searchForUsersOrGroups(Uri uri) {\n\n        // TODO check searchConfig and filter results\n        Log.d(TAG, \"searchForUsersOrGroups: searchConfig only users: \" + searchConfig.getSearchOnlyUsers());\n\n        String lastPathSegment = uri.getLastPathSegment();\n\n        if (lastPathSegment == null) {\n            throw new IllegalArgumentException(\"Wrong URI passed!\");\n        }\n\n        // need to trust on the AccountUtils to get the current account since the query in the client side is not\n        // directly started by our code, but from SearchView implementation\n        User user = accountManager.getUser();\n\n        String userQuery = lastPathSegment.toLowerCase(Locale.ROOT);\n\n        // request to the OC server about users and groups matching userQuery\n        GetShareesRemoteOperation searchRequest = new GetShareesRemoteOperation(userQuery,\n                                                                                REQUESTED_PAGE,\n                                                                                RESULTS_PER_PAGE);\n        RemoteOperationResult<ArrayList<JSONObject>> result = searchRequest.execute(user, getContext());\n        List<JSONObject> names = new ArrayList<>();\n\n        if (result.isSuccess()) {\n            names = result.getResultData();\n        } else {\n            showErrorMessage(result);\n        }\n\n        MatrixCursor response = null;\n        // convert the responses from the OC server to the expected format\n        if (names.size() > 0) {\n            if (getContext() == null) {\n                throw new IllegalArgumentException(\"Context may not be null!\");\n            }\n\n            response = new MatrixCursor(COLUMNS);\n\n            Uri userBaseUri = new Uri.Builder().scheme(CONTENT).authority(DATA_USER).build();\n            Uri groupBaseUri = new Uri.Builder().scheme(CONTENT).authority(DATA_GROUP).build();\n            Uri roomBaseUri = new Uri.Builder().scheme(CONTENT).authority(DATA_ROOM).build();\n            Uri remoteBaseUri = new Uri.Builder().scheme(CONTENT).authority(DATA_REMOTE).build();\n            Uri emailBaseUri = new Uri.Builder().scheme(CONTENT).authority(DATA_EMAIL).build();\n            Uri circleBaseUri = new Uri.Builder().scheme(CONTENT).authority(DATA_CIRCLE).build();\n\n            FileDataStorageManager manager = new FileDataStorageManager(user,\n                                                                        getContext().getContentResolver());\n            boolean federatedShareAllowed = manager.getCapability(user.getAccountName())\n                .getFilesSharingFederationOutgoing()\n                .isTrue();\n\n            try {\n                Iterator<JSONObject> namesIt = names.iterator();\n                JSONObject item;\n                String displayName;\n                String subline = null;\n                Object icon = 0;\n                Uri dataUri;\n                int count = 0;\n                while (namesIt.hasNext()) {\n                    item = namesIt.next();\n                    dataUri = null;\n                    displayName = null;\n                    String userName = item.getString(GetShareesRemoteOperation.PROPERTY_LABEL);\n                    String name = item.isNull(\"name\") ? \"\" : item.getString(\"name\");\n                    JSONObject value = item.getJSONObject(GetShareesRemoteOperation.NODE_VALUE);\n                    ShareType type = ShareType.fromValue(value.getInt(GetShareesRemoteOperation.PROPERTY_SHARE_TYPE));\n                    String shareWith = value.getString(GetShareesRemoteOperation.PROPERTY_SHARE_WITH);\n\n                    Status status;\n                    JSONObject statusObject = item.optJSONObject(PROPERTY_STATUS);\n\n                    if (statusObject != null) {\n                        status = new Status(\n                            StatusType.valueOf(statusObject.getString(PROPERTY_STATUS).toUpperCase(Locale.US)),\n                            statusObject.isNull(PROPERTY_MESSAGE) ? \"\" : statusObject.getString(PROPERTY_MESSAGE),\n                            statusObject.isNull(PROPERTY_ICON) ? \"\" : statusObject.getString(PROPERTY_ICON),\n                            statusObject.isNull(PROPERTY_CLEAR_AT) ? -1 : statusObject.getLong(PROPERTY_CLEAR_AT));\n                    } else {\n                        status = new Status(StatusType.OFFLINE, \"\", \"\", -1);\n                    }\n\n                    if (searchConfig.getSearchOnlyUsers() && type != ShareType.USER) {\n                        // skip all types but users, as E2E secure share is only allowed to users on same server\n                        continue;\n                    }\n\n                    switch (type) {\n                        case GROUP:\n                            displayName = userName;\n                            icon = R.drawable.ic_group;\n                            dataUri = Uri.withAppendedPath(groupBaseUri, shareWith);\n                            break;\n\n                        case FEDERATED:\n                            if (federatedShareAllowed) {\n                                icon = R.drawable.ic_user;\n                                dataUri = Uri.withAppendedPath(remoteBaseUri, shareWith);\n\n                                if (userName.equals(shareWith)) {\n                                    displayName = name;\n                                    subline = getContext().getString(R.string.remote);\n                                } else {\n                                    String[] uriSplitted = shareWith.split(\"@\");\n                                    displayName = name;\n                                    subline = getContext().getString(R.string.share_known_remote_on_clarification,\n                                                                     uriSplitted[uriSplitted.length - 1]);\n                                }\n                            }\n                            break;\n\n                        case USER:\n                            displayName = userName;\n                            subline = (status.getMessage() == null || status.getMessage().isEmpty()) ? null :\n                                status.getMessage();\n                            Uri.Builder builder = Uri.parse(\"content://\" + AUTHORITY + \"/icon\").buildUpon();\n\n                            builder.appendQueryParameter(\"shareWith\", shareWith);\n                            builder.appendQueryParameter(\"displayName\", displayName);\n                            builder.appendQueryParameter(\"status\", status.getStatus().toString());\n\n                            if (!TextUtils.isEmpty(status.getIcon()) && !\"null\".equals(status.getIcon())) {\n                                builder.appendQueryParameter(\"icon\", status.getIcon());\n                            }\n\n                            icon = builder.build();\n\n                            dataUri = Uri.withAppendedPath(userBaseUri, shareWith);\n                            break;\n\n                        case EMAIL:\n                            icon = R.drawable.ic_email;\n                            displayName = name;\n                            subline = shareWith;\n                            dataUri = Uri.withAppendedPath(emailBaseUri, shareWith);\n                            break;\n\n                        case ROOM:\n                            icon = R.drawable.ic_talk;\n                            displayName = userName;\n                            dataUri = Uri.withAppendedPath(roomBaseUri, shareWith);\n                            break;\n\n                        case CIRCLE:\n                            icon = R.drawable.ic_circles;\n                            displayName = userName;\n                            dataUri = Uri.withAppendedPath(circleBaseUri, shareWith);\n                            break;\n\n                        default:\n                            break;\n                    }\n\n                    if (displayName != null && dataUri != null) {\n                        response.newRow()\n                            .add(count++)             // BaseColumns._ID\n                            .add(displayName)         // SearchManager.SUGGEST_COLUMN_TEXT_1\n                            .add(subline)             // SearchManager.SUGGEST_COLUMN_TEXT_2\n                            .add(icon)                // SearchManager.SUGGEST_COLUMN_ICON_1\n                            .add(dataUri);\n                    }\n                }\n\n            } catch (JSONException e) {\n                Log_OC.e(TAG, \"Exception while parsing data of users/groups\", e);\n            }\n        }\n\n        return response;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func searchForUsersOrGroups(uri: URL) -> Cursor? {\n    // TODO check searchConfig and filter results\n    print(\"searchForUsersOrGroups: searchConfig only users: \\(searchConfig.getSearchOnlyUsers())\")\n\n    guard let lastPathComponent = uri.lastPathComponent else {\n        fatalError(\"Wrong URI passed!\")\n    }\n\n    // need to trust on the AccountUtils to get the current account since the query in the client side is not\n    // directly started by our code, but from SearchView implementation\n    let user = accountManager.getUser()\n\n    let userQuery = lastPathComponent.lowercased()\n\n    // request to the OC server about users and groups matching userQuery\n    let searchRequest = GetShareesRemoteOperation(userQuery: userQuery, requestedPage: REQUESTED_PAGE, resultsPerPage: RESULTS_PER_PAGE)\n    let result = searchRequest.execute(user: user, context: getContext())\n    var names: [JSONObject] = []\n\n    if result.isSuccess() {\n        names = result.getResultData()\n    } else {\n        showErrorMessage(result)\n    }\n\n    var response: MatrixCursor? = nil\n    // convert the responses from the OC server to the expected format\n    if !names.isEmpty {\n        guard let context = getContext() else {\n            fatalError(\"Context may not be null!\")\n        }\n\n        response = MatrixCursor(columns: COLUMNS)\n\n        let userBaseUri = URL(string: \"\\(CONTENT)://\\(DATA_USER)\")!\n        let groupBaseUri = URL(string: \"\\(CONTENT)://\\(DATA_GROUP)\")!\n        let roomBaseUri = URL(string: \"\\(CONTENT)://\\(DATA_ROOM)\")!\n        let remoteBaseUri = URL(string: \"\\(CONTENT)://\\(DATA_REMOTE)\")!\n        let emailBaseUri = URL(string: \"\\(CONTENT)://\\(DATA_EMAIL)\")!\n        let circleBaseUri = URL(string: \"\\(CONTENT)://\\(DATA_CIRCLE)\")!\n\n        let manager = FileDataStorageManager(user: user, contentResolver: context.contentResolver)\n        let federatedShareAllowed = manager.getCapability(accountName: user.getAccountName())\n            .getFilesSharingFederationOutgoing()\n            .isTrue()\n\n        do {\n            var count = 0\n            for item in names {\n                var dataUri: URL? = nil\n                var displayName: String? = nil\n                var subline: String? = nil\n                var icon: Any = 0\n\n                let userName = item.getString(GetShareesRemoteOperation.PROPERTY_LABEL)\n                let name = item.isNull(\"name\") ? \"\" : item.getString(\"name\")\n                let value = item.getJSONObject(GetShareesRemoteOperation.NODE_VALUE)\n                let type = ShareType.fromValue(value.getInt(GetShareesRemoteOperation.PROPERTY_SHARE_TYPE))\n                let shareWith = value.getString(GetShareesRemoteOperation.PROPERTY_SHARE_WITH)\n\n                var status: Status\n                if let statusObject = item.optJSONObject(PROPERTY_STATUS) {\n                    status = Status(\n                        statusType: StatusType(rawValue: statusObject.getString(PROPERTY_STATUS).uppercased()) ?? .OFFLINE,\n                        message: statusObject.isNull(PROPERTY_MESSAGE) ? \"\" : statusObject.getString(PROPERTY_MESSAGE),\n                        icon: statusObject.isNull(PROPERTY_ICON) ? \"\" : statusObject.getString(PROPERTY_ICON),\n                        clearAt: statusObject.isNull(PROPERTY_CLEAR_AT) ? -1 : statusObject.getLong(PROPERTY_CLEAR_AT)\n                    )\n                } else {\n                    status = Status(statusType: .OFFLINE, message: \"\", icon: \"\", clearAt: -1)\n                }\n\n                if searchConfig.getSearchOnlyUsers() && type != .USER {\n                    // skip all types but users, as E2E secure share is only allowed to users on same server\n                    continue\n                }\n\n                switch type {\n                case .GROUP:\n                    displayName = userName\n                    icon = R.drawable.ic_group\n                    dataUri = groupBaseUri.appendingPathComponent(shareWith)\n\n                case .FEDERATED:\n                    if federatedShareAllowed {\n                        icon = R.drawable.ic_user\n                        dataUri = remoteBaseUri.appendingPathComponent(shareWith)\n\n                        if userName == shareWith {\n                            displayName = name\n                            subline = context.getString(R.string.remote)\n                        } else {\n                            let uriSplitted = shareWith.split(separator: \"@\")\n                            displayName = name\n                            subline = context.getString(R.string.share_known_remote_on_clarification, uriSplitted.last ?? \"\")\n                        }\n                    }\n\n                case .USER:\n                    displayName = userName\n                    subline = status.message.isEmpty ? nil : status.message\n                    var builder = URLComponents(string: \"content://\\(AUTHORITY)/icon\")!\n                    builder.queryItems = [\n                        URLQueryItem(name: \"shareWith\", value: shareWith),\n                        URLQueryItem(name: \"displayName\", value: displayName),\n                        URLQueryItem(name: \"status\", value: status.statusType.rawValue)\n                    ]\n\n                    if !status.icon.isEmpty && status.icon != \"null\" {\n                        builder.queryItems?.append(URLQueryItem(name: \"icon\", value: status.icon))\n                    }\n\n                    icon = builder.url!\n                    dataUri = userBaseUri.appendingPathComponent(shareWith)\n\n                case .EMAIL:\n                    icon = R.drawable.ic_email\n                    displayName = name\n                    subline = shareWith\n                    dataUri = emailBaseUri.appendingPathComponent(shareWith)\n\n                case .ROOM:\n                    icon = R.drawable.ic_talk\n                    displayName = userName\n                    dataUri = roomBaseUri.appendingPathComponent(shareWith)\n\n                case .CIRCLE:\n                    icon = R.drawable.ic_circles\n                    displayName = userName\n                    dataUri = circleBaseUri.appendingPathComponent(shareWith)\n\n                default:\n                    break\n                }\n\n                if let displayName = displayName, let dataUri = dataUri {\n                    response?.newRow()\n                        .add(count)             // BaseColumns._ID\n                        .add(displayName)       // SearchManager.SUGGEST_COLUMN_TEXT_1\n                        .add(subline)           // SearchManager.SUGGEST_COLUMN_TEXT_2\n                        .add(icon)              // SearchManager.SUGGEST_COLUMN_ICON_1\n                        .add(dataUri)\n                    count += 1\n                }\n            }\n        } catch {\n            print(\"Exception while parsing data of users/groups: \\(error)\")\n        }\n    }\n\n    return response\n}\n```"
    },
    {
        "method_name": "insert",
        "method_code": "Nullable\n    @Override\n    public Uri insert(@NonNull Uri uri, ContentValues values) {\n        return null;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled insert from UsersAndGroupsSearchProvider.java into Swift.\n\n        Input:\n\n        Method Name: insert\n\n        Method Code: Nullable\n    @Override\n    public Uri insert(@NonNull Uri uri, ContentValues values) {\n        return null;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc insert(uri: URL, values: [String: Any]) -> URL? {\n    return nil\n}\n```"
    },
    {
        "method_name": "delete",
        "method_code": "Override\n    public int delete(@NonNull Uri uri, String selection, String[] selectionArgs) {\n        return 0;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled delete from UsersAndGroupsSearchProvider.java into Swift.\n\n        Input:\n\n        Method Name: delete\n\n        Method Code: Override\n    public int delete(@NonNull Uri uri, String selection, String[] selectionArgs) {\n        return 0;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func delete(_ uri: URL, selection: String?, selectionArgs: [String]?) -> Int {\n    return 0\n}\n```"
    },
    {
        "method_name": "update",
        "method_code": "Override\n    public int update(@NonNull Uri uri, ContentValues values, String selection, String[] selectionArgs) {\n        return 0;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled update from UsersAndGroupsSearchProvider.java into Swift.\n\n        Input:\n\n        Method Name: update\n\n        Method Code: Override\n    public int update(@NonNull Uri uri, ContentValues values, String selection, String[] selectionArgs) {\n        return 0;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func update(_ uri: URL, values: [String: Any], selection: String?, selectionArgs: [String]?) -> Int {\n    return 0\n}\n```"
    },
    {
        "method_name": "openFile",
        "method_code": "Nullable\n    @Override\n    @SuppressFBWarnings(\"IOI_USE_OF_FILE_STREAM_CONSTRUCTORS\") // TODO remove with API26\n    public ParcelFileDescriptor openFile(@NonNull Uri uri, @NonNull String mode) throws FileNotFoundException {\n        ArbitraryDataProvider arbitraryDataProvider = new ArbitraryDataProviderImpl(getContext());\n\n        String userId = uri.getQueryParameter(\"shareWith\");\n        String displayName = uri.getQueryParameter(\"displayName\");\n        String accountName = accountManager.getUser().getAccountName();\n        String serverName = accountName.substring(accountName.lastIndexOf('@') + 1);\n\n        String eTag = arbitraryDataProvider.getValue(userId + \"@\" + serverName, ThumbnailsCacheManager.AVATAR);\n        String avatarKey = \"a_\" + userId + \"_\" + serverName + \"_\" + eTag;\n\n        StatusType status = StatusType.valueOf(uri.getQueryParameter(\"status\"));\n        String icon = uri.getQueryParameter(\"icon\");\n\n        if (icon == null) {\n            icon = \"\";\n        }\n\n        Bitmap avatarBitmap = ThumbnailsCacheManager.getBitmapFromDiskCache(avatarKey);\n\n        if (avatarBitmap == null) {\n            float avatarRadius = getContext().getResources().getDimension(R.dimen.list_item_avatar_icon_radius);\n            avatarBitmap = BitmapUtils.drawableToBitmap(TextDrawable.createNamedAvatar(displayName, avatarRadius));\n        }\n\n        Bitmap avatar = BitmapUtils.createAvatarWithStatus(avatarBitmap, status, icon, getContext());\n\n        // create a file to write bitmap data\n        File f = new File(getContext().getCacheDir(), \"test\");\n        try {\n            if (f.exists()) {\n                if (!f.delete()) {\n                    throw new IllegalStateException(\"Existing file could not be deleted!\");\n                }\n            }\n            if (!f.createNewFile()) {\n                throw new IllegalStateException(\"File could not be created!\");\n            }\n\n            //Convert bitmap to byte array\n            ByteArrayOutputStream bos = new ByteArrayOutputStream();\n\n            avatar.compress(Bitmap.CompressFormat.PNG, 90, bos);\n            byte[] bitmapData = bos.toByteArray();\n\n            //write the bytes in file\n            try (FileOutputStream fos = new FileOutputStream(f)) {\n                fos.write(bitmapData);\n            } catch (FileNotFoundException e) {\n                Log_OC.e(TAG, \"File not found: \" + e.getMessage());\n            }\n\n        } catch (Exception e) {\n            Log_OC.e(TAG, \"Error opening file: \" + e.getMessage());\n        }\n\n        return ParcelFileDescriptor.open(f, ParcelFileDescriptor.MODE_READ_ONLY);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled openFile from UsersAndGroupsSearchProvider.java into Swift.\n\n        Input:\n\n        Method Name: openFile\n\n        Method Code: Nullable\n    @Override\n    @SuppressFBWarnings(\"IOI_USE_OF_FILE_STREAM_CONSTRUCTORS\") // TODO remove with API26\n    public ParcelFileDescriptor openFile(@NonNull Uri uri, @NonNull String mode) throws FileNotFoundException {\n        ArbitraryDataProvider arbitraryDataProvider = new ArbitraryDataProviderImpl(getContext());\n\n        String userId = uri.getQueryParameter(\"shareWith\");\n        String displayName = uri.getQueryParameter(\"displayName\");\n        String accountName = accountManager.getUser().getAccountName();\n        String serverName = accountName.substring(accountName.lastIndexOf('@') + 1);\n\n        String eTag = arbitraryDataProvider.getValue(userId + \"@\" + serverName, ThumbnailsCacheManager.AVATAR);\n        String avatarKey = \"a_\" + userId + \"_\" + serverName + \"_\" + eTag;\n\n        StatusType status = StatusType.valueOf(uri.getQueryParameter(\"status\"));\n        String icon = uri.getQueryParameter(\"icon\");\n\n        if (icon == null) {\n            icon = \"\";\n        }\n\n        Bitmap avatarBitmap = ThumbnailsCacheManager.getBitmapFromDiskCache(avatarKey);\n\n        if (avatarBitmap == null) {\n            float avatarRadius = getContext().getResources().getDimension(R.dimen.list_item_avatar_icon_radius);\n            avatarBitmap = BitmapUtils.drawableToBitmap(TextDrawable.createNamedAvatar(displayName, avatarRadius));\n        }\n\n        Bitmap avatar = BitmapUtils.createAvatarWithStatus(avatarBitmap, status, icon, getContext());\n\n        // create a file to write bitmap data\n        File f = new File(getContext().getCacheDir(), \"test\");\n        try {\n            if (f.exists()) {\n                if (!f.delete()) {\n                    throw new IllegalStateException(\"Existing file could not be deleted!\");\n                }\n            }\n            if (!f.createNewFile()) {\n                throw new IllegalStateException(\"File could not be created!\");\n            }\n\n            //Convert bitmap to byte array\n            ByteArrayOutputStream bos = new ByteArrayOutputStream();\n\n            avatar.compress(Bitmap.CompressFormat.PNG, 90, bos);\n            byte[] bitmapData = bos.toByteArray();\n\n            //write the bytes in file\n            try (FileOutputStream fos = new FileOutputStream(f)) {\n                fos.write(bitmapData);\n            } catch (FileNotFoundException e) {\n                Log_OC.e(TAG, \"File not found: \" + e.getMessage());\n            }\n\n        } catch (Exception e) {\n            Log_OC.e(TAG, \"Error opening file: \" + e.getMessage());\n        }\n\n        return ParcelFileDescriptor.open(f, ParcelFileDescriptor.MODE_READ_ONLY);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport Foundation\nimport UIKit\n\nfunc openFile(uri: URL, mode: String) throws -> FileHandle {\n    let arbitraryDataProvider = ArbitraryDataProviderImpl(context: getContext())\n\n    guard let userId = uri.queryParameters?[\"shareWith\"],\n          let displayName = uri.queryParameters?[\"displayName\"],\n          let accountName = accountManager.getUser().accountName else {\n        throw NSError(domain: \"Invalid URI\", code: 0, userInfo: nil)\n    }\n    \n    let serverName = accountName.split(separator: \"@\").last ?? \"\"\n    let eTag = arbitraryDataProvider.getValue(key: \"\\(userId)@\\(serverName)\", type: ThumbnailsCacheManager.AVATAR)\n    let avatarKey = \"a_\\(userId)_\\(serverName)_\\(eTag)\"\n    \n    let status = StatusType(rawValue: uri.queryParameters?[\"status\"] ?? \"\") ?? .unknown\n    let icon = uri.queryParameters?[\"icon\"] ?? \"\"\n    \n    var avatarBitmap = ThumbnailsCacheManager.getBitmapFromDiskCache(key: avatarKey)\n    \n    if avatarBitmap == nil {\n        let avatarRadius = getContext().resources.dimension(for: R.dimen.list_item_avatar_icon_radius)\n        avatarBitmap = BitmapUtils.drawableToBitmap(drawable: TextDrawable.createNamedAvatar(name: displayName, radius: avatarRadius))\n    }\n    \n    let avatar = BitmapUtils.createAvatarWithStatus(avatarBitmap: avatarBitmap, status: status, icon: icon, context: getContext())\n    \n    let fileURL = getContext().cacheDir.appendingPathComponent(\"test\")\n    \n    do {\n        if FileManager.default.fileExists(atPath: fileURL.path) {\n            try FileManager.default.removeItem(at: fileURL)\n        }\n        \n        FileManager.default.createFile(atPath: fileURL.path, contents: nil, attributes: nil)\n        \n        if let avatarData = avatar.pngData() {\n            try avatarData.write(to: fileURL)\n        }\n    } catch {\n        print(\"Error opening file: \\(error.localizedDescription)\")\n    }\n    \n    return try FileHandle(forReadingFrom: fileURL)\n}\n```"
    },
    {
        "method_name": "showErrorMessage",
        "method_code": "rivate void showErrorMessage(final RemoteOperationResult result) {\n        Handler handler = new Handler(Looper.getMainLooper());\n        handler.post(() -> {\n            // The Toast must be shown in the main thread to grant that will be hidden correctly; otherwise\n            // the thread may die before, an exception will occur, and the message will be left on the screen\n            // until the app dies\n\n            Context context = getContext();\n\n            if (context == null) {\n                throw new IllegalArgumentException(\"Context may not be null!\");\n            }\n\n            Toast.makeText(getContext().getApplicationContext(),\n                           ErrorMessageAdapter.getErrorCauseMessage(result, null, getContext().getResources()),\n                           Toast.LENGTH_SHORT).show();\n        });\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled showErrorMessage from UsersAndGroupsSearchProvider.java into Swift.\n\n        Input:\n\n        Method Name: showErrorMessage\n\n        Method Code: rivate void showErrorMessage(final RemoteOperationResult result) {\n        Handler handler = new Handler(Looper.getMainLooper());\n        handler.post(() -> {\n            // The Toast must be shown in the main thread to grant that will be hidden correctly; otherwise\n            // the thread may die before, an exception will occur, and the message will be left on the screen\n            // until the app dies\n\n            Context context = getContext();\n\n            if (context == null) {\n                throw new IllegalArgumentException(\"Context may not be null!\");\n            }\n\n            Toast.makeText(getContext().getApplicationContext(),\n                           ErrorMessageAdapter.getErrorCauseMessage(result, null, getContext().getResources()),\n                           Toast.LENGTH_SHORT).show();\n        });\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func showErrorMessage(result: RemoteOperationResult) {\n    DispatchQueue.main.async {\n        guard let context = self.getContext() else {\n            fatalError(\"Context may not be null!\")\n        }\n\n        let message = ErrorMessageAdapter.getErrorCauseMessage(result, nil, context.resources)\n        let toast = Toast.makeText(context.applicationContext, message, Toast.LENGTH_SHORT)\n        toast.show()\n    }\n}\n```"
    }
]