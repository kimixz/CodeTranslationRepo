[
    {
        "method_name": "getItemViewType",
        "method_code": "Override\n    public int getItemViewType(int position) {\n        return shares.get(position).getShareType().getValue();\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getItemViewType from ShareeListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getItemViewType\n\n        Method Code: Override\n    public int getItemViewType(int position) {\n        return shares.get(position).getShareType().getValue();\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> Int {\n    return shares[indexPath.row].getShareType().getValue()\n}\n```"
    },
    {
        "method_name": "onCreateViewHolder",
        "method_code": "NonNull\n    @Override\n    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n        boolean shareViaLink = MDMConfig.INSTANCE.shareViaLink(fileActivity);\n\n        if (shareViaLink) {\n            switch (ShareType.fromValue(viewType)) {\n                case PUBLIC_LINK, EMAIL -> {\n                    return new LinkShareViewHolder(\n                        FileDetailsShareLinkShareItemBinding.inflate(LayoutInflater.from(fileActivity),\n                                                                     parent,\n                                                                     false),\n                        fileActivity,\n                        viewThemeUtils);\n                }\n                case NEW_PUBLIC_LINK -> {\n                    if (encrypted) {\n                        return new NewSecureFileDropViewHolder(\n                            FileDetailsShareSecureFileDropAddNewItemBinding.inflate(LayoutInflater.from(fileActivity),\n                                                                                    parent,\n                                                                                    false)\n                        );\n                    } else {\n                        return new NewLinkShareViewHolder(\n                            FileDetailsSharePublicLinkAddNewItemBinding.inflate(LayoutInflater.from(fileActivity),\n                                                                                parent,\n                                                                                false)\n                        );\n                    }\n                }\n                case INTERNAL -> {\n                    return new InternalShareViewHolder(\n                        FileDetailsShareInternalShareLinkBinding.inflate(LayoutInflater.from(fileActivity), parent, false),\n                        fileActivity);\n                }\n                default -> {\n                    return new ShareViewHolder(FileDetailsShareShareItemBinding.inflate(LayoutInflater.from(fileActivity),\n                                                                                        parent,\n                                                                                        false),\n                                               user,\n                                               fileActivity,\n                                               viewThemeUtils);\n                }\n            }\n        } else {\n            return new InternalShareViewHolder(\n                FileDetailsShareInternalShareLinkBinding.inflate(LayoutInflater.from(fileActivity), parent, false),\n                fileActivity);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreateViewHolder from ShareeListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: onCreateViewHolder\n\n        Method Code: NonNull\n    @Override\n    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n        boolean shareViaLink = MDMConfig.INSTANCE.shareViaLink(fileActivity);\n\n        if (shareViaLink) {\n            switch (ShareType.fromValue(viewType)) {\n                case PUBLIC_LINK, EMAIL -> {\n                    return new LinkShareViewHolder(\n                        FileDetailsShareLinkShareItemBinding.inflate(LayoutInflater.from(fileActivity),\n                                                                     parent,\n                                                                     false),\n                        fileActivity,\n                        viewThemeUtils);\n                }\n                case NEW_PUBLIC_LINK -> {\n                    if (encrypted) {\n                        return new NewSecureFileDropViewHolder(\n                            FileDetailsShareSecureFileDropAddNewItemBinding.inflate(LayoutInflater.from(fileActivity),\n                                                                                    parent,\n                                                                                    false)\n                        );\n                    } else {\n                        return new NewLinkShareViewHolder(\n                            FileDetailsSharePublicLinkAddNewItemBinding.inflate(LayoutInflater.from(fileActivity),\n                                                                                parent,\n                                                                                false)\n                        );\n                    }\n                }\n                case INTERNAL -> {\n                    return new InternalShareViewHolder(\n                        FileDetailsShareInternalShareLinkBinding.inflate(LayoutInflater.from(fileActivity), parent, false),\n                        fileActivity);\n                }\n                default -> {\n                    return new ShareViewHolder(FileDetailsShareShareItemBinding.inflate(LayoutInflater.from(fileActivity),\n                                                                                        parent,\n                                                                                        false),\n                                               user,\n                                               fileActivity,\n                                               viewThemeUtils);\n                }\n            }\n        } else {\n            return new InternalShareViewHolder(\n                FileDetailsShareInternalShareLinkBinding.inflate(LayoutInflater.from(fileActivity), parent, false),\n                fileActivity);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onCreateViewHolder(_ parent: UIView, viewType: Int) -> UICollectionViewCell {\n    let shareViaLink = MDMConfig.instance.shareViaLink(fileActivity)\n\n    if shareViaLink {\n        switch ShareType.fromValue(viewType) {\n        case .publicLink, .email:\n            return LinkShareViewHolder(\n                FileDetailsShareLinkShareItemBinding.inflate(LayoutInflater.from(fileActivity),\n                                                             parent,\n                                                             false),\n                fileActivity,\n                viewThemeUtils)\n        case .newPublicLink:\n            if encrypted {\n                return NewSecureFileDropViewHolder(\n                    FileDetailsShareSecureFileDropAddNewItemBinding.inflate(LayoutInflater.from(fileActivity),\n                                                                            parent,\n                                                                            false)\n                )\n            } else {\n                return NewLinkShareViewHolder(\n                    FileDetailsSharePublicLinkAddNewItemBinding.inflate(LayoutInflater.from(fileActivity),\n                                                                        parent,\n                                                                        false)\n                )\n            }\n        case .internal:\n            return InternalShareViewHolder(\n                FileDetailsShareInternalShareLinkBinding.inflate(LayoutInflater.from(fileActivity), parent, false),\n                fileActivity)\n        default:\n            return ShareViewHolder(FileDetailsShareShareItemBinding.inflate(LayoutInflater.from(fileActivity),\n                                                                            parent,\n                                                                            false),\n                                   user,\n                                   fileActivity,\n                                   viewThemeUtils)\n        }\n    } else {\n        return InternalShareViewHolder(\n            FileDetailsShareInternalShareLinkBinding.inflate(LayoutInflater.from(fileActivity), parent, false),\n            fileActivity)\n    }\n}\n```"
    },
    {
        "method_name": "onBindViewHolder",
        "method_code": "Override\n    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {\n        if (shares == null || shares.size() <= position) {\n            return;\n        }\n\n        final OCShare share = shares.get(position);\n\n        boolean shareViaLink = MDMConfig.INSTANCE.shareViaLink(fileActivity);\n\n        if (!shareViaLink) {\n            if (holder instanceof InternalShareViewHolder internalShareViewHolder) {\n                internalShareViewHolder.bind(share, listener);\n            }\n\n            return;\n        }\n\n        if (holder instanceof LinkShareViewHolder publicShareViewHolder) {\n            publicShareViewHolder.bind(share, listener);\n        } else if (holder instanceof InternalShareViewHolder internalShareViewHolder) {\n            internalShareViewHolder.bind(share, listener);\n        } else if (holder instanceof NewLinkShareViewHolder newLinkShareViewHolder) {\n            newLinkShareViewHolder.bind(listener);\n        } else if (holder instanceof NewSecureFileDropViewHolder newSecureFileDropViewHolder) {\n            newSecureFileDropViewHolder.bind(listener);\n        } else {\n            ShareViewHolder userViewHolder = (ShareViewHolder) holder;\n            userViewHolder.bind(share, listener, this, userId, avatarRadiusDimension);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onBindViewHolder from ShareeListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: onBindViewHolder\n\n        Method Code: Override\n    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {\n        if (shares == null || shares.size() <= position) {\n            return;\n        }\n\n        final OCShare share = shares.get(position);\n\n        boolean shareViaLink = MDMConfig.INSTANCE.shareViaLink(fileActivity);\n\n        if (!shareViaLink) {\n            if (holder instanceof InternalShareViewHolder internalShareViewHolder) {\n                internalShareViewHolder.bind(share, listener);\n            }\n\n            return;\n        }\n\n        if (holder instanceof LinkShareViewHolder publicShareViewHolder) {\n            publicShareViewHolder.bind(share, listener);\n        } else if (holder instanceof InternalShareViewHolder internalShareViewHolder) {\n            internalShareViewHolder.bind(share, listener);\n        } else if (holder instanceof NewLinkShareViewHolder newLinkShareViewHolder) {\n            newLinkShareViewHolder.bind(listener);\n        } else if (holder instanceof NewSecureFileDropViewHolder newSecureFileDropViewHolder) {\n            newSecureFileDropViewHolder.bind(listener);\n        } else {\n            ShareViewHolder userViewHolder = (ShareViewHolder) holder;\n            userViewHolder.bind(share, listener, this, userId, avatarRadiusDimension);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onBindViewHolder(_ holder: RecyclerView.ViewHolder, position: Int) {\n    guard let shares = shares, shares.count > position else {\n        return\n    }\n\n    let share = shares[position]\n\n    let shareViaLink = MDMConfig.INSTANCE.shareViaLink(fileActivity)\n\n    if !shareViaLink {\n        if let internalShareViewHolder = holder as? InternalShareViewHolder {\n            internalShareViewHolder.bind(share, listener)\n        }\n        return\n    }\n\n    if let publicShareViewHolder = holder as? LinkShareViewHolder {\n        publicShareViewHolder.bind(share, listener)\n    } else if let internalShareViewHolder = holder as? InternalShareViewHolder {\n        internalShareViewHolder.bind(share, listener)\n    } else if let newLinkShareViewHolder = holder as? NewLinkShareViewHolder {\n        newLinkShareViewHolder.bind(listener)\n    } else if let newSecureFileDropViewHolder = holder as? NewSecureFileDropViewHolder {\n        newSecureFileDropViewHolder.bind(listener)\n    } else if let userViewHolder = holder as? ShareViewHolder {\n        userViewHolder.bind(share, listener, self, userId, avatarRadiusDimension)\n    }\n}\n```"
    },
    {
        "method_name": "getItemId",
        "method_code": "Override\n    public long getItemId(int position) {\n        return shares.get(position).getId();\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getItemId from ShareeListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getItemId\n\n        Method Code: Override\n    public long getItemId(int position) {\n        return shares.get(position).getId();\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getItemId(position: Int) -> Int64 {\n    return shares[position].getId()\n}\n```"
    },
    {
        "method_name": "getItemCount",
        "method_code": "Override\n    public int getItemCount() {\n        boolean shareViaLink = MDMConfig.INSTANCE.shareViaLink(fileActivity);\n        if (shareViaLink) {\n            return shares.size();\n        } else {\n            return 1;\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getItemCount from ShareeListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getItemCount\n\n        Method Code: Override\n    public int getItemCount() {\n        boolean shareViaLink = MDMConfig.INSTANCE.shareViaLink(fileActivity);\n        if (shareViaLink) {\n            return shares.size();\n        } else {\n            return 1;\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func getItemCount() -> Int {\n    let shareViaLink = MDMConfig.instance.shareViaLink(fileActivity)\n    if shareViaLink {\n        return shares.count\n    } else {\n        return 1\n    }\n}\n```"
    },
    {
        "method_name": "addShares",
        "method_code": "SuppressLint(\"NotifyDataSetChanged\")\n    public void addShares(List<OCShare> sharesToAdd) {\n        shares.addAll(sharesToAdd);\n        sortShares();\n        notifyDataSetChanged();\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled addShares from ShareeListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: addShares\n\n        Method Code: SuppressLint(\"NotifyDataSetChanged\")\n    public void addShares(List<OCShare> sharesToAdd) {\n        shares.addAll(sharesToAdd);\n        sortShares();\n        notifyDataSetChanged();\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc addShares(_ sharesToAdd: [OCShare]) {\n    shares.append(contentsOf: sharesToAdd)\n    sortShares()\n    notifyDataSetChanged()\n}\n```"
    },
    {
        "method_name": "avatarGenerated",
        "method_code": "Override\n    public void avatarGenerated(Drawable avatarDrawable, Object callContext) {\n        if (callContext instanceof ImageView iv) {\n            iv.setImageDrawable(avatarDrawable);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled avatarGenerated from ShareeListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: avatarGenerated\n\n        Method Code: Override\n    public void avatarGenerated(Drawable avatarDrawable, Object callContext) {\n        if (callContext instanceof ImageView iv) {\n            iv.setImageDrawable(avatarDrawable);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc avatarGenerated(avatarDrawable: Drawable, callContext: Any) {\n    if let iv = callContext as? UIImageView {\n        iv.image = avatarDrawable\n    }\n}\n```"
    },
    {
        "method_name": "shouldCallGeneratedCallback",
        "method_code": "Override\n    public boolean shouldCallGeneratedCallback(String tag, Object callContext) {\n        if (callContext instanceof ImageView iv) {\n            // needs to be changed once federated users have avatars\n            return String.valueOf(iv.getTag()).equals(tag.split(\"@\")[0]);\n        }\n        return false;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled shouldCallGeneratedCallback from ShareeListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: shouldCallGeneratedCallback\n\n        Method Code: Override\n    public boolean shouldCallGeneratedCallback(String tag, Object callContext) {\n        if (callContext instanceof ImageView iv) {\n            // needs to be changed once federated users have avatars\n            return String.valueOf(iv.getTag()).equals(tag.split(\"@\")[0]);\n        }\n        return false;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func shouldCallGeneratedCallback(tag: String, callContext: Any) -> Bool {\n    if let iv = callContext as? UIImageView {\n        return String(describing: iv.tag) == tag.split(separator: \"@\")[0]\n    }\n    return false\n}\n```"
    },
    {
        "method_name": "remove",
        "method_code": "SuppressLint(\"NotifyDataSetChanged\")\n    public void remove(OCShare share) {\n        shares.remove(share);\n        notifyDataSetChanged();\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled remove from ShareeListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: remove\n\n        Method Code: SuppressLint(\"NotifyDataSetChanged\")\n    public void remove(OCShare share) {\n        shares.remove(share);\n        notifyDataSetChanged();\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc remove(share: OCShare) {\n    if let index = shares.firstIndex(of: share) {\n        shares.remove(at: index)\n        notifyDataSetChanged()\n    }\n}\n```"
    },
    {
        "method_name": "sortShares",
        "method_code": "rotected final void sortShares() {\n        List<OCShare> links = new ArrayList<>();\n        List<OCShare> users = new ArrayList<>();\n\n        for (OCShare share : shares) {\n            if (ShareType.PUBLIC_LINK == share.getShareType() || ShareType.EMAIL == share.getShareType()) {\n                links.add(share);\n            } else if (share.getShareType() != ShareType.INTERNAL) {\n                users.add(share);\n            }\n        }\n\n        links.sort((o1, o2) -> Long.compare(o2.getSharedDate(), o1.getSharedDate()));\n        users.sort((o1, o2) -> Long.compare(o2.getSharedDate(), o1.getSharedDate()));\n\n        shares = links;\n        shares.addAll(users);\n\n        // add internal share link at end\n        if (!encrypted) {\n            final OCShare ocShare = new OCShare();\n            ocShare.setShareType(ShareType.INTERNAL);\n            shares.add(ocShare);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled sortShares from ShareeListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: sortShares\n\n        Method Code: rotected final void sortShares() {\n        List<OCShare> links = new ArrayList<>();\n        List<OCShare> users = new ArrayList<>();\n\n        for (OCShare share : shares) {\n            if (ShareType.PUBLIC_LINK == share.getShareType() || ShareType.EMAIL == share.getShareType()) {\n                links.add(share);\n            } else if (share.getShareType() != ShareType.INTERNAL) {\n                users.add(share);\n            }\n        }\n\n        links.sort((o1, o2) -> Long.compare(o2.getSharedDate(), o1.getSharedDate()));\n        users.sort((o1, o2) -> Long.compare(o2.getSharedDate(), o1.getSharedDate()));\n\n        shares = links;\n        shares.addAll(users);\n\n        // add internal share link at end\n        if (!encrypted) {\n            final OCShare ocShare = new OCShare();\n            ocShare.setShareType(ShareType.INTERNAL);\n            shares.add(ocShare);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc sortShares() {\n    var links: [OCShare] = []\n    var users: [OCShare] = []\n\n    for share in shares {\n        if share.shareType == .publicLink || share.shareType == .email {\n            links.append(share)\n        } else if share.shareType != .internal {\n            users.append(share)\n        }\n    }\n\n    links.sort { $0.sharedDate > $1.sharedDate }\n    users.sort { $0.sharedDate > $1.sharedDate }\n\n    shares = links\n    shares.append(contentsOf: users)\n\n    if !encrypted {\n        let ocShare = OCShare()\n        ocShare.shareType = .internal\n        shares.append(ocShare)\n    }\n}\n```"
    },
    {
        "method_name": "getShares",
        "method_code": "ublic List<OCShare> getShares() {\n        return shares;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getShares from ShareeListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getShares\n\n        Method Code: ublic List<OCShare> getShares() {\n        return shares;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getShares() -> [OCShare] {\n    return shares\n}\n```"
    },
    {
        "method_name": "removeNewPublicShare",
        "method_code": "ublic void removeNewPublicShare() {\n        for (OCShare share : shares) {\n            if (share.getShareType() == ShareType.NEW_PUBLIC_LINK) {\n                shares.remove(share);\n                break;\n            }\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled removeNewPublicShare from ShareeListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: removeNewPublicShare\n\n        Method Code: ublic void removeNewPublicShare() {\n        for (OCShare share : shares) {\n            if (share.getShareType() == ShareType.NEW_PUBLIC_LINK) {\n                shares.remove(share);\n                break;\n            }\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc removeNewPublicShare() {\n    for (index, share) in shares.enumerated() {\n        if share.shareType == .newPublicLink {\n            shares.remove(at: index)\n            break\n        }\n    }\n}\n```"
    }
]