[
    {
        "method_name": "getSectionCount",
        "method_code": "@Override\n    public int getSectionCount() {\n        return uploadGroups.length;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getSectionCount from UploadListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getSectionCount\n\n        Method Code: @Override\n    public int getSectionCount() {\n        return uploadGroups.length;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getSectionCount() -> Int {\n    return uploadGroups.count\n}\n```"
    },
    {
        "method_name": "getItemCount",
        "method_code": "@Override\n    public int getItemCount(int section) {\n        return uploadGroups[section].getItems().length;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getItemCount from UploadListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getItemCount\n\n        Method Code: @Override\n    public int getItemCount(int section) {\n        return uploadGroups[section].getItems().length;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func numberOfItems(inSection section: Int) -> Int {\n    return uploadGroups[section].getItems().count\n}\n```"
    },
    {
        "method_name": "onBindHeaderViewHolder",
        "method_code": "@Override\n    public void onBindHeaderViewHolder(SectionedViewHolder holder, int section, boolean expanded) {\n        HeaderViewHolder headerViewHolder = (HeaderViewHolder) holder;\n\n        UploadGroup group = uploadGroups[section];\n\n        headerViewHolder.binding.uploadListTitle.setText(\n            String.format(parentActivity.getString(R.string.uploads_view_group_header),\n                          group.getGroupName(), group.getGroupItemCount()));\n        viewThemeUtils.platform.colorPrimaryTextViewElement(headerViewHolder.binding.uploadListTitle);\n\n        headerViewHolder.binding.uploadListTitle.setOnClickListener(v -> {\n            toggleSectionExpanded(section);\n            headerViewHolder.binding.uploadListState.setImageResource(isSectionExpanded(section) ?\n                                                                          R.drawable.ic_expand_less :\n                                                                          R.drawable.ic_expand_more);\n        });\n\n        switch (group.type) {\n            case CURRENT, FINISHED -> headerViewHolder.binding.uploadListAction.setImageResource(R.drawable.ic_close);\n            case CANCELLED, FAILED ->\n                headerViewHolder.binding.uploadListAction.setImageResource(R.drawable.ic_dots_vertical);\n\n        }\n\n        headerViewHolder.binding.uploadListAction.setOnClickListener(v -> {\n            switch (group.type) {\n                case CURRENT -> new Thread(() -> {\n                    OCUpload ocUpload = group.getItem(0);\n                    if (ocUpload == null) {\n                        return;\n                    }\n\n                    String accountName = ocUpload.getAccountName();\n                    if (accountName == null) {\n                        return;\n                    }\n\n                    uploadHelper.cancelFileUploads(Arrays.asList(group.items), accountName);\n                    parentActivity.runOnUiThread(this::loadUploadItemsFromDb);\n                }).start();\n                case FINISHED -> {\n                    uploadsStorageManager.clearSuccessfulUploads();\n                    loadUploadItemsFromDb();\n                }\n                case FAILED -> {\n                    showFailedPopupMenu(headerViewHolder);\n                }\n                case CANCELLED -> {\n                    showCancelledPopupMenu(headerViewHolder);\n                }\n            }\n        });\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onBindHeaderViewHolder from UploadListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: onBindHeaderViewHolder\n\n        Method Code: @Override\n    public void onBindHeaderViewHolder(SectionedViewHolder holder, int section, boolean expanded) {\n        HeaderViewHolder headerViewHolder = (HeaderViewHolder) holder;\n\n        UploadGroup group = uploadGroups[section];\n\n        headerViewHolder.binding.uploadListTitle.setText(\n            String.format(parentActivity.getString(R.string.uploads_view_group_header),\n                          group.getGroupName(), group.getGroupItemCount()));\n        viewThemeUtils.platform.colorPrimaryTextViewElement(headerViewHolder.binding.uploadListTitle);\n\n        headerViewHolder.binding.uploadListTitle.setOnClickListener(v -> {\n            toggleSectionExpanded(section);\n            headerViewHolder.binding.uploadListState.setImageResource(isSectionExpanded(section) ?\n                                                                          R.drawable.ic_expand_less :\n                                                                          R.drawable.ic_expand_more);\n        });\n\n        switch (group.type) {\n            case CURRENT, FINISHED -> headerViewHolder.binding.uploadListAction.setImageResource(R.drawable.ic_close);\n            case CANCELLED, FAILED ->\n                headerViewHolder.binding.uploadListAction.setImageResource(R.drawable.ic_dots_vertical);\n\n        }\n\n        headerViewHolder.binding.uploadListAction.setOnClickListener(v -> {\n            switch (group.type) {\n                case CURRENT -> new Thread(() -> {\n                    OCUpload ocUpload = group.getItem(0);\n                    if (ocUpload == null) {\n                        return;\n                    }\n\n                    String accountName = ocUpload.getAccountName();\n                    if (accountName == null) {\n                        return;\n                    }\n\n                    uploadHelper.cancelFileUploads(Arrays.asList(group.items), accountName);\n                    parentActivity.runOnUiThread(this::loadUploadItemsFromDb);\n                }).start();\n                case FINISHED -> {\n                    uploadsStorageManager.clearSuccessfulUploads();\n                    loadUploadItemsFromDb();\n                }\n                case FAILED -> {\n                    showFailedPopupMenu(headerViewHolder);\n                }\n                case CANCELLED -> {\n                    showCancelledPopupMenu(headerViewHolder);\n                }\n            }\n        });\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onBindHeaderViewHolder(holder: SectionedViewHolder, section: Int, expanded: Bool) {\n    guard let headerViewHolder = holder as? HeaderViewHolder else { return }\n\n    let group = uploadGroups[section]\n\n    headerViewHolder.binding.uploadListTitle.text = String(format: parentActivity.getString(R.string.uploads_view_group_header), group.getGroupName(), group.getGroupItemCount())\n    viewThemeUtils.platform.colorPrimaryTextViewElement(headerViewHolder.binding.uploadListTitle)\n\n    headerViewHolder.binding.uploadListTitle.setOnClickListener { _ in\n        self.toggleSectionExpanded(section: section)\n        headerViewHolder.binding.uploadListState.image = UIImage(named: self.isSectionExpanded(section: section) ? \"ic_expand_less\" : \"ic_expand_more\")\n    }\n\n    switch group.type {\n    case .CURRENT, .FINISHED:\n        headerViewHolder.binding.uploadListAction.image = UIImage(named: \"ic_close\")\n    case .CANCELLED, .FAILED:\n        headerViewHolder.binding.uploadListAction.image = UIImage(named: \"ic_dots_vertical\")\n    }\n\n    headerViewHolder.binding.uploadListAction.setOnClickListener { _ in\n        switch group.type {\n        case .CURRENT:\n            DispatchQueue.global().async {\n                guard let ocUpload = group.getItem(0), let accountName = ocUpload.getAccountName() else { return }\n                self.uploadHelper.cancelFileUploads(group.items, accountName: accountName)\n                DispatchQueue.main.async {\n                    self.loadUploadItemsFromDb()\n                }\n            }\n        case .FINISHED:\n            self.uploadsStorageManager.clearSuccessfulUploads()\n            self.loadUploadItemsFromDb()\n        case .FAILED:\n            self.showFailedPopupMenu(headerViewHolder: headerViewHolder)\n        case .CANCELLED:\n            self.showCancelledPopupMenu(headerViewHolder: headerViewHolder)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "showFailedPopupMenu",
        "method_code": "private void showFailedPopupMenu(HeaderViewHolder headerViewHolder) {\n        PopupMenu failedPopup = new PopupMenu(MainApp.getAppContext(), headerViewHolder.binding.uploadListAction);\n        failedPopup.inflate(R.menu.upload_list_failed_options);\n        failedPopup.setOnMenuItemClickListener(i -> {\n            int itemId = i.getItemId();\n\n            if (itemId == R.id.action_upload_list_failed_clear) {\n                uploadsStorageManager.clearFailedButNotDelayedUploads();\n                clearTempEncryptedFolder();\n                loadUploadItemsFromDb();\n            } else if (itemId == R.id.action_upload_list_failed_retry) {\n\n                // FIXME For e2e resume is not working\n                new Thread(() -> {\n                    uploadHelper.retryFailedUploads(\n                        uploadsStorageManager,\n                        connectivityService,\n                        accountManager,\n                        powerManagementService);\n                    parentActivity.runOnUiThread(this::loadUploadItemsFromDb);\n                }).start();\n            }\n\n            return true;\n        });\n\n        failedPopup.show();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showFailedPopupMenu from UploadListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: showFailedPopupMenu\n\n        Method Code: private void showFailedPopupMenu(HeaderViewHolder headerViewHolder) {\n        PopupMenu failedPopup = new PopupMenu(MainApp.getAppContext(), headerViewHolder.binding.uploadListAction);\n        failedPopup.inflate(R.menu.upload_list_failed_options);\n        failedPopup.setOnMenuItemClickListener(i -> {\n            int itemId = i.getItemId();\n\n            if (itemId == R.id.action_upload_list_failed_clear) {\n                uploadsStorageManager.clearFailedButNotDelayedUploads();\n                clearTempEncryptedFolder();\n                loadUploadItemsFromDb();\n            } else if (itemId == R.id.action_upload_list_failed_retry) {\n\n                // FIXME For e2e resume is not working\n                new Thread(() -> {\n                    uploadHelper.retryFailedUploads(\n                        uploadsStorageManager,\n                        connectivityService,\n                        accountManager,\n                        powerManagementService);\n                    parentActivity.runOnUiThread(this::loadUploadItemsFromDb);\n                }).start();\n            }\n\n            return true;\n        });\n\n        failedPopup.show();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func showFailedPopupMenu(headerViewHolder: HeaderViewHolder) {\n    let failedPopup = UIMenuController.shared\n    let actionClear = UIAction(title: \"Clear\", image: nil) { _ in\n        self.uploadsStorageManager.clearFailedButNotDelayedUploads()\n        self.clearTempEncryptedFolder()\n        self.loadUploadItemsFromDb()\n    }\n    let actionRetry = UIAction(title: \"Retry\", image: nil) { _ in\n        DispatchQueue.global().async {\n            self.uploadHelper.retryFailedUploads(\n                uploadsStorageManager: self.uploadsStorageManager,\n                connectivityService: self.connectivityService,\n                accountManager: self.accountManager,\n                powerManagementService: self.powerManagementService)\n            DispatchQueue.main.async {\n                self.loadUploadItemsFromDb()\n            }\n        }\n    }\n    let menu = UIMenu(title: \"\", children: [actionClear, actionRetry])\n    failedPopup.menu = menu\n    failedPopup.setTargetRect(headerViewHolder.binding.uploadListAction.frame, in: headerViewHolder.binding.uploadListAction.superview!)\n    failedPopup.setMenuVisible(true, animated: true)\n}\n```"
    },
    {
        "method_name": "showCancelledPopupMenu",
        "method_code": "private void showCancelledPopupMenu(HeaderViewHolder headerViewHolder) {\n        PopupMenu popup = new PopupMenu(MainApp.getAppContext(), headerViewHolder.binding.uploadListAction);\n        popup.inflate(R.menu.upload_list_cancelled_options);\n\n        popup.setOnMenuItemClickListener(i -> {\n            int itemId = i.getItemId();\n\n            if (itemId == R.id.action_upload_list_cancelled_clear) {\n                uploadsStorageManager.clearCancelledUploadsForCurrentAccount();\n                loadUploadItemsFromDb();\n                clearTempEncryptedFolder();\n            } else if (itemId == R.id.action_upload_list_cancelled_resume) {\n                retryCancelledUploads();\n            }\n\n            return true;\n        });\n\n        popup.show();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showCancelledPopupMenu from UploadListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: showCancelledPopupMenu\n\n        Method Code: private void showCancelledPopupMenu(HeaderViewHolder headerViewHolder) {\n        PopupMenu popup = new PopupMenu(MainApp.getAppContext(), headerViewHolder.binding.uploadListAction);\n        popup.inflate(R.menu.upload_list_cancelled_options);\n\n        popup.setOnMenuItemClickListener(i -> {\n            int itemId = i.getItemId();\n\n            if (itemId == R.id.action_upload_list_cancelled_clear) {\n                uploadsStorageManager.clearCancelledUploadsForCurrentAccount();\n                loadUploadItemsFromDb();\n                clearTempEncryptedFolder();\n            } else if (itemId == R.id.action_upload_list_cancelled_resume) {\n                retryCancelledUploads();\n            }\n\n            return true;\n        });\n\n        popup.show();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func showCancelledPopupMenu(headerViewHolder: HeaderViewHolder) {\n    let popup = UIMenuController.shared\n    let actionClear = UIAction(title: \"Clear\", image: nil) { _ in\n        uploadsStorageManager.clearCancelledUploadsForCurrentAccount()\n        loadUploadItemsFromDb()\n        clearTempEncryptedFolder()\n    }\n    let actionResume = UIAction(title: \"Resume\", image: nil) { _ in\n        retryCancelledUploads()\n    }\n    let menu = UIMenu(title: \"\", children: [actionClear, actionResume])\n    popup.menu = menu\n    popup.showMenu(from: headerViewHolder.binding.uploadListAction, rect: headerViewHolder.binding.uploadListAction.bounds)\n}\n```"
    },
    {
        "method_name": "clearTempEncryptedFolder",
        "method_code": "private void clearTempEncryptedFolder() {\n        Optional<User> user = parentActivity.getUser();\n        user.ifPresent(value -> FileDataStorageManager.clearTempEncryptedFolder(value.getAccountName()));\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled clearTempEncryptedFolder from UploadListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: clearTempEncryptedFolder\n\n        Method Code: private void clearTempEncryptedFolder() {\n        Optional<User> user = parentActivity.getUser();\n        user.ifPresent(value -> FileDataStorageManager.clearTempEncryptedFolder(value.getAccountName()));\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func clearTempEncryptedFolder() {\n    if let user = parentActivity.getUser() {\n        FileDataStorageManager.clearTempEncryptedFolder(user.getAccountName())\n    }\n}\n```"
    },
    {
        "method_name": "retryCancelledUploads",
        "method_code": "private void retryCancelledUploads() {\n        new Thread(() -> {\n            boolean showNotExistMessage = uploadHelper.retryCancelledUploads(\n                uploadsStorageManager,\n                connectivityService,\n                accountManager,\n                powerManagementService);\n\n            parentActivity.runOnUiThread(this::loadUploadItemsFromDb);\n            parentActivity.runOnUiThread(() -> {\n                if (showNotExistMessage) {\n                    showNotExistMessage();\n                }\n            });\n        }).start();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled retryCancelledUploads from UploadListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: retryCancelledUploads\n\n        Method Code: private void retryCancelledUploads() {\n        new Thread(() -> {\n            boolean showNotExistMessage = uploadHelper.retryCancelledUploads(\n                uploadsStorageManager,\n                connectivityService,\n                accountManager,\n                powerManagementService);\n\n            parentActivity.runOnUiThread(this::loadUploadItemsFromDb);\n            parentActivity.runOnUiThread(() -> {\n                if (showNotExistMessage) {\n                    showNotExistMessage();\n                }\n            });\n        }).start();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func retryCancelledUploads() {\n    DispatchQueue.global().async {\n        let showNotExistMessage = uploadHelper.retryCancelledUploads(\n            uploadsStorageManager: uploadsStorageManager,\n            connectivityService: connectivityService,\n            accountManager: accountManager,\n            powerManagementService: powerManagementService\n        )\n\n        DispatchQueue.main.async {\n            self.loadUploadItemsFromDb()\n        }\n        DispatchQueue.main.async {\n            if showNotExistMessage {\n                self.showNotExistMessage()\n            }\n        }\n    }\n}\n```"
    },
    {
        "method_name": "showNotExistMessage",
        "method_code": "private void showNotExistMessage() {\n        DisplayUtils.showSnackMessage(parentActivity, R.string.upload_action_file_not_exist_message);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showNotExistMessage from UploadListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: showNotExistMessage\n\n        Method Code: private void showNotExistMessage() {\n        DisplayUtils.showSnackMessage(parentActivity, R.string.upload_action_file_not_exist_message);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func showNotExistMessage() {\n    DisplayUtils.showSnackMessage(parentActivity, R.string.upload_action_file_not_exist_message)\n}\n```"
    },
    {
        "method_name": "onBindFooterViewHolder",
        "method_code": "@Override\n    public void onBindFooterViewHolder(SectionedViewHolder holder, int section) {\n        // not needed\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onBindFooterViewHolder from UploadListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: onBindFooterViewHolder\n\n        Method Code: @Override\n    public void onBindFooterViewHolder(SectionedViewHolder holder, int section) {\n        // not needed\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onBindFooterViewHolder(holder: SectionedViewHolder, section: Int) {\n    // not needed\n}\n```"
    },
    {
        "method_name": "refresh",
        "method_code": "@Override\n            public void refresh() {\n                fixAndSortItems(uploadsStorageManager.getCurrentAndPendingUploadsForCurrentAccount());\n            }",
        "prompt": "\n        Please translate the following Java (Android) method titled refresh from UploadListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: refresh\n\n        Method Code: @Override\n            public void refresh() {\n                fixAndSortItems(uploadsStorageManager.getCurrentAndPendingUploadsForCurrentAccount());\n            }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func refresh() {\n    fixAndSortItems(uploadsStorageManager.getCurrentAndPendingUploadsForCurrentAccount())\n}\n```"
    },
    {
        "method_name": "refresh",
        "method_code": "@Override\n            public void refresh() {\n                fixAndSortItems(uploadsStorageManager.getFailedButNotDelayedUploadsForCurrentAccount());\n            }",
        "prompt": "\n        Please translate the following Java (Android) method titled refresh from UploadListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: refresh\n\n        Method Code: @Override\n            public void refresh() {\n                fixAndSortItems(uploadsStorageManager.getFailedButNotDelayedUploadsForCurrentAccount());\n            }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func refresh() {\n    fixAndSortItems(uploadsStorageManager.getFailedButNotDelayedUploadsForCurrentAccount())\n}\n```"
    },
    {
        "method_name": "refresh",
        "method_code": "@Override\n            public void refresh() {\n                fixAndSortItems(uploadsStorageManager.getCancelledUploadsForCurrentAccount());\n            }",
        "prompt": "\n        Please translate the following Java (Android) method titled refresh from UploadListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: refresh\n\n        Method Code: @Override\n            public void refresh() {\n                fixAndSortItems(uploadsStorageManager.getCancelledUploadsForCurrentAccount());\n            }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func refresh() {\n    fixAndSortItems(uploadsStorageManager.getCancelledUploadsForCurrentAccount())\n}\n```"
    },
    {
        "method_name": "refresh",
        "method_code": "@Override\n            public void refresh() {\n                fixAndSortItems(uploadsStorageManager.getFinishedUploadsForCurrentAccount());\n            }",
        "prompt": "\n        Please translate the following Java (Android) method titled refresh from UploadListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: refresh\n\n        Method Code: @Override\n            public void refresh() {\n                fixAndSortItems(uploadsStorageManager.getFinishedUploadsForCurrentAccount());\n            }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func refresh() {\n    fixAndSortItems(uploadsStorageManager.getFinishedUploadsForCurrentAccount())\n}\n```"
    },
    {
        "method_name": "onBindViewHolder",
        "method_code": "@Override\n    public void onBindViewHolder(SectionedViewHolder holder, int section, int relativePosition, int absolutePosition) {\n        if (uploadGroups.length == 0 || section < 0 || section >= uploadGroups.length) {\n            return;\n        }\n\n        UploadGroup uploadGroup = uploadGroups[section];\n        if (uploadGroup == null) {\n            return;\n        }\n\n        OCUpload item = uploadGroup.getItem(relativePosition);\n        if (item == null) {\n            return;\n        }\n\n        ItemViewHolder itemViewHolder = (ItemViewHolder) holder;\n        itemViewHolder.binding.uploadName.setText(item.getLocalPath());\n\n        // local file name\n        File remoteFile = new File(item.getRemotePath());\n        String fileName = remoteFile.getName();\n        if (fileName.isEmpty()) {\n            fileName = File.separator;\n        }\n        itemViewHolder.binding.uploadName.setText(fileName);\n\n        // remote path to parent folder\n        itemViewHolder.binding.uploadRemotePath.setText(new File(item.getRemotePath()).getParent());\n\n        // file size\n        if (item.getFileSize() != 0) {\n            itemViewHolder.binding.uploadFileSize.setText(String.format(\"%s, \",\n                                                                        DisplayUtils.bytesToHumanReadable(item.getFileSize())));\n        } else {\n            itemViewHolder.binding.uploadFileSize.setText(\"\");\n        }\n\n        // upload date\n        long updateTime = item.getUploadEndTimestamp();\n        CharSequence dateString = DisplayUtils.getRelativeDateTimeString(parentActivity,\n                                                                         updateTime,\n                                                                         DateUtils.SECOND_IN_MILLIS,\n                                                                         DateUtils.WEEK_IN_MILLIS, 0);\n        itemViewHolder.binding.uploadDate.setText(dateString);\n\n        // account\n        final Optional<User> optionalUser = accountManager.getUser(item.getAccountName());\n        if (showUser) {\n            itemViewHolder.binding.uploadAccount.setVisibility(View.VISIBLE);\n            if (optionalUser.isPresent()) {\n                itemViewHolder.binding.uploadAccount.setText(\n                    DisplayUtils.getAccountNameDisplayText(optionalUser.get()));\n            } else {\n                itemViewHolder.binding.uploadAccount.setText(item.getAccountName());\n            }\n        } else {\n            itemViewHolder.binding.uploadAccount.setVisibility(View.GONE);\n        }\n\n        // Reset fields visibility\n        itemViewHolder.binding.uploadDate.setVisibility(View.VISIBLE);\n        itemViewHolder.binding.uploadRemotePath.setVisibility(View.VISIBLE);\n        itemViewHolder.binding.uploadFileSize.setVisibility(View.VISIBLE);\n        itemViewHolder.binding.uploadStatus.setVisibility(View.VISIBLE);\n        itemViewHolder.binding.uploadProgressBar.setVisibility(View.GONE);\n\n        // Update information depending of upload details\n        String status = getStatusText(item);\n        switch (item.getUploadStatus()) {\n            case UPLOAD_IN_PROGRESS -> {\n                viewThemeUtils.platform.themeHorizontalProgressBar(itemViewHolder.binding.uploadProgressBar);\n                itemViewHolder.binding.uploadProgressBar.setProgress(0);\n                itemViewHolder.binding.uploadProgressBar.setVisibility(View.VISIBLE);\n\n                if (uploadHelper.isUploadingNow(item)) {\n                    // really uploading, so...\n                    // ... unbind the old progress bar, if any; ...\n                    if (progressListener != null) {\n                        String targetKey = FileUploadHelper.Companion.buildRemoteName(progressListener.getUpload().getAccountName(), progressListener.getUpload().getRemotePath());\n                        uploadHelper.removeUploadTransferProgressListener(progressListener, targetKey);\n                    }\n                    // ... then, bind the current progress bar to listen for updates\n                    progressListener = new ProgressListener(item, itemViewHolder.binding.uploadProgressBar);\n                    String targetKey = FileUploadHelper.Companion.buildRemoteName(item.getAccountName(), item.getRemotePath());\n                    uploadHelper.addUploadTransferProgressListener(progressListener, targetKey);\n\n                } else {\n                    // not really uploading; stop listening progress if view is reused!\n                    if (progressListener != null &&\n                        progressListener.isWrapping(itemViewHolder.binding.uploadProgressBar)) {\n\n                        String targetKey = FileUploadHelper.Companion.buildRemoteName(progressListener.getUpload().getAccountName(), progressListener.getUpload().getRemotePath());\n\n                        uploadHelper.removeUploadTransferProgressListener(progressListener, targetKey);\n                        progressListener = null;\n                    }\n                }\n\n                itemViewHolder.binding.uploadDate.setVisibility(View.GONE);\n                itemViewHolder.binding.uploadFileSize.setVisibility(View.GONE);\n                itemViewHolder.binding.uploadProgressBar.invalidate();\n            }\n            case UPLOAD_FAILED -> itemViewHolder.binding.uploadDate.setVisibility(View.GONE);\n            case UPLOAD_SUCCEEDED, UPLOAD_CANCELLED ->\n                itemViewHolder.binding.uploadStatus.setVisibility(View.GONE);\n        }\n\n        // show status if same file conflict or local file deleted or upload cancelled\n        if ((item.getUploadStatus() == UploadStatus.UPLOAD_SUCCEEDED && item.getLastResult() != UploadResult.UPLOADED)\n            || item.getUploadStatus() == UploadStatus.UPLOAD_CANCELLED) {\n\n            itemViewHolder.binding.uploadStatus.setVisibility(View.VISIBLE);\n            itemViewHolder.binding.uploadDate.setVisibility(View.GONE);\n            itemViewHolder.binding.uploadFileSize.setVisibility(View.GONE);\n        }\n\n        itemViewHolder.binding.uploadStatus.setText(status);\n\n        // bind listeners to perform actions\n        if (item.getUploadStatus() == UploadStatus.UPLOAD_IN_PROGRESS) {\n            // Cancel\n            itemViewHolder.binding.uploadRightButton.setImageResource(R.drawable.ic_action_cancel_grey);\n            itemViewHolder.binding.uploadRightButton.setVisibility(View.VISIBLE);\n            itemViewHolder.binding.uploadRightButton.setOnClickListener(v -> {\n                uploadHelper.cancelFileUpload(item.getRemotePath(), item.getAccountName());\n                loadUploadItemsFromDb();\n            });\n\n        } else if (item.getUploadStatus() == UploadStatus.UPLOAD_FAILED) {\n            if (item.getLastResult() == UploadResult.SYNC_CONFLICT) {\n                itemViewHolder.binding.uploadRightButton.setImageResource(R.drawable.ic_dots_vertical);\n                itemViewHolder.binding.uploadRightButton.setOnClickListener(view -> {\n                    if (optionalUser.isPresent()) {\n                        User user = optionalUser.get();\n                        showItemConflictPopup(user, itemViewHolder, item, status, view);\n                    }\n                });\n            } else {\n                // Delete\n                itemViewHolder.binding.uploadRightButton.setImageResource(R.drawable.ic_action_delete_grey);\n                itemViewHolder.binding.uploadRightButton.setOnClickListener(v -> removeUpload(item));\n            }\n            itemViewHolder.binding.uploadRightButton.setVisibility(View.VISIBLE);\n        } else {    // UploadStatus.UPLOAD_SUCCEEDED\n            itemViewHolder.binding.uploadRightButton.setVisibility(View.INVISIBLE);\n        }\n\n        itemViewHolder.binding.uploadListItemLayout.setOnClickListener(null);\n\n        // Set icon or thumbnail\n        itemViewHolder.binding.thumbnail.setImageResource(R.drawable.file);\n\n        // click on item\n        if (item.getUploadStatus() == UploadStatus.UPLOAD_FAILED ||\n            item.getUploadStatus() == UploadStatus.UPLOAD_CANCELLED) {\n\n            final UploadResult uploadResult = item.getLastResult();\n            itemViewHolder.binding.uploadListItemLayout.setOnClickListener(v -> {\n                if (uploadResult == UploadResult.CREDENTIAL_ERROR) {\n                    final Optional<User> optUser = accountManager.getUser(item.getAccountName());\n                    final User user = optUser.orElseThrow(RuntimeException::new);\n                    parentActivity.getFileOperationsHelper().checkCurrentCredentials(user);\n                    return;\n                } else if (uploadResult == UploadResult.SYNC_CONFLICT && optionalUser.isPresent()) {\n                    User user = optionalUser.get();\n                    if (checkAndOpenConflictResolutionDialog(user, itemViewHolder, item, status)) {\n                        return;\n                    }\n                }\n\n                // not a credentials error\n                File file = new File(item.getLocalPath());\n                Optional<User> user = accountManager.getUser(item.getAccountName());\n                if (file.exists() && user.isPresent()) {\n                    uploadHelper.retryUpload(item, user.get());\n                    loadUploadItemsFromDb();\n                } else {\n                    DisplayUtils.showSnackMessage(\n                        v.getRootView().findViewById(android.R.id.content),\n                        R.string.local_file_not_found_message\n                                                 );\n                }\n            });\n        } else if (item.getUploadStatus() == UploadStatus.UPLOAD_SUCCEEDED) {\n            itemViewHolder.binding.uploadListItemLayout.setOnClickListener(v -> onUploadedItemClick(item));\n        }\n\n\n        // click on thumbnail to open locally\n        if (item.getUploadStatus() != UploadStatus.UPLOAD_SUCCEEDED) {\n            itemViewHolder.binding.thumbnail.setOnClickListener(v -> onUploadingItemClick(item));\n        }\n\n        /*\n         * Cancellation needs do be checked and done before changing the drawable in fileIcon, or\n         * {@link ThumbnailsCacheManager#cancelPotentialWork} will NEVER cancel any task.\n         */\n        OCFile fakeFileToCheatThumbnailsCacheManagerInterface = new OCFile(item.getRemotePath());\n        fakeFileToCheatThumbnailsCacheManagerInterface.setStoragePath(item.getLocalPath());\n        fakeFileToCheatThumbnailsCacheManagerInterface.setMimeType(item.getMimeType());\n\n        boolean allowedToCreateNewThumbnail = ThumbnailsCacheManager.cancelPotentialThumbnailWork(\n            fakeFileToCheatThumbnailsCacheManagerInterface, itemViewHolder.binding.thumbnail\n                                                                                                 );\n\n        // TODO this code is duplicated; refactor to a common place\n        if (MimeTypeUtil.isImage(fakeFileToCheatThumbnailsCacheManagerInterface)\n            && fakeFileToCheatThumbnailsCacheManagerInterface.getRemoteId() != null &&\n            item.getUploadStatus() == UploadStatus.UPLOAD_SUCCEEDED) {\n            // Thumbnail in Cache?\n            Bitmap thumbnail = ThumbnailsCacheManager.getBitmapFromDiskCache(String.valueOf(fakeFileToCheatThumbnailsCacheManagerInterface.getRemoteId()));\n\n            if (thumbnail != null && !fakeFileToCheatThumbnailsCacheManagerInterface.isUpdateThumbnailNeeded()) {\n                itemViewHolder.binding.thumbnail.setImageBitmap(thumbnail);\n            } else {\n                // generate new Thumbnail\n                Optional<User> user = parentActivity.getUser();\n                if (allowedToCreateNewThumbnail && user.isPresent()) {\n                    final ThumbnailsCacheManager.ThumbnailGenerationTask task =\n                        new ThumbnailsCacheManager.ThumbnailGenerationTask(\n                            itemViewHolder.binding.thumbnail,\n                            parentActivity.getStorageManager(),\n                            user.get()\n                        );\n                    if (thumbnail == null) {\n                        if (MimeTypeUtil.isVideo(fakeFileToCheatThumbnailsCacheManagerInterface)) {\n                            thumbnail = ThumbnailsCacheManager.mDefaultVideo;\n                        } else {\n                            thumbnail = ThumbnailsCacheManager.mDefaultImg;\n                        }\n                    }\n                    final ThumbnailsCacheManager.AsyncThumbnailDrawable asyncDrawable =\n                        new ThumbnailsCacheManager.AsyncThumbnailDrawable(\n                            parentActivity.getResources(),\n                            thumbnail,\n                            task\n                        );\n                    itemViewHolder.binding.thumbnail.setImageDrawable(asyncDrawable);\n                    task.execute(new ThumbnailsCacheManager.ThumbnailGenerationTaskObject(\n                        fakeFileToCheatThumbnailsCacheManagerInterface, null));\n                }\n            }\n\n            if (\"image/png\".equals(item.getMimeType())) {\n                itemViewHolder.binding.thumbnail.setBackgroundColor(parentActivity.getResources().getColor(R.color.bg_default));\n            }\n        } else if (MimeTypeUtil.isImage(fakeFileToCheatThumbnailsCacheManagerInterface)) {\n            File file = new File(item.getLocalPath());\n            Bitmap thumbnail = ThumbnailsCacheManager.getBitmapFromDiskCache(String.valueOf(file.hashCode()));\n\n            if (thumbnail != null) {\n                itemViewHolder.binding.thumbnail.setImageBitmap(thumbnail);\n            } else if (allowedToCreateNewThumbnail) {\n                getThumbnailFromFileTypeAndSetIcon(item.getLocalPath(), itemViewHolder);\n\n                final ThumbnailsCacheManager.ThumbnailGenerationTask task =\n                    new ThumbnailsCacheManager.ThumbnailGenerationTask(itemViewHolder.binding.thumbnail);\n\n                if (MimeTypeUtil.isVideo(file)) {\n                    thumbnail = ThumbnailsCacheManager.mDefaultVideo;\n                } else {\n                    thumbnail = ThumbnailsCacheManager.mDefaultImg;\n                }\n\n                final ThumbnailsCacheManager.AsyncThumbnailDrawable asyncDrawable =\n                    new ThumbnailsCacheManager.AsyncThumbnailDrawable(parentActivity.getResources(), thumbnail,\n                                                                      task);\n\n                task.execute(new ThumbnailsCacheManager.ThumbnailGenerationTaskObject(file, null));\n                task.setListener(new ThumbnailsCacheManager.ThumbnailGenerationTask.Listener() {\n                    @Override\n                    public void onSuccess() {\n                        itemViewHolder.binding.thumbnail.setImageDrawable(asyncDrawable);\n                    }\n\n                    @Override\n                    public void onError() {\n                        getThumbnailFromFileTypeAndSetIcon(item.getLocalPath(), itemViewHolder);\n                    }\n                });\n\n                Log_OC.v(TAG, \"Executing task to generate a new thumbnail\");\n            }\n\n            if (\"image/png\".equalsIgnoreCase(item.getMimeType())) {\n                itemViewHolder.binding.thumbnail.setBackgroundColor(parentActivity.getResources().getColor(R.color.bg_default));\n            }\n        } else {\n            if (optionalUser.isPresent()) {\n                final Drawable icon = MimeTypeUtil.getFileTypeIcon(item.getMimeType(),\n                                                                   fileName,\n                                                                   parentActivity,\n                                                                   viewThemeUtils);\n                itemViewHolder.binding.thumbnail.setImageDrawable(icon);\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onBindViewHolder from UploadListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: onBindViewHolder\n\n        Method Code: @Override\n    public void onBindViewHolder(SectionedViewHolder holder, int section, int relativePosition, int absolutePosition) {\n        if (uploadGroups.length == 0 || section < 0 || section >= uploadGroups.length) {\n            return;\n        }\n\n        UploadGroup uploadGroup = uploadGroups[section];\n        if (uploadGroup == null) {\n            return;\n        }\n\n        OCUpload item = uploadGroup.getItem(relativePosition);\n        if (item == null) {\n            return;\n        }\n\n        ItemViewHolder itemViewHolder = (ItemViewHolder) holder;\n        itemViewHolder.binding.uploadName.setText(item.getLocalPath());\n\n        // local file name\n        File remoteFile = new File(item.getRemotePath());\n        String fileName = remoteFile.getName();\n        if (fileName.isEmpty()) {\n            fileName = File.separator;\n        }\n        itemViewHolder.binding.uploadName.setText(fileName);\n\n        // remote path to parent folder\n        itemViewHolder.binding.uploadRemotePath.setText(new File(item.getRemotePath()).getParent());\n\n        // file size\n        if (item.getFileSize() != 0) {\n            itemViewHolder.binding.uploadFileSize.setText(String.format(\"%s, \",\n                                                                        DisplayUtils.bytesToHumanReadable(item.getFileSize())));\n        } else {\n            itemViewHolder.binding.uploadFileSize.setText(\"\");\n        }\n\n        // upload date\n        long updateTime = item.getUploadEndTimestamp();\n        CharSequence dateString = DisplayUtils.getRelativeDateTimeString(parentActivity,\n                                                                         updateTime,\n                                                                         DateUtils.SECOND_IN_MILLIS,\n                                                                         DateUtils.WEEK_IN_MILLIS, 0);\n        itemViewHolder.binding.uploadDate.setText(dateString);\n\n        // account\n        final Optional<User> optionalUser = accountManager.getUser(item.getAccountName());\n        if (showUser) {\n            itemViewHolder.binding.uploadAccount.setVisibility(View.VISIBLE);\n            if (optionalUser.isPresent()) {\n                itemViewHolder.binding.uploadAccount.setText(\n                    DisplayUtils.getAccountNameDisplayText(optionalUser.get()));\n            } else {\n                itemViewHolder.binding.uploadAccount.setText(item.getAccountName());\n            }\n        } else {\n            itemViewHolder.binding.uploadAccount.setVisibility(View.GONE);\n        }\n\n        // Reset fields visibility\n        itemViewHolder.binding.uploadDate.setVisibility(View.VISIBLE);\n        itemViewHolder.binding.uploadRemotePath.setVisibility(View.VISIBLE);\n        itemViewHolder.binding.uploadFileSize.setVisibility(View.VISIBLE);\n        itemViewHolder.binding.uploadStatus.setVisibility(View.VISIBLE);\n        itemViewHolder.binding.uploadProgressBar.setVisibility(View.GONE);\n\n        // Update information depending of upload details\n        String status = getStatusText(item);\n        switch (item.getUploadStatus()) {\n            case UPLOAD_IN_PROGRESS -> {\n                viewThemeUtils.platform.themeHorizontalProgressBar(itemViewHolder.binding.uploadProgressBar);\n                itemViewHolder.binding.uploadProgressBar.setProgress(0);\n                itemViewHolder.binding.uploadProgressBar.setVisibility(View.VISIBLE);\n\n                if (uploadHelper.isUploadingNow(item)) {\n                    // really uploading, so...\n                    // ... unbind the old progress bar, if any; ...\n                    if (progressListener != null) {\n                        String targetKey = FileUploadHelper.Companion.buildRemoteName(progressListener.getUpload().getAccountName(), progressListener.getUpload().getRemotePath());\n                        uploadHelper.removeUploadTransferProgressListener(progressListener, targetKey);\n                    }\n                    // ... then, bind the current progress bar to listen for updates\n                    progressListener = new ProgressListener(item, itemViewHolder.binding.uploadProgressBar);\n                    String targetKey = FileUploadHelper.Companion.buildRemoteName(item.getAccountName(), item.getRemotePath());\n                    uploadHelper.addUploadTransferProgressListener(progressListener, targetKey);\n\n                } else {\n                    // not really uploading; stop listening progress if view is reused!\n                    if (progressListener != null &&\n                        progressListener.isWrapping(itemViewHolder.binding.uploadProgressBar)) {\n\n                        String targetKey = FileUploadHelper.Companion.buildRemoteName(progressListener.getUpload().getAccountName(), progressListener.getUpload().getRemotePath());\n\n                        uploadHelper.removeUploadTransferProgressListener(progressListener, targetKey);\n                        progressListener = null;\n                    }\n                }\n\n                itemViewHolder.binding.uploadDate.setVisibility(View.GONE);\n                itemViewHolder.binding.uploadFileSize.setVisibility(View.GONE);\n                itemViewHolder.binding.uploadProgressBar.invalidate();\n            }\n            case UPLOAD_FAILED -> itemViewHolder.binding.uploadDate.setVisibility(View.GONE);\n            case UPLOAD_SUCCEEDED, UPLOAD_CANCELLED ->\n                itemViewHolder.binding.uploadStatus.setVisibility(View.GONE);\n        }\n\n        // show status if same file conflict or local file deleted or upload cancelled\n        if ((item.getUploadStatus() == UploadStatus.UPLOAD_SUCCEEDED && item.getLastResult() != UploadResult.UPLOADED)\n            || item.getUploadStatus() == UploadStatus.UPLOAD_CANCELLED) {\n\n            itemViewHolder.binding.uploadStatus.setVisibility(View.VISIBLE);\n            itemViewHolder.binding.uploadDate.setVisibility(View.GONE);\n            itemViewHolder.binding.uploadFileSize.setVisibility(View.GONE);\n        }\n\n        itemViewHolder.binding.uploadStatus.setText(status);\n\n        // bind listeners to perform actions\n        if (item.getUploadStatus() == UploadStatus.UPLOAD_IN_PROGRESS) {\n            // Cancel\n            itemViewHolder.binding.uploadRightButton.setImageResource(R.drawable.ic_action_cancel_grey);\n            itemViewHolder.binding.uploadRightButton.setVisibility(View.VISIBLE);\n            itemViewHolder.binding.uploadRightButton.setOnClickListener(v -> {\n                uploadHelper.cancelFileUpload(item.getRemotePath(), item.getAccountName());\n                loadUploadItemsFromDb();\n            });\n\n        } else if (item.getUploadStatus() == UploadStatus.UPLOAD_FAILED) {\n            if (item.getLastResult() == UploadResult.SYNC_CONFLICT) {\n                itemViewHolder.binding.uploadRightButton.setImageResource(R.drawable.ic_dots_vertical);\n                itemViewHolder.binding.uploadRightButton.setOnClickListener(view -> {\n                    if (optionalUser.isPresent()) {\n                        User user = optionalUser.get();\n                        showItemConflictPopup(user, itemViewHolder, item, status, view);\n                    }\n                });\n            } else {\n                // Delete\n                itemViewHolder.binding.uploadRightButton.setImageResource(R.drawable.ic_action_delete_grey);\n                itemViewHolder.binding.uploadRightButton.setOnClickListener(v -> removeUpload(item));\n            }\n            itemViewHolder.binding.uploadRightButton.setVisibility(View.VISIBLE);\n        } else {    // UploadStatus.UPLOAD_SUCCEEDED\n            itemViewHolder.binding.uploadRightButton.setVisibility(View.INVISIBLE);\n        }\n\n        itemViewHolder.binding.uploadListItemLayout.setOnClickListener(null);\n\n        // Set icon or thumbnail\n        itemViewHolder.binding.thumbnail.setImageResource(R.drawable.file);\n\n        // click on item\n        if (item.getUploadStatus() == UploadStatus.UPLOAD_FAILED ||\n            item.getUploadStatus() == UploadStatus.UPLOAD_CANCELLED) {\n\n            final UploadResult uploadResult = item.getLastResult();\n            itemViewHolder.binding.uploadListItemLayout.setOnClickListener(v -> {\n                if (uploadResult == UploadResult.CREDENTIAL_ERROR) {\n                    final Optional<User> optUser = accountManager.getUser(item.getAccountName());\n                    final User user = optUser.orElseThrow(RuntimeException::new);\n                    parentActivity.getFileOperationsHelper().checkCurrentCredentials(user);\n                    return;\n                } else if (uploadResult == UploadResult.SYNC_CONFLICT && optionalUser.isPresent()) {\n                    User user = optionalUser.get();\n                    if (checkAndOpenConflictResolutionDialog(user, itemViewHolder, item, status)) {\n                        return;\n                    }\n                }\n\n                // not a credentials error\n                File file = new File(item.getLocalPath());\n                Optional<User> user = accountManager.getUser(item.getAccountName());\n                if (file.exists() && user.isPresent()) {\n                    uploadHelper.retryUpload(item, user.get());\n                    loadUploadItemsFromDb();\n                } else {\n                    DisplayUtils.showSnackMessage(\n                        v.getRootView().findViewById(android.R.id.content),\n                        R.string.local_file_not_found_message\n                                                 );\n                }\n            });\n        } else if (item.getUploadStatus() == UploadStatus.UPLOAD_SUCCEEDED) {\n            itemViewHolder.binding.uploadListItemLayout.setOnClickListener(v -> onUploadedItemClick(item));\n        }\n\n\n        // click on thumbnail to open locally\n        if (item.getUploadStatus() != UploadStatus.UPLOAD_SUCCEEDED) {\n            itemViewHolder.binding.thumbnail.setOnClickListener(v -> onUploadingItemClick(item));\n        }\n\n        /*\n         * Cancellation needs do be checked and done before changing the drawable in fileIcon, or\n         * {@link ThumbnailsCacheManager#cancelPotentialWork} will NEVER cancel any task.\n         */\n        OCFile fakeFileToCheatThumbnailsCacheManagerInterface = new OCFile(item.getRemotePath());\n        fakeFileToCheatThumbnailsCacheManagerInterface.setStoragePath(item.getLocalPath());\n        fakeFileToCheatThumbnailsCacheManagerInterface.setMimeType(item.getMimeType());\n\n        boolean allowedToCreateNewThumbnail = ThumbnailsCacheManager.cancelPotentialThumbnailWork(\n            fakeFileToCheatThumbnailsCacheManagerInterface, itemViewHolder.binding.thumbnail\n                                                                                                 );\n\n        // TODO this code is duplicated; refactor to a common place\n        if (MimeTypeUtil.isImage(fakeFileToCheatThumbnailsCacheManagerInterface)\n            && fakeFileToCheatThumbnailsCacheManagerInterface.getRemoteId() != null &&\n            item.getUploadStatus() == UploadStatus.UPLOAD_SUCCEEDED) {\n            // Thumbnail in Cache?\n            Bitmap thumbnail = ThumbnailsCacheManager.getBitmapFromDiskCache(String.valueOf(fakeFileToCheatThumbnailsCacheManagerInterface.getRemoteId()));\n\n            if (thumbnail != null && !fakeFileToCheatThumbnailsCacheManagerInterface.isUpdateThumbnailNeeded()) {\n                itemViewHolder.binding.thumbnail.setImageBitmap(thumbnail);\n            } else {\n                // generate new Thumbnail\n                Optional<User> user = parentActivity.getUser();\n                if (allowedToCreateNewThumbnail && user.isPresent()) {\n                    final ThumbnailsCacheManager.ThumbnailGenerationTask task =\n                        new ThumbnailsCacheManager.ThumbnailGenerationTask(\n                            itemViewHolder.binding.thumbnail,\n                            parentActivity.getStorageManager(),\n                            user.get()\n                        );\n                    if (thumbnail == null) {\n                        if (MimeTypeUtil.isVideo(fakeFileToCheatThumbnailsCacheManagerInterface)) {\n                            thumbnail = ThumbnailsCacheManager.mDefaultVideo;\n                        } else {\n                            thumbnail = ThumbnailsCacheManager.mDefaultImg;\n                        }\n                    }\n                    final ThumbnailsCacheManager.AsyncThumbnailDrawable asyncDrawable =\n                        new ThumbnailsCacheManager.AsyncThumbnailDrawable(\n                            parentActivity.getResources(),\n                            thumbnail,\n                            task\n                        );\n                    itemViewHolder.binding.thumbnail.setImageDrawable(asyncDrawable);\n                    task.execute(new ThumbnailsCacheManager.ThumbnailGenerationTaskObject(\n                        fakeFileToCheatThumbnailsCacheManagerInterface, null));\n                }\n            }\n\n            if (\"image/png\".equals(item.getMimeType())) {\n                itemViewHolder.binding.thumbnail.setBackgroundColor(parentActivity.getResources().getColor(R.color.bg_default));\n            }\n        } else if (MimeTypeUtil.isImage(fakeFileToCheatThumbnailsCacheManagerInterface)) {\n            File file = new File(item.getLocalPath());\n            Bitmap thumbnail = ThumbnailsCacheManager.getBitmapFromDiskCache(String.valueOf(file.hashCode()));\n\n            if (thumbnail != null) {\n                itemViewHolder.binding.thumbnail.setImageBitmap(thumbnail);\n            } else if (allowedToCreateNewThumbnail) {\n                getThumbnailFromFileTypeAndSetIcon(item.getLocalPath(), itemViewHolder);\n\n                final ThumbnailsCacheManager.ThumbnailGenerationTask task =\n                    new ThumbnailsCacheManager.ThumbnailGenerationTask(itemViewHolder.binding.thumbnail);\n\n                if (MimeTypeUtil.isVideo(file)) {\n                    thumbnail = ThumbnailsCacheManager.mDefaultVideo;\n                } else {\n                    thumbnail = ThumbnailsCacheManager.mDefaultImg;\n                }\n\n                final ThumbnailsCacheManager.AsyncThumbnailDrawable asyncDrawable =\n                    new ThumbnailsCacheManager.AsyncThumbnailDrawable(parentActivity.getResources(), thumbnail,\n                                                                      task);\n\n                task.execute(new ThumbnailsCacheManager.ThumbnailGenerationTaskObject(file, null));\n                task.setListener(new ThumbnailsCacheManager.ThumbnailGenerationTask.Listener() {\n                    @Override\n                    public void onSuccess() {\n                        itemViewHolder.binding.thumbnail.setImageDrawable(asyncDrawable);\n                    }\n\n                    @Override\n                    public void onError() {\n                        getThumbnailFromFileTypeAndSetIcon(item.getLocalPath(), itemViewHolder);\n                    }\n                });\n\n                Log_OC.v(TAG, \"Executing task to generate a new thumbnail\");\n            }\n\n            if (\"image/png\".equalsIgnoreCase(item.getMimeType())) {\n                itemViewHolder.binding.thumbnail.setBackgroundColor(parentActivity.getResources().getColor(R.color.bg_default));\n            }\n        } else {\n            if (optionalUser.isPresent()) {\n                final Drawable icon = MimeTypeUtil.getFileTypeIcon(item.getMimeType(),\n                                                                   fileName,\n                                                                   parentActivity,\n                                                                   viewThemeUtils);\n                itemViewHolder.binding.thumbnail.setImageDrawable(icon);\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onBindViewHolder(holder: SectionedViewHolder, section: Int, relativePosition: Int, absolutePosition: Int) {\n    guard uploadGroups.count > 0, section >= 0, section < uploadGroups.count else {\n        return\n    }\n\n    guard let uploadGroup = uploadGroups[section] else {\n        return\n    }\n\n    guard let item = uploadGroup.getItem(relativePosition) else {\n        return\n    }\n\n    let itemViewHolder = holder as! ItemViewHolder\n    itemViewHolder.binding.uploadName.text = item.getLocalPath()\n\n    // local file name\n    let remoteFile = File(item.getRemotePath())\n    var fileName = remoteFile.name\n    if fileName.isEmpty {\n        fileName = File.separator\n    }\n    itemViewHolder.binding.uploadName.text = fileName\n\n    // remote path to parent folder\n    itemViewHolder.binding.uploadRemotePath.text = File(item.getRemotePath()).parent\n\n    // file size\n    if item.getFileSize() != 0 {\n        itemViewHolder.binding.uploadFileSize.text = String(format: \"%s, \", DisplayUtils.bytesToHumanReadable(item.getFileSize()))\n    } else {\n        itemViewHolder.binding.uploadFileSize.text = \"\"\n    }\n\n    // upload date\n    let updateTime = item.getUploadEndTimestamp()\n    let dateString = DisplayUtils.getRelativeDateTimeString(parentActivity, updateTime, DateUtils.SECOND_IN_MILLIS, DateUtils.WEEK_IN_MILLIS, 0)\n    itemViewHolder.binding.uploadDate.text = dateString\n\n    // account\n    let optionalUser = accountManager.getUser(item.getAccountName())\n    if showUser {\n        itemViewHolder.binding.uploadAccount.isHidden = false\n        if let user = optionalUser {\n            itemViewHolder.binding.uploadAccount.text = DisplayUtils.getAccountNameDisplayText(user)\n        } else {\n            itemViewHolder.binding.uploadAccount.text = item.getAccountName()\n        }\n    } else {\n        itemViewHolder.binding.uploadAccount.isHidden = true\n    }\n\n    // Reset fields visibility\n    itemViewHolder.binding.uploadDate.isHidden = false\n    itemViewHolder.binding.uploadRemotePath.isHidden = false\n    itemViewHolder.binding.uploadFileSize.isHidden = false\n    itemViewHolder.binding.uploadStatus.isHidden = false\n    itemViewHolder.binding.uploadProgressBar.isHidden = true\n\n    // Update information depending on upload details\n    let status = getStatusText(item)\n    switch item.getUploadStatus() {\n    case .UPLOAD_IN_PROGRESS:\n        viewThemeUtils.platform.themeHorizontalProgressBar(itemViewHolder.binding.uploadProgressBar)\n        itemViewHolder.binding.uploadProgressBar.progress = 0\n        itemViewHolder.binding.uploadProgressBar.isHidden = false\n\n        if uploadHelper.isUploadingNow(item) {\n            if let progressListener = progressListener {\n                let targetKey = FileUploadHelper.buildRemoteName(progressListener.getUpload().getAccountName(), progressListener.getUpload().getRemotePath())\n                uploadHelper.removeUploadTransferProgressListener(progressListener, targetKey)\n            }\n            progressListener = ProgressListener(item: item, progressBar: itemViewHolder.binding.uploadProgressBar)\n            let targetKey = FileUploadHelper.buildRemoteName(item.getAccountName(), item.getRemotePath())\n            uploadHelper.addUploadTransferProgressListener(progressListener!, targetKey)\n        } else {\n            if let progressListener = progressListener, progressListener.isWrapping(itemViewHolder.binding.uploadProgressBar) {\n                let targetKey = FileUploadHelper.buildRemoteName(progressListener.getUpload().getAccountName(), progressListener.getUpload().getRemotePath())\n                uploadHelper.removeUploadTransferProgressListener(progressListener, targetKey)\n                self.progressListener = nil\n            }\n        }\n\n        itemViewHolder.binding.uploadDate.isHidden = true\n        itemViewHolder.binding.uploadFileSize.isHidden = true\n        itemViewHolder.binding.uploadProgressBar.setNeedsDisplay()\n\n    case .UPLOAD_FAILED:\n        itemViewHolder.binding.uploadDate.isHidden = true\n\n    case .UPLOAD_SUCCEEDED, .UPLOAD_CANCELLED:\n        itemViewHolder.binding.uploadStatus.isHidden = true\n    }\n\n    if (item.getUploadStatus() == .UPLOAD_SUCCEEDED && item.getLastResult() != .UPLOADED) || item.getUploadStatus() == .UPLOAD_CANCELLED {\n        itemViewHolder.binding.uploadStatus.isHidden = false\n        itemViewHolder.binding.uploadDate.isHidden = true\n        itemViewHolder.binding.uploadFileSize.isHidden = true\n    }\n\n    itemViewHolder.binding.uploadStatus.text = status\n\n    // bind listeners to perform actions\n    if item.getUploadStatus() == .UPLOAD_IN_PROGRESS {\n        itemViewHolder.binding.uploadRightButton.setImage(UIImage(named: \"ic_action_cancel_grey\"), for: .normal)\n        itemViewHolder.binding.uploadRightButton.isHidden = false\n        itemViewHolder.binding.uploadRightButton.addTarget(self, action: #selector(cancelUpload(_:)), for: .touchUpInside)\n    } else if item.getUploadStatus() == .UPLOAD_FAILED {\n        if item.getLastResult() == .SYNC_CONFLICT {\n            itemViewHolder.binding.uploadRightButton.setImage(UIImage(named: \"ic_dots_vertical\"), for: .normal)\n            itemViewHolder.binding.uploadRightButton.addTarget(self, action: #selector(showItemConflictPopup(_:)), for: .touchUpInside)\n        } else {\n            itemViewHolder.binding.uploadRightButton.setImage(UIImage(named: \"ic_action_delete_grey\"), for: .normal)\n            itemViewHolder.binding.uploadRightButton.addTarget(self, action: #selector(removeUpload(_:)), for: .touchUpInside)\n        }\n        itemViewHolder.binding.uploadRightButton.isHidden = false\n    } else {\n        itemViewHolder.binding.uploadRightButton.isHidden = true\n    }\n\n    itemViewHolder.binding.uploadListItemLayout.addGestureRecognizer(UITapGestureRecognizer(target: self, action: nil))\n\n    // Set icon or thumbnail\n    itemViewHolder.binding.thumbnail.image = UIImage(named: \"file\")\n\n    // click on item\n    if item.getUploadStatus() == .UPLOAD_FAILED || item.getUploadStatus() == .UPLOAD_CANCELLED {\n        let uploadResult = item.getLastResult()\n        itemViewHolder.binding.uploadListItemLayout.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(handleUploadItemClick(_:))))\n    } else if item.getUploadStatus() == .UPLOAD_SUCCEEDED {\n        itemViewHolder.binding.uploadListItemLayout.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(onUploadedItemClick(_:))))\n    }\n\n    // click on thumbnail to open locally\n    if item.getUploadStatus() != .UPLOAD_SUCCEEDED {\n        itemViewHolder.binding.thumbnail.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(onUploadingItemClick(_:))))\n    }\n\n    // Thumbnail management\n    let fakeFile = OCFile(remotePath: item.getRemotePath())\n    fakeFile.setStoragePath(item.getLocalPath())\n    fakeFile.setMimeType(item.getMimeType())\n\n    let allowedToCreateNewThumbnail = ThumbnailsCacheManager.cancelPotentialThumbnailWork(fakeFile, itemViewHolder.binding.thumbnail)\n\n    if MimeTypeUtil.isImage(fakeFile), let remoteId = fakeFile.getRemoteId(), item.getUploadStatus() == .UPLOAD_SUCCEEDED {\n        if let thumbnail = ThumbnailsCacheManager.getBitmapFromDiskCache(String(remoteId)), !fakeFile.isUpdateThumbnailNeeded() {\n            itemViewHolder.binding.thumbnail.image = thumbnail\n        } else {\n            if allowedToCreateNewThumbnail, let user = parentActivity.getUser() {\n                let task = ThumbnailsCacheManager.ThumbnailGenerationTask(thumbnail: itemViewHolder.binding.thumbnail, storageManager: parentActivity.getStorageManager(), user: user)\n                let asyncDrawable = ThumbnailsCacheManager.AsyncThumbnailDrawable(resources: parentActivity.resources, placeholder: ThumbnailsCacheManager.mDefaultImg, task: task)\n                itemViewHolder.binding.thumbnail.image = asyncDrawable\n                task.execute(ThumbnailsCacheManager.ThumbnailGenerationTaskObject(file: fakeFile, completion: nil))\n            }\n        }\n\n        if item.getMimeType() == \"image/png\" {\n            itemViewHolder.binding.thumbnail.backgroundColor = UIColor(named: \"bg_default\")\n        }\n    } else if MimeTypeUtil.isImage(fakeFile) {\n        let file = File(item.getLocalPath())\n        if let thumbnail = ThumbnailsCacheManager.getBitmapFromDiskCache(String(file.hashValue)) {\n            itemViewHolder.binding.thumbnail.image = thumbnail\n        } else if allowedToCreateNewThumbnail {\n            getThumbnailFromFileTypeAndSetIcon(item.getLocalPath(), itemViewHolder)\n\n            let task = ThumbnailsCacheManager.ThumbnailGenerationTask(thumbnail: itemViewHolder.binding.thumbnail)\n            let asyncDrawable = ThumbnailsCacheManager.AsyncThumbnailDrawable(resources: parentActivity.resources, placeholder: ThumbnailsCacheManager.mDefaultImg, task: task)\n            task.execute(ThumbnailsCacheManager.ThumbnailGenerationTaskObject(file: file, completion: nil))\n            task.setListener { success in\n                if success {\n                    itemViewHolder.binding.thumbnail.image = asyncDrawable\n                } else {\n                    getThumbnailFromFileTypeAndSetIcon(item.getLocalPath(), itemViewHolder)\n                }\n            }\n        }\n\n        if item.getMimeType().lowercased() == \"image/png\" {\n            itemViewHolder.binding.thumbnail.backgroundColor = UIColor(named: \"bg_default\")\n        }\n    } else {\n        if let user = optionalUser {\n            let icon = MimeTypeUtil.getFileTypeIcon(item.getMimeType(), fileName, parentActivity, viewThemeUtils)\n            itemViewHolder.binding.thumbnail.image = icon\n        }\n    }\n}\n```"
    },
    {
        "method_name": "onSuccess",
        "method_code": "@Override\n                    public void onSuccess() {\n                        itemViewHolder.binding.thumbnail.setImageDrawable(asyncDrawable);\n                    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onSuccess from UploadListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: onSuccess\n\n        Method Code: @Override\n                    public void onSuccess() {\n                        itemViewHolder.binding.thumbnail.setImageDrawable(asyncDrawable);\n                    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onSuccess() {\n    itemViewHolder.binding.thumbnail.image = asyncDrawable\n}\n```"
    },
    {
        "method_name": "onError",
        "method_code": "@Override\n                    public void onError() {\n                        getThumbnailFromFileTypeAndSetIcon(item.getLocalPath(), itemViewHolder);\n                    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onError from UploadListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: onError\n\n        Method Code: @Override\n                    public void onError() {\n                        getThumbnailFromFileTypeAndSetIcon(item.getLocalPath(), itemViewHolder);\n                    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onError() {\n    getThumbnailFromFileTypeAndSetIcon(item.localPath, itemViewHolder)\n}\n```"
    },
    {
        "method_name": "getThumbnailFromFileTypeAndSetIcon",
        "method_code": "private void getThumbnailFromFileTypeAndSetIcon(String localPath, ItemViewHolder itemViewHolder) {\n        Drawable drawable = MimeTypeUtil.getIcon(localPath, parentActivity, viewThemeUtils);\n        if (drawable == null) return;\n        itemViewHolder.binding.thumbnail.setImageDrawable(drawable);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getThumbnailFromFileTypeAndSetIcon from UploadListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getThumbnailFromFileTypeAndSetIcon\n\n        Method Code: private void getThumbnailFromFileTypeAndSetIcon(String localPath, ItemViewHolder itemViewHolder) {\n        Drawable drawable = MimeTypeUtil.getIcon(localPath, parentActivity, viewThemeUtils);\n        if (drawable == null) return;\n        itemViewHolder.binding.thumbnail.setImageDrawable(drawable);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getThumbnailFromFileTypeAndSetIcon(localPath: String, itemViewHolder: ItemViewHolder) {\n    if let drawable = MimeTypeUtil.getIcon(localPath: localPath, parentActivity: parentActivity, viewThemeUtils: viewThemeUtils) {\n        itemViewHolder.binding.thumbnail.image = drawable\n    }\n}\n```"
    },
    {
        "method_name": "checkAndOpenConflictResolutionDialog",
        "method_code": "private boolean checkAndOpenConflictResolutionDialog(User user,\n                                                         ItemViewHolder itemViewHolder,\n                                                         OCUpload item,\n                                                         String status) {\n        String remotePath = item.getRemotePath();\n        OCFile localFile = storageManager.getFileByEncryptedRemotePath(remotePath);\n\n        if (localFile == null) {\n            // Remote file doesn't exist, try to refresh folder\n            OCFile folder = storageManager.getFileByEncryptedRemotePath(new File(remotePath).getParent() + \"/\");\n\n            if (folder != null && folder.isFolder()) {\n                refreshFolderAndUpdateUI(itemViewHolder, user, folder, remotePath, item, status);\n                return true;\n            }\n\n            // Destination folder doesn't exist anymore\n        }\n\n        if (localFile != null) {\n            this.openConflictActivity(localFile, item);\n            return true;\n        }\n\n        // Remote file doesn't exist anymore = there is no more conflict\n        return false;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled checkAndOpenConflictResolutionDialog from UploadListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: checkAndOpenConflictResolutionDialog\n\n        Method Code: private boolean checkAndOpenConflictResolutionDialog(User user,\n                                                         ItemViewHolder itemViewHolder,\n                                                         OCUpload item,\n                                                         String status) {\n        String remotePath = item.getRemotePath();\n        OCFile localFile = storageManager.getFileByEncryptedRemotePath(remotePath);\n\n        if (localFile == null) {\n            // Remote file doesn't exist, try to refresh folder\n            OCFile folder = storageManager.getFileByEncryptedRemotePath(new File(remotePath).getParent() + \"/\");\n\n            if (folder != null && folder.isFolder()) {\n                refreshFolderAndUpdateUI(itemViewHolder, user, folder, remotePath, item, status);\n                return true;\n            }\n\n            // Destination folder doesn't exist anymore\n        }\n\n        if (localFile != null) {\n            this.openConflictActivity(localFile, item);\n            return true;\n        }\n\n        // Remote file doesn't exist anymore = there is no more conflict\n        return false;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func checkAndOpenConflictResolutionDialog(user: User, itemViewHolder: ItemViewHolder, item: OCUpload, status: String) -> Bool {\n    let remotePath = item.getRemotePath()\n    let localFile = storageManager.getFileByEncryptedRemotePath(remotePath)\n\n    if localFile == nil {\n        // Remote file doesn't exist, try to refresh folder\n        if let folder = storageManager.getFileByEncryptedRemotePath((remotePath as NSString).deletingLastPathComponent + \"/\"), folder.isFolder() {\n            refreshFolderAndUpdateUI(itemViewHolder: itemViewHolder, user: user, folder: folder, remotePath: remotePath, item: item, status: status)\n            return true\n        }\n\n        // Destination folder doesn't exist anymore\n    }\n\n    if let localFile = localFile {\n        self.openConflictActivity(localFile: localFile, item: item)\n        return true\n    }\n\n    // Remote file doesn't exist anymore = there is no more conflict\n    return false\n}\n```"
    },
    {
        "method_name": "refreshFolderAndUpdateUI",
        "method_code": "private void refreshFolderAndUpdateUI(ItemViewHolder holder, User user, OCFile folder, String remotePath, OCUpload item, String status) {\n        Context context = MainApp.getAppContext();\n\n        this.refreshFolder(context, holder, user, folder, (caller, result) -> {\n            holder.binding.uploadStatus.setText(status);\n\n            if (result.isSuccess()) {\n                OCFile fileOnServer = storageManager.getFileByEncryptedRemotePath(remotePath);\n\n                if (fileOnServer != null) {\n                    openConflictActivity(fileOnServer, item);\n                } else {\n                    displayFileNotFoundError(holder.itemView, context);\n                }\n            }\n        });\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled refreshFolderAndUpdateUI from UploadListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: refreshFolderAndUpdateUI\n\n        Method Code: private void refreshFolderAndUpdateUI(ItemViewHolder holder, User user, OCFile folder, String remotePath, OCUpload item, String status) {\n        Context context = MainApp.getAppContext();\n\n        this.refreshFolder(context, holder, user, folder, (caller, result) -> {\n            holder.binding.uploadStatus.setText(status);\n\n            if (result.isSuccess()) {\n                OCFile fileOnServer = storageManager.getFileByEncryptedRemotePath(remotePath);\n\n                if (fileOnServer != null) {\n                    openConflictActivity(fileOnServer, item);\n                } else {\n                    displayFileNotFoundError(holder.itemView, context);\n                }\n            }\n        });\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func refreshFolderAndUpdateUI(holder: ItemViewHolder, user: User, folder: OCFile, remotePath: String, item: OCUpload, status: String) {\n    let context = MainApp.getAppContext()\n\n    self.refreshFolder(context: context, holder: holder, user: user, folder: folder) { caller, result in\n        holder.binding.uploadStatus.text = status\n\n        if result.isSuccess() {\n            if let fileOnServer = storageManager.getFileByEncryptedRemotePath(remotePath) {\n                openConflictActivity(fileOnServer: fileOnServer, item: item)\n            } else {\n                displayFileNotFoundError(view: holder.itemView, context: context)\n            }\n        }\n    }\n}\n```"
    },
    {
        "method_name": "displayFileNotFoundError",
        "method_code": "private void displayFileNotFoundError(View itemView, Context context) {\n        String message = context.getString(R.string.uploader_file_not_found_message);\n        DisplayUtils.showSnackMessage(itemView, message);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled displayFileNotFoundError from UploadListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: displayFileNotFoundError\n\n        Method Code: private void displayFileNotFoundError(View itemView, Context context) {\n        String message = context.getString(R.string.uploader_file_not_found_message);\n        DisplayUtils.showSnackMessage(itemView, message);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func displayFileNotFoundError(itemView: UIView, context: Context) {\n    let message = context.getString(R.string.uploader_file_not_found_message)\n    DisplayUtils.showSnackMessage(itemView, message)\n}\n```"
    },
    {
        "method_name": "showItemConflictPopup",
        "method_code": "private void showItemConflictPopup(User user,\n                                       ItemViewHolder itemViewHolder,\n                                       OCUpload item,\n                                       String status,\n                                       View view) {\n        PopupMenu popup = new PopupMenu(MainApp.getAppContext(), view);\n        popup.inflate(R.menu.upload_list_item_file_conflict);\n        popup.setOnMenuItemClickListener(i -> {\n            int itemId = i.getItemId();\n\n            if (itemId == R.id.action_upload_list_resolve_conflict) {\n                checkAndOpenConflictResolutionDialog(user, itemViewHolder, item, status);\n            } else {\n                removeUpload(item);\n            }\n\n            return true;\n        });\n        popup.show();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showItemConflictPopup from UploadListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: showItemConflictPopup\n\n        Method Code: private void showItemConflictPopup(User user,\n                                       ItemViewHolder itemViewHolder,\n                                       OCUpload item,\n                                       String status,\n                                       View view) {\n        PopupMenu popup = new PopupMenu(MainApp.getAppContext(), view);\n        popup.inflate(R.menu.upload_list_item_file_conflict);\n        popup.setOnMenuItemClickListener(i -> {\n            int itemId = i.getItemId();\n\n            if (itemId == R.id.action_upload_list_resolve_conflict) {\n                checkAndOpenConflictResolutionDialog(user, itemViewHolder, item, status);\n            } else {\n                removeUpload(item);\n            }\n\n            return true;\n        });\n        popup.show();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func showItemConflictPopup(user: User, itemViewHolder: ItemViewHolder, item: OCUpload, status: String, view: UIView) {\n    let popup = UIMenuController.shared\n    let resolveConflictAction = UIAction(title: \"Resolve Conflict\", handler: { _ in\n        self.checkAndOpenConflictResolutionDialog(user: user, itemViewHolder: itemViewHolder, item: item, status: status)\n    })\n    let removeUploadAction = UIAction(title: \"Remove Upload\", handler: { _ in\n        self.removeUpload(item: item)\n    })\n    popup.menuItems = [resolveConflictAction, removeUploadAction]\n    popup.showMenu(from: view, rect: view.bounds)\n}\n```"
    },
    {
        "method_name": "removeUpload",
        "method_code": "public void removeUpload(OCUpload item) {\n        uploadsStorageManager.removeUpload(item);\n        cancelOldErrorNotification(item);\n        loadUploadItemsFromDb();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled removeUpload from UploadListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: removeUpload\n\n        Method Code: public void removeUpload(OCUpload item) {\n        uploadsStorageManager.removeUpload(item);\n        cancelOldErrorNotification(item);\n        loadUploadItemsFromDb();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc removeUpload(item: OCUpload) {\n    uploadsStorageManager.removeUpload(item)\n    cancelOldErrorNotification(item: item)\n    loadUploadItemsFromDb()\n}\n```"
    },
    {
        "method_name": "refreshFolder",
        "method_code": "private void refreshFolder(\n        Context context,\n        ItemViewHolder view,\n        User user,\n        OCFile folder,\n        OnRemoteOperationListener listener) {\n        view.binding.uploadListItemLayout.setClickable(false);\n        view.binding.uploadStatus.setText(R.string.uploads_view_upload_status_fetching_server_version);\n        new RefreshFolderOperation(folder,\n                                   clock.getCurrentTime(),\n                                   false,\n                                   false,\n                                   true,\n                                   storageManager,\n                                   user,\n                                   context)\n            .execute(user, context, (caller, result) -> {\n                view.binding.uploadListItemLayout.setClickable(true);\n                listener.onRemoteOperationFinish(caller, result);\n            }, parentActivity.getHandler());\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled refreshFolder from UploadListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: refreshFolder\n\n        Method Code: private void refreshFolder(\n        Context context,\n        ItemViewHolder view,\n        User user,\n        OCFile folder,\n        OnRemoteOperationListener listener) {\n        view.binding.uploadListItemLayout.setClickable(false);\n        view.binding.uploadStatus.setText(R.string.uploads_view_upload_status_fetching_server_version);\n        new RefreshFolderOperation(folder,\n                                   clock.getCurrentTime(),\n                                   false,\n                                   false,\n                                   true,\n                                   storageManager,\n                                   user,\n                                   context)\n            .execute(user, context, (caller, result) -> {\n                view.binding.uploadListItemLayout.setClickable(true);\n                listener.onRemoteOperationFinish(caller, result);\n            }, parentActivity.getHandler());\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func refreshFolder(\n    context: Context,\n    view: ItemViewHolder,\n    user: User,\n    folder: OCFile,\n    listener: OnRemoteOperationListener\n) {\n    view.binding.uploadListItemLayout.isUserInteractionEnabled = false\n    view.binding.uploadStatus.text = NSLocalizedString(\"uploads_view_upload_status_fetching_server_version\", comment: \"\")\n    RefreshFolderOperation(\n        folder: folder,\n        currentTime: clock.getCurrentTime(),\n        param1: false,\n        param2: false,\n        param3: true,\n        storageManager: storageManager,\n        user: user,\n        context: context\n    ).execute(user: user, context: context) { caller, result in\n        view.binding.uploadListItemLayout.isUserInteractionEnabled = true\n        listener.onRemoteOperationFinish(caller: caller, result: result)\n    }\n}\n```"
    },
    {
        "method_name": "openConflictActivity",
        "method_code": "private void openConflictActivity(OCFile file, OCUpload upload) {\n        file.setStoragePath(upload.getLocalPath());\n\n        Context context = MainApp.getAppContext();\n        Optional<User> user = accountManager.getUser(upload.getAccountName());\n        if (user.isPresent()) {\n            Intent intent = ConflictsResolveActivity.createIntent(file,\n                                                                  user.get(),\n                                                                  upload.getUploadId(),\n                                                                  Intent.FLAG_ACTIVITY_NEW_TASK,\n                                                                  context);\n\n            context.startActivity(intent);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled openConflictActivity from UploadListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: openConflictActivity\n\n        Method Code: private void openConflictActivity(OCFile file, OCUpload upload) {\n        file.setStoragePath(upload.getLocalPath());\n\n        Context context = MainApp.getAppContext();\n        Optional<User> user = accountManager.getUser(upload.getAccountName());\n        if (user.isPresent()) {\n            Intent intent = ConflictsResolveActivity.createIntent(file,\n                                                                  user.get(),\n                                                                  upload.getUploadId(),\n                                                                  Intent.FLAG_ACTIVITY_NEW_TASK,\n                                                                  context);\n\n            context.startActivity(intent);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func openConflictActivity(file: OCFile, upload: OCUpload) {\n    file.setStoragePath(upload.getLocalPath())\n\n    let context = MainApp.getAppContext()\n    if let user = accountManager.getUser(upload.getAccountName()) {\n        let intent = ConflictsResolveActivity.createIntent(file: file,\n                                                           user: user,\n                                                           uploadId: upload.getUploadId(),\n                                                           flags: .newTask,\n                                                           context: context)\n\n        context.startActivity(intent)\n    }\n}\n```"
    },
    {
        "method_name": "getStatusText",
        "method_code": "private String getStatusText(OCUpload upload) {\n        String status;\n        switch (upload.getUploadStatus()) {\n            case UPLOAD_IN_PROGRESS -> {\n                status = parentActivity.getString(R.string.uploads_view_later_waiting_to_upload);\n                if (uploadHelper.isUploadingNow(upload)) {\n                    // really uploading, bind the progress bar to listen for progress updates\n                    status = parentActivity.getString(R.string.uploader_upload_in_progress_ticker);\n                }\n                if (parentActivity.getAppPreferences().isGlobalUploadPaused()) {\n                    status = parentActivity.getString(R.string.upload_global_pause_title);\n                }\n            }\n            case UPLOAD_SUCCEEDED -> {\n                if (upload.getLastResult() == UploadResult.SAME_FILE_CONFLICT) {\n                    status = parentActivity.getString(R.string.uploads_view_upload_status_succeeded_same_file);\n                } else if (upload.getLastResult() == UploadResult.FILE_NOT_FOUND) {\n                    status = getUploadFailedStatusText(upload.getLastResult());\n                } else {\n                    status = parentActivity.getString(R.string.uploads_view_upload_status_succeeded);\n                }\n            }\n            case UPLOAD_FAILED -> {\n                status = getUploadFailedStatusText(upload.getLastResult());\n            }\n            case UPLOAD_CANCELLED -> {\n                status = parentActivity.getString(R.string.upload_manually_cancelled);\n            }\n\n            default -> {\n                status = \"Uncontrolled status: \" + upload.getUploadStatus();\n            }\n        }\n        return status;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getStatusText from UploadListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getStatusText\n\n        Method Code: private String getStatusText(OCUpload upload) {\n        String status;\n        switch (upload.getUploadStatus()) {\n            case UPLOAD_IN_PROGRESS -> {\n                status = parentActivity.getString(R.string.uploads_view_later_waiting_to_upload);\n                if (uploadHelper.isUploadingNow(upload)) {\n                    // really uploading, bind the progress bar to listen for progress updates\n                    status = parentActivity.getString(R.string.uploader_upload_in_progress_ticker);\n                }\n                if (parentActivity.getAppPreferences().isGlobalUploadPaused()) {\n                    status = parentActivity.getString(R.string.upload_global_pause_title);\n                }\n            }\n            case UPLOAD_SUCCEEDED -> {\n                if (upload.getLastResult() == UploadResult.SAME_FILE_CONFLICT) {\n                    status = parentActivity.getString(R.string.uploads_view_upload_status_succeeded_same_file);\n                } else if (upload.getLastResult() == UploadResult.FILE_NOT_FOUND) {\n                    status = getUploadFailedStatusText(upload.getLastResult());\n                } else {\n                    status = parentActivity.getString(R.string.uploads_view_upload_status_succeeded);\n                }\n            }\n            case UPLOAD_FAILED -> {\n                status = getUploadFailedStatusText(upload.getLastResult());\n            }\n            case UPLOAD_CANCELLED -> {\n                status = parentActivity.getString(R.string.upload_manually_cancelled);\n            }\n\n            default -> {\n                status = \"Uncontrolled status: \" + upload.getUploadStatus();\n            }\n        }\n        return status;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getStatusText(upload: OCUpload) -> String {\n    var status: String\n    switch upload.getUploadStatus() {\n    case .UPLOAD_IN_PROGRESS:\n        status = parentActivity.getString(R.string.uploads_view_later_waiting_to_upload)\n        if uploadHelper.isUploadingNow(upload) {\n            status = parentActivity.getString(R.string.uploader_upload_in_progress_ticker)\n        }\n        if parentActivity.getAppPreferences().isGlobalUploadPaused() {\n            status = parentActivity.getString(R.string.upload_global_pause_title)\n        }\n    case .UPLOAD_SUCCEEDED:\n        if upload.getLastResult() == .SAME_FILE_CONFLICT {\n            status = parentActivity.getString(R.string.uploads_view_upload_status_succeeded_same_file)\n        } else if upload.getLastResult() == .FILE_NOT_FOUND {\n            status = getUploadFailedStatusText(upload.getLastResult())\n        } else {\n            status = parentActivity.getString(R.string.uploads_view_upload_status_succeeded)\n        }\n    case .UPLOAD_FAILED:\n        status = getUploadFailedStatusText(upload.getLastResult())\n    case .UPLOAD_CANCELLED:\n        status = parentActivity.getString(R.string.upload_manually_cancelled)\n    default:\n        status = \"Uncontrolled status: \\(upload.getUploadStatus())\"\n    }\n    return status\n}\n```"
    },
    {
        "method_name": "getUploadFailedStatusText",
        "method_code": "@NonNull\n    private String getUploadFailedStatusText(UploadResult result) {\n        String status;\n        switch (result) {\n            case CREDENTIAL_ERROR:\n                status = parentActivity.getString(R.string.uploads_view_upload_status_failed_credentials_error);\n                break;\n            case FOLDER_ERROR:\n                status = parentActivity.getString(R.string.uploads_view_upload_status_failed_folder_error);\n                break;\n            case FILE_NOT_FOUND:\n                status = parentActivity.getString(R.string.uploads_view_upload_status_failed_localfile_error);\n                break;\n            case FILE_ERROR:\n                status = parentActivity.getString(R.string.uploads_view_upload_status_failed_file_error);\n                break;\n            case PRIVILEGES_ERROR:\n                status = parentActivity.getString(R.string.uploads_view_upload_status_failed_permission_error);\n                break;\n            case NETWORK_CONNECTION:\n                status = parentActivity.getString(R.string.uploads_view_upload_status_failed_connection_error);\n                break;\n            case DELAYED_FOR_WIFI:\n                status = parentActivity.getString(R.string.uploads_view_upload_status_waiting_for_wifi);\n                break;\n            case DELAYED_FOR_CHARGING:\n                status = parentActivity.getString(R.string.uploads_view_upload_status_waiting_for_charging);\n                break;\n            case CONFLICT_ERROR:\n                status = parentActivity.getString(R.string.uploads_view_upload_status_conflict);\n                break;\n            case SERVICE_INTERRUPTED:\n                status = parentActivity.getString(R.string.uploads_view_upload_status_service_interrupted);\n                break;\n            case CANCELLED:\n                // should not get here ; cancelled uploads should be wiped out\n                status = parentActivity.getString(R.string.uploads_view_upload_status_cancelled);\n                break;\n            case UPLOADED:\n                // should not get here ; status should be UPLOAD_SUCCESS\n                status = parentActivity.getString(R.string.uploads_view_upload_status_succeeded);\n                break;\n            case MAINTENANCE_MODE:\n                status = parentActivity.getString(R.string.maintenance_mode);\n                break;\n            case SSL_RECOVERABLE_PEER_UNVERIFIED:\n                status =\n                    parentActivity.getString(\n                        R.string.uploads_view_upload_status_failed_ssl_certificate_not_trusted\n                                            );\n                break;\n            case UNKNOWN:\n                status = parentActivity.getString(R.string.uploads_view_upload_status_unknown_fail);\n                break;\n            case LOCK_FAILED:\n                status = parentActivity.getString(R.string.upload_lock_failed);\n                break;\n            case DELAYED_IN_POWER_SAVE_MODE:\n                status = parentActivity.getString(\n                    R.string.uploads_view_upload_status_waiting_exit_power_save_mode);\n                break;\n            case VIRUS_DETECTED:\n                status = parentActivity.getString(R.string.uploads_view_upload_status_virus_detected);\n                break;\n            case LOCAL_STORAGE_FULL:\n                status = parentActivity.getString(R.string.upload_local_storage_full);\n                break;\n            case OLD_ANDROID_API:\n                status = parentActivity.getString(R.string.upload_old_android);\n                break;\n            case SYNC_CONFLICT:\n                status = parentActivity.getString(R.string.upload_sync_conflict);\n                break;\n            case CANNOT_CREATE_FILE:\n                status = parentActivity.getString(R.string.upload_cannot_create_file);\n                break;\n            case LOCAL_STORAGE_NOT_COPIED:\n                status = parentActivity.getString(R.string.upload_local_storage_not_copied);\n                break;\n            case QUOTA_EXCEEDED:\n                status = parentActivity.getString(R.string.upload_quota_exceeded);\n                break;\n            default:\n                status = parentActivity.getString(R.string.upload_unknown_error);\n                break;\n        }\n\n        return status;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getUploadFailedStatusText from UploadListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getUploadFailedStatusText\n\n        Method Code: @NonNull\n    private String getUploadFailedStatusText(UploadResult result) {\n        String status;\n        switch (result) {\n            case CREDENTIAL_ERROR:\n                status = parentActivity.getString(R.string.uploads_view_upload_status_failed_credentials_error);\n                break;\n            case FOLDER_ERROR:\n                status = parentActivity.getString(R.string.uploads_view_upload_status_failed_folder_error);\n                break;\n            case FILE_NOT_FOUND:\n                status = parentActivity.getString(R.string.uploads_view_upload_status_failed_localfile_error);\n                break;\n            case FILE_ERROR:\n                status = parentActivity.getString(R.string.uploads_view_upload_status_failed_file_error);\n                break;\n            case PRIVILEGES_ERROR:\n                status = parentActivity.getString(R.string.uploads_view_upload_status_failed_permission_error);\n                break;\n            case NETWORK_CONNECTION:\n                status = parentActivity.getString(R.string.uploads_view_upload_status_failed_connection_error);\n                break;\n            case DELAYED_FOR_WIFI:\n                status = parentActivity.getString(R.string.uploads_view_upload_status_waiting_for_wifi);\n                break;\n            case DELAYED_FOR_CHARGING:\n                status = parentActivity.getString(R.string.uploads_view_upload_status_waiting_for_charging);\n                break;\n            case CONFLICT_ERROR:\n                status = parentActivity.getString(R.string.uploads_view_upload_status_conflict);\n                break;\n            case SERVICE_INTERRUPTED:\n                status = parentActivity.getString(R.string.uploads_view_upload_status_service_interrupted);\n                break;\n            case CANCELLED:\n                // should not get here ; cancelled uploads should be wiped out\n                status = parentActivity.getString(R.string.uploads_view_upload_status_cancelled);\n                break;\n            case UPLOADED:\n                // should not get here ; status should be UPLOAD_SUCCESS\n                status = parentActivity.getString(R.string.uploads_view_upload_status_succeeded);\n                break;\n            case MAINTENANCE_MODE:\n                status = parentActivity.getString(R.string.maintenance_mode);\n                break;\n            case SSL_RECOVERABLE_PEER_UNVERIFIED:\n                status =\n                    parentActivity.getString(\n                        R.string.uploads_view_upload_status_failed_ssl_certificate_not_trusted\n                                            );\n                break;\n            case UNKNOWN:\n                status = parentActivity.getString(R.string.uploads_view_upload_status_unknown_fail);\n                break;\n            case LOCK_FAILED:\n                status = parentActivity.getString(R.string.upload_lock_failed);\n                break;\n            case DELAYED_IN_POWER_SAVE_MODE:\n                status = parentActivity.getString(\n                    R.string.uploads_view_upload_status_waiting_exit_power_save_mode);\n                break;\n            case VIRUS_DETECTED:\n                status = parentActivity.getString(R.string.uploads_view_upload_status_virus_detected);\n                break;\n            case LOCAL_STORAGE_FULL:\n                status = parentActivity.getString(R.string.upload_local_storage_full);\n                break;\n            case OLD_ANDROID_API:\n                status = parentActivity.getString(R.string.upload_old_android);\n                break;\n            case SYNC_CONFLICT:\n                status = parentActivity.getString(R.string.upload_sync_conflict);\n                break;\n            case CANNOT_CREATE_FILE:\n                status = parentActivity.getString(R.string.upload_cannot_create_file);\n                break;\n            case LOCAL_STORAGE_NOT_COPIED:\n                status = parentActivity.getString(R.string.upload_local_storage_not_copied);\n                break;\n            case QUOTA_EXCEEDED:\n                status = parentActivity.getString(R.string.upload_quota_exceeded);\n                break;\n            default:\n                status = parentActivity.getString(R.string.upload_unknown_error);\n                break;\n        }\n\n        return status;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getUploadFailedStatusText(result: UploadResult) -> String {\n    let status: String\n    switch result {\n    case .CREDENTIAL_ERROR:\n        status = parentActivity.getString(R.string.uploads_view_upload_status_failed_credentials_error)\n    case .FOLDER_ERROR:\n        status = parentActivity.getString(R.string.uploads_view_upload_status_failed_folder_error)\n    case .FILE_NOT_FOUND:\n        status = parentActivity.getString(R.string.uploads_view_upload_status_failed_localfile_error)\n    case .FILE_ERROR:\n        status = parentActivity.getString(R.string.uploads_view_upload_status_failed_file_error)\n    case .PRIVILEGES_ERROR:\n        status = parentActivity.getString(R.string.uploads_view_upload_status_failed_permission_error)\n    case .NETWORK_CONNECTION:\n        status = parentActivity.getString(R.string.uploads_view_upload_status_failed_connection_error)\n    case .DELAYED_FOR_WIFI:\n        status = parentActivity.getString(R.string.uploads_view_upload_status_waiting_for_wifi)\n    case .DELAYED_FOR_CHARGING:\n        status = parentActivity.getString(R.string.uploads_view_upload_status_waiting_for_charging)\n    case .CONFLICT_ERROR:\n        status = parentActivity.getString(R.string.uploads_view_upload_status_conflict)\n    case .SERVICE_INTERRUPTED:\n        status = parentActivity.getString(R.string.uploads_view_upload_status_service_interrupted)\n    case .CANCELLED:\n        status = parentActivity.getString(R.string.uploads_view_upload_status_cancelled)\n    case .UPLOADED:\n        status = parentActivity.getString(R.string.uploads_view_upload_status_succeeded)\n    case .MAINTENANCE_MODE:\n        status = parentActivity.getString(R.string.maintenance_mode)\n    case .SSL_RECOVERABLE_PEER_UNVERIFIED:\n        status = parentActivity.getString(R.string.uploads_view_upload_status_failed_ssl_certificate_not_trusted)\n    case .UNKNOWN:\n        status = parentActivity.getString(R.string.uploads_view_upload_status_unknown_fail)\n    case .LOCK_FAILED:\n        status = parentActivity.getString(R.string.upload_lock_failed)\n    case .DELAYED_IN_POWER_SAVE_MODE:\n        status = parentActivity.getString(R.string.uploads_view_upload_status_waiting_exit_power_save_mode)\n    case .VIRUS_DETECTED:\n        status = parentActivity.getString(R.string.uploads_view_upload_status_virus_detected)\n    case .LOCAL_STORAGE_FULL:\n        status = parentActivity.getString(R.string.upload_local_storage_full)\n    case .OLD_ANDROID_API:\n        status = parentActivity.getString(R.string.upload_old_android)\n    case .SYNC_CONFLICT:\n        status = parentActivity.getString(R.string.upload_sync_conflict)\n    case .CANNOT_CREATE_FILE:\n        status = parentActivity.getString(R.string.upload_cannot_create_file)\n    case .LOCAL_STORAGE_NOT_COPIED:\n        status = parentActivity.getString(R.string.upload_local_storage_not_copied)\n    case .QUOTA_EXCEEDED:\n        status = parentActivity.getString(R.string.upload_quota_exceeded)\n    default:\n        status = parentActivity.getString(R.string.upload_unknown_error)\n    }\n    return status\n}\n```"
    },
    {
        "method_name": "onCreateViewHolder",
        "method_code": "@Override\n    @NonNull\n    public SectionedViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n        if (viewType == VIEW_TYPE_HEADER) {\n            return new HeaderViewHolder(\n                UploadListHeaderBinding.inflate(LayoutInflater.from(parent.getContext()), parent, false)\n            );\n        } else {\n            return new ItemViewHolder(\n                UploadListItemBinding.inflate(LayoutInflater.from(parent.getContext()), parent, false)\n            );\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreateViewHolder from UploadListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: onCreateViewHolder\n\n        Method Code: @Override\n    @NonNull\n    public SectionedViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n        if (viewType == VIEW_TYPE_HEADER) {\n            return new HeaderViewHolder(\n                UploadListHeaderBinding.inflate(LayoutInflater.from(parent.getContext()), parent, false)\n            );\n        } else {\n            return new ItemViewHolder(\n                UploadListItemBinding.inflate(LayoutInflater.from(parent.getContext()), parent, false)\n            );\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n    let viewType = self.viewType(for: indexPath)\n    if viewType == VIEW_TYPE_HEADER {\n        let headerCell = collectionView.dequeueReusableCell(withReuseIdentifier: \"HeaderViewHolder\", for: indexPath) as! HeaderViewHolder\n        return headerCell\n    } else {\n        let itemCell = collectionView.dequeueReusableCell(withReuseIdentifier: \"ItemViewHolder\", for: indexPath) as! ItemViewHolder\n        return itemCell\n    }\n}\n```"
    },
    {
        "method_name": "loadUploadItemsFromDb",
        "method_code": "public final void loadUploadItemsFromDb() {\n        Log_OC.d(TAG, \"loadUploadItemsFromDb\");\n\n        for (UploadGroup group : uploadGroups) {\n            group.refresh();\n        }\n\n        notifyDataSetChanged();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled loadUploadItemsFromDb from UploadListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: loadUploadItemsFromDb\n\n        Method Code: public final void loadUploadItemsFromDb() {\n        Log_OC.d(TAG, \"loadUploadItemsFromDb\");\n\n        for (UploadGroup group : uploadGroups) {\n            group.refresh();\n        }\n\n        notifyDataSetChanged();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc loadUploadItemsFromDb() {\n    print(\"\\(TAG): loadUploadItemsFromDb\")\n    \n    for group in uploadGroups {\n        group.refresh()\n    }\n    \n    notifyDataSetChanged()\n}\n```"
    },
    {
        "method_name": "onUploadingItemClick",
        "method_code": "private void onUploadingItemClick(OCUpload file) {\n        File f = new File(file.getLocalPath());\n        if (!f.exists()) {\n            DisplayUtils.showSnackMessage(parentActivity, R.string.local_file_not_found_message);\n        } else {\n            openFileWithDefault(file.getLocalPath());\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onUploadingItemClick from UploadListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: onUploadingItemClick\n\n        Method Code: private void onUploadingItemClick(OCUpload file) {\n        File f = new File(file.getLocalPath());\n        if (!f.exists()) {\n            DisplayUtils.showSnackMessage(parentActivity, R.string.local_file_not_found_message);\n        } else {\n            openFileWithDefault(file.getLocalPath());\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func onUploadingItemClick(file: OCUpload) {\n    let f = FileManager.default.fileExists(atPath: file.localPath)\n    if !f {\n        DisplayUtils.showSnackMessage(parentActivity, R.string.local_file_not_found_message)\n    } else {\n        openFileWithDefault(file.localPath)\n    }\n}\n```"
    },
    {
        "method_name": "onUploadedItemClick",
        "method_code": "private void onUploadedItemClick(OCUpload upload) {\n        final OCFile file = parentActivity.getStorageManager().getFileByEncryptedRemotePath(upload.getRemotePath());\n        if (file == null) {\n            DisplayUtils.showSnackMessage(parentActivity, R.string.error_retrieving_file);\n            Log_OC.i(TAG, \"Could not find uploaded file on remote.\");\n            return;\n        }\n\n        if (PreviewImageFragment.canBePreviewed(file)) {\n            //show image preview and stay in uploads tab\n            Intent intent = FileDisplayActivity.openFileIntent(parentActivity, parentActivity.getUser().get(), file);\n            parentActivity.startActivity(intent);\n        } else {\n            Intent intent = new Intent(parentActivity, FileDisplayActivity.class);\n            intent.setAction(Intent.ACTION_VIEW);\n            intent.putExtra(FileDisplayActivity.KEY_FILE_PATH, upload.getRemotePath());\n            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n            parentActivity.startActivity(intent);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onUploadedItemClick from UploadListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: onUploadedItemClick\n\n        Method Code: private void onUploadedItemClick(OCUpload upload) {\n        final OCFile file = parentActivity.getStorageManager().getFileByEncryptedRemotePath(upload.getRemotePath());\n        if (file == null) {\n            DisplayUtils.showSnackMessage(parentActivity, R.string.error_retrieving_file);\n            Log_OC.i(TAG, \"Could not find uploaded file on remote.\");\n            return;\n        }\n\n        if (PreviewImageFragment.canBePreviewed(file)) {\n            //show image preview and stay in uploads tab\n            Intent intent = FileDisplayActivity.openFileIntent(parentActivity, parentActivity.getUser().get(), file);\n            parentActivity.startActivity(intent);\n        } else {\n            Intent intent = new Intent(parentActivity, FileDisplayActivity.class);\n            intent.setAction(Intent.ACTION_VIEW);\n            intent.putExtra(FileDisplayActivity.KEY_FILE_PATH, upload.getRemotePath());\n            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n            parentActivity.startActivity(intent);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func onUploadedItemClick(upload: OCUpload) {\n    guard let file = parentActivity.storageManager.getFileByEncryptedRemotePath(upload.remotePath) else {\n        DisplayUtils.showSnackMessage(parentActivity, R.string.error_retrieving_file)\n        Log_OC.i(TAG, \"Could not find uploaded file on remote.\")\n        return\n    }\n\n    if PreviewImageFragment.canBePreviewed(file) {\n        // show image preview and stay in uploads tab\n        let intent = FileDisplayActivity.openFileIntent(parentActivity, parentActivity.user.get(), file)\n        parentActivity.startActivity(intent)\n    } else {\n        let intent = Intent(parentActivity, FileDisplayActivity.self)\n        intent.setAction(Intent.ACTION_VIEW)\n        intent.putExtra(FileDisplayActivity.KEY_FILE_PATH, upload.remotePath)\n        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)\n        parentActivity.startActivity(intent)\n    }\n}\n```"
    },
    {
        "method_name": "openFileWithDefault",
        "method_code": "private void openFileWithDefault(String localPath) {\n        Intent myIntent = new Intent(Intent.ACTION_VIEW);\n        File file = new File(localPath);\n        String mimetype = MimeTypeUtil.getBestMimeTypeByFilename(localPath);\n        if (\"application/octet-stream\".equals(mimetype)) {\n            mimetype = \"*/*\";\n        }\n        myIntent.setDataAndType(Uri.fromFile(file), mimetype);\n        try {\n            parentActivity.startActivity(myIntent);\n        } catch (ActivityNotFoundException e) {\n            DisplayUtils.showSnackMessage(parentActivity, R.string.file_list_no_app_for_file_type);\n            Log_OC.i(TAG, \"Could not find app for sending log history.\");\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled openFileWithDefault from UploadListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: openFileWithDefault\n\n        Method Code: private void openFileWithDefault(String localPath) {\n        Intent myIntent = new Intent(Intent.ACTION_VIEW);\n        File file = new File(localPath);\n        String mimetype = MimeTypeUtil.getBestMimeTypeByFilename(localPath);\n        if (\"application/octet-stream\".equals(mimetype)) {\n            mimetype = \"*/*\";\n        }\n        myIntent.setDataAndType(Uri.fromFile(file), mimetype);\n        try {\n            parentActivity.startActivity(myIntent);\n        } catch (ActivityNotFoundException e) {\n            DisplayUtils.showSnackMessage(parentActivity, R.string.file_list_no_app_for_file_type);\n            Log_OC.i(TAG, \"Could not find app for sending log history.\");\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func openFileWithDefault(localPath: String) {\n    let file = URL(fileURLWithPath: localPath)\n    var mimetype = MimeTypeUtil.getBestMimeTypeByFilename(localPath)\n    if mimetype == \"application/octet-stream\" {\n        mimetype = \"*/*\"\n    }\n    let documentController = UIDocumentInteractionController(url: file)\n    documentController.uti = mimetype\n    documentController.delegate = parentActivity as? UIDocumentInteractionControllerDelegate\n    if !documentController.presentPreview(animated: true) {\n        DisplayUtils.showSnackMessage(parentActivity, R.string.file_list_no_app_for_file_type)\n        Log_OC.i(TAG, \"Could not find app for sending log history.\")\n    }\n}\n```"
    },
    {
        "method_name": "refresh",
        "method_code": "void refresh();",
        "prompt": "\n        Please translate the following Java (Android) method titled refresh from UploadListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: refresh\n\n        Method Code: void refresh();\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc refresh() {\n    // Implementation goes here\n}\n```"
    },
    {
        "method_name": "getGroupName",
        "method_code": "private String getGroupName() {\n            return name;\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled getGroupName from UploadListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getGroupName\n\n        Method Code: private String getGroupName() {\n            return name;\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getGroupName() -> String {\n    return name\n}\n```"
    },
    {
        "method_name": "getItems",
        "method_code": "public OCUpload[] getItems() {\n            return items;\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled getItems from UploadListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getItems\n\n        Method Code: public OCUpload[] getItems() {\n            return items;\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getItems() -> [OCUpload] {\n    return items\n}\n```"
    },
    {
        "method_name": "getItem",
        "method_code": "public OCUpload getItem(int position) {\n            if (items.length == 0 || position < 0 || position >= items.length) {\n                return null;\n            }\n\n            return items[position];\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled getItem from UploadListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getItem\n\n        Method Code: public OCUpload getItem(int position) {\n            if (items.length == 0 || position < 0 || position >= items.length) {\n                return null;\n            }\n\n            return items[position];\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getItem(position: Int) -> OCUpload? {\n    if items.isEmpty || position < 0 || position >= items.count {\n        return nil\n    }\n    \n    return items[position]\n}\n```"
    },
    {
        "method_name": "setItems",
        "method_code": "public void setItems(OCUpload... items) {\n            this.items = items;\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled setItems from UploadListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: setItems\n\n        Method Code: public void setItems(OCUpload... items) {\n            this.items = items;\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setItems(_ items: OCUpload...) {\n    self.items = items\n}\n```"
    },
    {
        "method_name": "fixAndSortItems",
        "method_code": "void fixAndSortItems(OCUpload... array) {\n            for (OCUpload upload : array) {\n                upload.setDataFixed(uploadHelper);\n            }\n            Arrays.sort(array, new OCUploadComparator());\n\n            setItems(array);\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled fixAndSortItems from UploadListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: fixAndSortItems\n\n        Method Code: void fixAndSortItems(OCUpload... array) {\n            for (OCUpload upload : array) {\n                upload.setDataFixed(uploadHelper);\n            }\n            Arrays.sort(array, new OCUploadComparator());\n\n            setItems(array);\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc fixAndSortItems(_ array: OCUpload...) {\n    for upload in array {\n        upload.setDataFixed(uploadHelper)\n    }\n    array.sort(by: OCUploadComparator().compare)\n    \n    setItems(array)\n}\n```"
    },
    {
        "method_name": "getGroupItemCount",
        "method_code": "private int getGroupItemCount() {\n            return items == null ? 0 : items.length;\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled getGroupItemCount from UploadListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getGroupItemCount\n\n        Method Code: private int getGroupItemCount() {\n            return items == null ? 0 : items.length;\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getGroupItemCount() -> Int {\n    return items == nil ? 0 : items.count\n}\n```"
    },
    {
        "method_name": "cancelOldErrorNotification",
        "method_code": "public void cancelOldErrorNotification(OCUpload upload) {\n\n        if (mNotificationManager == null) {\n            mNotificationManager = (NotificationManager) parentActivity.getSystemService(parentActivity.NOTIFICATION_SERVICE);\n        }\n\n        if (upload == null) {\n            return;\n        }\n        mNotificationManager.cancel(NotificationUtils.createUploadNotificationTag(upload.getRemotePath(), upload.getLocalPath()),\n                                    FileUploadWorker.NOTIFICATION_ERROR_ID);\n\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled cancelOldErrorNotification from UploadListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: cancelOldErrorNotification\n\n        Method Code: public void cancelOldErrorNotification(OCUpload upload) {\n\n        if (mNotificationManager == null) {\n            mNotificationManager = (NotificationManager) parentActivity.getSystemService(parentActivity.NOTIFICATION_SERVICE);\n        }\n\n        if (upload == null) {\n            return;\n        }\n        mNotificationManager.cancel(NotificationUtils.createUploadNotificationTag(upload.getRemotePath(), upload.getLocalPath()),\n                                    FileUploadWorker.NOTIFICATION_ERROR_ID);\n\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc cancelOldErrorNotification(upload: OCUpload?) {\n    if mNotificationManager == nil {\n        mNotificationManager = parentActivity.getSystemService(name: .notification) as? NotificationManager\n    }\n    \n    guard let upload = upload else {\n        return\n    }\n    mNotificationManager?.cancel(NotificationUtils.createUploadNotificationTag(remotePath: upload.getRemotePath(), localPath: upload.getLocalPath()), \n                                 FileUploadWorker.NOTIFICATION_ERROR_ID)\n}\n```"
    }
]