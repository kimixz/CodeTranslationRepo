[
    {
        "method_name": "onCreate",
        "method_code": "@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.accounts_layout);\n\n        recyclerView = findViewById(R.id.account_list);\n\n        setupToolbar();\n\n        // set the back button from action bar\n        ActionBar actionBar = getSupportActionBar();\n\n        // check if is not null\n        if (actionBar != null) {\n            actionBar.setDisplayHomeAsUpEnabled(true);\n            actionBar.setDisplayShowHomeEnabled(true);\n            viewThemeUtils.files.themeActionBar(this, actionBar, R.string.prefs_manage_accounts);\n        }\n\n        List<User> users = accountManager.getAllUsers();\n        originalUsers = toAccountNames(users);\n\n        Optional<User> currentUser = getUser();\n        if (currentUser.isPresent()) {\n            originalCurrentUser = currentUser.get().getAccountName();\n        }\n\n        arbitraryDataProvider = new ArbitraryDataProviderImpl(this);\n        multipleAccountsSupported = MDMConfig.INSTANCE.multiAccountSupport(this);\n\n        userListAdapter = new UserListAdapter(this,\n                                              accountManager,\n                                              getUserListItems(),\n                                              this,\n                                              multipleAccountsSupported,\n                                              true,\n                                              true,\n                                              viewThemeUtils);\n\n        recyclerView.setAdapter(userListAdapter);\n        recyclerView.setLayoutManager(new LinearLayoutManager(this));\n        observeWorkerState();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreate from ManageAccountsActivity.java into Swift.\n\n        Input:\n\n        Method Name: onCreate\n\n        Method Code: @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.accounts_layout);\n\n        recyclerView = findViewById(R.id.account_list);\n\n        setupToolbar();\n\n        // set the back button from action bar\n        ActionBar actionBar = getSupportActionBar();\n\n        // check if is not null\n        if (actionBar != null) {\n            actionBar.setDisplayHomeAsUpEnabled(true);\n            actionBar.setDisplayShowHomeEnabled(true);\n            viewThemeUtils.files.themeActionBar(this, actionBar, R.string.prefs_manage_accounts);\n        }\n\n        List<User> users = accountManager.getAllUsers();\n        originalUsers = toAccountNames(users);\n\n        Optional<User> currentUser = getUser();\n        if (currentUser.isPresent()) {\n            originalCurrentUser = currentUser.get().getAccountName();\n        }\n\n        arbitraryDataProvider = new ArbitraryDataProviderImpl(this);\n        multipleAccountsSupported = MDMConfig.INSTANCE.multiAccountSupport(this);\n\n        userListAdapter = new UserListAdapter(this,\n                                              accountManager,\n                                              getUserListItems(),\n                                              this,\n                                              multipleAccountsSupported,\n                                              true,\n                                              true,\n                                              viewThemeUtils);\n\n        recyclerView.setAdapter(userListAdapter);\n        recyclerView.setLayoutManager(new LinearLayoutManager(this));\n        observeWorkerState();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n\n    view = Bundle.main.loadNibNamed(\"AccountsLayout\", owner: self, options: nil)?.first as? UIView\n\n    recyclerView = view.viewWithTag(1) as? UICollectionView\n\n    setupToolbar()\n\n    if let actionBar = navigationController?.navigationBar {\n        navigationItem.setHidesBackButton(false, animated: false)\n        viewThemeUtils.files.themeActionBar(self, actionBar, title: \"Manage Accounts\")\n    }\n\n    let users = accountManager.getAllUsers()\n    originalUsers = toAccountNames(users)\n\n    if let currentUser = getUser() {\n        originalCurrentUser = currentUser.getAccountName()\n    }\n\n    arbitraryDataProvider = ArbitraryDataProviderImpl(context: self)\n    multipleAccountsSupported = MDMConfig.INSTANCE.multiAccountSupport(context: self)\n\n    userListAdapter = UserListAdapter(context: self,\n                                      accountManager: accountManager,\n                                      userListItems: getUserListItems(),\n                                      listener: self,\n                                      multipleAccountsSupported: multipleAccountsSupported,\n                                      showAddAccount: true,\n                                      showRemoveAccount: true,\n                                      viewThemeUtils: viewThemeUtils)\n\n    recyclerView?.dataSource = userListAdapter\n    recyclerView?.delegate = userListAdapter\n    recyclerView?.collectionViewLayout = UICollectionViewFlowLayout()\n    observeWorkerState()\n}\n```"
    },
    {
        "method_name": "onActivityResult",
        "method_code": "@Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n        if (resultCode == KEY_DELETE_CODE && data != null) {\n            Bundle bundle = data.getExtras();\n            if (bundle != null && bundle.containsKey(UserInfoActivity.KEY_ACCOUNT)) {\n                final Account account = BundleExtensionsKt.getParcelableArgument(bundle, UserInfoActivity.KEY_ACCOUNT, Account.class);\n                if (account != null) {\n                    User user = accountManager.getUser(account.name).orElseThrow(RuntimeException::new);\n                    accountName = account.name;\n                    performAccountRemoval(user);\n                }\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onActivityResult from ManageAccountsActivity.java into Swift.\n\n        Input:\n\n        Method Name: onActivityResult\n\n        Method Code: @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n        if (resultCode == KEY_DELETE_CODE && data != null) {\n            Bundle bundle = data.getExtras();\n            if (bundle != null && bundle.containsKey(UserInfoActivity.KEY_ACCOUNT)) {\n                final Account account = BundleExtensionsKt.getParcelableArgument(bundle, UserInfoActivity.KEY_ACCOUNT, Account.class);\n                if (account != null) {\n                    User user = accountManager.getUser(account.name).orElseThrow(RuntimeException::new);\n                    accountName = account.name;\n                    performAccountRemoval(user);\n                }\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n    if let resultCode = sender as? Int, resultCode == KEY_DELETE_CODE, let data = sender as? [String: Any] {\n        if let bundle = data[\"extras\"] as? [String: Any], let account = bundle[UserInfoActivity.KEY_ACCOUNT] as? Account {\n            if let user = accountManager.getUser(account.name) {\n                accountName = account.name\n                performAccountRemoval(user)\n            }\n        }\n    }\n}\n```"
    },
    {
        "method_name": "onBackPressed",
        "method_code": "@Override\n    public void onBackPressed() {\n        Intent resultIntent = new Intent();\n        if (accountManager.getAllUsers().size() > 0) {\n            resultIntent.putExtra(KEY_ACCOUNT_LIST_CHANGED, hasAccountListChanged());\n            resultIntent.putExtra(KEY_CURRENT_ACCOUNT_CHANGED, hasCurrentAccountChanged());\n            setResult(RESULT_OK, resultIntent);\n\n            super.onBackPressed();\n        } else {\n            final Intent intent = new Intent(this, AuthenticatorActivity.class);\n            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n            startActivity(intent);\n            finish();\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onBackPressed from ManageAccountsActivity.java into Swift.\n\n        Input:\n\n        Method Name: onBackPressed\n\n        Method Code: @Override\n    public void onBackPressed() {\n        Intent resultIntent = new Intent();\n        if (accountManager.getAllUsers().size() > 0) {\n            resultIntent.putExtra(KEY_ACCOUNT_LIST_CHANGED, hasAccountListChanged());\n            resultIntent.putExtra(KEY_CURRENT_ACCOUNT_CHANGED, hasCurrentAccountChanged());\n            setResult(RESULT_OK, resultIntent);\n\n            super.onBackPressed();\n        } else {\n            final Intent intent = new Intent(this, AuthenticatorActivity.class);\n            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n            startActivity(intent);\n            finish();\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n    \n    if accountManager.getAllUsers().count > 0 {\n        let resultIntent = Intent()\n        resultIntent.putExtra(KEY_ACCOUNT_LIST_CHANGED, hasAccountListChanged())\n        resultIntent.putExtra(KEY_CURRENT_ACCOUNT_CHANGED, hasCurrentAccountChanged())\n        setResult(RESULT_OK, resultIntent)\n        \n        super.onBackPressed()\n    } else {\n        let intent = Intent(self, AuthenticatorActivity.self)\n        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)\n        startActivity(intent)\n        finish()\n    }\n}\n```"
    },
    {
        "method_name": "hasAccountListChanged",
        "method_code": "private boolean hasAccountListChanged() {\n        List<User> users = accountManager.getAllUsers();\n        List<User> newList = new ArrayList<>();\n        for (User user : users) {\n            boolean pendingForRemoval = arbitraryDataProvider.getBooleanValue(user, PENDING_FOR_REMOVAL);\n\n            if (!pendingForRemoval) {\n                newList.add(user);\n            }\n        }\n        Set<String> actualAccounts = toAccountNames(newList);\n        return !originalUsers.equals(actualAccounts);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled hasAccountListChanged from ManageAccountsActivity.java into Swift.\n\n        Input:\n\n        Method Name: hasAccountListChanged\n\n        Method Code: private boolean hasAccountListChanged() {\n        List<User> users = accountManager.getAllUsers();\n        List<User> newList = new ArrayList<>();\n        for (User user : users) {\n            boolean pendingForRemoval = arbitraryDataProvider.getBooleanValue(user, PENDING_FOR_REMOVAL);\n\n            if (!pendingForRemoval) {\n                newList.add(user);\n            }\n        }\n        Set<String> actualAccounts = toAccountNames(newList);\n        return !originalUsers.equals(actualAccounts);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func hasAccountListChanged() -> Bool {\n    let users = accountManager.getAllUsers()\n    var newList: [User] = []\n    for user in users {\n        let pendingForRemoval = arbitraryDataProvider.getBooleanValue(user, PENDING_FOR_REMOVAL)\n        \n        if !pendingForRemoval {\n            newList.append(user)\n        }\n    }\n    let actualAccounts = toAccountNames(newList)\n    return originalUsers != actualAccounts\n}\n```"
    },
    {
        "method_name": "toAccountNames",
        "method_code": "private static Set<String> toAccountNames(Collection<User> users) {\n        Set<String> accountNames = Sets.newHashSetWithExpectedSize(users.size());\n        for (User user : users) {\n            accountNames.add(user.getAccountName());\n        }\n        return accountNames;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled toAccountNames from ManageAccountsActivity.java into Swift.\n\n        Input:\n\n        Method Name: toAccountNames\n\n        Method Code: private static Set<String> toAccountNames(Collection<User> users) {\n        Set<String> accountNames = Sets.newHashSetWithExpectedSize(users.size());\n        for (User user : users) {\n            accountNames.add(user.getAccountName());\n        }\n        return accountNames;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate static func toAccountNames(users: [User]) -> Set<String> {\n    var accountNames = Set<String>()\n    for user in users {\n        accountNames.insert(user.getAccountName())\n    }\n    return accountNames\n}\n```"
    },
    {
        "method_name": "hasCurrentAccountChanged",
        "method_code": "private boolean hasCurrentAccountChanged() {\n        User user = getUserAccountManager().getUser();\n        if (user.isAnonymous()) {\n            return true;\n        } else {\n            return !user.getAccountName().equals(originalCurrentUser);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled hasCurrentAccountChanged from ManageAccountsActivity.java into Swift.\n\n        Input:\n\n        Method Name: hasCurrentAccountChanged\n\n        Method Code: private boolean hasCurrentAccountChanged() {\n        User user = getUserAccountManager().getUser();\n        if (user.isAnonymous()) {\n            return true;\n        } else {\n            return !user.getAccountName().equals(originalCurrentUser);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func hasCurrentAccountChanged() -> Bool {\n    let user = getUserAccountManager().getUser()\n    if user.isAnonymous() {\n        return true\n    } else {\n        return user.getAccountName() != originalCurrentUser\n    }\n}\n```"
    },
    {
        "method_name": "getUserListItems",
        "method_code": "private List<UserListItem> getUserListItems() {\n        List<User> users = accountManager.getAllUsers();\n        List<UserListItem> userListItems = new ArrayList<>(users.size());\n        for (User user : users) {\n            boolean pendingForRemoval = arbitraryDataProvider.getBooleanValue(user, PENDING_FOR_REMOVAL);\n            userListItems.add(new UserListItem(user, !pendingForRemoval));\n        }\n\n        if (MDMConfig.INSTANCE.multiAccountSupport(this)) {\n            userListItems.add(new UserListItem());\n        }\n\n        return userListItems;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getUserListItems from ManageAccountsActivity.java into Swift.\n\n        Input:\n\n        Method Name: getUserListItems\n\n        Method Code: private List<UserListItem> getUserListItems() {\n        List<User> users = accountManager.getAllUsers();\n        List<UserListItem> userListItems = new ArrayList<>(users.size());\n        for (User user : users) {\n            boolean pendingForRemoval = arbitraryDataProvider.getBooleanValue(user, PENDING_FOR_REMOVAL);\n            userListItems.add(new UserListItem(user, !pendingForRemoval));\n        }\n\n        if (MDMConfig.INSTANCE.multiAccountSupport(this)) {\n            userListItems.add(new UserListItem());\n        }\n\n        return userListItems;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getUserListItems() -> [UserListItem] {\n    let users = accountManager.getAllUsers()\n    var userListItems = [UserListItem]()\n    \n    for user in users {\n        let pendingForRemoval = arbitraryDataProvider.getBooleanValue(user, PENDING_FOR_REMOVAL)\n        userListItems.append(UserListItem(user: user, isActive: !pendingForRemoval))\n    }\n    \n    if MDMConfig.INSTANCE.multiAccountSupport(self) {\n        userListItems.append(UserListItem())\n    }\n    \n    return userListItems\n}\n```"
    },
    {
        "method_name": "onOptionsItemSelected",
        "method_code": "@Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        boolean retval = true;\n\n        if (item.getItemId() == android.R.id.home) {\n            onBackPressed();\n        } else {\n            retval = super.onOptionsItemSelected(item);\n        }\n\n        return retval;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onOptionsItemSelected from ManageAccountsActivity.java into Swift.\n\n        Input:\n\n        Method Name: onOptionsItemSelected\n\n        Method Code: @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        boolean retval = true;\n\n        if (item.getItemId() == android.R.id.home) {\n            onBackPressed();\n        } else {\n            retval = super.onOptionsItemSelected(item);\n        }\n\n        return retval;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onOptionsItemSelected(_ item: MenuItem) -> Bool {\n    var retval = true\n\n    if item.itemId == android.R.id.home {\n        onBackPressed()\n    } else {\n        retval = super.onOptionsItemSelected(item)\n    }\n\n    return retval\n}\n```"
    },
    {
        "method_name": "showFirstRunActivity",
        "method_code": "@Override\n    public void showFirstRunActivity() {\n        Intent firstRunIntent = new Intent(getApplicationContext(), FirstRunActivity.class);\n        firstRunIntent.putExtra(FirstRunActivity.EXTRA_ALLOW_CLOSE, true);\n        startActivity(firstRunIntent);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showFirstRunActivity from ManageAccountsActivity.java into Swift.\n\n        Input:\n\n        Method Name: showFirstRunActivity\n\n        Method Code: @Override\n    public void showFirstRunActivity() {\n        Intent firstRunIntent = new Intent(getApplicationContext(), FirstRunActivity.class);\n        firstRunIntent.putExtra(FirstRunActivity.EXTRA_ALLOW_CLOSE, true);\n        startActivity(firstRunIntent);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func showFirstRunActivity() {\n    let firstRunIntent = UIStoryboard(name: \"Main\", bundle: nil).instantiateViewController(withIdentifier: \"FirstRunActivity\") as! FirstRunActivity\n    firstRunIntent.allowClose = true\n    self.present(firstRunIntent, animated: true, completion: nil)\n}\n```"
    },
    {
        "method_name": "startAccountCreation",
        "method_code": "@Override\n    public void startAccountCreation() {\n        AccountManager am = AccountManager.get(getApplicationContext());\n        am.addAccount(MainApp.getAccountType(this),\n                      null,\n                      null,\n                      null,\n                      this,\n                      future -> {\n                          if (future != null) {\n                              try {\n                                  Bundle result = future.getResult();\n                                  String name = result.getString(AccountManager.KEY_ACCOUNT_NAME);\n                                  accountManager.setCurrentOwnCloudAccount(name);\n                                  userListAdapter = new UserListAdapter(\n                                      this,\n                                      accountManager,\n                                      getUserListItems(),\n                                      this,\n                                      multipleAccountsSupported,\n                                      false,\n                                      true,\n                                      viewThemeUtils);\n                                  recyclerView.setAdapter(userListAdapter);\n                                  runOnUiThread(() -> userListAdapter.notifyDataSetChanged());\n                              } catch (OperationCanceledException e) {\n                                  Log_OC.d(TAG, \"Account creation canceled\");\n                              } catch (Exception e) {\n                                  Log_OC.e(TAG, \"Account creation finished in exception: \", e);\n                              }\n                          }\n                      }, handler);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled startAccountCreation from ManageAccountsActivity.java into Swift.\n\n        Input:\n\n        Method Name: startAccountCreation\n\n        Method Code: @Override\n    public void startAccountCreation() {\n        AccountManager am = AccountManager.get(getApplicationContext());\n        am.addAccount(MainApp.getAccountType(this),\n                      null,\n                      null,\n                      null,\n                      this,\n                      future -> {\n                          if (future != null) {\n                              try {\n                                  Bundle result = future.getResult();\n                                  String name = result.getString(AccountManager.KEY_ACCOUNT_NAME);\n                                  accountManager.setCurrentOwnCloudAccount(name);\n                                  userListAdapter = new UserListAdapter(\n                                      this,\n                                      accountManager,\n                                      getUserListItems(),\n                                      this,\n                                      multipleAccountsSupported,\n                                      false,\n                                      true,\n                                      viewThemeUtils);\n                                  recyclerView.setAdapter(userListAdapter);\n                                  runOnUiThread(() -> userListAdapter.notifyDataSetChanged());\n                              } catch (OperationCanceledException e) {\n                                  Log_OC.d(TAG, \"Account creation canceled\");\n                              } catch (Exception e) {\n                                  Log_OC.e(TAG, \"Account creation finished in exception: \", e);\n                              }\n                          }\n                      }, handler);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func startAccountCreation() {\n    let am = AccountManager.get(getApplicationContext())\n    am.addAccount(MainApp.getAccountType(self),\n                  authTokenType: nil,\n                  requiredFeatures: nil,\n                  addAccountOptions: nil,\n                  activity: self,\n                  callback: { future in\n                      if let future = future {\n                          do {\n                              let result = try future.getResult()\n                              if let name = result[AccountManager.KEY_ACCOUNT_NAME] as? String {\n                                  accountManager.setCurrentOwnCloudAccount(name)\n                                  userListAdapter = UserListAdapter(\n                                      context: self,\n                                      accountManager: accountManager,\n                                      userListItems: getUserListItems(),\n                                      activity: self,\n                                      multipleAccountsSupported: multipleAccountsSupported,\n                                      isAccountList: false,\n                                      isAccountCreation: true,\n                                      viewThemeUtils: viewThemeUtils)\n                                  recyclerView.adapter = userListAdapter\n                                  DispatchQueue.main.async {\n                                      userListAdapter.notifyDataSetChanged()\n                                  }\n                              }\n                          } catch let e as OperationCanceledException {\n                              Log_OC.d(TAG, \"Account creation canceled\")\n                          } catch {\n                              Log_OC.e(TAG, \"Account creation finished in exception: \\(error)\")\n                          }\n                      }\n                  }, handler: handler)\n}\n```"
    },
    {
        "method_name": "onAccountRemovedEvent",
        "method_code": "@Subscribe(threadMode = ThreadMode.MAIN)\n    public void onAccountRemovedEvent(AccountRemovedEvent event) {\n        List<UserListItem> userListItemArray = getUserListItems();\n        userListAdapter.clear();\n        userListAdapter.addAll(userListItemArray);\n        userListAdapter.notifyDataSetChanged();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onAccountRemovedEvent from ManageAccountsActivity.java into Swift.\n\n        Input:\n\n        Method Name: onAccountRemovedEvent\n\n        Method Code: @Subscribe(threadMode = ThreadMode.MAIN)\n    public void onAccountRemovedEvent(AccountRemovedEvent event) {\n        List<UserListItem> userListItemArray = getUserListItems();\n        userListAdapter.clear();\n        userListAdapter.addAll(userListItemArray);\n        userListAdapter.notifyDataSetChanged();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\n@objc func onAccountRemovedEvent(_ event: AccountRemovedEvent) {\n    let userListItemArray = getUserListItems()\n    userListAdapter.clear()\n    userListAdapter.addAll(userListItemArray)\n    userListAdapter.notifyDataSetChanged()\n}\n```"
    },
    {
        "method_name": "run",
        "method_code": "@Override\n    public void run(AccountManagerFuture<Boolean> future) {\n        if (future.isDone()) {\n            // after remove account\n            Optional<User> user = accountManager.getUser(accountName);\n            if (!user.isPresent()) {\n                fileUploadHelper.cancel(accountName);\n                FileDownloadHelper.Companion.instance().cancelAllDownloadsForAccount(workerAccountName, workerCurrentDownload);\n            }\n\n            User currentUser = getUserAccountManager().getUser();\n            if (currentUser.isAnonymous()) {\n                String accountName = \"\";\n                List<User> users = accountManager.getAllUsers();\n                if (users.size() > 0) {\n                    accountName = users.get(0).getAccountName();\n                }\n                accountManager.setCurrentOwnCloudAccount(accountName);\n            }\n\n            List<UserListItem> userListItemArray = getUserListItems();\n            if (userListItemArray.size() > SINGLE_ACCOUNT) {\n                userListAdapter = new UserListAdapter(this,\n                                                      accountManager,\n                                                      userListItemArray,\n                                                      this,\n                                                      multipleAccountsSupported,\n                                                      false,\n                                                      true,\n                                                      viewThemeUtils);\n                recyclerView.setAdapter(userListAdapter);\n            } else {\n                onBackPressed();\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled run from ManageAccountsActivity.java into Swift.\n\n        Input:\n\n        Method Name: run\n\n        Method Code: @Override\n    public void run(AccountManagerFuture<Boolean> future) {\n        if (future.isDone()) {\n            // after remove account\n            Optional<User> user = accountManager.getUser(accountName);\n            if (!user.isPresent()) {\n                fileUploadHelper.cancel(accountName);\n                FileDownloadHelper.Companion.instance().cancelAllDownloadsForAccount(workerAccountName, workerCurrentDownload);\n            }\n\n            User currentUser = getUserAccountManager().getUser();\n            if (currentUser.isAnonymous()) {\n                String accountName = \"\";\n                List<User> users = accountManager.getAllUsers();\n                if (users.size() > 0) {\n                    accountName = users.get(0).getAccountName();\n                }\n                accountManager.setCurrentOwnCloudAccount(accountName);\n            }\n\n            List<UserListItem> userListItemArray = getUserListItems();\n            if (userListItemArray.size() > SINGLE_ACCOUNT) {\n                userListAdapter = new UserListAdapter(this,\n                                                      accountManager,\n                                                      userListItemArray,\n                                                      this,\n                                                      multipleAccountsSupported,\n                                                      false,\n                                                      true,\n                                                      viewThemeUtils);\n                recyclerView.setAdapter(userListAdapter);\n            } else {\n                onBackPressed();\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func run(_ future: AccountManagerFuture<Bool>) {\n    if future.isDone() {\n        if let user = accountManager.getUser(accountName), !user.isPresent {\n            fileUploadHelper.cancel(accountName)\n            FileDownloadHelper.instance().cancelAllDownloadsForAccount(workerAccountName, workerCurrentDownload)\n        }\n\n        let currentUser = getUserAccountManager().getUser()\n        if currentUser.isAnonymous() {\n            var accountName = \"\"\n            let users = accountManager.getAllUsers()\n            if users.count > 0 {\n                accountName = users[0].getAccountName()\n            }\n            accountManager.setCurrentOwnCloudAccount(accountName)\n        }\n\n        let userListItemArray = getUserListItems()\n        if userListItemArray.count > SINGLE_ACCOUNT {\n            userListAdapter = UserListAdapter(\n                self,\n                accountManager: accountManager,\n                userListItems: userListItemArray,\n                delegate: self,\n                multipleAccountsSupported: multipleAccountsSupported,\n                isSelectionMode: false,\n                isDarkMode: true,\n                viewThemeUtils: viewThemeUtils\n            )\n            recyclerView.adapter = userListAdapter\n        } else {\n            onBackPressed()\n        }\n    }\n}\n```"
    },
    {
        "method_name": "getHandler",
        "method_code": "public Handler getHandler() {\n        return handler;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getHandler from ManageAccountsActivity.java into Swift.\n\n        Input:\n\n        Method Name: getHandler\n\n        Method Code: public Handler getHandler() {\n        return handler;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getHandler() -> Handler {\n    return handler\n}\n```"
    },
    {
        "method_name": "getOperationsServiceBinder",
        "method_code": "@Override\n    public OperationsService.OperationsServiceBinder getOperationsServiceBinder() {\n        return null;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getOperationsServiceBinder from ManageAccountsActivity.java into Swift.\n\n        Input:\n\n        Method Name: getOperationsServiceBinder\n\n        Method Code: @Override\n    public OperationsService.OperationsServiceBinder getOperationsServiceBinder() {\n        return null;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func getOperationsServiceBinder() -> OperationsService.OperationsServiceBinder? {\n    return nil\n}\n```"
    },
    {
        "method_name": "getStorageManager",
        "method_code": "@Override\n    public FileDataStorageManager getStorageManager() {\n        return super.getStorageManager();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getStorageManager from ManageAccountsActivity.java into Swift.\n\n        Input:\n\n        Method Name: getStorageManager\n\n        Method Code: @Override\n    public FileDataStorageManager getStorageManager() {\n        return super.getStorageManager();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func getStorageManager() -> FileDataStorageManager {\n    return super.getStorageManager()\n}\n```"
    },
    {
        "method_name": "getFileOperationsHelper",
        "method_code": "@Override\n    public FileOperationsHelper getFileOperationsHelper() {\n        return null;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getFileOperationsHelper from ManageAccountsActivity.java into Swift.\n\n        Input:\n\n        Method Name: getFileOperationsHelper\n\n        Method Code: @Override\n    public FileOperationsHelper getFileOperationsHelper() {\n        return null;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func getFileOperationsHelper() -> FileOperationsHelper? {\n    return nil\n}\n```"
    },
    {
        "method_name": "performAccountRemoval",
        "method_code": "private void performAccountRemoval(User user) {\n        // disable account in recycler view\n        for (int i = 0; i < userListAdapter.getItemCount(); i++) {\n            UserListItem item = userListAdapter.getItem(i);\n\n            if (item != null && item.getUser().getAccountName().equalsIgnoreCase(user.getAccountName())) {\n                item.setEnabled(false);\n                break;\n            }\n\n            userListAdapter.notifyDataSetChanged();\n        }\n\n        // store pending account removal\n        ArbitraryDataProvider arbitraryDataProvider = new ArbitraryDataProviderImpl(this);\n        arbitraryDataProvider.storeOrUpdateKeyValue(user.getAccountName(), PENDING_FOR_REMOVAL, String.valueOf(true));\n\n        FileDownloadHelper.Companion.instance().cancelAllDownloadsForAccount(workerAccountName, workerCurrentDownload);\n        fileUploadHelper.cancel(user.getAccountName());\n        backgroundJobManager.startAccountRemovalJob(user.getAccountName(), false);\n\n        // immediately select a new account\n        List<User> users = accountManager.getAllUsers();\n\n        String newAccountName = \"\";\n        for (User u : users) {\n            if (!u.getAccountName().equalsIgnoreCase(u.getAccountName())) {\n                newAccountName = u.getAccountName();\n                break;\n            }\n        }\n\n        if (newAccountName.isEmpty()) {\n            Log_OC.d(TAG, \"new account set to null\");\n            accountManager.resetOwnCloudAccount();\n        } else {\n            Log_OC.d(TAG, \"new account set to: \" + newAccountName);\n            accountManager.setCurrentOwnCloudAccount(newAccountName);\n        }\n\n        // only one to be (deleted) account remaining\n        if (users.size() < MIN_MULTI_ACCOUNT_SIZE) {\n            Intent resultIntent = new Intent();\n            resultIntent.putExtra(KEY_ACCOUNT_LIST_CHANGED, true);\n            resultIntent.putExtra(KEY_CURRENT_ACCOUNT_CHANGED, true);\n            setResult(RESULT_OK, resultIntent);\n\n            super.onBackPressed();\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled performAccountRemoval from ManageAccountsActivity.java into Swift.\n\n        Input:\n\n        Method Name: performAccountRemoval\n\n        Method Code: private void performAccountRemoval(User user) {\n        // disable account in recycler view\n        for (int i = 0; i < userListAdapter.getItemCount(); i++) {\n            UserListItem item = userListAdapter.getItem(i);\n\n            if (item != null && item.getUser().getAccountName().equalsIgnoreCase(user.getAccountName())) {\n                item.setEnabled(false);\n                break;\n            }\n\n            userListAdapter.notifyDataSetChanged();\n        }\n\n        // store pending account removal\n        ArbitraryDataProvider arbitraryDataProvider = new ArbitraryDataProviderImpl(this);\n        arbitraryDataProvider.storeOrUpdateKeyValue(user.getAccountName(), PENDING_FOR_REMOVAL, String.valueOf(true));\n\n        FileDownloadHelper.Companion.instance().cancelAllDownloadsForAccount(workerAccountName, workerCurrentDownload);\n        fileUploadHelper.cancel(user.getAccountName());\n        backgroundJobManager.startAccountRemovalJob(user.getAccountName(), false);\n\n        // immediately select a new account\n        List<User> users = accountManager.getAllUsers();\n\n        String newAccountName = \"\";\n        for (User u : users) {\n            if (!u.getAccountName().equalsIgnoreCase(u.getAccountName())) {\n                newAccountName = u.getAccountName();\n                break;\n            }\n        }\n\n        if (newAccountName.isEmpty()) {\n            Log_OC.d(TAG, \"new account set to null\");\n            accountManager.resetOwnCloudAccount();\n        } else {\n            Log_OC.d(TAG, \"new account set to: \" + newAccountName);\n            accountManager.setCurrentOwnCloudAccount(newAccountName);\n        }\n\n        // only one to be (deleted) account remaining\n        if (users.size() < MIN_MULTI_ACCOUNT_SIZE) {\n            Intent resultIntent = new Intent();\n            resultIntent.putExtra(KEY_ACCOUNT_LIST_CHANGED, true);\n            resultIntent.putExtra(KEY_CURRENT_ACCOUNT_CHANGED, true);\n            setResult(RESULT_OK, resultIntent);\n\n            super.onBackPressed();\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func performAccountRemoval(user: User) {\n    // disable account in recycler view\n    for i in 0..<userListAdapter.getItemCount() {\n        if let item = userListAdapter.getItem(i), item.getUser().getAccountName().caseInsensitiveCompare(user.getAccountName()) == .orderedSame {\n            item.setEnabled(false)\n            break\n        }\n        userListAdapter.notifyDataSetChanged()\n    }\n\n    // store pending account removal\n    let arbitraryDataProvider = ArbitraryDataProviderImpl(context: self)\n    arbitraryDataProvider.storeOrUpdateKeyValue(user.getAccountName(), PENDING_FOR_REMOVAL, String(true))\n\n    FileDownloadHelper.instance().cancelAllDownloadsForAccount(workerAccountName, workerCurrentDownload)\n    fileUploadHelper.cancel(user.getAccountName())\n    backgroundJobManager.startAccountRemovalJob(user.getAccountName(), false)\n\n    // immediately select a new account\n    let users = accountManager.getAllUsers()\n    var newAccountName = \"\"\n\n    for u in users {\n        if u.getAccountName().caseInsensitiveCompare(user.getAccountName()) != .orderedSame {\n            newAccountName = u.getAccountName()\n            break\n        }\n    }\n\n    if newAccountName.isEmpty {\n        Log_OC.d(TAG, \"new account set to null\")\n        accountManager.resetOwnCloudAccount()\n    } else {\n        Log_OC.d(TAG, \"new account set to: \\(newAccountName)\")\n        accountManager.setCurrentOwnCloudAccount(newAccountName)\n    }\n\n    // only one to be (deleted) account remaining\n    if users.count < MIN_MULTI_ACCOUNT_SIZE {\n        let resultIntent = Intent()\n        resultIntent.putExtra(KEY_ACCOUNT_LIST_CHANGED, true)\n        resultIntent.putExtra(KEY_CURRENT_ACCOUNT_CHANGED, true)\n        setResult(RESULT_OK, resultIntent)\n\n        super.onBackPressed()\n    }\n}\n```"
    },
    {
        "method_name": "openAccountRemovalDialog",
        "method_code": "public static void openAccountRemovalDialog(User user, FragmentManager fragmentManager) {\n        AccountRemovalDialog dialog = AccountRemovalDialog.newInstance(user);\n        dialog.show(fragmentManager, \"dialog\");\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled openAccountRemovalDialog from ManageAccountsActivity.java into Swift.\n\n        Input:\n\n        Method Name: openAccountRemovalDialog\n\n        Method Code: public static void openAccountRemovalDialog(User user, FragmentManager fragmentManager) {\n        AccountRemovalDialog dialog = AccountRemovalDialog.newInstance(user);\n        dialog.show(fragmentManager, \"dialog\");\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func openAccountRemovalDialog(user: User, fragmentManager: FragmentManager) {\n    let dialog = AccountRemovalDialog.newInstance(user: user)\n    dialog.show(fragmentManager, tag: \"dialog\")\n}\n```"
    },
    {
        "method_name": "openAccount",
        "method_code": "private void openAccount(User user) {\n        final Intent intent = new Intent(this, UserInfoActivity.class);\n        intent.putExtra(UserInfoActivity.KEY_ACCOUNT, user);\n        OwnCloudAccount oca = user.toOwnCloudAccount();\n        intent.putExtra(KEY_DISPLAY_NAME, oca.getDisplayName());\n        startActivityForResult(intent, KEY_USER_INFO_REQUEST_CODE);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled openAccount from ManageAccountsActivity.java into Swift.\n\n        Input:\n\n        Method Name: openAccount\n\n        Method Code: private void openAccount(User user) {\n        final Intent intent = new Intent(this, UserInfoActivity.class);\n        intent.putExtra(UserInfoActivity.KEY_ACCOUNT, user);\n        OwnCloudAccount oca = user.toOwnCloudAccount();\n        intent.putExtra(KEY_DISPLAY_NAME, oca.getDisplayName());\n        startActivityForResult(intent, KEY_USER_INFO_REQUEST_CODE);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func openAccount(user: User) {\n    let intent = Intent(context: self, cls: UserInfoActivity.self)\n    intent.putExtra(name: UserInfoActivity.KEY_ACCOUNT, value: user)\n    let oca = user.toOwnCloudAccount()\n    intent.putExtra(name: KEY_DISPLAY_NAME, value: oca.getDisplayName())\n    startActivityForResult(intent, requestCode: KEY_USER_INFO_REQUEST_CODE)\n}\n```"
    },
    {
        "method_name": "showUser",
        "method_code": "@VisibleForTesting\n    public void showUser(User user, UserInfo userInfo) {\n        final Intent intent = new Intent(this, UserInfoActivity.class);\n        OwnCloudAccount oca = user.toOwnCloudAccount();\n        intent.putExtra(UserInfoActivity.KEY_ACCOUNT, user);\n        intent.putExtra(KEY_DISPLAY_NAME, oca.getDisplayName());\n        intent.putExtra(KEY_USER_DATA, userInfo);\n        startActivityForResult(intent, KEY_USER_INFO_REQUEST_CODE);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showUser from ManageAccountsActivity.java into Swift.\n\n        Input:\n\n        Method Name: showUser\n\n        Method Code: @VisibleForTesting\n    public void showUser(User user, UserInfo userInfo) {\n        final Intent intent = new Intent(this, UserInfoActivity.class);\n        OwnCloudAccount oca = user.toOwnCloudAccount();\n        intent.putExtra(UserInfoActivity.KEY_ACCOUNT, user);\n        intent.putExtra(KEY_DISPLAY_NAME, oca.getDisplayName());\n        intent.putExtra(KEY_USER_DATA, userInfo);\n        startActivityForResult(intent, KEY_USER_INFO_REQUEST_CODE);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\n@objc func showUser(user: User, userInfo: UserInfo) {\n    let intent = UIStoryboard(name: \"Main\", bundle: nil).instantiateViewController(withIdentifier: \"UserInfoActivity\") as! UserInfoActivity\n    let oca = user.toOwnCloudAccount()\n    intent.setValue(user, forKey: UserInfoActivity.KEY_ACCOUNT)\n    intent.setValue(oca.getDisplayName(), forKey: KEY_DISPLAY_NAME)\n    intent.setValue(userInfo, forKey: KEY_USER_DATA)\n    self.present(intent, animated: true, completion: nil)\n}\n```"
    },
    {
        "method_name": "onOptionItemClicked",
        "method_code": "@Override\n    public void onOptionItemClicked(User user, View view) {\n        if (view.getId() == R.id.account_menu) {\n            PopupMenu popup = new PopupMenu(this, view);\n            popup.getMenuInflater().inflate(R.menu.item_account, popup.getMenu());\n\n            if (accountManager.getUser().equals(user)) {\n                popup.getMenu().findItem(R.id.action_open_account).setVisible(false);\n            }\n            popup.setOnMenuItemClickListener(item -> {\n                int itemId = item.getItemId();\n\n                if (itemId == R.id.action_open_account) {\n                    accountClicked(user.hashCode());\n                } else if (itemId == R.id.action_delete_account) {\n                    openAccountRemovalDialog(user, getSupportFragmentManager());\n                } else {\n                    openAccount(user);\n                }\n\n                return true;\n            });\n            popup.show();\n        } else {\n            openAccount(user);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onOptionItemClicked from ManageAccountsActivity.java into Swift.\n\n        Input:\n\n        Method Name: onOptionItemClicked\n\n        Method Code: @Override\n    public void onOptionItemClicked(User user, View view) {\n        if (view.getId() == R.id.account_menu) {\n            PopupMenu popup = new PopupMenu(this, view);\n            popup.getMenuInflater().inflate(R.menu.item_account, popup.getMenu());\n\n            if (accountManager.getUser().equals(user)) {\n                popup.getMenu().findItem(R.id.action_open_account).setVisible(false);\n            }\n            popup.setOnMenuItemClickListener(item -> {\n                int itemId = item.getItemId();\n\n                if (itemId == R.id.action_open_account) {\n                    accountClicked(user.hashCode());\n                } else if (itemId == R.id.action_delete_account) {\n                    openAccountRemovalDialog(user, getSupportFragmentManager());\n                } else {\n                    openAccount(user);\n                }\n\n                return true;\n            });\n            popup.show();\n        } else {\n            openAccount(user);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onOptionItemClicked(user: User, view: UIView) {\n    if view.tag == R.id.account_menu {\n        let popup = PopupMenu(context: self, anchor: view)\n        popup.menuInflater.inflate(R.menu.item_account, into: popup.menu)\n\n        if accountManager.getUser() == user {\n            popup.menu.findItem(withId: R.id.action_open_account)?.isVisible = false\n        }\n        popup.setOnMenuItemClickListener { item in\n            let itemId = item.itemId\n\n            if itemId == R.id.action_open_account {\n                self.accountClicked(user.hashValue)\n            } else if itemId == R.id.action_delete_account {\n                self.openAccountRemovalDialog(user: user, fragmentManager: self.supportFragmentManager)\n            } else {\n                self.openAccount(user: user)\n            }\n\n            return true\n        }\n        popup.show()\n    } else {\n        openAccount(user: user)\n    }\n}\n```"
    },
    {
        "method_name": "observeWorkerState",
        "method_code": "private void observeWorkerState() {\n        WorkerStateLiveData.Companion.instance().observe(this, state -> {\n            if (state instanceof WorkerState.DownloadStarted) {\n                Log_OC.d(TAG, \"Download worker started\");\n                workerAccountName = ((WorkerState.DownloadStarted) state).getUser().getAccountName();\n                workerCurrentDownload = ((WorkerState.DownloadStarted) state).getCurrentDownload();\n            }\n        });\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled observeWorkerState from ManageAccountsActivity.java into Swift.\n\n        Input:\n\n        Method Name: observeWorkerState\n\n        Method Code: private void observeWorkerState() {\n        WorkerStateLiveData.Companion.instance().observe(this, state -> {\n            if (state instanceof WorkerState.DownloadStarted) {\n                Log_OC.d(TAG, \"Download worker started\");\n                workerAccountName = ((WorkerState.DownloadStarted) state).getUser().getAccountName();\n                workerCurrentDownload = ((WorkerState.DownloadStarted) state).getCurrentDownload();\n            }\n        });\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func observeWorkerState() {\n    WorkerStateLiveData.instance().observe(self) { state in\n        if let downloadStartedState = state as? WorkerState.DownloadStarted {\n            print(\"Download worker started\")\n            self.workerAccountName = downloadStartedState.user.accountName\n            self.workerCurrentDownload = downloadStartedState.currentDownload\n        }\n    }\n}\n```"
    },
    {
        "method_name": "onAccountClicked",
        "method_code": "@Override\n    public void onAccountClicked(User user) {\n        openAccount(user);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onAccountClicked from ManageAccountsActivity.java into Swift.\n\n        Input:\n\n        Method Name: onAccountClicked\n\n        Method Code: @Override\n    public void onAccountClicked(User user) {\n        openAccount(user);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onAccountClicked(user: User) {\n    openAccount(user: user)\n}\n```"
    }
]