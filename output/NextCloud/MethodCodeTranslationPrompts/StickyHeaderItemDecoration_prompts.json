[
    {
        "method_name": "onDrawOver",
        "method_code": "@Override\n    public void onDrawOver(@NonNull Canvas canvas, @NonNull RecyclerView parent, @NonNull RecyclerView.State state) {\n        super.onDrawOver(canvas, parent, state);\n\n        View topChild = parent.getChildAt(0);\n        if (topChild == null) {\n            return;\n        }\n        int topChildPosition = parent.getChildAdapterPosition(topChild);\n\n        if (topChildPosition == RecyclerView.NO_POSITION) {\n            return;\n        }\n        View currentHeader = getHeaderViewForItem(topChildPosition, parent);\n        fixLayoutSize(parent, currentHeader);\n        int contactPoint = currentHeader.getBottom();\n        View childInContact = getChildInContact(parent, contactPoint);\n\n        if (childInContact == null) {\n            return;\n        }\n\n        if (adapter.isHeader(parent.getChildAdapterPosition(childInContact))) {\n            moveHeader(canvas, currentHeader, childInContact);\n            return;\n        }\n\n        drawHeader(canvas, currentHeader);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onDrawOver from StickyHeaderItemDecoration.java into Swift.\n\n        Input:\n\n        Method Name: onDrawOver\n\n        Method Code: @Override\n    public void onDrawOver(@NonNull Canvas canvas, @NonNull RecyclerView parent, @NonNull RecyclerView.State state) {\n        super.onDrawOver(canvas, parent, state);\n\n        View topChild = parent.getChildAt(0);\n        if (topChild == null) {\n            return;\n        }\n        int topChildPosition = parent.getChildAdapterPosition(topChild);\n\n        if (topChildPosition == RecyclerView.NO_POSITION) {\n            return;\n        }\n        View currentHeader = getHeaderViewForItem(topChildPosition, parent);\n        fixLayoutSize(parent, currentHeader);\n        int contactPoint = currentHeader.getBottom();\n        View childInContact = getChildInContact(parent, contactPoint);\n\n        if (childInContact == null) {\n            return;\n        }\n\n        if (adapter.isHeader(parent.getChildAdapterPosition(childInContact))) {\n            moveHeader(canvas, currentHeader, childInContact);\n            return;\n        }\n\n        drawHeader(canvas, currentHeader);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func draw(_ canvas: Canvas, for parent: RecyclerView, with state: RecyclerView.State) {\n    super.draw(canvas, for: parent, with: state)\n\n    guard let topChild = parent.getChildAt(0) else {\n        return\n    }\n    let topChildPosition = parent.getChildAdapterPosition(topChild)\n\n    if topChildPosition == RecyclerView.NO_POSITION {\n        return\n    }\n    let currentHeader = getHeaderViewForItem(at: topChildPosition, in: parent)\n    fixLayoutSize(for: parent, header: currentHeader)\n    let contactPoint = currentHeader.bottom\n    guard let childInContact = getChildInContact(parent, contactPoint: contactPoint) else {\n        return\n    }\n\n    if adapter.isHeader(parent.getChildAdapterPosition(childInContact)) {\n        moveHeader(canvas, currentHeader: currentHeader, childInContact: childInContact)\n        return\n    }\n\n    drawHeader(canvas, currentHeader: currentHeader)\n}\n```"
    },
    {
        "method_name": "drawHeader",
        "method_code": "private void drawHeader(Canvas canvas, View header) {\n        canvas.save();\n        canvas.translate(0, 0);\n        header.draw(canvas);\n        canvas.restore();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled drawHeader from StickyHeaderItemDecoration.java into Swift.\n\n        Input:\n\n        Method Name: drawHeader\n\n        Method Code: private void drawHeader(Canvas canvas, View header) {\n        canvas.save();\n        canvas.translate(0, 0);\n        header.draw(canvas);\n        canvas.restore();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func drawHeader(canvas: CGContext, header: UIView) {\n    canvas.saveGState()\n    canvas.translateBy(x: 0, y: 0)\n    header.layer.render(in: canvas)\n    canvas.restoreGState()\n}\n```"
    },
    {
        "method_name": "moveHeader",
        "method_code": "private void moveHeader(Canvas canvas, View currentHeader, View nextHeader) {\n        canvas.save();\n        canvas.translate(0, nextHeader.getTop() - currentHeader.getHeight());\n        currentHeader.draw(canvas);\n        canvas.restore();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled moveHeader from StickyHeaderItemDecoration.java into Swift.\n\n        Input:\n\n        Method Name: moveHeader\n\n        Method Code: private void moveHeader(Canvas canvas, View currentHeader, View nextHeader) {\n        canvas.save();\n        canvas.translate(0, nextHeader.getTop() - currentHeader.getHeight());\n        currentHeader.draw(canvas);\n        canvas.restore();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func moveHeader(canvas: CGContext, currentHeader: UIView, nextHeader: UIView) {\n    canvas.saveGState()\n    canvas.translateBy(x: 0, y: nextHeader.frame.origin.y - currentHeader.frame.height)\n    currentHeader.layer.render(in: canvas)\n    canvas.restoreGState()\n}\n```"
    },
    {
        "method_name": "getChildInContact",
        "method_code": "private View getChildInContact(RecyclerView parent, int contactPoint) {\n        View childInContact = null;\n        for (int i = 0; i < parent.getChildCount(); i++) {\n            View currentChild = parent.getChildAt(i);\n            if (currentChild.getBottom() > contactPoint && currentChild.getTop() <= contactPoint) {\n                childInContact = currentChild;\n                break;\n            }\n        }\n        return childInContact;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getChildInContact from StickyHeaderItemDecoration.java into Swift.\n\n        Input:\n\n        Method Name: getChildInContact\n\n        Method Code: private View getChildInContact(RecyclerView parent, int contactPoint) {\n        View childInContact = null;\n        for (int i = 0; i < parent.getChildCount(); i++) {\n            View currentChild = parent.getChildAt(i);\n            if (currentChild.getBottom() > contactPoint && currentChild.getTop() <= contactPoint) {\n                childInContact = currentChild;\n                break;\n            }\n        }\n        return childInContact;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getChildInContact(parent: UICollectionView, contactPoint: Int) -> UIView? {\n    var childInContact: UIView? = nil\n    for i in 0..<parent.numberOfItems(inSection: 0) {\n        if let currentChild = parent.cellForItem(at: IndexPath(item: i, section: 0)) {\n            if currentChild.frame.maxY > CGFloat(contactPoint) && currentChild.frame.minY <= CGFloat(contactPoint) {\n                childInContact = currentChild\n                break\n            }\n        }\n    }\n    return childInContact\n}\n```"
    },
    {
        "method_name": "getHeaderViewForItem",
        "method_code": "private View getHeaderViewForItem(int itemPosition, RecyclerView parent) {\n        int headerPosition = adapter.getHeaderPositionForItem(itemPosition);\n        int layoutId = adapter.getHeaderLayout(itemPosition);\n        View header = LayoutInflater.from(parent.getContext()).inflate(layoutId, parent, false);\n        adapter.bindHeaderData(header, headerPosition);\n        return header;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getHeaderViewForItem from StickyHeaderItemDecoration.java into Swift.\n\n        Input:\n\n        Method Name: getHeaderViewForItem\n\n        Method Code: private View getHeaderViewForItem(int itemPosition, RecyclerView parent) {\n        int headerPosition = adapter.getHeaderPositionForItem(itemPosition);\n        int layoutId = adapter.getHeaderLayout(itemPosition);\n        View header = LayoutInflater.from(parent.getContext()).inflate(layoutId, parent, false);\n        adapter.bindHeaderData(header, headerPosition);\n        return header;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getHeaderViewForItem(itemPosition: Int, parent: UICollectionView) -> UIView {\n    let headerPosition = adapter.getHeaderPositionForItem(itemPosition: itemPosition)\n    let layoutId = adapter.getHeaderLayout(itemPosition: itemPosition)\n    let header = UINib(nibName: layoutId, bundle: nil).instantiate(withOwner: nil, options: nil).first as! UIView\n    adapter.bindHeaderData(header: header, headerPosition: headerPosition)\n    return header\n}\n```"
    },
    {
        "method_name": "fixLayoutSize",
        "method_code": "private void fixLayoutSize(ViewGroup parent, View view) {\n\n        // Specs for parent (RecyclerView)\n        int widthSpec = View.MeasureSpec.makeMeasureSpec(parent.getWidth(), View.MeasureSpec.EXACTLY);\n        int heightSpec = View.MeasureSpec.makeMeasureSpec(parent.getHeight(), View.MeasureSpec.UNSPECIFIED);\n\n        // Specs for children (headers)\n        int childWidthSpec = ViewGroup.getChildMeasureSpec(widthSpec, parent.getPaddingLeft() + parent.getPaddingRight(), view.getLayoutParams().width);\n        int childHeightSpec = ViewGroup.getChildMeasureSpec(heightSpec, parent.getPaddingTop() + parent.getPaddingBottom(), view.getLayoutParams().height);\n\n        view.measure(childWidthSpec, childHeightSpec);\n        view.layout(0, 0, view.getMeasuredWidth(), view.getMeasuredHeight());\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled fixLayoutSize from StickyHeaderItemDecoration.java into Swift.\n\n        Input:\n\n        Method Name: fixLayoutSize\n\n        Method Code: private void fixLayoutSize(ViewGroup parent, View view) {\n\n        // Specs for parent (RecyclerView)\n        int widthSpec = View.MeasureSpec.makeMeasureSpec(parent.getWidth(), View.MeasureSpec.EXACTLY);\n        int heightSpec = View.MeasureSpec.makeMeasureSpec(parent.getHeight(), View.MeasureSpec.UNSPECIFIED);\n\n        // Specs for children (headers)\n        int childWidthSpec = ViewGroup.getChildMeasureSpec(widthSpec, parent.getPaddingLeft() + parent.getPaddingRight(), view.getLayoutParams().width);\n        int childHeightSpec = ViewGroup.getChildMeasureSpec(heightSpec, parent.getPaddingTop() + parent.getPaddingBottom(), view.getLayoutParams().height);\n\n        view.measure(childWidthSpec, childHeightSpec);\n        view.layout(0, 0, view.getMeasuredWidth(), view.getMeasuredHeight());\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func fixLayoutSize(parent: UIView, view: UIView) {\n    let widthSpec = parent.bounds.width\n    let heightSpec = UIView.layoutFittingCompressedSize.height\n\n    let childWidthSpec = view.systemLayoutSizeFitting(CGSize(width: widthSpec, height: 0)).width\n    let childHeightSpec = view.systemLayoutSizeFitting(CGSize(width: 0, height: heightSpec)).height\n\n    view.frame = CGRect(x: 0, y: 0, width: childWidthSpec, height: childHeightSpec)\n}\n```"
    }
]