[
    {
        "method_name": "onCreate",
        "method_code": "@Override\n    public boolean onCreate() {\n        AndroidInjection.inject(this);\n        return true;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreate from DiskLruImageCacheFileProvider.java into Swift.\n\n        Input:\n\n        Method Name: onCreate\n\n        Method Code: @Override\n    public boolean onCreate() {\n        AndroidInjection.inject(this);\n        return true;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onCreate() -> Bool {\n    AndroidInjection.inject(self)\n    return true\n}\n```"
    },
    {
        "method_name": "getFile",
        "method_code": "private OCFile getFile(Uri uri) {\n        User user = accountManager.getUser();\n        FileDataStorageManager fileDataStorageManager = new FileDataStorageManager(user,\n                MainApp.getAppContext().getContentResolver());\n\n        return fileDataStorageManager.getFileByPath(uri.getPath());\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getFile from DiskLruImageCacheFileProvider.java into Swift.\n\n        Input:\n\n        Method Name: getFile\n\n        Method Code: private OCFile getFile(Uri uri) {\n        User user = accountManager.getUser();\n        FileDataStorageManager fileDataStorageManager = new FileDataStorageManager(user,\n                MainApp.getAppContext().getContentResolver());\n\n        return fileDataStorageManager.getFileByPath(uri.getPath());\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getFile(uri: URL) -> OCFile? {\n    let user = accountManager.getUser()\n    let fileDataStorageManager = FileDataStorageManager(user: user, contentResolver: MainApp.getAppContext().contentResolver)\n    \n    return fileDataStorageManager.getFileByPath(path: uri.path)\n}\n```"
    },
    {
        "method_name": "openFile",
        "method_code": "@Override\n    public ParcelFileDescriptor openFile(@NonNull Uri uri, @NonNull String mode) throws FileNotFoundException {\n        return getParcelFileDescriptorForOCFile(getFile(uri));\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled openFile from DiskLruImageCacheFileProvider.java into Swift.\n\n        Input:\n\n        Method Name: openFile\n\n        Method Code: @Override\n    public ParcelFileDescriptor openFile(@NonNull Uri uri, @NonNull String mode) throws FileNotFoundException {\n        return getParcelFileDescriptorForOCFile(getFile(uri));\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func openFile(uri: URL, mode: String) throws -> FileHandle {\n    return try getFileHandleForOCFile(getFile(uri: uri))\n}\n```"
    },
    {
        "method_name": "getParcelFileDescriptorForOCFile",
        "method_code": "public static ParcelFileDescriptor getParcelFileDescriptorForOCFile(OCFile ocFile) throws FileNotFoundException {\n        Bitmap thumbnail = ThumbnailsCacheManager.getBitmapFromDiskCache(\n            ThumbnailsCacheManager.PREFIX_RESIZED_IMAGE + ocFile.getRemoteId());\n\n        // fallback to thumbnail\n        if (thumbnail == null) {\n            thumbnail = ThumbnailsCacheManager.getBitmapFromDiskCache(\n                ThumbnailsCacheManager.PREFIX_THUMBNAIL + ocFile.getRemoteId());\n        }\n\n        // fallback to default image\n        if (thumbnail == null) {\n            thumbnail = ThumbnailsCacheManager.mDefaultImg;\n        }\n\n        // create a file to write bitmap data\n        File f = new File(MainApp.getAppContext().getCacheDir(), ocFile.getFileName());\n        try {\n            f.createNewFile();\n\n            //Convert bitmap to byte array\n            ByteArrayOutputStream bos = new ByteArrayOutputStream();\n            thumbnail.compress(Bitmap.CompressFormat.PNG, 90, bos);\n            byte[] bitmapData = bos.toByteArray();\n\n            //write the bytes in file\n            try (FileOutputStream fos = new FileOutputStream(f)){\n                fos.write(bitmapData);\n            } catch (FileNotFoundException e) {\n                Log_OC.e(TAG, \"File not found: \" + e.getMessage());\n            }\n\n        } catch (Exception e) {\n            Log_OC.e(TAG, \"Error opening file: \" + e.getMessage());\n        }\n\n        return ParcelFileDescriptor.open(f, ParcelFileDescriptor.MODE_READ_ONLY);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getParcelFileDescriptorForOCFile from DiskLruImageCacheFileProvider.java into Swift.\n\n        Input:\n\n        Method Name: getParcelFileDescriptorForOCFile\n\n        Method Code: public static ParcelFileDescriptor getParcelFileDescriptorForOCFile(OCFile ocFile) throws FileNotFoundException {\n        Bitmap thumbnail = ThumbnailsCacheManager.getBitmapFromDiskCache(\n            ThumbnailsCacheManager.PREFIX_RESIZED_IMAGE + ocFile.getRemoteId());\n\n        // fallback to thumbnail\n        if (thumbnail == null) {\n            thumbnail = ThumbnailsCacheManager.getBitmapFromDiskCache(\n                ThumbnailsCacheManager.PREFIX_THUMBNAIL + ocFile.getRemoteId());\n        }\n\n        // fallback to default image\n        if (thumbnail == null) {\n            thumbnail = ThumbnailsCacheManager.mDefaultImg;\n        }\n\n        // create a file to write bitmap data\n        File f = new File(MainApp.getAppContext().getCacheDir(), ocFile.getFileName());\n        try {\n            f.createNewFile();\n\n            //Convert bitmap to byte array\n            ByteArrayOutputStream bos = new ByteArrayOutputStream();\n            thumbnail.compress(Bitmap.CompressFormat.PNG, 90, bos);\n            byte[] bitmapData = bos.toByteArray();\n\n            //write the bytes in file\n            try (FileOutputStream fos = new FileOutputStream(f)){\n                fos.write(bitmapData);\n            } catch (FileNotFoundException e) {\n                Log_OC.e(TAG, \"File not found: \" + e.getMessage());\n            }\n\n        } catch (Exception e) {\n            Log_OC.e(TAG, \"Error opening file: \" + e.getMessage());\n        }\n\n        return ParcelFileDescriptor.open(f, ParcelFileDescriptor.MODE_READ_ONLY);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport UIKit\n\nfunc getFileDescriptorForOCFile(ocFile: OCFile) throws -> FileHandle {\n    var thumbnail: UIImage? = ThumbnailsCacheManager.getBitmapFromDiskCache(key: ThumbnailsCacheManager.PREFIX_RESIZED_IMAGE + ocFile.getRemoteId())\n\n    // fallback to thumbnail\n    if thumbnail == nil {\n        thumbnail = ThumbnailsCacheManager.getBitmapFromDiskCache(key: ThumbnailsCacheManager.PREFIX_THUMBNAIL + ocFile.getRemoteId())\n    }\n\n    // fallback to default image\n    if thumbnail == nil {\n        thumbnail = ThumbnailsCacheManager.mDefaultImg\n    }\n\n    // create a file to write bitmap data\n    let fileManager = FileManager.default\n    let cacheDir = fileManager.urls(for: .cachesDirectory, in: .userDomainMask).first!\n    let fileURL = cacheDir.appendingPathComponent(ocFile.getFileName())\n\n    do {\n        if !fileManager.fileExists(atPath: fileURL.path) {\n            fileManager.createFile(atPath: fileURL.path, contents: nil, attributes: nil)\n        }\n\n        // Convert bitmap to byte array\n        if let thumbnail = thumbnail, let data = thumbnail.pngData() {\n            try data.write(to: fileURL)\n        } else {\n            throw NSError(domain: \"Error converting image to data\", code: 0, userInfo: nil)\n        }\n    } catch {\n        print(\"Error opening file: \\(error.localizedDescription)\")\n        throw error\n    }\n\n    return try FileHandle(forReadingFrom: fileURL)\n}\n```"
    },
    {
        "method_name": "getType",
        "method_code": "@Override\n    public String getType(@NonNull Uri uri) {\n        OCFile ocFile = getFile(uri);\n        return ocFile.getMimeType();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getType from DiskLruImageCacheFileProvider.java into Swift.\n\n        Input:\n\n        Method Name: getType\n\n        Method Code: @Override\n    public String getType(@NonNull Uri uri) {\n        OCFile ocFile = getFile(uri);\n        return ocFile.getMimeType();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func getType(for uri: URL) -> String {\n    let ocFile = getFile(uri: uri)\n    return ocFile.getMimeType()\n}\n```"
    },
    {
        "method_name": "query",
        "method_code": "@Override\n    public Cursor query(@NonNull Uri uri, String[] arg1, String arg2, String[] arg3, String arg4) {\n        MatrixCursor cursor = null;\n\n        OCFile ocFile = getFile(uri);\n        File file = new File(MainApp.getAppContext().getCacheDir(), ocFile.getFileName());\n        if (file.exists()) {\n            cursor = new MatrixCursor(new String[] {\n                    OpenableColumns.DISPLAY_NAME, OpenableColumns.SIZE });\n            cursor.addRow(new Object[] { uri.getLastPathSegment(),\n                    file.length() });\n        }\n\n        return cursor;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled query from DiskLruImageCacheFileProvider.java into Swift.\n\n        Input:\n\n        Method Name: query\n\n        Method Code: @Override\n    public Cursor query(@NonNull Uri uri, String[] arg1, String arg2, String[] arg3, String arg4) {\n        MatrixCursor cursor = null;\n\n        OCFile ocFile = getFile(uri);\n        File file = new File(MainApp.getAppContext().getCacheDir(), ocFile.getFileName());\n        if (file.exists()) {\n            cursor = new MatrixCursor(new String[] {\n                    OpenableColumns.DISPLAY_NAME, OpenableColumns.SIZE });\n            cursor.addRow(new Object[] { uri.getLastPathSegment(),\n                    file.length() });\n        }\n\n        return cursor;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport Foundation\nimport SQLite3\n\nfunc query(uri: URL, arg1: [String]?, arg2: String?, arg3: [String]?, arg4: String?) -> [[String: Any]]? {\n    var cursor: [[String: Any]]? = nil\n\n    let ocFile = getFile(uri: uri)\n    let file = FileManager.default.temporaryDirectory.appendingPathComponent(ocFile.fileName)\n    if FileManager.default.fileExists(atPath: file.path) {\n        cursor = []\n        let row: [String: Any] = [\n            \"DISPLAY_NAME\": uri.lastPathComponent,\n            \"SIZE\": try? FileManager.default.attributesOfItem(atPath: file.path)[.size] as? Int64 ?? 0\n        ]\n        cursor?.append(row)\n    }\n\n    return cursor\n}\n\nfunc getFile(uri: URL) -> OCFile {\n    // Placeholder for the actual implementation of getFile\n    return OCFile(fileName: uri.lastPathComponent)\n}\n\nstruct OCFile {\n    let fileName: String\n}\n```"
    },
    {
        "method_name": "insert",
        "method_code": "@Override\n    public Uri insert(@NonNull Uri uri, ContentValues values) {\n        return null;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled insert from DiskLruImageCacheFileProvider.java into Swift.\n\n        Input:\n\n        Method Name: insert\n\n        Method Code: @Override\n    public Uri insert(@NonNull Uri uri, ContentValues values) {\n        return null;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func insert(_ uri: URL, values: [String: Any]) -> URL? {\n    return nil\n}\n```"
    },
    {
        "method_name": "delete",
        "method_code": "@Override\n    public int delete(@NonNull Uri uri, String selection, String[] selectionArgs) {\n        return 0;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled delete from DiskLruImageCacheFileProvider.java into Swift.\n\n        Input:\n\n        Method Name: delete\n\n        Method Code: @Override\n    public int delete(@NonNull Uri uri, String selection, String[] selectionArgs) {\n        return 0;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc delete(uri: URL, selection: String?, selectionArgs: [String]?) -> Int {\n    return 0\n}\n```"
    },
    {
        "method_name": "update",
        "method_code": "@Override\n    public int update(@NonNull Uri uri, ContentValues values, String selection, String[] selectionArgs) {\n        return 0;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled update from DiskLruImageCacheFileProvider.java into Swift.\n\n        Input:\n\n        Method Name: update\n\n        Method Code: @Override\n    public int update(@NonNull Uri uri, ContentValues values, String selection, String[] selectionArgs) {\n        return 0;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func update(_ uri: URL, values: [String: Any], selection: String?, selectionArgs: [String]?) -> Int {\n    return 0\n}\n```"
    }
]