[
    {
        "method_name": "setUp",
        "method_code": "@Before\n    public void setUp() {\n        Context instrumentationCtx = ApplicationProvider.getApplicationContext();\n        ContentResolver contentResolver = instrumentationCtx.getContentResolver();\n        uploadsStorageManager = new UploadsStorageManager(currentAccountProvider, contentResolver);\n        userAccountManager = UserAccountManagerImpl.fromContext(targetContext);\n\n        Account temp = new Account(\"test2@test.com\", MainApp.getAccountType(targetContext));\n        if (!userAccountManager.exists(temp)) {\n            AccountManager platformAccountManager = AccountManager.get(targetContext);\n            platformAccountManager.addAccountExplicitly(temp, \"testPassword\", null);\n            platformAccountManager.setUserData(temp, AccountUtils.Constants.KEY_OC_ACCOUNT_VERSION,\n                                               Integer.toString(UserAccountManager.ACCOUNT_VERSION));\n            platformAccountManager.setUserData(temp, AccountUtils.Constants.KEY_OC_VERSION, \"14.0.0.0\");\n            platformAccountManager.setUserData(temp, AccountUtils.Constants.KEY_OC_BASE_URL, \"test.com\");\n            platformAccountManager.setUserData(temp, AccountUtils.Constants.KEY_USER_ID, \"test\"); // same as userId\n        }\n\n        final UserAccountManager userAccountManager = UserAccountManagerImpl.fromContext(targetContext);\n        user2 = userAccountManager.getUser(\"test2@test.com\").orElseThrow(ActivityNotFoundException::new);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setUp from UploadStorageManagerTest.java into Swift.\n\n        Input:\n\n        Method Name: setUp\n\n        Method Code: @Before\n    public void setUp() {\n        Context instrumentationCtx = ApplicationProvider.getApplicationContext();\n        ContentResolver contentResolver = instrumentationCtx.getContentResolver();\n        uploadsStorageManager = new UploadsStorageManager(currentAccountProvider, contentResolver);\n        userAccountManager = UserAccountManagerImpl.fromContext(targetContext);\n\n        Account temp = new Account(\"test2@test.com\", MainApp.getAccountType(targetContext));\n        if (!userAccountManager.exists(temp)) {\n            AccountManager platformAccountManager = AccountManager.get(targetContext);\n            platformAccountManager.addAccountExplicitly(temp, \"testPassword\", null);\n            platformAccountManager.setUserData(temp, AccountUtils.Constants.KEY_OC_ACCOUNT_VERSION,\n                                               Integer.toString(UserAccountManager.ACCOUNT_VERSION));\n            platformAccountManager.setUserData(temp, AccountUtils.Constants.KEY_OC_VERSION, \"14.0.0.0\");\n            platformAccountManager.setUserData(temp, AccountUtils.Constants.KEY_OC_BASE_URL, \"test.com\");\n            platformAccountManager.setUserData(temp, AccountUtils.Constants.KEY_USER_ID, \"test\"); // same as userId\n        }\n\n        final UserAccountManager userAccountManager = UserAccountManagerImpl.fromContext(targetContext);\n        user2 = userAccountManager.getUser(\"test2@test.com\").orElseThrow(ActivityNotFoundException::new);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport XCTest\nimport Foundation\n\nclass UploadStorageManagerTest: XCTestCase {\n    var uploadsStorageManager: UploadsStorageManager!\n    var userAccountManager: UserAccountManagerImpl!\n    var user2: UserAccount!\n\n    override func setUp() {\n        super.setUp()\n        let instrumentationCtx = UIApplication.shared.delegate as! AppDelegate\n        let contentResolver = instrumentationCtx.persistentContainer.viewContext\n        uploadsStorageManager = UploadsStorageManager(currentAccountProvider: currentAccountProvider, contentResolver: contentResolver)\n        userAccountManager = UserAccountManagerImpl.fromContext(targetContext: targetContext)\n\n        let temp = Account(username: \"test2@test.com\", accountType: MainApp.getAccountType(targetContext: targetContext))\n        if !userAccountManager.exists(account: temp) {\n            let platformAccountManager = AccountManager.shared\n            platformAccountManager.addAccountExplicitly(account: temp, password: \"testPassword\", userData: nil)\n            platformAccountManager.setUserData(account: temp, key: AccountUtils.Constants.KEY_OC_ACCOUNT_VERSION, value: String(UserAccountManager.ACCOUNT_VERSION))\n            platformAccountManager.setUserData(account: temp, key: AccountUtils.Constants.KEY_OC_VERSION, value: \"14.0.0.0\")\n            platformAccountManager.setUserData(account: temp, key: AccountUtils.Constants.KEY_OC_BASE_URL, value: \"test.com\")\n            platformAccountManager.setUserData(account: temp, key: AccountUtils.Constants.KEY_USER_ID, value: \"test\")\n        }\n\n        let userAccountManager = UserAccountManagerImpl.fromContext(targetContext: targetContext)\n        user2 = try! userAccountManager.getUser(username: \"test2@test.com\").get()\n    }\n}\n```"
    },
    {
        "method_name": "testDeleteAllUploads",
        "method_code": "@Test\n    public void testDeleteAllUploads() {\n        // Clean\n        for (User user : userAccountManager.getAllUsers()) {\n            uploadsStorageManager.removeUserUploads(user);\n        }\n        int accountRowsA = 3;\n        int accountRowsB = 4;\n        insertUploads(account, accountRowsA);\n        insertUploads(user2.toPlatformAccount(), accountRowsB);\n\n        assertEquals(\"Expected 4 removed uploads files\",\n                     4,\n                     uploadsStorageManager.removeUserUploads(user2));\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled testDeleteAllUploads from UploadStorageManagerTest.java into Swift.\n\n        Input:\n\n        Method Name: testDeleteAllUploads\n\n        Method Code: @Test\n    public void testDeleteAllUploads() {\n        // Clean\n        for (User user : userAccountManager.getAllUsers()) {\n            uploadsStorageManager.removeUserUploads(user);\n        }\n        int accountRowsA = 3;\n        int accountRowsB = 4;\n        insertUploads(account, accountRowsA);\n        insertUploads(user2.toPlatformAccount(), accountRowsB);\n\n        assertEquals(\"Expected 4 removed uploads files\",\n                     4,\n                     uploadsStorageManager.removeUserUploads(user2));\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc testDeleteAllUploads() {\n    // Clean\n    for user in userAccountManager.getAllUsers() {\n        uploadsStorageManager.removeUserUploads(user)\n    }\n    let accountRowsA = 3\n    let accountRowsB = 4\n    insertUploads(account, accountRowsA)\n    insertUploads(user2.toPlatformAccount(), accountRowsB)\n\n    XCTAssertEqual(4, uploadsStorageManager.removeUserUploads(user2), \"Expected 4 removed uploads files\")\n}\n```"
    },
    {
        "method_name": "largeTest",
        "method_code": "@Test\n    public void largeTest() {\n        int size = 3000;\n        ArrayList<OCUpload> uploads = new ArrayList<>();\n\n        deleteAllUploads();\n        assertEquals(0, uploadsStorageManager.getAllStoredUploads().length);\n\n        for (int i = 0; i < size; i++) {\n            OCUpload upload = createUpload(account);\n\n            uploads.add(upload);\n            uploadsStorageManager.storeUpload(upload);\n        }\n\n        OCUpload[] storedUploads = uploadsStorageManager.getAllStoredUploads();\n        assertEquals(size, uploadsStorageManager.getAllStoredUploads().length);\n\n        for (int i = 0; i < size; i++) {\n            assertTrue(contains(uploads, storedUploads[i]));\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled largeTest from UploadStorageManagerTest.java into Swift.\n\n        Input:\n\n        Method Name: largeTest\n\n        Method Code: @Test\n    public void largeTest() {\n        int size = 3000;\n        ArrayList<OCUpload> uploads = new ArrayList<>();\n\n        deleteAllUploads();\n        assertEquals(0, uploadsStorageManager.getAllStoredUploads().length);\n\n        for (int i = 0; i < size; i++) {\n            OCUpload upload = createUpload(account);\n\n            uploads.add(upload);\n            uploadsStorageManager.storeUpload(upload);\n        }\n\n        OCUpload[] storedUploads = uploadsStorageManager.getAllStoredUploads();\n        assertEquals(size, uploadsStorageManager.getAllStoredUploads().length);\n\n        for (int i = 0; i < size; i++) {\n            assertTrue(contains(uploads, storedUploads[i]));\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc largeTest() {\n    let size = 3000\n    var uploads: [OCUpload] = []\n\n    deleteAllUploads()\n    XCTAssertEqual(0, uploadsStorageManager.getAllStoredUploads().count)\n\n    for _ in 0..<size {\n        let upload = createUpload(account: account)\n\n        uploads.append(upload)\n        uploadsStorageManager.storeUpload(upload)\n    }\n\n    let storedUploads = uploadsStorageManager.getAllStoredUploads()\n    XCTAssertEqual(size, storedUploads.count)\n\n    for i in 0..<size {\n        XCTAssertTrue(uploads.contains(storedUploads[i]))\n    }\n}\n```"
    },
    {
        "method_name": "testIsSame",
        "method_code": "@Test\n    public void testIsSame() {\n        OCUpload upload1 = new OCUpload(\"/test\", \"/test\", account.name);\n        upload1.setUseWifiOnly(true);\n        OCUpload upload2 = new OCUpload(\"/test\", \"/test\", account.name);\n        upload2.setUseWifiOnly(true);\n\n        assertTrue(upload1.isSame(upload2));\n\n        upload2.setUseWifiOnly(false);\n        assertFalse(upload1.isSame(upload2));\n\n        assertFalse(upload1.isSame(null));\n        assertFalse(upload1.isSame(new OCFile(\"/test\")));\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled testIsSame from UploadStorageManagerTest.java into Swift.\n\n        Input:\n\n        Method Name: testIsSame\n\n        Method Code: @Test\n    public void testIsSame() {\n        OCUpload upload1 = new OCUpload(\"/test\", \"/test\", account.name);\n        upload1.setUseWifiOnly(true);\n        OCUpload upload2 = new OCUpload(\"/test\", \"/test\", account.name);\n        upload2.setUseWifiOnly(true);\n\n        assertTrue(upload1.isSame(upload2));\n\n        upload2.setUseWifiOnly(false);\n        assertFalse(upload1.isSame(upload2));\n\n        assertFalse(upload1.isSame(null));\n        assertFalse(upload1.isSame(new OCFile(\"/test\")));\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc testIsSame() {\n    let upload1 = OCUpload(\"/test\", \"/test\", account.name)\n    upload1.setUseWifiOnly(true)\n    let upload2 = OCUpload(\"/test\", \"/test\", account.name)\n    upload2.setUseWifiOnly(true)\n\n    XCTAssertTrue(upload1.isSame(upload2))\n\n    upload2.setUseWifiOnly(false)\n    XCTAssertFalse(upload1.isSame(upload2))\n\n    XCTAssertFalse(upload1.isSame(nil))\n    XCTAssertFalse(upload1.isSame(OCFile(\"/test\")))\n}\n```"
    },
    {
        "method_name": "contains",
        "method_code": "private boolean contains(ArrayList<OCUpload> uploads, OCUpload storedUpload) {\n        for (int i = 0; i < uploads.size(); i++) {\n            if (storedUpload.isSame(uploads.get(i))) {\n                return true;\n            }\n        }\n        return false;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled contains from UploadStorageManagerTest.java into Swift.\n\n        Input:\n\n        Method Name: contains\n\n        Method Code: private boolean contains(ArrayList<OCUpload> uploads, OCUpload storedUpload) {\n        for (int i = 0; i < uploads.size(); i++) {\n            if (storedUpload.isSame(uploads.get(i))) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func contains(_ uploads: [OCUpload], _ storedUpload: OCUpload) -> Bool {\n    for upload in uploads {\n        if storedUpload.isSame(upload) {\n            return true\n        }\n    }\n    return false\n}\n```"
    },
    {
        "method_name": "corruptedUpload",
        "method_code": "@Test(expected = IllegalArgumentException.class)\n    public void corruptedUpload() {\n        OCUpload corruptUpload = new OCUpload(File.separator + \"LocalPath\",\n                                              OCFile.PATH_SEPARATOR + \"RemotePath\",\n                                              account.name);\n\n        corruptUpload.setLocalPath(null);\n\n        uploadsStorageManager.storeUpload(corruptUpload);\n\n        uploadsStorageManager.getAllStoredUploads();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled corruptedUpload from UploadStorageManagerTest.java into Swift.\n\n        Input:\n\n        Method Name: corruptedUpload\n\n        Method Code: @Test(expected = IllegalArgumentException.class)\n    public void corruptedUpload() {\n        OCUpload corruptUpload = new OCUpload(File.separator + \"LocalPath\",\n                                              OCFile.PATH_SEPARATOR + \"RemotePath\",\n                                              account.name);\n\n        corruptUpload.setLocalPath(null);\n\n        uploadsStorageManager.storeUpload(corruptUpload);\n\n        uploadsStorageManager.getAllStoredUploads();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc testCorruptedUpload() {\n    let corruptUpload = OCUpload(localPath: FileManager.default.currentDirectoryPath + \"/LocalPath\",\n                                 remotePath: \"/RemotePath\",\n                                 accountName: account.name)\n\n    corruptUpload.localPath = nil\n\n    do {\n        try uploadsStorageManager.storeUpload(corruptUpload)\n    } catch {\n        // Handle the expected IllegalArgumentException\n    }\n\n    _ = uploadsStorageManager.getAllStoredUploads()\n}\n```"
    },
    {
        "method_name": "getById",
        "method_code": "@Test\n    public void getById() {\n        OCUpload upload = createUpload(account);\n        long id = uploadsStorageManager.storeUpload(upload);\n\n        OCUpload newUpload = uploadsStorageManager.getUploadById(id);\n\n        assertNotNull(newUpload);\n        assertEquals(upload.getLocalAction(), newUpload.getLocalAction());\n        assertEquals(upload.getFolderUnlockToken(), newUpload.getFolderUnlockToken());\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getById from UploadStorageManagerTest.java into Swift.\n\n        Input:\n\n        Method Name: getById\n\n        Method Code: @Test\n    public void getById() {\n        OCUpload upload = createUpload(account);\n        long id = uploadsStorageManager.storeUpload(upload);\n\n        OCUpload newUpload = uploadsStorageManager.getUploadById(id);\n\n        assertNotNull(newUpload);\n        assertEquals(upload.getLocalAction(), newUpload.getLocalAction());\n        assertEquals(upload.getFolderUnlockToken(), newUpload.getFolderUnlockToken());\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc testGetById() {\n    let upload = createUpload(account: account)\n    let id = uploadsStorageManager.storeUpload(upload: upload)\n\n    if let newUpload = uploadsStorageManager.getUploadById(id: id) {\n        XCTAssertNotNil(newUpload)\n        XCTAssertEqual(upload.localAction, newUpload.localAction)\n        XCTAssertEqual(upload.folderUnlockToken, newUpload.folderUnlockToken)\n    }\n}\n```"
    },
    {
        "method_name": "getByIdNull",
        "method_code": "@Test\n    public void getByIdNull() {\n        OCUpload newUpload = uploadsStorageManager.getUploadById(-1);\n\n        assertNull(newUpload);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getByIdNull from UploadStorageManagerTest.java into Swift.\n\n        Input:\n\n        Method Name: getByIdNull\n\n        Method Code: @Test\n    public void getByIdNull() {\n        OCUpload newUpload = uploadsStorageManager.getUploadById(-1);\n\n        assertNull(newUpload);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc testGetByIdNull() {\n    let newUpload = uploadsStorageManager.getUploadById(-1)\n    \n    XCTAssertNil(newUpload)\n}\n```"
    },
    {
        "method_name": "insertUploads",
        "method_code": "private void insertUploads(Account account, int rowsToInsert) {\n        for (int i = 0; i < rowsToInsert; i++) {\n            uploadsStorageManager.storeUpload(createUpload(account));\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled insertUploads from UploadStorageManagerTest.java into Swift.\n\n        Input:\n\n        Method Name: insertUploads\n\n        Method Code: private void insertUploads(Account account, int rowsToInsert) {\n        for (int i = 0; i < rowsToInsert; i++) {\n            uploadsStorageManager.storeUpload(createUpload(account));\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func insertUploads(account: Account, rowsToInsert: Int) {\n    for _ in 0..<rowsToInsert {\n        uploadsStorageManager.storeUpload(createUpload(account: account))\n    }\n}\n```"
    },
    {
        "method_name": "generateUniqueNumber",
        "method_code": "public String generateUniqueNumber() {\n        UUID uuid = UUID.randomUUID();\n        return uuid.toString();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled generateUniqueNumber from UploadStorageManagerTest.java into Swift.\n\n        Input:\n\n        Method Name: generateUniqueNumber\n\n        Method Code: public String generateUniqueNumber() {\n        UUID uuid = UUID.randomUUID();\n        return uuid.toString();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc generateUniqueNumber() -> String {\n    let uuid = UUID()\n    return uuid.uuidString\n}\n```"
    },
    {
        "method_name": "createUpload",
        "method_code": "private OCUpload createUpload(Account account) {\n        OCUpload upload = new OCUpload(File.separator + \"very long long long long long long long long long long long \" +\n                                           \"long long long long long long long long long long long long long long \" +\n                                           \"long long long long long long long long long long long long long long \" +\n                                           \"long long long long long long long LocalPath \" +\n                                           generateUniqueNumber(),\n                                       OCFile.PATH_SEPARATOR + \"very long long long long long long long long long \" +\n                                           \"long long long long long long long long long long long long long long \" +\n                                           \"long long long long long long long long long long long long long long \" +\n                                           \"long long long long long long long long long long long long RemotePath \" +\n                                           generateUniqueNumber(),\n                                       account.name);\n\n        upload.setFileSize(new Random().nextInt(20000) * 10000);\n        upload.setUploadStatus(UploadsStorageManager.UploadStatus.UPLOAD_IN_PROGRESS);\n        upload.setLocalAction(2);\n        upload.setNameCollisionPolicy(NameCollisionPolicy.ASK_USER);\n        upload.setCreateRemoteFolder(false);\n        upload.setUploadEndTimestamp(System.currentTimeMillis());\n        upload.setLastResult(UploadResult.DELAYED_FOR_WIFI);\n        upload.setCreatedBy(UploadFileOperation.CREATED_BY_USER);\n        upload.setUseWifiOnly(true);\n        upload.setWhileChargingOnly(false);\n        upload.setFolderUnlockToken(RandomStringGenerator.make(10));\n\n        return upload;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled createUpload from UploadStorageManagerTest.java into Swift.\n\n        Input:\n\n        Method Name: createUpload\n\n        Method Code: private OCUpload createUpload(Account account) {\n        OCUpload upload = new OCUpload(File.separator + \"very long long long long long long long long long long long \" +\n                                           \"long long long long long long long long long long long long long long \" +\n                                           \"long long long long long long long long long long long long long long \" +\n                                           \"long long long long long long long LocalPath \" +\n                                           generateUniqueNumber(),\n                                       OCFile.PATH_SEPARATOR + \"very long long long long long long long long long \" +\n                                           \"long long long long long long long long long long long long long long \" +\n                                           \"long long long long long long long long long long long long long long \" +\n                                           \"long long long long long long long long long long long long RemotePath \" +\n                                           generateUniqueNumber(),\n                                       account.name);\n\n        upload.setFileSize(new Random().nextInt(20000) * 10000);\n        upload.setUploadStatus(UploadsStorageManager.UploadStatus.UPLOAD_IN_PROGRESS);\n        upload.setLocalAction(2);\n        upload.setNameCollisionPolicy(NameCollisionPolicy.ASK_USER);\n        upload.setCreateRemoteFolder(false);\n        upload.setUploadEndTimestamp(System.currentTimeMillis());\n        upload.setLastResult(UploadResult.DELAYED_FOR_WIFI);\n        upload.setCreatedBy(UploadFileOperation.CREATED_BY_USER);\n        upload.setUseWifiOnly(true);\n        upload.setWhileChargingOnly(false);\n        upload.setFolderUnlockToken(RandomStringGenerator.make(10));\n\n        return upload;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func createUpload(account: Account) -> OCUpload {\n    let upload = OCUpload(\n        localPath: File.separator + \"very long long long long long long long long long long long \" +\n            \"long long long long long long long long long long long long long long \" +\n            \"long long long long long long long long long long long long long long \" +\n            \"long long long long long long long long long long long long LocalPath \" +\n            generateUniqueNumber(),\n        remotePath: OCFile.PATH_SEPARATOR + \"very long long long long long long long long long \" +\n            \"long long long long long long long long long long long long long long \" +\n            \"long long long long long long long long long long long long long long \" +\n            \"long long long long long long long long long long long long RemotePath \" +\n            generateUniqueNumber(),\n        accountName: account.name\n    )\n\n    upload.setFileSize(Int.random(in: 0..<20000) * 10000)\n    upload.setUploadStatus(.UPLOAD_IN_PROGRESS)\n    upload.setLocalAction(2)\n    upload.setNameCollisionPolicy(.ASK_USER)\n    upload.setCreateRemoteFolder(false)\n    upload.setUploadEndTimestamp(Date().timeIntervalSince1970 * 1000)\n    upload.setLastResult(.DELAYED_FOR_WIFI)\n    upload.setCreatedBy(.CREATED_BY_USER)\n    upload.setUseWifiOnly(true)\n    upload.setWhileChargingOnly(false)\n    upload.setFolderUnlockToken(RandomStringGenerator.make(10))\n\n    return upload\n}\n```"
    },
    {
        "method_name": "deleteAllUploads",
        "method_code": "private void deleteAllUploads() {\n        uploadsStorageManager.removeAllUploads();\n\n        assertEquals(0, uploadsStorageManager.getAllStoredUploads().length);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled deleteAllUploads from UploadStorageManagerTest.java into Swift.\n\n        Input:\n\n        Method Name: deleteAllUploads\n\n        Method Code: private void deleteAllUploads() {\n        uploadsStorageManager.removeAllUploads();\n\n        assertEquals(0, uploadsStorageManager.getAllStoredUploads().length);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func deleteAllUploads() {\n    uploadsStorageManager.removeAllUploads()\n\n    assert(uploadsStorageManager.getAllStoredUploads().count == 0)\n}\n```"
    },
    {
        "method_name": "tearDown",
        "method_code": "@After\n    public void tearDown() {\n        deleteAllUploads();\n        userAccountManager.removeUser(user2);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled tearDown from UploadStorageManagerTest.java into Swift.\n\n        Input:\n\n        Method Name: tearDown\n\n        Method Code: @After\n    public void tearDown() {\n        deleteAllUploads();\n        userAccountManager.removeUser(user2);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func tearDown() {\n    deleteAllUploads()\n    userAccountManager.removeUser(user2)\n}\n```"
    }
]