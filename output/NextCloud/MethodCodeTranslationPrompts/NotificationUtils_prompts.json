[
    {
        "method_name": "newNotificationBuilder",
        "method_code": "public static NotificationCompat.Builder newNotificationBuilder(Context context, String channelId, final ViewThemeUtils viewThemeUtils) {\n        final NotificationCompat.Builder builder = new NotificationCompat.Builder(context, channelId);\n        viewThemeUtils.androidx.themeNotificationCompatBuilder(context, builder);\n        return builder;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled newNotificationBuilder from NotificationUtils.java into Swift.\n\n        Input:\n\n        Method Name: newNotificationBuilder\n\n        Method Code: public static NotificationCompat.Builder newNotificationBuilder(Context context, String channelId, final ViewThemeUtils viewThemeUtils) {\n        final NotificationCompat.Builder builder = new NotificationCompat.Builder(context, channelId);\n        viewThemeUtils.androidx.themeNotificationCompatBuilder(context, builder);\n        return builder;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport UserNotifications\n\nfunc newNotificationBuilder(context: UNUserNotificationCenter, channelId: String, viewThemeUtils: ViewThemeUtils) -> UNMutableNotificationContent {\n    let content = UNMutableNotificationContent()\n    viewThemeUtils.themeNotificationContent(context: context, content: content)\n    return content\n}\n```"
    },
    {
        "method_name": "cancelWithDelay",
        "method_code": "@SuppressFBWarnings(\"DMI\")\n    public static void cancelWithDelay(final NotificationManager notificationManager, final int notificationId,\n                                       long delayInMillis) {\n\n        HandlerThread thread = new HandlerThread(\n            \"NotificationDelayerThread_\" + new SecureRandom().nextInt(), Process.THREAD_PRIORITY_BACKGROUND);\n        thread.start();\n\n        Handler handler = new Handler(thread.getLooper());\n        handler.postDelayed(() -> {\n            notificationManager.cancel(notificationId);\n            ((HandlerThread) Thread.currentThread()).getLooper().quit();\n        }, delayInMillis);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled cancelWithDelay from NotificationUtils.java into Swift.\n\n        Input:\n\n        Method Name: cancelWithDelay\n\n        Method Code: @SuppressFBWarnings(\"DMI\")\n    public static void cancelWithDelay(final NotificationManager notificationManager, final int notificationId,\n                                       long delayInMillis) {\n\n        HandlerThread thread = new HandlerThread(\n            \"NotificationDelayerThread_\" + new SecureRandom().nextInt(), Process.THREAD_PRIORITY_BACKGROUND);\n        thread.start();\n\n        Handler handler = new Handler(thread.getLooper());\n        handler.postDelayed(() -> {\n            notificationManager.cancel(notificationId);\n            ((HandlerThread) Thread.currentThread()).getLooper().quit();\n        }, delayInMillis);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport Foundation\nimport UserNotifications\n\nfunc cancelWithDelay(notificationCenter: UNUserNotificationCenter, notificationId: String, delayInMillis: TimeInterval) {\n    let queue = DispatchQueue(label: \"NotificationDelayerQueue_\\(Int.random(in: Int.min...Int.max))\", qos: .background)\n    queue.asyncAfter(deadline: .now() + delayInMillis / 1000) {\n        notificationCenter.removePendingNotificationRequests(withIdentifiers: [notificationId])\n    }\n}\n```"
    },
    {
        "method_name": "createUploadNotificationTag",
        "method_code": "public static String createUploadNotificationTag(OCFile file){\n        return createUploadNotificationTag(file.getRemotePath(), file.getStoragePath());\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled createUploadNotificationTag from NotificationUtils.java into Swift.\n\n        Input:\n\n        Method Name: createUploadNotificationTag\n\n        Method Code: public static String createUploadNotificationTag(OCFile file){\n        return createUploadNotificationTag(file.getRemotePath(), file.getStoragePath());\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func createUploadNotificationTag(file: OCFile) -> String {\n    return createUploadNotificationTag(remotePath: file.getRemotePath(), storagePath: file.getStoragePath())\n}\n```"
    },
    {
        "method_name": "createUploadNotificationTag",
        "method_code": "public static String createUploadNotificationTag(String remotePath, String localPath){\n        return remotePath + localPath;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled createUploadNotificationTag from NotificationUtils.java into Swift.\n\n        Input:\n\n        Method Name: createUploadNotificationTag\n\n        Method Code: public static String createUploadNotificationTag(String remotePath, String localPath){\n        return remotePath + localPath;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func createUploadNotificationTag(remotePath: String, localPath: String) -> String {\n    return remotePath + localPath\n}\n```"
    }
]