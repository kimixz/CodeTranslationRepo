[
    {
        "method_name": "getErrorCauseMessage",
        "method_code": "ublic static @NonNull\n    String getErrorCauseMessage(\n        RemoteOperationResult result,\n        RemoteOperation operation,\n        Resources res) {\n\n        String message = getMessageForResultAndOperation(result, operation, res);\n\n        if (TextUtils.isEmpty(message)) {\n            message = getMessageForResult(result, res);\n        }\n\n        if (TextUtils.isEmpty(message)) {\n            message = getMessageForOperation(operation, res);\n        }\n\n        if (message == null) {\n            if (result.isSuccess()) {\n                message = res.getString(R.string.common_ok);\n\n            } else {\n                message = res.getString(R.string.common_error_unknown);\n            }\n        }\n\n        return message;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getErrorCauseMessage from ErrorMessageAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getErrorCauseMessage\n\n        Method Code: ublic static @NonNull\n    String getErrorCauseMessage(\n        RemoteOperationResult result,\n        RemoteOperation operation,\n        Resources res) {\n\n        String message = getMessageForResultAndOperation(result, operation, res);\n\n        if (TextUtils.isEmpty(message)) {\n            message = getMessageForResult(result, res);\n        }\n\n        if (TextUtils.isEmpty(message)) {\n            message = getMessageForOperation(operation, res);\n        }\n\n        if (message == null) {\n            if (result.isSuccess()) {\n                message = res.getString(R.string.common_ok);\n\n            } else {\n                message = res.getString(R.string.common_error_unknown);\n            }\n        }\n\n        return message;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getErrorCauseMessage(result: RemoteOperationResult, operation: RemoteOperation, res: Resources) -> String {\n    var message = getMessageForResultAndOperation(result: result, operation: operation, res: res)\n\n    if message.isEmpty {\n        message = getMessageForResult(result: result, res: res)\n    }\n\n    if message.isEmpty {\n        message = getMessageForOperation(operation: operation, res: res)\n    }\n\n    if message.isEmpty {\n        if result.isSuccess {\n            message = res.getString(R.string.common_ok)\n        } else {\n            message = res.getString(R.string.common_error_unknown)\n        }\n    }\n\n    return message\n}\n```"
    },
    {
        "method_name": "getMessageForResultAndOperation",
        "method_code": "rivate static @Nullable\n    String getMessageForResultAndOperation(\n        RemoteOperationResult result,\n        RemoteOperation operation,\n        Resources res) {\n\n        String message = null;\n\n        if (operation instanceof UploadFileOperation) {\n            message = getMessageForUploadFileOperation(result, (UploadFileOperation) operation, res);\n\n        } else if (operation instanceof DownloadFileOperation) {\n            message = getMessageForDownloadFileOperation(result, (DownloadFileOperation) operation, res);\n\n        } else if (operation instanceof RemoveFileOperation) {\n            message = getMessageForRemoveFileOperation(result, res);\n\n        } else if (operation instanceof RenameFileOperation) {\n            message = getMessageForRenameFileOperation(result, res);\n\n        } else if (operation instanceof SynchronizeFileOperation) {\n            if (!((SynchronizeFileOperation) operation).transferWasRequested()) {\n                message = res.getString(R.string.sync_file_nothing_to_do_msg);\n            }\n\n        } else if (operation instanceof CreateFolderOperation) {\n            message = getMessageForCreateFolderOperation(result, res);\n\n        } else if (operation instanceof CreateShareViaLinkOperation ||\n                operation instanceof CreateShareWithShareeOperation) {\n\n            message = getMessageForCreateShareOperations(result, res);\n\n        } else if (operation instanceof UnshareOperation) {\n\n            message = getMessageForUnshareOperation(result, res);\n\n        } else if (operation instanceof UpdateShareViaLinkOperation ||\n                operation instanceof UpdateSharePermissionsOperation) {\n\n            message = getMessageForUpdateShareOperations(result, res);\n\n        } else if (operation instanceof MoveFileOperation) {\n\n            message = getMessageForMoveFileOperation(result, res);\n\n        } else if (operation instanceof SynchronizeFolderOperation) {\n\n            message = getMessageForSynchronizeFolderOperation(result, (SynchronizeFolderOperation) operation, res);\n\n        } else if (operation instanceof CopyFileOperation) {\n            message = getMessageForCopyFileOperation(result, res);\n        }\n\n        return message;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getMessageForResultAndOperation from ErrorMessageAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getMessageForResultAndOperation\n\n        Method Code: rivate static @Nullable\n    String getMessageForResultAndOperation(\n        RemoteOperationResult result,\n        RemoteOperation operation,\n        Resources res) {\n\n        String message = null;\n\n        if (operation instanceof UploadFileOperation) {\n            message = getMessageForUploadFileOperation(result, (UploadFileOperation) operation, res);\n\n        } else if (operation instanceof DownloadFileOperation) {\n            message = getMessageForDownloadFileOperation(result, (DownloadFileOperation) operation, res);\n\n        } else if (operation instanceof RemoveFileOperation) {\n            message = getMessageForRemoveFileOperation(result, res);\n\n        } else if (operation instanceof RenameFileOperation) {\n            message = getMessageForRenameFileOperation(result, res);\n\n        } else if (operation instanceof SynchronizeFileOperation) {\n            if (!((SynchronizeFileOperation) operation).transferWasRequested()) {\n                message = res.getString(R.string.sync_file_nothing_to_do_msg);\n            }\n\n        } else if (operation instanceof CreateFolderOperation) {\n            message = getMessageForCreateFolderOperation(result, res);\n\n        } else if (operation instanceof CreateShareViaLinkOperation ||\n                operation instanceof CreateShareWithShareeOperation) {\n\n            message = getMessageForCreateShareOperations(result, res);\n\n        } else if (operation instanceof UnshareOperation) {\n\n            message = getMessageForUnshareOperation(result, res);\n\n        } else if (operation instanceof UpdateShareViaLinkOperation ||\n                operation instanceof UpdateSharePermissionsOperation) {\n\n            message = getMessageForUpdateShareOperations(result, res);\n\n        } else if (operation instanceof MoveFileOperation) {\n\n            message = getMessageForMoveFileOperation(result, res);\n\n        } else if (operation instanceof SynchronizeFolderOperation) {\n\n            message = getMessageForSynchronizeFolderOperation(result, (SynchronizeFolderOperation) operation, res);\n\n        } else if (operation instanceof CopyFileOperation) {\n            message = getMessageForCopyFileOperation(result, res);\n        }\n\n        return message;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate static func getMessageForResultAndOperation(\n    result: RemoteOperationResult,\n    operation: RemoteOperation,\n    res: Resources) -> String? {\n\n    var message: String? = nil\n\n    if let uploadOperation = operation as? UploadFileOperation {\n        message = getMessageForUploadFileOperation(result: result, operation: uploadOperation, res: res)\n\n    } else if let downloadOperation = operation as? DownloadFileOperation {\n        message = getMessageForDownloadFileOperation(result: result, operation: downloadOperation, res: res)\n\n    } else if operation is RemoveFileOperation {\n        message = getMessageForRemoveFileOperation(result: result, res: res)\n\n    } else if operation is RenameFileOperation {\n        message = getMessageForRenameFileOperation(result: result, res: res)\n\n    } else if let syncOperation = operation as? SynchronizeFileOperation {\n        if !syncOperation.transferWasRequested() {\n            message = res.getString(R.string.sync_file_nothing_to_do_msg)\n        }\n\n    } else if operation is CreateFolderOperation {\n        message = getMessageForCreateFolderOperation(result: result, res: res)\n\n    } else if operation is CreateShareViaLinkOperation || operation is CreateShareWithShareeOperation {\n        message = getMessageForCreateShareOperations(result: result, res: res)\n\n    } else if operation is UnshareOperation {\n        message = getMessageForUnshareOperation(result: result, res: res)\n\n    } else if operation is UpdateShareViaLinkOperation || operation is UpdateSharePermissionsOperation {\n        message = getMessageForUpdateShareOperations(result: result, res: res)\n\n    } else if operation is MoveFileOperation {\n        message = getMessageForMoveFileOperation(result: result, res: res)\n\n    } else if let syncFolderOperation = operation as? SynchronizeFolderOperation {\n        message = getMessageForSynchronizeFolderOperation(result: result, operation: syncFolderOperation, res: res)\n\n    } else if operation is CopyFileOperation {\n        message = getMessageForCopyFileOperation(result: result, res: res)\n    }\n\n    return message\n}\n```"
    },
    {
        "method_name": "getMessageForSynchronizeFolderOperation",
        "method_code": "rivate static @Nullable\n    String getMessageForSynchronizeFolderOperation(\n        RemoteOperationResult result,\n        SynchronizeFolderOperation operation,\n        Resources res) {\n\n        if (!result.isSuccess() && result.getCode() == ResultCode.FILE_NOT_FOUND) {\n            return String.format(\n                res.getString(R.string.sync_current_folder_was_removed),\n                new File(operation.getFolderPath()).getName()\n                                );\n        }\n        return null;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getMessageForSynchronizeFolderOperation from ErrorMessageAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getMessageForSynchronizeFolderOperation\n\n        Method Code: rivate static @Nullable\n    String getMessageForSynchronizeFolderOperation(\n        RemoteOperationResult result,\n        SynchronizeFolderOperation operation,\n        Resources res) {\n\n        if (!result.isSuccess() && result.getCode() == ResultCode.FILE_NOT_FOUND) {\n            return String.format(\n                res.getString(R.string.sync_current_folder_was_removed),\n                new File(operation.getFolderPath()).getName()\n                                );\n        }\n        return null;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate static func getMessageForSynchronizeFolderOperation(result: RemoteOperationResult, operation: SynchronizeFolderOperation, res: Resources) -> String? {\n    if !result.isSuccess() && result.getCode() == .fileNotFound {\n        return String(format: res.getString(R.string.sync_current_folder_was_removed), URL(fileURLWithPath: operation.getFolderPath()).lastPathComponent)\n    }\n    return nil\n}\n```"
    },
    {
        "method_name": "getMessageForMoveFileOperation",
        "method_code": "rivate static @Nullable\n    String getMessageForMoveFileOperation(RemoteOperationResult result, Resources res) {\n        if (result.getCode() == ResultCode.FILE_NOT_FOUND) {\n            return res.getString(R.string.move_file_not_found);\n        } else if (result.getCode() == ResultCode.INVALID_MOVE_INTO_DESCENDANT) {\n            return res.getString(R.string.move_file_invalid_into_descendent);\n\n        } else if (result.getCode() == ResultCode.INVALID_OVERWRITE) {\n            return res.getString(R.string.move_file_invalid_overwrite);\n\n        } else if (result.getCode() == ResultCode.FORBIDDEN) {\n            return String.format(res.getString(R.string.forbidden_permissions),\n                                 res.getString(R.string.forbidden_permissions_move));\n\n        } else if (result.getCode() == ResultCode.INVALID_CHARACTER_DETECT_IN_SERVER) {\n            return res.getString(R.string.filename_forbidden_charaters_from_server);\n        }\n        return null;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getMessageForMoveFileOperation from ErrorMessageAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getMessageForMoveFileOperation\n\n        Method Code: rivate static @Nullable\n    String getMessageForMoveFileOperation(RemoteOperationResult result, Resources res) {\n        if (result.getCode() == ResultCode.FILE_NOT_FOUND) {\n            return res.getString(R.string.move_file_not_found);\n        } else if (result.getCode() == ResultCode.INVALID_MOVE_INTO_DESCENDANT) {\n            return res.getString(R.string.move_file_invalid_into_descendent);\n\n        } else if (result.getCode() == ResultCode.INVALID_OVERWRITE) {\n            return res.getString(R.string.move_file_invalid_overwrite);\n\n        } else if (result.getCode() == ResultCode.FORBIDDEN) {\n            return String.format(res.getString(R.string.forbidden_permissions),\n                                 res.getString(R.string.forbidden_permissions_move));\n\n        } else if (result.getCode() == ResultCode.INVALID_CHARACTER_DETECT_IN_SERVER) {\n            return res.getString(R.string.filename_forbidden_charaters_from_server);\n        }\n        return null;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate static func getMessageForMoveFileOperation(result: RemoteOperationResult, res: Resources) -> String? {\n    switch result.code {\n    case .fileNotFound:\n        return res.getString(R.string.move_file_not_found)\n    case .invalidMoveIntoDescendant:\n        return res.getString(R.string.move_file_invalid_into_descendent)\n    case .invalidOverwrite:\n        return res.getString(R.string.move_file_invalid_overwrite)\n    case .forbidden:\n        return String(format: res.getString(R.string.forbidden_permissions),\n                      res.getString(R.string.forbidden_permissions_move))\n    case .invalidCharacterDetectInServer:\n        return res.getString(R.string.filename_forbidden_charaters_from_server)\n    default:\n        return nil\n    }\n}\n```"
    },
    {
        "method_name": "getMessageForUpdateShareOperations",
        "method_code": "rivate static @Nullable\n    String getMessageForUpdateShareOperations(RemoteOperationResult result, Resources res) {\n        if (!TextUtils.isEmpty(result.getMessage())) {\n            return result.getMessage();     // share API sends its own error messages\n        } else if (result.getCode() == ResultCode.SHARE_NOT_FOUND) {\n            return res.getString(R.string.update_link_file_no_exist);\n        } else if (result.getCode() == ResultCode.SHARE_FORBIDDEN) {\n            // Error --> No permissions\n            return String.format(res.getString(R.string.forbidden_permissions),\n                                 res.getString(R.string.update_link_forbidden_permissions));\n        }\n        return null;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getMessageForUpdateShareOperations from ErrorMessageAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getMessageForUpdateShareOperations\n\n        Method Code: rivate static @Nullable\n    String getMessageForUpdateShareOperations(RemoteOperationResult result, Resources res) {\n        if (!TextUtils.isEmpty(result.getMessage())) {\n            return result.getMessage();     // share API sends its own error messages\n        } else if (result.getCode() == ResultCode.SHARE_NOT_FOUND) {\n            return res.getString(R.string.update_link_file_no_exist);\n        } else if (result.getCode() == ResultCode.SHARE_FORBIDDEN) {\n            // Error --> No permissions\n            return String.format(res.getString(R.string.forbidden_permissions),\n                                 res.getString(R.string.update_link_forbidden_permissions));\n        }\n        return null;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate static func getMessageForUpdateShareOperations(result: RemoteOperationResult, res: Resources) -> String? {\n    if !result.getMessage().isEmpty {\n        return result.getMessage() // share API sends its own error messages\n    } else if result.getCode() == .SHARE_NOT_FOUND {\n        return res.getString(R.string.update_link_file_no_exist)\n    } else if result.getCode() == .SHARE_FORBIDDEN {\n        // Error --> No permissions\n        return String(format: res.getString(R.string.forbidden_permissions),\n                      res.getString(R.string.update_link_forbidden_permissions))\n    }\n    return nil\n}\n```"
    },
    {
        "method_name": "getMessageForUnshareOperation",
        "method_code": "rivate static @Nullable\n    String getMessageForUnshareOperation(RemoteOperationResult result, Resources res) {\n        if (!TextUtils.isEmpty(result.getMessage())) {\n            return result.getMessage();     // share API sends its own error messages\n        } else if (result.getCode() == ResultCode.SHARE_NOT_FOUND) {\n            return res.getString(R.string.unshare_link_file_no_exist);\n        } else if (result.getCode() == ResultCode.SHARE_FORBIDDEN) {\n            // Error --> No permissions\n            return String.format(res.getString(R.string.forbidden_permissions),\n                                 res.getString(R.string.unshare_link_forbidden_permissions));\n        }\n        return null;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getMessageForUnshareOperation from ErrorMessageAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getMessageForUnshareOperation\n\n        Method Code: rivate static @Nullable\n    String getMessageForUnshareOperation(RemoteOperationResult result, Resources res) {\n        if (!TextUtils.isEmpty(result.getMessage())) {\n            return result.getMessage();     // share API sends its own error messages\n        } else if (result.getCode() == ResultCode.SHARE_NOT_FOUND) {\n            return res.getString(R.string.unshare_link_file_no_exist);\n        } else if (result.getCode() == ResultCode.SHARE_FORBIDDEN) {\n            // Error --> No permissions\n            return String.format(res.getString(R.string.forbidden_permissions),\n                                 res.getString(R.string.unshare_link_forbidden_permissions));\n        }\n        return null;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate static func getMessageForUnshareOperation(result: RemoteOperationResult, res: Resources) -> String? {\n    if !result.getMessage().isEmpty {\n        return result.getMessage() // share API sends its own error messages\n    } else if result.getCode() == .SHARE_NOT_FOUND {\n        return res.getString(R.string.unshare_link_file_no_exist)\n    } else if result.getCode() == .SHARE_FORBIDDEN {\n        // Error --> No permissions\n        return String(format: res.getString(R.string.forbidden_permissions),\n                      res.getString(R.string.unshare_link_forbidden_permissions))\n    }\n    return nil\n}\n```"
    },
    {
        "method_name": "getMessageForCopyFileOperation",
        "method_code": "rivate static @Nullable\n    String getMessageForCopyFileOperation(RemoteOperationResult result, Resources res) {\n        if (result.getCode() == ResultCode.FILE_NOT_FOUND) {\n            return res.getString(R.string.copy_file_not_found);\n\n        } else if (result.getCode() == ResultCode.INVALID_COPY_INTO_DESCENDANT) {\n            return res.getString(R.string.copy_file_invalid_into_descendent);\n\n        } else if (result.getCode() == ResultCode.INVALID_OVERWRITE) {\n            return res.getString(R.string.copy_file_invalid_overwrite);\n\n        } else if (result.getCode() == ResultCode.FORBIDDEN) {\n            return String.format(res.getString(R.string.forbidden_permissions),\n                                 res.getString(R.string.forbidden_permissions_copy));\n\n        }\n        return null;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getMessageForCopyFileOperation from ErrorMessageAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getMessageForCopyFileOperation\n\n        Method Code: rivate static @Nullable\n    String getMessageForCopyFileOperation(RemoteOperationResult result, Resources res) {\n        if (result.getCode() == ResultCode.FILE_NOT_FOUND) {\n            return res.getString(R.string.copy_file_not_found);\n\n        } else if (result.getCode() == ResultCode.INVALID_COPY_INTO_DESCENDANT) {\n            return res.getString(R.string.copy_file_invalid_into_descendent);\n\n        } else if (result.getCode() == ResultCode.INVALID_OVERWRITE) {\n            return res.getString(R.string.copy_file_invalid_overwrite);\n\n        } else if (result.getCode() == ResultCode.FORBIDDEN) {\n            return String.format(res.getString(R.string.forbidden_permissions),\n                                 res.getString(R.string.forbidden_permissions_copy));\n\n        }\n        return null;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate static func getMessageForCopyFileOperation(result: RemoteOperationResult, res: Resources) -> String? {\n    if result.getCode() == .fileNotFound {\n        return res.getString(R.string.copy_file_not_found)\n    } else if result.getCode() == .invalidCopyIntoDescendant {\n        return res.getString(R.string.copy_file_invalid_into_descendent)\n    } else if result.getCode() == .invalidOverwrite {\n        return res.getString(R.string.copy_file_invalid_overwrite)\n    } else if result.getCode() == .forbidden {\n        return String(format: res.getString(R.string.forbidden_permissions),\n                      res.getString(R.string.forbidden_permissions_copy))\n    }\n    return nil\n}\n```"
    },
    {
        "method_name": "getMessageForCreateShareOperations",
        "method_code": "rivate static @Nullable\n    String getMessageForCreateShareOperations(RemoteOperationResult result, Resources res) {\n        if (!TextUtils.isEmpty(result.getMessage())) {\n            return result.getMessage();     // share API sends its own error messages\n        } else if (result.getCode() == ResultCode.SHARE_NOT_FOUND) {\n            return res.getString(R.string.share_link_file_no_exist);\n        } else if (result.getCode() == ResultCode.SHARE_FORBIDDEN) {\n            // Error --> No permissions\n            return String.format(res.getString(R.string.forbidden_permissions),\n                                 res.getString(R.string.share_link_forbidden_permissions));\n        }\n        return null;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getMessageForCreateShareOperations from ErrorMessageAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getMessageForCreateShareOperations\n\n        Method Code: rivate static @Nullable\n    String getMessageForCreateShareOperations(RemoteOperationResult result, Resources res) {\n        if (!TextUtils.isEmpty(result.getMessage())) {\n            return result.getMessage();     // share API sends its own error messages\n        } else if (result.getCode() == ResultCode.SHARE_NOT_FOUND) {\n            return res.getString(R.string.share_link_file_no_exist);\n        } else if (result.getCode() == ResultCode.SHARE_FORBIDDEN) {\n            // Error --> No permissions\n            return String.format(res.getString(R.string.forbidden_permissions),\n                                 res.getString(R.string.share_link_forbidden_permissions));\n        }\n        return null;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate static func getMessageForCreateShareOperations(result: RemoteOperationResult, res: Resources) -> String? {\n    if !result.getMessage().isEmpty {\n        return result.getMessage() // share API sends its own error messages\n    } else if result.getCode() == .SHARE_NOT_FOUND {\n        return res.getString(R.string.share_link_file_no_exist)\n    } else if result.getCode() == .SHARE_FORBIDDEN {\n        // Error --> No permissions\n        return String(format: res.getString(R.string.forbidden_permissions),\n                      res.getString(R.string.share_link_forbidden_permissions))\n    }\n    return nil\n}\n```"
    },
    {
        "method_name": "getMessageForCreateFolderOperation",
        "method_code": "rivate static @Nullable\n    String getMessageForCreateFolderOperation(RemoteOperationResult result, Resources res) {\n        if (result.getCode() == ResultCode.INVALID_CHARACTER_IN_NAME) {\n            return res.getString(R.string.filename_forbidden_characters);\n\n        } else if (result.getCode() == ResultCode.FORBIDDEN) {\n            return String.format(res.getString(R.string.forbidden_permissions),\n                                 res.getString(R.string.forbidden_permissions_create));\n\n        } else if (result.getCode() == ResultCode.INVALID_CHARACTER_DETECT_IN_SERVER) {\n            return res.getString(R.string.filename_forbidden_charaters_from_server);\n\n        }\n        return null;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getMessageForCreateFolderOperation from ErrorMessageAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getMessageForCreateFolderOperation\n\n        Method Code: rivate static @Nullable\n    String getMessageForCreateFolderOperation(RemoteOperationResult result, Resources res) {\n        if (result.getCode() == ResultCode.INVALID_CHARACTER_IN_NAME) {\n            return res.getString(R.string.filename_forbidden_characters);\n\n        } else if (result.getCode() == ResultCode.FORBIDDEN) {\n            return String.format(res.getString(R.string.forbidden_permissions),\n                                 res.getString(R.string.forbidden_permissions_create));\n\n        } else if (result.getCode() == ResultCode.INVALID_CHARACTER_DETECT_IN_SERVER) {\n            return res.getString(R.string.filename_forbidden_charaters_from_server);\n\n        }\n        return null;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate static func getMessageForCreateFolderOperation(result: RemoteOperationResult, res: Resources) -> String? {\n    if result.getCode() == .invalidCharacterInName {\n        return res.getString(R.string.filename_forbidden_characters)\n    } else if result.getCode() == .forbidden {\n        return String(format: res.getString(R.string.forbidden_permissions),\n                      res.getString(R.string.forbidden_permissions_create))\n    } else if result.getCode() == .invalidCharacterDetectInServer {\n        return res.getString(R.string.filename_forbidden_charaters_from_server)\n    }\n    return nil\n}\n```"
    },
    {
        "method_name": "getMessageForRenameFileOperation",
        "method_code": "rivate static @Nullable\n    String getMessageForRenameFileOperation(RemoteOperationResult result, Resources res) {\n        if (result.getCode() == ResultCode.INVALID_LOCAL_FILE_NAME) {\n            return res.getString(R.string.rename_local_fail_msg);\n\n        } else if (result.getCode() == ResultCode.FORBIDDEN) {\n            // Error --> No permissions\n            return String.format(res.getString(R.string.forbidden_permissions),\n                                 res.getString(R.string.forbidden_permissions_rename));\n\n        } else if (result.getCode() == ResultCode.INVALID_CHARACTER_IN_NAME) {\n            return res.getString(R.string.filename_forbidden_characters);\n\n        } else if (result.getCode() == ResultCode.INVALID_CHARACTER_DETECT_IN_SERVER) {\n            return res.getString(R.string.filename_forbidden_charaters_from_server);\n\n        }\n\n        return null;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getMessageForRenameFileOperation from ErrorMessageAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getMessageForRenameFileOperation\n\n        Method Code: rivate static @Nullable\n    String getMessageForRenameFileOperation(RemoteOperationResult result, Resources res) {\n        if (result.getCode() == ResultCode.INVALID_LOCAL_FILE_NAME) {\n            return res.getString(R.string.rename_local_fail_msg);\n\n        } else if (result.getCode() == ResultCode.FORBIDDEN) {\n            // Error --> No permissions\n            return String.format(res.getString(R.string.forbidden_permissions),\n                                 res.getString(R.string.forbidden_permissions_rename));\n\n        } else if (result.getCode() == ResultCode.INVALID_CHARACTER_IN_NAME) {\n            return res.getString(R.string.filename_forbidden_characters);\n\n        } else if (result.getCode() == ResultCode.INVALID_CHARACTER_DETECT_IN_SERVER) {\n            return res.getString(R.string.filename_forbidden_charaters_from_server);\n\n        }\n\n        return null;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate static func getMessageForRenameFileOperation(result: RemoteOperationResult, res: Resources) -> String? {\n    if result.getCode() == .invalidLocalFileName {\n        return res.getString(R.string.rename_local_fail_msg)\n        \n    } else if result.getCode() == .forbidden {\n        // Error --> No permissions\n        return String(format: res.getString(R.string.forbidden_permissions),\n                      res.getString(R.string.forbidden_permissions_rename))\n        \n    } else if result.getCode() == .invalidCharacterInName {\n        return res.getString(R.string.filename_forbidden_characters)\n        \n    } else if result.getCode() == .invalidCharacterDetectInServer {\n        return res.getString(R.string.filename_forbidden_charaters_from_server)\n    }\n    \n    return nil\n}\n```"
    },
    {
        "method_name": "getMessageForRemoveFileOperation",
        "method_code": "rivate static @Nullable\n    String getMessageForRemoveFileOperation(RemoteOperationResult result, Resources res) {\n        if (result.isSuccess()) {\n            return res.getString(R.string.remove_success_msg);\n\n        } else {\n            if (result.getCode() == ResultCode.FORBIDDEN) {\n                return String.format(res.getString(R.string.forbidden_permissions), res.getString(R.string.forbidden_permissions_delete));\n            } else if (result.getCode() == ResultCode.LOCKED) {\n                return res.getString(R.string.preview_media_unhandled_http_code_message);\n            }\n        }\n\n        return null;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getMessageForRemoveFileOperation from ErrorMessageAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getMessageForRemoveFileOperation\n\n        Method Code: rivate static @Nullable\n    String getMessageForRemoveFileOperation(RemoteOperationResult result, Resources res) {\n        if (result.isSuccess()) {\n            return res.getString(R.string.remove_success_msg);\n\n        } else {\n            if (result.getCode() == ResultCode.FORBIDDEN) {\n                return String.format(res.getString(R.string.forbidden_permissions), res.getString(R.string.forbidden_permissions_delete));\n            } else if (result.getCode() == ResultCode.LOCKED) {\n                return res.getString(R.string.preview_media_unhandled_http_code_message);\n            }\n        }\n\n        return null;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate static func getMessageForRemoveFileOperation(result: RemoteOperationResult, res: Resources) -> String? {\n    if result.isSuccess() {\n        return res.getString(R.string.remove_success_msg)\n    } else {\n        if result.getCode() == ResultCode.FORBIDDEN {\n            return String(format: res.getString(R.string.forbidden_permissions), res.getString(R.string.forbidden_permissions_delete))\n        } else if result.getCode() == ResultCode.LOCKED {\n            return res.getString(R.string.preview_media_unhandled_http_code_message)\n        }\n    }\n    return nil\n}\n```"
    },
    {
        "method_name": "getMessageForDownloadFileOperation",
        "method_code": "rivate static @Nullable\n    String getMessageForDownloadFileOperation(\n        RemoteOperationResult result,\n        DownloadFileOperation operation,\n        Resources res) {\n\n        if (result.isSuccess()) {\n            return String.format(\n                res.getString(R.string.downloader_download_succeeded_content),\n                new File(operation.getSavePath()).getName());\n\n        } else {\n            switch (result.getCode()) {\n                case FILE_NOT_FOUND:\n                    return res.getString(R.string.downloader_download_file_not_found);\n                case CANNOT_CREATE_FILE:\n                    return res.getString(R.string.download_cannot_create_file);\n                case INVALID_LOCAL_FILE_NAME:\n                    return res.getString(R.string.download_download_invalid_local_file_name);\n            }\n        }\n        return null;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getMessageForDownloadFileOperation from ErrorMessageAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getMessageForDownloadFileOperation\n\n        Method Code: rivate static @Nullable\n    String getMessageForDownloadFileOperation(\n        RemoteOperationResult result,\n        DownloadFileOperation operation,\n        Resources res) {\n\n        if (result.isSuccess()) {\n            return String.format(\n                res.getString(R.string.downloader_download_succeeded_content),\n                new File(operation.getSavePath()).getName());\n\n        } else {\n            switch (result.getCode()) {\n                case FILE_NOT_FOUND:\n                    return res.getString(R.string.downloader_download_file_not_found);\n                case CANNOT_CREATE_FILE:\n                    return res.getString(R.string.download_cannot_create_file);\n                case INVALID_LOCAL_FILE_NAME:\n                    return res.getString(R.string.download_download_invalid_local_file_name);\n            }\n        }\n        return null;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate static func getMessageForDownloadFileOperation(result: RemoteOperationResult, operation: DownloadFileOperation, res: Resources) -> String? {\n    if result.isSuccess() {\n        return String(format: res.getString(R.string.downloader_download_succeeded_content), URL(fileURLWithPath: operation.getSavePath()).lastPathComponent)\n    } else {\n        switch result.getCode() {\n        case .FILE_NOT_FOUND:\n            return res.getString(R.string.downloader_download_file_not_found)\n        case .CANNOT_CREATE_FILE:\n            return res.getString(R.string.download_cannot_create_file)\n        case .INVALID_LOCAL_FILE_NAME:\n            return res.getString(R.string.download_download_invalid_local_file_name)\n        default:\n            return nil\n        }\n    }\n}\n```"
    },
    {
        "method_name": "getMessageForUploadFileOperation",
        "method_code": "rivate static @Nullable\n    String getMessageForUploadFileOperation(\n        RemoteOperationResult result,\n        UploadFileOperation operation,\n        Resources res) {\n\n        if (result.isSuccess()) {\n            return String.format(\n                res.getString(R.string.uploader_upload_succeeded_content_single),\n                operation.getFileName());\n        } else {\n\n            if (result.getCode() == ResultCode.LOCAL_STORAGE_FULL\n                    || result.getCode() == ResultCode.LOCAL_STORAGE_NOT_COPIED) {\n                return String.format(\n                        res.getString(R.string.error__upload__local_file_not_copied),\n                        operation.getFileName(),\n                        res.getString(R.string.app_name));\n\n            } else if (result.getCode() == ResultCode.FORBIDDEN) {\n                return String.format(res.getString(R.string.forbidden_permissions),\n                        res.getString(R.string.uploader_upload_forbidden_permissions));\n\n            } else if (result.getCode() == ResultCode.INVALID_CHARACTER_DETECT_IN_SERVER) {\n                return res.getString(R.string.filename_forbidden_charaters_from_server);\n\n            } else if(result.getCode() == ResultCode.SYNC_CONFLICT) {\n                return String.format(res.getString(R.string.uploader_upload_failed_sync_conflict_error_content),\n                                        operation.getFileName());\n            }\n        }\n\n        return null;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getMessageForUploadFileOperation from ErrorMessageAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getMessageForUploadFileOperation\n\n        Method Code: rivate static @Nullable\n    String getMessageForUploadFileOperation(\n        RemoteOperationResult result,\n        UploadFileOperation operation,\n        Resources res) {\n\n        if (result.isSuccess()) {\n            return String.format(\n                res.getString(R.string.uploader_upload_succeeded_content_single),\n                operation.getFileName());\n        } else {\n\n            if (result.getCode() == ResultCode.LOCAL_STORAGE_FULL\n                    || result.getCode() == ResultCode.LOCAL_STORAGE_NOT_COPIED) {\n                return String.format(\n                        res.getString(R.string.error__upload__local_file_not_copied),\n                        operation.getFileName(),\n                        res.getString(R.string.app_name));\n\n            } else if (result.getCode() == ResultCode.FORBIDDEN) {\n                return String.format(res.getString(R.string.forbidden_permissions),\n                        res.getString(R.string.uploader_upload_forbidden_permissions));\n\n            } else if (result.getCode() == ResultCode.INVALID_CHARACTER_DETECT_IN_SERVER) {\n                return res.getString(R.string.filename_forbidden_charaters_from_server);\n\n            } else if(result.getCode() == ResultCode.SYNC_CONFLICT) {\n                return String.format(res.getString(R.string.uploader_upload_failed_sync_conflict_error_content),\n                                        operation.getFileName());\n            }\n        }\n\n        return null;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate static func getMessageForUploadFileOperation(result: RemoteOperationResult, operation: UploadFileOperation, res: Resources) -> String? {\n    if result.isSuccess() {\n        return String(format: res.getString(R.string.uploader_upload_succeeded_content_single), operation.getFileName())\n    } else {\n        switch result.getCode() {\n        case .LOCAL_STORAGE_FULL, .LOCAL_STORAGE_NOT_COPIED:\n            return String(format: res.getString(R.string.error__upload__local_file_not_copied), operation.getFileName(), res.getString(R.string.app_name))\n        case .FORBIDDEN:\n            return String(format: res.getString(R.string.forbidden_permissions), res.getString(R.string.uploader_upload_forbidden_permissions))\n        case .INVALID_CHARACTER_DETECT_IN_SERVER:\n            return res.getString(R.string.filename_forbidden_charaters_from_server)\n        case .SYNC_CONFLICT:\n            return String(format: res.getString(R.string.uploader_upload_failed_sync_conflict_error_content), operation.getFileName())\n        default:\n            return nil\n        }\n    }\n}\n```"
    },
    {
        "method_name": "getMessageForResult",
        "method_code": "rivate static @Nullable\n    String getMessageForResult(RemoteOperationResult result, Resources res) {\n        String message = null;\n\n        if (!result.isSuccess()) {\n            if (result.getCode() == ResultCode.WRONG_CONNECTION) {\n                message = res.getString(R.string.network_error_socket_exception);\n\n            } else if (result.getCode() == ResultCode.TIMEOUT) {\n                message = res.getString(R.string.network_error_socket_exception);\n\n                if (result.getException() instanceof SocketTimeoutException) {\n                    message = res.getString(R.string.network_error_socket_timeout_exception);\n\n                } else if (result.getException() instanceof ConnectTimeoutException) {\n                    message = res.getString(R.string.network_error_connect_timeout_exception);\n                }\n\n            } else if (result.getCode() == ResultCode.HOST_NOT_AVAILABLE) {\n                message = res.getString(R.string.network_host_not_available);\n\n            } else if (result.getCode() == ResultCode.MAINTENANCE_MODE) {\n                message = res.getString(R.string.maintenance_mode);\n\n            } else if (result.getCode() == ResultCode.SSL_RECOVERABLE_PEER_UNVERIFIED) {\n                message = res.getString(R.string.uploads_view_upload_status_failed_ssl_certificate_not_trusted);\n\n            } else if (result.getCode() == ResultCode.BAD_OC_VERSION) {\n                message = res.getString(R.string.auth_bad_oc_version_title);\n\n            } else if (result.getCode() == ResultCode.INCORRECT_ADDRESS) {\n                message = res.getString(R.string.auth_incorrect_address_title);\n\n            } else if (result.getCode() == ResultCode.SSL_ERROR) {\n                message = res.getString(R.string.auth_ssl_general_error_title);\n\n            } else if (result.getCode() == ResultCode.UNAUTHORIZED) {\n                message = res.getString(R.string.auth_unauthorized);\n\n            } else if (result.getCode() == ResultCode.INSTANCE_NOT_CONFIGURED) {\n                message = res.getString(R.string.auth_not_configured_title);\n\n            } else if (result.getCode() == ResultCode.FILE_NOT_FOUND) {\n                message = res.getString(R.string.file_not_found);\n\n            } else if (result.getCode() == ResultCode.OAUTH2_ERROR) {\n                message = res.getString(R.string.auth_oauth_error);\n\n            } else if (result.getCode() == ResultCode.OAUTH2_ERROR_ACCESS_DENIED) {\n                message = res.getString(R.string.auth_oauth_error_access_denied);\n\n            } else if (result.getCode() == ResultCode.ACCOUNT_NOT_NEW) {\n                message = res.getString(R.string.auth_account_not_new);\n\n            } else if (result.getCode() == ResultCode.ACCOUNT_NOT_THE_SAME) {\n                message = res.getString(R.string.auth_account_not_the_same);\n\n            } else if (result.getCode() == ResultCode.QUOTA_EXCEEDED) {\n                message = res.getString(R.string.upload_quota_exceeded);\n\n            }\n\n            else if (!TextUtils.isEmpty(result.getHttpPhrase())) {\n                // last chance: error message from server\n                message = result.getHttpPhrase();\n            }\n        }\n\n        return message;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getMessageForResult from ErrorMessageAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getMessageForResult\n\n        Method Code: rivate static @Nullable\n    String getMessageForResult(RemoteOperationResult result, Resources res) {\n        String message = null;\n\n        if (!result.isSuccess()) {\n            if (result.getCode() == ResultCode.WRONG_CONNECTION) {\n                message = res.getString(R.string.network_error_socket_exception);\n\n            } else if (result.getCode() == ResultCode.TIMEOUT) {\n                message = res.getString(R.string.network_error_socket_exception);\n\n                if (result.getException() instanceof SocketTimeoutException) {\n                    message = res.getString(R.string.network_error_socket_timeout_exception);\n\n                } else if (result.getException() instanceof ConnectTimeoutException) {\n                    message = res.getString(R.string.network_error_connect_timeout_exception);\n                }\n\n            } else if (result.getCode() == ResultCode.HOST_NOT_AVAILABLE) {\n                message = res.getString(R.string.network_host_not_available);\n\n            } else if (result.getCode() == ResultCode.MAINTENANCE_MODE) {\n                message = res.getString(R.string.maintenance_mode);\n\n            } else if (result.getCode() == ResultCode.SSL_RECOVERABLE_PEER_UNVERIFIED) {\n                message = res.getString(R.string.uploads_view_upload_status_failed_ssl_certificate_not_trusted);\n\n            } else if (result.getCode() == ResultCode.BAD_OC_VERSION) {\n                message = res.getString(R.string.auth_bad_oc_version_title);\n\n            } else if (result.getCode() == ResultCode.INCORRECT_ADDRESS) {\n                message = res.getString(R.string.auth_incorrect_address_title);\n\n            } else if (result.getCode() == ResultCode.SSL_ERROR) {\n                message = res.getString(R.string.auth_ssl_general_error_title);\n\n            } else if (result.getCode() == ResultCode.UNAUTHORIZED) {\n                message = res.getString(R.string.auth_unauthorized);\n\n            } else if (result.getCode() == ResultCode.INSTANCE_NOT_CONFIGURED) {\n                message = res.getString(R.string.auth_not_configured_title);\n\n            } else if (result.getCode() == ResultCode.FILE_NOT_FOUND) {\n                message = res.getString(R.string.file_not_found);\n\n            } else if (result.getCode() == ResultCode.OAUTH2_ERROR) {\n                message = res.getString(R.string.auth_oauth_error);\n\n            } else if (result.getCode() == ResultCode.OAUTH2_ERROR_ACCESS_DENIED) {\n                message = res.getString(R.string.auth_oauth_error_access_denied);\n\n            } else if (result.getCode() == ResultCode.ACCOUNT_NOT_NEW) {\n                message = res.getString(R.string.auth_account_not_new);\n\n            } else if (result.getCode() == ResultCode.ACCOUNT_NOT_THE_SAME) {\n                message = res.getString(R.string.auth_account_not_the_same);\n\n            } else if (result.getCode() == ResultCode.QUOTA_EXCEEDED) {\n                message = res.getString(R.string.upload_quota_exceeded);\n\n            }\n\n            else if (!TextUtils.isEmpty(result.getHttpPhrase())) {\n                // last chance: error message from server\n                message = result.getHttpPhrase();\n            }\n        }\n\n        return message;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate static func getMessageForResult(result: RemoteOperationResult, res: Resources) -> String? {\n    var message: String? = nil\n\n    if !result.isSuccess() {\n        switch result.getCode() {\n        case .WRONG_CONNECTION:\n            message = res.getString(R.string.network_error_socket_exception)\n            \n        case .TIMEOUT:\n            message = res.getString(R.string.network_error_socket_exception)\n            if result.getException() is SocketTimeoutException {\n                message = res.getString(R.string.network_error_socket_timeout_exception)\n            } else if result.getException() is ConnectTimeoutException {\n                message = res.getString(R.string.network_error_connect_timeout_exception)\n            }\n            \n        case .HOST_NOT_AVAILABLE:\n            message = res.getString(R.string.network_host_not_available)\n            \n        case .MAINTENANCE_MODE:\n            message = res.getString(R.string.maintenance_mode)\n            \n        case .SSL_RECOVERABLE_PEER_UNVERIFIED:\n            message = res.getString(R.string.uploads_view_upload_status_failed_ssl_certificate_not_trusted)\n            \n        case .BAD_OC_VERSION:\n            message = res.getString(R.string.auth_bad_oc_version_title)\n            \n        case .INCORRECT_ADDRESS:\n            message = res.getString(R.string.auth_incorrect_address_title)\n            \n        case .SSL_ERROR:\n            message = res.getString(R.string.auth_ssl_general_error_title)\n            \n        case .UNAUTHORIZED:\n            message = res.getString(R.string.auth_unauthorized)\n            \n        case .INSTANCE_NOT_CONFIGURED:\n            message = res.getString(R.string.auth_not_configured_title)\n            \n        case .FILE_NOT_FOUND:\n            message = res.getString(R.string.file_not_found)\n            \n        case .OAUTH2_ERROR:\n            message = res.getString(R.string.auth_oauth_error)\n            \n        case .OAUTH2_ERROR_ACCESS_DENIED:\n            message = res.getString(R.string.auth_oauth_error_access_denied)\n            \n        case .ACCOUNT_NOT_NEW:\n            message = res.getString(R.string.auth_account_not_new)\n            \n        case .ACCOUNT_NOT_THE_SAME:\n            message = res.getString(R.string.auth_account_not_the_same)\n            \n        case .QUOTA_EXCEEDED:\n            message = res.getString(R.string.upload_quota_exceeded)\n            \n        default:\n            break\n        }\n        \n        if message == nil, !result.getHttpPhrase().isEmpty {\n            message = result.getHttpPhrase()\n        }\n    }\n\n    return message\n}\n```"
    },
    {
        "method_name": "getMessageForOperation",
        "method_code": "rivate static @Nullable\n    String getMessageForOperation(RemoteOperation operation, Resources res) {\n        String message = null;\n\n        if (operation instanceof UploadFileOperation) {\n            message = String.format(\n                    res.getString(R.string.uploader_upload_failed_content_single),\n                    ((UploadFileOperation) operation).getFileName());\n\n        } else if (operation instanceof DownloadFileOperation) {\n            message = String.format(\n                    res.getString(R.string.downloader_download_failed_content),\n                    new File(((DownloadFileOperation) operation).getSavePath()).getName()\n            );\n\n        } else if (operation instanceof RemoveFileOperation) {\n            message = res.getString(R.string.remove_fail_msg);\n\n        } else if (operation instanceof RenameFileOperation) {\n            message = res.getString(R.string.rename_server_fail_msg);\n\n        } else if (operation instanceof CreateFolderOperation) {\n            message = res.getString(R.string.create_dir_fail_msg);\n\n        } else if (operation instanceof CreateShareViaLinkOperation ||\n                operation instanceof CreateShareWithShareeOperation\n                ) {\n            message = res.getString(R.string.share_link_file_error);\n\n        } else if (operation instanceof UnshareOperation) {\n            message = res.getString(R.string.unshare_link_file_error);\n\n        } else if (operation instanceof UpdateShareViaLinkOperation ||\n                operation instanceof UpdateSharePermissionsOperation\n                ) {\n            message = res.getString(R.string.update_link_file_error);\n\n        } else if (operation instanceof MoveFileOperation) {\n            message = res.getString(R.string.move_file_error);\n\n        } else if (operation instanceof SynchronizeFolderOperation) {\n            String folderPathName = new File(\n                    ((SynchronizeFolderOperation) operation).getFolderPath()\n            ).getName();\n            message = String.format(res.getString(R.string.sync_folder_failed_content), folderPathName);\n\n        } else if (operation instanceof CopyFileOperation) {\n            message = res.getString(R.string.copy_file_error);\n        }\n\n        return message;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getMessageForOperation from ErrorMessageAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getMessageForOperation\n\n        Method Code: rivate static @Nullable\n    String getMessageForOperation(RemoteOperation operation, Resources res) {\n        String message = null;\n\n        if (operation instanceof UploadFileOperation) {\n            message = String.format(\n                    res.getString(R.string.uploader_upload_failed_content_single),\n                    ((UploadFileOperation) operation).getFileName());\n\n        } else if (operation instanceof DownloadFileOperation) {\n            message = String.format(\n                    res.getString(R.string.downloader_download_failed_content),\n                    new File(((DownloadFileOperation) operation).getSavePath()).getName()\n            );\n\n        } else if (operation instanceof RemoveFileOperation) {\n            message = res.getString(R.string.remove_fail_msg);\n\n        } else if (operation instanceof RenameFileOperation) {\n            message = res.getString(R.string.rename_server_fail_msg);\n\n        } else if (operation instanceof CreateFolderOperation) {\n            message = res.getString(R.string.create_dir_fail_msg);\n\n        } else if (operation instanceof CreateShareViaLinkOperation ||\n                operation instanceof CreateShareWithShareeOperation\n                ) {\n            message = res.getString(R.string.share_link_file_error);\n\n        } else if (operation instanceof UnshareOperation) {\n            message = res.getString(R.string.unshare_link_file_error);\n\n        } else if (operation instanceof UpdateShareViaLinkOperation ||\n                operation instanceof UpdateSharePermissionsOperation\n                ) {\n            message = res.getString(R.string.update_link_file_error);\n\n        } else if (operation instanceof MoveFileOperation) {\n            message = res.getString(R.string.move_file_error);\n\n        } else if (operation instanceof SynchronizeFolderOperation) {\n            String folderPathName = new File(\n                    ((SynchronizeFolderOperation) operation).getFolderPath()\n            ).getName();\n            message = String.format(res.getString(R.string.sync_folder_failed_content), folderPathName);\n\n        } else if (operation instanceof CopyFileOperation) {\n            message = res.getString(R.string.copy_file_error);\n        }\n\n        return message;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate static func getMessageForOperation(_ operation: RemoteOperation, _ res: Resources) -> String? {\n    var message: String? = nil\n\n    if let uploadOperation = operation as? UploadFileOperation {\n        message = String(format: res.getString(R.string.uploader_upload_failed_content_single), uploadOperation.getFileName())\n\n    } else if let downloadOperation = operation as? DownloadFileOperation {\n        let fileName = URL(fileURLWithPath: downloadOperation.getSavePath()).lastPathComponent\n        message = String(format: res.getString(R.string.downloader_download_failed_content), fileName)\n\n    } else if operation is RemoveFileOperation {\n        message = res.getString(R.string.remove_fail_msg)\n\n    } else if operation is RenameFileOperation {\n        message = res.getString(R.string.rename_server_fail_msg)\n\n    } else if operation is CreateFolderOperation {\n        message = res.getString(R.string.create_dir_fail_msg)\n\n    } else if operation is CreateShareViaLinkOperation || operation is CreateShareWithShareeOperation {\n        message = res.getString(R.string.share_link_file_error)\n\n    } else if operation is UnshareOperation {\n        message = res.getString(R.string.unshare_link_file_error)\n\n    } else if operation is UpdateShareViaLinkOperation || operation is UpdateSharePermissionsOperation {\n        message = res.getString(R.string.update_link_file_error)\n\n    } else if operation is MoveFileOperation {\n        message = res.getString(R.string.move_file_error)\n\n    } else if let syncOperation = operation as? SynchronizeFolderOperation {\n        let folderPathName = URL(fileURLWithPath: syncOperation.getFolderPath()).lastPathComponent\n        message = String(format: res.getString(R.string.sync_folder_failed_content), folderPathName)\n\n    } else if operation is CopyFileOperation {\n        message = res.getString(R.string.copy_file_error)\n    }\n\n    return message\n}\n```"
    }
]