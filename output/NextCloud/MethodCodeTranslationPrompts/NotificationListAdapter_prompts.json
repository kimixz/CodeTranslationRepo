[
    {
        "method_name": "setNotificationItems",
        "method_code": "ublic void setNotificationItems(List<Notification> notificationItems) {\n        notificationsList.clear();\n        notificationsList.addAll(notificationItems);\n        notifyDataSetChanged();\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setNotificationItems from NotificationListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: setNotificationItems\n\n        Method Code: ublic void setNotificationItems(List<Notification> notificationItems) {\n        notificationsList.clear();\n        notificationsList.addAll(notificationItems);\n        notifyDataSetChanged();\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setNotificationItems(_ notificationItems: [Notification]) {\n    notificationsList.removeAll()\n    notificationsList.append(contentsOf: notificationItems)\n    notifyDataSetChanged()\n}\n```"
    },
    {
        "method_name": "onCreateViewHolder",
        "method_code": "NonNull\n    @Override\n    public NotificationViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n        return new NotificationViewHolder(\n            NotificationListItemBinding.inflate(LayoutInflater.from(notificationsActivity))\n        );\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreateViewHolder from NotificationListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: onCreateViewHolder\n\n        Method Code: NonNull\n    @Override\n    public NotificationViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n        return new NotificationViewHolder(\n            NotificationListItemBinding.inflate(LayoutInflater.from(notificationsActivity))\n        );\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n    let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"NotificationViewHolder\", for: indexPath) as! NotificationViewHolder\n    return cell\n}\n```"
    },
    {
        "method_name": "onBindViewHolder",
        "method_code": "Override\n    public void onBindViewHolder(@NonNull NotificationViewHolder holder, int position) {\n        Notification notification = notificationsList.get(position);\n        holder.binding.datetime.setText(DisplayUtils.getRelativeTimestamp(notificationsActivity,\n                                                                          notification.getDatetime().getTime()));\n\n        RichObject file = notification.subjectRichParameters.get(FILE);\n        String subject = notification.getSubject();\n        if (file == null && !TextUtils.isEmpty(notification.getLink())) {\n            subject = subject + \" \u2197\";\n            holder.binding.subject.setTypeface(holder.binding.subject.getTypeface(),\n                                               Typeface.BOLD);\n            holder.binding.subject.setOnClickListener(v -> DisplayUtils.startLinkIntent(notificationsActivity,\n                                                                                        notification.getLink()));\n            holder.binding.subject.setText(subject);\n        } else {\n            if (!TextUtils.isEmpty(notification.subjectRich)) {\n                holder.binding.subject.setText(makeSpecialPartsBold(notification));\n            } else {\n                holder.binding.subject.setText(subject);\n            }\n\n            if (file != null && !TextUtils.isEmpty(file.id)) {\n                holder.binding.subject.setOnClickListener(v -> {\n                    Intent intent = new Intent(notificationsActivity, FileDisplayActivity.class);\n                    intent.setAction(Intent.ACTION_VIEW);\n                    intent.putExtra(FileDisplayActivity.KEY_FILE_ID, file.id);\n\n                    notificationsActivity.startActivity(intent);\n                });\n            }\n        }\n\n        if (notification.getMessage() != null && !notification.getMessage().isEmpty()) {\n            holder.binding.message.setText(notification.getMessage());\n            holder.binding.message.setVisibility(View.VISIBLE);\n        } else {\n            holder.binding.message.setVisibility(View.GONE);\n        }\n\n        if (!TextUtils.isEmpty(notification.getIcon())) {\n            downloadIcon(notification.getIcon(), holder.binding.icon, notificationsActivity);\n        }\n\n        viewThemeUtils.platform.colorImageView(holder.binding.icon, ColorRole.ON_SURFACE_VARIANT);\n        viewThemeUtils.platform.colorImageView(holder.binding.dismiss, ColorRole.ON_SURFACE_VARIANT);\n        viewThemeUtils.platform.colorTextView(holder.binding.subject, ColorRole.ON_SURFACE);\n        viewThemeUtils.platform.colorTextView(holder.binding.message, ColorRole.ON_SURFACE_VARIANT);\n        viewThemeUtils.platform.colorTextView(holder.binding.datetime, ColorRole.ON_SURFACE_VARIANT);\n\n        setButtons(holder, notification);\n\n        holder.binding.dismiss.setOnClickListener(v -> new DeleteNotificationTask(client,\n                                                                                  notification,\n                                                                                  holder,\n                                                                                  notificationsActivity).execute());\n    }\n\n ",
        "prompt": "\n        Please translate the following Java (Android) method titled onBindViewHolder from NotificationListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: onBindViewHolder\n\n        Method Code: Override\n    public void onBindViewHolder(@NonNull NotificationViewHolder holder, int position) {\n        Notification notification = notificationsList.get(position);\n        holder.binding.datetime.setText(DisplayUtils.getRelativeTimestamp(notificationsActivity,\n                                                                          notification.getDatetime().getTime()));\n\n        RichObject file = notification.subjectRichParameters.get(FILE);\n        String subject = notification.getSubject();\n        if (file == null && !TextUtils.isEmpty(notification.getLink())) {\n            subject = subject + \" \u2197\";\n            holder.binding.subject.setTypeface(holder.binding.subject.getTypeface(),\n                                               Typeface.BOLD);\n            holder.binding.subject.setOnClickListener(v -> DisplayUtils.startLinkIntent(notificationsActivity,\n                                                                                        notification.getLink()));\n            holder.binding.subject.setText(subject);\n        } else {\n            if (!TextUtils.isEmpty(notification.subjectRich)) {\n                holder.binding.subject.setText(makeSpecialPartsBold(notification));\n            } else {\n                holder.binding.subject.setText(subject);\n            }\n\n            if (file != null && !TextUtils.isEmpty(file.id)) {\n                holder.binding.subject.setOnClickListener(v -> {\n                    Intent intent = new Intent(notificationsActivity, FileDisplayActivity.class);\n                    intent.setAction(Intent.ACTION_VIEW);\n                    intent.putExtra(FileDisplayActivity.KEY_FILE_ID, file.id);\n\n                    notificationsActivity.startActivity(intent);\n                });\n            }\n        }\n\n        if (notification.getMessage() != null && !notification.getMessage().isEmpty()) {\n            holder.binding.message.setText(notification.getMessage());\n            holder.binding.message.setVisibility(View.VISIBLE);\n        } else {\n            holder.binding.message.setVisibility(View.GONE);\n        }\n\n        if (!TextUtils.isEmpty(notification.getIcon())) {\n            downloadIcon(notification.getIcon(), holder.binding.icon, notificationsActivity);\n        }\n\n        viewThemeUtils.platform.colorImageView(holder.binding.icon, ColorRole.ON_SURFACE_VARIANT);\n        viewThemeUtils.platform.colorImageView(holder.binding.dismiss, ColorRole.ON_SURFACE_VARIANT);\n        viewThemeUtils.platform.colorTextView(holder.binding.subject, ColorRole.ON_SURFACE);\n        viewThemeUtils.platform.colorTextView(holder.binding.message, ColorRole.ON_SURFACE_VARIANT);\n        viewThemeUtils.platform.colorTextView(holder.binding.datetime, ColorRole.ON_SURFACE_VARIANT);\n\n        setButtons(holder, notification);\n\n        holder.binding.dismiss.setOnClickListener(v -> new DeleteNotificationTask(client,\n                                                                                  notification,\n                                                                                  holder,\n                                                                                  notificationsActivity).execute());\n    }\n\n \n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onBindViewHolder(_ holder: NotificationViewHolder, position: Int) {\n    let notification = notificationsList[position]\n    holder.binding.datetime.text = DisplayUtils.getRelativeTimestamp(notificationsActivity, notification.datetime.time)\n\n    let file = notification.subjectRichParameters[FILE]\n    var subject = notification.subject\n    if file == nil && !notification.link.isEmpty {\n        subject += \" \u2197\"\n        holder.binding.subject.font = UIFont.boldSystemFont(ofSize: holder.binding.subject.font.pointSize)\n        holder.binding.subject.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(handleLinkTap(_:))))\n        holder.binding.subject.text = subject\n    } else {\n        if !notification.subjectRich.isEmpty {\n            holder.binding.subject.text = makeSpecialPartsBold(notification)\n        } else {\n            holder.binding.subject.text = subject\n        }\n\n        if let file = file, !file.id.isEmpty {\n            holder.binding.subject.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(handleFileTap(_:))))\n        }\n    }\n\n    if let message = notification.message, !message.isEmpty {\n        holder.binding.message.text = message\n        holder.binding.message.isHidden = false\n    } else {\n        holder.binding.message.isHidden = true\n    }\n\n    if !notification.icon.isEmpty {\n        downloadIcon(notification.icon, holder.binding.icon, notificationsActivity)\n    }\n\n    viewThemeUtils.platform.colorImageView(holder.binding.icon, colorRole: .onSurfaceVariant)\n    viewThemeUtils.platform.colorImageView(holder.binding.dismiss, colorRole: .onSurfaceVariant)\n    viewThemeUtils.platform.colorTextView(holder.binding.subject, colorRole: .onSurface)\n    viewThemeUtils.platform.colorTextView(holder.binding.message, colorRole: .onSurfaceVariant)\n    viewThemeUtils.platform.colorTextView(holder.binding.datetime, colorRole: .onSurfaceVariant)\n\n    setButtons(holder, notification)\n\n    holder.binding.dismiss.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(handleDismissTap(_:))))\n}\n\n@objc func handleLinkTap(_ sender: UITapGestureRecognizer) {\n    if let notification = sender.view?.tag as? Notification {\n        DisplayUtils.startLinkIntent(notificationsActivity, notification.link)\n    }\n}\n\n@objc func handleFileTap(_ sender: UITapGestureRecognizer) {\n    if let notification = sender.view?.tag as? Notification, let file = notification.subjectRichParameters[FILE] {\n        let intent = Intent(notificationsActivity, FileDisplayActivity.self)\n        intent.action = .view\n        intent.putExtra(FileDisplayActivity.KEY_FILE_ID, file.id)\n        notificationsActivity.startActivity(intent)\n    }\n}\n\n@objc func handleDismissTap(_ sender: UITapGestureRecognizer) {\n    if let notification = sender.view?.tag as? Notification, let holder = sender.view?.superview as? NotificationViewHolder {\n        DeleteNotificationTask(client: client, notification: notification, holder: holder, notificationsActivity: notificationsActivity).execute()\n    }\n}\n```"
    },
    {
        "method_name": "setButtons",
        "method_code": "lic void setButtons(NotificationViewHolder holder, Notification notification) {\n        // add action buttons\n        holder.binding.buttons.removeAllViews();\n\n        Resources resources = notificationsActivity.getResources();\n        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,\n                                                                         LinearLayout.LayoutParams.WRAP_CONTENT);\n        params.setMargins(\n            resources.getDimensionPixelOffset(R.dimen.standard_quarter_margin),\n            0,\n            resources.getDimensionPixelOffset(R.dimen.standard_half_margin),\n            0);\n\n        List<Action> overflowActions = new ArrayList<>();\n\n        if (notification.getActions().size() > 0) {\n            holder.binding.buttons.setVisibility(View.VISIBLE);\n        } else {\n            holder.binding.buttons.setVisibility(View.GONE);\n        }\n\n        if (notification.getActions().size() > 2) {\n            for (Action action : notification.getActions()) {\n                if (action.primary) {\n                    final MaterialButton button = new MaterialButton(notificationsActivity);\n                    button.setAllCaps(false);\n\n                    button.setText(action.label);\n                    button.setCornerRadiusResource(R.dimen.button_corner_radius);\n\n                    button.setLayoutParams(params);\n                    button.setGravity(Gravity.CENTER);\n\n                    button.setOnClickListener(v -> {\n                        setButtonEnabled(holder, false);\n\n                        if (ACTION_TYPE_WEB.equals(action.type)) {\n                            Intent intent = new Intent(Intent.ACTION_VIEW);\n                            intent.setData(Uri.parse(action.link));\n\n                            notificationsActivity.startActivity(intent);\n                        } else {\n                            new NotificationExecuteActionTask(client,\n                                                              holder,\n                                                              notification,\n                                                              notificationsActivity)\n                                .execute(action);\n                        }\n                    });\n\n                    viewThemeUtils.material.colorMaterialButtonPrimaryFilled(button);\n                    holder.binding.buttons.addView(button);\n                } else {\n                    overflowActions.add(action);\n                }\n            }\n\n            // further actions\n            final MaterialButton moreButton = new MaterialButton(notificationsActivity);\n            moreButton.setBackgroundColor(ResourcesCompat.getColor(resources,\n                                                               android.R.color.transparent,\n                                                               null));\n            viewThemeUtils.material.colorMaterialButtonPrimaryBorderless(moreButton);\n\n            moreButton.setAllCaps(false);\n\n            moreButton.setText(R.string.more);\n            moreButton.setCornerRadiusResource(R.dimen.button_corner_radius);\n\n            moreButton.setLayoutParams(params);\n            moreButton.setGravity(Gravity.CENTER);\n\n            moreButton.setOnClickListener(v -> {\n                PopupMenu popup = new PopupMenu(notificationsActivity, moreButton);\n\n                for (Action action : overflowActions) {\n                    popup.getMenu().add(action.label).setOnMenuItemClickListener(item -> {\n                        setButtonEnabled(holder, false);\n\n                        if (ACTION_TYPE_WEB.equals(action.type)) {\n                            Intent intent = new Intent(Intent.ACTION_VIEW);\n                            intent.setData(Uri.parse(action.link));\n\n                            notificationsActivity.startActivity(intent);\n                        } else {\n                            new NotificationExecuteActionTask(client,\n                                                              holder,\n                                                              notification,\n                                                              notificationsActivity)\n                                .execute(action);\n                        }\n\n                        return true;\n                    });\n                }\n\n                popup.show();\n            });\n\n            holder.binding.buttons.addView(moreButton);\n        } else {\n            for (Action action : notification.getActions()) {\n                final MaterialButton button = new MaterialButton(notificationsActivity);\n\n                if (action.primary) {\n                    viewThemeUtils.material.colorMaterialButtonPrimaryFilled(button);\n                } else {\n                    button.setBackgroundColor(ResourcesCompat.getColor(resources,\n                                                                       android.R.color.transparent,\n                                                                       null));\n                    viewThemeUtils.material.colorMaterialButtonPrimaryBorderless(button);\n                }\n\n                button.setAllCaps(false);\n\n                button.setText(action.label);\n                button.setCornerRadiusResource(R.dimen.button_corner_radius);\n\n                button.setLayoutParams(params);\n\n                button.setOnClickListener(v -> {\n                    setButtonEnabled(holder, false);\n\n                    if (ACTION_TYPE_WEB.equals(action.type)) {\n                        Intent intent = new Intent(Intent.ACTION_VIEW);\n                        intent.setData(Uri.parse(action.link));\n\n                        notificationsActivity.startActivity(intent);\n                    } else {\n                        new NotificationExecuteActionTask(client,\n                                                          holder,\n                                                          notification,\n                                                          notificationsActivity)\n                            .execute(action);\n                    }\n                });\n\n                holder.binding.buttons.addView(button);\n            }\n        }\n    }\n\n ",
        "prompt": "\n        Please translate the following Java (Android) method titled setButtons from NotificationListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: setButtons\n\n        Method Code: lic void setButtons(NotificationViewHolder holder, Notification notification) {\n        // add action buttons\n        holder.binding.buttons.removeAllViews();\n\n        Resources resources = notificationsActivity.getResources();\n        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,\n                                                                         LinearLayout.LayoutParams.WRAP_CONTENT);\n        params.setMargins(\n            resources.getDimensionPixelOffset(R.dimen.standard_quarter_margin),\n            0,\n            resources.getDimensionPixelOffset(R.dimen.standard_half_margin),\n            0);\n\n        List<Action> overflowActions = new ArrayList<>();\n\n        if (notification.getActions().size() > 0) {\n            holder.binding.buttons.setVisibility(View.VISIBLE);\n        } else {\n            holder.binding.buttons.setVisibility(View.GONE);\n        }\n\n        if (notification.getActions().size() > 2) {\n            for (Action action : notification.getActions()) {\n                if (action.primary) {\n                    final MaterialButton button = new MaterialButton(notificationsActivity);\n                    button.setAllCaps(false);\n\n                    button.setText(action.label);\n                    button.setCornerRadiusResource(R.dimen.button_corner_radius);\n\n                    button.setLayoutParams(params);\n                    button.setGravity(Gravity.CENTER);\n\n                    button.setOnClickListener(v -> {\n                        setButtonEnabled(holder, false);\n\n                        if (ACTION_TYPE_WEB.equals(action.type)) {\n                            Intent intent = new Intent(Intent.ACTION_VIEW);\n                            intent.setData(Uri.parse(action.link));\n\n                            notificationsActivity.startActivity(intent);\n                        } else {\n                            new NotificationExecuteActionTask(client,\n                                                              holder,\n                                                              notification,\n                                                              notificationsActivity)\n                                .execute(action);\n                        }\n                    });\n\n                    viewThemeUtils.material.colorMaterialButtonPrimaryFilled(button);\n                    holder.binding.buttons.addView(button);\n                } else {\n                    overflowActions.add(action);\n                }\n            }\n\n            // further actions\n            final MaterialButton moreButton = new MaterialButton(notificationsActivity);\n            moreButton.setBackgroundColor(ResourcesCompat.getColor(resources,\n                                                               android.R.color.transparent,\n                                                               null));\n            viewThemeUtils.material.colorMaterialButtonPrimaryBorderless(moreButton);\n\n            moreButton.setAllCaps(false);\n\n            moreButton.setText(R.string.more);\n            moreButton.setCornerRadiusResource(R.dimen.button_corner_radius);\n\n            moreButton.setLayoutParams(params);\n            moreButton.setGravity(Gravity.CENTER);\n\n            moreButton.setOnClickListener(v -> {\n                PopupMenu popup = new PopupMenu(notificationsActivity, moreButton);\n\n                for (Action action : overflowActions) {\n                    popup.getMenu().add(action.label).setOnMenuItemClickListener(item -> {\n                        setButtonEnabled(holder, false);\n\n                        if (ACTION_TYPE_WEB.equals(action.type)) {\n                            Intent intent = new Intent(Intent.ACTION_VIEW);\n                            intent.setData(Uri.parse(action.link));\n\n                            notificationsActivity.startActivity(intent);\n                        } else {\n                            new NotificationExecuteActionTask(client,\n                                                              holder,\n                                                              notification,\n                                                              notificationsActivity)\n                                .execute(action);\n                        }\n\n                        return true;\n                    });\n                }\n\n                popup.show();\n            });\n\n            holder.binding.buttons.addView(moreButton);\n        } else {\n            for (Action action : notification.getActions()) {\n                final MaterialButton button = new MaterialButton(notificationsActivity);\n\n                if (action.primary) {\n                    viewThemeUtils.material.colorMaterialButtonPrimaryFilled(button);\n                } else {\n                    button.setBackgroundColor(ResourcesCompat.getColor(resources,\n                                                                       android.R.color.transparent,\n                                                                       null));\n                    viewThemeUtils.material.colorMaterialButtonPrimaryBorderless(button);\n                }\n\n                button.setAllCaps(false);\n\n                button.setText(action.label);\n                button.setCornerRadiusResource(R.dimen.button_corner_radius);\n\n                button.setLayoutParams(params);\n\n                button.setOnClickListener(v -> {\n                    setButtonEnabled(holder, false);\n\n                    if (ACTION_TYPE_WEB.equals(action.type)) {\n                        Intent intent = new Intent(Intent.ACTION_VIEW);\n                        intent.setData(Uri.parse(action.link));\n\n                        notificationsActivity.startActivity(intent);\n                    } else {\n                        new NotificationExecuteActionTask(client,\n                                                          holder,\n                                                          notification,\n                                                          notificationsActivity)\n                            .execute(action);\n                    }\n                });\n\n                holder.binding.buttons.addView(button);\n            }\n        }\n    }\n\n \n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setButtons(holder: NotificationViewHolder, notification: Notification) {\n    // add action buttons\n    holder.binding.buttons.subviews.forEach { $0.removeFromSuperview() }\n\n    let resources = notificationsActivity.resources\n    let params = LinearLayout.LayoutParams(width: .wrapContent, height: .wrapContent)\n    params.setMargins(\n        resources.getDimensionPixelOffset(R.dimen.standard_quarter_margin),\n        0,\n        resources.getDimensionPixelOffset(R.dimen.standard_half_margin),\n        0\n    )\n\n    var overflowActions: [Action] = []\n\n    if notification.getActions().count > 0 {\n        holder.binding.buttons.isHidden = false\n    } else {\n        holder.binding.buttons.isHidden = true\n    }\n\n    if notification.getActions().count > 2 {\n        for action in notification.getActions() {\n            if action.primary {\n                let button = MaterialButton(notificationsActivity)\n                button.isAllCaps = false\n\n                button.setTitle(action.label, for: .normal)\n                button.cornerRadius = resources.getDimension(R.dimen.button_corner_radius)\n\n                button.layoutParams = params\n                button.contentHorizontalAlignment = .center\n\n                button.addAction(UIAction { _ in\n                    self.setButtonEnabled(holder: holder, enabled: false)\n\n                    if action.type == ACTION_TYPE_WEB {\n                        if let url = URL(string: action.link) {\n                            UIApplication.shared.open(url)\n                        }\n                    } else {\n                        NotificationExecuteActionTask(client: client, holder: holder, notification: notification, notificationsActivity: notificationsActivity).execute(action: action)\n                    }\n                }, for: .touchUpInside)\n\n                viewThemeUtils.material.colorMaterialButtonPrimaryFilled(button)\n                holder.binding.buttons.addSubview(button)\n            } else {\n                overflowActions.append(action)\n            }\n        }\n\n        // further actions\n        let moreButton = MaterialButton(notificationsActivity)\n        moreButton.backgroundColor = UIColor.clear\n        viewThemeUtils.material.colorMaterialButtonPrimaryBorderless(moreButton)\n\n        moreButton.isAllCaps = false\n\n        moreButton.setTitle(NSLocalizedString(\"more\", comment: \"\"), for: .normal)\n        moreButton.cornerRadius = resources.getDimension(R.dimen.button_corner_radius)\n\n        moreButton.layoutParams = params\n        moreButton.contentHorizontalAlignment = .center\n\n        moreButton.addAction(UIAction { _ in\n            let popup = PopupMenu(notificationsActivity, moreButton)\n\n            for action in overflowActions {\n                popup.menu.addItem(withTitle: action.label, action: #selector(self.menuItemClicked(_:)), keyEquivalent: \"\").target = self\n            }\n\n            popup.show()\n        }, for: .touchUpInside)\n\n        holder.binding.buttons.addSubview(moreButton)\n    } else {\n        for action in notification.getActions() {\n            let button = MaterialButton(notificationsActivity)\n\n            if action.primary {\n                viewThemeUtils.material.colorMaterialButtonPrimaryFilled(button)\n            } else {\n                button.backgroundColor = UIColor.clear\n                viewThemeUtils.material.colorMaterialButtonPrimaryBorderless(button)\n            }\n\n            button.isAllCaps = false\n\n            button.setTitle(action.label, for: .normal)\n            button.cornerRadius = resources.getDimension(R.dimen.button_corner_radius)\n\n            button.layoutParams = params\n\n            button.addAction(UIAction { _ in\n                self.setButtonEnabled(holder: holder, enabled: false)\n\n                if action.type == ACTION_TYPE_WEB {\n                    if let url = URL(string: action.link) {\n                        UIApplication.shared.open(url)\n                    }\n                } else {\n                    NotificationExecuteActionTask(client: client, holder: holder, notification: notification, notificationsActivity: notificationsActivity).execute(action: action)\n                }\n            }, for: .touchUpInside)\n\n            holder.binding.buttons.addSubview(button)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "makeSpecialPartsBold",
        "method_code": "vate SpannableStringBuilder makeSpecialPartsBold(Notification notification) {\n        String text = notification.getSubjectRich();\n        SpannableStringBuilder ssb = new SpannableStringBuilder(text);\n\n        int openingBrace = text.indexOf('{');\n        int closingBrace;\n        String replaceablePart;\n        while (openingBrace != -1) {\n            closingBrace = text.indexOf('}', openingBrace) + 1;\n            replaceablePart = text.substring(openingBrace + 1, closingBrace - 1);\n\n            RichObject richObject = notification.subjectRichParameters.get(replaceablePart);\n            if (richObject != null) {\n                String name = richObject.getName();\n                ssb.replace(openingBrace, closingBrace, name);\n                text = ssb.toString();\n                closingBrace = openingBrace + name.length();\n\n                ssb.setSpan(styleSpanBold, openingBrace, closingBrace, 0);\n                ssb.setSpan(foregroundColorSpanBlack, openingBrace, closingBrace, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\n            }\n            openingBrace = text.indexOf('{', closingBrace);\n        }\n\n        return ssb;\n    }\n\n ",
        "prompt": "\n        Please translate the following Java (Android) method titled makeSpecialPartsBold from NotificationListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: makeSpecialPartsBold\n\n        Method Code: vate SpannableStringBuilder makeSpecialPartsBold(Notification notification) {\n        String text = notification.getSubjectRich();\n        SpannableStringBuilder ssb = new SpannableStringBuilder(text);\n\n        int openingBrace = text.indexOf('{');\n        int closingBrace;\n        String replaceablePart;\n        while (openingBrace != -1) {\n            closingBrace = text.indexOf('}', openingBrace) + 1;\n            replaceablePart = text.substring(openingBrace + 1, closingBrace - 1);\n\n            RichObject richObject = notification.subjectRichParameters.get(replaceablePart);\n            if (richObject != null) {\n                String name = richObject.getName();\n                ssb.replace(openingBrace, closingBrace, name);\n                text = ssb.toString();\n                closingBrace = openingBrace + name.length();\n\n                ssb.setSpan(styleSpanBold, openingBrace, closingBrace, 0);\n                ssb.setSpan(foregroundColorSpanBlack, openingBrace, closingBrace, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\n            }\n            openingBrace = text.indexOf('{', closingBrace);\n        }\n\n        return ssb;\n    }\n\n \n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc makeSpecialPartsBold(notification: Notification) -> NSMutableAttributedString {\n    var text = notification.getSubjectRich()\n    let ssb = NSMutableAttributedString(string: text)\n\n    var openingBrace = text.firstIndex(of: \"{\")\n    var closingBrace: String.Index\n    var replaceablePart: String\n    while let opening = openingBrace {\n        closingBrace = text.index(after: text[opening...].firstIndex(of: \"}\")!)\n        replaceablePart = String(text[text.index(after: opening)..<text.index(before: closingBrace)])\n\n        if let richObject = notification.subjectRichParameters[replaceablePart] {\n            let name = richObject.getName()\n            ssb.replaceCharacters(in: NSRange(opening...closingBrace, in: text), with: name)\n            text = ssb.string\n            closingBrace = text.index(opening, offsetBy: name.count)\n\n            ssb.addAttribute(.font, value: UIFont.boldSystemFont(ofSize: UIFont.systemFontSize), range: NSRange(opening..<closingBrace, in: text))\n            ssb.addAttribute(.foregroundColor, value: UIColor.black, range: NSRange(opening..<closingBrace, in: text))\n        }\n        openingBrace = text[closingBrace...].firstIndex(of: \"{\")\n    }\n\n    return ssb\n}\n```"
    },
    {
        "method_name": "removeNotification",
        "method_code": "lic void removeNotification(NotificationViewHolder holder) {\n        int position = holder.getAdapterPosition();\n\n        if (position >= 0 && position < notificationsList.size()) {\n            notificationsList.remove(position);\n            notifyItemRemoved(position);\n            notifyItemRangeChanged(position, notificationsList.size());\n        }\n    }\n\n ",
        "prompt": "\n        Please translate the following Java (Android) method titled removeNotification from NotificationListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: removeNotification\n\n        Method Code: lic void removeNotification(NotificationViewHolder holder) {\n        int position = holder.getAdapterPosition();\n\n        if (position >= 0 && position < notificationsList.size()) {\n            notificationsList.remove(position);\n            notifyItemRemoved(position);\n            notifyItemRangeChanged(position, notificationsList.size());\n        }\n    }\n\n \n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc removeNotification(holder: NotificationViewHolder) {\n    let position = holder.getAdapterPosition()\n    \n    if position >= 0 && position < notificationsList.count {\n        notificationsList.remove(at: position)\n        notifyItemRemoved(position)\n        notifyItemRangeChanged(position, notificationsList.count)\n    }\n}\n```"
    },
    {
        "method_name": "removeAllNotifications",
        "method_code": "lic void removeAllNotifications() {\n        notificationsList.clear();\n        notifyDataSetChanged();\n    }\n\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled removeAllNotifications from NotificationListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: removeAllNotifications\n\n        Method Code: lic void removeAllNotifications() {\n        notificationsList.clear();\n        notifyDataSetChanged();\n    }\n\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc removeAllNotifications() {\n    notificationsList.removeAll()\n    notifyDataSetChanged()\n}\n```"
    },
    {
        "method_name": "setButtonEnabled",
        "method_code": "lic void setButtonEnabled(NotificationViewHolder holder, boolean enabled) {\n        for (int i = 0; i < holder.binding.buttons.getChildCount(); i++) {\n            holder.binding.buttons.getChildAt(i).setEnabled(enabled);\n        }\n    }\n\n ",
        "prompt": "\n        Please translate the following Java (Android) method titled setButtonEnabled from NotificationListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: setButtonEnabled\n\n        Method Code: lic void setButtonEnabled(NotificationViewHolder holder, boolean enabled) {\n        for (int i = 0; i < holder.binding.buttons.getChildCount(); i++) {\n            holder.binding.buttons.getChildAt(i).setEnabled(enabled);\n        }\n    }\n\n \n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setButtonEnabled(holder: NotificationViewHolder, enabled: Bool) {\n    for i in 0..<holder.binding.buttons.subviews.count {\n        holder.binding.buttons.subviews[i].isUserInteractionEnabled = enabled\n    }\n}\n```"
    },
    {
        "method_name": "downloadIcon",
        "method_code": "vate void downloadIcon(String icon, ImageView itemViewType, Context context) {\n        GenericRequestBuilder<Uri, InputStream, SVG, Drawable> requestBuilder = Glide.with(notificationsActivity)\n            .using(Glide.buildStreamModelLoader(Uri.class, notificationsActivity), InputStream.class)\n            .from(Uri.class)\n            .as(SVG.class)\n            .transcode(new SvgDrawableTranscoder(context), Drawable.class)\n            .sourceEncoder(new StreamEncoder())\n            .cacheDecoder(new FileToStreamDecoder<>(new SvgDecoder()))\n            .decoder(new SvgDecoder())\n            .placeholder(R.drawable.ic_notification)\n            .error(R.drawable.ic_notification)\n            .animate(android.R.anim.fade_in)\n            .listener(new SvgSoftwareLayerSetter<>());\n\n\n        Uri uri = Uri.parse(icon);\n        requestBuilder\n            .diskCacheStrategy(DiskCacheStrategy.SOURCE)\n            .load(uri)\n            .into(itemViewType);\n    }\n\n ",
        "prompt": "\n        Please translate the following Java (Android) method titled downloadIcon from NotificationListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: downloadIcon\n\n        Method Code: vate void downloadIcon(String icon, ImageView itemViewType, Context context) {\n        GenericRequestBuilder<Uri, InputStream, SVG, Drawable> requestBuilder = Glide.with(notificationsActivity)\n            .using(Glide.buildStreamModelLoader(Uri.class, notificationsActivity), InputStream.class)\n            .from(Uri.class)\n            .as(SVG.class)\n            .transcode(new SvgDrawableTranscoder(context), Drawable.class)\n            .sourceEncoder(new StreamEncoder())\n            .cacheDecoder(new FileToStreamDecoder<>(new SvgDecoder()))\n            .decoder(new SvgDecoder())\n            .placeholder(R.drawable.ic_notification)\n            .error(R.drawable.ic_notification)\n            .animate(android.R.anim.fade_in)\n            .listener(new SvgSoftwareLayerSetter<>());\n\n\n        Uri uri = Uri.parse(icon);\n        requestBuilder\n            .diskCacheStrategy(DiskCacheStrategy.SOURCE)\n            .load(uri)\n            .into(itemViewType);\n    }\n\n \n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport UIKit\nimport SDWebImageSVGCoder\n\nfunc downloadIcon(icon: String, itemViewType: UIImageView, context: UIViewController) {\n    let svgCoder = SDImageSVGCoder.shared\n    SDImageCodersManager.shared.addCoder(svgCoder)\n    \n    if let url = URL(string: icon) {\n        itemViewType.sd_setImage(with: url, placeholderImage: UIImage(named: \"ic_notification\"), options: [.continueInBackground, .retryFailed], context: nil)\n    }\n}\n```"
    },
    {
        "method_name": "getItemCount",
        "method_code": "erride\n    public int getItemCount() {\n        return notificationsList.size();\n    }\n\n ",
        "prompt": "\n        Please translate the following Java (Android) method titled getItemCount from NotificationListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getItemCount\n\n        Method Code: erride\n    public int getItemCount() {\n        return notificationsList.size();\n    }\n\n \n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getItemCount() -> Int {\n    return notificationsList.count\n}\n```"
    }
]