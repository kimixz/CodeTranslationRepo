[
    {
        "method_name": "setup",
        "method_code": "@Before\n    public void setup() {\n        manageAccountsActivity = mock(ManageAccountsActivity.class, Mockito.RETURNS_DEEP_STUBS);\n        when(manageAccountsActivity.getResources().getDimension(R.dimen.list_item_avatar_icon_radius))\n            .thenReturn(new Float(0.1));\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setup from UserListAdapterTest.java into Swift.\n\n        Input:\n\n        Method Name: setup\n\n        Method Code: @Before\n    public void setup() {\n        manageAccountsActivity = mock(ManageAccountsActivity.class, Mockito.RETURNS_DEEP_STUBS);\n        when(manageAccountsActivity.getResources().getDimension(R.dimen.list_item_avatar_icon_radius))\n            .thenReturn(new Float(0.1));\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport XCTest\nimport UIKit\nimport MockitoSwift\n\nclass UserListAdapterTest: XCTestCase {\n    var manageAccountsActivity: ManageAccountsActivity!\n\n    override func setUp() {\n        super.setUp()\n        manageAccountsActivity = mock(ManageAccountsActivity.self, defaultAnswer: .deepStubs)\n        when(manageAccountsActivity.getResources().getDimension(R.dimen.list_item_avatar_icon_radius))\n            .thenReturn(0.1)\n    }\n}\n```"
    },
    {
        "method_name": "test_getItemCountEmptyList",
        "method_code": "@Test\n    public void test_getItemCountEmptyList() {\n        userListAdapter = new UserListAdapter(manageAccountsActivity,\n                                              null,\n                                              new ArrayList<>(),\n                                              null,\n                                              true,\n                                              true,\n                                              true,\n                                              viewThemeUtils);\n        assertEquals(0, userListAdapter.getItemCount());\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled test_getItemCountEmptyList from UserListAdapterTest.java into Swift.\n\n        Input:\n\n        Method Name: test_getItemCountEmptyList\n\n        Method Code: @Test\n    public void test_getItemCountEmptyList() {\n        userListAdapter = new UserListAdapter(manageAccountsActivity,\n                                              null,\n                                              new ArrayList<>(),\n                                              null,\n                                              true,\n                                              true,\n                                              true,\n                                              viewThemeUtils);\n        assertEquals(0, userListAdapter.getItemCount());\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc test_getItemCountEmptyList() {\n    let userListAdapter = UserListAdapter(manageAccountsActivity: manageAccountsActivity,\n                                          someParameter: nil,\n                                          userList: [],\n                                          anotherParameter: nil,\n                                          flag1: true,\n                                          flag2: true,\n                                          flag3: true,\n                                          viewThemeUtils: viewThemeUtils)\n    XCTAssertEqual(0, userListAdapter.getItemCount())\n}\n```"
    },
    {
        "method_name": "test_getItemCountNormalCase",
        "method_code": "@Test\n    public void test_getItemCountNormalCase() {\n        List<UserListItem> accounts = new ArrayList<>();\n        accounts.add(new UserListItem());\n        accounts.add(new UserListItem());\n\n        userListAdapter = new UserListAdapter(manageAccountsActivity,\n                                              null,\n                                              accounts,\n                                              null,\n                                              true,\n                                              true,\n                                              true,\n                                              viewThemeUtils);\n\n        assertEquals(2, userListAdapter.getItemCount());\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled test_getItemCountNormalCase from UserListAdapterTest.java into Swift.\n\n        Input:\n\n        Method Name: test_getItemCountNormalCase\n\n        Method Code: @Test\n    public void test_getItemCountNormalCase() {\n        List<UserListItem> accounts = new ArrayList<>();\n        accounts.add(new UserListItem());\n        accounts.add(new UserListItem());\n\n        userListAdapter = new UserListAdapter(manageAccountsActivity,\n                                              null,\n                                              accounts,\n                                              null,\n                                              true,\n                                              true,\n                                              true,\n                                              viewThemeUtils);\n\n        assertEquals(2, userListAdapter.getItemCount());\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc test_getItemCountNormalCase() {\n    var accounts: [UserListItem] = []\n    accounts.append(UserListItem())\n    accounts.append(UserListItem())\n\n    userListAdapter = UserListAdapter(manageAccountsActivity: manageAccountsActivity,\n                                      someParameter: nil,\n                                      accounts: accounts,\n                                      anotherParameter: nil,\n                                      flag1: true,\n                                      flag2: true,\n                                      flag3: true,\n                                      viewThemeUtils: viewThemeUtils)\n\n    XCTAssertEqual(2, userListAdapter.getItemCount())\n}\n```"
    },
    {
        "method_name": "test_getItem",
        "method_code": "@Test\n    public void test_getItem() {\n        ManageAccountsActivity manageAccountsActivity = mock(ManageAccountsActivity.class, Mockito.RETURNS_DEEP_STUBS);\n        when(manageAccountsActivity.getResources().getDimension(R.dimen.list_item_avatar_icon_radius))\n            .thenReturn(new Float(0.1));\n\n        List<UserListItem> accounts = new ArrayList<>();\n        userListAdapter = new UserListAdapter(manageAccountsActivity,\n                                              null,\n                                              accounts,\n                                              null,\n                                              true,\n                                              true,\n                                              true,\n                                              viewThemeUtils);\n\n        UserListItem userListItem1 = new UserListItem();\n        UserListItem userListItem2 = new UserListItem();\n        accounts.add(userListItem1);\n        accounts.add(userListItem2);\n\n        assertEquals(userListItem2, userListAdapter.getItem(1));\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled test_getItem from UserListAdapterTest.java into Swift.\n\n        Input:\n\n        Method Name: test_getItem\n\n        Method Code: @Test\n    public void test_getItem() {\n        ManageAccountsActivity manageAccountsActivity = mock(ManageAccountsActivity.class, Mockito.RETURNS_DEEP_STUBS);\n        when(manageAccountsActivity.getResources().getDimension(R.dimen.list_item_avatar_icon_radius))\n            .thenReturn(new Float(0.1));\n\n        List<UserListItem> accounts = new ArrayList<>();\n        userListAdapter = new UserListAdapter(manageAccountsActivity,\n                                              null,\n                                              accounts,\n                                              null,\n                                              true,\n                                              true,\n                                              true,\n                                              viewThemeUtils);\n\n        UserListItem userListItem1 = new UserListItem();\n        UserListItem userListItem2 = new UserListItem();\n        accounts.add(userListItem1);\n        accounts.add(userListItem2);\n\n        assertEquals(userListItem2, userListAdapter.getItem(1));\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc test_getItem() {\n    let manageAccountsActivity = mock(ManageAccountsActivity.self, returnsDeepStubs: true)\n    when(manageAccountsActivity.resources.getDimension(R.dimen.list_item_avatar_icon_radius)).thenReturn(0.1 as Float)\n\n    var accounts: [UserListItem] = []\n    userListAdapter = UserListAdapter(manageAccountsActivity: manageAccountsActivity,\n                                      someParameter: nil,\n                                      accounts: accounts,\n                                      anotherParameter: nil,\n                                      flag1: true,\n                                      flag2: true,\n                                      flag3: true,\n                                      viewThemeUtils: viewThemeUtils)\n\n    let userListItem1 = UserListItem()\n    let userListItem2 = UserListItem()\n    accounts.append(userListItem1)\n    accounts.append(userListItem2)\n\n    XCTAssertEqual(userListItem2, userListAdapter.getItem(at: 1))\n}\n```"
    }
]