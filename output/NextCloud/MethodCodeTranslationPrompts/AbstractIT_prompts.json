[
    {
        "method_name": "beforeAll",
        "method_code": "@BeforeClass\n    public static void beforeAll() {\n        try {\n            // clean up\n            targetContext = InstrumentationRegistry.getInstrumentation().getTargetContext();\n            AccountManager platformAccountManager = AccountManager.get(targetContext);\n\n            for (Account account : platformAccountManager.getAccounts()) {\n                if (account.type.equalsIgnoreCase(\"nextcloud\")) {\n                    platformAccountManager.removeAccountExplicitly(account);\n                }\n            }\n\n            account = createAccount(\"test@https://nextcloud.localhost\");\n            user = getUser(account);\n\n            client = OwnCloudClientFactory.createOwnCloudClient(account, targetContext);\n            nextcloudClient = OwnCloudClientFactory.createNextcloudClient(user, targetContext);\n        } catch (OperationCanceledException |\n                 IOException |\n                 AccountUtils.AccountNotFoundException |\n                 AuthenticatorException e) {\n            throw new RuntimeException(\"Error setting up clients\", e);\n        }\n\n        Bundle arguments = androidx.test.platform.app.InstrumentationRegistry.getArguments();\n\n        // color\n        String colorParameter = arguments.getString(\"COLOR\");\n        if (!TextUtils.isEmpty(colorParameter)) {\n            FileDataStorageManager fileDataStorageManager = new FileDataStorageManager(user,\n                                                                                       targetContext.getContentResolver());\n\n            String colorHex = null;\n            COLOR = colorParameter;\n            switch (colorParameter) {\n                case \"red\":\n                    colorHex = \"#7c0000\";\n                    break;\n\n                case \"green\":\n                    colorHex = \"#00ff00\";\n                    break;\n\n                case \"white\":\n                    colorHex = \"#ffffff\";\n                    break;\n\n                case \"black\":\n                    colorHex = \"#000000\";\n                    break;\n\n                case \"lightgreen\":\n                    colorHex = \"#aaff00\";\n                    break;\n\n                default:\n                    break;\n            }\n\n            OCCapability capability = fileDataStorageManager.getCapability(account.name);\n            capability.setGroupfolders(CapabilityBooleanType.TRUE);\n\n            if (colorHex != null) {\n                capability.setServerColor(colorHex);\n            }\n\n            fileDataStorageManager.saveCapabilities(capability);\n        }\n\n        // dark / light\n        String darkModeParameter = arguments.getString(\"DARKMODE\");\n\n        if (darkModeParameter != null) {\n            if (\"dark\".equalsIgnoreCase(darkModeParameter)) {\n                DARK_MODE = \"dark\";\n                AppPreferencesImpl.fromContext(targetContext).setDarkThemeMode(DarkMode.DARK);\n                MainApp.setAppTheme(DarkMode.DARK);\n            } else {\n                DARK_MODE = \"light\";\n            }\n        }\n\n        if (\"light\".equalsIgnoreCase(DARK_MODE) && \"blue\".equalsIgnoreCase(COLOR)) {\n            // use already existing names\n            DARK_MODE = \"\";\n            COLOR = \"\";\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled beforeAll from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: beforeAll\n\n        Method Code: @BeforeClass\n    public static void beforeAll() {\n        try {\n            // clean up\n            targetContext = InstrumentationRegistry.getInstrumentation().getTargetContext();\n            AccountManager platformAccountManager = AccountManager.get(targetContext);\n\n            for (Account account : platformAccountManager.getAccounts()) {\n                if (account.type.equalsIgnoreCase(\"nextcloud\")) {\n                    platformAccountManager.removeAccountExplicitly(account);\n                }\n            }\n\n            account = createAccount(\"test@https://nextcloud.localhost\");\n            user = getUser(account);\n\n            client = OwnCloudClientFactory.createOwnCloudClient(account, targetContext);\n            nextcloudClient = OwnCloudClientFactory.createNextcloudClient(user, targetContext);\n        } catch (OperationCanceledException |\n                 IOException |\n                 AccountUtils.AccountNotFoundException |\n                 AuthenticatorException e) {\n            throw new RuntimeException(\"Error setting up clients\", e);\n        }\n\n        Bundle arguments = androidx.test.platform.app.InstrumentationRegistry.getArguments();\n\n        // color\n        String colorParameter = arguments.getString(\"COLOR\");\n        if (!TextUtils.isEmpty(colorParameter)) {\n            FileDataStorageManager fileDataStorageManager = new FileDataStorageManager(user,\n                                                                                       targetContext.getContentResolver());\n\n            String colorHex = null;\n            COLOR = colorParameter;\n            switch (colorParameter) {\n                case \"red\":\n                    colorHex = \"#7c0000\";\n                    break;\n\n                case \"green\":\n                    colorHex = \"#00ff00\";\n                    break;\n\n                case \"white\":\n                    colorHex = \"#ffffff\";\n                    break;\n\n                case \"black\":\n                    colorHex = \"#000000\";\n                    break;\n\n                case \"lightgreen\":\n                    colorHex = \"#aaff00\";\n                    break;\n\n                default:\n                    break;\n            }\n\n            OCCapability capability = fileDataStorageManager.getCapability(account.name);\n            capability.setGroupfolders(CapabilityBooleanType.TRUE);\n\n            if (colorHex != null) {\n                capability.setServerColor(colorHex);\n            }\n\n            fileDataStorageManager.saveCapabilities(capability);\n        }\n\n        // dark / light\n        String darkModeParameter = arguments.getString(\"DARKMODE\");\n\n        if (darkModeParameter != null) {\n            if (\"dark\".equalsIgnoreCase(darkModeParameter)) {\n                DARK_MODE = \"dark\";\n                AppPreferencesImpl.fromContext(targetContext).setDarkThemeMode(DarkMode.DARK);\n                MainApp.setAppTheme(DarkMode.DARK);\n            } else {\n                DARK_MODE = \"light\";\n            }\n        }\n\n        if (\"light\".equalsIgnoreCase(DARK_MODE) && \"blue\".equalsIgnoreCase(COLOR)) {\n            // use already existing names\n            DARK_MODE = \"\";\n            COLOR = \"\";\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport Foundation\n\nclass AbstractIT {\n    static var targetContext: Context!\n    static var account: Account!\n    static var user: User!\n    static var client: OwnCloudClient!\n    static var nextcloudClient: NextcloudClient!\n    static var COLOR: String = \"\"\n    static var DARK_MODE: String = \"\"\n\n    static func beforeAll() {\n        do {\n            // clean up\n            targetContext = InstrumentationRegistry.getInstrumentation().targetContext\n            let platformAccountManager = AccountManager.get(targetContext)\n\n            for account in platformAccountManager.accounts {\n                if account.type.caseInsensitiveCompare(\"nextcloud\") == .orderedSame {\n                    platformAccountManager.removeAccountExplicitly(account)\n                }\n            }\n\n            account = createAccount(\"test@https://nextcloud.localhost\")\n            user = getUser(account)\n\n            client = OwnCloudClientFactory.createOwnCloudClient(account, targetContext)\n            nextcloudClient = OwnCloudClientFactory.createNextcloudClient(user, targetContext)\n        } catch {\n            fatalError(\"Error setting up clients: \\(error)\")\n        }\n\n        let arguments = InstrumentationRegistry.getArguments()\n\n        // color\n        if let colorParameter = arguments[\"COLOR\"], !colorParameter.isEmpty {\n            let fileDataStorageManager = FileDataStorageManager(user: user, contentResolver: targetContext.contentResolver)\n\n            var colorHex: String? = nil\n            COLOR = colorParameter\n            switch colorParameter {\n            case \"red\":\n                colorHex = \"#7c0000\"\n            case \"green\":\n                colorHex = \"#00ff00\"\n            case \"white\":\n                colorHex = \"#ffffff\"\n            case \"black\":\n                colorHex = \"#000000\"\n            case \"lightgreen\":\n                colorHex = \"#aaff00\"\n            default:\n                break\n            }\n\n            let capability = fileDataStorageManager.getCapability(account.name)\n            capability.setGroupfolders(.TRUE)\n\n            if let colorHex = colorHex {\n                capability.setServerColor(colorHex)\n            }\n\n            fileDataStorageManager.saveCapabilities(capability)\n        }\n\n        // dark / light\n        if let darkModeParameter = arguments[\"DARKMODE\"] {\n            if darkModeParameter.caseInsensitiveCompare(\"dark\") == .orderedSame {\n                DARK_MODE = \"dark\"\n                AppPreferencesImpl.fromContext(targetContext).setDarkThemeMode(.DARK)\n                MainApp.setAppTheme(.DARK)\n            } else {\n                DARK_MODE = \"light\"\n            }\n        }\n\n        if DARK_MODE.caseInsensitiveCompare(\"light\") == .orderedSame && COLOR.caseInsensitiveCompare(\"blue\") == .orderedSame {\n            // use already existing names\n            DARK_MODE = \"\"\n            COLOR = \"\"\n        }\n    }\n}\n```"
    },
    {
        "method_name": "testOnlyOnServer",
        "method_code": "protected void testOnlyOnServer(OwnCloudVersion version) throws AccountUtils.AccountNotFoundException {\n        OCCapability ocCapability = getCapability();\n        assumeTrue(ocCapability.getVersion().isNewerOrEqual(version));\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled testOnlyOnServer from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: testOnlyOnServer\n\n        Method Code: protected void testOnlyOnServer(OwnCloudVersion version) throws AccountUtils.AccountNotFoundException {\n        OCCapability ocCapability = getCapability();\n        assumeTrue(ocCapability.getVersion().isNewerOrEqual(version));\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc testOnlyOnServer(version: OwnCloudVersion) throws {\n    let ocCapability = getCapability()\n    guard ocCapability.version.isNewerOrEqual(version) else {\n        throw AccountUtils.AccountNotFoundException()\n    }\n}\n```"
    },
    {
        "method_name": "getCapability",
        "method_code": "protected OCCapability getCapability() throws AccountUtils.AccountNotFoundException {\n        NextcloudClient client = OwnCloudClientFactory.createNextcloudClient(user, targetContext);\n\n        OCCapability ocCapability = (OCCapability) new GetCapabilitiesRemoteOperation()\n            .execute(client)\n            .getSingleData();\n\n        return ocCapability;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getCapability from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: getCapability\n\n        Method Code: protected OCCapability getCapability() throws AccountUtils.AccountNotFoundException {\n        NextcloudClient client = OwnCloudClientFactory.createNextcloudClient(user, targetContext);\n\n        OCCapability ocCapability = (OCCapability) new GetCapabilitiesRemoteOperation()\n            .execute(client)\n            .getSingleData();\n\n        return ocCapability;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getCapability() throws -> OCCapability {\n    let client = OwnCloudClientFactory.createNextcloudClient(user: user, targetContext: targetContext)\n    \n    let ocCapability = try GetCapabilitiesRemoteOperation()\n        .execute(client: client)\n        .getSingleData() as! OCCapability\n    \n    return ocCapability\n}\n```"
    },
    {
        "method_name": "enableAccessibilityChecks",
        "method_code": "@Before\n    public void enableAccessibilityChecks() {\n        androidx.test.espresso.accessibility.AccessibilityChecks.enable().setRunChecksFromRootView(true);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled enableAccessibilityChecks from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: enableAccessibilityChecks\n\n        Method Code: @Before\n    public void enableAccessibilityChecks() {\n        androidx.test.espresso.accessibility.AccessibilityChecks.enable().setRunChecksFromRootView(true);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport XCTest\n\nclass AbstractIT: XCTestCase {\n    override func setUp() {\n        super.setUp()\n        // Assuming a similar accessibility check setup exists in Swift\n        // This is a placeholder as XCTest does not have a direct equivalent\n        // AccessibilityChecks.enable().setRunChecksFromRootView(true)\n    }\n}\n```"
    },
    {
        "method_name": "after",
        "method_code": "@After\n    public void after() {\n        fileDataStorageManager.removeLocalFiles(user, fileDataStorageManager);\n        fileDataStorageManager.deleteAllFiles();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled after from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: after\n\n        Method Code: @After\n    public void after() {\n        fileDataStorageManager.removeLocalFiles(user, fileDataStorageManager);\n        fileDataStorageManager.deleteAllFiles();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc after() {\n    fileDataStorageManager.removeLocalFiles(user: user, fileDataStorageManager: fileDataStorageManager)\n    fileDataStorageManager.deleteAllFiles()\n}\n```"
    },
    {
        "method_name": "getStorageManager",
        "method_code": "protected FileDataStorageManager getStorageManager() {\n        return fileDataStorageManager;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getStorageManager from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: getStorageManager\n\n        Method Code: protected FileDataStorageManager getStorageManager() {\n        return fileDataStorageManager;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getStorageManager() -> FileDataStorageManager {\n    return fileDataStorageManager\n}\n```"
    },
    {
        "method_name": "getAllAccounts",
        "method_code": "protected Account[] getAllAccounts() {\n        return AccountManager.get(targetContext).getAccounts();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getAllAccounts from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: getAllAccounts\n\n        Method Code: protected Account[] getAllAccounts() {\n        return AccountManager.get(targetContext).getAccounts();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getAllAccounts() -> [Account] {\n    return AccountManager.get(targetContext).accounts\n}\n```"
    },
    {
        "method_name": "createDummyFiles",
        "method_code": "protected static void createDummyFiles() throws IOException {\n        File tempPath = new File(FileStorageUtils.getTemporalPath(account.name));\n        if (!tempPath.exists()) {\n            assertTrue(tempPath.mkdirs());\n        }\n\n        assertTrue(tempPath.exists());\n\n        createFile(\"empty.txt\", 0);\n        createFile(\"nonEmpty.txt\", 100);\n        createFile(\"chunkedFile.txt\", 500000);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled createDummyFiles from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: createDummyFiles\n\n        Method Code: protected static void createDummyFiles() throws IOException {\n        File tempPath = new File(FileStorageUtils.getTemporalPath(account.name));\n        if (!tempPath.exists()) {\n            assertTrue(tempPath.mkdirs());\n        }\n\n        assertTrue(tempPath.exists());\n\n        createFile(\"empty.txt\", 0);\n        createFile(\"nonEmpty.txt\", 100);\n        createFile(\"chunkedFile.txt\", 500000);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport Foundation\n\nfunc createDummyFiles() throws {\n    let tempPath = FileStorageUtils.getTemporalPath(account.name)\n    let fileManager = FileManager.default\n\n    if !fileManager.fileExists(atPath: tempPath) {\n        try fileManager.createDirectory(atPath: tempPath, withIntermediateDirectories: true, attributes: nil)\n    }\n\n    assert(fileManager.fileExists(atPath: tempPath))\n\n    try createFile(name: \"empty.txt\", size: 0)\n    try createFile(name: \"nonEmpty.txt\", size: 100)\n    try createFile(name: \"chunkedFile.txt\", size: 500000)\n}\n\nfunc createFile(name: String, size: Int) throws {\n    let filePath = FileStorageUtils.getTemporalPath(account.name).appending(\"/\\(name)\")\n    let data = Data(count: size)\n    try data.write(to: URL(fileURLWithPath: filePath))\n}\n```"
    },
    {
        "method_name": "getDummyFile",
        "method_code": "protected static File getDummyFile(String name) throws IOException {\n        File file = new File(FileStorageUtils.getInternalTemporalPath(account.name, targetContext) + File.separator + name);\n\n        if (file.exists()) {\n            return file;\n        } else if (name.endsWith(\"/\")) {\n            file.mkdirs();\n            return file;\n        } else {\n            switch (name) {\n                case \"empty.txt\":\n                    return createFile(\"empty.txt\", 0);\n\n                case \"nonEmpty.txt\":\n                    return createFile(\"nonEmpty.txt\", 100);\n\n                case \"chunkedFile.txt\":\n                    return createFile(\"chunkedFile.txt\", 500000);\n\n                default:\n                    return createFile(name, 0);\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getDummyFile from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: getDummyFile\n\n        Method Code: protected static File getDummyFile(String name) throws IOException {\n        File file = new File(FileStorageUtils.getInternalTemporalPath(account.name, targetContext) + File.separator + name);\n\n        if (file.exists()) {\n            return file;\n        } else if (name.endsWith(\"/\")) {\n            file.mkdirs();\n            return file;\n        } else {\n            switch (name) {\n                case \"empty.txt\":\n                    return createFile(\"empty.txt\", 0);\n\n                case \"nonEmpty.txt\":\n                    return createFile(\"nonEmpty.txt\", 100);\n\n                case \"chunkedFile.txt\":\n                    return createFile(\"chunkedFile.txt\", 500000);\n\n                default:\n                    return createFile(name, 0);\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport Foundation\n\nenum FileError: Error {\n    case creationFailed\n}\n\nfunc getDummyFile(name: String) throws -> URL {\n    let fileManager = FileManager.default\n    let internalPath = FileStorageUtils.getInternalTemporalPath(account.name, targetContext)\n    let fileURL = URL(fileURLWithPath: internalPath).appendingPathComponent(name)\n\n    if fileManager.fileExists(atPath: fileURL.path) {\n        return fileURL\n    } else if name.hasSuffix(\"/\") {\n        try fileManager.createDirectory(at: fileURL, withIntermediateDirectories: true, attributes: nil)\n        return fileURL\n    } else {\n        switch name {\n        case \"empty.txt\":\n            return try createFile(name: \"empty.txt\", size: 0)\n\n        case \"nonEmpty.txt\":\n            return try createFile(name: \"nonEmpty.txt\", size: 100)\n\n        case \"chunkedFile.txt\":\n            return try createFile(name: \"chunkedFile.txt\", size: 500000)\n\n        default:\n            return try createFile(name: name, size: 0)\n        }\n    }\n}\n\nfunc createFile(name: String, size: Int) throws -> URL {\n    let fileManager = FileManager.default\n    let internalPath = FileStorageUtils.getInternalTemporalPath(account.name, targetContext)\n    let fileURL = URL(fileURLWithPath: internalPath).appendingPathComponent(name)\n\n    let data = Data(count: size)\n    if fileManager.createFile(atPath: fileURL.path, contents: data, attributes: nil) {\n        return fileURL\n    } else {\n        throw FileError.creationFailed\n    }\n}\n```"
    },
    {
        "method_name": "createFile",
        "method_code": "public static File createFile(String name, int iteration) throws IOException {\n        File file = new File(FileStorageUtils.getTemporalPath(account.name) + File.separator + name);\n        if (!file.getParentFile().exists()) {\n            assertTrue(file.getParentFile().mkdirs());\n        }\n\n        file.createNewFile();\n\n        FileWriter writer = new FileWriter(file);\n\n        for (int i = 0; i < iteration; i++) {\n            writer.write(\"123123123123123123123123123\\n\");\n        }\n        writer.flush();\n        writer.close();\n\n        return file;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled createFile from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: createFile\n\n        Method Code: public static File createFile(String name, int iteration) throws IOException {\n        File file = new File(FileStorageUtils.getTemporalPath(account.name) + File.separator + name);\n        if (!file.getParentFile().exists()) {\n            assertTrue(file.getParentFile().mkdirs());\n        }\n\n        file.createNewFile();\n\n        FileWriter writer = new FileWriter(file);\n\n        for (int i = 0; i < iteration; i++) {\n            writer.write(\"123123123123123123123123123\\n\");\n        }\n        writer.flush();\n        writer.close();\n\n        return file;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport Foundation\n\nfunc createFile(name: String, iteration: Int) throws -> URL {\n    let fileManager = FileManager.default\n    let temporalPath = FileStorageUtils.getTemporalPath(account.name)\n    let fileURL = URL(fileURLWithPath: temporalPath).appendingPathComponent(name)\n    \n    if !fileManager.fileExists(atPath: fileURL.deletingLastPathComponent().path) {\n        try fileManager.createDirectory(at: fileURL.deletingLastPathComponent(), withIntermediateDirectories: true, attributes: nil)\n    }\n    \n    fileManager.createFile(atPath: fileURL.path, contents: nil, attributes: nil)\n    \n    let fileHandle = try FileHandle(forWritingTo: fileURL)\n    defer {\n        fileHandle.closeFile()\n    }\n    \n    for _ in 0..<iteration {\n        if let data = \"123123123123123123123123123\\n\".data(using: .utf8) {\n            fileHandle.write(data)\n        }\n    }\n    \n    return fileURL\n}\n```"
    },
    {
        "method_name": "getFile",
        "method_code": "protected File getFile(String filename) throws IOException {\n        InputStream inputStream = getInstrumentation().getContext().getAssets().open(filename);\n        File temp = File.createTempFile(\"file\", \"file\");\n        FileUtils.copyInputStreamToFile(inputStream, temp);\n\n        return temp;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getFile from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: getFile\n\n        Method Code: protected File getFile(String filename) throws IOException {\n        InputStream inputStream = getInstrumentation().getContext().getAssets().open(filename);\n        File temp = File.createTempFile(\"file\", \"file\");\n        FileUtils.copyInputStreamToFile(inputStream, temp);\n\n        return temp;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getFile(filename: String) throws -> URL {\n    guard let inputStream = Bundle.main.url(forResource: filename, withExtension: nil) else {\n        throw NSError(domain: \"FileError\", code: 0, userInfo: nil)\n    }\n    let tempDirectory = FileManager.default.temporaryDirectory\n    let tempFileURL = tempDirectory.appendingPathComponent(\"file\")\n    try FileManager.default.copyItem(at: inputStream, to: tempFileURL)\n    \n    return tempFileURL\n}\n```"
    },
    {
        "method_name": "waitForIdleSync",
        "method_code": "protected void waitForIdleSync() {\n        InstrumentationRegistry.getInstrumentation().waitForIdleSync();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled waitForIdleSync from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: waitForIdleSync\n\n        Method Code: protected void waitForIdleSync() {\n        InstrumentationRegistry.getInstrumentation().waitForIdleSync();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc waitForIdleSync() {\n    XCUIApplication().wait(for: .idle, timeout: 0)\n}\n```"
    },
    {
        "method_name": "onIdleSync",
        "method_code": "protected void onIdleSync(Runnable recipient) {\n        InstrumentationRegistry.getInstrumentation().waitForIdle(recipient);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onIdleSync from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: onIdleSync\n\n        Method Code: protected void onIdleSync(Runnable recipient) {\n        InstrumentationRegistry.getInstrumentation().waitForIdle(recipient);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onIdleSync(recipient: @escaping () -> Void) {\n    let instrumentation = InstrumentationRegistry.getInstrumentation()\n    instrumentation.waitForIdle(recipient)\n}\n```"
    },
    {
        "method_name": "openDrawer",
        "method_code": "protected void openDrawer(IntentsTestRule activityRule) {\n        Activity sut = activityRule.launchActivity(null);\n\n        shortSleep();\n\n        onView(withId(R.id.drawer_layout)).perform(DrawerActions.open());\n\n        waitForIdleSync();\n\n        screenshot(sut);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled openDrawer from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: openDrawer\n\n        Method Code: protected void openDrawer(IntentsTestRule activityRule) {\n        Activity sut = activityRule.launchActivity(null);\n\n        shortSleep();\n\n        onView(withId(R.id.drawer_layout)).perform(DrawerActions.open());\n\n        waitForIdleSync();\n\n        screenshot(sut);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc openDrawer(activityRule: XCUIApplication) {\n    let sut = activityRule.launch()\n\n    shortSleep()\n\n    let drawerLayout = sut.descendants(matching: .any).matching(identifier: \"drawer_layout\").element\n    drawerLayout.swipeRight()\n\n    waitForIdleSync()\n\n    screenshot(sut)\n}\n```"
    },
    {
        "method_name": "getCurrentActivity",
        "method_code": "protected Activity getCurrentActivity() {\n        InstrumentationRegistry.getInstrumentation().runOnMainSync(() -> {\n            Collection<Activity> resumedActivities = ActivityLifecycleMonitorRegistry\n                .getInstance()\n                .getActivitiesInStage(Stage.RESUMED);\n\n            if (resumedActivities.iterator().hasNext()) {\n                currentActivity = resumedActivities.iterator().next();\n            }\n        });\n\n        return currentActivity;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getCurrentActivity from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: getCurrentActivity\n\n        Method Code: protected Activity getCurrentActivity() {\n        InstrumentationRegistry.getInstrumentation().runOnMainSync(() -> {\n            Collection<Activity> resumedActivities = ActivityLifecycleMonitorRegistry\n                .getInstance()\n                .getActivitiesInStage(Stage.RESUMED);\n\n            if (resumedActivities.iterator().hasNext()) {\n                currentActivity = resumedActivities.iterator().next();\n            }\n        });\n\n        return currentActivity;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getCurrentActivity() -> Activity? {\n    var currentActivity: Activity?\n    DispatchQueue.main.sync {\n        let resumedActivities = ActivityLifecycleMonitorRegistry.shared.getActivitiesInStage(.resumed)\n        if let activity = resumedActivities.first {\n            currentActivity = activity\n        }\n    }\n    return currentActivity\n}\n```"
    },
    {
        "method_name": "shortSleep",
        "method_code": "protected static void shortSleep() {\n        try {\n            Thread.sleep(2000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled shortSleep from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: shortSleep\n\n        Method Code: protected static void shortSleep() {\n        try {\n            Thread.sleep(2000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc shortSleep() {\n    do {\n        try Thread.sleep(forTimeInterval: 2.0)\n    } catch {\n        print(error)\n    }\n}\n```"
    },
    {
        "method_name": "longSleep",
        "method_code": "protected void longSleep() {\n        try {\n            Thread.sleep(20000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled longSleep from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: longSleep\n\n        Method Code: protected void longSleep() {\n        try {\n            Thread.sleep(20000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc longSleep() {\n    do {\n        try Thread.sleep(forTimeInterval: 20.0)\n    } catch {\n        print(error)\n    }\n}\n```"
    },
    {
        "method_name": "sleep",
        "method_code": "protected void sleep(int second) {\n        try {\n            Thread.sleep(1000L * second);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled sleep from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: sleep\n\n        Method Code: protected void sleep(int second) {\n        try {\n            Thread.sleep(1000L * second);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc sleep(seconds: Int) {\n    do {\n        try Thread.sleep(forTimeInterval: TimeInterval(seconds))\n    } catch {\n        print(error)\n    }\n}\n```"
    },
    {
        "method_name": "createFolder",
        "method_code": "public OCFile createFolder(String remotePath) {\n        RemoteOperationResult check = new ExistenceCheckRemoteOperation(remotePath, false).execute(client);\n\n        if (!check.isSuccess()) {\n            assertTrue(new CreateFolderOperation(remotePath, user, targetContext, getStorageManager())\n                           .execute(client)\n                           .isSuccess());\n        }\n\n        return getStorageManager().getFileByDecryptedRemotePath(remotePath.endsWith(\"/\") ? remotePath : remotePath + \"/\");\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled createFolder from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: createFolder\n\n        Method Code: public OCFile createFolder(String remotePath) {\n        RemoteOperationResult check = new ExistenceCheckRemoteOperation(remotePath, false).execute(client);\n\n        if (!check.isSuccess()) {\n            assertTrue(new CreateFolderOperation(remotePath, user, targetContext, getStorageManager())\n                           .execute(client)\n                           .isSuccess());\n        }\n\n        return getStorageManager().getFileByDecryptedRemotePath(remotePath.endsWith(\"/\") ? remotePath : remotePath + \"/\");\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc createFolder(remotePath: String) -> OCFile? {\n    let check = ExistenceCheckRemoteOperation(remotePath: remotePath, isFolder: false).execute(client: client)\n\n    if !check.isSuccess {\n        assert(CreateFolderOperation(remotePath: remotePath, user: user, targetContext: targetContext, storageManager: getStorageManager())\n                   .execute(client: client)\n                   .isSuccess)\n    }\n\n    return getStorageManager().getFileByDecryptedRemotePath(remotePath.hasSuffix(\"/\") ? remotePath : remotePath + \"/\")\n}\n```"
    },
    {
        "method_name": "uploadFile",
        "method_code": "public void uploadFile(File file, String remotePath) {\n        OCUpload ocUpload = new OCUpload(file.getAbsolutePath(), remotePath, account.name);\n\n        uploadOCUpload(ocUpload);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled uploadFile from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: uploadFile\n\n        Method Code: public void uploadFile(File file, String remotePath) {\n        OCUpload ocUpload = new OCUpload(file.getAbsolutePath(), remotePath, account.name);\n\n        uploadOCUpload(ocUpload);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc uploadFile(file: File, remotePath: String) {\n    let ocUpload = OCUpload(file.getAbsolutePath(), remotePath, account.name)\n    uploadOCUpload(ocUpload)\n}\n```"
    },
    {
        "method_name": "uploadOCUpload",
        "method_code": "public void uploadOCUpload(OCUpload ocUpload) {\n        ConnectivityService connectivityServiceMock = new ConnectivityService() {\n            @Override\n            public void isNetworkAndServerAvailable(@NonNull GenericCallback<Boolean> callback) {\n\n            }\n\n            @Override\n            public boolean isConnected() {\n                return false;\n            }\n\n            @Override\n            public boolean isInternetWalled() {\n                return false;\n            }\n\n            @Override\n            public Connectivity getConnectivity() {\n                return Connectivity.CONNECTED_WIFI;\n            }\n        };\n\n        PowerManagementService powerManagementServiceMock = new PowerManagementService() {\n            @NonNull\n            @Override\n            public BatteryStatus getBattery() {\n                return new BatteryStatus();\n            }\n\n            @Override\n            public boolean isPowerSavingEnabled() {\n                return false;\n            }\n\n            @Override\n            public boolean isPowerSavingExclusionAvailable() {\n                return false;\n            }\n        };\n\n        UserAccountManager accountManager = UserAccountManagerImpl.fromContext(targetContext);\n        UploadsStorageManager uploadsStorageManager = new UploadsStorageManager(accountManager,\n                                                                                targetContext.getContentResolver());\n\n        UploadFileOperation newUpload = new UploadFileOperation(\n            uploadsStorageManager,\n            connectivityServiceMock,\n            powerManagementServiceMock,\n            user,\n            null,\n            ocUpload,\n            NameCollisionPolicy.DEFAULT,\n            FileUploadWorker.LOCAL_BEHAVIOUR_COPY,\n            targetContext,\n            false,\n            false,\n            getStorageManager()\n        );\n        newUpload.addRenameUploadListener(() -> {\n            // dummy\n        });\n\n        newUpload.setRemoteFolderToBeCreated();\n\n        RemoteOperationResult result = newUpload.execute(client);\n        assertTrue(result.getLogMessage(), result.isSuccess());\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled uploadOCUpload from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: uploadOCUpload\n\n        Method Code: public void uploadOCUpload(OCUpload ocUpload) {\n        ConnectivityService connectivityServiceMock = new ConnectivityService() {\n            @Override\n            public void isNetworkAndServerAvailable(@NonNull GenericCallback<Boolean> callback) {\n\n            }\n\n            @Override\n            public boolean isConnected() {\n                return false;\n            }\n\n            @Override\n            public boolean isInternetWalled() {\n                return false;\n            }\n\n            @Override\n            public Connectivity getConnectivity() {\n                return Connectivity.CONNECTED_WIFI;\n            }\n        };\n\n        PowerManagementService powerManagementServiceMock = new PowerManagementService() {\n            @NonNull\n            @Override\n            public BatteryStatus getBattery() {\n                return new BatteryStatus();\n            }\n\n            @Override\n            public boolean isPowerSavingEnabled() {\n                return false;\n            }\n\n            @Override\n            public boolean isPowerSavingExclusionAvailable() {\n                return false;\n            }\n        };\n\n        UserAccountManager accountManager = UserAccountManagerImpl.fromContext(targetContext);\n        UploadsStorageManager uploadsStorageManager = new UploadsStorageManager(accountManager,\n                                                                                targetContext.getContentResolver());\n\n        UploadFileOperation newUpload = new UploadFileOperation(\n            uploadsStorageManager,\n            connectivityServiceMock,\n            powerManagementServiceMock,\n            user,\n            null,\n            ocUpload,\n            NameCollisionPolicy.DEFAULT,\n            FileUploadWorker.LOCAL_BEHAVIOUR_COPY,\n            targetContext,\n            false,\n            false,\n            getStorageManager()\n        );\n        newUpload.addRenameUploadListener(() -> {\n            // dummy\n        });\n\n        newUpload.setRemoteFolderToBeCreated();\n\n        RemoteOperationResult result = newUpload.execute(client);\n        assertTrue(result.getLogMessage(), result.isSuccess());\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc uploadOCUpload(ocUpload: OCUpload) {\n    let connectivityServiceMock = ConnectivityServiceMock()\n    let powerManagementServiceMock = PowerManagementServiceMock()\n    \n    let accountManager = UserAccountManagerImpl.fromContext(targetContext)\n    let uploadsStorageManager = UploadsStorageManager(accountManager: accountManager, contentResolver: targetContext.contentResolver)\n    \n    let newUpload = UploadFileOperation(\n        uploadsStorageManager: uploadsStorageManager,\n        connectivityService: connectivityServiceMock,\n        powerManagementService: powerManagementServiceMock,\n        user: user,\n        file: nil,\n        ocUpload: ocUpload,\n        nameCollisionPolicy: .default,\n        localBehaviour: .copy,\n        context: targetContext,\n        isInstantUpload: false,\n        isCameraUpload: false,\n        storageManager: getStorageManager()\n    )\n    \n    newUpload.addRenameUploadListener {\n        // dummy\n    }\n    \n    newUpload.setRemoteFolderToBeCreated()\n    \n    let result = newUpload.execute(client: client)\n    assert(result.isSuccess(), result.logMessage)\n}\n\nclass ConnectivityServiceMock: ConnectivityService {\n    func isNetworkAndServerAvailable(callback: @escaping (Bool) -> Void) {\n        // No implementation\n    }\n    \n    func isConnected() -> Bool {\n        return false\n    }\n    \n    func isInternetWalled() -> Bool {\n        return false\n    }\n    \n    func getConnectivity() -> Connectivity {\n        return .connectedWifi\n    }\n}\n\nclass PowerManagementServiceMock: PowerManagementService {\n    func getBattery() -> BatteryStatus {\n        return BatteryStatus()\n    }\n    \n    func isPowerSavingEnabled() -> Bool {\n        return false\n    }\n    \n    func isPowerSavingExclusionAvailable() -> Bool {\n        return false\n    }\n}\n```"
    },
    {
        "method_name": "isNetworkAndServerAvailable",
        "method_code": "@Override\n            public void isNetworkAndServerAvailable(@NonNull GenericCallback<Boolean> callback) {\n\n            }",
        "prompt": "\n        Please translate the following Java (Android) method titled isNetworkAndServerAvailable from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: isNetworkAndServerAvailable\n\n        Method Code: @Override\n            public void isNetworkAndServerAvailable(@NonNull GenericCallback<Boolean> callback) {\n\n            }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc isNetworkAndServerAvailable(callback: @escaping (Bool) -> Void) {\n\n}\n```"
    },
    {
        "method_name": "isConnected",
        "method_code": "@Override\n            public boolean isConnected() {\n                return false;\n            }",
        "prompt": "\n        Please translate the following Java (Android) method titled isConnected from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: isConnected\n\n        Method Code: @Override\n            public boolean isConnected() {\n                return false;\n            }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc isConnected() -> Bool {\n    return false\n}\n```"
    },
    {
        "method_name": "isInternetWalled",
        "method_code": "@Override\n            public boolean isInternetWalled() {\n                return false;\n            }",
        "prompt": "\n        Please translate the following Java (Android) method titled isInternetWalled from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: isInternetWalled\n\n        Method Code: @Override\n            public boolean isInternetWalled() {\n                return false;\n            }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc isInternetWalled() -> Bool {\n    return false\n}\n```"
    },
    {
        "method_name": "getConnectivity",
        "method_code": "@Override\n            public Connectivity getConnectivity() {\n                return Connectivity.CONNECTED_WIFI;\n            }",
        "prompt": "\n        Please translate the following Java (Android) method titled getConnectivity from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: getConnectivity\n\n        Method Code: @Override\n            public Connectivity getConnectivity() {\n                return Connectivity.CONNECTED_WIFI;\n            }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getConnectivity() -> Connectivity {\n    return .connectedWifi\n}\n```"
    },
    {
        "method_name": "getBattery",
        "method_code": "@NonNull\n            @Override\n            public BatteryStatus getBattery() {\n                return new BatteryStatus();\n            }",
        "prompt": "\n        Please translate the following Java (Android) method titled getBattery from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: getBattery\n\n        Method Code: @NonNull\n            @Override\n            public BatteryStatus getBattery() {\n                return new BatteryStatus();\n            }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func getBattery() -> BatteryStatus {\n    return BatteryStatus()\n}\n```"
    },
    {
        "method_name": "isPowerSavingEnabled",
        "method_code": "@Override\n            public boolean isPowerSavingEnabled() {\n                return false;\n            }",
        "prompt": "\n        Please translate the following Java (Android) method titled isPowerSavingEnabled from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: isPowerSavingEnabled\n\n        Method Code: @Override\n            public boolean isPowerSavingEnabled() {\n                return false;\n            }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc isPowerSavingEnabled() -> Bool {\n    return false\n}\n```"
    },
    {
        "method_name": "isPowerSavingExclusionAvailable",
        "method_code": "@Override\n            public boolean isPowerSavingExclusionAvailable() {\n                return false;\n            }",
        "prompt": "\n        Please translate the following Java (Android) method titled isPowerSavingExclusionAvailable from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: isPowerSavingExclusionAvailable\n\n        Method Code: @Override\n            public boolean isPowerSavingExclusionAvailable() {\n                return false;\n            }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc isPowerSavingExclusionAvailable() -> Bool {\n    return false\n}\n```"
    },
    {
        "method_name": "enableRTL",
        "method_code": "protected void enableRTL() {\n        Locale locale = new Locale(\"ar\");\n        Resources resources = InstrumentationRegistry.getInstrumentation().getTargetContext().getResources();\n        Configuration config = resources.getConfiguration();\n        config.setLocale(locale);\n        resources.updateConfiguration(config, null);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled enableRTL from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: enableRTL\n\n        Method Code: protected void enableRTL() {\n        Locale locale = new Locale(\"ar\");\n        Resources resources = InstrumentationRegistry.getInstrumentation().getTargetContext().getResources();\n        Configuration config = resources.getConfiguration();\n        config.setLocale(locale);\n        resources.updateConfiguration(config, null);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc enableRTL() {\n    let locale = Locale(identifier: \"ar\")\n    let resources = Bundle.main\n    var config = resources.preferredLocalizations.first\n    config = locale.identifier\n    UserDefaults.standard.set([locale.identifier], forKey: \"AppleLanguages\")\n    UserDefaults.standard.synchronize()\n}\n```"
    },
    {
        "method_name": "resetLocale",
        "method_code": "protected void resetLocale() {\n        Locale locale = new Locale(\"en\");\n        Resources resources = InstrumentationRegistry.getInstrumentation().getTargetContext().getResources();\n        Configuration config = resources.getConfiguration();\n        config.setLocale(locale);\n        resources.updateConfiguration(config, null);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled resetLocale from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: resetLocale\n\n        Method Code: protected void resetLocale() {\n        Locale locale = new Locale(\"en\");\n        Resources resources = InstrumentationRegistry.getInstrumentation().getTargetContext().getResources();\n        Configuration config = resources.getConfiguration();\n        config.setLocale(locale);\n        resources.updateConfiguration(config, null);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport Foundation\n\nfunc resetLocale() {\n    let locale = Locale(identifier: \"en\")\n    let resources = Bundle.main\n    var config = resources.preferredLocalizations.first\n    config = locale.identifier\n    UserDefaults.standard.set([locale.identifier], forKey: \"AppleLanguages\")\n    UserDefaults.standard.synchronize()\n}\n```"
    },
    {
        "method_name": "screenshot",
        "method_code": "protected void screenshot(View view) {\n        screenshot(view, \"\");\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled screenshot from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: screenshot\n\n        Method Code: protected void screenshot(View view) {\n        screenshot(view, \"\");\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc screenshot(view: UIView) {\n    screenshot(view: view, \"\")\n}\n```"
    },
    {
        "method_name": "screenshotViaName",
        "method_code": "protected void screenshotViaName(Activity activity, String name) {\n        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.R) {\n            Screenshot.snapActivity(activity).setName(name).record();\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled screenshotViaName from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: screenshotViaName\n\n        Method Code: protected void screenshotViaName(Activity activity, String name) {\n        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.R) {\n            Screenshot.snapActivity(activity).setName(name).record();\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc screenshotViaName(activity: Activity, name: String) {\n    if #available(iOS 14, *) {\n        // iOS 14 equivalent code for taking a screenshot\n    } else {\n        // Fallback for earlier versions\n    }\n}\n```"
    },
    {
        "method_name": "screenshot",
        "method_code": "protected void screenshot(View view, String prefix) {\n        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.R) {\n            Screenshot.snap(view).setName(createName(prefix)).record();\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled screenshot from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: screenshot\n\n        Method Code: protected void screenshot(View view, String prefix) {\n        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.R) {\n            Screenshot.snap(view).setName(createName(prefix)).record();\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc screenshot(view: UIView, prefix: String) {\n    if #available(iOS 14, *) {\n        // iOS 14 and above specific code\n    } else {\n        // Assuming a similar functionality to Screenshot.snap(view).setName(createName(prefix)).record()\n        // This part would need a custom implementation or third-party library in Swift\n    }\n}\n```"
    },
    {
        "method_name": "screenshot",
        "method_code": "protected void screenshot(Activity sut) {\n        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.R) {\n            Screenshot.snapActivity(sut).setName(createName()).record();\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled screenshot from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: screenshot\n\n        Method Code: protected void screenshot(Activity sut) {\n        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.R) {\n            Screenshot.snapActivity(sut).setName(createName()).record();\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc screenshot(_ sut: Activity) {\n    if #available(iOS 14, *) {\n        // iOS 14 equivalent code for taking a screenshot\n    } else {\n        Screenshot.snapActivity(sut).setName(createName()).record()\n    }\n}\n```"
    },
    {
        "method_name": "screenshot",
        "method_code": "protected void screenshot(DialogFragment dialogFragment, String prefix) {\n        screenshot(Objects.requireNonNull(dialogFragment.requireDialog().getWindow()).getDecorView(), prefix);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled screenshot from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: screenshot\n\n        Method Code: protected void screenshot(DialogFragment dialogFragment, String prefix) {\n        screenshot(Objects.requireNonNull(dialogFragment.requireDialog().getWindow()).getDecorView(), prefix);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc screenshot(dialogFragment: DialogFragment, prefix: String) {\n    screenshot(view: dialogFragment.requireDialog().window?.decorView, prefix: prefix)\n}\n```"
    },
    {
        "method_name": "createName",
        "method_code": "private String createName() {\n        return createName(\"\");\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled createName from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: createName\n\n        Method Code: private String createName() {\n        return createName(\"\");\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func createName() -> String {\n    return createName(\"\")\n}\n```"
    },
    {
        "method_name": "createName",
        "method_code": "public String createName(String name, String prefix) {\n        if (!TextUtils.isEmpty(prefix)) {\n            name = name + \"_\" + prefix;\n        }\n\n        if (!DARK_MODE.isEmpty()) {\n            name = name + \"_\" + DARK_MODE;\n        }\n\n        if (!COLOR.isEmpty()) {\n            name = name + \"_\" + COLOR;\n        }\n\n        return name;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled createName from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: createName\n\n        Method Code: public String createName(String name, String prefix) {\n        if (!TextUtils.isEmpty(prefix)) {\n            name = name + \"_\" + prefix;\n        }\n\n        if (!DARK_MODE.isEmpty()) {\n            name = name + \"_\" + DARK_MODE;\n        }\n\n        if (!COLOR.isEmpty()) {\n            name = name + \"_\" + COLOR;\n        }\n\n        return name;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc createName(name: String, prefix: String) -> String {\n    var name = name\n    \n    if !prefix.isEmpty {\n        name += \"_\\(prefix)\"\n    }\n    \n    if !DARK_MODE.isEmpty {\n        name += \"_\\(DARK_MODE)\"\n    }\n    \n    if !COLOR.isEmpty {\n        name += \"_\\(COLOR)\"\n    }\n    \n    return name\n}\n```"
    },
    {
        "method_name": "createName",
        "method_code": "private String createName(String prefix) {\n        String name = TestNameDetector.getTestClass() + \"_\" + TestNameDetector.getTestName();\n        return createName(name, prefix);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled createName from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: createName\n\n        Method Code: private String createName(String prefix) {\n        String name = TestNameDetector.getTestClass() + \"_\" + TestNameDetector.getTestName();\n        return createName(name, prefix);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func createName(prefix: String) -> String {\n    let name = \"\\(TestNameDetector.getTestClass())_\\(TestNameDetector.getTestName())\"\n    return createName(name, prefix: prefix)\n}\n```"
    },
    {
        "method_name": "getUserId",
        "method_code": "public static String getUserId(User user) {\n        return AccountManager.get(targetContext).getUserData(user.toPlatformAccount(), KEY_USER_ID);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getUserId from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: getUserId\n\n        Method Code: public static String getUserId(User user) {\n        return AccountManager.get(targetContext).getUserData(user.toPlatformAccount(), KEY_USER_ID);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func getUserId(user: User) -> String? {\n    return AccountManager.get(targetContext).getUserData(user.toPlatformAccount(), key: KEY_USER_ID)\n}\n```"
    },
    {
        "method_name": "getRandomName",
        "method_code": "public String getRandomName() {\n        return getRandomName(5);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getRandomName from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: getRandomName\n\n        Method Code: public String getRandomName() {\n        return getRandomName(5);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getRandomName() -> String {\n    return getRandomName(5)\n}\n```"
    },
    {
        "method_name": "getRandomName",
        "method_code": "public String getRandomName(int length) {\n        return RandomStringGenerator.make(length);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getRandomName from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: getRandomName\n\n        Method Code: public String getRandomName(int length) {\n        return RandomStringGenerator.make(length);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getRandomName(length: Int) -> String {\n    return RandomStringGenerator.make(length)\n}\n```"
    },
    {
        "method_name": "getUser",
        "method_code": "protected static User getUser(Account account) {\n        Optional<User> optionalUser = UserAccountManagerImpl.fromContext(targetContext).getUser(account.name);\n        return optionalUser.orElseThrow(IllegalAccessError::new);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getUser from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: getUser\n\n        Method Code: protected static User getUser(Account account) {\n        Optional<User> optionalUser = UserAccountManagerImpl.fromContext(targetContext).getUser(account.name);\n        return optionalUser.orElseThrow(IllegalAccessError::new);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprotected static func getUser(account: Account) throws -> User {\n    let optionalUser = UserAccountManagerImpl.fromContext(targetContext).getUser(account.name)\n    guard let user = optionalUser else {\n        throw IllegalAccessError()\n    }\n    return user\n}\n```"
    },
    {
        "method_name": "createAccount",
        "method_code": "protected static Account createAccount(String name) {\n        AccountManager platformAccountManager = AccountManager.get(targetContext);\n\n        Account temp = new Account(name, MainApp.getAccountType(targetContext));\n        int atPos = name.lastIndexOf('@');\n        platformAccountManager.addAccountExplicitly(temp, \"password\", null);\n        platformAccountManager.setUserData(temp, AccountUtils.Constants.KEY_OC_BASE_URL,\n                                           name.substring(atPos + 1));\n        platformAccountManager.setUserData(temp, KEY_USER_ID, name.substring(0, atPos));\n\n        Account account = UserAccountManagerImpl.fromContext(targetContext).getAccountByName(name);\n        if (account == null) {\n            throw new ActivityNotFoundException();\n        }\n        return account;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled createAccount from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: createAccount\n\n        Method Code: protected static Account createAccount(String name) {\n        AccountManager platformAccountManager = AccountManager.get(targetContext);\n\n        Account temp = new Account(name, MainApp.getAccountType(targetContext));\n        int atPos = name.lastIndexOf('@');\n        platformAccountManager.addAccountExplicitly(temp, \"password\", null);\n        platformAccountManager.setUserData(temp, AccountUtils.Constants.KEY_OC_BASE_URL,\n                                           name.substring(atPos + 1));\n        platformAccountManager.setUserData(temp, KEY_USER_ID, name.substring(0, atPos));\n\n        Account account = UserAccountManagerImpl.fromContext(targetContext).getAccountByName(name);\n        if (account == null) {\n            throw new ActivityNotFoundException();\n        }\n        return account;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport Foundation\n\nclass AccountManager {\n    static func get(_ context: Any) -> AccountManager {\n        // Implementation to get AccountManager\n    }\n    \n    func addAccountExplicitly(_ account: Account, _ password: String, _ userdata: Any?) {\n        // Implementation to add account explicitly\n    }\n    \n    func setUserData(_ account: Account, _ key: String, _ value: String) {\n        // Implementation to set user data\n    }\n}\n\nclass MainApp {\n    static func getAccountType(_ context: Any) -> String {\n        // Implementation to get account type\n    }\n}\n\nclass UserAccountManagerImpl {\n    static func fromContext(_ context: Any) -> UserAccountManagerImpl {\n        // Implementation to get UserAccountManagerImpl\n    }\n    \n    func getAccountByName(_ name: String) -> Account? {\n        // Implementation to get account by name\n    }\n}\n\nclass Account {\n    var name: String\n    var type: String\n    \n    init(_ name: String, _ type: String) {\n        self.name = name\n        self.type = type\n    }\n}\n\nclass AccountUtils {\n    struct Constants {\n        static let KEY_OC_BASE_URL = \"oc_base_url\"\n    }\n}\n\nlet KEY_USER_ID = \"user_id\"\nlet targetContext: Any = // Context object\n\nfunc createAccount(name: String) throws -> Account {\n    let platformAccountManager = AccountManager.get(targetContext)\n    \n    let temp = Account(name, MainApp.getAccountType(targetContext))\n    if let atPos = name.lastIndex(of: \"@\") {\n        platformAccountManager.addAccountExplicitly(temp, \"password\", nil)\n        platformAccountManager.setUserData(temp, AccountUtils.Constants.KEY_OC_BASE_URL, String(name[name.index(after: atPos)...]))\n        platformAccountManager.setUserData(temp, KEY_USER_ID, String(name[..<atPos]))\n    }\n    \n    if let account = UserAccountManagerImpl.fromContext(targetContext).getAccountByName(name) {\n        return account\n    } else {\n        throw NSError(domain: \"ActivityNotFoundException\", code: 0, userInfo: nil)\n    }\n}\n```"
    },
    {
        "method_name": "removeAccount",
        "method_code": "protected static boolean removeAccount(Account account) {\n        return AccountManager.get(targetContext).removeAccountExplicitly(account);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled removeAccount from AbstractIT.java into Swift.\n\n        Input:\n\n        Method Name: removeAccount\n\n        Method Code: protected static boolean removeAccount(Account account) {\n        return AccountManager.get(targetContext).removeAccountExplicitly(account);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprotected static func removeAccount(account: Account) -> Bool {\n    return AccountManager.get(targetContext).removeAccountExplicitly(account)\n}\n```"
    }
]