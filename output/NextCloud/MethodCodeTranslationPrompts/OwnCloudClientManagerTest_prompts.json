[
    {
        "method_name": "testUserId",
        "method_code": "@Test\n    public void testUserId() throws OperationCanceledException, AuthenticatorException, IOException,\n        AccountUtils.AccountNotFoundException {\n        Bundle arguments = InstrumentationRegistry.getArguments();\n\n        Uri url = Uri.parse(arguments.getString(\"TEST_SERVER_URL\"));\n        String loginName = arguments.getString(\"TEST_SERVER_USERNAME\");\n        String password = arguments.getString(\"TEST_SERVER_PASSWORD\");\n\n        AccountManager accountManager = AccountManager.get(targetContext);\n        String accountName = AccountUtils.buildAccountName(url, loginName);\n        Account newAccount = new Account(accountName, \"nextcloud\");\n\n        accountManager.addAccountExplicitly(newAccount, password, null);\n        accountManager.setUserData(newAccount, AccountUtils.Constants.KEY_OC_BASE_URL, url.toString());\n        accountManager.setUserData(newAccount, AccountUtils.Constants.KEY_USER_ID, loginName);\n\n        OwnCloudClientManager manager = new OwnCloudClientManager();\n        OwnCloudAccount account = new OwnCloudAccount(newAccount, targetContext);\n\n        OwnCloudClient client = manager.getClientFor(account, targetContext);\n\n        assertEquals(loginName, client.getUserId());\n\n        accountManager.removeAccountExplicitly(newAccount);\n\n        assertEquals(1, accountManager.getAccounts().length);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled testUserId from OwnCloudClientManagerTest.java into Swift.\n\n        Input:\n\n        Method Name: testUserId\n\n        Method Code: @Test\n    public void testUserId() throws OperationCanceledException, AuthenticatorException, IOException,\n        AccountUtils.AccountNotFoundException {\n        Bundle arguments = InstrumentationRegistry.getArguments();\n\n        Uri url = Uri.parse(arguments.getString(\"TEST_SERVER_URL\"));\n        String loginName = arguments.getString(\"TEST_SERVER_USERNAME\");\n        String password = arguments.getString(\"TEST_SERVER_PASSWORD\");\n\n        AccountManager accountManager = AccountManager.get(targetContext);\n        String accountName = AccountUtils.buildAccountName(url, loginName);\n        Account newAccount = new Account(accountName, \"nextcloud\");\n\n        accountManager.addAccountExplicitly(newAccount, password, null);\n        accountManager.setUserData(newAccount, AccountUtils.Constants.KEY_OC_BASE_URL, url.toString());\n        accountManager.setUserData(newAccount, AccountUtils.Constants.KEY_USER_ID, loginName);\n\n        OwnCloudClientManager manager = new OwnCloudClientManager();\n        OwnCloudAccount account = new OwnCloudAccount(newAccount, targetContext);\n\n        OwnCloudClient client = manager.getClientFor(account, targetContext);\n\n        assertEquals(loginName, client.getUserId());\n\n        accountManager.removeAccountExplicitly(newAccount);\n\n        assertEquals(1, accountManager.getAccounts().length);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport XCTest\nimport Foundation\n\nclass OwnCloudClientManagerTest: XCTestCase {\n\n    func testUserId() throws {\n        let arguments = ProcessInfo.processInfo.environment\n\n        guard let urlString = arguments[\"TEST_SERVER_URL\"],\n              let url = URL(string: urlString),\n              let loginName = arguments[\"TEST_SERVER_USERNAME\"],\n              let password = arguments[\"TEST_SERVER_PASSWORD\"] else {\n            XCTFail(\"Missing test server arguments\")\n            return\n        }\n\n        let accountManager = AccountManager.shared\n        let accountName = AccountUtils.buildAccountName(url: url, loginName: loginName)\n        let newAccount = Account(name: accountName, type: \"nextcloud\")\n\n        accountManager.addAccountExplicitly(newAccount, password: password, userData: nil)\n        accountManager.setUserData(newAccount, key: AccountUtils.Constants.KEY_OC_BASE_URL, value: url.absoluteString)\n        accountManager.setUserData(newAccount, key: AccountUtils.Constants.KEY_USER_ID, value: loginName)\n\n        let manager = OwnCloudClientManager()\n        let account = OwnCloudAccount(account: newAccount, context: targetContext)\n\n        let client = manager.getClientFor(account: account, context: targetContext)\n\n        XCTAssertEqual(loginName, client.getUserId())\n\n        accountManager.removeAccountExplicitly(newAccount)\n\n        XCTAssertEqual(1, accountManager.getAccounts().count)\n    }\n}\n```"
    }
]