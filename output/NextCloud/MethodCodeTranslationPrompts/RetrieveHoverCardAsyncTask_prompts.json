[
    {
        "method_name": "doInBackground",
        "method_code": "@Override\n    protected HoverCard doInBackground(Void... voids) {\n        try {\n            NextcloudClient client = clientFactory.createNextcloudClient(user);\n            RemoteOperationResult<HoverCard> result = new GetHoverCardRemoteOperation(userId).execute(client);\n\n            if (result.isSuccess()) {\n                return result.getResultData();\n            } else {\n                return null;\n            }\n        } catch (ClientFactory.CreationException | NullPointerException e) {\n            return null;\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled doInBackground from RetrieveHoverCardAsyncTask.java into Swift.\n\n        Input:\n\n        Method Name: doInBackground\n\n        Method Code: @Override\n    protected HoverCard doInBackground(Void... voids) {\n        try {\n            NextcloudClient client = clientFactory.createNextcloudClient(user);\n            RemoteOperationResult<HoverCard> result = new GetHoverCardRemoteOperation(userId).execute(client);\n\n            if (result.isSuccess()) {\n                return result.getResultData();\n            } else {\n                return null;\n            }\n        } catch (ClientFactory.CreationException | NullPointerException e) {\n            return null;\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func doInBackground() -> HoverCard? {\n    do {\n        let client = try clientFactory.createNextcloudClient(user: user)\n        let operation = GetHoverCardRemoteOperation(userId: userId)\n        let result = operation.execute(client: client)\n\n        if result.isSuccess {\n            return result.getResultData()\n        } else {\n            return nil\n        }\n    } catch {\n        return nil\n    }\n}\n```"
    },
    {
        "method_name": "onPostExecute",
        "method_code": "@Override\n    protected void onPostExecute(HoverCard hoverCard) {\n        FragmentActivity activity = this.activityWeakReference.get();\n\n        if (activity != null && activity.getLifecycle().getCurrentState().isAtLeast(Lifecycle.State.RESUMED)) {\n            if (hoverCard.getActions().size() > 0) {\n                new ProfileBottomSheetDialog(activity,\n                                             user,\n                                             hoverCard,\n                                             viewThemeUtils)\n                    .show();\n            } else {\n                DisplayUtils.showSnackMessage(activity, R.string.no_actions);\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onPostExecute from RetrieveHoverCardAsyncTask.java into Swift.\n\n        Input:\n\n        Method Name: onPostExecute\n\n        Method Code: @Override\n    protected void onPostExecute(HoverCard hoverCard) {\n        FragmentActivity activity = this.activityWeakReference.get();\n\n        if (activity != null && activity.getLifecycle().getCurrentState().isAtLeast(Lifecycle.State.RESUMED)) {\n            if (hoverCard.getActions().size() > 0) {\n                new ProfileBottomSheetDialog(activity,\n                                             user,\n                                             hoverCard,\n                                             viewThemeUtils)\n                    .show();\n            } else {\n                DisplayUtils.showSnackMessage(activity, R.string.no_actions);\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onPostExecute(_ hoverCard: HoverCard?) {\n    guard let activity = self.activityWeakReference.get() as? FragmentActivity else { return }\n\n    if activity.lifecycle.currentState.isAtLeast(.resumed) {\n        if let hoverCard = hoverCard, hoverCard.actions.count > 0 {\n            ProfileBottomSheetDialog(activity: activity, user: user, hoverCard: hoverCard, viewThemeUtils: viewThemeUtils).show()\n        } else {\n            DisplayUtils.showSnackMessage(activity, R.string.no_actions)\n        }\n    }\n}\n```"
    }
]