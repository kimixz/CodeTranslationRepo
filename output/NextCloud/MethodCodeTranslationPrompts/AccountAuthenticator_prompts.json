[
    {
        "method_name": "addAccount",
        "method_code": "@Override\n    public Bundle addAccount(AccountAuthenticatorResponse response,\n                             String accountType, String authTokenType,\n                             String[] requiredFeatures, Bundle options) {\n        Log_OC.i(TAG, \"Adding account with type \" + accountType + \" and auth token \" + authTokenType);\n\n        AccountManager accountManager = AccountManager.get(mContext);\n        Account[] accounts = accountManager.getAccountsByType(MainApp.getAccountType(mContext));\n\n        final Bundle bundle = new Bundle();\n\n        if (accounts.length < 1 || MDMConfig.INSTANCE.multiAccountSupport(mContext)) {\n            try {\n                validateAccountType(accountType);\n            } catch (AuthenticatorException e) {\n                Log_OC.e(TAG, \"Failed to validate account type \" + accountType + \": \"\n                        + e.getMessage(), e);\n                return e.getFailureBundle();\n            }\n\n            Intent intent = new Intent(mContext, AuthenticatorActivity.class);\n            intent.putExtra(AccountManager.KEY_ACCOUNT_AUTHENTICATOR_RESPONSE, response);\n            intent.putExtra(KEY_AUTH_TOKEN_TYPE, authTokenType);\n            intent.putExtra(KEY_REQUIRED_FEATURES, requiredFeatures);\n            intent.putExtra(KEY_LOGIN_OPTIONS, options);\n            intent.putExtra(AuthenticatorActivity.EXTRA_ACTION, AuthenticatorActivity.ACTION_CREATE);\n\n            setIntentFlags(intent);\n\n            bundle.putParcelable(AccountManager.KEY_INTENT, intent);\n        } else {\n            // Return an error\n            bundle.putInt(AccountManager.KEY_ERROR_CODE, AccountManager.ERROR_CODE_UNSUPPORTED_OPERATION);\n            final String message = String.format(mContext.getString(R.string.auth_unsupported_multiaccount), mContext.getString(R.string.app_name));\n            bundle.putString(AccountManager.KEY_ERROR_MESSAGE, message);\n\n            mHandler.post(() -> Toast.makeText(mContext, message, Toast.LENGTH_SHORT).show());\n        }\n\n        return bundle;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled addAccount from AccountAuthenticator.java into Swift.\n\n        Input:\n\n        Method Name: addAccount\n\n        Method Code: @Override\n    public Bundle addAccount(AccountAuthenticatorResponse response,\n                             String accountType, String authTokenType,\n                             String[] requiredFeatures, Bundle options) {\n        Log_OC.i(TAG, \"Adding account with type \" + accountType + \" and auth token \" + authTokenType);\n\n        AccountManager accountManager = AccountManager.get(mContext);\n        Account[] accounts = accountManager.getAccountsByType(MainApp.getAccountType(mContext));\n\n        final Bundle bundle = new Bundle();\n\n        if (accounts.length < 1 || MDMConfig.INSTANCE.multiAccountSupport(mContext)) {\n            try {\n                validateAccountType(accountType);\n            } catch (AuthenticatorException e) {\n                Log_OC.e(TAG, \"Failed to validate account type \" + accountType + \": \"\n                        + e.getMessage(), e);\n                return e.getFailureBundle();\n            }\n\n            Intent intent = new Intent(mContext, AuthenticatorActivity.class);\n            intent.putExtra(AccountManager.KEY_ACCOUNT_AUTHENTICATOR_RESPONSE, response);\n            intent.putExtra(KEY_AUTH_TOKEN_TYPE, authTokenType);\n            intent.putExtra(KEY_REQUIRED_FEATURES, requiredFeatures);\n            intent.putExtra(KEY_LOGIN_OPTIONS, options);\n            intent.putExtra(AuthenticatorActivity.EXTRA_ACTION, AuthenticatorActivity.ACTION_CREATE);\n\n            setIntentFlags(intent);\n\n            bundle.putParcelable(AccountManager.KEY_INTENT, intent);\n        } else {\n            // Return an error\n            bundle.putInt(AccountManager.KEY_ERROR_CODE, AccountManager.ERROR_CODE_UNSUPPORTED_OPERATION);\n            final String message = String.format(mContext.getString(R.string.auth_unsupported_multiaccount), mContext.getString(R.string.app_name));\n            bundle.putString(AccountManager.KEY_ERROR_MESSAGE, message);\n\n            mHandler.post(() -> Toast.makeText(mContext, message, Toast.LENGTH_SHORT).show());\n        }\n\n        return bundle;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func addAccount(response: AccountAuthenticatorResponse, accountType: String, authTokenType: String?, requiredFeatures: [String]?, options: Bundle?) -> Bundle {\n    Log_OC.i(TAG, \"Adding account with type \\(accountType) and auth token \\(String(describing: authTokenType))\")\n\n    let accountManager = AccountManager.get(mContext)\n    let accounts = accountManager.accountsByType(MainApp.getAccountType(mContext))\n\n    let bundle = Bundle()\n\n    if accounts.count < 1 || MDMConfig.INSTANCE.multiAccountSupport(mContext) {\n        do {\n            try validateAccountType(accountType)\n        } catch let e as AuthenticatorException {\n            Log_OC.e(TAG, \"Failed to validate account type \\(accountType): \\(e.localizedDescription)\", e)\n            return e.failureBundle()\n        }\n\n        let intent = Intent(mContext, AuthenticatorActivity.self)\n        intent.putExtra(AccountManager.KEY_ACCOUNT_AUTHENTICATOR_RESPONSE, response)\n        intent.putExtra(KEY_AUTH_TOKEN_TYPE, authTokenType)\n        intent.putExtra(KEY_REQUIRED_FEATURES, requiredFeatures)\n        intent.putExtra(KEY_LOGIN_OPTIONS, options)\n        intent.putExtra(AuthenticatorActivity.EXTRA_ACTION, AuthenticatorActivity.ACTION_CREATE)\n\n        setIntentFlags(intent)\n\n        bundle.putParcelable(AccountManager.KEY_INTENT, intent)\n    } else {\n        // Return an error\n        bundle.putInt(AccountManager.KEY_ERROR_CODE, AccountManager.ERROR_CODE_UNSUPPORTED_OPERATION)\n        let message = String(format: mContext.getString(R.string.auth_unsupported_multiaccount), mContext.getString(R.string.app_name))\n        bundle.putString(AccountManager.KEY_ERROR_MESSAGE, message)\n\n        mHandler.post {\n            Toast.makeText(mContext, message, Toast.LENGTH_SHORT).show()\n        }\n    }\n\n    return bundle\n}\n```"
    },
    {
        "method_name": "confirmCredentials",
        "method_code": "@Override\n    public Bundle confirmCredentials(AccountAuthenticatorResponse response,\n                                     Account account, Bundle options) {\n        try {\n            validateAccountType(account.type);\n        } catch (AuthenticatorException e) {\n            Log_OC.e(TAG, \"Failed to validate account type \" + account.type + \": \" + e.getMessage(), e);\n            return e.getFailureBundle();\n        }\n\n        Intent intent = new Intent(mContext, AuthenticatorActivity.class);\n        intent.putExtra(AccountManager.KEY_ACCOUNT_AUTHENTICATOR_RESPONSE,\n                response);\n        intent.putExtra(KEY_ACCOUNT, account);\n        intent.putExtra(KEY_LOGIN_OPTIONS, options);\n\n        setIntentFlags(intent);\n\n        Bundle resultBundle = new Bundle();\n        resultBundle.putParcelable(AccountManager.KEY_INTENT, intent);\n        return resultBundle;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled confirmCredentials from AccountAuthenticator.java into Swift.\n\n        Input:\n\n        Method Name: confirmCredentials\n\n        Method Code: @Override\n    public Bundle confirmCredentials(AccountAuthenticatorResponse response,\n                                     Account account, Bundle options) {\n        try {\n            validateAccountType(account.type);\n        } catch (AuthenticatorException e) {\n            Log_OC.e(TAG, \"Failed to validate account type \" + account.type + \": \" + e.getMessage(), e);\n            return e.getFailureBundle();\n        }\n\n        Intent intent = new Intent(mContext, AuthenticatorActivity.class);\n        intent.putExtra(AccountManager.KEY_ACCOUNT_AUTHENTICATOR_RESPONSE,\n                response);\n        intent.putExtra(KEY_ACCOUNT, account);\n        intent.putExtra(KEY_LOGIN_OPTIONS, options);\n\n        setIntentFlags(intent);\n\n        Bundle resultBundle = new Bundle();\n        resultBundle.putParcelable(AccountManager.KEY_INTENT, intent);\n        return resultBundle;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc confirmCredentials(response: AccountAuthenticatorResponse, account: Account, options: Bundle) -> Bundle {\n    do {\n        try validateAccountType(account.type)\n    } catch let error as AuthenticatorException {\n        Log_OC.e(TAG, \"Failed to validate account type \\(account.type): \\(error.localizedDescription)\", error)\n        return error.getFailureBundle()\n    }\n\n    let intent = Intent(context: mContext, AuthenticatorActivity.self)\n    intent.putExtra(AccountManager.KEY_ACCOUNT_AUTHENTICATOR_RESPONSE, response)\n    intent.putExtra(KEY_ACCOUNT, account)\n    intent.putExtra(KEY_LOGIN_OPTIONS, options)\n\n    setIntentFlags(intent)\n\n    let resultBundle = Bundle()\n    resultBundle.putParcelable(AccountManager.KEY_INTENT, intent)\n    return resultBundle\n}\n```"
    },
    {
        "method_name": "editProperties",
        "method_code": "@Override\n    public Bundle editProperties(AccountAuthenticatorResponse response, String accountType) {\n        return null;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled editProperties from AccountAuthenticator.java into Swift.\n\n        Input:\n\n        Method Name: editProperties\n\n        Method Code: @Override\n    public Bundle editProperties(AccountAuthenticatorResponse response, String accountType) {\n        return null;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc editProperties(response: AccountAuthenticatorResponse, accountType: String) -> [String: Any]? {\n    return nil\n}\n```"
    },
    {
        "method_name": "getAuthToken",
        "method_code": "@Override\n    public Bundle getAuthToken(AccountAuthenticatorResponse response,\n                               Account account, String authTokenType, Bundle options) {\n        // validate parameters\n        try {\n            validateAccountType(account.type);\n            validateAuthTokenType(authTokenType);\n        } catch (AuthenticatorException e) {\n            Log_OC.e(TAG, \"Failed to validate account type \" + account.type + \": \" + e.getMessage(), e);\n            return e.getFailureBundle();\n        }\n\n        /// check if required token is stored\n        final AccountManager am = AccountManager.get(mContext);\n        String accessToken;\n        if (authTokenType.equals(AccountTypeUtils.getAuthTokenTypePass(MainApp.getAccountType(mContext)))) {\n            accessToken = am.getPassword(account);\n        } else {\n            accessToken = am.peekAuthToken(account, authTokenType);\n        }\n        if (accessToken != null) {\n            final Bundle result = new Bundle();\n            result.putString(AccountManager.KEY_ACCOUNT_NAME, account.name);\n            result.putString(AccountManager.KEY_ACCOUNT_TYPE, MainApp.getAccountType(mContext));\n            result.putString(AccountManager.KEY_AUTHTOKEN, accessToken);\n            return result;\n        }\n\n        /// if not stored, return Intent to access the AuthenticatorActivity and UPDATE the token for the account\n        Intent intent = new Intent(mContext, AuthenticatorActivity.class);\n        intent.putExtra(AccountManager.KEY_ACCOUNT_AUTHENTICATOR_RESPONSE, response);\n        intent.putExtra(KEY_AUTH_TOKEN_TYPE, authTokenType);\n        intent.putExtra(KEY_LOGIN_OPTIONS, options);\n        intent.putExtra(AuthenticatorActivity.EXTRA_ACCOUNT, account);\n        intent.putExtra(AuthenticatorActivity.EXTRA_ACTION, AuthenticatorActivity.ACTION_UPDATE_EXPIRED_TOKEN);\n\n\n        final Bundle bundle = new Bundle();\n        bundle.putParcelable(AccountManager.KEY_INTENT, intent);\n        return bundle;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getAuthToken from AccountAuthenticator.java into Swift.\n\n        Input:\n\n        Method Name: getAuthToken\n\n        Method Code: @Override\n    public Bundle getAuthToken(AccountAuthenticatorResponse response,\n                               Account account, String authTokenType, Bundle options) {\n        // validate parameters\n        try {\n            validateAccountType(account.type);\n            validateAuthTokenType(authTokenType);\n        } catch (AuthenticatorException e) {\n            Log_OC.e(TAG, \"Failed to validate account type \" + account.type + \": \" + e.getMessage(), e);\n            return e.getFailureBundle();\n        }\n\n        /// check if required token is stored\n        final AccountManager am = AccountManager.get(mContext);\n        String accessToken;\n        if (authTokenType.equals(AccountTypeUtils.getAuthTokenTypePass(MainApp.getAccountType(mContext)))) {\n            accessToken = am.getPassword(account);\n        } else {\n            accessToken = am.peekAuthToken(account, authTokenType);\n        }\n        if (accessToken != null) {\n            final Bundle result = new Bundle();\n            result.putString(AccountManager.KEY_ACCOUNT_NAME, account.name);\n            result.putString(AccountManager.KEY_ACCOUNT_TYPE, MainApp.getAccountType(mContext));\n            result.putString(AccountManager.KEY_AUTHTOKEN, accessToken);\n            return result;\n        }\n\n        /// if not stored, return Intent to access the AuthenticatorActivity and UPDATE the token for the account\n        Intent intent = new Intent(mContext, AuthenticatorActivity.class);\n        intent.putExtra(AccountManager.KEY_ACCOUNT_AUTHENTICATOR_RESPONSE, response);\n        intent.putExtra(KEY_AUTH_TOKEN_TYPE, authTokenType);\n        intent.putExtra(KEY_LOGIN_OPTIONS, options);\n        intent.putExtra(AuthenticatorActivity.EXTRA_ACCOUNT, account);\n        intent.putExtra(AuthenticatorActivity.EXTRA_ACTION, AuthenticatorActivity.ACTION_UPDATE_EXPIRED_TOKEN);\n\n\n        final Bundle bundle = new Bundle();\n        bundle.putParcelable(AccountManager.KEY_INTENT, intent);\n        return bundle;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getAuthToken(response: AccountAuthenticatorResponse, account: Account, authTokenType: String, options: Bundle) -> Bundle {\n    // validate parameters\n    do {\n        try validateAccountType(account.type)\n        try validateAuthTokenType(authTokenType)\n    } catch let e as AuthenticatorException {\n        Log_OC.e(TAG, \"Failed to validate account type \\(account.type): \\(e.localizedDescription)\", e)\n        return e.getFailureBundle()\n    } catch {\n        // Handle other potential errors\n    }\n\n    // check if required token is stored\n    let am = AccountManager(context: mContext)\n    var accessToken: String?\n    if authTokenType == AccountTypeUtils.getAuthTokenTypePass(MainApp.getAccountType(mContext)) {\n        accessToken = am.password(for: account)\n    } else {\n        accessToken = am.peekAuthToken(for: account, authTokenType: authTokenType)\n    }\n    if let accessToken = accessToken {\n        var result = Bundle()\n        result.setValue(account.name, forKey: AccountManager.KEY_ACCOUNT_NAME)\n        result.setValue(MainApp.getAccountType(mContext), forKey: AccountManager.KEY_ACCOUNT_TYPE)\n        result.setValue(accessToken, forKey: AccountManager.KEY_AUTHTOKEN)\n        return result\n    }\n\n    // if not stored, return Intent to access the AuthenticatorActivity and UPDATE the token for the account\n    let intent = Intent(context: mContext, AuthenticatorActivity.self)\n    intent.putExtra(AccountManager.KEY_ACCOUNT_AUTHENTICATOR_RESPONSE, response)\n    intent.putExtra(KEY_AUTH_TOKEN_TYPE, authTokenType)\n    intent.putExtra(KEY_LOGIN_OPTIONS, options)\n    intent.putExtra(AuthenticatorActivity.EXTRA_ACCOUNT, account)\n    intent.putExtra(AuthenticatorActivity.EXTRA_ACTION, AuthenticatorActivity.ACTION_UPDATE_EXPIRED_TOKEN)\n\n    var bundle = Bundle()\n    bundle.putParcelable(AccountManager.KEY_INTENT, intent)\n    return bundle\n}\n```"
    },
    {
        "method_name": "getAuthTokenLabel",
        "method_code": "@Override\n    public String getAuthTokenLabel(String authTokenType) {\n        return null;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getAuthTokenLabel from AccountAuthenticator.java into Swift.\n\n        Input:\n\n        Method Name: getAuthTokenLabel\n\n        Method Code: @Override\n    public String getAuthTokenLabel(String authTokenType) {\n        return null;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getAuthTokenLabel(authTokenType: String) -> String? {\n    return nil\n}\n```"
    },
    {
        "method_name": "hasFeatures",
        "method_code": "@Override\n    public Bundle hasFeatures(AccountAuthenticatorResponse response,\n                              Account account, String[] features) {\n        final Bundle result = new Bundle();\n        result.putBoolean(AccountManager.KEY_BOOLEAN_RESULT, true);\n        return result;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled hasFeatures from AccountAuthenticator.java into Swift.\n\n        Input:\n\n        Method Name: hasFeatures\n\n        Method Code: @Override\n    public Bundle hasFeatures(AccountAuthenticatorResponse response,\n                              Account account, String[] features) {\n        final Bundle result = new Bundle();\n        result.putBoolean(AccountManager.KEY_BOOLEAN_RESULT, true);\n        return result;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc hasFeatures(response: AccountAuthenticatorResponse, account: Account, features: [String]) -> [String: Any] {\n    var result = [String: Any]()\n    result[AccountManager.KEY_BOOLEAN_RESULT] = true\n    return result\n}\n```"
    },
    {
        "method_name": "updateCredentials",
        "method_code": "@Override\n    public Bundle updateCredentials(AccountAuthenticatorResponse response,\n                                    Account account, String authTokenType, Bundle options) {\n\n        Intent intent = new Intent(mContext, AuthenticatorActivity.class);\n        intent.putExtra(AccountManager.KEY_ACCOUNT_AUTHENTICATOR_RESPONSE, response);\n        intent.putExtra(KEY_ACCOUNT, account);\n        intent.putExtra(KEY_AUTH_TOKEN_TYPE, authTokenType);\n        intent.putExtra(KEY_LOGIN_OPTIONS, options);\n        setIntentFlags(intent);\n\n        final Bundle bundle = new Bundle();\n        bundle.putParcelable(AccountManager.KEY_INTENT, intent);\n        return bundle;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled updateCredentials from AccountAuthenticator.java into Swift.\n\n        Input:\n\n        Method Name: updateCredentials\n\n        Method Code: @Override\n    public Bundle updateCredentials(AccountAuthenticatorResponse response,\n                                    Account account, String authTokenType, Bundle options) {\n\n        Intent intent = new Intent(mContext, AuthenticatorActivity.class);\n        intent.putExtra(AccountManager.KEY_ACCOUNT_AUTHENTICATOR_RESPONSE, response);\n        intent.putExtra(KEY_ACCOUNT, account);\n        intent.putExtra(KEY_AUTH_TOKEN_TYPE, authTokenType);\n        intent.putExtra(KEY_LOGIN_OPTIONS, options);\n        setIntentFlags(intent);\n\n        final Bundle bundle = new Bundle();\n        bundle.putParcelable(AccountManager.KEY_INTENT, intent);\n        return bundle;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc updateCredentials(response: AccountAuthenticatorResponse, account: Account, authTokenType: String, options: Bundle) -> Bundle {\n    let intent = Intent(context: mContext, AuthenticatorActivity.self)\n    intent.putExtra(AccountManager.KEY_ACCOUNT_AUTHENTICATOR_RESPONSE, response)\n    intent.putExtra(KEY_ACCOUNT, account)\n    intent.putExtra(KEY_AUTH_TOKEN_TYPE, authTokenType)\n    intent.putExtra(KEY_LOGIN_OPTIONS, options)\n    setIntentFlags(intent)\n\n    let bundle = Bundle()\n    bundle.putParcelable(AccountManager.KEY_INTENT, intent)\n    return bundle\n}\n```"
    },
    {
        "method_name": "getAccountRemovalAllowed",
        "method_code": "@Override\n    public Bundle getAccountRemovalAllowed(AccountAuthenticatorResponse response, Account account)\n            throws NetworkErrorException {\n        return super.getAccountRemovalAllowed(response, account);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getAccountRemovalAllowed from AccountAuthenticator.java into Swift.\n\n        Input:\n\n        Method Name: getAccountRemovalAllowed\n\n        Method Code: @Override\n    public Bundle getAccountRemovalAllowed(AccountAuthenticatorResponse response, Account account)\n            throws NetworkErrorException {\n        return super.getAccountRemovalAllowed(response, account);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func accountRemovalAllowed(for response: AccountAuthenticatorResponse, account: Account) throws -> Bundle {\n    return try super.accountRemovalAllowed(for: response, account: account)\n}\n```"
    },
    {
        "method_name": "setIntentFlags",
        "method_code": "private void setIntentFlags(Intent intent) {\n        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n        intent.addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);\n        intent.addFlags(Intent.FLAG_FROM_BACKGROUND);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setIntentFlags from AccountAuthenticator.java into Swift.\n\n        Input:\n\n        Method Name: setIntentFlags\n\n        Method Code: private void setIntentFlags(Intent intent) {\n        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n        intent.addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);\n        intent.addFlags(Intent.FLAG_FROM_BACKGROUND);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setIntentFlags(intent: inout Intent) {\n    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\n    intent.addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS)\n    intent.addFlags(Intent.FLAG_FROM_BACKGROUND)\n}\n```"
    },
    {
        "method_name": "validateAccountType",
        "method_code": "private void validateAccountType(String type) throws UnsupportedAccountTypeException {\n        if (!type.equals(MainApp.getAccountType(mContext))) {\n            throw new UnsupportedAccountTypeException();\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled validateAccountType from AccountAuthenticator.java into Swift.\n\n        Input:\n\n        Method Name: validateAccountType\n\n        Method Code: private void validateAccountType(String type) throws UnsupportedAccountTypeException {\n        if (!type.equals(MainApp.getAccountType(mContext))) {\n            throw new UnsupportedAccountTypeException();\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func validateAccountType(_ type: String) throws {\n    if type != MainApp.getAccountType(mContext) {\n        throw UnsupportedAccountTypeException()\n    }\n}\n```"
    },
    {
        "method_name": "validateAuthTokenType",
        "method_code": "private void validateAuthTokenType(String authTokenType) throws UnsupportedAuthTokenTypeException {\n        String accountType = MainApp.getAccountType(mContext);\n\n        if (!authTokenType.equals(accountType) &&\n            !authTokenType.equals(AccountTypeUtils.getAuthTokenTypePass(accountType))) {\n            throw new UnsupportedAuthTokenTypeException();\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled validateAuthTokenType from AccountAuthenticator.java into Swift.\n\n        Input:\n\n        Method Name: validateAuthTokenType\n\n        Method Code: private void validateAuthTokenType(String authTokenType) throws UnsupportedAuthTokenTypeException {\n        String accountType = MainApp.getAccountType(mContext);\n\n        if (!authTokenType.equals(accountType) &&\n            !authTokenType.equals(AccountTypeUtils.getAuthTokenTypePass(accountType))) {\n            throw new UnsupportedAuthTokenTypeException();\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func validateAuthTokenType(authTokenType: String) throws {\n    let accountType = MainApp.getAccountType(mContext)\n\n    if authTokenType != accountType && authTokenType != AccountTypeUtils.getAuthTokenTypePass(accountType) {\n        throw UnsupportedAuthTokenTypeException()\n    }\n}\n```"
    },
    {
        "method_name": "getFailureBundle",
        "method_code": "public Bundle getFailureBundle() {\n            return mFailureBundle;\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled getFailureBundle from AccountAuthenticator.java into Swift.\n\n        Input:\n\n        Method Name: getFailureBundle\n\n        Method Code: public Bundle getFailureBundle() {\n            return mFailureBundle;\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getFailureBundle() -> Bundle {\n    return mFailureBundle\n}\n```"
    }
]