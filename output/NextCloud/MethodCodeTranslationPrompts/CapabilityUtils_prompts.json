[
    {
        "method_name": "getCapability",
        "method_code": "public static OCCapability getCapability(Context context) {\n        User user = null;\n        if (context != null) {\n            // TODO: refactor when dark theme work is completed\n            user = UserAccountManagerImpl.fromContext(context).getUser();\n        }\n\n        if (user != null) {\n            return getCapability(user, context);\n        } else {\n            return new OCCapability();\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getCapability from CapabilityUtils.java into Swift.\n\n        Input:\n\n        Method Name: getCapability\n\n        Method Code: public static OCCapability getCapability(Context context) {\n        User user = null;\n        if (context != null) {\n            // TODO: refactor when dark theme work is completed\n            user = UserAccountManagerImpl.fromContext(context).getUser();\n        }\n\n        if (user != null) {\n            return getCapability(user, context);\n        } else {\n            return new OCCapability();\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func getCapability(context: Context?) -> OCCapability {\n    var user: User? = nil\n    if let context = context {\n        // TODO: refactor when dark theme work is completed\n        user = UserAccountManagerImpl.fromContext(context).getUser()\n    }\n\n    if let user = user {\n        return getCapability(user: user, context: context)\n    } else {\n        return OCCapability()\n    }\n}\n```"
    },
    {
        "method_name": "getCapability",
        "method_code": "@Deprecated\n    public static OCCapability getCapability(Account acc, Context context) {\n        Optional<User> user = Optional.empty();\n\n        if (acc != null) {\n            user = UserAccountManagerImpl.fromContext(context).getUser(acc.name);\n        } else if (context != null) {\n            // TODO: refactor when dark theme work is completed\n            user = Optional.of(UserAccountManagerImpl.fromContext(context).getUser());\n        }\n\n        if (user.isPresent()) {\n            return getCapability(user.get(), context);\n        } else {\n            return new OCCapability();\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getCapability from CapabilityUtils.java into Swift.\n\n        Input:\n\n        Method Name: getCapability\n\n        Method Code: @Deprecated\n    public static OCCapability getCapability(Account acc, Context context) {\n        Optional<User> user = Optional.empty();\n\n        if (acc != null) {\n            user = UserAccountManagerImpl.fromContext(context).getUser(acc.name);\n        } else if (context != null) {\n            // TODO: refactor when dark theme work is completed\n            user = Optional.of(UserAccountManagerImpl.fromContext(context).getUser());\n        }\n\n        if (user.isPresent()) {\n            return getCapability(user.get(), context);\n        } else {\n            return new OCCapability();\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\n@available(*, deprecated)\npublic static func getCapability(acc: Account?, context: Context?) -> OCCapability {\n    var user: User? = nil\n\n    if let acc = acc {\n        user = UserAccountManagerImpl.fromContext(context).getUser(acc.name)\n    } else if let context = context {\n        // TODO: refactor when dark theme work is completed\n        user = UserAccountManagerImpl.fromContext(context).getUser()\n    }\n\n    if let user = user {\n        return getCapability(user, context: context)\n    } else {\n        return OCCapability()\n    }\n}\n```"
    },
    {
        "method_name": "getCapability",
        "method_code": "public static OCCapability getCapability(User user, Context context) {\n        OCCapability capability = cachedCapabilities.get(user.getAccountName());\n\n        if (capability == null) {\n            FileDataStorageManager storageManager = new FileDataStorageManager(user, context.getContentResolver());\n            capability = storageManager.getCapability(user.getAccountName());\n\n            cachedCapabilities.put(capability.getAccountName(), capability);\n        }\n\n        return capability;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getCapability from CapabilityUtils.java into Swift.\n\n        Input:\n\n        Method Name: getCapability\n\n        Method Code: public static OCCapability getCapability(User user, Context context) {\n        OCCapability capability = cachedCapabilities.get(user.getAccountName());\n\n        if (capability == null) {\n            FileDataStorageManager storageManager = new FileDataStorageManager(user, context.getContentResolver());\n            capability = storageManager.getCapability(user.getAccountName());\n\n            cachedCapabilities.put(capability.getAccountName(), capability);\n        }\n\n        return capability;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func getCapability(user: User, context: Context) -> OCCapability? {\n    var capability = cachedCapabilities[user.accountName]\n\n    if capability == nil {\n        let storageManager = FileDataStorageManager(user: user, contentResolver: context.contentResolver)\n        capability = storageManager.getCapability(accountName: user.accountName)\n\n        if let capability = capability {\n            cachedCapabilities[capability.accountName] = capability\n        }\n    }\n\n    return capability\n}\n```"
    },
    {
        "method_name": "updateCapability",
        "method_code": "public static void updateCapability(OCCapability capability) {\n        cachedCapabilities.put(capability.getAccountName(), capability);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled updateCapability from CapabilityUtils.java into Swift.\n\n        Input:\n\n        Method Name: updateCapability\n\n        Method Code: public static void updateCapability(OCCapability capability) {\n        cachedCapabilities.put(capability.getAccountName(), capability);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func updateCapability(_ capability: OCCapability) {\n    cachedCapabilities[capability.getAccountName()] = capability\n}\n```"
    },
    {
        "method_name": "checkOutdatedWarning",
        "method_code": "public static boolean checkOutdatedWarning(Resources resources,\n                                               OwnCloudVersion version,\n                                               boolean hasExtendedSupport) {\n        return resources.getBoolean(R.bool.show_outdated_server_warning) &&\n            (MainApp.OUTDATED_SERVER_VERSION.isSameMajorVersion(version) ||\n                version.isOlderThan(MainApp.OUTDATED_SERVER_VERSION))\n            && !hasExtendedSupport;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled checkOutdatedWarning from CapabilityUtils.java into Swift.\n\n        Input:\n\n        Method Name: checkOutdatedWarning\n\n        Method Code: public static boolean checkOutdatedWarning(Resources resources,\n                                               OwnCloudVersion version,\n                                               boolean hasExtendedSupport) {\n        return resources.getBoolean(R.bool.show_outdated_server_warning) &&\n            (MainApp.OUTDATED_SERVER_VERSION.isSameMajorVersion(version) ||\n                version.isOlderThan(MainApp.OUTDATED_SERVER_VERSION))\n            && !hasExtendedSupport;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func checkOutdatedWarning(resources: Resources, version: OwnCloudVersion, hasExtendedSupport: Bool) -> Bool {\n    return resources.getBoolean(R.bool.show_outdated_server_warning) &&\n        (MainApp.OUTDATED_SERVER_VERSION.isSameMajorVersion(version) ||\n            version.isOlderThan(MainApp.OUTDATED_SERVER_VERSION))\n        && !hasExtendedSupport\n}\n```"
    }
]