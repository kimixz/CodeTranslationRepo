[
    {
        "method_name": "updateCertificateView",
        "method_code": "@Override\n    public void updateCertificateView(@NonNull SslUntrustedCertLayoutBinding binding) {\n        if (mCertificate != null) {\n            binding.nullCert.setVisibility(View.GONE);\n            showSubject(mCertificate.getIssuedTo(), binding);\n            showIssuer(mCertificate.getIssuedBy(), binding);\n            showValidity(mCertificate.getValidNotBeforeDate(), mCertificate.getValidNotAfterDate(), binding);\n        } else {\n            binding.nullCert.setVisibility(View.VISIBLE);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled updateCertificateView from SslCertificateViewAdapter.java into Swift.\n\n        Input:\n\n        Method Name: updateCertificateView\n\n        Method Code: @Override\n    public void updateCertificateView(@NonNull SslUntrustedCertLayoutBinding binding) {\n        if (mCertificate != null) {\n            binding.nullCert.setVisibility(View.GONE);\n            showSubject(mCertificate.getIssuedTo(), binding);\n            showIssuer(mCertificate.getIssuedBy(), binding);\n            showValidity(mCertificate.getValidNotBeforeDate(), mCertificate.getValidNotAfterDate(), binding);\n        } else {\n            binding.nullCert.setVisibility(View.VISIBLE);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func updateCertificateView(binding: SslUntrustedCertLayoutBinding) {\n    if let certificate = mCertificate {\n        binding.nullCert.isHidden = true\n        showSubject(certificate.issuedTo, binding: binding)\n        showIssuer(certificate.issuedBy, binding: binding)\n        showValidity(certificate.validNotBeforeDate, certificate.validNotAfterDate, binding: binding)\n    } else {\n        binding.nullCert.isHidden = false\n    }\n}\n```"
    },
    {
        "method_name": "showValidity",
        "method_code": "private void showValidity(Date notBefore, Date notAfter, @NonNull SslUntrustedCertLayoutBinding binding) {\n        DateFormat dateFormat = DateFormat.getDateInstance();\n        binding.valueValidityFrom.setText(dateFormat.format(notBefore));\n        binding.valueValidityTo.setText(dateFormat.format(notAfter));\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showValidity from SslCertificateViewAdapter.java into Swift.\n\n        Input:\n\n        Method Name: showValidity\n\n        Method Code: private void showValidity(Date notBefore, Date notAfter, @NonNull SslUntrustedCertLayoutBinding binding) {\n        DateFormat dateFormat = DateFormat.getDateInstance();\n        binding.valueValidityFrom.setText(dateFormat.format(notBefore));\n        binding.valueValidityTo.setText(dateFormat.format(notAfter));\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func showValidity(notBefore: Date, notAfter: Date, binding: SslUntrustedCertLayoutBinding) {\n    let dateFormat = DateFormatter()\n    dateFormat.dateStyle = .medium\n    binding.valueValidityFrom.text = dateFormat.string(from: notBefore)\n    binding.valueValidityTo.text = dateFormat.string(from: notAfter)\n}\n```"
    },
    {
        "method_name": "showSubject",
        "method_code": "private void showSubject(SslCertificate.DName subject, @NonNull SslUntrustedCertLayoutBinding binding) {\n        binding.valueSubjectCN.setText(subject.getCName());\n        binding.valueSubjectCN.setVisibility(View.VISIBLE);\n\n        binding.valueSubjectO.setText(subject.getOName());\n        binding.valueSubjectO.setVisibility(View.VISIBLE);\n\n        binding.valueSubjectOU.setText(subject.getUName());\n        binding.valueSubjectOU.setVisibility(View.VISIBLE);\n\n        // SslCertificates don't offer this information\n        binding.valueSubjectC.setVisibility(View.GONE);\n        binding.valueSubjectST.setVisibility(View.GONE);\n        binding.valueSubjectL.setVisibility(View.GONE);\n\n        binding.labelSubjectC.setVisibility(View.GONE);\n        binding.labelSubjectST.setVisibility(View.GONE);\n        binding.labelSubjectL.setVisibility(View.GONE);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showSubject from SslCertificateViewAdapter.java into Swift.\n\n        Input:\n\n        Method Name: showSubject\n\n        Method Code: private void showSubject(SslCertificate.DName subject, @NonNull SslUntrustedCertLayoutBinding binding) {\n        binding.valueSubjectCN.setText(subject.getCName());\n        binding.valueSubjectCN.setVisibility(View.VISIBLE);\n\n        binding.valueSubjectO.setText(subject.getOName());\n        binding.valueSubjectO.setVisibility(View.VISIBLE);\n\n        binding.valueSubjectOU.setText(subject.getUName());\n        binding.valueSubjectOU.setVisibility(View.VISIBLE);\n\n        // SslCertificates don't offer this information\n        binding.valueSubjectC.setVisibility(View.GONE);\n        binding.valueSubjectST.setVisibility(View.GONE);\n        binding.valueSubjectL.setVisibility(View.GONE);\n\n        binding.labelSubjectC.setVisibility(View.GONE);\n        binding.labelSubjectST.setVisibility(View.GONE);\n        binding.labelSubjectL.setVisibility(View.GONE);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func showSubject(subject: SslCertificate.DName, binding: SslUntrustedCertLayoutBinding) {\n    binding.valueSubjectCN.text = subject.getCName()\n    binding.valueSubjectCN.isHidden = false\n\n    binding.valueSubjectO.text = subject.getOName()\n    binding.valueSubjectO.isHidden = false\n\n    binding.valueSubjectOU.text = subject.getUName()\n    binding.valueSubjectOU.isHidden = false\n\n    // SslCertificates don't offer this information\n    binding.valueSubjectC.isHidden = true\n    binding.valueSubjectST.isHidden = true\n    binding.valueSubjectL.isHidden = true\n\n    binding.labelSubjectC.isHidden = true\n    binding.labelSubjectST.isHidden = true\n    binding.labelSubjectL.isHidden = true\n}\n```"
    },
    {
        "method_name": "showIssuer",
        "method_code": "private void showIssuer(SslCertificate.DName issuer, @NonNull SslUntrustedCertLayoutBinding binding) {\n        binding.valueIssuerCN.setText(issuer.getCName());\n        binding.valueIssuerCN.setVisibility(View.VISIBLE);\n\n        binding.valueIssuerO.setText(issuer.getOName());\n        binding.valueIssuerO.setVisibility(View.VISIBLE);\n\n        binding.valueIssuerOU.setText(issuer.getUName());\n        binding.valueIssuerOU.setVisibility(View.VISIBLE);\n\n        // SslCertificates don't offer this information\n        binding.valueIssuerC.setVisibility(View.GONE);\n        binding.valueIssuerST.setVisibility(View.GONE);\n        binding.valueIssuerL.setVisibility(View.GONE);\n\n        binding.labelIssuerC.setVisibility(View.GONE);\n        binding.labelIssuerST.setVisibility(View.GONE);\n        binding.labelIssuerL.setVisibility(View.GONE);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showIssuer from SslCertificateViewAdapter.java into Swift.\n\n        Input:\n\n        Method Name: showIssuer\n\n        Method Code: private void showIssuer(SslCertificate.DName issuer, @NonNull SslUntrustedCertLayoutBinding binding) {\n        binding.valueIssuerCN.setText(issuer.getCName());\n        binding.valueIssuerCN.setVisibility(View.VISIBLE);\n\n        binding.valueIssuerO.setText(issuer.getOName());\n        binding.valueIssuerO.setVisibility(View.VISIBLE);\n\n        binding.valueIssuerOU.setText(issuer.getUName());\n        binding.valueIssuerOU.setVisibility(View.VISIBLE);\n\n        // SslCertificates don't offer this information\n        binding.valueIssuerC.setVisibility(View.GONE);\n        binding.valueIssuerST.setVisibility(View.GONE);\n        binding.valueIssuerL.setVisibility(View.GONE);\n\n        binding.labelIssuerC.setVisibility(View.GONE);\n        binding.labelIssuerST.setVisibility(View.GONE);\n        binding.labelIssuerL.setVisibility(View.GONE);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func showIssuer(issuer: SslCertificate.DName, binding: SslUntrustedCertLayoutBinding) {\n    binding.valueIssuerCN.text = issuer.getCName()\n    binding.valueIssuerCN.isHidden = false\n\n    binding.valueIssuerO.text = issuer.getOName()\n    binding.valueIssuerO.isHidden = false\n\n    binding.valueIssuerOU.text = issuer.getUName()\n    binding.valueIssuerOU.isHidden = false\n\n    // SslCertificates don't offer this information\n    binding.valueIssuerC.isHidden = true\n    binding.valueIssuerST.isHidden = true\n    binding.valueIssuerL.isHidden = true\n\n    binding.labelIssuerC.isHidden = true\n    binding.labelIssuerST.isHidden = true\n    binding.labelIssuerL.isHidden = true\n}\n```"
    }
]