[
    {
        "method_name": "setTrashbinFiles",
        "method_code": "public void setTrashbinFiles(List<TrashbinFile> trashbinFiles, boolean clear) {\n        if (clear) {\n            files.clear();\n        }\n\n        files.addAll(trashbinFiles);\n\n        files = preferences.getSortOrderByType(FileSortOrder.Type.trashBinView,\n                                               FileSortOrder.SORT_NEW_TO_OLD).sortTrashbinFiles(files);\n\n        notifyDataSetChanged();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setTrashbinFiles from TrashbinListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: setTrashbinFiles\n\n        Method Code: public void setTrashbinFiles(List<TrashbinFile> trashbinFiles, boolean clear) {\n        if (clear) {\n            files.clear();\n        }\n\n        files.addAll(trashbinFiles);\n\n        files = preferences.getSortOrderByType(FileSortOrder.Type.trashBinView,\n                                               FileSortOrder.SORT_NEW_TO_OLD).sortTrashbinFiles(files);\n\n        notifyDataSetChanged();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setTrashbinFiles(_ trashbinFiles: [TrashbinFile], clear: Bool) {\n    if clear {\n        files.removeAll()\n    }\n\n    files.append(contentsOf: trashbinFiles)\n\n    files = preferences.getSortOrderByType(type: .trashBinView, order: .sortNewToOld).sortTrashbinFiles(files)\n\n    notifyDataSetChanged()\n}\n```"
    },
    {
        "method_name": "onCreateViewHolder",
        "method_code": "@NonNull\n    @Override\n    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n        if (viewType == TRASHBIN_ITEM) {\n            return new TrashbinFileViewHolder(\n                TrashbinItemBinding.inflate(LayoutInflater.from(parent.getContext()), parent, false)\n            );\n        } else {\n            return new TrashbinFooterViewHolder(\n                ListFooterBinding.inflate(LayoutInflater.from(parent.getContext()), parent, false)\n            );\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreateViewHolder from TrashbinListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: onCreateViewHolder\n\n        Method Code: @NonNull\n    @Override\n    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n        if (viewType == TRASHBIN_ITEM) {\n            return new TrashbinFileViewHolder(\n                TrashbinItemBinding.inflate(LayoutInflater.from(parent.getContext()), parent, false)\n            );\n        } else {\n            return new TrashbinFooterViewHolder(\n                ListFooterBinding.inflate(LayoutInflater.from(parent.getContext()), parent, false)\n            );\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n    let viewType = self.viewType(for: indexPath)\n    if viewType == TRASHBIN_ITEM {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"TrashbinFileViewHolder\", for: indexPath) as! TrashbinFileViewHolder\n        return cell\n    } else {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"TrashbinFooterViewHolder\", for: indexPath) as! TrashbinFooterViewHolder\n        return cell\n    }\n}\n```"
    },
    {
        "method_name": "onBindViewHolder",
        "method_code": "@Override\n    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {\n        if (holder instanceof TrashbinFileViewHolder) {\n            final TrashbinFileViewHolder trashbinFileViewHolder = (TrashbinFileViewHolder) holder;\n            TrashbinFile file = files.get(position);\n\n            // layout\n            trashbinFileViewHolder.binding.ListItemLayout.setOnClickListener(v -> trashbinActivityInterface.onItemClicked(file));\n\n            // thumbnail\n            trashbinFileViewHolder.binding.thumbnail.setTag(file.getRemoteId());\n            setThumbnail(file, trashbinFileViewHolder.binding.thumbnail);\n\n            // fileName\n            trashbinFileViewHolder.binding.Filename.setText(file.getFileName());\n\n            // fileSize\n            trashbinFileViewHolder.binding.fileSize.setText(DisplayUtils.bytesToHumanReadable(file.getFileLength()));\n\n            // originalLocation\n            String location;\n            int lastIndex = file.getOriginalLocation().lastIndexOf('/');\n            if (lastIndex != -1) {\n                location = ROOT_PATH + file.getOriginalLocation().substring(0, lastIndex) + PATH_SEPARATOR;\n            } else {\n                location = ROOT_PATH;\n            }\n            trashbinFileViewHolder.binding.originalLocation.setText(location);\n\n            // deletion time\n            trashbinFileViewHolder.binding.deletionTimestamp.setText(DisplayUtils.getRelativeTimestamp(context,\n                    file.getDeletionTimestamp() * 1000));\n\n            // checkbox\n            trashbinFileViewHolder.binding.customCheckbox.setVisibility(View.GONE);\n\n            // overflow menu\n            trashbinFileViewHolder.binding.overflowMenu.setOnClickListener(v ->\n                    trashbinActivityInterface.onOverflowIconClicked(file, v));\n\n            // restore button\n            trashbinFileViewHolder.binding.restore.setOnClickListener(v ->\n                    trashbinActivityInterface.onRestoreIconClicked(file, v));\n\n        } else {\n            TrashbinFooterViewHolder trashbinFooterViewHolder = (TrashbinFooterViewHolder) holder;\n            trashbinFooterViewHolder.binding.footerText.setText(getFooterText());\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onBindViewHolder from TrashbinListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: onBindViewHolder\n\n        Method Code: @Override\n    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {\n        if (holder instanceof TrashbinFileViewHolder) {\n            final TrashbinFileViewHolder trashbinFileViewHolder = (TrashbinFileViewHolder) holder;\n            TrashbinFile file = files.get(position);\n\n            // layout\n            trashbinFileViewHolder.binding.ListItemLayout.setOnClickListener(v -> trashbinActivityInterface.onItemClicked(file));\n\n            // thumbnail\n            trashbinFileViewHolder.binding.thumbnail.setTag(file.getRemoteId());\n            setThumbnail(file, trashbinFileViewHolder.binding.thumbnail);\n\n            // fileName\n            trashbinFileViewHolder.binding.Filename.setText(file.getFileName());\n\n            // fileSize\n            trashbinFileViewHolder.binding.fileSize.setText(DisplayUtils.bytesToHumanReadable(file.getFileLength()));\n\n            // originalLocation\n            String location;\n            int lastIndex = file.getOriginalLocation().lastIndexOf('/');\n            if (lastIndex != -1) {\n                location = ROOT_PATH + file.getOriginalLocation().substring(0, lastIndex) + PATH_SEPARATOR;\n            } else {\n                location = ROOT_PATH;\n            }\n            trashbinFileViewHolder.binding.originalLocation.setText(location);\n\n            // deletion time\n            trashbinFileViewHolder.binding.deletionTimestamp.setText(DisplayUtils.getRelativeTimestamp(context,\n                    file.getDeletionTimestamp() * 1000));\n\n            // checkbox\n            trashbinFileViewHolder.binding.customCheckbox.setVisibility(View.GONE);\n\n            // overflow menu\n            trashbinFileViewHolder.binding.overflowMenu.setOnClickListener(v ->\n                    trashbinActivityInterface.onOverflowIconClicked(file, v));\n\n            // restore button\n            trashbinFileViewHolder.binding.restore.setOnClickListener(v ->\n                    trashbinActivityInterface.onRestoreIconClicked(file, v));\n\n        } else {\n            TrashbinFooterViewHolder trashbinFooterViewHolder = (TrashbinFooterViewHolder) holder;\n            trashbinFooterViewHolder.binding.footerText.setText(getFooterText());\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onBindViewHolder(_ holder: RecyclerView.ViewHolder, position: Int) {\n    if let trashbinFileViewHolder = holder as? TrashbinFileViewHolder {\n        let file = files[position]\n\n        // layout\n        trashbinFileViewHolder.binding.listItemLayout.setOnClickListener { _ in\n            trashbinActivityInterface.onItemClicked(file)\n        }\n\n        // thumbnail\n        trashbinFileViewHolder.binding.thumbnail.tag = file.remoteId\n        setThumbnail(file, trashbinFileViewHolder.binding.thumbnail)\n\n        // fileName\n        trashbinFileViewHolder.binding.filename.text = file.fileName\n\n        // fileSize\n        trashbinFileViewHolder.binding.fileSize.text = DisplayUtils.bytesToHumanReadable(file.fileLength)\n\n        // originalLocation\n        let location: String\n        let lastIndex = file.originalLocation.lastIndex(of: \"/\") ?? file.originalLocation.startIndex\n        if lastIndex != file.originalLocation.startIndex {\n            location = ROOT_PATH + file.originalLocation[..<lastIndex] + PATH_SEPARATOR\n        } else {\n            location = ROOT_PATH\n        }\n        trashbinFileViewHolder.binding.originalLocation.text = location\n\n        // deletion time\n        trashbinFileViewHolder.binding.deletionTimestamp.text = DisplayUtils.getRelativeTimestamp(context, timestamp: file.deletionTimestamp * 1000)\n\n        // checkbox\n        trashbinFileViewHolder.binding.customCheckbox.isHidden = true\n\n        // overflow menu\n        trashbinFileViewHolder.binding.overflowMenu.setOnClickListener { v in\n            trashbinActivityInterface.onOverflowIconClicked(file, v)\n        }\n\n        // restore button\n        trashbinFileViewHolder.binding.restore.setOnClickListener { v in\n            trashbinActivityInterface.onRestoreIconClicked(file, v)\n        }\n\n    } else if let trashbinFooterViewHolder = holder as? TrashbinFooterViewHolder {\n        trashbinFooterViewHolder.binding.footerText.text = getFooterText()\n    }\n}\n```"
    },
    {
        "method_name": "removeFile",
        "method_code": "@SuppressLint(\"NotifyDataSetChanged\")\n    public void removeFile(TrashbinFile file) {\n        int index = files.indexOf(file);\n\n        if (index != -1) {\n            files.remove(index);\n            notifyDataSetChanged(); // needs to be used to also update footer\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled removeFile from TrashbinListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: removeFile\n\n        Method Code: @SuppressLint(\"NotifyDataSetChanged\")\n    public void removeFile(TrashbinFile file) {\n        int index = files.indexOf(file);\n\n        if (index != -1) {\n            files.remove(index);\n            notifyDataSetChanged(); // needs to be used to also update footer\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc removeFile(file: TrashbinFile) {\n    if let index = files.firstIndex(of: file) {\n        files.remove(at: index)\n        notifyDataSetChanged() // needs to be used to also update footer\n    }\n}\n```"
    },
    {
        "method_name": "removeAllFiles",
        "method_code": "public void removeAllFiles() {\n        files.clear();\n        notifyDataSetChanged();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled removeAllFiles from TrashbinListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: removeAllFiles\n\n        Method Code: public void removeAllFiles() {\n        files.clear();\n        notifyDataSetChanged();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc removeAllFiles() {\n    files.removeAll()\n    notifyDataSetChanged()\n}\n```"
    },
    {
        "method_name": "getFooterText",
        "method_code": "private String getFooterText() {\n        int filesCount = 0;\n        int foldersCount = 0;\n        int count = files.size();\n        TrashbinFile file;\n        for (int i = 0; i < count; i++) {\n            file = files.get(i);\n            if (file.isFolder()) {\n                foldersCount++;\n            } else {\n                if (!file.isHidden()) {\n                    filesCount++;\n                }\n            }\n        }\n\n        return generateFooterText(filesCount, foldersCount);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getFooterText from TrashbinListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getFooterText\n\n        Method Code: private String getFooterText() {\n        int filesCount = 0;\n        int foldersCount = 0;\n        int count = files.size();\n        TrashbinFile file;\n        for (int i = 0; i < count; i++) {\n            file = files.get(i);\n            if (file.isFolder()) {\n                foldersCount++;\n            } else {\n                if (!file.isHidden()) {\n                    filesCount++;\n                }\n            }\n        }\n\n        return generateFooterText(filesCount, foldersCount);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getFooterText() -> String {\n    var filesCount = 0\n    var foldersCount = 0\n    let count = files.count\n    for i in 0..<count {\n        let file = files[i]\n        if file.isFolder() {\n            foldersCount += 1\n        } else {\n            if !file.isHidden() {\n                filesCount += 1\n            }\n        }\n    }\n    return generateFooterText(filesCount: filesCount, foldersCount: foldersCount)\n}\n```"
    },
    {
        "method_name": "generateFooterText",
        "method_code": "private String generateFooterText(int filesCount, int foldersCount) {\n        String output;\n        Resources resources = context.getResources();\n\n        if (filesCount + foldersCount <= 0) {\n            output = \"\";\n        } else if (foldersCount <= 0) {\n            output = resources.getQuantityString(R.plurals.file_list__footer__file, filesCount, filesCount);\n        } else if (filesCount <= 0) {\n            output = resources.getQuantityString(R.plurals.file_list__footer__folder, foldersCount, foldersCount);\n        } else {\n            output = resources.getQuantityString(R.plurals.file_list__footer__file, filesCount, filesCount) + \", \" +\n                    resources.getQuantityString(R.plurals.file_list__footer__folder, foldersCount, foldersCount);\n        }\n\n        return output;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled generateFooterText from TrashbinListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: generateFooterText\n\n        Method Code: private String generateFooterText(int filesCount, int foldersCount) {\n        String output;\n        Resources resources = context.getResources();\n\n        if (filesCount + foldersCount <= 0) {\n            output = \"\";\n        } else if (foldersCount <= 0) {\n            output = resources.getQuantityString(R.plurals.file_list__footer__file, filesCount, filesCount);\n        } else if (filesCount <= 0) {\n            output = resources.getQuantityString(R.plurals.file_list__footer__folder, foldersCount, foldersCount);\n        } else {\n            output = resources.getQuantityString(R.plurals.file_list__footer__file, filesCount, filesCount) + \", \" +\n                    resources.getQuantityString(R.plurals.file_list__footer__folder, foldersCount, foldersCount);\n        }\n\n        return output;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func generateFooterText(filesCount: Int, foldersCount: Int) -> String {\n    var output: String\n    let resources = context.resources\n\n    if filesCount + foldersCount <= 0 {\n        output = \"\"\n    } else if foldersCount <= 0 {\n        output = resources.localizedStringWithFormat(NSLocalizedString(\"file_list__footer__file\", comment: \"\"), filesCount)\n    } else if filesCount <= 0 {\n        output = resources.localizedStringWithFormat(NSLocalizedString(\"file_list__footer__folder\", comment: \"\"), foldersCount)\n    } else {\n        output = resources.localizedStringWithFormat(NSLocalizedString(\"file_list__footer__file\", comment: \"\"), filesCount) + \", \" +\n                 resources.localizedStringWithFormat(NSLocalizedString(\"file_list__footer__folder\", comment: \"\"), foldersCount)\n    }\n\n    return output\n}\n```"
    },
    {
        "method_name": "setThumbnail",
        "method_code": "private void setThumbnail(TrashbinFile file, ImageView thumbnailView) {\n        if (file.isFolder()) {\n            thumbnailView.setImageDrawable(MimeTypeUtil.getDefaultFolderIcon(context, viewThemeUtils));\n        } else {\n            if ((MimeTypeUtil.isImage(file) || MimeTypeUtil.isVideo(file)) && file.getRemoteId() != null) {\n                // Thumbnail in cache?\n                Bitmap thumbnail = ThumbnailsCacheManager.getBitmapFromDiskCache(\n                        ThumbnailsCacheManager.PREFIX_THUMBNAIL + file.getRemoteId()\n                );\n\n                if (thumbnail != null) {\n                    if (MimeTypeUtil.isVideo(file)) {\n                        Bitmap withOverlay = ThumbnailsCacheManager.addVideoOverlay(thumbnail, context);\n                        thumbnailView.setImageBitmap(withOverlay);\n                    } else {\n                        thumbnailView.setImageBitmap(thumbnail);\n                    }\n                } else {\n                    thumbnailView.setImageDrawable(MimeTypeUtil.getFileTypeIcon(file.getMimeType(),\n                                                                                file.getFileName(),\n                                                                                context,\n                                                                                viewThemeUtils));\n\n                    // generate new thumbnail\n                    if (ThumbnailsCacheManager.cancelPotentialThumbnailWork(file, thumbnailView)) {\n                        try {\n                            final ThumbnailsCacheManager.ThumbnailGenerationTask task =\n                                new ThumbnailsCacheManager.ThumbnailGenerationTask(thumbnailView,\n                                                                                   storageManager,\n                                                                                   user,\n                                                                                   asyncTasks);\n\n                            final ThumbnailsCacheManager.AsyncThumbnailDrawable asyncDrawable =\n                                    new ThumbnailsCacheManager.AsyncThumbnailDrawable(context.getResources(),\n                                            thumbnail, task);\n                            thumbnailView.setImageDrawable(asyncDrawable);\n                            asyncTasks.add(task);\n                            task.execute(new ThumbnailsCacheManager.ThumbnailGenerationTaskObject(file,\n                                    file.getRemoteId()));\n                        } catch (IllegalArgumentException e) {\n                            Log_OC.d(TAG, \"ThumbnailGenerationTask : \" + e.getMessage());\n                        }\n                    }\n                }\n\n                if (\"image/png\".equalsIgnoreCase(file.getMimeType())) {\n                    thumbnailView.setBackgroundColor(context.getResources().getColor(R.color.bg_default));\n                }\n            } else {\n                thumbnailView.setImageDrawable(MimeTypeUtil.getFileTypeIcon(file.getMimeType(),\n                                                                            file.getFileName(),\n                                                                            context,\n                                                                            viewThemeUtils));\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setThumbnail from TrashbinListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: setThumbnail\n\n        Method Code: private void setThumbnail(TrashbinFile file, ImageView thumbnailView) {\n        if (file.isFolder()) {\n            thumbnailView.setImageDrawable(MimeTypeUtil.getDefaultFolderIcon(context, viewThemeUtils));\n        } else {\n            if ((MimeTypeUtil.isImage(file) || MimeTypeUtil.isVideo(file)) && file.getRemoteId() != null) {\n                // Thumbnail in cache?\n                Bitmap thumbnail = ThumbnailsCacheManager.getBitmapFromDiskCache(\n                        ThumbnailsCacheManager.PREFIX_THUMBNAIL + file.getRemoteId()\n                );\n\n                if (thumbnail != null) {\n                    if (MimeTypeUtil.isVideo(file)) {\n                        Bitmap withOverlay = ThumbnailsCacheManager.addVideoOverlay(thumbnail, context);\n                        thumbnailView.setImageBitmap(withOverlay);\n                    } else {\n                        thumbnailView.setImageBitmap(thumbnail);\n                    }\n                } else {\n                    thumbnailView.setImageDrawable(MimeTypeUtil.getFileTypeIcon(file.getMimeType(),\n                                                                                file.getFileName(),\n                                                                                context,\n                                                                                viewThemeUtils));\n\n                    // generate new thumbnail\n                    if (ThumbnailsCacheManager.cancelPotentialThumbnailWork(file, thumbnailView)) {\n                        try {\n                            final ThumbnailsCacheManager.ThumbnailGenerationTask task =\n                                new ThumbnailsCacheManager.ThumbnailGenerationTask(thumbnailView,\n                                                                                   storageManager,\n                                                                                   user,\n                                                                                   asyncTasks);\n\n                            final ThumbnailsCacheManager.AsyncThumbnailDrawable asyncDrawable =\n                                    new ThumbnailsCacheManager.AsyncThumbnailDrawable(context.getResources(),\n                                            thumbnail, task);\n                            thumbnailView.setImageDrawable(asyncDrawable);\n                            asyncTasks.add(task);\n                            task.execute(new ThumbnailsCacheManager.ThumbnailGenerationTaskObject(file,\n                                    file.getRemoteId()));\n                        } catch (IllegalArgumentException e) {\n                            Log_OC.d(TAG, \"ThumbnailGenerationTask : \" + e.getMessage());\n                        }\n                    }\n                }\n\n                if (\"image/png\".equalsIgnoreCase(file.getMimeType())) {\n                    thumbnailView.setBackgroundColor(context.getResources().getColor(R.color.bg_default));\n                }\n            } else {\n                thumbnailView.setImageDrawable(MimeTypeUtil.getFileTypeIcon(file.getMimeType(),\n                                                                            file.getFileName(),\n                                                                            context,\n                                                                            viewThemeUtils));\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setThumbnail(file: TrashbinFile, thumbnailView: UIImageView) {\n    if file.isFolder() {\n        thumbnailView.image = MimeTypeUtil.getDefaultFolderIcon(context: context, viewThemeUtils: viewThemeUtils)\n    } else {\n        if (MimeTypeUtil.isImage(file) || MimeTypeUtil.isVideo(file)), let remoteId = file.getRemoteId() {\n            // Thumbnail in cache?\n            if let thumbnail = ThumbnailsCacheManager.getBitmapFromDiskCache(key: ThumbnailsCacheManager.PREFIX_THUMBNAIL + remoteId) {\n                if MimeTypeUtil.isVideo(file) {\n                    let withOverlay = ThumbnailsCacheManager.addVideoOverlay(thumbnail: thumbnail, context: context)\n                    thumbnailView.image = withOverlay\n                } else {\n                    thumbnailView.image = thumbnail\n                }\n            } else {\n                thumbnailView.image = MimeTypeUtil.getFileTypeIcon(mimeType: file.getMimeType(), fileName: file.getFileName(), context: context, viewThemeUtils: viewThemeUtils)\n\n                // generate new thumbnail\n                if ThumbnailsCacheManager.cancelPotentialThumbnailWork(file: file, imageView: thumbnailView) {\n                    do {\n                        let task = ThumbnailsCacheManager.ThumbnailGenerationTask(thumbnailView: thumbnailView, storageManager: storageManager, user: user, asyncTasks: asyncTasks)\n\n                        let asyncDrawable = ThumbnailsCacheManager.AsyncThumbnailDrawable(resources: context.resources, placeholder: thumbnail, task: task)\n                        thumbnailView.image = asyncDrawable\n                        asyncTasks.add(task)\n                        task.execute(ThumbnailsCacheManager.ThumbnailGenerationTaskObject(file: file, remoteId: remoteId))\n                    } catch let e as IllegalArgumentException {\n                        Log_OC.d(TAG, \"ThumbnailGenerationTask : \\(e.message)\")\n                    }\n                }\n            }\n\n            if file.getMimeType().caseInsensitiveCompare(\"image/png\") == .orderedSame {\n                thumbnailView.backgroundColor = UIColor(named: \"bg_default\")\n            }\n        } else {\n            thumbnailView.image = MimeTypeUtil.getFileTypeIcon(mimeType: file.getMimeType(), fileName: file.getFileName(), context: context, viewThemeUtils: viewThemeUtils)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "getItemViewType",
        "method_code": "@Override\n    public int getItemViewType(int position) {\n        if (position == files.size()) {\n            return TRASHBIN_FOOTER;\n        } else {\n            return TRASHBIN_ITEM;\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getItemViewType from TrashbinListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getItemViewType\n\n        Method Code: @Override\n    public int getItemViewType(int position) {\n        if (position == files.size()) {\n            return TRASHBIN_FOOTER;\n        } else {\n            return TRASHBIN_ITEM;\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getItemViewType(position: Int) -> Int {\n    if position == files.count {\n        return TRASHBIN_FOOTER\n    } else {\n        return TRASHBIN_ITEM\n    }\n}\n```"
    },
    {
        "method_name": "getItemCount",
        "method_code": "@Override\n    public int getItemCount() {\n        return files.size() + 1;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getItemCount from TrashbinListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getItemCount\n\n        Method Code: @Override\n    public int getItemCount() {\n        return files.size() + 1;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getItemCount() -> Int {\n    return files.count + 1\n}\n```"
    },
    {
        "method_name": "cancelAllPendingTasks",
        "method_code": "public void cancelAllPendingTasks() {\n        for (ThumbnailsCacheManager.ThumbnailGenerationTask task : asyncTasks) {\n            if (task != null) {\n                task.cancel(true);\n                if (task.getGetMethod() != null) {\n                    Log_OC.d(TAG, \"cancel: abort get method directly\");\n                    task.getGetMethod().abort();\n                }\n            }\n        }\n\n        asyncTasks.clear();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled cancelAllPendingTasks from TrashbinListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: cancelAllPendingTasks\n\n        Method Code: public void cancelAllPendingTasks() {\n        for (ThumbnailsCacheManager.ThumbnailGenerationTask task : asyncTasks) {\n            if (task != null) {\n                task.cancel(true);\n                if (task.getGetMethod() != null) {\n                    Log_OC.d(TAG, \"cancel: abort get method directly\");\n                    task.getGetMethod().abort();\n                }\n            }\n        }\n\n        asyncTasks.clear();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc cancelAllPendingTasks() {\n    for task in asyncTasks {\n        if let task = task {\n            task.cancel(true)\n            if let getMethod = task.getGetMethod() {\n                print(\"\\(TAG): cancel: abort get method directly\")\n                getMethod.abort()\n            }\n        }\n    }\n    asyncTasks.removeAll()\n}\n```"
    },
    {
        "method_name": "setSortOrder",
        "method_code": "public void setSortOrder(FileSortOrder sortOrder) {\n        preferences.setSortOrder(FileSortOrder.Type.trashBinView, sortOrder);\n        files = sortOrder.sortTrashbinFiles(files);\n        notifyDataSetChanged();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setSortOrder from TrashbinListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: setSortOrder\n\n        Method Code: public void setSortOrder(FileSortOrder sortOrder) {\n        preferences.setSortOrder(FileSortOrder.Type.trashBinView, sortOrder);\n        files = sortOrder.sortTrashbinFiles(files);\n        notifyDataSetChanged();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setSortOrder(_ sortOrder: FileSortOrder) {\n    preferences.setSortOrder(type: .trashBinView, sortOrder: sortOrder)\n    files = sortOrder.sortTrashbinFiles(files)\n    notifyDataSetChanged()\n}\n```"
    }
]