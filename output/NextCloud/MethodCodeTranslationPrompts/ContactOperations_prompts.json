[
    {
        "method_name": "insertContact",
        "method_code": "public void insertContact(VCard vcard) throws RemoteException, OperationApplicationException {\n        // TODO handle Raw properties - Raw properties include various extension which start with \"X-\" like X-ASSISTANT, X-AIM, X-SPOUSE\n\n        List<NonEmptyContentValues> contentValues = new ArrayList<NonEmptyContentValues>();\n        convertName(contentValues, vcard);\n        convertNickname(contentValues, vcard);\n        convertPhones(contentValues, vcard);\n        convertEmails(contentValues, vcard);\n        convertAddresses(contentValues, vcard);\n        convertIms(contentValues, vcard);\n\n        // handle Android Custom fields..This is only valid for Android generated Vcards. As the Android would\n        // generate NickName, ContactEvents other than Birthday and RelationShip with this \"X-ANDROID-CUSTOM\" name\n        convertCustomFields(contentValues, vcard);\n\n        // handle Iphone kinda of group properties. which are grouped together.\n        convertGroupedProperties(contentValues, vcard);\n\n        convertBirthdays(contentValues, vcard);\n\n        convertWebsites(contentValues, vcard);\n        convertNotes(contentValues, vcard);\n        convertPhotos(contentValues, vcard);\n        convertOrganization(contentValues, vcard);\n\n        ArrayList<ContentProviderOperation> operations = new ArrayList<ContentProviderOperation>(contentValues.size());\n        ContentValues cv = account.getContentValues();\n        //ContactsContract.RawContact.CONTENT_URI needed to add account, backReference is also not needed\n        ContentProviderOperation operation =\n                ContentProviderOperation.newInsert(ContactsContract.RawContacts.CONTENT_URI)\n                        .withValues(cv)\n                        .build();\n        operations.add(operation);\n        for (NonEmptyContentValues values : contentValues) {\n            cv = values.getContentValues();\n            if (cv.size() == 0) {\n                continue;\n            }\n\n            //@formatter:off\n            operation =\n                    ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)\n                            .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, rawContactID)\n                            .withValues(cv)\n                            .build();\n            //@formatter:on\n            operations.add(operation);\n        }\n\n        // Executing all the insert operations as a single database transaction\n        context.getContentResolver().applyBatch(ContactsContract.AUTHORITY, operations);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled insertContact from ContactOperations.java into Swift.\n\n        Input:\n\n        Method Name: insertContact\n\n        Method Code: public void insertContact(VCard vcard) throws RemoteException, OperationApplicationException {\n        // TODO handle Raw properties - Raw properties include various extension which start with \"X-\" like X-ASSISTANT, X-AIM, X-SPOUSE\n\n        List<NonEmptyContentValues> contentValues = new ArrayList<NonEmptyContentValues>();\n        convertName(contentValues, vcard);\n        convertNickname(contentValues, vcard);\n        convertPhones(contentValues, vcard);\n        convertEmails(contentValues, vcard);\n        convertAddresses(contentValues, vcard);\n        convertIms(contentValues, vcard);\n\n        // handle Android Custom fields..This is only valid for Android generated Vcards. As the Android would\n        // generate NickName, ContactEvents other than Birthday and RelationShip with this \"X-ANDROID-CUSTOM\" name\n        convertCustomFields(contentValues, vcard);\n\n        // handle Iphone kinda of group properties. which are grouped together.\n        convertGroupedProperties(contentValues, vcard);\n\n        convertBirthdays(contentValues, vcard);\n\n        convertWebsites(contentValues, vcard);\n        convertNotes(contentValues, vcard);\n        convertPhotos(contentValues, vcard);\n        convertOrganization(contentValues, vcard);\n\n        ArrayList<ContentProviderOperation> operations = new ArrayList<ContentProviderOperation>(contentValues.size());\n        ContentValues cv = account.getContentValues();\n        //ContactsContract.RawContact.CONTENT_URI needed to add account, backReference is also not needed\n        ContentProviderOperation operation =\n                ContentProviderOperation.newInsert(ContactsContract.RawContacts.CONTENT_URI)\n                        .withValues(cv)\n                        .build();\n        operations.add(operation);\n        for (NonEmptyContentValues values : contentValues) {\n            cv = values.getContentValues();\n            if (cv.size() == 0) {\n                continue;\n            }\n\n            //@formatter:off\n            operation =\n                    ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)\n                            .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, rawContactID)\n                            .withValues(cv)\n                            .build();\n            //@formatter:on\n            operations.add(operation);\n        }\n\n        // Executing all the insert operations as a single database transaction\n        context.getContentResolver().applyBatch(ContactsContract.AUTHORITY, operations);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc insertContact(vcard: VCard) throws {\n    // TODO handle Raw properties - Raw properties include various extension which start with \"X-\" like X-ASSISTANT, X-AIM, X-SPOUSE\n\n    var contentValues: [NonEmptyContentValues] = []\n    convertName(&contentValues, vcard: vcard)\n    convertNickname(&contentValues, vcard: vcard)\n    convertPhones(&contentValues, vcard: vcard)\n    convertEmails(&contentValues, vcard: vcard)\n    convertAddresses(&contentValues, vcard: vcard)\n    convertIms(&contentValues, vcard: vcard)\n\n    // handle Android Custom fields..This is only valid for Android generated Vcards. As the Android would\n    // generate NickName, ContactEvents other than Birthday and RelationShip with this \"X-ANDROID-CUSTOM\" name\n    convertCustomFields(&contentValues, vcard: vcard)\n\n    // handle Iphone kinda of group properties. which are grouped together.\n    convertGroupedProperties(&contentValues, vcard: vcard)\n\n    convertBirthdays(&contentValues, vcard: vcard)\n\n    convertWebsites(&contentValues, vcard: vcard)\n    convertNotes(&contentValues, vcard: vcard)\n    convertPhotos(&contentValues, vcard: vcard)\n    convertOrganization(&contentValues, vcard: vcard)\n\n    var operations: [ContentProviderOperation] = []\n    var cv = account.getContentValues()\n    let operation = ContentProviderOperation.newInsert(ContactsContract.RawContacts.CONTENT_URI)\n        .withValues(cv)\n        .build()\n    operations.append(operation)\n    for values in contentValues {\n        cv = values.getContentValues()\n        if cv.isEmpty {\n            continue\n        }\n\n        let operation = ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)\n            .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, rawContactID)\n            .withValues(cv)\n            .build()\n        operations.append(operation)\n    }\n\n    // Executing all the insert operations as a single database transaction\n    try context.contentResolver.applyBatch(ContactsContract.AUTHORITY, operations)\n}\n```"
    },
    {
        "method_name": "updateContact",
        "method_code": "public void updateContact(VCard vcard, Long key) throws RemoteException, OperationApplicationException {\n\n        List<NonEmptyContentValues> contentValues = new ArrayList<NonEmptyContentValues>();\n        convertName(contentValues, vcard);\n        convertNickname(contentValues, vcard);\n        convertPhones(contentValues, vcard);\n        convertEmails(contentValues, vcard);\n        convertAddresses(contentValues, vcard);\n        convertIms(contentValues, vcard);\n\n        // handle Android Custom fields..This is only valid for Android generated Vcards. As the Android would\n        // generate NickName, ContactEvents other than Birthday and RelationShip with this \"X-ANDROID-CUSTOM\" name\n        convertCustomFields(contentValues, vcard);\n\n        // handle Iphone kinda of group properties. which are grouped together.\n        convertGroupedProperties(contentValues, vcard);\n\n        convertBirthdays(contentValues, vcard);\n\n        convertWebsites(contentValues, vcard);\n        convertNotes(contentValues, vcard);\n        convertPhotos(contentValues, vcard);\n        convertOrganization(contentValues, vcard);\n\n        ArrayList<ContentProviderOperation> operations = new ArrayList<ContentProviderOperation>(contentValues.size());\n        ContentValues cv = account.getContentValues();\n        //ContactsContract.RawContact.CONTENT_URI needed to add account, backReference is also not needed\n        long contactID = key;\n        ContentProviderOperation operation;\n\n        for (NonEmptyContentValues values : contentValues) {\n            cv = values.getContentValues();\n            if (cv.size() == 0) {\n                continue;\n            }\n\n            String mimeType = cv.getAsString(\"mimetype\");\n            cv.remove(\"mimetype\");\n            //@formatter:off\n            operation =\n                    ContentProviderOperation.newUpdate(ContactsContract.Data.CONTENT_URI)\n                            .withSelection(ContactsContract.Data.RAW_CONTACT_ID + \" = ? AND \" + ContactsContract.Data.MIMETYPE + \" = ? \", new String[]{\"\" + contactID, \"\" + mimeType})\n                            .withValues(cv)\n                            .build();\n            //@formatter:on\n            operations.add(operation);\n        }\n\n        // Executing all the insert operations as a single database transaction\n        context.getContentResolver().applyBatch(ContactsContract.AUTHORITY, operations);\n\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled updateContact from ContactOperations.java into Swift.\n\n        Input:\n\n        Method Name: updateContact\n\n        Method Code: public void updateContact(VCard vcard, Long key) throws RemoteException, OperationApplicationException {\n\n        List<NonEmptyContentValues> contentValues = new ArrayList<NonEmptyContentValues>();\n        convertName(contentValues, vcard);\n        convertNickname(contentValues, vcard);\n        convertPhones(contentValues, vcard);\n        convertEmails(contentValues, vcard);\n        convertAddresses(contentValues, vcard);\n        convertIms(contentValues, vcard);\n\n        // handle Android Custom fields..This is only valid for Android generated Vcards. As the Android would\n        // generate NickName, ContactEvents other than Birthday and RelationShip with this \"X-ANDROID-CUSTOM\" name\n        convertCustomFields(contentValues, vcard);\n\n        // handle Iphone kinda of group properties. which are grouped together.\n        convertGroupedProperties(contentValues, vcard);\n\n        convertBirthdays(contentValues, vcard);\n\n        convertWebsites(contentValues, vcard);\n        convertNotes(contentValues, vcard);\n        convertPhotos(contentValues, vcard);\n        convertOrganization(contentValues, vcard);\n\n        ArrayList<ContentProviderOperation> operations = new ArrayList<ContentProviderOperation>(contentValues.size());\n        ContentValues cv = account.getContentValues();\n        //ContactsContract.RawContact.CONTENT_URI needed to add account, backReference is also not needed\n        long contactID = key;\n        ContentProviderOperation operation;\n\n        for (NonEmptyContentValues values : contentValues) {\n            cv = values.getContentValues();\n            if (cv.size() == 0) {\n                continue;\n            }\n\n            String mimeType = cv.getAsString(\"mimetype\");\n            cv.remove(\"mimetype\");\n            //@formatter:off\n            operation =\n                    ContentProviderOperation.newUpdate(ContactsContract.Data.CONTENT_URI)\n                            .withSelection(ContactsContract.Data.RAW_CONTACT_ID + \" = ? AND \" + ContactsContract.Data.MIMETYPE + \" = ? \", new String[]{\"\" + contactID, \"\" + mimeType})\n                            .withValues(cv)\n                            .build();\n            //@formatter:on\n            operations.add(operation);\n        }\n\n        // Executing all the insert operations as a single database transaction\n        context.getContentResolver().applyBatch(ContactsContract.AUTHORITY, operations);\n\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc updateContact(vcard: VCard, key: Int64) throws {\n    var contentValues: [NonEmptyContentValues] = []\n    convertName(&contentValues, vcard: vcard)\n    convertNickname(&contentValues, vcard: vcard)\n    convertPhones(&contentValues, vcard: vcard)\n    convertEmails(&contentValues, vcard: vcard)\n    convertAddresses(&contentValues, vcard: vcard)\n    convertIms(&contentValues, vcard: vcard)\n    \n    convertCustomFields(&contentValues, vcard: vcard)\n    convertGroupedProperties(&contentValues, vcard: vcard)\n    convertBirthdays(&contentValues, vcard: vcard)\n    convertWebsites(&contentValues, vcard: vcard)\n    convertNotes(&contentValues, vcard: vcard)\n    convertPhotos(&contentValues, vcard: vcard)\n    convertOrganization(&contentValues, vcard: vcard)\n    \n    var operations: [ContentProviderOperation] = []\n    var cv = account.getContentValues()\n    let contactID = key\n    \n    for values in contentValues {\n        cv = values.getContentValues()\n        if cv.count == 0 {\n            continue\n        }\n        \n        if let mimeType = cv[\"mimetype\"] as? String {\n            cv.removeValue(forKey: \"mimetype\")\n            let operation = ContentProviderOperation.newUpdate(ContactsContract.Data.CONTENT_URI)\n                .withSelection(\"\\(ContactsContract.Data.RAW_CONTACT_ID) = ? AND \\(ContactsContract.Data.MIMETYPE) = ? \", selectionArgs: [\"\\(contactID)\", mimeType])\n                .withValues(cv)\n                .build()\n            operations.append(operation)\n        }\n    }\n    \n    try context.contentResolver.applyBatch(ContactsContract.AUTHORITY, operations: operations)\n}\n```"
    },
    {
        "method_name": "convertName",
        "method_code": "private void convertName(List<NonEmptyContentValues> contentValues, VCard vcard) {\n        NonEmptyContentValues values = new NonEmptyContentValues(ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE);\n\n        String firstName = null, lastName = null, namePrefix = null, nameSuffix = null;\n        StructuredName n = vcard.getStructuredName();\n        if (n != null) {\n            firstName = n.getGiven();\n            values.put(ContactsContract.CommonDataKinds.StructuredName.GIVEN_NAME, firstName);\n\n            lastName = n.getFamily();\n            values.put(ContactsContract.CommonDataKinds.StructuredName.FAMILY_NAME, lastName);\n\n            List<String> prefixes = n.getPrefixes();\n            if (!prefixes.isEmpty()) {\n                namePrefix = prefixes.get(0);\n                values.put(ContactsContract.CommonDataKinds.StructuredName.PREFIX, namePrefix);\n            }\n\n            List<String> suffixes = n.getSuffixes();\n            if (!suffixes.isEmpty()) {\n                nameSuffix = suffixes.get(0);\n                values.put(ContactsContract.CommonDataKinds.StructuredName.SUFFIX, nameSuffix);\n            }\n        }\n\n        FormattedName fn = vcard.getFormattedName();\n        String formattedName = (fn == null) ? null : fn.getValue();\n\n        String displayName;\n        if (isEmpty(formattedName)) {\n            StringBuilder sb = new StringBuilder();\n            if (!isEmpty(namePrefix)){\n                sb.append(namePrefix).append(' ');\n            }\n            if (!isEmpty(firstName)){\n                sb.append(firstName).append(' ');\n            }\n            if (!isEmpty(lastName)){\n                sb.append(lastName).append(' ');\n            }\n            if (!isEmpty(nameSuffix)){\n                if (sb.length() > 0){\n                    sb.deleteCharAt(sb.length()-1); //delete space character\n                    sb.append(\", \");\n                }\n                sb.append(nameSuffix);\n            }\n\n            displayName = sb.toString().trim();\n        } else {\n            displayName = formattedName;\n        }\n        values.put(ContactsContract.CommonDataKinds.StructuredName.DISPLAY_NAME, displayName);\n\n        RawProperty xPhoneticFirstName = vcard.getExtendedProperty(\"X-PHONETIC-FIRST-NAME\");\n        String firstPhoneticName = (xPhoneticFirstName == null) ? null : xPhoneticFirstName.getValue();\n        values.put(ContactsContract.CommonDataKinds.StructuredName.PHONETIC_GIVEN_NAME, firstPhoneticName);\n\n        RawProperty xPhoneticLastName = vcard.getExtendedProperty(\"X-PHONETIC-LAST-NAME\");\n        String lastPhoneticName = (xPhoneticLastName == null) ? null : xPhoneticLastName.getValue();\n        values.put(ContactsContract.CommonDataKinds.StructuredName.PHONETIC_FAMILY_NAME, lastPhoneticName);\n\n        contentValues.add(values);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled convertName from ContactOperations.java into Swift.\n\n        Input:\n\n        Method Name: convertName\n\n        Method Code: private void convertName(List<NonEmptyContentValues> contentValues, VCard vcard) {\n        NonEmptyContentValues values = new NonEmptyContentValues(ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE);\n\n        String firstName = null, lastName = null, namePrefix = null, nameSuffix = null;\n        StructuredName n = vcard.getStructuredName();\n        if (n != null) {\n            firstName = n.getGiven();\n            values.put(ContactsContract.CommonDataKinds.StructuredName.GIVEN_NAME, firstName);\n\n            lastName = n.getFamily();\n            values.put(ContactsContract.CommonDataKinds.StructuredName.FAMILY_NAME, lastName);\n\n            List<String> prefixes = n.getPrefixes();\n            if (!prefixes.isEmpty()) {\n                namePrefix = prefixes.get(0);\n                values.put(ContactsContract.CommonDataKinds.StructuredName.PREFIX, namePrefix);\n            }\n\n            List<String> suffixes = n.getSuffixes();\n            if (!suffixes.isEmpty()) {\n                nameSuffix = suffixes.get(0);\n                values.put(ContactsContract.CommonDataKinds.StructuredName.SUFFIX, nameSuffix);\n            }\n        }\n\n        FormattedName fn = vcard.getFormattedName();\n        String formattedName = (fn == null) ? null : fn.getValue();\n\n        String displayName;\n        if (isEmpty(formattedName)) {\n            StringBuilder sb = new StringBuilder();\n            if (!isEmpty(namePrefix)){\n                sb.append(namePrefix).append(' ');\n            }\n            if (!isEmpty(firstName)){\n                sb.append(firstName).append(' ');\n            }\n            if (!isEmpty(lastName)){\n                sb.append(lastName).append(' ');\n            }\n            if (!isEmpty(nameSuffix)){\n                if (sb.length() > 0){\n                    sb.deleteCharAt(sb.length()-1); //delete space character\n                    sb.append(\", \");\n                }\n                sb.append(nameSuffix);\n            }\n\n            displayName = sb.toString().trim();\n        } else {\n            displayName = formattedName;\n        }\n        values.put(ContactsContract.CommonDataKinds.StructuredName.DISPLAY_NAME, displayName);\n\n        RawProperty xPhoneticFirstName = vcard.getExtendedProperty(\"X-PHONETIC-FIRST-NAME\");\n        String firstPhoneticName = (xPhoneticFirstName == null) ? null : xPhoneticFirstName.getValue();\n        values.put(ContactsContract.CommonDataKinds.StructuredName.PHONETIC_GIVEN_NAME, firstPhoneticName);\n\n        RawProperty xPhoneticLastName = vcard.getExtendedProperty(\"X-PHONETIC-LAST-NAME\");\n        String lastPhoneticName = (xPhoneticLastName == null) ? null : xPhoneticLastName.getValue();\n        values.put(ContactsContract.CommonDataKinds.StructuredName.PHONETIC_FAMILY_NAME, lastPhoneticName);\n\n        contentValues.add(values);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func convertName(contentValues: inout [NonEmptyContentValues], vcard: VCard) {\n    var values = NonEmptyContentValues(type: ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE)\n\n    var firstName: String? = nil\n    var lastName: String? = nil\n    var namePrefix: String? = nil\n    var nameSuffix: String? = nil\n    if let n = vcard.getStructuredName() {\n        firstName = n.getGiven()\n        values.put(ContactsContract.CommonDataKinds.StructuredName.GIVEN_NAME, firstName)\n\n        lastName = n.getFamily()\n        values.put(ContactsContract.CommonDataKinds.StructuredName.FAMILY_NAME, lastName)\n\n        let prefixes = n.getPrefixes()\n        if !prefixes.isEmpty {\n            namePrefix = prefixes[0]\n            values.put(ContactsContract.CommonDataKinds.StructuredName.PREFIX, namePrefix)\n        }\n\n        let suffixes = n.getSuffixes()\n        if !suffixes.isEmpty {\n            nameSuffix = suffixes[0]\n            values.put(ContactsContract.CommonDataKinds.StructuredName.SUFFIX, nameSuffix)\n        }\n    }\n\n    let fn = vcard.getFormattedName()\n    let formattedName = fn?.getValue()\n\n    let displayName: String\n    if isEmpty(formattedName) {\n        var sb = \"\"\n        if !isEmpty(namePrefix) {\n            sb.append(\"\\(namePrefix!) \")\n        }\n        if !isEmpty(firstName) {\n            sb.append(\"\\(firstName!) \")\n        }\n        if !isEmpty(lastName) {\n            sb.append(\"\\(lastName!) \")\n        }\n        if !isEmpty(nameSuffix) {\n            if !sb.isEmpty {\n                sb.removeLast() // delete space character\n                sb.append(\", \")\n            }\n            sb.append(nameSuffix!)\n        }\n\n        displayName = sb.trimmingCharacters(in: .whitespaces)\n    } else {\n        displayName = formattedName!\n    }\n    values.put(ContactsContract.CommonDataKinds.StructuredName.DISPLAY_NAME, displayName)\n\n    let xPhoneticFirstName = vcard.getExtendedProperty(\"X-PHONETIC-FIRST-NAME\")\n    let firstPhoneticName = xPhoneticFirstName?.getValue()\n    values.put(ContactsContract.CommonDataKinds.StructuredName.PHONETIC_GIVEN_NAME, firstPhoneticName)\n\n    let xPhoneticLastName = vcard.getExtendedProperty(\"X-PHONETIC-LAST-NAME\")\n    let lastPhoneticName = xPhoneticLastName?.getValue()\n    values.put(ContactsContract.CommonDataKinds.StructuredName.PHONETIC_FAMILY_NAME, lastPhoneticName)\n\n    contentValues.append(values)\n}\n```"
    },
    {
        "method_name": "convertNickname",
        "method_code": "private void convertNickname(List<NonEmptyContentValues> contentValues, VCard vcard) {\n        for (Nickname nickname : vcard.getNicknames()) {\n            List<String> nicknameValues = nickname.getValues();\n            if (nicknameValues.isEmpty()) {\n                continue;\n            }\n\n            for (String nicknameValue : nicknameValues) {\n                NonEmptyContentValues cv = new NonEmptyContentValues(ContactsContract.CommonDataKinds.Nickname.CONTENT_ITEM_TYPE);\n                cv.put(ContactsContract.CommonDataKinds.Nickname.NAME, nicknameValue);\n                contentValues.add(cv);\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled convertNickname from ContactOperations.java into Swift.\n\n        Input:\n\n        Method Name: convertNickname\n\n        Method Code: private void convertNickname(List<NonEmptyContentValues> contentValues, VCard vcard) {\n        for (Nickname nickname : vcard.getNicknames()) {\n            List<String> nicknameValues = nickname.getValues();\n            if (nicknameValues.isEmpty()) {\n                continue;\n            }\n\n            for (String nicknameValue : nicknameValues) {\n                NonEmptyContentValues cv = new NonEmptyContentValues(ContactsContract.CommonDataKinds.Nickname.CONTENT_ITEM_TYPE);\n                cv.put(ContactsContract.CommonDataKinds.Nickname.NAME, nicknameValue);\n                contentValues.add(cv);\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func convertNickname(contentValues: inout [NonEmptyContentValues], vcard: VCard) {\n    for nickname in vcard.getNicknames() {\n        let nicknameValues = nickname.getValues()\n        if nicknameValues.isEmpty {\n            continue\n        }\n\n        for nicknameValue in nicknameValues {\n            let cv = NonEmptyContentValues(type: ContactsContract.CommonDataKinds.Nickname.CONTENT_ITEM_TYPE)\n            cv.put(key: ContactsContract.CommonDataKinds.Nickname.NAME, value: nicknameValue)\n            contentValues.append(cv)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "convertPhones",
        "method_code": "private void convertPhones(List<NonEmptyContentValues> contentValues, VCard vcard) {\n        for (Telephone telephone : vcard.getTelephoneNumbers()) {\n            String value = telephone.getText();\n            TelUri uri = telephone.getUri();\n            if (isEmpty(value)) {\n                if (uri == null) {\n                    continue;\n                }\n                value = uri.toString();\n            }\n\n            int phoneKind = DataMappings.getPhoneType(telephone);\n\n            NonEmptyContentValues cv = new NonEmptyContentValues(ContactsContract.CommonDataKinds.Phone.CONTENT_ITEM_TYPE);\n            cv.put(ContactsContract.CommonDataKinds.Phone.NUMBER, value);\n            cv.put(ContactsContract.CommonDataKinds.Phone.TYPE, phoneKind);\n            contentValues.add(cv);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled convertPhones from ContactOperations.java into Swift.\n\n        Input:\n\n        Method Name: convertPhones\n\n        Method Code: private void convertPhones(List<NonEmptyContentValues> contentValues, VCard vcard) {\n        for (Telephone telephone : vcard.getTelephoneNumbers()) {\n            String value = telephone.getText();\n            TelUri uri = telephone.getUri();\n            if (isEmpty(value)) {\n                if (uri == null) {\n                    continue;\n                }\n                value = uri.toString();\n            }\n\n            int phoneKind = DataMappings.getPhoneType(telephone);\n\n            NonEmptyContentValues cv = new NonEmptyContentValues(ContactsContract.CommonDataKinds.Phone.CONTENT_ITEM_TYPE);\n            cv.put(ContactsContract.CommonDataKinds.Phone.NUMBER, value);\n            cv.put(ContactsContract.CommonDataKinds.Phone.TYPE, phoneKind);\n            contentValues.add(cv);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func convertPhones(contentValues: inout [NonEmptyContentValues], vcard: VCard) {\n    for telephone in vcard.getTelephoneNumbers() {\n        var value = telephone.getText()\n        let uri = telephone.getUri()\n        if value.isEmpty {\n            if uri == nil {\n                continue\n            }\n            value = uri!.description\n        }\n\n        let phoneKind = DataMappings.getPhoneType(telephone)\n\n        var cv = NonEmptyContentValues(type: ContactsContract.CommonDataKinds.Phone.CONTENT_ITEM_TYPE)\n        cv.put(key: ContactsContract.CommonDataKinds.Phone.NUMBER, value: value)\n        cv.put(key: ContactsContract.CommonDataKinds.Phone.TYPE, value: phoneKind)\n        contentValues.append(cv)\n    }\n}\n```"
    },
    {
        "method_name": "convertEmails",
        "method_code": "private void convertEmails(List<NonEmptyContentValues> contentValues, VCard vcard) {\n        for (Email email : vcard.getEmails()) {\n            String value = email.getValue();\n            if (isEmpty(value)) {\n                continue;\n            }\n\n            int emailKind = DataMappings.getEmailType(email);\n\n            NonEmptyContentValues cv = new NonEmptyContentValues(ContactsContract.CommonDataKinds.Email.CONTENT_ITEM_TYPE);\n            cv.put(ContactsContract.CommonDataKinds.Email.ADDRESS, value);\n            cv.put(ContactsContract.CommonDataKinds.Email.TYPE, emailKind);\n            contentValues.add(cv);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled convertEmails from ContactOperations.java into Swift.\n\n        Input:\n\n        Method Name: convertEmails\n\n        Method Code: private void convertEmails(List<NonEmptyContentValues> contentValues, VCard vcard) {\n        for (Email email : vcard.getEmails()) {\n            String value = email.getValue();\n            if (isEmpty(value)) {\n                continue;\n            }\n\n            int emailKind = DataMappings.getEmailType(email);\n\n            NonEmptyContentValues cv = new NonEmptyContentValues(ContactsContract.CommonDataKinds.Email.CONTENT_ITEM_TYPE);\n            cv.put(ContactsContract.CommonDataKinds.Email.ADDRESS, value);\n            cv.put(ContactsContract.CommonDataKinds.Email.TYPE, emailKind);\n            contentValues.add(cv);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func convertEmails(contentValues: inout [NonEmptyContentValues], vcard: VCard) {\n    for email in vcard.getEmails() {\n        let value = email.getValue()\n        if value.isEmpty {\n            continue\n        }\n\n        let emailKind = DataMappings.getEmailType(email)\n\n        var cv = NonEmptyContentValues(type: ContactsContract.CommonDataKinds.Email.CONTENT_ITEM_TYPE)\n        cv.put(key: ContactsContract.CommonDataKinds.Email.ADDRESS, value: value)\n        cv.put(key: ContactsContract.CommonDataKinds.Email.TYPE, value: emailKind)\n        contentValues.append(cv)\n    }\n}\n```"
    },
    {
        "method_name": "convertAddresses",
        "method_code": "private void convertAddresses(List<NonEmptyContentValues> contentValues, VCard vcard) {\n        for (Address address : vcard.getAddresses()) {\n            NonEmptyContentValues cv = new NonEmptyContentValues(ContactsContract.CommonDataKinds.StructuredPostal.CONTENT_ITEM_TYPE);\n\n            String street = address.getStreetAddress();\n            cv.put(ContactsContract.CommonDataKinds.StructuredPostal.STREET, street);\n\n            String poBox = address.getPoBox();\n            cv.put(ContactsContract.CommonDataKinds.StructuredPostal.POBOX, poBox);\n\n            String city = address.getLocality();\n            cv.put(ContactsContract.CommonDataKinds.StructuredPostal.CITY, city);\n\n            String state = address.getRegion();\n            cv.put(ContactsContract.CommonDataKinds.StructuredPostal.REGION, state);\n\n            String zipCode = address.getPostalCode();\n            cv.put(ContactsContract.CommonDataKinds.StructuredPostal.POSTCODE, zipCode);\n\n            String country = address.getCountry();\n            cv.put(ContactsContract.CommonDataKinds.StructuredPostal.COUNTRY, country);\n\n            String label = address.getLabel();\n            cv.put(ContactsContract.CommonDataKinds.StructuredPostal.LABEL, label);\n\n            int addressKind = DataMappings.getAddressType(address);\n            cv.put(ContactsContract.CommonDataKinds.StructuredPostal.TYPE, addressKind);\n\n            contentValues.add(cv);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled convertAddresses from ContactOperations.java into Swift.\n\n        Input:\n\n        Method Name: convertAddresses\n\n        Method Code: private void convertAddresses(List<NonEmptyContentValues> contentValues, VCard vcard) {\n        for (Address address : vcard.getAddresses()) {\n            NonEmptyContentValues cv = new NonEmptyContentValues(ContactsContract.CommonDataKinds.StructuredPostal.CONTENT_ITEM_TYPE);\n\n            String street = address.getStreetAddress();\n            cv.put(ContactsContract.CommonDataKinds.StructuredPostal.STREET, street);\n\n            String poBox = address.getPoBox();\n            cv.put(ContactsContract.CommonDataKinds.StructuredPostal.POBOX, poBox);\n\n            String city = address.getLocality();\n            cv.put(ContactsContract.CommonDataKinds.StructuredPostal.CITY, city);\n\n            String state = address.getRegion();\n            cv.put(ContactsContract.CommonDataKinds.StructuredPostal.REGION, state);\n\n            String zipCode = address.getPostalCode();\n            cv.put(ContactsContract.CommonDataKinds.StructuredPostal.POSTCODE, zipCode);\n\n            String country = address.getCountry();\n            cv.put(ContactsContract.CommonDataKinds.StructuredPostal.COUNTRY, country);\n\n            String label = address.getLabel();\n            cv.put(ContactsContract.CommonDataKinds.StructuredPostal.LABEL, label);\n\n            int addressKind = DataMappings.getAddressType(address);\n            cv.put(ContactsContract.CommonDataKinds.StructuredPostal.TYPE, addressKind);\n\n            contentValues.add(cv);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func convertAddresses(contentValues: inout [NonEmptyContentValues], vcard: VCard) {\n    for address in vcard.getAddresses() {\n        let cv = NonEmptyContentValues(type: ContactsContract.CommonDataKinds.StructuredPostal.CONTENT_ITEM_TYPE)\n\n        let street = address.getStreetAddress()\n        cv.put(ContactsContract.CommonDataKinds.StructuredPostal.STREET, street)\n\n        let poBox = address.getPoBox()\n        cv.put(ContactsContract.CommonDataKinds.StructuredPostal.POBOX, poBox)\n\n        let city = address.getLocality()\n        cv.put(ContactsContract.CommonDataKinds.StructuredPostal.CITY, city)\n\n        let state = address.getRegion()\n        cv.put(ContactsContract.CommonDataKinds.StructuredPostal.REGION, state)\n\n        let zipCode = address.getPostalCode()\n        cv.put(ContactsContract.CommonDataKinds.StructuredPostal.POSTCODE, zipCode)\n\n        let country = address.getCountry()\n        cv.put(ContactsContract.CommonDataKinds.StructuredPostal.COUNTRY, country)\n\n        let label = address.getLabel()\n        cv.put(ContactsContract.CommonDataKinds.StructuredPostal.LABEL, label)\n\n        let addressKind = DataMappings.getAddressType(address)\n        cv.put(ContactsContract.CommonDataKinds.StructuredPostal.TYPE, addressKind)\n\n        contentValues.append(cv)\n    }\n}\n```"
    },
    {
        "method_name": "convertIms",
        "method_code": "private void convertIms(List<NonEmptyContentValues> contentValues, VCard vcard) {\n        //handle extended properties\n        for (Map.Entry<String, Integer> entry : DataMappings.getImPropertyNameMappings().entrySet()) {\n            String propertyName = entry.getKey();\n            Integer protocolType = entry.getValue();\n            List<RawProperty> rawProperties = vcard.getExtendedProperties(propertyName);\n            for (RawProperty rawProperty : rawProperties) {\n                NonEmptyContentValues cv = new NonEmptyContentValues(ContactsContract.CommonDataKinds.Im.CONTENT_ITEM_TYPE);\n\n                String value = rawProperty.getValue();\n                cv.put(ContactsContract.CommonDataKinds.Im.DATA, value);\n\n                cv.put(ContactsContract.CommonDataKinds.Im.PROTOCOL, protocolType);\n\n                contentValues.add(cv);\n            }\n        }\n\n        //handle IMPP properties\n        for (Impp impp : vcard.getImpps()) {\n            NonEmptyContentValues cv = new NonEmptyContentValues(ContactsContract.CommonDataKinds.Im.CONTENT_ITEM_TYPE);\n\n            String immpAddress = impp.getHandle();\n            cv.put(ContactsContract.CommonDataKinds.Im.DATA, immpAddress);\n\n            int immpProtocolType = DataMappings.getIMTypeFromProtocol(impp.getProtocol());\n            cv.put(ContactsContract.CommonDataKinds.Im.PROTOCOL, immpProtocolType);\n\n            contentValues.add(cv);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled convertIms from ContactOperations.java into Swift.\n\n        Input:\n\n        Method Name: convertIms\n\n        Method Code: private void convertIms(List<NonEmptyContentValues> contentValues, VCard vcard) {\n        //handle extended properties\n        for (Map.Entry<String, Integer> entry : DataMappings.getImPropertyNameMappings().entrySet()) {\n            String propertyName = entry.getKey();\n            Integer protocolType = entry.getValue();\n            List<RawProperty> rawProperties = vcard.getExtendedProperties(propertyName);\n            for (RawProperty rawProperty : rawProperties) {\n                NonEmptyContentValues cv = new NonEmptyContentValues(ContactsContract.CommonDataKinds.Im.CONTENT_ITEM_TYPE);\n\n                String value = rawProperty.getValue();\n                cv.put(ContactsContract.CommonDataKinds.Im.DATA, value);\n\n                cv.put(ContactsContract.CommonDataKinds.Im.PROTOCOL, protocolType);\n\n                contentValues.add(cv);\n            }\n        }\n\n        //handle IMPP properties\n        for (Impp impp : vcard.getImpps()) {\n            NonEmptyContentValues cv = new NonEmptyContentValues(ContactsContract.CommonDataKinds.Im.CONTENT_ITEM_TYPE);\n\n            String immpAddress = impp.getHandle();\n            cv.put(ContactsContract.CommonDataKinds.Im.DATA, immpAddress);\n\n            int immpProtocolType = DataMappings.getIMTypeFromProtocol(impp.getProtocol());\n            cv.put(ContactsContract.CommonDataKinds.Im.PROTOCOL, immpProtocolType);\n\n            contentValues.add(cv);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func convertIms(contentValues: inout [NonEmptyContentValues], vcard: VCard) {\n    // handle extended properties\n    for (propertyName, protocolType) in DataMappings.getImPropertyNameMappings() {\n        let rawProperties = vcard.getExtendedProperties(propertyName: propertyName)\n        for rawProperty in rawProperties {\n            var cv = NonEmptyContentValues(type: ContactsContract.CommonDataKinds.Im.CONTENT_ITEM_TYPE)\n            \n            let value = rawProperty.getValue()\n            cv.put(key: ContactsContract.CommonDataKinds.Im.DATA, value: value)\n            \n            cv.put(key: ContactsContract.CommonDataKinds.Im.PROTOCOL, value: protocolType)\n            \n            contentValues.append(cv)\n        }\n    }\n    \n    // handle IMPP properties\n    for impp in vcard.getImpps() {\n        var cv = NonEmptyContentValues(type: ContactsContract.CommonDataKinds.Im.CONTENT_ITEM_TYPE)\n        \n        let immpAddress = impp.getHandle()\n        cv.put(key: ContactsContract.CommonDataKinds.Im.DATA, value: immpAddress)\n        \n        let immpProtocolType = DataMappings.getIMTypeFromProtocol(protocol: impp.getProtocol())\n        cv.put(key: ContactsContract.CommonDataKinds.Im.PROTOCOL, value: immpProtocolType)\n        \n        contentValues.append(cv)\n    }\n}\n```"
    },
    {
        "method_name": "convertCustomFields",
        "method_code": "private void convertCustomFields(List<NonEmptyContentValues> contentValues, VCard vcard) {\n        for (AndroidCustomField customField : vcard.getProperties(AndroidCustomField.class)) {\n            List<String> values = customField.getValues();\n            if (values.isEmpty()) {\n                continue;\n            }\n\n            NonEmptyContentValues cv;\n            if (customField.isNickname()) {\n                cv = new NonEmptyContentValues(ContactsContract.CommonDataKinds.Nickname.CONTENT_ITEM_TYPE);\n                cv.put(ContactsContract.CommonDataKinds.Nickname.NAME, values.get(0));\n            } else if (customField.isContactEvent()) {\n                cv = new NonEmptyContentValues(ContactsContract.CommonDataKinds.Event.CONTENT_ITEM_TYPE);\n                cv.put(ContactsContract.CommonDataKinds.Event.START_DATE, values.get(0));\n                cv.put(ContactsContract.CommonDataKinds.Event.TYPE, values.get(1));\n            } else if (customField.isRelation()) {\n                cv = new NonEmptyContentValues(ContactsContract.CommonDataKinds.Relation.CONTENT_ITEM_TYPE);\n                cv.put(ContactsContract.CommonDataKinds.Relation.NAME, values.get(0));\n                cv.put(ContactsContract.CommonDataKinds.Relation.TYPE, values.get(1));\n            } else {\n                continue;\n            }\n\n            contentValues.add(cv);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled convertCustomFields from ContactOperations.java into Swift.\n\n        Input:\n\n        Method Name: convertCustomFields\n\n        Method Code: private void convertCustomFields(List<NonEmptyContentValues> contentValues, VCard vcard) {\n        for (AndroidCustomField customField : vcard.getProperties(AndroidCustomField.class)) {\n            List<String> values = customField.getValues();\n            if (values.isEmpty()) {\n                continue;\n            }\n\n            NonEmptyContentValues cv;\n            if (customField.isNickname()) {\n                cv = new NonEmptyContentValues(ContactsContract.CommonDataKinds.Nickname.CONTENT_ITEM_TYPE);\n                cv.put(ContactsContract.CommonDataKinds.Nickname.NAME, values.get(0));\n            } else if (customField.isContactEvent()) {\n                cv = new NonEmptyContentValues(ContactsContract.CommonDataKinds.Event.CONTENT_ITEM_TYPE);\n                cv.put(ContactsContract.CommonDataKinds.Event.START_DATE, values.get(0));\n                cv.put(ContactsContract.CommonDataKinds.Event.TYPE, values.get(1));\n            } else if (customField.isRelation()) {\n                cv = new NonEmptyContentValues(ContactsContract.CommonDataKinds.Relation.CONTENT_ITEM_TYPE);\n                cv.put(ContactsContract.CommonDataKinds.Relation.NAME, values.get(0));\n                cv.put(ContactsContract.CommonDataKinds.Relation.TYPE, values.get(1));\n            } else {\n                continue;\n            }\n\n            contentValues.add(cv);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func convertCustomFields(contentValues: inout [NonEmptyContentValues], vcard: VCard) {\n    for customField in vcard.getProperties(AndroidCustomField.self) {\n        let values = customField.getValues()\n        if values.isEmpty {\n            continue\n        }\n\n        var cv: NonEmptyContentValues\n        if customField.isNickname() {\n            cv = NonEmptyContentValues(type: ContactsContract.CommonDataKinds.Nickname.CONTENT_ITEM_TYPE)\n            cv.put(key: ContactsContract.CommonDataKinds.Nickname.NAME, value: values[0])\n        } else if customField.isContactEvent() {\n            cv = NonEmptyContentValues(type: ContactsContract.CommonDataKinds.Event.CONTENT_ITEM_TYPE)\n            cv.put(key: ContactsContract.CommonDataKinds.Event.START_DATE, value: values[0])\n            cv.put(key: ContactsContract.CommonDataKinds.Event.TYPE, value: values[1])\n        } else if customField.isRelation() {\n            cv = NonEmptyContentValues(type: ContactsContract.CommonDataKinds.Relation.CONTENT_ITEM_TYPE)\n            cv.put(key: ContactsContract.CommonDataKinds.Relation.NAME, value: values[0])\n            cv.put(key: ContactsContract.CommonDataKinds.Relation.TYPE, value: values[1])\n        } else {\n            continue\n        }\n\n        contentValues.append(cv)\n    }\n}\n```"
    },
    {
        "method_name": "convertGroupedProperties",
        "method_code": "private void convertGroupedProperties(List<NonEmptyContentValues> contentValues, VCard vcard) {\n        List<RawProperty> extendedProperties = vcard.getExtendedProperties();\n        Map<String, List<RawProperty>> orderedByGroup = orderPropertiesByGroup(extendedProperties);\n        final int ABDATE = 1, ABRELATEDNAMES = 2;\n\n        for (List<RawProperty> properties : orderedByGroup.values()) {\n            if (properties.size() == 1) {\n                continue;\n            }\n\n            String label = null;\n            String val = null;\n            int mime = 0;\n            for (RawProperty property : properties) {\n                String name = property.getPropertyName();\n\n                if (\"X-ABDATE\".equalsIgnoreCase(name)) {\n                    label = property.getValue(); //date\n                    mime = ABDATE;\n                    continue;\n                }\n\n                if (\"X-ABRELATEDNAMES\".equalsIgnoreCase(name)) {\n                    label = property.getValue(); //name\n                    mime = ABRELATEDNAMES;\n                    continue;\n                }\n\n                if (\"X-ABLABEL\".equalsIgnoreCase(name)) {\n                    val = property.getValue(); // type of value ..Birthday,anniversary\n                    continue;\n                }\n            }\n\n            NonEmptyContentValues cv = null;\n            switch (mime) {\n                case ABDATE:\n                    cv = new NonEmptyContentValues(ContactsContract.CommonDataKinds.Event.CONTENT_ITEM_TYPE);\n\n                    cv.put(ContactsContract.CommonDataKinds.Event.START_DATE, label);\n\n                    int type = DataMappings.getDateType(val);\n                    cv.put(ContactsContract.CommonDataKinds.Event.TYPE, type);\n\n                    break;\n\n                case ABRELATEDNAMES:\n                    if (val != null) {\n                        cv = new NonEmptyContentValues(ContactsContract.CommonDataKinds.Nickname.CONTENT_ITEM_TYPE);\n                        cv.put(ContactsContract.CommonDataKinds.Nickname.NAME, label);\n\n                        if (!\"Nickname\".equals(val)) {\n                            type = DataMappings.getNameType(val);\n                            cv.put(ContactsContract.CommonDataKinds.Relation.TYPE, type);\n                        }\n                    }\n\n                    break;\n\n                default:\n                    continue;\n            }\n\n            contentValues.add(cv);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled convertGroupedProperties from ContactOperations.java into Swift.\n\n        Input:\n\n        Method Name: convertGroupedProperties\n\n        Method Code: private void convertGroupedProperties(List<NonEmptyContentValues> contentValues, VCard vcard) {\n        List<RawProperty> extendedProperties = vcard.getExtendedProperties();\n        Map<String, List<RawProperty>> orderedByGroup = orderPropertiesByGroup(extendedProperties);\n        final int ABDATE = 1, ABRELATEDNAMES = 2;\n\n        for (List<RawProperty> properties : orderedByGroup.values()) {\n            if (properties.size() == 1) {\n                continue;\n            }\n\n            String label = null;\n            String val = null;\n            int mime = 0;\n            for (RawProperty property : properties) {\n                String name = property.getPropertyName();\n\n                if (\"X-ABDATE\".equalsIgnoreCase(name)) {\n                    label = property.getValue(); //date\n                    mime = ABDATE;\n                    continue;\n                }\n\n                if (\"X-ABRELATEDNAMES\".equalsIgnoreCase(name)) {\n                    label = property.getValue(); //name\n                    mime = ABRELATEDNAMES;\n                    continue;\n                }\n\n                if (\"X-ABLABEL\".equalsIgnoreCase(name)) {\n                    val = property.getValue(); // type of value ..Birthday,anniversary\n                    continue;\n                }\n            }\n\n            NonEmptyContentValues cv = null;\n            switch (mime) {\n                case ABDATE:\n                    cv = new NonEmptyContentValues(ContactsContract.CommonDataKinds.Event.CONTENT_ITEM_TYPE);\n\n                    cv.put(ContactsContract.CommonDataKinds.Event.START_DATE, label);\n\n                    int type = DataMappings.getDateType(val);\n                    cv.put(ContactsContract.CommonDataKinds.Event.TYPE, type);\n\n                    break;\n\n                case ABRELATEDNAMES:\n                    if (val != null) {\n                        cv = new NonEmptyContentValues(ContactsContract.CommonDataKinds.Nickname.CONTENT_ITEM_TYPE);\n                        cv.put(ContactsContract.CommonDataKinds.Nickname.NAME, label);\n\n                        if (!\"Nickname\".equals(val)) {\n                            type = DataMappings.getNameType(val);\n                            cv.put(ContactsContract.CommonDataKinds.Relation.TYPE, type);\n                        }\n                    }\n\n                    break;\n\n                default:\n                    continue;\n            }\n\n            contentValues.add(cv);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func convertGroupedProperties(contentValues: inout [NonEmptyContentValues], vcard: VCard) {\n    let extendedProperties = vcard.getExtendedProperties()\n    let orderedByGroup = orderPropertiesByGroup(extendedProperties)\n    let ABDATE = 1, ABRELATEDNAMES = 2\n\n    for properties in orderedByGroup.values {\n        if properties.count == 1 {\n            continue\n        }\n\n        var label: String? = nil\n        var val: String? = nil\n        var mime = 0\n        for property in properties {\n            let name = property.getPropertyName()\n\n            if name.caseInsensitiveCompare(\"X-ABDATE\") == .orderedSame {\n                label = property.getValue() // date\n                mime = ABDATE\n                continue\n            }\n\n            if name.caseInsensitiveCompare(\"X-ABRELATEDNAMES\") == .orderedSame {\n                label = property.getValue() // name\n                mime = ABRELATEDNAMES\n                continue\n            }\n\n            if name.caseInsensitiveCompare(\"X-ABLABEL\") == .orderedSame {\n                val = property.getValue() // type of value ..Birthday, anniversary\n                continue\n            }\n        }\n\n        var cv: NonEmptyContentValues? = nil\n        switch mime {\n        case ABDATE:\n            cv = NonEmptyContentValues(ContactsContract.CommonDataKinds.Event.CONTENT_ITEM_TYPE)\n            cv?.put(ContactsContract.CommonDataKinds.Event.START_DATE, label)\n\n            let type = DataMappings.getDateType(val)\n            cv?.put(ContactsContract.CommonDataKinds.Event.TYPE, type)\n\n        case ABRELATEDNAMES:\n            if let val = val {\n                cv = NonEmptyContentValues(ContactsContract.CommonDataKinds.Nickname.CONTENT_ITEM_TYPE)\n                cv?.put(ContactsContract.CommonDataKinds.Nickname.NAME, label)\n\n                if val != \"Nickname\" {\n                    let type = DataMappings.getNameType(val)\n                    cv?.put(ContactsContract.CommonDataKinds.Relation.TYPE, type)\n                }\n            }\n\n        default:\n            continue\n        }\n\n        if let cv = cv {\n            contentValues.append(cv)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "convertBirthdays",
        "method_code": "private void convertBirthdays(List<NonEmptyContentValues> contentValues, VCard vcard) {\n        @SuppressLint(\"SimpleDateFormat\")\n        DateFormat df = new SimpleDateFormat(\"yyyy-MM-dd\");\n        for (Birthday birthday : vcard.getBirthdays()) {\n            Temporal date = birthday.getDate();\n            if (date == null) {\n                continue;\n            }\n\n            NonEmptyContentValues cv = new NonEmptyContentValues(ContactsContract.CommonDataKinds.Event.CONTENT_ITEM_TYPE);\n            cv.put(ContactsContract.CommonDataKinds.Event.TYPE, ContactsContract.CommonDataKinds.Event.TYPE_BIRTHDAY);\n            cv.put(ContactsContract.CommonDataKinds.Event.START_DATE, df.format(date));\n            contentValues.add(cv);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled convertBirthdays from ContactOperations.java into Swift.\n\n        Input:\n\n        Method Name: convertBirthdays\n\n        Method Code: private void convertBirthdays(List<NonEmptyContentValues> contentValues, VCard vcard) {\n        @SuppressLint(\"SimpleDateFormat\")\n        DateFormat df = new SimpleDateFormat(\"yyyy-MM-dd\");\n        for (Birthday birthday : vcard.getBirthdays()) {\n            Temporal date = birthday.getDate();\n            if (date == null) {\n                continue;\n            }\n\n            NonEmptyContentValues cv = new NonEmptyContentValues(ContactsContract.CommonDataKinds.Event.CONTENT_ITEM_TYPE);\n            cv.put(ContactsContract.CommonDataKinds.Event.TYPE, ContactsContract.CommonDataKinds.Event.TYPE_BIRTHDAY);\n            cv.put(ContactsContract.CommonDataKinds.Event.START_DATE, df.format(date));\n            contentValues.add(cv);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func convertBirthdays(contentValues: inout [NonEmptyContentValues], vcard: VCard) {\n    let df = DateFormatter()\n    df.dateFormat = \"yyyy-MM-dd\"\n    for birthday in vcard.getBirthdays() {\n        guard let date = birthday.getDate() else {\n            continue\n        }\n        \n        var cv = NonEmptyContentValues(type: ContactsContract.CommonDataKinds.Event.CONTENT_ITEM_TYPE)\n        cv.put(key: ContactsContract.CommonDataKinds.Event.TYPE, value: ContactsContract.CommonDataKinds.Event.TYPE_BIRTHDAY)\n        cv.put(key: ContactsContract.CommonDataKinds.Event.START_DATE, value: df.string(from: date))\n        contentValues.append(cv)\n    }\n}\n```"
    },
    {
        "method_name": "convertWebsites",
        "method_code": "private void convertWebsites(List<NonEmptyContentValues> contentValues, VCard vcard) {\n        for (Url url : vcard.getUrls()) {\n            String urlValue = url.getValue();\n            if (isEmpty(urlValue)) {\n                continue;\n            }\n\n            int type = DataMappings.getWebSiteType(url.getType());\n\n            NonEmptyContentValues cv = new NonEmptyContentValues(ContactsContract.CommonDataKinds.Website.CONTENT_ITEM_TYPE);\n            cv.put(ContactsContract.CommonDataKinds.Website.URL, urlValue);\n            cv.put(ContactsContract.CommonDataKinds.Website.TYPE, type);\n            contentValues.add(cv);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled convertWebsites from ContactOperations.java into Swift.\n\n        Input:\n\n        Method Name: convertWebsites\n\n        Method Code: private void convertWebsites(List<NonEmptyContentValues> contentValues, VCard vcard) {\n        for (Url url : vcard.getUrls()) {\n            String urlValue = url.getValue();\n            if (isEmpty(urlValue)) {\n                continue;\n            }\n\n            int type = DataMappings.getWebSiteType(url.getType());\n\n            NonEmptyContentValues cv = new NonEmptyContentValues(ContactsContract.CommonDataKinds.Website.CONTENT_ITEM_TYPE);\n            cv.put(ContactsContract.CommonDataKinds.Website.URL, urlValue);\n            cv.put(ContactsContract.CommonDataKinds.Website.TYPE, type);\n            contentValues.add(cv);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func convertWebsites(contentValues: inout [NonEmptyContentValues], vcard: VCard) {\n    for url in vcard.getUrls() {\n        let urlValue = url.getValue()\n        if isEmpty(urlValue) {\n            continue\n        }\n\n        let type = DataMappings.getWebSiteType(url.getType())\n\n        var cv = NonEmptyContentValues(type: ContactsContract.CommonDataKinds.Website.CONTENT_ITEM_TYPE)\n        cv.put(key: ContactsContract.CommonDataKinds.Website.URL, value: urlValue)\n        cv.put(key: ContactsContract.CommonDataKinds.Website.TYPE, value: type)\n        contentValues.append(cv)\n    }\n}\n```"
    },
    {
        "method_name": "convertNotes",
        "method_code": "private void convertNotes(List<NonEmptyContentValues> contentValues, VCard vcard) {\n        for (Note note : vcard.getNotes()) {\n            String noteValue = note.getValue();\n\n            NonEmptyContentValues cv = new NonEmptyContentValues(ContactsContract.CommonDataKinds.Note.CONTENT_ITEM_TYPE);\n            cv.put(ContactsContract.CommonDataKinds.Note.NOTE, noteValue);\n            contentValues.add(cv);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled convertNotes from ContactOperations.java into Swift.\n\n        Input:\n\n        Method Name: convertNotes\n\n        Method Code: private void convertNotes(List<NonEmptyContentValues> contentValues, VCard vcard) {\n        for (Note note : vcard.getNotes()) {\n            String noteValue = note.getValue();\n\n            NonEmptyContentValues cv = new NonEmptyContentValues(ContactsContract.CommonDataKinds.Note.CONTENT_ITEM_TYPE);\n            cv.put(ContactsContract.CommonDataKinds.Note.NOTE, noteValue);\n            contentValues.add(cv);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func convertNotes(contentValues: inout [NonEmptyContentValues], vcard: VCard) {\n    for note in vcard.getNotes() {\n        let noteValue = note.getValue()\n        \n        var cv = NonEmptyContentValues(type: ContactsContract.CommonDataKinds.Note.CONTENT_ITEM_TYPE)\n        cv.put(key: ContactsContract.CommonDataKinds.Note.NOTE, value: noteValue)\n        contentValues.append(cv)\n    }\n}\n```"
    },
    {
        "method_name": "convertPhotos",
        "method_code": "private void convertPhotos(List<NonEmptyContentValues> contentValues, VCard vcard) {\n        for (Photo photo : vcard.getPhotos()) {\n            if (photo.getUrl() != null) {\n                downloadPhoto(photo);\n            }\n            byte[] data = photo.getData();\n\n            NonEmptyContentValues cv = new NonEmptyContentValues(ContactsContract.CommonDataKinds.Photo.CONTENT_ITEM_TYPE);\n            cv.put(ContactsContract.CommonDataKinds.Photo.PHOTO, data);\n            contentValues.add(cv);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled convertPhotos from ContactOperations.java into Swift.\n\n        Input:\n\n        Method Name: convertPhotos\n\n        Method Code: private void convertPhotos(List<NonEmptyContentValues> contentValues, VCard vcard) {\n        for (Photo photo : vcard.getPhotos()) {\n            if (photo.getUrl() != null) {\n                downloadPhoto(photo);\n            }\n            byte[] data = photo.getData();\n\n            NonEmptyContentValues cv = new NonEmptyContentValues(ContactsContract.CommonDataKinds.Photo.CONTENT_ITEM_TYPE);\n            cv.put(ContactsContract.CommonDataKinds.Photo.PHOTO, data);\n            contentValues.add(cv);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func convertPhotos(contentValues: inout [NonEmptyContentValues], vcard: VCard) {\n    for photo in vcard.getPhotos() {\n        if let url = photo.getUrl() {\n            downloadPhoto(photo)\n        }\n        let data = photo.getData()\n\n        var cv = NonEmptyContentValues(type: ContactsContract.CommonDataKinds.Photo.CONTENT_ITEM_TYPE)\n        cv.put(key: ContactsContract.CommonDataKinds.Photo.PHOTO, value: data)\n        contentValues.append(cv)\n    }\n}\n```"
    },
    {
        "method_name": "downloadPhoto",
        "method_code": "private void downloadPhoto(Photo photo) {\n        String url = photo.getUrl();\n        Bitmap bitmap = DisplayUtils.downloadImageSynchronous(context, url);\n        if (bitmap != null) {\n            ByteArrayOutputStream stream = new ByteArrayOutputStream();\n            bitmap.compress(Bitmap.CompressFormat.JPEG, 100, stream);\n            byte[] bitmapdata = stream.toByteArray();\n            photo.setData(bitmapdata, ImageType.find(null, null,\n                    url.substring(url.lastIndexOf(\".\") + 1)));\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled downloadPhoto from ContactOperations.java into Swift.\n\n        Input:\n\n        Method Name: downloadPhoto\n\n        Method Code: private void downloadPhoto(Photo photo) {\n        String url = photo.getUrl();\n        Bitmap bitmap = DisplayUtils.downloadImageSynchronous(context, url);\n        if (bitmap != null) {\n            ByteArrayOutputStream stream = new ByteArrayOutputStream();\n            bitmap.compress(Bitmap.CompressFormat.JPEG, 100, stream);\n            byte[] bitmapdata = stream.toByteArray();\n            photo.setData(bitmapdata, ImageType.find(null, null,\n                    url.substring(url.lastIndexOf(\".\") + 1)));\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func downloadPhoto(photo: Photo) {\n    let url = photo.getUrl()\n    if let bitmap = DisplayUtils.downloadImageSynchronous(context: context, url: url) {\n        let stream = OutputStream.toMemory()\n        stream.open()\n        if let data = bitmap.jpegData(compressionQuality: 1.0) {\n            stream.write(data, maxLength: data.count)\n            let bitmapData = stream.property(forKey: .dataWrittenToMemoryStreamKey) as? Data\n            photo.setData(bitmapData, ImageType.find(nil, nil, String(url.suffix(from: url.lastIndex(of: \".\")!)).dropFirst()))\n        }\n        stream.close()\n    }\n}\n```"
    },
    {
        "method_name": "convertOrganization",
        "method_code": "private void convertOrganization(List<NonEmptyContentValues> contentValues, VCard vcard) {\n        NonEmptyContentValues cv = new NonEmptyContentValues(ContactsContract.CommonDataKinds.Organization.CONTENT_ITEM_TYPE);\n\n        Organization organization = vcard.getOrganization();\n        if (organization != null) {\n            List<String> values = organization.getValues();\n            String keys[] = { ContactsContract.CommonDataKinds.Organization.COMPANY, ContactsContract.CommonDataKinds.Organization.DEPARTMENT, ContactsContract.CommonDataKinds.Organization.OFFICE_LOCATION };\n            for (int i = 0; i < values.size(); i++) {\n                String key = keys[i];\n                String value = values.get(i);\n                cv.put(key, value);\n            }\n        }\n\n        List<Title> titleList = vcard.getTitles();\n        if (!titleList.isEmpty()) {\n            cv.put(ContactsContract.CommonDataKinds.Organization.TITLE, titleList.get(0).getValue());\n        }\n\n        contentValues.add(cv);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled convertOrganization from ContactOperations.java into Swift.\n\n        Input:\n\n        Method Name: convertOrganization\n\n        Method Code: private void convertOrganization(List<NonEmptyContentValues> contentValues, VCard vcard) {\n        NonEmptyContentValues cv = new NonEmptyContentValues(ContactsContract.CommonDataKinds.Organization.CONTENT_ITEM_TYPE);\n\n        Organization organization = vcard.getOrganization();\n        if (organization != null) {\n            List<String> values = organization.getValues();\n            String keys[] = { ContactsContract.CommonDataKinds.Organization.COMPANY, ContactsContract.CommonDataKinds.Organization.DEPARTMENT, ContactsContract.CommonDataKinds.Organization.OFFICE_LOCATION };\n            for (int i = 0; i < values.size(); i++) {\n                String key = keys[i];\n                String value = values.get(i);\n                cv.put(key, value);\n            }\n        }\n\n        List<Title> titleList = vcard.getTitles();\n        if (!titleList.isEmpty()) {\n            cv.put(ContactsContract.CommonDataKinds.Organization.TITLE, titleList.get(0).getValue());\n        }\n\n        contentValues.add(cv);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func convertOrganization(contentValues: inout [NonEmptyContentValues], vcard: VCard) {\n    let cv = NonEmptyContentValues(type: ContactsContract.CommonDataKinds.Organization.CONTENT_ITEM_TYPE)\n\n    if let organization = vcard.getOrganization() {\n        let values = organization.getValues()\n        let keys = [ContactsContract.CommonDataKinds.Organization.COMPANY, ContactsContract.CommonDataKinds.Organization.DEPARTMENT, ContactsContract.CommonDataKinds.Organization.OFFICE_LOCATION]\n        for (i, value) in values.enumerated() {\n            let key = keys[i]\n            cv.put(key: key, value: value)\n        }\n    }\n\n    let titleList = vcard.getTitles()\n    if !titleList.isEmpty {\n        cv.put(key: ContactsContract.CommonDataKinds.Organization.TITLE, value: titleList[0].getValue())\n    }\n\n    contentValues.append(cv)\n}\n```"
    },
    {
        "method_name": "orderPropertiesByGroup",
        "method_code": "private <T extends VCardProperty> Map<String, List<T>> orderPropertiesByGroup(Iterable<T> properties) {\n        Map<String, List<T>> groupedProperties = new HashMap<String, List<T>>();\n\n        for (T property : properties) {\n            String group = property.getGroup();\n            if (isEmpty(group)) {\n                continue;\n            }\n\n            List<T> groupPropertiesList = groupedProperties.get(group);\n            if (groupPropertiesList == null) {\n                groupPropertiesList = new ArrayList<T>();\n                groupedProperties.put(group, groupPropertiesList);\n            }\n            groupPropertiesList.add(property);\n        }\n\n        return groupedProperties;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled orderPropertiesByGroup from ContactOperations.java into Swift.\n\n        Input:\n\n        Method Name: orderPropertiesByGroup\n\n        Method Code: private <T extends VCardProperty> Map<String, List<T>> orderPropertiesByGroup(Iterable<T> properties) {\n        Map<String, List<T>> groupedProperties = new HashMap<String, List<T>>();\n\n        for (T property : properties) {\n            String group = property.getGroup();\n            if (isEmpty(group)) {\n                continue;\n            }\n\n            List<T> groupPropertiesList = groupedProperties.get(group);\n            if (groupPropertiesList == null) {\n                groupPropertiesList = new ArrayList<T>();\n                groupedProperties.put(group, groupPropertiesList);\n            }\n            groupPropertiesList.add(property);\n        }\n\n        return groupedProperties;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func orderPropertiesByGroup<T: VCardProperty>(_ properties: [T]) -> [String: [T]] {\n    var groupedProperties = [String: [T]]()\n\n    for property in properties {\n        guard let group = property.getGroup(), !group.isEmpty else {\n            continue\n        }\n\n        if groupedProperties[group] == nil {\n            groupedProperties[group] = [T]()\n        }\n        groupedProperties[group]?.append(property)\n    }\n\n    return groupedProperties\n}\n```"
    },
    {
        "method_name": "put",
        "method_code": "public void put(String key, String value) {\n            if (isEmpty(value)) {\n                return;\n            }\n            contentValues.put(key, value);\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled put from ContactOperations.java into Swift.\n\n        Input:\n\n        Method Name: put\n\n        Method Code: public void put(String key, String value) {\n            if (isEmpty(value)) {\n                return;\n            }\n            contentValues.put(key, value);\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc put(key: String, value: String?) {\n    guard let value = value, !value.isEmpty else {\n        return\n    }\n    contentValues[key] = value\n}\n```"
    },
    {
        "method_name": "put",
        "method_code": "public void put(String key, int value) {\n            contentValues.put(key, value);\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled put from ContactOperations.java into Swift.\n\n        Input:\n\n        Method Name: put\n\n        Method Code: public void put(String key, int value) {\n            contentValues.put(key, value);\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc put(key: String, value: Int) {\n    contentValues[key] = value\n}\n```"
    },
    {
        "method_name": "put",
        "method_code": "public void put(String key, byte[] value) {\n            if (value == null) {\n                return;\n            }\n            contentValues.put(key, value);\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled put from ContactOperations.java into Swift.\n\n        Input:\n\n        Method Name: put\n\n        Method Code: public void put(String key, byte[] value) {\n            if (value == null) {\n                return;\n            }\n            contentValues.put(key, value);\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc put(key: String, value: Data?) {\n    guard let value = value else {\n        return\n    }\n    contentValues[key] = value\n}\n```"
    },
    {
        "method_name": "getContentValues",
        "method_code": "public ContentValues getContentValues() {\n            if (contentValues.size() > 0 && contentItemType != null) {\n                put(ContactsContract.Contacts.Data.MIMETYPE, contentItemType);\n            }\n            return contentValues;\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled getContentValues from ContactOperations.java into Swift.\n\n        Input:\n\n        Method Name: getContentValues\n\n        Method Code: public ContentValues getContentValues() {\n            if (contentValues.size() > 0 && contentItemType != null) {\n                put(ContactsContract.Contacts.Data.MIMETYPE, contentItemType);\n            }\n            return contentValues;\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getContentValues() -> [String: Any] {\n    if !contentValues.isEmpty && contentItemType != nil {\n        contentValues[ContactsContract.Contacts.Data.MIMETYPE] = contentItemType\n    }\n    return contentValues\n}\n```"
    }
]