[
    {
        "method_name": "createFromParcel",
        "method_code": "@Override\n        public SparseBooleanArrayParcelable createFromParcel(Parcel source) {\n            // read size of array from source\n            int size = source.readInt();\n\n            // then pairs of (key, value)s, in the object to wrap\n            SparseBooleanArray sba = new SparseBooleanArray();\n            for (int i = 0; i < size; i++) {\n                sba.put(source.readInt(), source.readInt() != 0);\n            }\n\n            // wrap SparseBooleanArray\n            return new SparseBooleanArrayParcelable(sba);\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled createFromParcel from SparseBooleanArrayParcelable.java into Swift.\n\n        Input:\n\n        Method Name: createFromParcel\n\n        Method Code: @Override\n        public SparseBooleanArrayParcelable createFromParcel(Parcel source) {\n            // read size of array from source\n            int size = source.readInt();\n\n            // then pairs of (key, value)s, in the object to wrap\n            SparseBooleanArray sba = new SparseBooleanArray();\n            for (int i = 0; i < size; i++) {\n                sba.put(source.readInt(), source.readInt() != 0);\n            }\n\n            // wrap SparseBooleanArray\n            return new SparseBooleanArrayParcelable(sba);\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc createFromParcel(source: Parcel) -> SparseBooleanArrayParcelable {\n    // read size of array from source\n    let size = source.readInt()\n\n    // then pairs of (key, value)s, in the object to wrap\n    var sba = SparseBooleanArray()\n    for _ in 0..<size {\n        sba.put(key: source.readInt(), value: source.readInt() != 0)\n    }\n\n    // wrap SparseBooleanArray\n    return SparseBooleanArrayParcelable(sba: sba)\n}\n```"
    },
    {
        "method_name": "newArray",
        "method_code": "@Override\n        public SparseBooleanArrayParcelable[] newArray(int size) {\n            return new SparseBooleanArrayParcelable[size];\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled newArray from SparseBooleanArrayParcelable.java into Swift.\n\n        Input:\n\n        Method Name: newArray\n\n        Method Code: @Override\n        public SparseBooleanArrayParcelable[] newArray(int size) {\n            return new SparseBooleanArrayParcelable[size];\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc newArray(size: Int) -> [SparseBooleanArrayParcelable] {\n    return [SparseBooleanArrayParcelable](repeating: SparseBooleanArrayParcelable(), count: size)\n}\n```"
    },
    {
        "method_name": "getSparseBooleanArray",
        "method_code": "public SparseBooleanArray getSparseBooleanArray() {\n        return mSba;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getSparseBooleanArray from SparseBooleanArrayParcelable.java into Swift.\n\n        Input:\n\n        Method Name: getSparseBooleanArray\n\n        Method Code: public SparseBooleanArray getSparseBooleanArray() {\n        return mSba;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getSparseBooleanArray() -> SparseBooleanArray {\n    return mSba\n}\n```"
    },
    {
        "method_name": "describeContents",
        "method_code": "@Override\n    public int describeContents() {\n        return 0;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled describeContents from SparseBooleanArrayParcelable.java into Swift.\n\n        Input:\n\n        Method Name: describeContents\n\n        Method Code: @Override\n    public int describeContents() {\n        return 0;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc describeContents() -> Int {\n    return 0\n}\n```"
    },
    {
        "method_name": "writeToParcel",
        "method_code": "@Override\n    public void writeToParcel(Parcel dest, int flags) {\n        // first, size of the array\n        dest.writeInt(mSba.size());\n\n        // then, pairs of (key, value)\n        for (int i = 0; i < mSba.size(); i++) {\n            dest.writeInt(mSba.keyAt(i));\n            dest.writeInt(mSba.valueAt(i) ? 1 : 0);\n        }\n\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled writeToParcel from SparseBooleanArrayParcelable.java into Swift.\n\n        Input:\n\n        Method Name: writeToParcel\n\n        Method Code: @Override\n    public void writeToParcel(Parcel dest, int flags) {\n        // first, size of the array\n        dest.writeInt(mSba.size());\n\n        // then, pairs of (key, value)\n        for (int i = 0; i < mSba.size(); i++) {\n            dest.writeInt(mSba.keyAt(i));\n            dest.writeInt(mSba.valueAt(i) ? 1 : 0);\n        }\n\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc writeToParcel(dest: inout Parcel, flags: Int) {\n    // first, size of the array\n    dest.writeInt(mSba.size())\n\n    // then, pairs of (key, value)\n    for i in 0..<mSba.size() {\n        dest.writeInt(mSba.keyAt(i))\n        dest.writeInt(mSba.valueAt(i) ? 1 : 0)\n    }\n}\n```"
    }
]