[
    {
        "method_name": "onCreate",
        "method_code": "@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        Log_OC.v(TAG, \"onCreate() start\");\n        super.onCreate(savedInstanceState);\n\n        actionListener = new ActivitiesPresenter(activitiesRepository, filesRepository, this);\n\n        binding = ActivityListLayoutBinding.inflate(getLayoutInflater());\n        setContentView(binding.getRoot());\n\n        // setup toolbar\n        setupToolbar();\n\n        viewThemeUtils.androidx.themeSwipeRefreshLayout(binding.swipeContainingList);\n\n        // setup drawer\n        setupDrawer();\n        updateActionBarTitleAndHomeButtonByString(getString(R.string.drawer_item_activities));\n\n        binding.swipeContainingList.setOnRefreshListener(() -> {\n            // We set lastGiven variable to undefined here since when manually refreshing\n            // activities data we want to clear the list and reset the pagination.\n            lastGiven = ActivitiesContract.ActionListener.UNDEFINED;\n            actionListener.loadActivities(lastGiven);\n        });\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreate from ActivitiesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onCreate\n\n        Method Code: @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        Log_OC.v(TAG, \"onCreate() start\");\n        super.onCreate(savedInstanceState);\n\n        actionListener = new ActivitiesPresenter(activitiesRepository, filesRepository, this);\n\n        binding = ActivityListLayoutBinding.inflate(getLayoutInflater());\n        setContentView(binding.getRoot());\n\n        // setup toolbar\n        setupToolbar();\n\n        viewThemeUtils.androidx.themeSwipeRefreshLayout(binding.swipeContainingList);\n\n        // setup drawer\n        setupDrawer();\n        updateActionBarTitleAndHomeButtonByString(getString(R.string.drawer_item_activities));\n\n        binding.swipeContainingList.setOnRefreshListener(() -> {\n            // We set lastGiven variable to undefined here since when manually refreshing\n            // activities data we want to clear the list and reset the pagination.\n            lastGiven = ActivitiesContract.ActionListener.UNDEFINED;\n            actionListener.loadActivities(lastGiven);\n        });\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    NSLog(\"onCreate() start\")\n\n    actionListener = ActivitiesPresenter(activitiesRepository: activitiesRepository, filesRepository: filesRepository, view: self)\n\n    binding = ActivityListLayoutBinding.inflate(getLayoutInflater())\n    view = binding.root\n\n    // setup toolbar\n    setupToolbar()\n\n    viewThemeUtils.androidx.themeSwipeRefreshLayout(binding.swipeContainingList)\n\n    // setup drawer\n    setupDrawer()\n    updateActionBarTitleAndHomeButtonByString(getString(R.string.drawer_item_activities))\n\n    binding.swipeContainingList.setOnRefreshListener {\n        // We set lastGiven variable to undefined here since when manually refreshing\n        // activities data we want to clear the list and reset the pagination.\n        lastGiven = ActivitiesContract.ActionListener.UNDEFINED\n        actionListener.loadActivities(lastGiven: lastGiven)\n    }\n}\n```"
    },
    {
        "method_name": "getBinding",
        "method_code": "@VisibleForTesting\n    public ActivityListLayoutBinding getBinding() {\n        return binding;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getBinding from ActivitiesActivity.java into Swift.\n\n        Input:\n\n        Method Name: getBinding\n\n        Method Code: @VisibleForTesting\n    public ActivityListLayoutBinding getBinding() {\n        return binding;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\n@objc func getBinding() -> ActivityListLayoutBinding {\n    return binding\n}\n```"
    },
    {
        "method_name": "setupContent",
        "method_code": "private void setupContent() {\n        binding.emptyList.emptyListIcon.setImageResource(R.drawable.ic_activity);\n\n        adapter = new ActivityListAdapter(this,\n                                          getUserAccountManager(),\n                                          this,\n                                          clientFactory,\n                                          false,\n                                          viewThemeUtils);\n        binding.list.setAdapter(adapter);\n\n        LinearLayoutManager layoutManager = new LinearLayoutManager(this);\n\n        binding.list.setLayoutManager(layoutManager);\n        binding.list.addOnScrollListener(new RecyclerView.OnScrollListener() {\n\n            @Override\n            public void onScrolled(@NonNull RecyclerView recyclerView, int dx, int dy) {\n                super.onScrolled(recyclerView, dx, dy);\n\n                int visibleItemCount = recyclerView.getChildCount();\n                int totalItemCount = layoutManager.getItemCount();\n                int firstVisibleItemIndex = layoutManager.findFirstVisibleItemPosition();\n\n                // synchronize loading state when item count changes\n                if (!isLoadingActivities && (totalItemCount - visibleItemCount) <= (firstVisibleItemIndex + 5)\n                    && lastGiven > 0) {\n                    // Almost reached the end, continue to load new activities\n                    actionListener.loadActivities(lastGiven);\n                }\n            }\n        });\n\n        actionListener.loadActivities(ActivitiesContract.ActionListener.UNDEFINED);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setupContent from ActivitiesActivity.java into Swift.\n\n        Input:\n\n        Method Name: setupContent\n\n        Method Code: private void setupContent() {\n        binding.emptyList.emptyListIcon.setImageResource(R.drawable.ic_activity);\n\n        adapter = new ActivityListAdapter(this,\n                                          getUserAccountManager(),\n                                          this,\n                                          clientFactory,\n                                          false,\n                                          viewThemeUtils);\n        binding.list.setAdapter(adapter);\n\n        LinearLayoutManager layoutManager = new LinearLayoutManager(this);\n\n        binding.list.setLayoutManager(layoutManager);\n        binding.list.addOnScrollListener(new RecyclerView.OnScrollListener() {\n\n            @Override\n            public void onScrolled(@NonNull RecyclerView recyclerView, int dx, int dy) {\n                super.onScrolled(recyclerView, dx, dy);\n\n                int visibleItemCount = recyclerView.getChildCount();\n                int totalItemCount = layoutManager.getItemCount();\n                int firstVisibleItemIndex = layoutManager.findFirstVisibleItemPosition();\n\n                // synchronize loading state when item count changes\n                if (!isLoadingActivities && (totalItemCount - visibleItemCount) <= (firstVisibleItemIndex + 5)\n                    && lastGiven > 0) {\n                    // Almost reached the end, continue to load new activities\n                    actionListener.loadActivities(lastGiven);\n                }\n            }\n        });\n\n        actionListener.loadActivities(ActivitiesContract.ActionListener.UNDEFINED);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setupContent() {\n    binding.emptyList.emptyListIcon.image = UIImage(named: \"ic_activity\")\n\n    adapter = ActivityListAdapter(context: self,\n                                  userAccountManager: getUserAccountManager(),\n                                  activityListener: self,\n                                  clientFactory: clientFactory,\n                                  isSomeFlag: false,\n                                  viewThemeUtils: viewThemeUtils)\n    binding.list.adapter = adapter\n\n    let layoutManager = LinearLayoutManager(context: self)\n\n    binding.list.layoutManager = layoutManager\n    binding.list.addOnScrollListener(RecyclerView.OnScrollListener { recyclerView, dx, dy in\n        super.onScrolled(recyclerView, dx, dy)\n\n        let visibleItemCount = recyclerView.childCount\n        let totalItemCount = layoutManager.itemCount\n        let firstVisibleItemIndex = layoutManager.findFirstVisibleItemPosition()\n\n        if !isLoadingActivities && (totalItemCount - visibleItemCount) <= (firstVisibleItemIndex + 5) && lastGiven > 0 {\n            actionListener.loadActivities(lastGiven)\n        }\n    })\n\n    actionListener.loadActivities(ActivitiesContract.ActionListener.UNDEFINED)\n}\n```"
    },
    {
        "method_name": "onScrolled",
        "method_code": "@Override\n            public void onScrolled(@NonNull RecyclerView recyclerView, int dx, int dy) {\n                super.onScrolled(recyclerView, dx, dy);\n\n                int visibleItemCount = recyclerView.getChildCount();\n                int totalItemCount = layoutManager.getItemCount();\n                int firstVisibleItemIndex = layoutManager.findFirstVisibleItemPosition();\n\n                // synchronize loading state when item count changes\n                if (!isLoadingActivities && (totalItemCount - visibleItemCount) <= (firstVisibleItemIndex + 5)\n                    && lastGiven > 0) {\n                    // Almost reached the end, continue to load new activities\n                    actionListener.loadActivities(lastGiven);\n                }\n            }",
        "prompt": "\n        Please translate the following Java (Android) method titled onScrolled from ActivitiesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onScrolled\n\n        Method Code: @Override\n            public void onScrolled(@NonNull RecyclerView recyclerView, int dx, int dy) {\n                super.onScrolled(recyclerView, dx, dy);\n\n                int visibleItemCount = recyclerView.getChildCount();\n                int totalItemCount = layoutManager.getItemCount();\n                int firstVisibleItemIndex = layoutManager.findFirstVisibleItemPosition();\n\n                // synchronize loading state when item count changes\n                if (!isLoadingActivities && (totalItemCount - visibleItemCount) <= (firstVisibleItemIndex + 5)\n                    && lastGiven > 0) {\n                    // Almost reached the end, continue to load new activities\n                    actionListener.loadActivities(lastGiven);\n                }\n            }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func scrollViewDidScroll(_ scrollView: UIScrollView) {\n    guard let collectionView = scrollView as? UICollectionView else { return }\n    \n    let visibleItemCount = collectionView.visibleCells.count\n    let totalItemCount = collectionView.numberOfItems(inSection: 0)\n    let indexPathsForVisibleItems = collectionView.indexPathsForVisibleItems\n    let firstVisibleItemIndex = indexPathsForVisibleItems.map { $0.item }.min() ?? 0\n\n    if !isLoadingActivities && (totalItemCount - visibleItemCount) <= (firstVisibleItemIndex + 5) && lastGiven > 0 {\n        actionListener.loadActivities(lastGiven)\n    }\n}\n```"
    },
    {
        "method_name": "onOptionsItemSelected",
        "method_code": "@Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        boolean retval = true;\n\n        if (item.getItemId() == android.R.id.home) {\n            if (isDrawerOpen()) {\n                closeDrawer();\n            } else {\n                openDrawer();\n            }\n        } else {\n            Log_OC.w(TAG, \"Unknown menu item triggered\");\n            retval = super.onOptionsItemSelected(item);\n        }\n\n        return retval;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onOptionsItemSelected from ActivitiesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onOptionsItemSelected\n\n        Method Code: @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        boolean retval = true;\n\n        if (item.getItemId() == android.R.id.home) {\n            if (isDrawerOpen()) {\n                closeDrawer();\n            } else {\n                openDrawer();\n            }\n        } else {\n            Log_OC.w(TAG, \"Unknown menu item triggered\");\n            retval = super.onOptionsItemSelected(item);\n        }\n\n        return retval;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onOptionsItemSelected(_ item: MenuItem) -> Bool {\n    var retval = true\n\n    if item.itemId == android.R.id.home {\n        if isDrawerOpen() {\n            closeDrawer()\n        } else {\n            openDrawer()\n        }\n    } else {\n        Log_OC.w(TAG, \"Unknown menu item triggered\")\n        retval = super.onOptionsItemSelected(item)\n    }\n\n    return retval\n}\n```"
    },
    {
        "method_name": "onResume",
        "method_code": "@Override\n    protected void onResume() {\n        super.onResume();\n        actionListener.onResume();\n        setupContent();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onResume from ActivitiesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onResume\n\n        Method Code: @Override\n    protected void onResume() {\n        super.onResume();\n        actionListener.onResume();\n        setupContent();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n    actionListener.onResume()\n    setupContent()\n}\n```"
    },
    {
        "method_name": "onActivityClicked",
        "method_code": "@Override\n    public void onActivityClicked(RichObject richObject) {\n        String path = FileUtils.PATH_SEPARATOR + richObject.getPath();\n        actionListener.openActivity(path, this);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onActivityClicked from ActivitiesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onActivityClicked\n\n        Method Code: @Override\n    public void onActivityClicked(RichObject richObject) {\n        String path = FileUtils.PATH_SEPARATOR + richObject.getPath();\n        actionListener.openActivity(path, this);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onActivityClicked(richObject: RichObject) {\n    let path = FileUtils.PATH_SEPARATOR + richObject.getPath()\n    actionListener.openActivity(path, self)\n}\n```"
    },
    {
        "method_name": "showActivities",
        "method_code": "@Override\n    public void showActivities(List<Object> activities, NextcloudClient client, int lastGiven) {\n        boolean clear = false;\n        if (this.lastGiven == ActivitiesContract.ActionListener.UNDEFINED) {\n            clear = true;\n        }\n        adapter.setActivityItems(activities, client, clear);\n        this.lastGiven = lastGiven;\n\n        // Hide the recyclerView if list is empty\n        if (adapter.isEmpty()) {\n            showEmptyContent(getString(R.string.activities_no_results_headline), getString(R.string.activities_no_results_message));\n            binding.loadingContent.setVisibility(View.GONE);\n            binding.list.setVisibility(View.GONE);\n        } else {\n            binding.emptyList.emptyListView.setVisibility(View.GONE);\n            binding.loadingContent.setVisibility(View.GONE);\n            binding.list.setVisibility(View.VISIBLE);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showActivities from ActivitiesActivity.java into Swift.\n\n        Input:\n\n        Method Name: showActivities\n\n        Method Code: @Override\n    public void showActivities(List<Object> activities, NextcloudClient client, int lastGiven) {\n        boolean clear = false;\n        if (this.lastGiven == ActivitiesContract.ActionListener.UNDEFINED) {\n            clear = true;\n        }\n        adapter.setActivityItems(activities, client, clear);\n        this.lastGiven = lastGiven;\n\n        // Hide the recyclerView if list is empty\n        if (adapter.isEmpty()) {\n            showEmptyContent(getString(R.string.activities_no_results_headline), getString(R.string.activities_no_results_message));\n            binding.loadingContent.setVisibility(View.GONE);\n            binding.list.setVisibility(View.GONE);\n        } else {\n            binding.emptyList.emptyListView.setVisibility(View.GONE);\n            binding.loadingContent.setVisibility(View.GONE);\n            binding.list.setVisibility(View.VISIBLE);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc showActivities(activities: [Any], client: NextcloudClient, lastGiven: Int) {\n    var clear = false\n    if self.lastGiven == ActivitiesContract.ActionListener.UNDEFINED {\n        clear = true\n    }\n    adapter.setActivityItems(activities: activities, client: client, clear: clear)\n    self.lastGiven = lastGiven\n\n    // Hide the recyclerView if list is empty\n    if adapter.isEmpty() {\n        showEmptyContent(headline: NSLocalizedString(\"activities_no_results_headline\", comment: \"\"), message: NSLocalizedString(\"activities_no_results_message\", comment: \"\"))\n        binding.loadingContent.isHidden = true\n        binding.list.isHidden = true\n    } else {\n        binding.emptyList.emptyListView.isHidden = true\n        binding.loadingContent.isHidden = true\n        binding.list.isHidden = false\n    }\n}\n```"
    },
    {
        "method_name": "showActivitiesLoadError",
        "method_code": "@Override\n    public void showActivitiesLoadError(String error) {\n        snackbar = DisplayUtils.showSnackMessage(this, error);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showActivitiesLoadError from ActivitiesActivity.java into Swift.\n\n        Input:\n\n        Method Name: showActivitiesLoadError\n\n        Method Code: @Override\n    public void showActivitiesLoadError(String error) {\n        snackbar = DisplayUtils.showSnackMessage(this, error);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc showActivitiesLoadError(_ error: String) {\n    snackbar = DisplayUtils.showSnackMessage(self, error)\n}\n```"
    },
    {
        "method_name": "showActivityDetailUI",
        "method_code": "@Override\n    public void showActivityDetailUI(OCFile ocFile) {\n        Intent showDetailsIntent;\n        if (PreviewImageFragment.canBePreviewed(ocFile)) {\n            showDetailsIntent = new Intent(getBaseContext(), PreviewImageActivity.class);\n        } else {\n            showDetailsIntent = new Intent(getBaseContext(), FileDisplayActivity.class);\n        }\n        showDetailsIntent.putExtra(EXTRA_FILE, ocFile);\n        showDetailsIntent.putExtra(EXTRA_USER, getUser().orElseThrow(RuntimeException::new));\n        startActivity(showDetailsIntent);\n\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showActivityDetailUI from ActivitiesActivity.java into Swift.\n\n        Input:\n\n        Method Name: showActivityDetailUI\n\n        Method Code: @Override\n    public void showActivityDetailUI(OCFile ocFile) {\n        Intent showDetailsIntent;\n        if (PreviewImageFragment.canBePreviewed(ocFile)) {\n            showDetailsIntent = new Intent(getBaseContext(), PreviewImageActivity.class);\n        } else {\n            showDetailsIntent = new Intent(getBaseContext(), FileDisplayActivity.class);\n        }\n        showDetailsIntent.putExtra(EXTRA_FILE, ocFile);\n        showDetailsIntent.putExtra(EXTRA_USER, getUser().orElseThrow(RuntimeException::new));\n        startActivity(showDetailsIntent);\n\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc showActivityDetailUI(ocFile: OCFile) {\n    let showDetailsIntent: Intent\n    if PreviewImageFragment.canBePreviewed(ocFile) {\n        showDetailsIntent = Intent(context: getBaseContext(), activity: PreviewImageActivity.self)\n    } else {\n        showDetailsIntent = Intent(context: getBaseContext(), activity: FileDisplayActivity.self)\n    }\n    showDetailsIntent.putExtra(name: EXTRA_FILE, value: ocFile)\n    showDetailsIntent.putExtra(name: EXTRA_USER, value: getUser().orElseThrow { RuntimeException() })\n    startActivity(intent: showDetailsIntent)\n}\n```"
    },
    {
        "method_name": "showActivityDetailUIIsNull",
        "method_code": "@Override\n    public void showActivityDetailUIIsNull() {\n        snackbar = DisplayUtils.showSnackMessage(this, R.string.file_not_found);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showActivityDetailUIIsNull from ActivitiesActivity.java into Swift.\n\n        Input:\n\n        Method Name: showActivityDetailUIIsNull\n\n        Method Code: @Override\n    public void showActivityDetailUIIsNull() {\n        snackbar = DisplayUtils.showSnackMessage(this, R.string.file_not_found);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func showActivityDetailUIIsNull() {\n    snackbar = DisplayUtils.showSnackMessage(self, R.string.file_not_found)\n}\n```"
    },
    {
        "method_name": "showActivityDetailError",
        "method_code": "@Override\n    public void showActivityDetailError(String error) {\n        snackbar = DisplayUtils.showSnackMessage(this, error);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showActivityDetailError from ActivitiesActivity.java into Swift.\n\n        Input:\n\n        Method Name: showActivityDetailError\n\n        Method Code: @Override\n    public void showActivityDetailError(String error) {\n        snackbar = DisplayUtils.showSnackMessage(this, error);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc showActivityDetailError(error: String) {\n    snackbar = DisplayUtils.showSnackMessage(self, error)\n}\n```"
    },
    {
        "method_name": "showLoadingMessage",
        "method_code": "@Override\n    public void showLoadingMessage() {\n        binding.emptyList.emptyListView.setVisibility(View.GONE);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showLoadingMessage from ActivitiesActivity.java into Swift.\n\n        Input:\n\n        Method Name: showLoadingMessage\n\n        Method Code: @Override\n    public void showLoadingMessage() {\n        binding.emptyList.emptyListView.setVisibility(View.GONE);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func showLoadingMessage() {\n    binding.emptyList.emptyListView.isHidden = true\n}\n```"
    },
    {
        "method_name": "showEmptyContent",
        "method_code": "@Override\n    public void showEmptyContent(String headline, String message) {\n        binding.emptyList.emptyListViewHeadline.setText(headline);\n        binding.emptyList.emptyListViewText.setText(message);\n        binding.loadingContent.setVisibility(View.GONE);\n        binding.emptyList.emptyListIcon.setVisibility(View.VISIBLE);\n        binding.emptyList.emptyListViewHeadline.setVisibility(View.VISIBLE);\n        binding.emptyList.emptyListViewText.setVisibility(View.VISIBLE);\n        binding.emptyList.emptyListView.setVisibility(View.VISIBLE);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showEmptyContent from ActivitiesActivity.java into Swift.\n\n        Input:\n\n        Method Name: showEmptyContent\n\n        Method Code: @Override\n    public void showEmptyContent(String headline, String message) {\n        binding.emptyList.emptyListViewHeadline.setText(headline);\n        binding.emptyList.emptyListViewText.setText(message);\n        binding.loadingContent.setVisibility(View.GONE);\n        binding.emptyList.emptyListIcon.setVisibility(View.VISIBLE);\n        binding.emptyList.emptyListViewHeadline.setVisibility(View.VISIBLE);\n        binding.emptyList.emptyListViewText.setVisibility(View.VISIBLE);\n        binding.emptyList.emptyListView.setVisibility(View.VISIBLE);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc showEmptyContent(headline: String, message: String) {\n    binding.emptyList.emptyListViewHeadline.text = headline\n    binding.emptyList.emptyListViewText.text = message\n    binding.loadingContent.isHidden = true\n    binding.emptyList.emptyListIcon.isHidden = false\n    binding.emptyList.emptyListViewHeadline.isHidden = false\n    binding.emptyList.emptyListViewText.isHidden = false\n    binding.emptyList.emptyListView.isHidden = false\n}\n```"
    },
    {
        "method_name": "setProgressIndicatorState",
        "method_code": "@Override\n    public void setProgressIndicatorState(boolean isActive) {\n        isLoadingActivities = isActive;\n        if (!adapter.isEmpty()) {\n            binding.swipeContainingList.post(() -> binding.swipeContainingList.setRefreshing(isActive));\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setProgressIndicatorState from ActivitiesActivity.java into Swift.\n\n        Input:\n\n        Method Name: setProgressIndicatorState\n\n        Method Code: @Override\n    public void setProgressIndicatorState(boolean isActive) {\n        isLoadingActivities = isActive;\n        if (!adapter.isEmpty()) {\n            binding.swipeContainingList.post(() -> binding.swipeContainingList.setRefreshing(isActive));\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func setProgressIndicatorState(isActive: Bool) {\n    isLoadingActivities = isActive\n    if !adapter.isEmpty {\n        DispatchQueue.main.async {\n            self.binding.swipeContainingList.setRefreshing(isActive)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "onStop",
        "method_code": "@Override\n    protected void onStop() {\n        super.onStop();\n\n        actionListener.onStop();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onStop from ActivitiesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onStop\n\n        Method Code: @Override\n    protected void onStop() {\n        super.onStop();\n\n        actionListener.onStop();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n    \n    actionListener.onStop()\n}\n```"
    },
    {
        "method_name": "dismissSnackbar",
        "method_code": "@VisibleForTesting\n    public void dismissSnackbar() {\n        if (snackbar != null && snackbar.isShown()) {\n            snackbar.dismiss();\n            snackbar = null;\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled dismissSnackbar from ActivitiesActivity.java into Swift.\n\n        Input:\n\n        Method Name: dismissSnackbar\n\n        Method Code: @VisibleForTesting\n    public void dismissSnackbar() {\n        if (snackbar != null && snackbar.isShown()) {\n            snackbar.dismiss();\n            snackbar = null;\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc dismissSnackbar() {\n    if let snackbar = snackbar, snackbar.isShown {\n        snackbar.dismiss()\n        self.snackbar = nil\n    }\n}\n```"
    }
]