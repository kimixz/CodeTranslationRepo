[
    {
        "method_name": "newInstance",
        "method_code": "public static FileDetailFragment newInstance(OCFile fileToDetail, OCFile parentFolder, User user) {\n        FileDetailFragment frag = new FileDetailFragment();\n        Bundle args = new Bundle();\n        args.putParcelable(ARG_FILE, fileToDetail);\n        args.putParcelable(ARG_PARENT_FOLDER, parentFolder);\n        args.putParcelable(ARG_USER, user);\n        frag.setArguments(args);\n        return frag;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled newInstance from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: newInstance\n\n        Method Code: public static FileDetailFragment newInstance(OCFile fileToDetail, OCFile parentFolder, User user) {\n        FileDetailFragment frag = new FileDetailFragment();\n        Bundle args = new Bundle();\n        args.putParcelable(ARG_FILE, fileToDetail);\n        args.putParcelable(ARG_PARENT_FOLDER, parentFolder);\n        args.putParcelable(ARG_USER, user);\n        frag.setArguments(args);\n        return frag;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func newInstance(fileToDetail: OCFile, parentFolder: OCFile, user: User) -> FileDetailFragment {\n    let frag = FileDetailFragment()\n    let args = Bundle()\n    args.putParcelable(ARG_FILE, fileToDetail)\n    args.putParcelable(ARG_PARENT_FOLDER, parentFolder)\n    args.putParcelable(ARG_USER, user)\n    frag.setArguments(args)\n    return frag\n}\n```"
    },
    {
        "method_name": "newInstance",
        "method_code": "public static FileDetailFragment newInstance(OCFile fileToDetail, User user, int activeTab) {\n        FileDetailFragment frag = new FileDetailFragment();\n        Bundle args = new Bundle();\n        args.putParcelable(ARG_FILE, fileToDetail);\n        args.putParcelable(ARG_USER, user);\n        args.putInt(ARG_ACTIVE_TAB, activeTab);\n        frag.setArguments(args);\n        return frag;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled newInstance from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: newInstance\n\n        Method Code: public static FileDetailFragment newInstance(OCFile fileToDetail, User user, int activeTab) {\n        FileDetailFragment frag = new FileDetailFragment();\n        Bundle args = new Bundle();\n        args.putParcelable(ARG_FILE, fileToDetail);\n        args.putParcelable(ARG_USER, user);\n        args.putInt(ARG_ACTIVE_TAB, activeTab);\n        frag.setArguments(args);\n        return frag;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func newInstance(fileToDetail: OCFile, user: User, activeTab: Int) -> FileDetailFragment {\n    let frag = FileDetailFragment()\n    let args = Bundle()\n    args.putParcelable(ARG_FILE, fileToDetail)\n    args.putParcelable(ARG_USER, user)\n    args.putInt(ARG_ACTIVE_TAB, activeTab)\n    frag.setArguments(args)\n    return frag\n}\n```"
    },
    {
        "method_name": "getFileDetailSharingFragment",
        "method_code": "public FileDetailSharingFragment getFileDetailSharingFragment() {\n        if (binding == null) {\n            return null;\n        }\n\n        if (binding.pager.getAdapter() instanceof FileDetailTabAdapter adapter) {\n            return adapter.getFileDetailSharingFragment();\n        }\n\n        return null;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getFileDetailSharingFragment from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: getFileDetailSharingFragment\n\n        Method Code: public FileDetailSharingFragment getFileDetailSharingFragment() {\n        if (binding == null) {\n            return null;\n        }\n\n        if (binding.pager.getAdapter() instanceof FileDetailTabAdapter adapter) {\n            return adapter.getFileDetailSharingFragment();\n        }\n\n        return null;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getFileDetailSharingFragment() -> FileDetailSharingFragment? {\n    guard let binding = binding else {\n        return nil\n    }\n\n    if let adapter = binding.pager.adapter as? FileDetailTabAdapter {\n        return adapter.getFileDetailSharingFragment()\n    }\n\n    return nil\n}\n```"
    },
    {
        "method_name": "getFileDetailActivitiesFragment",
        "method_code": "public FileDetailActivitiesFragment getFileDetailActivitiesFragment() {\n        if (binding.pager.getAdapter() instanceof FileDetailTabAdapter adapter) {\n            return adapter.getFileDetailActivitiesFragment();\n        }\n\n        return null;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getFileDetailActivitiesFragment from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: getFileDetailActivitiesFragment\n\n        Method Code: public FileDetailActivitiesFragment getFileDetailActivitiesFragment() {\n        if (binding.pager.getAdapter() instanceof FileDetailTabAdapter adapter) {\n            return adapter.getFileDetailActivitiesFragment();\n        }\n\n        return null;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getFileDetailActivitiesFragment() -> FileDetailActivitiesFragment? {\n    if let adapter = binding.pager.adapter as? FileDetailTabAdapter {\n        return adapter.getFileDetailActivitiesFragment()\n    }\n    return nil\n}\n```"
    },
    {
        "method_name": "goBackToOCFileListFragment",
        "method_code": "public void goBackToOCFileListFragment() {\n        requireActivity().onBackPressed();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled goBackToOCFileListFragment from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: goBackToOCFileListFragment\n\n        Method Code: public void goBackToOCFileListFragment() {\n        requireActivity().onBackPressed();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc goBackToOCFileListFragment() {\n    self.navigationController?.popViewController(animated: true)\n}\n```"
    },
    {
        "method_name": "onActivityCreated",
        "method_code": "@Override\n    public void onActivityCreated(Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n        setHasOptionsMenu(true);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onActivityCreated from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: onActivityCreated\n\n        Method Code: @Override\n    public void onActivityCreated(Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n        setHasOptionsMenu(true);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    self.navigationItem.rightBarButtonItem = self.editButtonItem\n}\n```"
    },
    {
        "method_name": "onCreateView",
        "method_code": "@Override\n    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n\n        Bundle arguments = getArguments();\n\n        if (arguments == null) {\n            throw new IllegalArgumentException(\"Arguments may not be null\");\n        }\n\n        setFile(BundleExtensionsKt.getParcelableArgument(arguments, ARG_FILE, OCFile.class));\n        parentFolder = BundleExtensionsKt.getParcelableArgument(arguments, ARG_PARENT_FOLDER, OCFile.class);\n        user = BundleExtensionsKt.getParcelableArgument(arguments, ARG_USER, User.class);\n        activeTab = arguments.getInt(ARG_ACTIVE_TAB, 0);\n\n        if (savedInstanceState != null) {\n            setFile(BundleExtensionsKt.getParcelableArgument(savedInstanceState, ARG_FILE, OCFile.class));\n            user = BundleExtensionsKt.getParcelableArgument(savedInstanceState, ARG_USER, User.class);\n        }\n\n        binding = FileDetailsFragmentBinding.inflate(inflater, container, false);\n        view = binding.getRoot();\n\n        if (getFile() == null || user == null) {\n            showEmptyContent();\n        } else {\n            binding.emptyList.emptyListView.setVisibility(View.GONE);\n        }\n\n        Context context = getContext();\n        if (context == null) {\n            return null;\n        }\n\n        if (getFile().getTags().isEmpty()) {\n            binding.tagsGroup.setVisibility(View.GONE);\n        } else {\n            for (String tag : getFile().getTags()) {\n                Chip chip = new Chip(context);\n                chip.setText(tag);\n                chip.setChipBackgroundColor(ColorStateList.valueOf(getResources().getColor(R.color.bg_default,\n                                                                                           context.getTheme())));\n                chip.setShapeAppearanceModel(chip.getShapeAppearanceModel().toBuilder().setAllCornerSizes((100.0f))\n                                                 .build());\n                chip.setEnsureMinTouchTargetSize(false);\n                chip.setClickable(false);\n                viewThemeUtils.material.themeChipSuggestion(chip);\n                binding.tagsGroup.addView(chip);\n            }\n        }\n\n        return view;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreateView from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: onCreateView\n\n        Method Code: @Override\n    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n\n        Bundle arguments = getArguments();\n\n        if (arguments == null) {\n            throw new IllegalArgumentException(\"Arguments may not be null\");\n        }\n\n        setFile(BundleExtensionsKt.getParcelableArgument(arguments, ARG_FILE, OCFile.class));\n        parentFolder = BundleExtensionsKt.getParcelableArgument(arguments, ARG_PARENT_FOLDER, OCFile.class);\n        user = BundleExtensionsKt.getParcelableArgument(arguments, ARG_USER, User.class);\n        activeTab = arguments.getInt(ARG_ACTIVE_TAB, 0);\n\n        if (savedInstanceState != null) {\n            setFile(BundleExtensionsKt.getParcelableArgument(savedInstanceState, ARG_FILE, OCFile.class));\n            user = BundleExtensionsKt.getParcelableArgument(savedInstanceState, ARG_USER, User.class);\n        }\n\n        binding = FileDetailsFragmentBinding.inflate(inflater, container, false);\n        view = binding.getRoot();\n\n        if (getFile() == null || user == null) {\n            showEmptyContent();\n        } else {\n            binding.emptyList.emptyListView.setVisibility(View.GONE);\n        }\n\n        Context context = getContext();\n        if (context == null) {\n            return null;\n        }\n\n        if (getFile().getTags().isEmpty()) {\n            binding.tagsGroup.setVisibility(View.GONE);\n        } else {\n            for (String tag : getFile().getTags()) {\n                Chip chip = new Chip(context);\n                chip.setText(tag);\n                chip.setChipBackgroundColor(ColorStateList.valueOf(getResources().getColor(R.color.bg_default,\n                                                                                           context.getTheme())));\n                chip.setShapeAppearanceModel(chip.getShapeAppearanceModel().toBuilder().setAllCornerSizes((100.0f))\n                                                 .build());\n                chip.setEnsureMinTouchTargetSize(false);\n                chip.setClickable(false);\n                viewThemeUtils.material.themeChipSuggestion(chip);\n                binding.tagsGroup.addView(chip);\n            }\n        }\n\n        return view;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n\n    guard let arguments = self.arguments else {\n        fatalError(\"Arguments may not be null\")\n    }\n\n    setFile(BundleExtensionsKt.getParcelableArgument(arguments, ARG_FILE, OCFile.self))\n    parentFolder = BundleExtensionsKt.getParcelableArgument(arguments, ARG_PARENT_FOLDER, OCFile.self)\n    user = BundleExtensionsKt.getParcelableArgument(arguments, ARG_USER, User.self)\n    activeTab = arguments.getInt(ARG_ACTIVE_TAB, defaultValue: 0)\n\n    if let savedInstanceState = savedInstanceState {\n        setFile(BundleExtensionsKt.getParcelableArgument(savedInstanceState, ARG_FILE, OCFile.self))\n        user = BundleExtensionsKt.getParcelableArgument(savedInstanceState, ARG_USER, User.self)\n    }\n\n    binding = FileDetailsFragmentBinding.inflate(inflater, container: container, savedInstanceState: savedInstanceState)\n    view = binding.root\n\n    if getFile() == nil || user == nil {\n        showEmptyContent()\n    } else {\n        binding.emptyList.emptyListView.isHidden = true\n    }\n\n    guard let context = self.context else {\n        return\n    }\n\n    if getFile()?.tags.isEmpty ?? true {\n        binding.tagsGroup.isHidden = true\n    } else {\n        for tag in getFile()?.tags ?? [] {\n            let chip = Chip(context: context)\n            chip.text = tag\n            chip.chipBackgroundColor = UIColor(named: \"bg_default\")?.resolvedColor(with: context.traitCollection)\n            chip.shapeAppearanceModel = chip.shapeAppearanceModel.copy().settingAllCornerSizes(100.0)\n            chip.ensureMinTouchTargetSize = false\n            chip.isUserInteractionEnabled = false\n            viewThemeUtils.material.themeChipSuggestion(chip)\n            binding.tagsGroup.addSubview(chip)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "onViewCreated",
        "method_code": "@Override\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\n        if (getFile() != null && user != null) {\n            viewThemeUtils.platform.themeHorizontalProgressBar(binding.progressBar);\n            progressListener = new ProgressListener(binding.progressBar);\n            binding.cancelBtn.setOnClickListener(this);\n            binding.favorite.setOnClickListener(this);\n            binding.overflowMenu.setOnClickListener(this);\n            binding.lastModificationTimestamp.setOnClickListener(this);\n            binding.folderSyncButton.setOnClickListener(this);\n\n            updateFileDetails(false, false);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onViewCreated from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: onViewCreated\n\n        Method Code: @Override\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\n        if (getFile() != null && user != null) {\n            viewThemeUtils.platform.themeHorizontalProgressBar(binding.progressBar);\n            progressListener = new ProgressListener(binding.progressBar);\n            binding.cancelBtn.setOnClickListener(this);\n            binding.favorite.setOnClickListener(this);\n            binding.overflowMenu.setOnClickListener(this);\n            binding.lastModificationTimestamp.setOnClickListener(this);\n            binding.folderSyncButton.setOnClickListener(this);\n\n            updateFileDetails(false, false);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    if getFile() != nil && user != nil {\n        viewThemeUtils.platform.themeHorizontalProgressBar(binding.progressBar)\n        progressListener = ProgressListener(binding.progressBar)\n        binding.cancelBtn.addTarget(self, action: #selector(handleButtonPress(_:)), for: .touchUpInside)\n        binding.favorite.addTarget(self, action: #selector(handleButtonPress(_:)), for: .touchUpInside)\n        binding.overflowMenu.addTarget(self, action: #selector(handleButtonPress(_:)), for: .touchUpInside)\n        binding.lastModificationTimestamp.addTarget(self, action: #selector(handleButtonPress(_:)), for: .touchUpInside)\n        binding.folderSyncButton.addTarget(self, action: #selector(handleButtonPress(_:)), for: .touchUpInside)\n\n        updateFileDetails(false, false)\n    }\n}\n\n@objc func handleButtonPress(_ sender: UIButton) {\n    // Handle button press\n}\n```"
    },
    {
        "method_name": "onOverflowIconClicked",
        "method_code": "private void onOverflowIconClicked() {\n        final OCFile file = getFile();\n        final List<Integer> additionalFilter = new ArrayList<>(\n            Arrays.asList(\n                R.id.action_lock_file,\n                R.id.action_unlock_file,\n                R.id.action_edit,\n                R.id.action_favorite,\n                R.id.action_unset_favorite,\n                R.id.action_see_details,\n                R.id.action_move_or_copy,\n                R.id.action_stream_media,\n                R.id.action_send_share_file,\n                R.id.action_pin_to_homescreen\n                         ));\n        if (getFile().isFolder()) {\n            additionalFilter.add(R.id.action_send_file);\n            additionalFilter.add(R.id.action_sync_file);\n        }\n        if (getFile().isAPKorAAB()) {\n            additionalFilter.add(R.id.action_download_file);\n            additionalFilter.add(R.id.action_export_file);\n        }\n        final FragmentManager fragmentManager = getChildFragmentManager();\n        FileActionsBottomSheet.newInstance(file, true, additionalFilter)\n            .setResultListener(fragmentManager, this, this::optionsItemSelected)\n            .show(fragmentManager, \"actions\");\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onOverflowIconClicked from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: onOverflowIconClicked\n\n        Method Code: private void onOverflowIconClicked() {\n        final OCFile file = getFile();\n        final List<Integer> additionalFilter = new ArrayList<>(\n            Arrays.asList(\n                R.id.action_lock_file,\n                R.id.action_unlock_file,\n                R.id.action_edit,\n                R.id.action_favorite,\n                R.id.action_unset_favorite,\n                R.id.action_see_details,\n                R.id.action_move_or_copy,\n                R.id.action_stream_media,\n                R.id.action_send_share_file,\n                R.id.action_pin_to_homescreen\n                         ));\n        if (getFile().isFolder()) {\n            additionalFilter.add(R.id.action_send_file);\n            additionalFilter.add(R.id.action_sync_file);\n        }\n        if (getFile().isAPKorAAB()) {\n            additionalFilter.add(R.id.action_download_file);\n            additionalFilter.add(R.id.action_export_file);\n        }\n        final FragmentManager fragmentManager = getChildFragmentManager();\n        FileActionsBottomSheet.newInstance(file, true, additionalFilter)\n            .setResultListener(fragmentManager, this, this::optionsItemSelected)\n            .show(fragmentManager, \"actions\");\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func onOverflowIconClicked() {\n    guard let file = getFile() else { return }\n    var additionalFilter: [Int] = [\n        R.id.action_lock_file,\n        R.id.action_unlock_file,\n        R.id.action_edit,\n        R.id.action_favorite,\n        R.id.action_unset_favorite,\n        R.id.action_see_details,\n        R.id.action_move_or_copy,\n        R.id.action_stream_media,\n        R.id.action_send_share_file,\n        R.id.action_pin_to_homescreen\n    ]\n    if file.isFolder() {\n        additionalFilter.append(R.id.action_send_file)\n        additionalFilter.append(R.id.action_sync_file)\n    }\n    if file.isAPKorAAB() {\n        additionalFilter.append(R.id.action_download_file)\n        additionalFilter.append(R.id.action_export_file)\n    }\n    let fragmentManager = self.children\n    FileActionsBottomSheet.newInstance(file: file, flag: true, additionalFilter: additionalFilter)\n        .setResultListener(fragmentManager: fragmentManager, target: self, selector: #selector(optionsItemSelected))\n        .show(fragmentManager: fragmentManager, tag: \"actions\")\n}\n```"
    },
    {
        "method_name": "setupViewPager",
        "method_code": "private void setupViewPager() {\n        binding.tabLayout.removeAllTabs();\n\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(R.string.drawer_item_activities).setIcon(R.drawable.ic_activity));\n\n\n        if (showSharingTab()) {\n            binding.tabLayout.addTab(binding.tabLayout.newTab().setText(R.string.share_dialog_title).setIcon(R.drawable.shared_via_users));\n        }\n\n        if (MimeTypeUtil.isImage(getFile())) {\n            binding.tabLayout.addTab(binding.tabLayout.newTab().setText(R.string.filedetails_details).setIcon(R.drawable.image_32dp));\n        }\n\n        viewThemeUtils.material.themeTabLayout(binding.tabLayout);\n\n        final FileDetailTabAdapter adapter = new FileDetailTabAdapter(requireActivity(),\n                                                                      getFile(),\n                                                                      user,\n                                                                      showSharingTab());\n        binding.pager.setAdapter(adapter);\n\n        binding.pager.registerOnPageChangeCallback(new ViewPager2.OnPageChangeCallback() {\n            @Override\n            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n                final FileDetailActivitiesFragment fragment = getFileDetailActivitiesFragment();\n                if (activeTab == 0 && fragment != null) {\n                    fragment.markCommentsAsRead();\n                }\n                super.onPageScrolled(position, positionOffset, positionOffsetPixels);\n            }\n        });\n        binding.tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {\n            @Override\n            public void onTabSelected(TabLayout.Tab tab) {\n                binding.pager.setCurrentItem(tab.getPosition());\n                if (tab.getPosition() == 0) {\n                    final FileDetailActivitiesFragment fragment = getFileDetailActivitiesFragment();\n                    if (fragment != null) {\n                        fragment.markCommentsAsRead();\n                    }\n                }\n            }\n\n            @Override\n            public void onTabUnselected(TabLayout.Tab tab) {\n                // unused at the moment\n            }\n\n            @Override\n            public void onTabReselected(TabLayout.Tab tab) {\n                // unused at the moment\n            }\n        });\n\n        // FIXME file detail not opening from Media tab\n        if (binding != null) {\n            TabLayout.Tab tab = binding.tabLayout.getTabAt(activeTab);\n            if (tab == null) return;\n            binding.tabLayout.selectTab(tab);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setupViewPager from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: setupViewPager\n\n        Method Code: private void setupViewPager() {\n        binding.tabLayout.removeAllTabs();\n\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(R.string.drawer_item_activities).setIcon(R.drawable.ic_activity));\n\n\n        if (showSharingTab()) {\n            binding.tabLayout.addTab(binding.tabLayout.newTab().setText(R.string.share_dialog_title).setIcon(R.drawable.shared_via_users));\n        }\n\n        if (MimeTypeUtil.isImage(getFile())) {\n            binding.tabLayout.addTab(binding.tabLayout.newTab().setText(R.string.filedetails_details).setIcon(R.drawable.image_32dp));\n        }\n\n        viewThemeUtils.material.themeTabLayout(binding.tabLayout);\n\n        final FileDetailTabAdapter adapter = new FileDetailTabAdapter(requireActivity(),\n                                                                      getFile(),\n                                                                      user,\n                                                                      showSharingTab());\n        binding.pager.setAdapter(adapter);\n\n        binding.pager.registerOnPageChangeCallback(new ViewPager2.OnPageChangeCallback() {\n            @Override\n            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n                final FileDetailActivitiesFragment fragment = getFileDetailActivitiesFragment();\n                if (activeTab == 0 && fragment != null) {\n                    fragment.markCommentsAsRead();\n                }\n                super.onPageScrolled(position, positionOffset, positionOffsetPixels);\n            }\n        });\n        binding.tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {\n            @Override\n            public void onTabSelected(TabLayout.Tab tab) {\n                binding.pager.setCurrentItem(tab.getPosition());\n                if (tab.getPosition() == 0) {\n                    final FileDetailActivitiesFragment fragment = getFileDetailActivitiesFragment();\n                    if (fragment != null) {\n                        fragment.markCommentsAsRead();\n                    }\n                }\n            }\n\n            @Override\n            public void onTabUnselected(TabLayout.Tab tab) {\n                // unused at the moment\n            }\n\n            @Override\n            public void onTabReselected(TabLayout.Tab tab) {\n                // unused at the moment\n            }\n        });\n\n        // FIXME file detail not opening from Media tab\n        if (binding != null) {\n            TabLayout.Tab tab = binding.tabLayout.getTabAt(activeTab);\n            if (tab == null) return;\n            binding.tabLayout.selectTab(tab);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setupViewPager() {\n    binding.tabLayout.removeAllTabs()\n\n    binding.tabLayout.addTab(binding.tabLayout.newTab().setText(R.string.drawer_item_activities).setIcon(R.drawable.ic_activity))\n\n    if showSharingTab() {\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(R.string.share_dialog_title).setIcon(R.drawable.shared_via_users))\n    }\n\n    if MimeTypeUtil.isImage(getFile()) {\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(R.string.filedetails_details).setIcon(R.drawable.image_32dp))\n    }\n\n    viewThemeUtils.material.themeTabLayout(binding.tabLayout)\n\n    let adapter = FileDetailTabAdapter(requireActivity(), getFile(), user, showSharingTab())\n    binding.pager.adapter = adapter\n\n    binding.pager.registerOnPageChangeCallback(object: ViewPager2.OnPageChangeCallback() {\n        override func onPageScrolled(position: Int, positionOffset: Float, positionOffsetPixels: Int) {\n            let fragment = getFileDetailActivitiesFragment()\n            if activeTab == 0 && fragment != nil {\n                fragment?.markCommentsAsRead()\n            }\n            super.onPageScrolled(position, positionOffset, positionOffsetPixels)\n        }\n    })\n\n    binding.tabLayout.addOnTabSelectedListener(object: TabLayout.OnTabSelectedListener() {\n        override func onTabSelected(tab: TabLayout.Tab) {\n            binding.pager.setCurrentItem(tab.position)\n            if tab.position == 0 {\n                let fragment = getFileDetailActivitiesFragment()\n                fragment?.markCommentsAsRead()\n            }\n        }\n\n        override func onTabUnselected(tab: TabLayout.Tab) {\n            // unused at the moment\n        }\n\n        override func onTabReselected(tab: TabLayout.Tab) {\n            // unused at the moment\n        }\n    })\n\n    if binding != nil {\n        let tab = binding.tabLayout.getTabAt(activeTab)\n        if tab == nil { return }\n        binding.tabLayout.selectTab(tab)\n    }\n}\n```"
    },
    {
        "method_name": "onPageScrolled",
        "method_code": "@Override\n            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n                final FileDetailActivitiesFragment fragment = getFileDetailActivitiesFragment();\n                if (activeTab == 0 && fragment != null) {\n                    fragment.markCommentsAsRead();\n                }\n                super.onPageScrolled(position, positionOffset, positionOffsetPixels);\n            }",
        "prompt": "\n        Please translate the following Java (Android) method titled onPageScrolled from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: onPageScrolled\n\n        Method Code: @Override\n            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n                final FileDetailActivitiesFragment fragment = getFileDetailActivitiesFragment();\n                if (activeTab == 0 && fragment != null) {\n                    fragment.markCommentsAsRead();\n                }\n                super.onPageScrolled(position, positionOffset, positionOffsetPixels);\n            }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onPageScrolled(position: Int, positionOffset: CGFloat, positionOffsetPixels: Int) {\n    if let fragment = getFileDetailActivitiesFragment(), activeTab == 0 {\n        fragment.markCommentsAsRead()\n    }\n    super.onPageScrolled(position: position, positionOffset: positionOffset, positionOffsetPixels: positionOffsetPixels)\n}\n```"
    },
    {
        "method_name": "onTabSelected",
        "method_code": "@Override\n            public void onTabSelected(TabLayout.Tab tab) {\n                binding.pager.setCurrentItem(tab.getPosition());\n                if (tab.getPosition() == 0) {\n                    final FileDetailActivitiesFragment fragment = getFileDetailActivitiesFragment();\n                    if (fragment != null) {\n                        fragment.markCommentsAsRead();\n                    }\n                }\n            }",
        "prompt": "\n        Please translate the following Java (Android) method titled onTabSelected from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: onTabSelected\n\n        Method Code: @Override\n            public void onTabSelected(TabLayout.Tab tab) {\n                binding.pager.setCurrentItem(tab.getPosition());\n                if (tab.getPosition() == 0) {\n                    final FileDetailActivitiesFragment fragment = getFileDetailActivitiesFragment();\n                    if (fragment != null) {\n                        fragment.markCommentsAsRead();\n                    }\n                }\n            }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onTabSelected(tab: TabLayout.Tab) {\n    binding.pager.setCurrentItem(tab.position)\n    if tab.position == 0 {\n        if let fragment = getFileDetailActivitiesFragment() {\n            fragment.markCommentsAsRead()\n        }\n    }\n}\n```"
    },
    {
        "method_name": "onTabUnselected",
        "method_code": "@Override\n            public void onTabUnselected(TabLayout.Tab tab) {\n                // unused at the moment\n            }",
        "prompt": "\n        Please translate the following Java (Android) method titled onTabUnselected from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: onTabUnselected\n\n        Method Code: @Override\n            public void onTabUnselected(TabLayout.Tab tab) {\n                // unused at the moment\n            }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onTabUnselected(_ tab: UITabBarItem) {\n    // unused at the moment\n}\n```"
    },
    {
        "method_name": "onTabReselected",
        "method_code": "@Override\n            public void onTabReselected(TabLayout.Tab tab) {\n                // unused at the moment\n            }",
        "prompt": "\n        Please translate the following Java (Android) method titled onTabReselected from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: onTabReselected\n\n        Method Code: @Override\n            public void onTabReselected(TabLayout.Tab tab) {\n                // unused at the moment\n            }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onTabReselected(_ tab: UITabBarItem) {\n    // unused at the moment\n}\n```"
    },
    {
        "method_name": "onSaveInstanceState",
        "method_code": "@Override\n    public void onSaveInstanceState(@NonNull Bundle outState) {\n        super.onSaveInstanceState(outState);\n        FileExtensionsKt.logFileSize(getFile(), TAG);\n        outState.putParcelable(ARG_FILE, getFile());\n        outState.putParcelable(ARG_USER, user);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onSaveInstanceState from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: onSaveInstanceState\n\n        Method Code: @Override\n    public void onSaveInstanceState(@NonNull Bundle outState) {\n        super.onSaveInstanceState(outState);\n        FileExtensionsKt.logFileSize(getFile(), TAG);\n        outState.putParcelable(ARG_FILE, getFile());\n        outState.putParcelable(ARG_USER, user);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func encodeRestorableState(with coder: NSCoder) {\n    super.encodeRestorableState(with: coder)\n    logFileSize(file: getFile(), tag: TAG)\n    coder.encode(getFile(), forKey: ARG_FILE)\n    coder.encode(user, forKey: ARG_USER)\n}\n```"
    },
    {
        "method_name": "onStart",
        "method_code": "@Override\n    public void onStart() {\n        super.onStart();\n        listenForTransferProgress();\n        EventBus.getDefault().register(this);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onStart from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: onStart\n\n        Method Code: @Override\n    public void onStart() {\n        super.onStart();\n        listenForTransferProgress();\n        EventBus.getDefault().register(this);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n    listenForTransferProgress()\n    EventBus.default.register(self)\n}\n```"
    },
    {
        "method_name": "onResume",
        "method_code": "@Override\n    public void onResume() {\n        super.onResume();\n\n        if (toolbarActivity != null) {\n            if (previewLoaded) {\n                toolbarActivity.setPreviewImageVisibility(true);\n            }\n        }\n\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onResume from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: onResume\n\n        Method Code: @Override\n    public void onResume() {\n        super.onResume();\n\n        if (toolbarActivity != null) {\n            if (previewLoaded) {\n                toolbarActivity.setPreviewImageVisibility(true);\n            }\n        }\n\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n\n    if let toolbarActivity = toolbarActivity {\n        if previewLoaded {\n            toolbarActivity.setPreviewImageVisibility(true)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "onPause",
        "method_code": "@Override\n    public void onPause() {\n        super.onPause();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onPause from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: onPause\n\n        Method Code: @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n```"
    },
    {
        "method_name": "onStop",
        "method_code": "@Override\n    public void onStop() {\n        leaveTransferProgress();\n\n        if (toolbarActivity != null) {\n            toolbarActivity.hidePreviewImage();\n        }\n\n        EventBus.getDefault().unregister(this);\n        super.onStop();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onStop from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: onStop\n\n        Method Code: @Override\n    public void onStop() {\n        leaveTransferProgress();\n\n        if (toolbarActivity != null) {\n            toolbarActivity.hidePreviewImage();\n        }\n\n        EventBus.getDefault().unregister(this);\n        super.onStop();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n    leaveTransferProgress()\n\n    toolbarActivity?.hidePreviewImage()\n\n    NotificationCenter.default.removeObserver(self)\n}\n```"
    },
    {
        "method_name": "onAttach",
        "method_code": "@Override\n    public void onAttach(@NonNull Context context) {\n        super.onAttach(context);\n        if (context instanceof ToolbarActivity) {\n            toolbarActivity = (ToolbarActivity) context;\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onAttach from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: onAttach\n\n        Method Code: @Override\n    public void onAttach(@NonNull Context context) {\n        super.onAttach(context);\n        if (context instanceof ToolbarActivity) {\n            toolbarActivity = (ToolbarActivity) context;\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func didMove(toParent parent: UIViewController?) {\n    super.didMove(toParent: parent)\n    if let toolbarActivity = parent as? ToolbarActivity {\n        self.toolbarActivity = toolbarActivity\n    }\n}\n```"
    },
    {
        "method_name": "onDestroyView",
        "method_code": "@Override\n    public void onDestroyView() {\n        super.onDestroyView();\n        binding = null;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onDestroyView from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: onDestroyView\n\n        Method Code: @Override\n    public void onDestroyView() {\n        super.onDestroyView();\n        binding = null;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n    binding = nil\n}\n```"
    },
    {
        "method_name": "getView",
        "method_code": "@Override\n    public View getView() {\n        return super.getView() == null ? view : super.getView();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getView from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: getView\n\n        Method Code: @Override\n    public View getView() {\n        return super.getView() == null ? view : super.getView();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func getView() -> UIView? {\n    return super.getView() ?? view\n}\n```"
    },
    {
        "method_name": "onPrepareOptionsMenu",
        "method_code": "@Override\n    public void onPrepareOptionsMenu(@NonNull Menu menu) {\n        super.onPrepareOptionsMenu(menu);\n\n        MenuUtils.hideAll(menu);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onPrepareOptionsMenu from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: onPrepareOptionsMenu\n\n        Method Code: @Override\n    public void onPrepareOptionsMenu(@NonNull Menu menu) {\n        super.onPrepareOptionsMenu(menu);\n\n        MenuUtils.hideAll(menu);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n    super.prepare(for: segue, sender: sender)\n\n    MenuUtils.hideAll(menu)\n}\n```"
    },
    {
        "method_name": "optionsItemSelected",
        "method_code": "private void optionsItemSelected(@IdRes final int itemId) {\n        if (itemId == R.id.action_send_file) {\n            containerActivity.getFileOperationsHelper().sendShareFile(getFile(), true);\n        } else if (itemId == R.id.action_open_file_with) {\n            containerActivity.getFileOperationsHelper().openFile(getFile());\n        } else if (itemId == R.id.action_remove_file) {\n            RemoveFilesDialogFragment dialog = RemoveFilesDialogFragment.newInstance(getFile());\n            dialog.show(getFragmentManager(), FTAG_CONFIRMATION);\n        } else if (itemId == R.id.action_rename_file) {\n            RenameFileDialogFragment dialog = RenameFileDialogFragment.newInstance(getFile(), parentFolder);\n            dialog.show(getFragmentManager(), FTAG_RENAME_FILE);\n        } else if (itemId == R.id.action_cancel_sync) {\n            ((FileDisplayActivity) containerActivity).cancelTransference(getFile());\n        } else if (itemId == R.id.action_download_file || itemId == R.id.action_sync_file) {\n            containerActivity.getFileOperationsHelper().syncFile(getFile());\n        } else if (itemId == R.id.action_export_file) {\n            ArrayList<OCFile> list = new ArrayList<>();\n            list.add(getFile());\n            containerActivity.getFileOperationsHelper().exportFiles(list,\n                                                                    getContext(),\n                                                                    getView(),\n                                                                    backgroundJobManager);\n        } else if (itemId == R.id.action_set_as_wallpaper) {\n            containerActivity.getFileOperationsHelper().setPictureAs(getFile(), getView());\n        } else if (itemId == R.id.action_retry) {\n            backgroundJobManager.startOfflineOperations();\n        } else if (itemId == R.id.action_encrypted) {\n            // TODO implement or remove\n        } else if (itemId == R.id.action_unset_encrypted) {// TODO implement or remove\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled optionsItemSelected from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: optionsItemSelected\n\n        Method Code: private void optionsItemSelected(@IdRes final int itemId) {\n        if (itemId == R.id.action_send_file) {\n            containerActivity.getFileOperationsHelper().sendShareFile(getFile(), true);\n        } else if (itemId == R.id.action_open_file_with) {\n            containerActivity.getFileOperationsHelper().openFile(getFile());\n        } else if (itemId == R.id.action_remove_file) {\n            RemoveFilesDialogFragment dialog = RemoveFilesDialogFragment.newInstance(getFile());\n            dialog.show(getFragmentManager(), FTAG_CONFIRMATION);\n        } else if (itemId == R.id.action_rename_file) {\n            RenameFileDialogFragment dialog = RenameFileDialogFragment.newInstance(getFile(), parentFolder);\n            dialog.show(getFragmentManager(), FTAG_RENAME_FILE);\n        } else if (itemId == R.id.action_cancel_sync) {\n            ((FileDisplayActivity) containerActivity).cancelTransference(getFile());\n        } else if (itemId == R.id.action_download_file || itemId == R.id.action_sync_file) {\n            containerActivity.getFileOperationsHelper().syncFile(getFile());\n        } else if (itemId == R.id.action_export_file) {\n            ArrayList<OCFile> list = new ArrayList<>();\n            list.add(getFile());\n            containerActivity.getFileOperationsHelper().exportFiles(list,\n                                                                    getContext(),\n                                                                    getView(),\n                                                                    backgroundJobManager);\n        } else if (itemId == R.id.action_set_as_wallpaper) {\n            containerActivity.getFileOperationsHelper().setPictureAs(getFile(), getView());\n        } else if (itemId == R.id.action_retry) {\n            backgroundJobManager.startOfflineOperations();\n        } else if (itemId == R.id.action_encrypted) {\n            // TODO implement or remove\n        } else if (itemId == R.id.action_unset_encrypted) {// TODO implement or remove\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func optionsItemSelected(itemId: Int) {\n    if itemId == R.id.action_send_file {\n        containerActivity.getFileOperationsHelper().sendShareFile(getFile(), true)\n    } else if itemId == R.id.action_open_file_with {\n        containerActivity.getFileOperationsHelper().openFile(getFile())\n    } else if itemId == R.id.action_remove_file {\n        let dialog = RemoveFilesDialogFragment.newInstance(getFile())\n        dialog.show(getFragmentManager(), FTAG_CONFIRMATION)\n    } else if itemId == R.id.action_rename_file {\n        let dialog = RenameFileDialogFragment.newInstance(getFile(), parentFolder)\n        dialog.show(getFragmentManager(), FTAG_RENAME_FILE)\n    } else if itemId == R.id.action_cancel_sync {\n        (containerActivity as? FileDisplayActivity)?.cancelTransference(getFile())\n    } else if itemId == R.id.action_download_file || itemId == R.id.action_sync_file {\n        containerActivity.getFileOperationsHelper().syncFile(getFile())\n    } else if itemId == R.id.action_export_file {\n        var list = [OCFile]()\n        list.append(getFile())\n        containerActivity.getFileOperationsHelper().exportFiles(list, getContext(), getView(), backgroundJobManager)\n    } else if itemId == R.id.action_set_as_wallpaper {\n        containerActivity.getFileOperationsHelper().setPictureAs(getFile(), getView())\n    } else if itemId == R.id.action_retry {\n        backgroundJobManager.startOfflineOperations()\n    } else if itemId == R.id.action_encrypted {\n        // TODO implement or remove\n    } else if itemId == R.id.action_unset_encrypted {\n        // TODO implement or remove\n    }\n}\n```"
    },
    {
        "method_name": "onClick",
        "method_code": "@Override\n    public void onClick(View v) {\n        int id = v.getId();\n\n        if (id == R.id.cancelBtn) {\n            ((FileDisplayActivity) containerActivity).cancelTransference(getFile());\n        } else if (id == R.id.favorite) {\n            containerActivity.getFileOperationsHelper().toggleFavoriteFile(getFile(), !getFile().isFavorite());\n            setFavoriteIconStatus(!getFile().isFavorite());\n        } else if (id == R.id.overflow_menu) {\n            onOverflowIconClicked();\n        } else if (id == R.id.last_modification_timestamp) {\n            boolean showDetailedTimestamp = !preferences.isShowDetailedTimestampEnabled();\n            preferences.setShowDetailedTimestampEnabled(showDetailedTimestamp);\n            setFileModificationTimestamp(getFile(), showDetailedTimestamp);\n        } else if (id == R.id.folder_sync_button) {\n            if (binding.folderSyncButton.isChecked()) {\n                getFile().setInternalFolderSyncTimestamp(0L);    \n            } else {\n                getFile().setInternalFolderSyncTimestamp(-1L);\n            }\n            \n            storageManager.saveFile(getFile());\n        } else {\n            Log_OC.e(TAG, \"Incorrect view clicked!\");\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onClick from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: onClick\n\n        Method Code: @Override\n    public void onClick(View v) {\n        int id = v.getId();\n\n        if (id == R.id.cancelBtn) {\n            ((FileDisplayActivity) containerActivity).cancelTransference(getFile());\n        } else if (id == R.id.favorite) {\n            containerActivity.getFileOperationsHelper().toggleFavoriteFile(getFile(), !getFile().isFavorite());\n            setFavoriteIconStatus(!getFile().isFavorite());\n        } else if (id == R.id.overflow_menu) {\n            onOverflowIconClicked();\n        } else if (id == R.id.last_modification_timestamp) {\n            boolean showDetailedTimestamp = !preferences.isShowDetailedTimestampEnabled();\n            preferences.setShowDetailedTimestampEnabled(showDetailedTimestamp);\n            setFileModificationTimestamp(getFile(), showDetailedTimestamp);\n        } else if (id == R.id.folder_sync_button) {\n            if (binding.folderSyncButton.isChecked()) {\n                getFile().setInternalFolderSyncTimestamp(0L);    \n            } else {\n                getFile().setInternalFolderSyncTimestamp(-1L);\n            }\n            \n            storageManager.saveFile(getFile());\n        } else {\n            Log_OC.e(TAG, \"Incorrect view clicked!\");\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onClick(_ v: UIView) {\n    let id = v.tag\n\n    if id == R.id.cancelBtn {\n        (containerActivity as? FileDisplayActivity)?.cancelTransference(getFile())\n    } else if id == R.id.favorite {\n        containerActivity.getFileOperationsHelper().toggleFavoriteFile(getFile(), !getFile().isFavorite)\n        setFavoriteIconStatus(!getFile().isFavorite)\n    } else if id == R.id.overflow_menu {\n        onOverflowIconClicked()\n    } else if id == R.id.last_modification_timestamp {\n        let showDetailedTimestamp = !preferences.isShowDetailedTimestampEnabled()\n        preferences.setShowDetailedTimestampEnabled(showDetailedTimestamp)\n        setFileModificationTimestamp(getFile(), showDetailedTimestamp)\n    } else if id == R.id.folder_sync_button {\n        if binding.folderSyncButton.isChecked {\n            getFile().setInternalFolderSyncTimestamp(0)\n        } else {\n            getFile().setInternalFolderSyncTimestamp(-1)\n        }\n        \n        storageManager.saveFile(getFile())\n    } else {\n        Log_OC.e(TAG, \"Incorrect view clicked!\")\n    }\n}\n```"
    },
    {
        "method_name": "isEmpty",
        "method_code": "public boolean isEmpty() {\n        return getFile() == null || user == null;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled isEmpty from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: isEmpty\n\n        Method Code: public boolean isEmpty() {\n        return getFile() == null || user == null;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc isEmpty() -> Bool {\n    return getFile() == nil || user == nil\n}\n```"
    },
    {
        "method_name": "updateFileDetails",
        "method_code": "public void updateFileDetails(OCFile file, User user) {\n        setFile(file);\n        this.user = user;\n        updateFileDetails(false, false);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled updateFileDetails from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: updateFileDetails\n\n        Method Code: public void updateFileDetails(OCFile file, User user) {\n        setFile(file);\n        this.user = user;\n        updateFileDetails(false, false);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc updateFileDetails(file: OCFile, user: User) {\n    setFile(file)\n    self.user = user\n    updateFileDetails(false, false)\n}\n```"
    },
    {
        "method_name": "updateFileDetails",
        "method_code": "public void updateFileDetails(boolean transferring, boolean refresh) {\n        if (readyToShow()) {\n            FileDataStorageManager storageManager = containerActivity.getStorageManager();\n\n            if (storageManager == null) {\n                return;\n            }\n\n            if (refresh) {\n                setFile(storageManager.getFileByPath(getFile().getRemotePath()));\n            }\n            OCFile file = getFile();\n\n            // set file details\n            if (MimeTypeUtil.isImage(file)) {\n                binding.filename.setText(file.getFileName());\n            } else {\n                binding.filename.setVisibility(View.GONE);\n            }\n            binding.size.setText(DisplayUtils.bytesToHumanReadable(file.getFileLength()));\n\n            boolean showDetailedTimestamp = preferences.isShowDetailedTimestampEnabled();\n            setFileModificationTimestamp(file, showDetailedTimestamp);\n\n            setFilePreview(file);\n            setFavoriteIconStatus(file.isFavorite());\n\n            // configure UI for depending upon local state of the file\n            if (transferring\n                || (FileDownloadHelper.Companion.instance().isDownloading(user, file))\n                || (FileUploadHelper.Companion.instance().isUploading(user, file))) {\n                setButtonsForTransferring();\n\n            } else if (file.isDown()) {\n\n                setButtonsForDown();\n\n            } else {\n                // TODO load default preview image; when the local file is removed, the preview\n                // remains there\n                setButtonsForRemote();\n            }\n\n            FloatingActionButton fabMain = requireActivity().findViewById(R.id.fab_main);\n            if (fabMain != null) {\n                fabMain.hide();\n            }\n            \n            binding.syncBlock.setVisibility(file.isFolder() ? View.VISIBLE : View.GONE);\n            \n            if (file.isInternalFolderSync()) {\n                binding.folderSyncButton.setChecked(file.isInternalFolderSync());    \n            } else {\n                if (storageManager.isPartOfInternalTwoWaySync(file)) {\n                    binding.folderSyncButton.setChecked(true);\n                    binding.folderSyncButton.setEnabled(false);\n                }\n            }\n        }\n\n        setupViewPager();\n        if (getView() != null) {\n            getView().invalidate();\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled updateFileDetails from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: updateFileDetails\n\n        Method Code: public void updateFileDetails(boolean transferring, boolean refresh) {\n        if (readyToShow()) {\n            FileDataStorageManager storageManager = containerActivity.getStorageManager();\n\n            if (storageManager == null) {\n                return;\n            }\n\n            if (refresh) {\n                setFile(storageManager.getFileByPath(getFile().getRemotePath()));\n            }\n            OCFile file = getFile();\n\n            // set file details\n            if (MimeTypeUtil.isImage(file)) {\n                binding.filename.setText(file.getFileName());\n            } else {\n                binding.filename.setVisibility(View.GONE);\n            }\n            binding.size.setText(DisplayUtils.bytesToHumanReadable(file.getFileLength()));\n\n            boolean showDetailedTimestamp = preferences.isShowDetailedTimestampEnabled();\n            setFileModificationTimestamp(file, showDetailedTimestamp);\n\n            setFilePreview(file);\n            setFavoriteIconStatus(file.isFavorite());\n\n            // configure UI for depending upon local state of the file\n            if (transferring\n                || (FileDownloadHelper.Companion.instance().isDownloading(user, file))\n                || (FileUploadHelper.Companion.instance().isUploading(user, file))) {\n                setButtonsForTransferring();\n\n            } else if (file.isDown()) {\n\n                setButtonsForDown();\n\n            } else {\n                // TODO load default preview image; when the local file is removed, the preview\n                // remains there\n                setButtonsForRemote();\n            }\n\n            FloatingActionButton fabMain = requireActivity().findViewById(R.id.fab_main);\n            if (fabMain != null) {\n                fabMain.hide();\n            }\n            \n            binding.syncBlock.setVisibility(file.isFolder() ? View.VISIBLE : View.GONE);\n            \n            if (file.isInternalFolderSync()) {\n                binding.folderSyncButton.setChecked(file.isInternalFolderSync());    \n            } else {\n                if (storageManager.isPartOfInternalTwoWaySync(file)) {\n                    binding.folderSyncButton.setChecked(true);\n                    binding.folderSyncButton.setEnabled(false);\n                }\n            }\n        }\n\n        setupViewPager();\n        if (getView() != null) {\n            getView().invalidate();\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc updateFileDetails(transferring: Bool, refresh: Bool) {\n    if readyToShow() {\n        guard let storageManager = containerActivity?.storageManager else {\n            return\n        }\n\n        if refresh {\n            setFile(storageManager.getFileByPath(getFile().remotePath))\n        }\n        let file = getFile()\n\n        // set file details\n        if MimeTypeUtil.isImage(file) {\n            binding.filename.text = file.fileName\n        } else {\n            binding.filename.isHidden = true\n        }\n        binding.size.text = DisplayUtils.bytesToHumanReadable(file.fileLength)\n\n        let showDetailedTimestamp = preferences.isShowDetailedTimestampEnabled()\n        setFileModificationTimestamp(file: file, showDetailedTimestamp: showDetailedTimestamp)\n\n        setFilePreview(file: file)\n        setFavoriteIconStatus(isFavorite: file.isFavorite)\n\n        // configure UI for depending upon local state of the file\n        if transferring\n            || FileDownloadHelper.instance().isDownloading(user: user, file: file)\n            || FileUploadHelper.instance().isUploading(user: user, file: file) {\n            setButtonsForTransferring()\n\n        } else if file.isDown() {\n            setButtonsForDown()\n\n        } else {\n            // TODO load default preview image; when the local file is removed, the preview\n            // remains there\n            setButtonsForRemote()\n        }\n\n        if let fabMain = requireActivity().viewWithTag(100) as? FloatingActionButton {\n            fabMain.hide()\n        }\n        \n        binding.syncBlock.isHidden = !file.isFolder\n        \n        if file.isInternalFolderSync {\n            binding.folderSyncButton.isChecked = file.isInternalFolderSync\n        } else {\n            if storageManager.isPartOfInternalTwoWaySync(file: file) {\n                binding.folderSyncButton.isChecked = true\n                binding.folderSyncButton.isEnabled = false\n            }\n        }\n    }\n\n    setupViewPager()\n    getView()?.setNeedsDisplay()\n}\n```"
    },
    {
        "method_name": "setFileModificationTimestamp",
        "method_code": "private void setFileModificationTimestamp(OCFile file, boolean showDetailedTimestamp) {\n        if (showDetailedTimestamp) {\n            binding.lastModificationTimestamp.setText(DisplayUtils.unixTimeToHumanReadable(file.getModificationTimestamp()));\n        } else {\n            binding.lastModificationTimestamp.setText(DisplayUtils.getRelativeTimestamp(getContext(),\n                                                                                        file.getModificationTimestamp()));\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setFileModificationTimestamp from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: setFileModificationTimestamp\n\n        Method Code: private void setFileModificationTimestamp(OCFile file, boolean showDetailedTimestamp) {\n        if (showDetailedTimestamp) {\n            binding.lastModificationTimestamp.setText(DisplayUtils.unixTimeToHumanReadable(file.getModificationTimestamp()));\n        } else {\n            binding.lastModificationTimestamp.setText(DisplayUtils.getRelativeTimestamp(getContext(),\n                                                                                        file.getModificationTimestamp()));\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setFileModificationTimestamp(file: OCFile, showDetailedTimestamp: Bool) {\n    if showDetailedTimestamp {\n        binding.lastModificationTimestamp.text = DisplayUtils.unixTimeToHumanReadable(file.modificationTimestamp)\n    } else {\n        binding.lastModificationTimestamp.text = DisplayUtils.getRelativeTimestamp(context: getContext(), timestamp: file.modificationTimestamp)\n    }\n}\n```"
    },
    {
        "method_name": "setFavoriteIconStatus",
        "method_code": "private void setFavoriteIconStatus(boolean isFavorite) {\n        if (isFavorite) {\n            binding.favorite.setImageDrawable(ResourcesCompat.getDrawable(getResources(), R.drawable.ic_star, null));\n        } else {\n            binding.favorite.setImageDrawable(ResourcesCompat.getDrawable(getResources(),\n                                                                          R.drawable.ic_star_outline,\n                                                                          null));\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setFavoriteIconStatus from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: setFavoriteIconStatus\n\n        Method Code: private void setFavoriteIconStatus(boolean isFavorite) {\n        if (isFavorite) {\n            binding.favorite.setImageDrawable(ResourcesCompat.getDrawable(getResources(), R.drawable.ic_star, null));\n        } else {\n            binding.favorite.setImageDrawable(ResourcesCompat.getDrawable(getResources(),\n                                                                          R.drawable.ic_star_outline,\n                                                                          null));\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setFavoriteIconStatus(isFavorite: Bool) {\n    if isFavorite {\n        binding.favorite.image = UIImage(named: \"ic_star\")\n    } else {\n        binding.favorite.image = UIImage(named: \"ic_star_outline\")\n    }\n}\n```"
    },
    {
        "method_name": "readyToShow",
        "method_code": "private boolean readyToShow() {\n        return getFile() != null && user != null;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled readyToShow from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: readyToShow\n\n        Method Code: private boolean readyToShow() {\n        return getFile() != null && user != null;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func readyToShow() -> Bool {\n    return getFile() != nil && user != nil\n}\n```"
    },
    {
        "method_name": "setFilePreview",
        "method_code": "private void setFilePreview(OCFile file) {\n        Bitmap resizedImage;\n\n        if (toolbarActivity != null && MimeTypeUtil.isImage(file)) {\n            String tagId = ThumbnailsCacheManager.PREFIX_RESIZED_IMAGE + getFile().getRemoteId();\n            resizedImage = ThumbnailsCacheManager.getBitmapFromDiskCache(tagId);\n\n            if (resizedImage != null && !file.isUpdateThumbnailNeeded()) {\n                toolbarActivity.setPreviewImageBitmap(resizedImage);\n                previewLoaded = true;\n            } else {\n                // show thumbnail while loading resized image\n                Bitmap thumbnail = ThumbnailsCacheManager.getBitmapFromDiskCache(\n                    ThumbnailsCacheManager.PREFIX_THUMBNAIL + getFile().getRemoteId());\n\n                if (thumbnail != null) {\n                    toolbarActivity.setPreviewImageBitmap(thumbnail);\n                } else {\n                    thumbnail = ThumbnailsCacheManager.mDefaultImg;\n                }\n\n                // generate new resized image\n                if (ThumbnailsCacheManager.cancelPotentialThumbnailWork(getFile(), toolbarActivity.getPreviewImageView()) &&\n                    containerActivity.getStorageManager() != null) {\n                    final ThumbnailsCacheManager.ResizedImageGenerationTask task =\n                        new ThumbnailsCacheManager.ResizedImageGenerationTask(this,\n                                                                              toolbarActivity.getPreviewImageView(),\n                                                                              toolbarActivity.getPreviewImageContainer(),\n                                                                              containerActivity.getStorageManager(),\n                                                                              connectivityService,\n                                                                              containerActivity.getStorageManager().getUser(),\n                                                                              getResources().getColor(R.color.background_color_inverse,\n                                                                                                      requireContext().getTheme())\n                        );\n\n                    if (resizedImage == null) {\n                        resizedImage = thumbnail;\n                    }\n\n                    final ThumbnailsCacheManager.AsyncResizedImageDrawable asyncDrawable =\n                        new ThumbnailsCacheManager.AsyncResizedImageDrawable(\n                            MainApp.getAppContext().getResources(),\n                            resizedImage,\n                            task\n                        );\n\n                    toolbarActivity.setPreviewImageDrawable(asyncDrawable);\n                    previewLoaded = true;\n                    task.execute(getFile());\n                }\n            }\n        } else {\n            previewLoaded = false;\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setFilePreview from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: setFilePreview\n\n        Method Code: private void setFilePreview(OCFile file) {\n        Bitmap resizedImage;\n\n        if (toolbarActivity != null && MimeTypeUtil.isImage(file)) {\n            String tagId = ThumbnailsCacheManager.PREFIX_RESIZED_IMAGE + getFile().getRemoteId();\n            resizedImage = ThumbnailsCacheManager.getBitmapFromDiskCache(tagId);\n\n            if (resizedImage != null && !file.isUpdateThumbnailNeeded()) {\n                toolbarActivity.setPreviewImageBitmap(resizedImage);\n                previewLoaded = true;\n            } else {\n                // show thumbnail while loading resized image\n                Bitmap thumbnail = ThumbnailsCacheManager.getBitmapFromDiskCache(\n                    ThumbnailsCacheManager.PREFIX_THUMBNAIL + getFile().getRemoteId());\n\n                if (thumbnail != null) {\n                    toolbarActivity.setPreviewImageBitmap(thumbnail);\n                } else {\n                    thumbnail = ThumbnailsCacheManager.mDefaultImg;\n                }\n\n                // generate new resized image\n                if (ThumbnailsCacheManager.cancelPotentialThumbnailWork(getFile(), toolbarActivity.getPreviewImageView()) &&\n                    containerActivity.getStorageManager() != null) {\n                    final ThumbnailsCacheManager.ResizedImageGenerationTask task =\n                        new ThumbnailsCacheManager.ResizedImageGenerationTask(this,\n                                                                              toolbarActivity.getPreviewImageView(),\n                                                                              toolbarActivity.getPreviewImageContainer(),\n                                                                              containerActivity.getStorageManager(),\n                                                                              connectivityService,\n                                                                              containerActivity.getStorageManager().getUser(),\n                                                                              getResources().getColor(R.color.background_color_inverse,\n                                                                                                      requireContext().getTheme())\n                        );\n\n                    if (resizedImage == null) {\n                        resizedImage = thumbnail;\n                    }\n\n                    final ThumbnailsCacheManager.AsyncResizedImageDrawable asyncDrawable =\n                        new ThumbnailsCacheManager.AsyncResizedImageDrawable(\n                            MainApp.getAppContext().getResources(),\n                            resizedImage,\n                            task\n                        );\n\n                    toolbarActivity.setPreviewImageDrawable(asyncDrawable);\n                    previewLoaded = true;\n                    task.execute(getFile());\n                }\n            }\n        } else {\n            previewLoaded = false;\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setFilePreview(file: OCFile) {\n    var resizedImage: UIImage?\n\n    if let toolbarActivity = toolbarActivity, MimeTypeUtil.isImage(file: file) {\n        let tagId = ThumbnailsCacheManager.PREFIX_RESIZED_IMAGE + getFile().getRemoteId()\n        resizedImage = ThumbnailsCacheManager.getBitmapFromDiskCache(tagId: tagId)\n\n        if let resizedImage = resizedImage, !file.isUpdateThumbnailNeeded() {\n            toolbarActivity.setPreviewImageBitmap(image: resizedImage)\n            previewLoaded = true\n        } else {\n            var thumbnail = ThumbnailsCacheManager.getBitmapFromDiskCache(tagId: ThumbnailsCacheManager.PREFIX_THUMBNAIL + getFile().getRemoteId())\n\n            if let thumbnail = thumbnail {\n                toolbarActivity.setPreviewImageBitmap(image: thumbnail)\n            } else {\n                thumbnail = ThumbnailsCacheManager.mDefaultImg\n            }\n\n            if ThumbnailsCacheManager.cancelPotentialThumbnailWork(file: getFile(), imageView: toolbarActivity.getPreviewImageView()),\n               let storageManager = containerActivity?.getStorageManager() {\n                let task = ThumbnailsCacheManager.ResizedImageGenerationTask(\n                    fragment: self,\n                    imageView: toolbarActivity.getPreviewImageView(),\n                    container: toolbarActivity.getPreviewImageContainer(),\n                    storageManager: storageManager,\n                    connectivityService: connectivityService,\n                    user: storageManager.getUser(),\n                    backgroundColor: UIColor(named: \"background_color_inverse\") ?? UIColor.clear\n                )\n\n                if resizedImage == nil {\n                    resizedImage = thumbnail\n                }\n\n                let asyncDrawable = ThumbnailsCacheManager.AsyncResizedImageDrawable(\n                    resources: MainApp.getAppContext().resources,\n                    image: resizedImage!,\n                    task: task\n                )\n\n                toolbarActivity.setPreviewImageDrawable(drawable: asyncDrawable)\n                previewLoaded = true\n                task.execute(file: getFile())\n            }\n        }\n    } else {\n        previewLoaded = false\n    }\n}\n```"
    },
    {
        "method_name": "setButtonsForTransferring",
        "method_code": "private void setButtonsForTransferring() {\n        if (!isEmpty()) {\n            // show the progress bar for the transfer\n            binding.progressBlock.setVisibility(View.VISIBLE);\n            binding.progressText.setVisibility(View.VISIBLE);\n            if (FileDownloadHelper.Companion.instance().isDownloading(user, getFile())) {\n                binding.progressText.setText(R.string.downloader_download_in_progress_ticker);\n            } else {\n                if (FileUploadHelper.Companion.instance().isUploading(user, getFile())) {\n                    binding.progressText.setText(R.string.uploader_upload_in_progress_ticker);\n                }\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setButtonsForTransferring from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: setButtonsForTransferring\n\n        Method Code: private void setButtonsForTransferring() {\n        if (!isEmpty()) {\n            // show the progress bar for the transfer\n            binding.progressBlock.setVisibility(View.VISIBLE);\n            binding.progressText.setVisibility(View.VISIBLE);\n            if (FileDownloadHelper.Companion.instance().isDownloading(user, getFile())) {\n                binding.progressText.setText(R.string.downloader_download_in_progress_ticker);\n            } else {\n                if (FileUploadHelper.Companion.instance().isUploading(user, getFile())) {\n                    binding.progressText.setText(R.string.uploader_upload_in_progress_ticker);\n                }\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setButtonsForTransferring() {\n    if !isEmpty() {\n        // show the progress bar for the transfer\n        binding.progressBlock.isHidden = false\n        binding.progressText.isHidden = false\n        if FileDownloadHelper.instance().isDownloading(user, getFile()) {\n            binding.progressText.text = NSLocalizedString(\"downloader_download_in_progress_ticker\", comment: \"\")\n        } else {\n            if FileUploadHelper.instance().isUploading(user, getFile()) {\n                binding.progressText.text = NSLocalizedString(\"uploader_upload_in_progress_ticker\", comment: \"\")\n            }\n        }\n    }\n}\n```"
    },
    {
        "method_name": "setButtonsForDown",
        "method_code": "private void setButtonsForDown() {\n        if (!isEmpty()) {\n            // hides the progress bar\n            binding.progressBlock.setVisibility(View.GONE);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setButtonsForDown from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: setButtonsForDown\n\n        Method Code: private void setButtonsForDown() {\n        if (!isEmpty()) {\n            // hides the progress bar\n            binding.progressBlock.setVisibility(View.GONE);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setButtonsForDown() {\n    if !isEmpty() {\n        // hides the progress bar\n        binding.progressBlock.isHidden = true\n    }\n}\n```"
    },
    {
        "method_name": "setButtonsForRemote",
        "method_code": "private void setButtonsForRemote() {\n        if (!isEmpty()) {\n            // hides the progress bar\n            binding.progressBlock.setVisibility(View.GONE);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setButtonsForRemote from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: setButtonsForRemote\n\n        Method Code: private void setButtonsForRemote() {\n        if (!isEmpty()) {\n            // hides the progress bar\n            binding.progressBlock.setVisibility(View.GONE);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setButtonsForRemote() {\n    if !isEmpty() {\n        // hides the progress bar\n        binding.progressBlock.isHidden = true\n    }\n}\n```"
    },
    {
        "method_name": "listenForTransferProgress",
        "method_code": "public void listenForTransferProgress() {\n        if (progressListener != null) {\n            if (containerActivity.getFileDownloadProgressListener() != null) {\n                containerActivity.getFileDownloadProgressListener().\n                    addDataTransferProgressListener(progressListener, getFile());\n            }\n\n            if (containerActivity.getFileUploaderHelper() != null) {\n                OCFile file = getFile();\n                if (user == null || file == null) {\n                    return;\n                }\n\n                String targetKey = FileUploadHelper.Companion.buildRemoteName(user.getAccountName(), file.getRemotePath());\n                containerActivity.getFileUploaderHelper().addUploadTransferProgressListener(progressListener, targetKey);\n            }\n        } else {\n            Log_OC.d(TAG, \"progressListener == null\");\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled listenForTransferProgress from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: listenForTransferProgress\n\n        Method Code: public void listenForTransferProgress() {\n        if (progressListener != null) {\n            if (containerActivity.getFileDownloadProgressListener() != null) {\n                containerActivity.getFileDownloadProgressListener().\n                    addDataTransferProgressListener(progressListener, getFile());\n            }\n\n            if (containerActivity.getFileUploaderHelper() != null) {\n                OCFile file = getFile();\n                if (user == null || file == null) {\n                    return;\n                }\n\n                String targetKey = FileUploadHelper.Companion.buildRemoteName(user.getAccountName(), file.getRemotePath());\n                containerActivity.getFileUploaderHelper().addUploadTransferProgressListener(progressListener, targetKey);\n            }\n        } else {\n            Log_OC.d(TAG, \"progressListener == null\");\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc listenForTransferProgress() {\n    if let progressListener = progressListener {\n        if let downloadProgressListener = containerActivity.getFileDownloadProgressListener() {\n            downloadProgressListener.addDataTransferProgressListener(progressListener, getFile())\n        }\n        \n        if let uploaderHelper = containerActivity.getFileUploaderHelper() {\n            guard let file = getFile(), let user = user else {\n                return\n            }\n            \n            let targetKey = FileUploadHelper.buildRemoteName(user.getAccountName(), file.getRemotePath())\n            uploaderHelper.addUploadTransferProgressListener(progressListener, targetKey)\n        }\n    } else {\n        Log_OC.d(TAG, \"progressListener == null\")\n    }\n}\n```"
    },
    {
        "method_name": "leaveTransferProgress",
        "method_code": "private void leaveTransferProgress() {\n        if (progressListener != null) {\n            if (containerActivity.getFileDownloadProgressListener() != null) {\n                containerActivity.getFileDownloadProgressListener().\n                    removeDataTransferProgressListener(progressListener, getFile());\n            }\n            if (containerActivity.getFileUploaderHelper() != null) {\n                OCFile file = getFile();\n\n                if (user == null || file == null) {\n                    return;\n                }\n\n                String targetKey = FileUploadHelper.Companion.buildRemoteName(user.getAccountName(), file.getRemotePath());\n                containerActivity.getFileUploaderHelper().removeUploadTransferProgressListener(progressListener, targetKey);\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled leaveTransferProgress from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: leaveTransferProgress\n\n        Method Code: private void leaveTransferProgress() {\n        if (progressListener != null) {\n            if (containerActivity.getFileDownloadProgressListener() != null) {\n                containerActivity.getFileDownloadProgressListener().\n                    removeDataTransferProgressListener(progressListener, getFile());\n            }\n            if (containerActivity.getFileUploaderHelper() != null) {\n                OCFile file = getFile();\n\n                if (user == null || file == null) {\n                    return;\n                }\n\n                String targetKey = FileUploadHelper.Companion.buildRemoteName(user.getAccountName(), file.getRemotePath());\n                containerActivity.getFileUploaderHelper().removeUploadTransferProgressListener(progressListener, targetKey);\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func leaveTransferProgress() {\n    if let progressListener = progressListener {\n        if let fileDownloadProgressListener = containerActivity.getFileDownloadProgressListener() {\n            fileDownloadProgressListener.removeDataTransferProgressListener(progressListener, getFile())\n        }\n        if let fileUploaderHelper = containerActivity.getFileUploaderHelper() {\n            guard let file = getFile(), let user = user else {\n                return\n            }\n            let targetKey = FileUploadHelper.buildRemoteName(user.getAccountName(), file.getRemotePath())\n            fileUploaderHelper.removeUploadTransferProgressListener(progressListener, targetKey)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "showEmptyContent",
        "method_code": "private void showEmptyContent() {\n        binding.emptyList.emptyListView.setVisibility(View.VISIBLE);\n        binding.detailContainer.setVisibility(View.GONE);\n\n        binding.emptyList.emptyListViewHeadline.setText(R.string.file_details_no_content);\n\n        binding.emptyList.emptyListIcon.setImageResource(R.drawable.ic_list_empty_error);\n        binding.emptyList.emptyListIcon.setVisibility(View.VISIBLE);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showEmptyContent from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: showEmptyContent\n\n        Method Code: private void showEmptyContent() {\n        binding.emptyList.emptyListView.setVisibility(View.VISIBLE);\n        binding.detailContainer.setVisibility(View.GONE);\n\n        binding.emptyList.emptyListViewHeadline.setText(R.string.file_details_no_content);\n\n        binding.emptyList.emptyListIcon.setImageResource(R.drawable.ic_list_empty_error);\n        binding.emptyList.emptyListIcon.setVisibility(View.VISIBLE);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func showEmptyContent() {\n    binding.emptyList.emptyListView.isHidden = false\n    binding.detailContainer.isHidden = true\n\n    binding.emptyList.emptyListViewHeadline.text = NSLocalizedString(\"file_details_no_content\", comment: \"\")\n\n    binding.emptyList.emptyListIcon.image = UIImage(named: \"ic_list_empty_error\")\n    binding.emptyList.emptyListIcon.isHidden = false\n}\n```"
    },
    {
        "method_name": "initiateSharingProcess",
        "method_code": "public void initiateSharingProcess(String shareeName,\n                                       ShareType shareType,\n                                       boolean secureShare) {\n        requireActivity().getSupportFragmentManager().beginTransaction().add(R.id.sharing_frame_container,\n                                                                             FileDetailsSharingProcessFragment.newInstance(getFile(),\n                                                                                                                           shareeName,\n                                                                                                                           shareType,\n                                                                                                                           secureShare),\n                                                                             FileDetailsSharingProcessFragment.TAG)\n            .commit();\n\n        showHideFragmentView(true);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled initiateSharingProcess from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: initiateSharingProcess\n\n        Method Code: public void initiateSharingProcess(String shareeName,\n                                       ShareType shareType,\n                                       boolean secureShare) {\n        requireActivity().getSupportFragmentManager().beginTransaction().add(R.id.sharing_frame_container,\n                                                                             FileDetailsSharingProcessFragment.newInstance(getFile(),\n                                                                                                                           shareeName,\n                                                                                                                           shareType,\n                                                                                                                           secureShare),\n                                                                             FileDetailsSharingProcessFragment.TAG)\n            .commit();\n\n        showHideFragmentView(true);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc initiateSharingProcess(shareeName: String, shareType: ShareType, secureShare: Bool) {\n    guard let activity = self.activity else { return }\n    let fragment = FileDetailsSharingProcessFragment.newInstance(file: getFile(), shareeName: shareeName, shareType: shareType, secureShare: secureShare)\n    activity.supportFragmentManager.beginTransaction().add(R.id.sharing_frame_container, fragment, FileDetailsSharingProcessFragment.TAG).commit()\n    \n    showHideFragmentView(true)\n}\n```"
    },
    {
        "method_name": "showHideFragmentView",
        "method_code": "public void showHideFragmentView(boolean isFragmentReplaced) {\n        binding.tabLayout.setVisibility(isFragmentReplaced ? View.GONE : View.VISIBLE);\n        binding.pager.setVisibility(isFragmentReplaced ? View.GONE : View.VISIBLE);\n        binding.sharingFrameContainer.setVisibility(isFragmentReplaced ? View.VISIBLE : View.GONE);\n        FloatingActionButton mFabMain = requireActivity().findViewById(R.id.fab_main);\n        if (isFragmentReplaced) {\n            mFabMain.hide();\n        } else {\n            mFabMain.show();\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showHideFragmentView from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: showHideFragmentView\n\n        Method Code: public void showHideFragmentView(boolean isFragmentReplaced) {\n        binding.tabLayout.setVisibility(isFragmentReplaced ? View.GONE : View.VISIBLE);\n        binding.pager.setVisibility(isFragmentReplaced ? View.GONE : View.VISIBLE);\n        binding.sharingFrameContainer.setVisibility(isFragmentReplaced ? View.VISIBLE : View.GONE);\n        FloatingActionButton mFabMain = requireActivity().findViewById(R.id.fab_main);\n        if (isFragmentReplaced) {\n            mFabMain.hide();\n        } else {\n            mFabMain.show();\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc showHideFragmentView(isFragmentReplaced: Bool) {\n    binding.tabLayout.isHidden = isFragmentReplaced\n    binding.pager.isHidden = isFragmentReplaced\n    binding.sharingFrameContainer.isHidden = !isFragmentReplaced\n    if let mFabMain = self.view?.viewWithTag(100) as? UIButton { // Assuming the FloatingActionButton is tagged with 100\n        if isFragmentReplaced {\n            mFabMain.isHidden = true\n        } else {\n            mFabMain.isHidden = false\n        }\n    }\n}\n```"
    },
    {
        "method_name": "editExistingShare",
        "method_code": "public void editExistingShare(OCShare share, int screenTypePermission, boolean isReshareShown,\n                                  boolean isExpiryDateShown) {\n        requireActivity().getSupportFragmentManager().beginTransaction().add(R.id.sharing_frame_container,\n                                                                             FileDetailsSharingProcessFragment.newInstance(share, screenTypePermission, isReshareShown,\n                                                                                                                           isExpiryDateShown),\n                                                                             FileDetailsSharingProcessFragment.TAG)\n            .commit();\n        showHideFragmentView(true);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled editExistingShare from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: editExistingShare\n\n        Method Code: public void editExistingShare(OCShare share, int screenTypePermission, boolean isReshareShown,\n                                  boolean isExpiryDateShown) {\n        requireActivity().getSupportFragmentManager().beginTransaction().add(R.id.sharing_frame_container,\n                                                                             FileDetailsSharingProcessFragment.newInstance(share, screenTypePermission, isReshareShown,\n                                                                                                                           isExpiryDateShown),\n                                                                             FileDetailsSharingProcessFragment.TAG)\n            .commit();\n        showHideFragmentView(true);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc editExistingShare(share: OCShare, screenTypePermission: Int, isReshareShown: Bool, isExpiryDateShown: Bool) {\n    requireActivity().supportFragmentManager.beginTransaction().add(R.id.sharing_frame_container,\n                                                                    FileDetailsSharingProcessFragment.newInstance(share: share, screenTypePermission: screenTypePermission, isReshareShown: isReshareShown, isExpiryDateShown: isExpiryDateShown),\n                                                                    FileDetailsSharingProcessFragment.TAG)\n        .commit()\n    showHideFragmentView(true)\n}\n```"
    },
    {
        "method_name": "onMessageEvent",
        "method_code": "@Subscribe(threadMode = ThreadMode.BACKGROUND)\n    public void onMessageEvent(FavoriteEvent event) {\n        try {\n            User user = accountManager.getUser();\n            OwnCloudClient client = clientFactory.create(user);\n\n            ToggleFavoriteRemoteOperation toggleFavoriteOperation = new ToggleFavoriteRemoteOperation(\n                event.getShouldFavorite(), event.getRemotePath());\n            RemoteOperationResult remoteOperationResult = toggleFavoriteOperation.execute(client);\n\n            if (remoteOperationResult.isSuccess()) {\n                getFile().setFavorite(event.getShouldFavorite());\n                OCFile file = storageManager.getFileByEncryptedRemotePath(event.getRemotePath());\n                file.setFavorite(event.getShouldFavorite());\n                storageManager.saveFile(file);\n            }\n\n        } catch (ClientFactory.CreationException e) {\n            Log_OC.e(TAG, \"Error processing event\", e);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onMessageEvent from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: onMessageEvent\n\n        Method Code: @Subscribe(threadMode = ThreadMode.BACKGROUND)\n    public void onMessageEvent(FavoriteEvent event) {\n        try {\n            User user = accountManager.getUser();\n            OwnCloudClient client = clientFactory.create(user);\n\n            ToggleFavoriteRemoteOperation toggleFavoriteOperation = new ToggleFavoriteRemoteOperation(\n                event.getShouldFavorite(), event.getRemotePath());\n            RemoteOperationResult remoteOperationResult = toggleFavoriteOperation.execute(client);\n\n            if (remoteOperationResult.isSuccess()) {\n                getFile().setFavorite(event.getShouldFavorite());\n                OCFile file = storageManager.getFileByEncryptedRemotePath(event.getRemotePath());\n                file.setFavorite(event.getShouldFavorite());\n                storageManager.saveFile(file);\n            }\n\n        } catch (ClientFactory.CreationException e) {\n            Log_OC.e(TAG, \"Error processing event\", e);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\n@objc func onMessageEvent(_ event: FavoriteEvent) {\n    DispatchQueue.global(qos: .background).async {\n        do {\n            let user = try accountManager.getUser()\n            let client = try clientFactory.create(user: user)\n\n            let toggleFavoriteOperation = ToggleFavoriteRemoteOperation(\n                shouldFavorite: event.shouldFavorite, remotePath: event.remotePath)\n            let remoteOperationResult = toggleFavoriteOperation.execute(client: client)\n\n            if remoteOperationResult.isSuccess {\n                self.getFile().setFavorite(event.shouldFavorite)\n                if let file = storageManager.getFileByEncryptedRemotePath(event.remotePath) {\n                    file.setFavorite(event.shouldFavorite)\n                    storageManager.saveFile(file)\n                }\n            }\n\n        } catch let error as ClientFactory.CreationException {\n            Log_OC.e(TAG, \"Error processing event\", error)\n        } catch {\n            Log_OC.e(TAG, \"Unexpected error\", error)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "showSharingTab",
        "method_code": "private boolean showSharingTab() {\n         if (!MDMConfig.INSTANCE.shareViaLink(requireContext()) && !MDMConfig.INSTANCE.shareViaUser(requireContext())) {\n            return false;\n        }\n\n        if (getFile().isEncrypted()) {\n            if (parentFolder == null) {\n                parentFolder = storageManager.getFileById(getFile().getParentId());\n            }\n            if (EncryptionUtils.supportsSecureFiledrop(getFile(), user) && !parentFolder.isEncrypted()) {\n                return true;\n            } else {\n                // sharing not allowed for encrypted files, thus only show first tab (activities)\n                // sharing not allowed for encrypted subfolders\n                return false;\n            }\n        } else {\n            // unencrypted files/folders\n            return true;\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showSharingTab from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: showSharingTab\n\n        Method Code: private boolean showSharingTab() {\n         if (!MDMConfig.INSTANCE.shareViaLink(requireContext()) && !MDMConfig.INSTANCE.shareViaUser(requireContext())) {\n            return false;\n        }\n\n        if (getFile().isEncrypted()) {\n            if (parentFolder == null) {\n                parentFolder = storageManager.getFileById(getFile().getParentId());\n            }\n            if (EncryptionUtils.supportsSecureFiledrop(getFile(), user) && !parentFolder.isEncrypted()) {\n                return true;\n            } else {\n                // sharing not allowed for encrypted files, thus only show first tab (activities)\n                // sharing not allowed for encrypted subfolders\n                return false;\n            }\n        } else {\n            // unencrypted files/folders\n            return true;\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func showSharingTab() -> Bool {\n    if !MDMConfig.INSTANCE.shareViaLink(requireContext()) && !MDMConfig.INSTANCE.shareViaUser(requireContext()) {\n        return false\n    }\n\n    if getFile().isEncrypted() {\n        if parentFolder == nil {\n            parentFolder = storageManager.getFileById(getFile().getParentId())\n        }\n        if EncryptionUtils.supportsSecureFiledrop(getFile(), user) && !(parentFolder?.isEncrypted() ?? true) {\n            return true\n        } else {\n            return false\n        }\n    } else {\n        return true\n    }\n}\n```"
    },
    {
        "method_name": "onTransferProgress",
        "method_code": "@Override\n        public void onTransferProgress(long progressRate, long totalTransferredSoFar,\n                                       long totalToTransfer, String filename) {\n            int percent = (int) (100.0 * ((double) totalTransferredSoFar) / ((double) totalToTransfer));\n            if (percent != lastPercent) {\n                ProgressBar pb = progressBarReference.get();\n                if (pb != null) {\n                    pb.setProgress(percent);\n                    pb.postInvalidate();\n                }\n            }\n            lastPercent = percent;\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled onTransferProgress from FileDetailFragment.java into Swift.\n\n        Input:\n\n        Method Name: onTransferProgress\n\n        Method Code: @Override\n        public void onTransferProgress(long progressRate, long totalTransferredSoFar,\n                                       long totalToTransfer, String filename) {\n            int percent = (int) (100.0 * ((double) totalTransferredSoFar) / ((double) totalToTransfer));\n            if (percent != lastPercent) {\n                ProgressBar pb = progressBarReference.get();\n                if (pb != null) {\n                    pb.setProgress(percent);\n                    pb.postInvalidate();\n                }\n            }\n            lastPercent = percent;\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onTransferProgress(progressRate: Int64, totalTransferredSoFar: Int64, totalToTransfer: Int64, filename: String) {\n    let percent = Int(100.0 * (Double(totalTransferredSoFar) / Double(totalToTransfer)))\n    if percent != lastPercent {\n        if let pb = progressBarReference {\n            pb.progress = Float(percent) / 100.0\n            pb.setNeedsDisplay()\n        }\n    }\n    lastPercent = percent\n}\n```"
    }
]