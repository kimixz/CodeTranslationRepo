[
    {
        "method_name": "startActivity",
        "method_code": "public static void startActivity(Context context) {\n        Intent intent = new Intent(context, ContactsPreferenceActivity.class);\n        context.startActivity(intent);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled startActivity from ContactsPreferenceActivity.java into Swift.\n\n        Input:\n\n        Method Name: startActivity\n\n        Method Code: public static void startActivity(Context context) {\n        Intent intent = new Intent(context, ContactsPreferenceActivity.class);\n        context.startActivity(intent);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func startActivity(context: UIViewController) {\n    let storyboard = UIStoryboard(name: \"Main\", bundle: nil)\n    if let viewController = storyboard.instantiateViewController(withIdentifier: \"ContactsPreferenceActivity\") as? ContactsPreferenceActivity {\n        context.present(viewController, animated: true, completion: nil)\n    }\n}\n```"
    },
    {
        "method_name": "startActivityWithContactsFile",
        "method_code": "public static void startActivityWithContactsFile(Context context, User user, OCFile file) {\n        Intent intent = new Intent(context, ContactsPreferenceActivity.class);\n        intent.putExtra(EXTRA_FILE, file);\n        intent.putExtra(EXTRA_USER, user);\n        context.startActivity(intent);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled startActivityWithContactsFile from ContactsPreferenceActivity.java into Swift.\n\n        Input:\n\n        Method Name: startActivityWithContactsFile\n\n        Method Code: public static void startActivityWithContactsFile(Context context, User user, OCFile file) {\n        Intent intent = new Intent(context, ContactsPreferenceActivity.class);\n        intent.putExtra(EXTRA_FILE, file);\n        intent.putExtra(EXTRA_USER, user);\n        context.startActivity(intent);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func startActivityWithContactsFile(context: Context, user: User, file: OCFile) {\n    let intent = Intent(context: context, ContactsPreferenceActivity.self)\n    intent.putExtra(EXTRA_FILE, file)\n    intent.putExtra(EXTRA_USER, user)\n    context.startActivity(intent)\n}\n```"
    },
    {
        "method_name": "startActivityWithoutSidebar",
        "method_code": "public static void startActivityWithoutSidebar(Context context) {\n        Intent intent = new Intent(context, ContactsPreferenceActivity.class);\n        intent.putExtra(EXTRA_SHOW_SIDEBAR, false);\n        context.startActivity(intent);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled startActivityWithoutSidebar from ContactsPreferenceActivity.java into Swift.\n\n        Input:\n\n        Method Name: startActivityWithoutSidebar\n\n        Method Code: public static void startActivityWithoutSidebar(Context context) {\n        Intent intent = new Intent(context, ContactsPreferenceActivity.class);\n        intent.putExtra(EXTRA_SHOW_SIDEBAR, false);\n        context.startActivity(intent);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func startActivityWithoutSidebar(context: Context) {\n    let intent = Intent(context: context, cls: ContactsPreferenceActivity.self)\n    intent.putExtra(name: EXTRA_SHOW_SIDEBAR, value: false)\n    context.startActivity(intent)\n}\n```"
    },
    {
        "method_name": "onCreate",
        "method_code": "@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.contacts_preference);\n\n        // setup toolbar\n        setupToolbar();\n\n        // setup drawer\n        //setupDrawer(R.id.nav_contacts); // TODO needed?\n\n        // show sidebar?\n        boolean showSidebar = getIntent().getBooleanExtra(EXTRA_SHOW_SIDEBAR, true);\n        if (!showSidebar) {\n            setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED);\n\n            if (getSupportActionBar() != null) {\n                getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n            }\n\n            if (mDrawerToggle != null) {\n                mDrawerToggle.setDrawerIndicatorEnabled(false);\n            }\n        }\n\n        Intent intent = getIntent();\n        if (savedInstanceState == null) {\n            FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n            if (intent == null ||\n                IntentExtensionsKt.getParcelableArgument(intent, EXTRA_FILE, OCFile.class) == null ||\n                IntentExtensionsKt.getParcelableArgument(intent, EXTRA_USER, User.class) == null) {\n                BackupFragment fragment = BackupFragment.create(showSidebar);\n                transaction.add(R.id.frame_container, fragment);\n            } else {\n                OCFile file = IntentExtensionsKt.getParcelableArgument(intent, EXTRA_FILE, OCFile.class);\n                User user =  IntentExtensionsKt.getParcelableArgument(intent, EXTRA_USER, User.class);\n                BackupListFragment contactListFragment = BackupListFragment.newInstance(file, user);\n                transaction.add(R.id.frame_container, contactListFragment);\n            }\n            transaction.commit();\n        }\n\n        getOnBackPressedDispatcher().addCallback(this, onBackPressedCallback);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreate from ContactsPreferenceActivity.java into Swift.\n\n        Input:\n\n        Method Name: onCreate\n\n        Method Code: @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.contacts_preference);\n\n        // setup toolbar\n        setupToolbar();\n\n        // setup drawer\n        //setupDrawer(R.id.nav_contacts); // TODO needed?\n\n        // show sidebar?\n        boolean showSidebar = getIntent().getBooleanExtra(EXTRA_SHOW_SIDEBAR, true);\n        if (!showSidebar) {\n            setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED);\n\n            if (getSupportActionBar() != null) {\n                getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n            }\n\n            if (mDrawerToggle != null) {\n                mDrawerToggle.setDrawerIndicatorEnabled(false);\n            }\n        }\n\n        Intent intent = getIntent();\n        if (savedInstanceState == null) {\n            FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n            if (intent == null ||\n                IntentExtensionsKt.getParcelableArgument(intent, EXTRA_FILE, OCFile.class) == null ||\n                IntentExtensionsKt.getParcelableArgument(intent, EXTRA_USER, User.class) == null) {\n                BackupFragment fragment = BackupFragment.create(showSidebar);\n                transaction.add(R.id.frame_container, fragment);\n            } else {\n                OCFile file = IntentExtensionsKt.getParcelableArgument(intent, EXTRA_FILE, OCFile.class);\n                User user =  IntentExtensionsKt.getParcelableArgument(intent, EXTRA_USER, User.class);\n                BackupListFragment contactListFragment = BackupListFragment.newInstance(file, user);\n                transaction.add(R.id.frame_container, contactListFragment);\n            }\n            transaction.commit();\n        }\n\n        getOnBackPressedDispatcher().addCallback(this, onBackPressedCallback);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    view = UIView() // Assuming a programmatic view setup, replace with appropriate setup if using Storyboard/XIB\n    setupToolbar()\n\n    let showSidebar = intent?.getBooleanExtra(EXTRA_SHOW_SIDEBAR, defaultValue: true) ?? true\n    if !showSidebar {\n        setDrawerLockMode(.lockedClosed)\n\n        if let navigationController = navigationController {\n            navigationController.navigationItem.setHidesBackButton(false, animated: true)\n        }\n\n        if let drawerToggle = mDrawerToggle {\n            drawerToggle.setDrawerIndicatorEnabled(false)\n        }\n    }\n\n    if savedInstanceState == nil {\n        let transaction = supportFragmentManager.beginTransaction()\n        if intent == nil ||\n            intent?.getParcelableArgument(EXTRA_FILE, OCFile.self) == nil ||\n            intent?.getParcelableArgument(EXTRA_USER, User.self) == nil {\n            let fragment = BackupFragment.create(showSidebar: showSidebar)\n            transaction.add(R.id.frame_container, fragment)\n        } else {\n            let file = intent?.getParcelableArgument(EXTRA_FILE, OCFile.self)\n            let user = intent?.getParcelableArgument(EXTRA_USER, User.self)\n            let contactListFragment = BackupListFragment.newInstance(file: file, user: user)\n            transaction.add(R.id.frame_container, contactListFragment)\n        }\n        transaction.commit()\n    }\n\n    onBackPressedDispatcher.addCallback(self, onBackPressedCallback)\n}\n```"
    },
    {
        "method_name": "showDetails",
        "method_code": "@Override\n    public void showDetails(OCFile file) {\n        // not needed\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showDetails from ContactsPreferenceActivity.java into Swift.\n\n        Input:\n\n        Method Name: showDetails\n\n        Method Code: @Override\n    public void showDetails(OCFile file) {\n        // not needed\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func showDetails(file: OCFile) {\n    // not needed\n}\n```"
    },
    {
        "method_name": "showDetails",
        "method_code": "@Override\n    public void showDetails(OCFile file, int activeTab) {\n        // not needed\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showDetails from ContactsPreferenceActivity.java into Swift.\n\n        Input:\n\n        Method Name: showDetails\n\n        Method Code: @Override\n    public void showDetails(OCFile file, int activeTab) {\n        // not needed\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func showDetails(file: OCFile, activeTab: Int) {\n    // not needed\n}\n```"
    },
    {
        "method_name": "onBrowsedDownTo",
        "method_code": "@Override\n    public void onBrowsedDownTo(OCFile folder) {\n        // not needed\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onBrowsedDownTo from ContactsPreferenceActivity.java into Swift.\n\n        Input:\n\n        Method Name: onBrowsedDownTo\n\n        Method Code: @Override\n    public void onBrowsedDownTo(OCFile folder) {\n        // not needed\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onBrowsedDownTo(folder: OCFile) {\n    // not needed\n}\n```"
    },
    {
        "method_name": "onTransferStateChanged",
        "method_code": "@Override\n    public void onTransferStateChanged(OCFile file, boolean downloading, boolean uploading) {\n        // not needed\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onTransferStateChanged from ContactsPreferenceActivity.java into Swift.\n\n        Input:\n\n        Method Name: onTransferStateChanged\n\n        Method Code: @Override\n    public void onTransferStateChanged(OCFile file, boolean downloading, boolean uploading) {\n        // not needed\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onTransferStateChanged(file: OCFile, downloading: Bool, uploading: Bool) {\n    // not needed\n}\n```"
    },
    {
        "method_name": "handleOnBackPressed",
        "method_code": "@Override\n        public void handleOnBackPressed() {\n            if (getSupportFragmentManager().findFragmentByTag(BackupListFragment.TAG) != null) {\n                getSupportFragmentManager().popBackStack(BACKUP_TO_LIST, FragmentManager.POP_BACK_STACK_INCLUSIVE);\n            } else {\n                finish();\n            }\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled handleOnBackPressed from ContactsPreferenceActivity.java into Swift.\n\n        Input:\n\n        Method Name: handleOnBackPressed\n\n        Method Code: @Override\n        public void handleOnBackPressed() {\n            if (getSupportFragmentManager().findFragmentByTag(BackupListFragment.TAG) != null) {\n                getSupportFragmentManager().popBackStack(BACKUP_TO_LIST, FragmentManager.POP_BACK_STACK_INCLUSIVE);\n            } else {\n                finish();\n            }\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func handleOnBackPressed() {\n    if navigationController?.viewControllers.contains(where: { $0 is BackupListFragment }) == true {\n        navigationController?.popToViewController(ofClass: BackupListFragment.self, animated: true)\n    } else {\n        self.dismiss(animated: true, completion: nil)\n    }\n}\n```"
    }
]