[
    {
        "method_name": "setUp",
        "method_code": "@Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n        MockitoAnnotations.initMocks(activityListAdapter);\n        activityListAdapter.values = new ArrayList<>();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setUp from ActivityListAdapterTest.java into Swift.\n\n        Input:\n\n        Method Name: setUp\n\n        Method Code: @Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n        MockitoAnnotations.initMocks(activityListAdapter);\n        activityListAdapter.values = new ArrayList<>();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport XCTest\nimport Mockito\n\nclass ActivityListAdapterTest: XCTestCase {\n    var activityListAdapter: ActivityListAdapter!\n\n    override func setUp() {\n        super.setUp()\n        MockitoAnnotations.initMocks(self)\n        MockitoAnnotations.initMocks(activityListAdapter)\n        activityListAdapter.values = []\n    }\n}\n```"
    },
    {
        "method_name": "isHeader__ObjectIsHeader_ReturnTrue",
        "method_code": "@Test\n    public void isHeader__ObjectIsHeader_ReturnTrue() {\n        Object header = \"Hello\";\n        Object activity = Mockito.mock(Activity.class);\n\n        Mockito.when(activityListAdapter.isHeader(0)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.getItemViewType(0)).thenCallRealMethod();\n\n        activityListAdapter.values.add(header);\n        activityListAdapter.values.add(activity);\n\n        final boolean result = activityListAdapter.isHeader(0);\n        Assert.assertTrue(result);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled isHeader__ObjectIsHeader_ReturnTrue from ActivityListAdapterTest.java into Swift.\n\n        Input:\n\n        Method Name: isHeader__ObjectIsHeader_ReturnTrue\n\n        Method Code: @Test\n    public void isHeader__ObjectIsHeader_ReturnTrue() {\n        Object header = \"Hello\";\n        Object activity = Mockito.mock(Activity.class);\n\n        Mockito.when(activityListAdapter.isHeader(0)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.getItemViewType(0)).thenCallRealMethod();\n\n        activityListAdapter.values.add(header);\n        activityListAdapter.values.add(activity);\n\n        final boolean result = activityListAdapter.isHeader(0);\n        Assert.assertTrue(result);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc testIsHeader_ObjectIsHeader_ReturnTrue() {\n    let header: Any = \"Hello\"\n    let activity = MockActivity()\n\n    activityListAdapter.values.append(header)\n    activityListAdapter.values.append(activity)\n\n    let result = activityListAdapter.isHeader(0)\n    XCTAssertTrue(result)\n}\n```"
    },
    {
        "method_name": "isHeader__ObjectIsActivity_ReturnFalse",
        "method_code": "@Test\n    public void isHeader__ObjectIsActivity_ReturnFalse() {\n        Object header = \"Hello\";\n        Object activity = Mockito.mock(Activity.class);\n\n        Mockito.when(activityListAdapter.isHeader(1)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.getItemViewType(1)).thenCallRealMethod();\n\n        activityListAdapter.values.add(header);\n        activityListAdapter.values.add(activity);\n        Assert.assertFalse(activityListAdapter.isHeader(1));\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled isHeader__ObjectIsActivity_ReturnFalse from ActivityListAdapterTest.java into Swift.\n\n        Input:\n\n        Method Name: isHeader__ObjectIsActivity_ReturnFalse\n\n        Method Code: @Test\n    public void isHeader__ObjectIsActivity_ReturnFalse() {\n        Object header = \"Hello\";\n        Object activity = Mockito.mock(Activity.class);\n\n        Mockito.when(activityListAdapter.isHeader(1)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.getItemViewType(1)).thenCallRealMethod();\n\n        activityListAdapter.values.add(header);\n        activityListAdapter.values.add(activity);\n        Assert.assertFalse(activityListAdapter.isHeader(1));\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc testIsHeader_ObjectIsActivity_ReturnFalse() {\n    let header: Any = \"Hello\"\n    let activity = MockActivity()\n\n    let activityListAdapter = ActivityListAdapter()\n    activityListAdapter.values.append(header)\n    activityListAdapter.values.append(activity)\n\n    XCTAssertFalse(activityListAdapter.isHeader(1))\n}\n\nclass MockActivity: Activity {\n    // Mock implementation\n}\n\nclass ActivityListAdapter {\n    var values: [Any] = []\n\n    func isHeader(_ index: Int) -> Bool {\n        return getItemViewType(index) == 0\n    }\n\n    func getItemViewType(_ index: Int) -> Int {\n        // Assuming 0 is for header and 1 is for activity\n        return values[index] is String ? 0 : 1\n    }\n}\n```"
    },
    {
        "method_name": "getHeaderPositionForItem__AdapterIsEmpty_ReturnZero",
        "method_code": "@Test\n    public void getHeaderPositionForItem__AdapterIsEmpty_ReturnZero(){\n        Mockito.when(activityListAdapter.isHeader(0)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.getItemViewType(0)).thenCallRealMethod();\n\n        Assert.assertEquals(0,activityListAdapter.getHeaderPositionForItem(0));\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getHeaderPositionForItem__AdapterIsEmpty_ReturnZero from ActivityListAdapterTest.java into Swift.\n\n        Input:\n\n        Method Name: getHeaderPositionForItem__AdapterIsEmpty_ReturnZero\n\n        Method Code: @Test\n    public void getHeaderPositionForItem__AdapterIsEmpty_ReturnZero(){\n        Mockito.when(activityListAdapter.isHeader(0)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.getItemViewType(0)).thenCallRealMethod();\n\n        Assert.assertEquals(0,activityListAdapter.getHeaderPositionForItem(0));\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc testGetHeaderPositionForItem_AdapterIsEmpty_ReturnZero() {\n    Mockito.when(activityListAdapter.isHeader(0)).thenCallRealMethod()\n    Mockito.when(activityListAdapter.getItemViewType(0)).thenCallRealMethod()\n\n    XCTAssertEqual(0, activityListAdapter.getHeaderPositionForItem(0))\n}\n```"
    },
    {
        "method_name": "getHeaderPositionForItem__ItemIsHeader_ReturnCurrentItem",
        "method_code": "@Test\n    public void getHeaderPositionForItem__ItemIsHeader_ReturnCurrentItem() {\n        Object header = \"Hello\";\n        Object activity = Mockito.mock(Activity.class);\n\n        Mockito.when(activityListAdapter.isHeader(0)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.getItemViewType(0)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.isHeader(1)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.getItemViewType(1)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.isHeader(2)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.getItemViewType(2)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.getHeaderPositionForItem(2)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.isHeader(3)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.getItemViewType(3)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.getHeaderPositionForItem(3)).thenCallRealMethod();\n\n\n        activityListAdapter.values.add(header);\n        activityListAdapter.values.add(activity);\n        activityListAdapter.values.add(header);\n        activityListAdapter.values.add(activity);\n\n\n        Assert.assertEquals(2, activityListAdapter.getHeaderPositionForItem(2));\n\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getHeaderPositionForItem__ItemIsHeader_ReturnCurrentItem from ActivityListAdapterTest.java into Swift.\n\n        Input:\n\n        Method Name: getHeaderPositionForItem__ItemIsHeader_ReturnCurrentItem\n\n        Method Code: @Test\n    public void getHeaderPositionForItem__ItemIsHeader_ReturnCurrentItem() {\n        Object header = \"Hello\";\n        Object activity = Mockito.mock(Activity.class);\n\n        Mockito.when(activityListAdapter.isHeader(0)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.getItemViewType(0)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.isHeader(1)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.getItemViewType(1)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.isHeader(2)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.getItemViewType(2)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.getHeaderPositionForItem(2)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.isHeader(3)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.getItemViewType(3)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.getHeaderPositionForItem(3)).thenCallRealMethod();\n\n\n        activityListAdapter.values.add(header);\n        activityListAdapter.values.add(activity);\n        activityListAdapter.values.add(header);\n        activityListAdapter.values.add(activity);\n\n\n        Assert.assertEquals(2, activityListAdapter.getHeaderPositionForItem(2));\n\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc testGetHeaderPositionForItem_ItemIsHeader_ReturnCurrentItem() {\n    let header: Any = \"Hello\"\n    let activity = MockActivity()\n\n    Mockito.when(activityListAdapter.isHeader(0)).thenCallRealMethod()\n    Mockito.when(activityListAdapter.getItemViewType(0)).thenCallRealMethod()\n    Mockito.when(activityListAdapter.isHeader(1)).thenCallRealMethod()\n    Mockito.when(activityListAdapter.getItemViewType(1)).thenCallRealMethod()\n    Mockito.when(activityListAdapter.isHeader(2)).thenCallRealMethod()\n    Mockito.when(activityListAdapter.getItemViewType(2)).thenCallRealMethod()\n    Mockito.when(activityListAdapter.getHeaderPositionForItem(2)).thenCallRealMethod()\n    Mockito.when(activityListAdapter.isHeader(3)).thenCallRealMethod()\n    Mockito.when(activityListAdapter.getItemViewType(3)).thenCallRealMethod()\n    Mockito.when(activityListAdapter.getHeaderPositionForItem(3)).thenCallRealMethod()\n\n    activityListAdapter.values.append(header)\n    activityListAdapter.values.append(activity)\n    activityListAdapter.values.append(header)\n    activityListAdapter.values.append(activity)\n\n    XCTAssertEqual(2, activityListAdapter.getHeaderPositionForItem(2))\n}\n```"
    },
    {
        "method_name": "getHeaderPositionForItem__ItemIsActivity_ReturnNextHeader",
        "method_code": "@Test\n    public void getHeaderPositionForItem__ItemIsActivity_ReturnNextHeader() {\n        Object header = \"Hello\";\n        Object activity = Mockito.mock(Activity.class);\n\n        Mockito.when(activityListAdapter.isHeader(0)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.getItemViewType(0)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.getHeaderPositionForItem(0)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.isHeader(1)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.getItemViewType(1)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.getHeaderPositionForItem(1)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.isHeader(2)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.getItemViewType(2)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.getHeaderPositionForItem(2)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.isHeader(3)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.getItemViewType(3)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.getHeaderPositionForItem(3)).thenCallRealMethod();\n\n        activityListAdapter.values.add(header);\n        activityListAdapter.values.add(activity);\n        activityListAdapter.values.add(header);\n        activityListAdapter.values.add(activity);\n\n        Assert.assertEquals(2, activityListAdapter.getHeaderPositionForItem(2));\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getHeaderPositionForItem__ItemIsActivity_ReturnNextHeader from ActivityListAdapterTest.java into Swift.\n\n        Input:\n\n        Method Name: getHeaderPositionForItem__ItemIsActivity_ReturnNextHeader\n\n        Method Code: @Test\n    public void getHeaderPositionForItem__ItemIsActivity_ReturnNextHeader() {\n        Object header = \"Hello\";\n        Object activity = Mockito.mock(Activity.class);\n\n        Mockito.when(activityListAdapter.isHeader(0)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.getItemViewType(0)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.getHeaderPositionForItem(0)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.isHeader(1)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.getItemViewType(1)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.getHeaderPositionForItem(1)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.isHeader(2)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.getItemViewType(2)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.getHeaderPositionForItem(2)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.isHeader(3)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.getItemViewType(3)).thenCallRealMethod();\n        Mockito.when(activityListAdapter.getHeaderPositionForItem(3)).thenCallRealMethod();\n\n        activityListAdapter.values.add(header);\n        activityListAdapter.values.add(activity);\n        activityListAdapter.values.add(header);\n        activityListAdapter.values.add(activity);\n\n        Assert.assertEquals(2, activityListAdapter.getHeaderPositionForItem(2));\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport XCTest\nimport Mockingbird\n\nclass ActivityListAdapterTest: XCTestCase {\n\n    func testGetHeaderPositionForItem_ItemIsActivity_ReturnNextHeader() {\n        let header: Any = \"Hello\"\n        let activity = mock(Activity.self)\n\n        given(activityListAdapter.isHeader(0)).willReturn(false)\n        given(activityListAdapter.getItemViewType(0)).willReturn(1)\n        given(activityListAdapter.getHeaderPositionForItem(0)).willReturn(0)\n        given(activityListAdapter.isHeader(1)).willReturn(false)\n        given(activityListAdapter.getItemViewType(1)).willReturn(1)\n        given(activityListAdapter.getHeaderPositionForItem(1)).willReturn(0)\n        given(activityListAdapter.isHeader(2)).willReturn(true)\n        given(activityListAdapter.getItemViewType(2)).willReturn(0)\n        given(activityListAdapter.getHeaderPositionForItem(2)).willReturn(2)\n        given(activityListAdapter.isHeader(3)).willReturn(false)\n        given(activityListAdapter.getItemViewType(3)).willReturn(1)\n        given(activityListAdapter.getHeaderPositionForItem(3)).willReturn(2)\n\n        activityListAdapter.values.append(header)\n        activityListAdapter.values.append(activity)\n        activityListAdapter.values.append(header)\n        activityListAdapter.values.append(activity)\n\n        XCTAssertEqual(2, activityListAdapter.getHeaderPositionForItem(2))\n    }\n}\n```"
    }
]