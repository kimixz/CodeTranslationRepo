[
    {
        "method_name": "initOCCapability",
        "method_code": "ivate void initOCCapability() {\n        try {\n            this.capability = CapabilityUtils.getCapability(MainApp.getAppContext());\n        } catch (RuntimeException e) {\n            Log_OC.e(TAG,\"Failed to set OCCapability: Dependencies are not yet ready.\");\n        }\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled initOCCapability from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: initOCCapability\n\n        Method Code: ivate void initOCCapability() {\n        try {\n            this.capability = CapabilityUtils.getCapability(MainApp.getAppContext());\n        } catch (RuntimeException e) {\n            Log_OC.e(TAG,\"Failed to set OCCapability: Dependencies are not yet ready.\");\n        }\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func initOCCapability() {\n    do {\n        self.capability = try CapabilityUtils.getCapability(MainApp.getAppContext())\n    } catch {\n        Log_OC.e(TAG, \"Failed to set OCCapability: Dependencies are not yet ready.\")\n    }\n}\n```"
    },
    {
        "method_name": "storeUpload",
        "method_code": "blic long storeUpload(OCUpload ocUpload) {\n        OCUpload existingUpload = getPendingCurrentOrFailedUpload(ocUpload);\n        if (existingUpload != null) {\n            Log_OC.v(TAG, \"Will update upload in db since \" + ocUpload.getLocalPath() + \" already exists as \" +\n                \"pending, current or failed upload\");\n            long existingId = existingUpload.getUploadId();\n            ocUpload.setUploadId(existingId);\n            updateUpload(ocUpload);\n            return existingId;\n        }\n\n\n        Log_OC.v(TAG, \"Inserting \" + ocUpload.getLocalPath() + \" with status=\" + ocUpload.getUploadStatus());\n\n        ContentValues cv = getContentValues(ocUpload);\n        Uri result = getDB().insert(ProviderTableMeta.CONTENT_URI_UPLOADS, cv);\n\n        Log_OC.d(TAG, \"storeUpload returns with: \" + result + \" for file: \" + ocUpload.getLocalPath());\n        if (result == null) {\n            Log_OC.e(TAG, \"Failed to insert item \" + ocUpload.getLocalPath() + \" into upload db.\");\n            return -1;\n        } else {\n            long new_id = Long.parseLong(result.getPathSegments().get(1));\n            ocUpload.setUploadId(new_id);\n            notifyObserversNow();\n\n            return new_id;\n        }\n\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled storeUpload from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: storeUpload\n\n        Method Code: blic long storeUpload(OCUpload ocUpload) {\n        OCUpload existingUpload = getPendingCurrentOrFailedUpload(ocUpload);\n        if (existingUpload != null) {\n            Log_OC.v(TAG, \"Will update upload in db since \" + ocUpload.getLocalPath() + \" already exists as \" +\n                \"pending, current or failed upload\");\n            long existingId = existingUpload.getUploadId();\n            ocUpload.setUploadId(existingId);\n            updateUpload(ocUpload);\n            return existingId;\n        }\n\n\n        Log_OC.v(TAG, \"Inserting \" + ocUpload.getLocalPath() + \" with status=\" + ocUpload.getUploadStatus());\n\n        ContentValues cv = getContentValues(ocUpload);\n        Uri result = getDB().insert(ProviderTableMeta.CONTENT_URI_UPLOADS, cv);\n\n        Log_OC.d(TAG, \"storeUpload returns with: \" + result + \" for file: \" + ocUpload.getLocalPath());\n        if (result == null) {\n            Log_OC.e(TAG, \"Failed to insert item \" + ocUpload.getLocalPath() + \" into upload db.\");\n            return -1;\n        } else {\n            long new_id = Long.parseLong(result.getPathSegments().get(1));\n            ocUpload.setUploadId(new_id);\n            notifyObserversNow();\n\n            return new_id;\n        }\n\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc storeUpload(_ ocUpload: OCUpload) -> Int64 {\n    if let existingUpload = getPendingCurrentOrFailedUpload(ocUpload) {\n        print(\"Will update upload in db since \\(ocUpload.getLocalPath()) already exists as pending, current or failed upload\")\n        let existingId = existingUpload.getUploadId()\n        ocUpload.setUploadId(existingId)\n        updateUpload(ocUpload)\n        return existingId\n    }\n\n    print(\"Inserting \\(ocUpload.getLocalPath()) with status=\\(ocUpload.getUploadStatus())\")\n\n    let cv = getContentValues(ocUpload)\n    let result = getDB().insert(ProviderTableMeta.CONTENT_URI_UPLOADS, cv)\n\n    print(\"storeUpload returns with: \\(String(describing: result)) for file: \\(ocUpload.getLocalPath())\")\n    if result == nil {\n        print(\"Failed to insert item \\(ocUpload.getLocalPath()) into upload db.\")\n        return -1\n    } else {\n        let newId = Int64(result!.pathComponents[1])!\n        ocUpload.setUploadId(newId)\n        notifyObserversNow()\n\n        return newId\n    }\n}\n```"
    },
    {
        "method_name": "storeUploads",
        "method_code": "blic long[] storeUploads(final List<OCUpload> ocUploads) {\n        Log_OC.v(TAG, \"Inserting \" + ocUploads.size() + \" uploads\");\n        ArrayList<ContentProviderOperation> operations = new ArrayList<>(ocUploads.size());\n        for (OCUpload ocUpload : ocUploads) {\n\n            OCUpload existingUpload = getPendingCurrentOrFailedUpload(ocUpload);\n            if (existingUpload != null) {\n                Log_OC.v(TAG, \"Will update upload in db since \" + ocUpload.getLocalPath() + \" already exists as\" +\n                    \" pending, current or failed upload\");\n                ocUpload.setUploadId(existingUpload.getUploadId());\n                updateUpload(ocUpload);\n                continue;\n            }\n\n            final ContentProviderOperation operation = ContentProviderOperation\n                .newInsert(ProviderTableMeta.CONTENT_URI_UPLOADS)\n                .withValues(getContentValues(ocUpload))\n                .build();\n            operations.add(operation);\n        }\n\n        try {\n            final ContentProviderResult[] contentProviderResults = getDB().applyBatch(MainApp.getAuthority(), operations);\n            final long[] newIds = new long[ocUploads.size()];\n            for (int i = 0; i < contentProviderResults.length; i++) {\n                final ContentProviderResult result = contentProviderResults[i];\n                final long new_id = Long.parseLong(result.uri.getPathSegments().get(1));\n                ocUploads.get(i).setUploadId(new_id);\n                newIds[i] = new_id;\n            }\n            notifyObserversNow();\n            return newIds;\n        } catch (OperationApplicationException | RemoteException e) {\n            Log_OC.e(TAG, \"Error inserting uploads\", e);\n        }\n\n        return null;\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled storeUploads from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: storeUploads\n\n        Method Code: blic long[] storeUploads(final List<OCUpload> ocUploads) {\n        Log_OC.v(TAG, \"Inserting \" + ocUploads.size() + \" uploads\");\n        ArrayList<ContentProviderOperation> operations = new ArrayList<>(ocUploads.size());\n        for (OCUpload ocUpload : ocUploads) {\n\n            OCUpload existingUpload = getPendingCurrentOrFailedUpload(ocUpload);\n            if (existingUpload != null) {\n                Log_OC.v(TAG, \"Will update upload in db since \" + ocUpload.getLocalPath() + \" already exists as\" +\n                    \" pending, current or failed upload\");\n                ocUpload.setUploadId(existingUpload.getUploadId());\n                updateUpload(ocUpload);\n                continue;\n            }\n\n            final ContentProviderOperation operation = ContentProviderOperation\n                .newInsert(ProviderTableMeta.CONTENT_URI_UPLOADS)\n                .withValues(getContentValues(ocUpload))\n                .build();\n            operations.add(operation);\n        }\n\n        try {\n            final ContentProviderResult[] contentProviderResults = getDB().applyBatch(MainApp.getAuthority(), operations);\n            final long[] newIds = new long[ocUploads.size()];\n            for (int i = 0; i < contentProviderResults.length; i++) {\n                final ContentProviderResult result = contentProviderResults[i];\n                final long new_id = Long.parseLong(result.uri.getPathSegments().get(1));\n                ocUploads.get(i).setUploadId(new_id);\n                newIds[i] = new_id;\n            }\n            notifyObserversNow();\n            return newIds;\n        } catch (OperationApplicationException | RemoteException e) {\n            Log_OC.e(TAG, \"Error inserting uploads\", e);\n        }\n\n        return null;\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc storeUploads(_ ocUploads: [OCUpload]) -> [Int64]? {\n    Log_OC.v(TAG, \"Inserting \\(ocUploads.count) uploads\")\n    var operations: [ContentProviderOperation] = []\n\n    for ocUpload in ocUploads {\n        if let existingUpload = getPendingCurrentOrFailedUpload(ocUpload) {\n            Log_OC.v(TAG, \"Will update upload in db since \\(ocUpload.localPath) already exists as pending, current or failed upload\")\n            ocUpload.uploadId = existingUpload.uploadId\n            updateUpload(ocUpload)\n            continue\n        }\n\n        let operation = ContentProviderOperation.newInsert(ProviderTableMeta.CONTENT_URI_UPLOADS)\n            .withValues(getContentValues(ocUpload))\n            .build()\n        operations.append(operation)\n    }\n\n    do {\n        let contentProviderResults = try getDB().applyBatch(MainApp.getAuthority(), operations)\n        var newIds: [Int64] = Array(repeating: 0, count: ocUploads.count)\n        for (i, result) in contentProviderResults.enumerated() {\n            let newId = Int64(result.uri.pathSegments[1])!\n            ocUploads[i].uploadId = newId\n            newIds[i] = newId\n        }\n        notifyObserversNow()\n        return newIds\n    } catch {\n        Log_OC.e(TAG, \"Error inserting uploads\", error)\n    }\n\n    return nil\n}\n```"
    },
    {
        "method_name": "getContentValues",
        "method_code": "onNull\n    private ContentValues getContentValues(OCUpload ocUpload) {\n        ContentValues cv = new ContentValues();\n        cv.put(ProviderTableMeta.UPLOADS_LOCAL_PATH, ocUpload.getLocalPath());\n        cv.put(ProviderTableMeta.UPLOADS_REMOTE_PATH, ocUpload.getRemotePath());\n        cv.put(ProviderTableMeta.UPLOADS_ACCOUNT_NAME, ocUpload.getAccountName());\n        cv.put(ProviderTableMeta.UPLOADS_FILE_SIZE, ocUpload.getFileSize());\n        cv.put(ProviderTableMeta.UPLOADS_STATUS, ocUpload.getUploadStatus().value);\n        cv.put(ProviderTableMeta.UPLOADS_LOCAL_BEHAVIOUR, ocUpload.getLocalAction());\n        cv.put(ProviderTableMeta.UPLOADS_NAME_COLLISION_POLICY, ocUpload.getNameCollisionPolicy().serialize());\n        cv.put(ProviderTableMeta.UPLOADS_IS_CREATE_REMOTE_FOLDER, ocUpload.isCreateRemoteFolder() ? 1 : 0);\n        cv.put(ProviderTableMeta.UPLOADS_LAST_RESULT, ocUpload.getLastResult().getValue());\n        cv.put(ProviderTableMeta.UPLOADS_CREATED_BY, ocUpload.getCreatedBy());\n        cv.put(ProviderTableMeta.UPLOADS_IS_WHILE_CHARGING_ONLY, ocUpload.isWhileChargingOnly() ? 1 : 0);\n        cv.put(ProviderTableMeta.UPLOADS_IS_WIFI_ONLY, ocUpload.isUseWifiOnly() ? 1 : 0);\n        cv.put(ProviderTableMeta.UPLOADS_FOLDER_UNLOCK_TOKEN, ocUpload.getFolderUnlockToken());\n        return cv;\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getContentValues from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: getContentValues\n\n        Method Code: onNull\n    private ContentValues getContentValues(OCUpload ocUpload) {\n        ContentValues cv = new ContentValues();\n        cv.put(ProviderTableMeta.UPLOADS_LOCAL_PATH, ocUpload.getLocalPath());\n        cv.put(ProviderTableMeta.UPLOADS_REMOTE_PATH, ocUpload.getRemotePath());\n        cv.put(ProviderTableMeta.UPLOADS_ACCOUNT_NAME, ocUpload.getAccountName());\n        cv.put(ProviderTableMeta.UPLOADS_FILE_SIZE, ocUpload.getFileSize());\n        cv.put(ProviderTableMeta.UPLOADS_STATUS, ocUpload.getUploadStatus().value);\n        cv.put(ProviderTableMeta.UPLOADS_LOCAL_BEHAVIOUR, ocUpload.getLocalAction());\n        cv.put(ProviderTableMeta.UPLOADS_NAME_COLLISION_POLICY, ocUpload.getNameCollisionPolicy().serialize());\n        cv.put(ProviderTableMeta.UPLOADS_IS_CREATE_REMOTE_FOLDER, ocUpload.isCreateRemoteFolder() ? 1 : 0);\n        cv.put(ProviderTableMeta.UPLOADS_LAST_RESULT, ocUpload.getLastResult().getValue());\n        cv.put(ProviderTableMeta.UPLOADS_CREATED_BY, ocUpload.getCreatedBy());\n        cv.put(ProviderTableMeta.UPLOADS_IS_WHILE_CHARGING_ONLY, ocUpload.isWhileChargingOnly() ? 1 : 0);\n        cv.put(ProviderTableMeta.UPLOADS_IS_WIFI_ONLY, ocUpload.isUseWifiOnly() ? 1 : 0);\n        cv.put(ProviderTableMeta.UPLOADS_FOLDER_UNLOCK_TOKEN, ocUpload.getFolderUnlockToken());\n        return cv;\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getContentValues(ocUpload: OCUpload) -> [String: Any] {\n    var cv = [String: Any]()\n    cv[ProviderTableMeta.UPLOADS_LOCAL_PATH] = ocUpload.getLocalPath()\n    cv[ProviderTableMeta.UPLOADS_REMOTE_PATH] = ocUpload.getRemotePath()\n    cv[ProviderTableMeta.UPLOADS_ACCOUNT_NAME] = ocUpload.getAccountName()\n    cv[ProviderTableMeta.UPLOADS_FILE_SIZE] = ocUpload.getFileSize()\n    cv[ProviderTableMeta.UPLOADS_STATUS] = ocUpload.getUploadStatus().value\n    cv[ProviderTableMeta.UPLOADS_LOCAL_BEHAVIOUR] = ocUpload.getLocalAction()\n    cv[ProviderTableMeta.UPLOADS_NAME_COLLISION_POLICY] = ocUpload.getNameCollisionPolicy().serialize()\n    cv[ProviderTableMeta.UPLOADS_IS_CREATE_REMOTE_FOLDER] = ocUpload.isCreateRemoteFolder() ? 1 : 0\n    cv[ProviderTableMeta.UPLOADS_LAST_RESULT] = ocUpload.getLastResult().getValue()\n    cv[ProviderTableMeta.UPLOADS_CREATED_BY] = ocUpload.getCreatedBy()\n    cv[ProviderTableMeta.UPLOADS_IS_WHILE_CHARGING_ONLY] = ocUpload.isWhileChargingOnly() ? 1 : 0\n    cv[ProviderTableMeta.UPLOADS_IS_WIFI_ONLY] = ocUpload.isUseWifiOnly() ? 1 : 0\n    cv[ProviderTableMeta.UPLOADS_FOLDER_UNLOCK_TOKEN] = ocUpload.getFolderUnlockToken()\n    return cv\n}\n```"
    },
    {
        "method_name": "updateUpload",
        "method_code": "blic int updateUpload(OCUpload ocUpload) {\n        Log_OC.v(TAG, \"Updating \" + ocUpload.getLocalPath() + \" with status=\" + ocUpload.getUploadStatus());\n\n        ContentValues cv = new ContentValues();\n        cv.put(ProviderTableMeta.UPLOADS_LOCAL_PATH, ocUpload.getLocalPath());\n        cv.put(ProviderTableMeta.UPLOADS_REMOTE_PATH, ocUpload.getRemotePath());\n        cv.put(ProviderTableMeta.UPLOADS_ACCOUNT_NAME, ocUpload.getAccountName());\n        cv.put(ProviderTableMeta.UPLOADS_STATUS, ocUpload.getUploadStatus().value);\n        cv.put(ProviderTableMeta.UPLOADS_LAST_RESULT, ocUpload.getLastResult().getValue());\n        cv.put(ProviderTableMeta.UPLOADS_UPLOAD_END_TIMESTAMP, ocUpload.getUploadEndTimestamp());\n        cv.put(ProviderTableMeta.UPLOADS_FILE_SIZE, ocUpload.getFileSize());\n        cv.put(ProviderTableMeta.UPLOADS_FOLDER_UNLOCK_TOKEN, ocUpload.getFolderUnlockToken());\n\n        int result = getDB().update(ProviderTableMeta.CONTENT_URI_UPLOADS,\n                                    cv,\n                                    ProviderTableMeta._ID + \"=?\",\n                                    new String[]{String.valueOf(ocUpload.getUploadId())}\n                                   );\n\n        Log_OC.d(TAG, \"updateUpload returns with: \" + result + \" for file: \" + ocUpload.getLocalPath());\n        if (result != SINGLE_RESULT) {\n            Log_OC.e(TAG, \"Failed to update item \" + ocUpload.getLocalPath() + \" into upload db.\");\n        } else {\n            notifyObserversNow();\n        }\n\n        return result;\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled updateUpload from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: updateUpload\n\n        Method Code: blic int updateUpload(OCUpload ocUpload) {\n        Log_OC.v(TAG, \"Updating \" + ocUpload.getLocalPath() + \" with status=\" + ocUpload.getUploadStatus());\n\n        ContentValues cv = new ContentValues();\n        cv.put(ProviderTableMeta.UPLOADS_LOCAL_PATH, ocUpload.getLocalPath());\n        cv.put(ProviderTableMeta.UPLOADS_REMOTE_PATH, ocUpload.getRemotePath());\n        cv.put(ProviderTableMeta.UPLOADS_ACCOUNT_NAME, ocUpload.getAccountName());\n        cv.put(ProviderTableMeta.UPLOADS_STATUS, ocUpload.getUploadStatus().value);\n        cv.put(ProviderTableMeta.UPLOADS_LAST_RESULT, ocUpload.getLastResult().getValue());\n        cv.put(ProviderTableMeta.UPLOADS_UPLOAD_END_TIMESTAMP, ocUpload.getUploadEndTimestamp());\n        cv.put(ProviderTableMeta.UPLOADS_FILE_SIZE, ocUpload.getFileSize());\n        cv.put(ProviderTableMeta.UPLOADS_FOLDER_UNLOCK_TOKEN, ocUpload.getFolderUnlockToken());\n\n        int result = getDB().update(ProviderTableMeta.CONTENT_URI_UPLOADS,\n                                    cv,\n                                    ProviderTableMeta._ID + \"=?\",\n                                    new String[]{String.valueOf(ocUpload.getUploadId())}\n                                   );\n\n        Log_OC.d(TAG, \"updateUpload returns with: \" + result + \" for file: \" + ocUpload.getLocalPath());\n        if (result != SINGLE_RESULT) {\n            Log_OC.e(TAG, \"Failed to update item \" + ocUpload.getLocalPath() + \" into upload db.\");\n        } else {\n            notifyObserversNow();\n        }\n\n        return result;\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc updateUpload(_ ocUpload: OCUpload) -> Int {\n    Log_OC.v(TAG, \"Updating \\(ocUpload.localPath) with status=\\(ocUpload.uploadStatus)\")\n\n    var cv = [String: Any]()\n    cv[ProviderTableMeta.UPLOADS_LOCAL_PATH] = ocUpload.localPath\n    cv[ProviderTableMeta.UPLOADS_REMOTE_PATH] = ocUpload.remotePath\n    cv[ProviderTableMeta.UPLOADS_ACCOUNT_NAME] = ocUpload.accountName\n    cv[ProviderTableMeta.UPLOADS_STATUS] = ocUpload.uploadStatus.value\n    cv[ProviderTableMeta.UPLOADS_LAST_RESULT] = ocUpload.lastResult.getValue()\n    cv[ProviderTableMeta.UPLOADS_UPLOAD_END_TIMESTAMP] = ocUpload.uploadEndTimestamp\n    cv[ProviderTableMeta.UPLOADS_FILE_SIZE] = ocUpload.fileSize\n    cv[ProviderTableMeta.UPLOADS_FOLDER_UNLOCK_TOKEN] = ocUpload.folderUnlockToken\n\n    let result = getDB().update(ProviderTableMeta.CONTENT_URI_UPLOADS,\n                                values: cv,\n                                where: \"\\(ProviderTableMeta._ID)=?\",\n                                whereArgs: [String(ocUpload.uploadId)]\n                               )\n\n    Log_OC.d(TAG, \"updateUpload returns with: \\(result) for file: \\(ocUpload.localPath)\")\n    if result != SINGLE_RESULT {\n        Log_OC.e(TAG, \"Failed to update item \\(ocUpload.localPath) into upload db.\")\n    } else {\n        notifyObserversNow()\n    }\n\n    return result\n}\n```"
    },
    {
        "method_name": "updateUploadInternal",
        "method_code": "ivate int updateUploadInternal(Cursor c, UploadStatus status, UploadResult result, String remotePath,\n                                     String localPath) {\n\n        int r = 0;\n        while (c.moveToNext()) {\n            // read upload object and update\n            OCUpload upload = createOCUploadFromCursor(c);\n\n            String path = c.getString(c.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_LOCAL_PATH));\n            Log_OC.v(\n                TAG,\n                \"Updating \" + path + \" with status:\" + status + \" and result:\"\n                    + (result == null ? \"null\" : result.toString()) + \" (old:\"\n                    + upload.toFormattedString() + ')');\n\n            upload.setUploadStatus(status);\n            upload.setLastResult(result);\n            upload.setRemotePath(remotePath);\n            if (localPath != null) {\n                upload.setLocalPath(localPath);\n            }\n            if (status == UploadStatus.UPLOAD_SUCCEEDED) {\n                upload.setUploadEndTimestamp(Calendar.getInstance().getTimeInMillis());\n            }\n\n            // store update upload object to db\n            r = updateUpload(upload);\n\n        }\n\n        return r;\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled updateUploadInternal from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: updateUploadInternal\n\n        Method Code: ivate int updateUploadInternal(Cursor c, UploadStatus status, UploadResult result, String remotePath,\n                                     String localPath) {\n\n        int r = 0;\n        while (c.moveToNext()) {\n            // read upload object and update\n            OCUpload upload = createOCUploadFromCursor(c);\n\n            String path = c.getString(c.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_LOCAL_PATH));\n            Log_OC.v(\n                TAG,\n                \"Updating \" + path + \" with status:\" + status + \" and result:\"\n                    + (result == null ? \"null\" : result.toString()) + \" (old:\"\n                    + upload.toFormattedString() + ')');\n\n            upload.setUploadStatus(status);\n            upload.setLastResult(result);\n            upload.setRemotePath(remotePath);\n            if (localPath != null) {\n                upload.setLocalPath(localPath);\n            }\n            if (status == UploadStatus.UPLOAD_SUCCEEDED) {\n                upload.setUploadEndTimestamp(Calendar.getInstance().getTimeInMillis());\n            }\n\n            // store update upload object to db\n            r = updateUpload(upload);\n\n        }\n\n        return r;\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func updateUploadInternal(cursor: Cursor, status: UploadStatus, result: UploadResult?, remotePath: String, localPath: String?) -> Int {\n    var r = 0\n    while cursor.moveToNext() {\n        // read upload object and update\n        let upload = createOCUploadFromCursor(cursor: cursor)\n\n        let path = cursor.getString(cursor.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_LOCAL_PATH))\n        Log_OC.v(TAG, \"Updating \\(path) with status: \\(status) and result: \\(result?.description ?? \"null\") (old: \\(upload.toFormattedString()))\")\n\n        upload.setUploadStatus(status: status)\n        upload.setLastResult(result: result)\n        upload.setRemotePath(remotePath: remotePath)\n        if let localPath = localPath {\n            upload.setLocalPath(localPath: localPath)\n        }\n        if status == .UPLOAD_SUCCEEDED {\n            upload.setUploadEndTimestamp(timestamp: Calendar.current.timeInMillis())\n        }\n\n        // store update upload object to db\n        r = updateUpload(upload: upload)\n    }\n\n    return r\n}\n```"
    },
    {
        "method_name": "updateUploadStatus",
        "method_code": "ivate int updateUploadStatus(long id, UploadStatus status, UploadResult result, String remotePath,\n                                   String localPath) {\n        //Log_OC.v(TAG, \"Updating \"+filepath+\" with uploadStatus=\"+status +\" and result=\"+result);\n\n        int returnValue = 0;\n        Cursor c = getDB().query(\n            ProviderTableMeta.CONTENT_URI_UPLOADS,\n            null,\n            ProviderTableMeta._ID + \"=?\",\n            new String[]{String.valueOf(id)},\n            null\n                                );\n\n        if (c != null) {\n            if (c.getCount() != SINGLE_RESULT) {\n                Log_OC.e(TAG, c.getCount() + \" items for id=\" + id\n                    + \" available in UploadDb. Expected 1. Failed to update upload db.\");\n            } else {\n                returnValue = updateUploadInternal(c, status, result, remotePath, localPath);\n            }\n            c.close();\n        } else {\n            Log_OC.e(TAG, \"Cursor is null\");\n        }\n\n        return returnValue;\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled updateUploadStatus from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: updateUploadStatus\n\n        Method Code: ivate int updateUploadStatus(long id, UploadStatus status, UploadResult result, String remotePath,\n                                   String localPath) {\n        //Log_OC.v(TAG, \"Updating \"+filepath+\" with uploadStatus=\"+status +\" and result=\"+result);\n\n        int returnValue = 0;\n        Cursor c = getDB().query(\n            ProviderTableMeta.CONTENT_URI_UPLOADS,\n            null,\n            ProviderTableMeta._ID + \"=?\",\n            new String[]{String.valueOf(id)},\n            null\n                                );\n\n        if (c != null) {\n            if (c.getCount() != SINGLE_RESULT) {\n                Log_OC.e(TAG, c.getCount() + \" items for id=\" + id\n                    + \" available in UploadDb. Expected 1. Failed to update upload db.\");\n            } else {\n                returnValue = updateUploadInternal(c, status, result, remotePath, localPath);\n            }\n            c.close();\n        } else {\n            Log_OC.e(TAG, \"Cursor is null\");\n        }\n\n        return returnValue;\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func updateUploadStatus(id: Int64, status: UploadStatus, result: UploadResult, remotePath: String, localPath: String) -> Int {\n    var returnValue = 0\n    let db = getDB()\n    let query = ProviderTableMeta.CONTENT_URI_UPLOADS\n    let selection = \"\\(ProviderTableMeta._ID)=?\"\n    let selectionArgs = [String(id)]\n    \n    if let cursor = db.query(query, selection: selection, selectionArgs: selectionArgs, groupBy: nil, having: nil, orderBy: nil) {\n        if cursor.count != SINGLE_RESULT {\n            Log_OC.e(TAG, \"\\(cursor.count) items for id=\\(id) available in UploadDb. Expected 1. Failed to update upload db.\")\n        } else {\n            returnValue = updateUploadInternal(cursor, status: status, result: result, remotePath: remotePath, localPath: localPath)\n        }\n        cursor.close()\n    } else {\n        Log_OC.e(TAG, \"Cursor is null\")\n    }\n    \n    return returnValue\n}\n```"
    },
    {
        "method_name": "notifyObserversNow",
        "method_code": "blic void notifyObserversNow() {\n        Log_OC.d(TAG, \"notifyObserversNow\");\n        setChanged();\n        notifyObservers();\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled notifyObserversNow from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: notifyObserversNow\n\n        Method Code: blic void notifyObserversNow() {\n        Log_OC.d(TAG, \"notifyObserversNow\");\n        setChanged();\n        notifyObservers();\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc notifyObserversNow() {\n    Log_OC.d(TAG, \"notifyObserversNow\")\n    setChanged()\n    notifyObservers()\n}\n```"
    },
    {
        "method_name": "removeUpload",
        "method_code": "blic int removeUpload(@Nullable OCUpload upload) {\n        if (upload == null) {\n            return 0;\n        } else {\n            return removeUpload(upload.getUploadId());\n        }\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled removeUpload from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: removeUpload\n\n        Method Code: blic int removeUpload(@Nullable OCUpload upload) {\n        if (upload == null) {\n            return 0;\n        } else {\n            return removeUpload(upload.getUploadId());\n        }\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc removeUpload(_ upload: OCUpload?) -> Int {\n    if upload == nil {\n        return 0\n    } else {\n        return removeUpload(upload!.getUploadId())\n    }\n}\n```"
    },
    {
        "method_name": "removeUpload",
        "method_code": "blic int removeUpload(long id) {\n        int result = getDB().delete(\n            ProviderTableMeta.CONTENT_URI_UPLOADS,\n            ProviderTableMeta._ID + \"=?\",\n            new String[]{Long.toString(id)}\n                                   );\n        Log_OC.d(TAG, \"delete returns \" + result + \" for upload with id \" + id);\n        if (result > 0) {\n            notifyObserversNow();\n        }\n        return result;\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled removeUpload from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: removeUpload\n\n        Method Code: blic int removeUpload(long id) {\n        int result = getDB().delete(\n            ProviderTableMeta.CONTENT_URI_UPLOADS,\n            ProviderTableMeta._ID + \"=?\",\n            new String[]{Long.toString(id)}\n                                   );\n        Log_OC.d(TAG, \"delete returns \" + result + \" for upload with id \" + id);\n        if (result > 0) {\n            notifyObserversNow();\n        }\n        return result;\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc removeUpload(id: Int64) -> Int {\n    let result = getDB().delete(\n        ProviderTableMeta.CONTENT_URI_UPLOADS,\n        where: \"\\(ProviderTableMeta._ID)=?\",\n        args: [String(id)]\n    )\n    Log_OC.d(TAG, \"delete returns \\(result) for upload with id \\(id)\")\n    if result > 0 {\n        notifyObserversNow()\n    }\n    return result\n}\n```"
    },
    {
        "method_name": "removeUpload",
        "method_code": "blic int removeUpload(String accountName, String remotePath) {\n        int result = getDB().delete(\n            ProviderTableMeta.CONTENT_URI_UPLOADS,\n            ProviderTableMeta.UPLOADS_ACCOUNT_NAME + \"=? AND \" + ProviderTableMeta.UPLOADS_REMOTE_PATH + \"=?\",\n            new String[]{accountName, remotePath}\n                                   );\n        Log_OC.d(TAG, \"delete returns \" + result + \" for file \" + remotePath + \" in \" + accountName);\n        if (result > 0) {\n            notifyObserversNow();\n        }\n        return result;\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled removeUpload from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: removeUpload\n\n        Method Code: blic int removeUpload(String accountName, String remotePath) {\n        int result = getDB().delete(\n            ProviderTableMeta.CONTENT_URI_UPLOADS,\n            ProviderTableMeta.UPLOADS_ACCOUNT_NAME + \"=? AND \" + ProviderTableMeta.UPLOADS_REMOTE_PATH + \"=?\",\n            new String[]{accountName, remotePath}\n                                   );\n        Log_OC.d(TAG, \"delete returns \" + result + \" for file \" + remotePath + \" in \" + accountName);\n        if (result > 0) {\n            notifyObserversNow();\n        }\n        return result;\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc removeUpload(accountName: String, remotePath: String) -> Int {\n    let result = getDB().delete(\n        ProviderTableMeta.CONTENT_URI_UPLOADS,\n        where: \"\\(ProviderTableMeta.UPLOADS_ACCOUNT_NAME)=? AND \\(ProviderTableMeta.UPLOADS_REMOTE_PATH)=?\",\n        args: [accountName, remotePath]\n    )\n    Log_OC.d(TAG, \"delete returns \\(result) for file \\(remotePath) in \\(accountName)\")\n    if result > 0 {\n        notifyObserversNow()\n    }\n    return result\n}\n```"
    },
    {
        "method_name": "removeUploads",
        "method_code": "blic int removeUploads(String accountName) {\n        int result = getDB().delete(\n            ProviderTableMeta.CONTENT_URI_UPLOADS,\n            ProviderTableMeta.UPLOADS_ACCOUNT_NAME + \"=?\",\n            new String[]{accountName}\n                                   );\n        Log_OC.d(TAG, \"delete returns \" + result + \" for uploads in \" + accountName);\n        if (result > 0) {\n            notifyObserversNow();\n        }\n        return result;\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled removeUploads from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: removeUploads\n\n        Method Code: blic int removeUploads(String accountName) {\n        int result = getDB().delete(\n            ProviderTableMeta.CONTENT_URI_UPLOADS,\n            ProviderTableMeta.UPLOADS_ACCOUNT_NAME + \"=?\",\n            new String[]{accountName}\n                                   );\n        Log_OC.d(TAG, \"delete returns \" + result + \" for uploads in \" + accountName);\n        if (result > 0) {\n            notifyObserversNow();\n        }\n        return result;\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc removeUploads(accountName: String) -> Int {\n    let result = getDB().delete(\n        ProviderTableMeta.CONTENT_URI_UPLOADS,\n        where: \"\\(ProviderTableMeta.UPLOADS_ACCOUNT_NAME)=?\",\n        args: [accountName]\n    )\n    Log_OC.d(TAG, \"delete returns \\(result) for uploads in \\(accountName)\")\n    if result > 0 {\n        notifyObserversNow()\n    }\n    return result\n}\n```"
    },
    {
        "method_name": "getAllStoredUploads",
        "method_code": "blic OCUpload[] getAllStoredUploads() {\n        return getUploads(null, (String[]) null);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getAllStoredUploads from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: getAllStoredUploads\n\n        Method Code: blic OCUpload[] getAllStoredUploads() {\n        return getUploads(null, (String[]) null);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getAllStoredUploads() -> [OCUpload] {\n    return getUploads(nil, nil)\n}\n```"
    },
    {
        "method_name": "getPendingCurrentOrFailedUpload",
        "method_code": "blic OCUpload getPendingCurrentOrFailedUpload(OCUpload upload) {\n        try (Cursor cursor = getDB().query(\n            ProviderTableMeta.CONTENT_URI_UPLOADS,\n            null,\n            ProviderTableMeta.UPLOADS_REMOTE_PATH + \"=? and \" +\n                ProviderTableMeta.UPLOADS_LOCAL_PATH + \"=? and \" +\n                ProviderTableMeta.UPLOADS_ACCOUNT_NAME + \"=? and (\" +\n                ProviderTableMeta.UPLOADS_STATUS + \"=? or \" +\n                ProviderTableMeta.UPLOADS_STATUS + \"=? )\",\n            new String[]{\n                upload.getRemotePath(),\n                upload.getLocalPath(),\n                upload.getAccountName(),\n                String.valueOf(UploadStatus.UPLOAD_IN_PROGRESS.value),\n                String.valueOf(UploadStatus.UPLOAD_FAILED.value)\n            },\n            ProviderTableMeta.UPLOADS_REMOTE_PATH + \" ASC\")) {\n\n            if (cursor != null) {\n                if (cursor.moveToFirst()) {\n                    return createOCUploadFromCursor(cursor);\n                }\n            }\n        }\n        return null;\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getPendingCurrentOrFailedUpload from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: getPendingCurrentOrFailedUpload\n\n        Method Code: blic OCUpload getPendingCurrentOrFailedUpload(OCUpload upload) {\n        try (Cursor cursor = getDB().query(\n            ProviderTableMeta.CONTENT_URI_UPLOADS,\n            null,\n            ProviderTableMeta.UPLOADS_REMOTE_PATH + \"=? and \" +\n                ProviderTableMeta.UPLOADS_LOCAL_PATH + \"=? and \" +\n                ProviderTableMeta.UPLOADS_ACCOUNT_NAME + \"=? and (\" +\n                ProviderTableMeta.UPLOADS_STATUS + \"=? or \" +\n                ProviderTableMeta.UPLOADS_STATUS + \"=? )\",\n            new String[]{\n                upload.getRemotePath(),\n                upload.getLocalPath(),\n                upload.getAccountName(),\n                String.valueOf(UploadStatus.UPLOAD_IN_PROGRESS.value),\n                String.valueOf(UploadStatus.UPLOAD_FAILED.value)\n            },\n            ProviderTableMeta.UPLOADS_REMOTE_PATH + \" ASC\")) {\n\n            if (cursor != null) {\n                if (cursor.moveToFirst()) {\n                    return createOCUploadFromCursor(cursor);\n                }\n            }\n        }\n        return null;\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getPendingCurrentOrFailedUpload(upload: OCUpload) -> OCUpload? {\n    let db = getDB()\n    let query = ProviderTableMeta.CONTENT_URI_UPLOADS\n    let selection = \"\\(ProviderTableMeta.UPLOADS_REMOTE_PATH)=? AND \\(ProviderTableMeta.UPLOADS_LOCAL_PATH)=? AND \\(ProviderTableMeta.UPLOADS_ACCOUNT_NAME)=? AND (\\(ProviderTableMeta.UPLOADS_STATUS)=? OR \\(ProviderTableMeta.UPLOADS_STATUS)=?)\"\n    let selectionArgs = [\n        upload.getRemotePath(),\n        upload.getLocalPath(),\n        upload.getAccountName(),\n        String(UploadStatus.UPLOAD_IN_PROGRESS.rawValue),\n        String(UploadStatus.UPLOAD_FAILED.rawValue)\n    ]\n    let sortOrder = \"\\(ProviderTableMeta.UPLOADS_REMOTE_PATH) ASC\"\n    \n    if let cursor = db.query(query, selection: selection, selectionArgs: selectionArgs, sortOrder: sortOrder) {\n        defer { cursor.close() }\n        if cursor.moveToFirst() {\n            return createOCUploadFromCursor(cursor)\n        }\n    }\n    return nil\n}\n```"
    },
    {
        "method_name": "getUploadByRemotePath",
        "method_code": "blic OCUpload getUploadByRemotePath(String remotePath) {\n        OCUpload result = null;\n        try (Cursor cursor = getDB().query(\n            ProviderTableMeta.CONTENT_URI_UPLOADS,\n            null,\n            ProviderTableMeta.UPLOADS_REMOTE_PATH + \"=?\",\n            new String[]{remotePath},\n            ProviderTableMeta.UPLOADS_REMOTE_PATH + \" ASC\")) {\n\n            if (cursor != null) {\n                if (cursor.moveToFirst()) {\n                    result = createOCUploadFromCursor(cursor);\n                }\n            }\n        }\n        Log_OC.d(TAG, \"Retrieve job \" + result + \" for remote path \" + remotePath);\n        return result;\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getUploadByRemotePath from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: getUploadByRemotePath\n\n        Method Code: blic OCUpload getUploadByRemotePath(String remotePath) {\n        OCUpload result = null;\n        try (Cursor cursor = getDB().query(\n            ProviderTableMeta.CONTENT_URI_UPLOADS,\n            null,\n            ProviderTableMeta.UPLOADS_REMOTE_PATH + \"=?\",\n            new String[]{remotePath},\n            ProviderTableMeta.UPLOADS_REMOTE_PATH + \" ASC\")) {\n\n            if (cursor != null) {\n                if (cursor.moveToFirst()) {\n                    result = createOCUploadFromCursor(cursor);\n                }\n            }\n        }\n        Log_OC.d(TAG, \"Retrieve job \" + result + \" for remote path \" + remotePath);\n        return result;\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getUploadByRemotePath(remotePath: String) -> OCUpload? {\n    var result: OCUpload? = nil\n    let db = getDB()\n    let query = ProviderTableMeta.UPLOADS_REMOTE_PATH + \"=?\"\n    let sortOrder = ProviderTableMeta.UPLOADS_REMOTE_PATH + \" ASC\"\n    let cursor = db.query(ProviderTableMeta.CONTENT_URI_UPLOADS, selection: query, selectionArgs: [remotePath], sortOrder: sortOrder)\n\n    if let cursor = cursor {\n        if cursor.moveToFirst() {\n            result = createOCUploadFromCursor(cursor)\n        }\n    }\n    Log_OC.d(TAG, \"Retrieve job \\(String(describing: result)) for remote path \\(remotePath)\")\n    return result\n}\n```"
    },
    {
        "method_name": "getUploadById",
        "method_code": "blic @Nullable\n    OCUpload getUploadById(long id) {\n        OCUpload result = null;\n        Cursor cursor = getDB().query(\n            ProviderTableMeta.CONTENT_URI_UPLOADS,\n            null,\n            ProviderTableMeta._ID + \"=?\",\n            new String[]{Long.toString(id)},\n            \"_id ASC\");\n\n        if (cursor != null) {\n            if (cursor.moveToFirst()) {\n                result = createOCUploadFromCursor(cursor);\n            }\n        }\n        Log_OC.d(TAG, \"Retrieve job \" + result + \" for id \" + id);\n        return result;\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getUploadById from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: getUploadById\n\n        Method Code: blic @Nullable\n    OCUpload getUploadById(long id) {\n        OCUpload result = null;\n        Cursor cursor = getDB().query(\n            ProviderTableMeta.CONTENT_URI_UPLOADS,\n            null,\n            ProviderTableMeta._ID + \"=?\",\n            new String[]{Long.toString(id)},\n            \"_id ASC\");\n\n        if (cursor != null) {\n            if (cursor.moveToFirst()) {\n                result = createOCUploadFromCursor(cursor);\n            }\n        }\n        Log_OC.d(TAG, \"Retrieve job \" + result + \" for id \" + id);\n        return result;\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getUploadById(id: Int64) -> OCUpload? {\n    var result: OCUpload? = nil\n    let db = getDB()\n    let query = \"SELECT * FROM \\(ProviderTableMeta.CONTENT_URI_UPLOADS) WHERE \\(ProviderTableMeta._ID) = ? ORDER BY _id ASC\"\n    let args: [String] = [String(id)]\n    \n    if let cursor = db.rawQuery(query, args) {\n        if cursor.moveToFirst() {\n            result = createOCUploadFromCursor(cursor)\n        }\n        cursor.close()\n    }\n    Log_OC.d(TAG, \"Retrieve job \\(String(describing: result)) for id \\(id)\")\n    return result\n}\n```"
    },
    {
        "method_name": "getUploads",
        "method_code": "ivate OCUpload[] getUploads(@Nullable String selection, @Nullable String... selectionArgs) {\n        final List<OCUpload> uploads = new ArrayList<>();\n        long page = 0;\n        long rowsRead;\n        long rowsTotal = 0;\n        long lastRowID = -1;\n\n        do {\n            final List<OCUpload> uploadsPage = getUploadPage(lastRowID, selection, selectionArgs);\n            rowsRead = uploadsPage.size();\n            rowsTotal += rowsRead;\n            if (!uploadsPage.isEmpty()) {\n                lastRowID = uploadsPage.get(uploadsPage.size() - 1).getUploadId();\n            }\n            Log_OC.v(TAG, String.format(Locale.ENGLISH,\n                                        \"getUploads() got %d rows from page %d, %d rows total so far, last ID %d\",\n                                        rowsRead,\n                                        page,\n                                        rowsTotal,\n                                        lastRowID\n                                       ));\n            uploads.addAll(uploadsPage);\n            page++;\n        } while (rowsRead > 0);\n\n\n        Log_OC.v(TAG, String.format(Locale.ENGLISH,\n                                    \"getUploads() returning %d (%d) rows after reading %d pages\",\n                                    rowsTotal,\n                                    uploads.size(),\n                                    page\n                                   ));\n\n\n        return uploads.toArray(new OCUpload[0]);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getUploads from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: getUploads\n\n        Method Code: ivate OCUpload[] getUploads(@Nullable String selection, @Nullable String... selectionArgs) {\n        final List<OCUpload> uploads = new ArrayList<>();\n        long page = 0;\n        long rowsRead;\n        long rowsTotal = 0;\n        long lastRowID = -1;\n\n        do {\n            final List<OCUpload> uploadsPage = getUploadPage(lastRowID, selection, selectionArgs);\n            rowsRead = uploadsPage.size();\n            rowsTotal += rowsRead;\n            if (!uploadsPage.isEmpty()) {\n                lastRowID = uploadsPage.get(uploadsPage.size() - 1).getUploadId();\n            }\n            Log_OC.v(TAG, String.format(Locale.ENGLISH,\n                                        \"getUploads() got %d rows from page %d, %d rows total so far, last ID %d\",\n                                        rowsRead,\n                                        page,\n                                        rowsTotal,\n                                        lastRowID\n                                       ));\n            uploads.addAll(uploadsPage);\n            page++;\n        } while (rowsRead > 0);\n\n\n        Log_OC.v(TAG, String.format(Locale.ENGLISH,\n                                    \"getUploads() returning %d (%d) rows after reading %d pages\",\n                                    rowsTotal,\n                                    uploads.size(),\n                                    page\n                                   ));\n\n\n        return uploads.toArray(new OCUpload[0]);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getUploads(selection: String? = nil, selectionArgs: String?...) -> [OCUpload] {\n    var uploads: [OCUpload] = []\n    var page: Int = 0\n    var rowsRead: Int\n    var rowsTotal: Int = 0\n    var lastRowID: Int64 = -1\n\n    repeat {\n        let uploadsPage = getUploadPage(lastRowID: lastRowID, selection: selection, selectionArgs: selectionArgs)\n        rowsRead = uploadsPage.count\n        rowsTotal += rowsRead\n        if !uploadsPage.isEmpty {\n            lastRowID = uploadsPage.last!.getUploadId()\n        }\n        Log_OC.v(TAG, String(format: \"getUploads() got %d rows from page %d, %d rows total so far, last ID %d\", rowsRead, page, rowsTotal, lastRowID))\n        uploads.append(contentsOf: uploadsPage)\n        page += 1\n    } while rowsRead > 0\n\n    Log_OC.v(TAG, String(format: \"getUploads() returning %d (%d) rows after reading %d pages\", rowsTotal, uploads.count, page))\n\n    return uploads\n}\n```"
    },
    {
        "method_name": "getUploadPage",
        "method_code": "onNull\n    private List<OCUpload> getUploadPage(final long afterId, @Nullable String selection, @Nullable String... selectionArgs) {\n        return getUploadPage(QUERY_PAGE_SIZE, afterId, true, selection, selectionArgs);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getUploadPage from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: getUploadPage\n\n        Method Code: onNull\n    private List<OCUpload> getUploadPage(final long afterId, @Nullable String selection, @Nullable String... selectionArgs) {\n        return getUploadPage(QUERY_PAGE_SIZE, afterId, true, selection, selectionArgs);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getUploadPage(afterId: Int64, selection: String? = nil, selectionArgs: String?...) -> [OCUpload] {\n    return getUploadPage(QUERY_PAGE_SIZE, afterId: afterId, true, selection: selection, selectionArgs: selectionArgs)\n}\n```"
    },
    {
        "method_name": "getInProgressAndDelayedUploadsSelection",
        "method_code": "ivate String getInProgressAndDelayedUploadsSelection() {\n        return \"( \" + ProviderTableMeta.UPLOADS_STATUS + EQUAL + UploadStatus.UPLOAD_IN_PROGRESS.value +\n            OR + ProviderTableMeta.UPLOADS_LAST_RESULT +\n            EQUAL + UploadResult.DELAYED_FOR_WIFI.getValue() +\n            OR + ProviderTableMeta.UPLOADS_LAST_RESULT +\n            EQUAL + UploadResult.LOCK_FAILED.getValue() +\n            OR + ProviderTableMeta.UPLOADS_LAST_RESULT +\n            EQUAL + UploadResult.DELAYED_FOR_CHARGING.getValue() +\n            OR + ProviderTableMeta.UPLOADS_LAST_RESULT +\n            EQUAL + UploadResult.DELAYED_IN_POWER_SAVE_MODE.getValue() +\n            \" ) AND \" + ProviderTableMeta.UPLOADS_ACCOUNT_NAME + IS_EQUAL;\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getInProgressAndDelayedUploadsSelection from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: getInProgressAndDelayedUploadsSelection\n\n        Method Code: ivate String getInProgressAndDelayedUploadsSelection() {\n        return \"( \" + ProviderTableMeta.UPLOADS_STATUS + EQUAL + UploadStatus.UPLOAD_IN_PROGRESS.value +\n            OR + ProviderTableMeta.UPLOADS_LAST_RESULT +\n            EQUAL + UploadResult.DELAYED_FOR_WIFI.getValue() +\n            OR + ProviderTableMeta.UPLOADS_LAST_RESULT +\n            EQUAL + UploadResult.LOCK_FAILED.getValue() +\n            OR + ProviderTableMeta.UPLOADS_LAST_RESULT +\n            EQUAL + UploadResult.DELAYED_FOR_CHARGING.getValue() +\n            OR + ProviderTableMeta.UPLOADS_LAST_RESULT +\n            EQUAL + UploadResult.DELAYED_IN_POWER_SAVE_MODE.getValue() +\n            \" ) AND \" + ProviderTableMeta.UPLOADS_ACCOUNT_NAME + IS_EQUAL;\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getInProgressAndDelayedUploadsSelection() -> String {\n    return \"( \" + ProviderTableMeta.UPLOADS_STATUS + EQUAL + UploadStatus.UPLOAD_IN_PROGRESS.value +\n        OR + ProviderTableMeta.UPLOADS_LAST_RESULT +\n        EQUAL + UploadResult.DELAYED_FOR_WIFI.getValue() +\n        OR + ProviderTableMeta.UPLOADS_LAST_RESULT +\n        EQUAL + UploadResult.LOCK_FAILED.getValue() +\n        OR + ProviderTableMeta.UPLOADS_LAST_RESULT +\n        EQUAL + UploadResult.DELAYED_FOR_CHARGING.getValue() +\n        OR + ProviderTableMeta.UPLOADS_LAST_RESULT +\n        EQUAL + UploadResult.DELAYED_IN_POWER_SAVE_MODE.getValue() +\n        \" ) AND \" + ProviderTableMeta.UPLOADS_ACCOUNT_NAME + IS_EQUAL\n}\n```"
    },
    {
        "method_name": "getTotalUploadSize",
        "method_code": "blic int getTotalUploadSize(@Nullable String... selectionArgs) {\n        final String selection = ProviderTableMeta.UPLOADS_STATUS + EQUAL + UploadStatus.UPLOAD_IN_PROGRESS.value +\n            AND + ProviderTableMeta.UPLOADS_ACCOUNT_NAME + IS_EQUAL;\n        int totalSize = 0;\n\n        Cursor cursor = getDB().query(\n            ProviderTableMeta.CONTENT_URI_UPLOADS,\n            new String[]{\"COUNT(*) AS count\"},\n            selection,\n            selectionArgs,\n            null);\n\n        if (cursor != null) {\n            if (cursor.moveToFirst()) {\n                totalSize = cursor.getInt(cursor.getColumnIndexOrThrow(\"count\"));\n            }\n            cursor.close();\n        }\n\n        return totalSize;\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getTotalUploadSize from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: getTotalUploadSize\n\n        Method Code: blic int getTotalUploadSize(@Nullable String... selectionArgs) {\n        final String selection = ProviderTableMeta.UPLOADS_STATUS + EQUAL + UploadStatus.UPLOAD_IN_PROGRESS.value +\n            AND + ProviderTableMeta.UPLOADS_ACCOUNT_NAME + IS_EQUAL;\n        int totalSize = 0;\n\n        Cursor cursor = getDB().query(\n            ProviderTableMeta.CONTENT_URI_UPLOADS,\n            new String[]{\"COUNT(*) AS count\"},\n            selection,\n            selectionArgs,\n            null);\n\n        if (cursor != null) {\n            if (cursor.moveToFirst()) {\n                totalSize = cursor.getInt(cursor.getColumnIndexOrThrow(\"count\"));\n            }\n            cursor.close();\n        }\n\n        return totalSize;\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getTotalUploadSize(selectionArgs: [String]?) -> Int {\n    let selection = \"\\(ProviderTableMeta.UPLOADS_STATUS) = \\(UploadStatus.UPLOAD_IN_PROGRESS.rawValue) AND \\(ProviderTableMeta.UPLOADS_ACCOUNT_NAME) = ?\"\n    var totalSize = 0\n\n    if let db = getDB() {\n        let cursor = db.query(\n            ProviderTableMeta.CONTENT_URI_UPLOADS,\n            columns: [\"COUNT(*) AS count\"],\n            selection: selection,\n            selectionArgs: selectionArgs\n        )\n\n        if let cursor = cursor {\n            if cursor.moveToFirst() {\n                totalSize = cursor.getInt(cursor.getColumnIndexOrThrow(\"count\"))\n            }\n            cursor.close()\n        }\n    }\n\n    return totalSize\n}\n```"
    },
    {
        "method_name": "getUploadPage",
        "method_code": "onNull\n    private List<OCUpload> getUploadPage(long limit, final long afterId, final boolean descending, @Nullable String selection, @Nullable String... selectionArgs) {\n        List<OCUpload> uploads = new ArrayList<>();\n        String pageSelection = selection;\n        String[] pageSelectionArgs = selectionArgs;\n\n        String idComparator;\n        String sortDirection;\n        if (descending) {\n            sortDirection = \"DESC\";\n            idComparator = \"<\";\n        } else {\n            sortDirection = \"ASC\";\n            idComparator = \">\";\n        }\n\n        if (afterId >= 0) {\n            if (selection != null) {\n                pageSelection = \"(\" + selection + \") AND _id \" + idComparator + \" ?\";\n            } else {\n                pageSelection = \"_id \" + idComparator + \" ?\";\n            }\n            if (selectionArgs != null) {\n                pageSelectionArgs = Arrays.copyOf(selectionArgs, selectionArgs.length + 1);\n            } else {\n                pageSelectionArgs = new String[1];\n            }\n            pageSelectionArgs[pageSelectionArgs.length - 1] = String.valueOf(afterId);\n            Log_OC.d(TAG, String.format(Locale.ENGLISH, \"QUERY: %s ROWID: %d\", pageSelection, afterId));\n        } else {\n            Log_OC.d(TAG, String.format(Locale.ENGLISH, \"QUERY: %s ROWID: %d\", selection, afterId));\n        }\n\n        String sortOrder;\n        if (limit > 0) {\n            sortOrder = String.format(Locale.ENGLISH, \"_id \" + sortDirection + \" LIMIT %d\", limit);\n        } else {\n            sortOrder = String.format(Locale.ENGLISH, \"_id \" + sortDirection);\n        }\n\n        Cursor c = getDB().query(\n            ProviderTableMeta.CONTENT_URI_UPLOADS,\n            null,\n            pageSelection,\n            pageSelectionArgs,\n            sortOrder);\n\n        if (c != null) {\n            if (c.moveToFirst()) {\n                do {\n                    OCUpload upload = createOCUploadFromCursor(c);\n                    if (upload == null) {\n                        Log_OC.e(TAG, \"OCUpload could not be created from cursor\");\n                    } else {\n                        uploads.add(upload);\n                    }\n                } while (c.moveToNext() && !c.isAfterLast());\n            }\n            c.close();\n        }\n        return uploads;\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getUploadPage from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: getUploadPage\n\n        Method Code: onNull\n    private List<OCUpload> getUploadPage(long limit, final long afterId, final boolean descending, @Nullable String selection, @Nullable String... selectionArgs) {\n        List<OCUpload> uploads = new ArrayList<>();\n        String pageSelection = selection;\n        String[] pageSelectionArgs = selectionArgs;\n\n        String idComparator;\n        String sortDirection;\n        if (descending) {\n            sortDirection = \"DESC\";\n            idComparator = \"<\";\n        } else {\n            sortDirection = \"ASC\";\n            idComparator = \">\";\n        }\n\n        if (afterId >= 0) {\n            if (selection != null) {\n                pageSelection = \"(\" + selection + \") AND _id \" + idComparator + \" ?\";\n            } else {\n                pageSelection = \"_id \" + idComparator + \" ?\";\n            }\n            if (selectionArgs != null) {\n                pageSelectionArgs = Arrays.copyOf(selectionArgs, selectionArgs.length + 1);\n            } else {\n                pageSelectionArgs = new String[1];\n            }\n            pageSelectionArgs[pageSelectionArgs.length - 1] = String.valueOf(afterId);\n            Log_OC.d(TAG, String.format(Locale.ENGLISH, \"QUERY: %s ROWID: %d\", pageSelection, afterId));\n        } else {\n            Log_OC.d(TAG, String.format(Locale.ENGLISH, \"QUERY: %s ROWID: %d\", selection, afterId));\n        }\n\n        String sortOrder;\n        if (limit > 0) {\n            sortOrder = String.format(Locale.ENGLISH, \"_id \" + sortDirection + \" LIMIT %d\", limit);\n        } else {\n            sortOrder = String.format(Locale.ENGLISH, \"_id \" + sortDirection);\n        }\n\n        Cursor c = getDB().query(\n            ProviderTableMeta.CONTENT_URI_UPLOADS,\n            null,\n            pageSelection,\n            pageSelectionArgs,\n            sortOrder);\n\n        if (c != null) {\n            if (c.moveToFirst()) {\n                do {\n                    OCUpload upload = createOCUploadFromCursor(c);\n                    if (upload == null) {\n                        Log_OC.e(TAG, \"OCUpload could not be created from cursor\");\n                    } else {\n                        uploads.add(upload);\n                    }\n                } while (c.moveToNext() && !c.isAfterLast());\n            }\n            c.close();\n        }\n        return uploads;\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getUploadPage(limit: Int64, afterId: Int64, descending: Bool, selection: String?, selectionArgs: [String]?) -> [OCUpload] {\n    var uploads = [OCUpload]()\n    var pageSelection = selection\n    var pageSelectionArgs = selectionArgs\n\n    let idComparator: String\n    let sortDirection: String\n    if descending {\n        sortDirection = \"DESC\"\n        idComparator = \"<\"\n    } else {\n        sortDirection = \"ASC\"\n        idComparator = \">\"\n    }\n\n    if afterId >= 0 {\n        if let selection = selection {\n            pageSelection = \"(\\(selection)) AND _id \\(idComparator) ?\"\n        } else {\n            pageSelection = \"_id \\(idComparator) ?\"\n        }\n        if let selectionArgs = selectionArgs {\n            pageSelectionArgs = selectionArgs + [String(afterId)]\n        } else {\n            pageSelectionArgs = [String(afterId)]\n        }\n        Log_OC.d(TAG, String(format: \"QUERY: %@ ROWID: %d\", pageSelection ?? \"\", afterId))\n    } else {\n        Log_OC.d(TAG, String(format: \"QUERY: %@ ROWID: %d\", selection ?? \"\", afterId))\n    }\n\n    let sortOrder: String\n    if limit > 0 {\n        sortOrder = String(format: \"_id \\(sortDirection) LIMIT %d\", limit)\n    } else {\n        sortOrder = \"_id \\(sortDirection)\"\n    }\n\n    let c = getDB().query(\n        ProviderTableMeta.CONTENT_URI_UPLOADS,\n        columns: nil,\n        selection: pageSelection,\n        selectionArgs: pageSelectionArgs,\n        sortOrder: sortOrder\n    )\n\n    if let cursor = c {\n        if cursor.moveToFirst() {\n            repeat {\n                if let upload = createOCUploadFromCursor(cursor) {\n                    uploads.append(upload)\n                } else {\n                    Log_OC.e(TAG, \"OCUpload could not be created from cursor\")\n                }\n            } while cursor.moveToNext() && !cursor.isAfterLast\n        }\n        cursor.close()\n    }\n    return uploads\n}\n```"
    },
    {
        "method_name": "createOCUploadFromCursor",
        "method_code": "ivate OCUpload createOCUploadFromCursor(Cursor c) {\n        initOCCapability();\n\n        OCUpload upload = null;\n        if (c != null) {\n            String localPath = c.getString(c.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_LOCAL_PATH));\n\n            String remotePath = c.getString(c.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_REMOTE_PATH));\n            if (capability != null) {\n                remotePath = AutoRename.INSTANCE.rename(remotePath, capability,true);\n            }\n\n            String accountName = c.getString(c.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_ACCOUNT_NAME));\n            upload = new OCUpload(localPath, remotePath, accountName);\n\n            upload.setFileSize(c.getLong(c.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_FILE_SIZE)));\n            upload.setUploadId(c.getLong(c.getColumnIndexOrThrow(ProviderTableMeta._ID)));\n            upload.setUploadStatus(\n                UploadStatus.fromValue(c.getInt(c.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_STATUS)))\n                                  );\n            upload.setLocalAction(c.getInt(c.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_LOCAL_BEHAVIOUR)));\n            upload.setNameCollisionPolicy(NameCollisionPolicy.deserialize(c.getInt(\n                c.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_NAME_COLLISION_POLICY))));\n            upload.setCreateRemoteFolder(c.getInt(\n                c.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_IS_CREATE_REMOTE_FOLDER)) == 1);\n            upload.setUploadEndTimestamp(c.getLong(c.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_UPLOAD_END_TIMESTAMP)));\n            upload.setLastResult(UploadResult.fromValue(\n                c.getInt(c.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_LAST_RESULT))));\n            upload.setCreatedBy(c.getInt(c.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_CREATED_BY)));\n            upload.setUseWifiOnly(c.getInt(c.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_IS_WIFI_ONLY)) == 1);\n            upload.setWhileChargingOnly(c.getInt(c.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_IS_WHILE_CHARGING_ONLY))\n                                            == 1);\n            upload.setFolderUnlockToken(c.getString(c.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_FOLDER_UNLOCK_TOKEN)));\n        }\n        return upload;\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled createOCUploadFromCursor from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: createOCUploadFromCursor\n\n        Method Code: ivate OCUpload createOCUploadFromCursor(Cursor c) {\n        initOCCapability();\n\n        OCUpload upload = null;\n        if (c != null) {\n            String localPath = c.getString(c.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_LOCAL_PATH));\n\n            String remotePath = c.getString(c.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_REMOTE_PATH));\n            if (capability != null) {\n                remotePath = AutoRename.INSTANCE.rename(remotePath, capability,true);\n            }\n\n            String accountName = c.getString(c.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_ACCOUNT_NAME));\n            upload = new OCUpload(localPath, remotePath, accountName);\n\n            upload.setFileSize(c.getLong(c.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_FILE_SIZE)));\n            upload.setUploadId(c.getLong(c.getColumnIndexOrThrow(ProviderTableMeta._ID)));\n            upload.setUploadStatus(\n                UploadStatus.fromValue(c.getInt(c.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_STATUS)))\n                                  );\n            upload.setLocalAction(c.getInt(c.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_LOCAL_BEHAVIOUR)));\n            upload.setNameCollisionPolicy(NameCollisionPolicy.deserialize(c.getInt(\n                c.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_NAME_COLLISION_POLICY))));\n            upload.setCreateRemoteFolder(c.getInt(\n                c.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_IS_CREATE_REMOTE_FOLDER)) == 1);\n            upload.setUploadEndTimestamp(c.getLong(c.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_UPLOAD_END_TIMESTAMP)));\n            upload.setLastResult(UploadResult.fromValue(\n                c.getInt(c.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_LAST_RESULT))));\n            upload.setCreatedBy(c.getInt(c.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_CREATED_BY)));\n            upload.setUseWifiOnly(c.getInt(c.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_IS_WIFI_ONLY)) == 1);\n            upload.setWhileChargingOnly(c.getInt(c.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_IS_WHILE_CHARGING_ONLY))\n                                            == 1);\n            upload.setFolderUnlockToken(c.getString(c.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_FOLDER_UNLOCK_TOKEN)));\n        }\n        return upload;\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func createOCUploadFromCursor(_ c: Cursor?) -> OCUpload? {\n    initOCCapability()\n\n    var upload: OCUpload? = nil\n    if let cursor = c {\n        let localPath = cursor.getString(cursor.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_LOCAL_PATH))\n\n        var remotePath = cursor.getString(cursor.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_REMOTE_PATH))\n        if let capability = capability {\n            remotePath = AutoRename.INSTANCE.rename(remotePath, capability, true)\n        }\n\n        let accountName = cursor.getString(cursor.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_ACCOUNT_NAME))\n        upload = OCUpload(localPath: localPath, remotePath: remotePath, accountName: accountName)\n\n        upload?.setFileSize(cursor.getLong(cursor.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_FILE_SIZE)))\n        upload?.setUploadId(cursor.getLong(cursor.getColumnIndexOrThrow(ProviderTableMeta._ID)))\n        upload?.setUploadStatus(\n            UploadStatus.fromValue(cursor.getInt(cursor.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_STATUS)))\n        )\n        upload?.setLocalAction(cursor.getInt(cursor.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_LOCAL_BEHAVIOUR)))\n        upload?.setNameCollisionPolicy(NameCollisionPolicy.deserialize(cursor.getInt(\n            cursor.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_NAME_COLLISION_POLICY))))\n        upload?.setCreateRemoteFolder(cursor.getInt(\n            cursor.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_IS_CREATE_REMOTE_FOLDER)) == 1)\n        upload?.setUploadEndTimestamp(cursor.getLong(cursor.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_UPLOAD_END_TIMESTAMP)))\n        upload?.setLastResult(UploadResult.fromValue(\n            cursor.getInt(cursor.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_LAST_RESULT))))\n        upload?.setCreatedBy(cursor.getInt(cursor.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_CREATED_BY)))\n        upload?.setUseWifiOnly(cursor.getInt(cursor.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_IS_WIFI_ONLY)) == 1)\n        upload?.setWhileChargingOnly(cursor.getInt(cursor.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_IS_WHILE_CHARGING_ONLY))\n                                     == 1)\n        upload?.setFolderUnlockToken(cursor.getString(cursor.getColumnIndexOrThrow(ProviderTableMeta.UPLOADS_FOLDER_UNLOCK_TOKEN)))\n    }\n    return upload\n}\n```"
    },
    {
        "method_name": "getCurrentAndPendingUploadsForCurrentAccount",
        "method_code": "blic OCUpload[] getCurrentAndPendingUploadsForCurrentAccount() {\n        User user = currentAccountProvider.getUser();\n\n        return getCurrentAndPendingUploadsForAccount(user.getAccountName());\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getCurrentAndPendingUploadsForCurrentAccount from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: getCurrentAndPendingUploadsForCurrentAccount\n\n        Method Code: blic OCUpload[] getCurrentAndPendingUploadsForCurrentAccount() {\n        User user = currentAccountProvider.getUser();\n\n        return getCurrentAndPendingUploadsForAccount(user.getAccountName());\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getCurrentAndPendingUploadsForCurrentAccount() -> [OCUpload] {\n    let user = currentAccountProvider.getUser()\n    return getCurrentAndPendingUploadsForAccount(user.getAccountName())\n}\n```"
    },
    {
        "method_name": "getCurrentAndPendingUploadsForAccount",
        "method_code": "blic OCUpload[] getCurrentAndPendingUploadsForAccount(final @NonNull String accountName) {\n        String inProgressUploadsSelection = getInProgressAndDelayedUploadsSelection();\n        return getUploads(inProgressUploadsSelection, accountName);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getCurrentAndPendingUploadsForAccount from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: getCurrentAndPendingUploadsForAccount\n\n        Method Code: blic OCUpload[] getCurrentAndPendingUploadsForAccount(final @NonNull String accountName) {\n        String inProgressUploadsSelection = getInProgressAndDelayedUploadsSelection();\n        return getUploads(inProgressUploadsSelection, accountName);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getCurrentAndPendingUploadsForAccount(accountName: String) -> [OCUpload] {\n    let inProgressUploadsSelection = getInProgressAndDelayedUploadsSelection()\n    return getUploads(selection: inProgressUploadsSelection, accountName: accountName)\n}\n```"
    },
    {
        "method_name": "getCurrentUploadsForAccount",
        "method_code": "blic OCUpload[] getCurrentUploadsForAccount(final @NonNull String accountName) {\n        return getUploads(ProviderTableMeta.UPLOADS_STATUS + EQUAL + UploadStatus.UPLOAD_IN_PROGRESS.value + AND +\n                              ProviderTableMeta.UPLOADS_ACCOUNT_NAME + IS_EQUAL, accountName);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getCurrentUploadsForAccount from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: getCurrentUploadsForAccount\n\n        Method Code: blic OCUpload[] getCurrentUploadsForAccount(final @NonNull String accountName) {\n        return getUploads(ProviderTableMeta.UPLOADS_STATUS + EQUAL + UploadStatus.UPLOAD_IN_PROGRESS.value + AND +\n                              ProviderTableMeta.UPLOADS_ACCOUNT_NAME + IS_EQUAL, accountName);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getCurrentUploadsForAccount(accountName: String) -> [OCUpload] {\n    return getUploads(condition: \"\\(ProviderTableMeta.UPLOADS_STATUS) = \\(UploadStatus.UPLOAD_IN_PROGRESS.rawValue) AND \\(ProviderTableMeta.UPLOADS_ACCOUNT_NAME) = ?\", accountName: accountName)\n}\n```"
    },
    {
        "method_name": "getCurrentUploadsForAccountPageAscById",
        "method_code": "blic List<OCUpload> getCurrentUploadsForAccountPageAscById(final long afterId, final @NonNull String accountName) {\n        final String selection = ProviderTableMeta.UPLOADS_STATUS + EQUAL + UploadStatus.UPLOAD_IN_PROGRESS.value +\n            AND + ProviderTableMeta.UPLOADS_ACCOUNT_NAME + IS_EQUAL;\n        return getUploadPage(QUERY_PAGE_SIZE, afterId, false, selection, accountName);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getCurrentUploadsForAccountPageAscById from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: getCurrentUploadsForAccountPageAscById\n\n        Method Code: blic List<OCUpload> getCurrentUploadsForAccountPageAscById(final long afterId, final @NonNull String accountName) {\n        final String selection = ProviderTableMeta.UPLOADS_STATUS + EQUAL + UploadStatus.UPLOAD_IN_PROGRESS.value +\n            AND + ProviderTableMeta.UPLOADS_ACCOUNT_NAME + IS_EQUAL;\n        return getUploadPage(QUERY_PAGE_SIZE, afterId, false, selection, accountName);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getCurrentUploadsForAccountPageAscById(afterId: Int64, accountName: String) -> [OCUpload] {\n    let selection = \"\\(ProviderTableMeta.UPLOADS_STATUS) = \\(UploadStatus.UPLOAD_IN_PROGRESS.rawValue) AND \\(ProviderTableMeta.UPLOADS_ACCOUNT_NAME) = ?\"\n    return getUploadPage(pageSize: QUERY_PAGE_SIZE, afterId: afterId, ascending: false, selection: selection, accountName: accountName)\n}\n```"
    },
    {
        "method_name": "getCurrentAndPendingUploadsForAccountPageAscById",
        "method_code": "blic List<OCUpload> getCurrentAndPendingUploadsForAccountPageAscById(final long afterId, final @NonNull String accountName) {\n        final String selection = getInProgressAndDelayedUploadsSelection();\n        return getUploadPage(QUERY_PAGE_SIZE, afterId, false, selection, accountName);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getCurrentAndPendingUploadsForAccountPageAscById from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: getCurrentAndPendingUploadsForAccountPageAscById\n\n        Method Code: blic List<OCUpload> getCurrentAndPendingUploadsForAccountPageAscById(final long afterId, final @NonNull String accountName) {\n        final String selection = getInProgressAndDelayedUploadsSelection();\n        return getUploadPage(QUERY_PAGE_SIZE, afterId, false, selection, accountName);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getCurrentAndPendingUploadsForAccountPageAscById(afterId: Int64, accountName: String) -> [OCUpload] {\n    let selection = getInProgressAndDelayedUploadsSelection()\n    return getUploadPage(queryPageSize: QUERY_PAGE_SIZE, afterId: afterId, ascending: false, selection: selection, accountName: accountName)\n}\n```"
    },
    {
        "method_name": "getFailedUploads",
        "method_code": "blic OCUpload[] getFailedUploads() {\n        return getUploads(\"(\" + ProviderTableMeta.UPLOADS_STATUS + IS_EQUAL +\n                              OR + ProviderTableMeta.UPLOADS_LAST_RESULT +\n                              EQUAL + UploadResult.DELAYED_FOR_WIFI.getValue() +\n                              OR + ProviderTableMeta.UPLOADS_LAST_RESULT +\n                              EQUAL + UploadResult.LOCK_FAILED.getValue() +\n                              OR + ProviderTableMeta.UPLOADS_LAST_RESULT +\n                              EQUAL + UploadResult.DELAYED_FOR_CHARGING.getValue() +\n                              OR + ProviderTableMeta.UPLOADS_LAST_RESULT +\n                              EQUAL + UploadResult.DELAYED_IN_POWER_SAVE_MODE.getValue() +\n                              \" ) AND \" + ProviderTableMeta.UPLOADS_LAST_RESULT +\n                              \"!= \" + UploadResult.VIRUS_DETECTED.getValue()\n            , String.valueOf(UploadStatus.UPLOAD_FAILED.value));\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getFailedUploads from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: getFailedUploads\n\n        Method Code: blic OCUpload[] getFailedUploads() {\n        return getUploads(\"(\" + ProviderTableMeta.UPLOADS_STATUS + IS_EQUAL +\n                              OR + ProviderTableMeta.UPLOADS_LAST_RESULT +\n                              EQUAL + UploadResult.DELAYED_FOR_WIFI.getValue() +\n                              OR + ProviderTableMeta.UPLOADS_LAST_RESULT +\n                              EQUAL + UploadResult.LOCK_FAILED.getValue() +\n                              OR + ProviderTableMeta.UPLOADS_LAST_RESULT +\n                              EQUAL + UploadResult.DELAYED_FOR_CHARGING.getValue() +\n                              OR + ProviderTableMeta.UPLOADS_LAST_RESULT +\n                              EQUAL + UploadResult.DELAYED_IN_POWER_SAVE_MODE.getValue() +\n                              \" ) AND \" + ProviderTableMeta.UPLOADS_LAST_RESULT +\n                              \"!= \" + UploadResult.VIRUS_DETECTED.getValue()\n            , String.valueOf(UploadStatus.UPLOAD_FAILED.value));\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getFailedUploads() -> [OCUpload] {\n    return getUploads(\"(\" + ProviderTableMeta.UPLOADS_STATUS + IS_EQUAL +\n                      OR + ProviderTableMeta.UPLOADS_LAST_RESULT +\n                      EQUAL + UploadResult.DELAYED_FOR_WIFI.rawValue +\n                      OR + ProviderTableMeta.UPLOADS_LAST_RESULT +\n                      EQUAL + UploadResult.LOCK_FAILED.rawValue +\n                      OR + ProviderTableMeta.UPLOADS_LAST_RESULT +\n                      EQUAL + UploadResult.DELAYED_FOR_CHARGING.rawValue +\n                      OR + ProviderTableMeta.UPLOADS_LAST_RESULT +\n                      EQUAL + UploadResult.DELAYED_IN_POWER_SAVE_MODE.rawValue +\n                      \" ) AND \" + ProviderTableMeta.UPLOADS_LAST_RESULT +\n                      \"!= \" + UploadResult.VIRUS_DETECTED.rawValue,\n                      String(UploadStatus.UPLOAD_FAILED.rawValue))\n}\n```"
    },
    {
        "method_name": "getUploadsForAccount",
        "method_code": "blic OCUpload[] getUploadsForAccount(final @NonNull String accountName) {\n        return getUploads(ProviderTableMeta.UPLOADS_ACCOUNT_NAME + IS_EQUAL, accountName);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getUploadsForAccount from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: getUploadsForAccount\n\n        Method Code: blic OCUpload[] getUploadsForAccount(final @NonNull String accountName) {\n        return getUploads(ProviderTableMeta.UPLOADS_ACCOUNT_NAME + IS_EQUAL, accountName);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getUploadsForAccount(accountName: String) -> [OCUpload] {\n    return getUploads(predicate: \"\\(ProviderTableMeta.UPLOADS_ACCOUNT_NAME) == \\(accountName)\")\n}\n```"
    },
    {
        "method_name": "getFinishedUploadsForCurrentAccount",
        "method_code": "blic OCUpload[] getFinishedUploadsForCurrentAccount() {\n        User user = currentAccountProvider.getUser();\n\n        return getUploads(ProviderTableMeta.UPLOADS_STATUS + EQUAL + UploadStatus.UPLOAD_SUCCEEDED.value + AND +\n                              ProviderTableMeta.UPLOADS_ACCOUNT_NAME + IS_EQUAL, user.getAccountName());\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getFinishedUploadsForCurrentAccount from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: getFinishedUploadsForCurrentAccount\n\n        Method Code: blic OCUpload[] getFinishedUploadsForCurrentAccount() {\n        User user = currentAccountProvider.getUser();\n\n        return getUploads(ProviderTableMeta.UPLOADS_STATUS + EQUAL + UploadStatus.UPLOAD_SUCCEEDED.value + AND +\n                              ProviderTableMeta.UPLOADS_ACCOUNT_NAME + IS_EQUAL, user.getAccountName());\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getFinishedUploadsForCurrentAccount() -> [OCUpload] {\n    let user = currentAccountProvider.getUser()\n    return getUploads(\"\\(ProviderTableMeta.UPLOADS_STATUS) = \\(UploadStatus.UPLOAD_SUCCEEDED.rawValue) AND \\(ProviderTableMeta.UPLOADS_ACCOUNT_NAME) = ?\", user.getAccountName())\n}\n```"
    },
    {
        "method_name": "getCancelledUploadsForCurrentAccount",
        "method_code": "blic OCUpload[] getCancelledUploadsForCurrentAccount() {\n        User user = currentAccountProvider.getUser();\n\n        return getUploads(ProviderTableMeta.UPLOADS_STATUS + EQUAL + UploadStatus.UPLOAD_CANCELLED.value + AND +\n                              ProviderTableMeta.UPLOADS_ACCOUNT_NAME + IS_EQUAL, user.getAccountName());\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getCancelledUploadsForCurrentAccount from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: getCancelledUploadsForCurrentAccount\n\n        Method Code: blic OCUpload[] getCancelledUploadsForCurrentAccount() {\n        User user = currentAccountProvider.getUser();\n\n        return getUploads(ProviderTableMeta.UPLOADS_STATUS + EQUAL + UploadStatus.UPLOAD_CANCELLED.value + AND +\n                              ProviderTableMeta.UPLOADS_ACCOUNT_NAME + IS_EQUAL, user.getAccountName());\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getCancelledUploadsForCurrentAccount() -> [OCUpload] {\n    let user = currentAccountProvider.getUser()\n    return getUploads(\"\\(ProviderTableMeta.UPLOADS_STATUS) = \\(UploadStatus.UPLOAD_CANCELLED.rawValue) AND \\(ProviderTableMeta.UPLOADS_ACCOUNT_NAME) = ?\", user.getAccountName())\n}\n```"
    },
    {
        "method_name": "getFinishedUploads",
        "method_code": "blic OCUpload[] getFinishedUploads() {\n        return getUploads(ProviderTableMeta.UPLOADS_STATUS + EQUAL + UploadStatus.UPLOAD_SUCCEEDED.value, (String[]) null);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getFinishedUploads from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: getFinishedUploads\n\n        Method Code: blic OCUpload[] getFinishedUploads() {\n        return getUploads(ProviderTableMeta.UPLOADS_STATUS + EQUAL + UploadStatus.UPLOAD_SUCCEEDED.value, (String[]) null);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getFinishedUploads() -> [OCUpload] {\n    return getUploads(condition: \"\\(ProviderTableMeta.UPLOADS_STATUS) = \\(UploadStatus.UPLOAD_SUCCEEDED.rawValue)\", args: nil)\n}\n```"
    },
    {
        "method_name": "getFailedButNotDelayedUploadsForCurrentAccount",
        "method_code": "blic OCUpload[] getFailedButNotDelayedUploadsForCurrentAccount() {\n        User user = currentAccountProvider.getUser();\n\n        return getUploads(ProviderTableMeta.UPLOADS_STATUS + EQUAL + UploadStatus.UPLOAD_FAILED.value +\n                              AND + ProviderTableMeta.UPLOADS_LAST_RESULT +\n                              ANGLE_BRACKETS + UploadResult.DELAYED_FOR_WIFI.getValue() +\n                              AND + ProviderTableMeta.UPLOADS_LAST_RESULT +\n                              ANGLE_BRACKETS + UploadResult.LOCK_FAILED.getValue() +\n                              AND + ProviderTableMeta.UPLOADS_LAST_RESULT +\n                              ANGLE_BRACKETS + UploadResult.DELAYED_FOR_CHARGING.getValue() +\n                              AND + ProviderTableMeta.UPLOADS_LAST_RESULT +\n                              ANGLE_BRACKETS + UploadResult.DELAYED_IN_POWER_SAVE_MODE.getValue() +\n                              AND + ProviderTableMeta.UPLOADS_ACCOUNT_NAME + IS_EQUAL,\n                          user.getAccountName());\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getFailedButNotDelayedUploadsForCurrentAccount from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: getFailedButNotDelayedUploadsForCurrentAccount\n\n        Method Code: blic OCUpload[] getFailedButNotDelayedUploadsForCurrentAccount() {\n        User user = currentAccountProvider.getUser();\n\n        return getUploads(ProviderTableMeta.UPLOADS_STATUS + EQUAL + UploadStatus.UPLOAD_FAILED.value +\n                              AND + ProviderTableMeta.UPLOADS_LAST_RESULT +\n                              ANGLE_BRACKETS + UploadResult.DELAYED_FOR_WIFI.getValue() +\n                              AND + ProviderTableMeta.UPLOADS_LAST_RESULT +\n                              ANGLE_BRACKETS + UploadResult.LOCK_FAILED.getValue() +\n                              AND + ProviderTableMeta.UPLOADS_LAST_RESULT +\n                              ANGLE_BRACKETS + UploadResult.DELAYED_FOR_CHARGING.getValue() +\n                              AND + ProviderTableMeta.UPLOADS_LAST_RESULT +\n                              ANGLE_BRACKETS + UploadResult.DELAYED_IN_POWER_SAVE_MODE.getValue() +\n                              AND + ProviderTableMeta.UPLOADS_ACCOUNT_NAME + IS_EQUAL,\n                          user.getAccountName());\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getFailedButNotDelayedUploadsForCurrentAccount() -> [OCUpload] {\n    guard let user = currentAccountProvider.getUser() else {\n        return []\n    }\n\n    return getUploads(\n        \"\\(ProviderTableMeta.UPLOADS_STATUS) = \\(UploadStatus.UPLOAD_FAILED.rawValue) AND \" +\n        \"\\(ProviderTableMeta.UPLOADS_LAST_RESULT) > \\(UploadResult.DELAYED_FOR_WIFI.rawValue) AND \" +\n        \"\\(ProviderTableMeta.UPLOADS_LAST_RESULT) > \\(UploadResult.LOCK_FAILED.rawValue) AND \" +\n        \"\\(ProviderTableMeta.UPLOADS_LAST_RESULT) > \\(UploadResult.DELAYED_FOR_CHARGING.rawValue) AND \" +\n        \"\\(ProviderTableMeta.UPLOADS_LAST_RESULT) > \\(UploadResult.DELAYED_IN_POWER_SAVE_MODE.rawValue) AND \" +\n        \"\\(ProviderTableMeta.UPLOADS_ACCOUNT_NAME) = '\\(user.getAccountName())'\"\n    )\n}\n```"
    },
    {
        "method_name": "getFailedButNotDelayedUploads",
        "method_code": "blic OCUpload[] getFailedButNotDelayedUploads() {\n\n        return getUploads(ProviderTableMeta.UPLOADS_STATUS + EQUAL + UploadStatus.UPLOAD_FAILED.value + AND +\n                              ProviderTableMeta.UPLOADS_LAST_RESULT + ANGLE_BRACKETS + UploadResult.LOCK_FAILED.getValue() +\n                              AND + ProviderTableMeta.UPLOADS_LAST_RESULT +\n                              ANGLE_BRACKETS + UploadResult.DELAYED_FOR_WIFI.getValue() +\n                              AND + ProviderTableMeta.UPLOADS_LAST_RESULT +\n                              ANGLE_BRACKETS + UploadResult.DELAYED_FOR_CHARGING.getValue() +\n                              AND + ProviderTableMeta.UPLOADS_LAST_RESULT +\n                              ANGLE_BRACKETS + UploadResult.DELAYED_IN_POWER_SAVE_MODE.getValue(),\n                          (String[]) null\n                         );\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getFailedButNotDelayedUploads from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: getFailedButNotDelayedUploads\n\n        Method Code: blic OCUpload[] getFailedButNotDelayedUploads() {\n\n        return getUploads(ProviderTableMeta.UPLOADS_STATUS + EQUAL + UploadStatus.UPLOAD_FAILED.value + AND +\n                              ProviderTableMeta.UPLOADS_LAST_RESULT + ANGLE_BRACKETS + UploadResult.LOCK_FAILED.getValue() +\n                              AND + ProviderTableMeta.UPLOADS_LAST_RESULT +\n                              ANGLE_BRACKETS + UploadResult.DELAYED_FOR_WIFI.getValue() +\n                              AND + ProviderTableMeta.UPLOADS_LAST_RESULT +\n                              ANGLE_BRACKETS + UploadResult.DELAYED_FOR_CHARGING.getValue() +\n                              AND + ProviderTableMeta.UPLOADS_LAST_RESULT +\n                              ANGLE_BRACKETS + UploadResult.DELAYED_IN_POWER_SAVE_MODE.getValue(),\n                          (String[]) null\n                         );\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getFailedButNotDelayedUploads() -> [OCUpload] {\n    return getUploads(\n        \"\\(ProviderTableMeta.UPLOADS_STATUS) = \\(UploadStatus.UPLOAD_FAILED.rawValue) AND \" +\n        \"\\(ProviderTableMeta.UPLOADS_LAST_RESULT) > \\(UploadResult.LOCK_FAILED.rawValue) AND \" +\n        \"\\(ProviderTableMeta.UPLOADS_LAST_RESULT) > \\(UploadResult.DELAYED_FOR_WIFI.rawValue) AND \" +\n        \"\\(ProviderTableMeta.UPLOADS_LAST_RESULT) > \\(UploadResult.DELAYED_FOR_CHARGING.rawValue) AND \" +\n        \"\\(ProviderTableMeta.UPLOADS_LAST_RESULT) > \\(UploadResult.DELAYED_IN_POWER_SAVE_MODE.rawValue)\",\n        nil\n    )\n}\n```"
    },
    {
        "method_name": "getDB",
        "method_code": "ivate ContentResolver getDB() {\n        return contentResolver;\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getDB from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: getDB\n\n        Method Code: ivate ContentResolver getDB() {\n        return contentResolver;\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getDB() -> ContentResolver {\n    return contentResolver\n}\n```"
    },
    {
        "method_name": "clearFailedButNotDelayedUploads",
        "method_code": "blic long clearFailedButNotDelayedUploads() {\n        User user = currentAccountProvider.getUser();\n        final long deleted = getDB().delete(\n            ProviderTableMeta.CONTENT_URI_UPLOADS,\n            ProviderTableMeta.UPLOADS_STATUS + EQUAL + UploadStatus.UPLOAD_FAILED.value +\n                AND + ProviderTableMeta.UPLOADS_LAST_RESULT +\n                ANGLE_BRACKETS + UploadResult.LOCK_FAILED.getValue() +\n                AND + ProviderTableMeta.UPLOADS_LAST_RESULT +\n                ANGLE_BRACKETS + UploadResult.DELAYED_FOR_WIFI.getValue() +\n                AND + ProviderTableMeta.UPLOADS_LAST_RESULT +\n                ANGLE_BRACKETS + UploadResult.DELAYED_FOR_CHARGING.getValue() +\n                AND + ProviderTableMeta.UPLOADS_LAST_RESULT +\n                ANGLE_BRACKETS + UploadResult.DELAYED_IN_POWER_SAVE_MODE.getValue() +\n                AND + ProviderTableMeta.UPLOADS_ACCOUNT_NAME + IS_EQUAL,\n            new String[]{user.getAccountName()}\n                                           );\n        Log_OC.d(TAG, \"delete all failed uploads but those delayed for Wifi\");\n        if (deleted > 0) {\n            notifyObserversNow();\n        }\n        return deleted;\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled clearFailedButNotDelayedUploads from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: clearFailedButNotDelayedUploads\n\n        Method Code: blic long clearFailedButNotDelayedUploads() {\n        User user = currentAccountProvider.getUser();\n        final long deleted = getDB().delete(\n            ProviderTableMeta.CONTENT_URI_UPLOADS,\n            ProviderTableMeta.UPLOADS_STATUS + EQUAL + UploadStatus.UPLOAD_FAILED.value +\n                AND + ProviderTableMeta.UPLOADS_LAST_RESULT +\n                ANGLE_BRACKETS + UploadResult.LOCK_FAILED.getValue() +\n                AND + ProviderTableMeta.UPLOADS_LAST_RESULT +\n                ANGLE_BRACKETS + UploadResult.DELAYED_FOR_WIFI.getValue() +\n                AND + ProviderTableMeta.UPLOADS_LAST_RESULT +\n                ANGLE_BRACKETS + UploadResult.DELAYED_FOR_CHARGING.getValue() +\n                AND + ProviderTableMeta.UPLOADS_LAST_RESULT +\n                ANGLE_BRACKETS + UploadResult.DELAYED_IN_POWER_SAVE_MODE.getValue() +\n                AND + ProviderTableMeta.UPLOADS_ACCOUNT_NAME + IS_EQUAL,\n            new String[]{user.getAccountName()}\n                                           );\n        Log_OC.d(TAG, \"delete all failed uploads but those delayed for Wifi\");\n        if (deleted > 0) {\n            notifyObserversNow();\n        }\n        return deleted;\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc clearFailedButNotDelayedUploads() -> Int64 {\n    guard let user = currentAccountProvider.getUser() else { return 0 }\n    let deleted = getDB().delete(\n        ProviderTableMeta.CONTENT_URI_UPLOADS,\n        selection: \"\\(ProviderTableMeta.UPLOADS_STATUS) = \\(UploadStatus.UPLOAD_FAILED.rawValue) AND \" +\n                   \"\\(ProviderTableMeta.UPLOADS_LAST_RESULT) > \\(UploadResult.LOCK_FAILED.rawValue) AND \" +\n                   \"\\(ProviderTableMeta.UPLOADS_LAST_RESULT) > \\(UploadResult.DELAYED_FOR_WIFI.rawValue) AND \" +\n                   \"\\(ProviderTableMeta.UPLOADS_LAST_RESULT) > \\(UploadResult.DELAYED_FOR_CHARGING.rawValue) AND \" +\n                   \"\\(ProviderTableMeta.UPLOADS_LAST_RESULT) > \\(UploadResult.DELAYED_IN_POWER_SAVE_MODE.rawValue) AND \" +\n                   \"\\(ProviderTableMeta.UPLOADS_ACCOUNT_NAME) = ?\",\n        selectionArgs: [user.getAccountName()]\n    )\n    Log_OC.d(TAG, \"delete all failed uploads but those delayed for Wifi\")\n    if deleted > 0 {\n        notifyObserversNow()\n    }\n    return deleted\n}\n```"
    },
    {
        "method_name": "clearCancelledUploadsForCurrentAccount",
        "method_code": "blic void clearCancelledUploadsForCurrentAccount() {\n        User user = currentAccountProvider.getUser();\n        final long deleted = getDB().delete(\n            ProviderTableMeta.CONTENT_URI_UPLOADS,\n            ProviderTableMeta.UPLOADS_STATUS + EQUAL + UploadStatus.UPLOAD_CANCELLED.value + AND +\n                ProviderTableMeta.UPLOADS_ACCOUNT_NAME + IS_EQUAL, new String[]{user.getAccountName()}\n                                           );\n\n        Log_OC.d(TAG, \"delete all cancelled uploads\");\n        if (deleted > 0) {\n            notifyObserversNow();\n        }\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled clearCancelledUploadsForCurrentAccount from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: clearCancelledUploadsForCurrentAccount\n\n        Method Code: blic void clearCancelledUploadsForCurrentAccount() {\n        User user = currentAccountProvider.getUser();\n        final long deleted = getDB().delete(\n            ProviderTableMeta.CONTENT_URI_UPLOADS,\n            ProviderTableMeta.UPLOADS_STATUS + EQUAL + UploadStatus.UPLOAD_CANCELLED.value + AND +\n                ProviderTableMeta.UPLOADS_ACCOUNT_NAME + IS_EQUAL, new String[]{user.getAccountName()}\n                                           );\n\n        Log_OC.d(TAG, \"delete all cancelled uploads\");\n        if (deleted > 0) {\n            notifyObserversNow();\n        }\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc clearCancelledUploadsForCurrentAccount() {\n    guard let user = currentAccountProvider.getUser() else { return }\n    let deleted = getDB().delete(\n        ProviderTableMeta.CONTENT_URI_UPLOADS,\n        where: \"\\(ProviderTableMeta.UPLOADS_STATUS) = ? AND \\(ProviderTableMeta.UPLOADS_ACCOUNT_NAME) = ?\",\n        args: [UploadStatus.UPLOAD_CANCELLED.rawValue, user.getAccountName()]\n    )\n\n    Log_OC.d(TAG, \"delete all cancelled uploads\")\n    if deleted > 0 {\n        notifyObserversNow()\n    }\n}\n```"
    },
    {
        "method_name": "clearSuccessfulUploads",
        "method_code": "blic long clearSuccessfulUploads() {\n        User user = currentAccountProvider.getUser();\n        final long deleted = getDB().delete(\n            ProviderTableMeta.CONTENT_URI_UPLOADS,\n            ProviderTableMeta.UPLOADS_STATUS + EQUAL + UploadStatus.UPLOAD_SUCCEEDED.value + AND +\n                ProviderTableMeta.UPLOADS_ACCOUNT_NAME + IS_EQUAL, new String[]{user.getAccountName()}\n                                           );\n\n        Log_OC.d(TAG, \"delete all successful uploads\");\n        if (deleted > 0) {\n            notifyObserversNow();\n        }\n        return deleted;\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled clearSuccessfulUploads from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: clearSuccessfulUploads\n\n        Method Code: blic long clearSuccessfulUploads() {\n        User user = currentAccountProvider.getUser();\n        final long deleted = getDB().delete(\n            ProviderTableMeta.CONTENT_URI_UPLOADS,\n            ProviderTableMeta.UPLOADS_STATUS + EQUAL + UploadStatus.UPLOAD_SUCCEEDED.value + AND +\n                ProviderTableMeta.UPLOADS_ACCOUNT_NAME + IS_EQUAL, new String[]{user.getAccountName()}\n                                           );\n\n        Log_OC.d(TAG, \"delete all successful uploads\");\n        if (deleted > 0) {\n            notifyObserversNow();\n        }\n        return deleted;\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc clearSuccessfulUploads() -> Int64 {\n    guard let user = currentAccountProvider.getUser() else { return 0 }\n    let deleted = getDB().delete(\n        ProviderTableMeta.CONTENT_URI_UPLOADS,\n        where: \"\\(ProviderTableMeta.UPLOADS_STATUS) = ? AND \\(ProviderTableMeta.UPLOADS_ACCOUNT_NAME) = ?\",\n        args: [UploadStatus.UPLOAD_SUCCEEDED.value, user.getAccountName()]\n    )\n\n    Log_OC.d(TAG, \"delete all successful uploads\")\n    if deleted > 0 {\n        notifyObserversNow()\n    }\n    return deleted\n}\n```"
    },
    {
        "method_name": "updateDatabaseUploadResult",
        "method_code": "blic void updateDatabaseUploadResult(RemoteOperationResult uploadResult, UploadFileOperation upload) {\n        // result: success or fail notification\n        Log_OC.d(TAG, \"updateDatabaseUploadResult uploadResult: \" + uploadResult + \" upload: \" + upload);\n\n        if (uploadResult.isCancelled()) {\n            removeUpload(\n                upload.getUser().getAccountName(),\n                upload.getRemotePath()\n                        );\n        } else {\n            String localPath = (FileUploadWorker.LOCAL_BEHAVIOUR_MOVE == upload.getLocalBehaviour())\n                ? upload.getStoragePath() : null;\n\n            if (uploadResult.isSuccess()) {\n                updateUploadStatus(\n                    upload.getOCUploadId(),\n                    UploadStatus.UPLOAD_SUCCEEDED,\n                    UploadResult.UPLOADED,\n                    upload.getRemotePath(),\n                    localPath\n                                  );\n            } else if (uploadResult.getCode() == RemoteOperationResult.ResultCode.SYNC_CONFLICT &&\n                new FileUploadHelper().isSameFileOnRemote(\n                    upload.getUser(), new File(upload.getStoragePath()), upload.getRemotePath(), upload.getContext())) {\n\n                updateUploadStatus(\n                    upload.getOCUploadId(),\n                    UploadStatus.UPLOAD_SUCCEEDED,\n                    UploadResult.SAME_FILE_CONFLICT,\n                    upload.getRemotePath(),\n                    localPath\n                                  );\n            } else if (uploadResult.getCode() == RemoteOperationResult.ResultCode.LOCAL_FILE_NOT_FOUND) {\n                updateUploadStatus(\n                    upload.getOCUploadId(),\n                    UploadStatus.UPLOAD_SUCCEEDED,\n                    UploadResult.FILE_NOT_FOUND,\n                    upload.getRemotePath(),\n                    localPath\n                                  );\n            } else {\n                updateUploadStatus(\n                    upload.getOCUploadId(),\n                    UploadStatus.UPLOAD_FAILED,\n                    UploadResult.fromOperationResult(uploadResult),\n                    upload.getRemotePath(),\n                    localPath\n                                  );\n            }\n        }\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled updateDatabaseUploadResult from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: updateDatabaseUploadResult\n\n        Method Code: blic void updateDatabaseUploadResult(RemoteOperationResult uploadResult, UploadFileOperation upload) {\n        // result: success or fail notification\n        Log_OC.d(TAG, \"updateDatabaseUploadResult uploadResult: \" + uploadResult + \" upload: \" + upload);\n\n        if (uploadResult.isCancelled()) {\n            removeUpload(\n                upload.getUser().getAccountName(),\n                upload.getRemotePath()\n                        );\n        } else {\n            String localPath = (FileUploadWorker.LOCAL_BEHAVIOUR_MOVE == upload.getLocalBehaviour())\n                ? upload.getStoragePath() : null;\n\n            if (uploadResult.isSuccess()) {\n                updateUploadStatus(\n                    upload.getOCUploadId(),\n                    UploadStatus.UPLOAD_SUCCEEDED,\n                    UploadResult.UPLOADED,\n                    upload.getRemotePath(),\n                    localPath\n                                  );\n            } else if (uploadResult.getCode() == RemoteOperationResult.ResultCode.SYNC_CONFLICT &&\n                new FileUploadHelper().isSameFileOnRemote(\n                    upload.getUser(), new File(upload.getStoragePath()), upload.getRemotePath(), upload.getContext())) {\n\n                updateUploadStatus(\n                    upload.getOCUploadId(),\n                    UploadStatus.UPLOAD_SUCCEEDED,\n                    UploadResult.SAME_FILE_CONFLICT,\n                    upload.getRemotePath(),\n                    localPath\n                                  );\n            } else if (uploadResult.getCode() == RemoteOperationResult.ResultCode.LOCAL_FILE_NOT_FOUND) {\n                updateUploadStatus(\n                    upload.getOCUploadId(),\n                    UploadStatus.UPLOAD_SUCCEEDED,\n                    UploadResult.FILE_NOT_FOUND,\n                    upload.getRemotePath(),\n                    localPath\n                                  );\n            } else {\n                updateUploadStatus(\n                    upload.getOCUploadId(),\n                    UploadStatus.UPLOAD_FAILED,\n                    UploadResult.fromOperationResult(uploadResult),\n                    upload.getRemotePath(),\n                    localPath\n                                  );\n            }\n        }\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc updateDatabaseUploadResult(uploadResult: RemoteOperationResult, upload: UploadFileOperation) {\n    // result: success or fail notification\n    Log_OC.d(TAG, \"updateDatabaseUploadResult uploadResult: \\(uploadResult) upload: \\(upload)\")\n\n    if uploadResult.isCancelled() {\n        removeUpload(\n            accountName: upload.getUser().getAccountName(),\n            remotePath: upload.getRemotePath()\n        )\n    } else {\n        let localPath = (FileUploadWorker.LOCAL_BEHAVIOUR_MOVE == upload.getLocalBehaviour()) ? upload.getStoragePath() : nil\n\n        if uploadResult.isSuccess() {\n            updateUploadStatus(\n                ocUploadId: upload.getOCUploadId(),\n                status: .UPLOAD_SUCCEEDED,\n                result: .UPLOADED,\n                remotePath: upload.getRemotePath(),\n                localPath: localPath\n            )\n        } else if uploadResult.getCode() == .SYNC_CONFLICT &&\n            FileUploadHelper().isSameFileOnRemote(\n                user: upload.getUser(), \n                file: File(upload.getStoragePath()), \n                remotePath: upload.getRemotePath(), \n                context: upload.getContext()) {\n\n            updateUploadStatus(\n                ocUploadId: upload.getOCUploadId(),\n                status: .UPLOAD_SUCCEEDED,\n                result: .SAME_FILE_CONFLICT,\n                remotePath: upload.getRemotePath(),\n                localPath: localPath\n            )\n        } else if uploadResult.getCode() == .LOCAL_FILE_NOT_FOUND {\n            updateUploadStatus(\n                ocUploadId: upload.getOCUploadId(),\n                status: .UPLOAD_SUCCEEDED,\n                result: .FILE_NOT_FOUND,\n                remotePath: upload.getRemotePath(),\n                localPath: localPath\n            )\n        } else {\n            updateUploadStatus(\n                ocUploadId: upload.getOCUploadId(),\n                status: .UPLOAD_FAILED,\n                result: UploadResult.fromOperationResult(uploadResult),\n                remotePath: upload.getRemotePath(),\n                localPath: localPath\n            )\n        }\n    }\n}\n```"
    },
    {
        "method_name": "updateDatabaseUploadStart",
        "method_code": "blic void updateDatabaseUploadStart(UploadFileOperation upload) {\n        String localPath = (FileUploadWorker.LOCAL_BEHAVIOUR_MOVE == upload.getLocalBehaviour())\n            ? upload.getStoragePath() : null;\n\n        updateUploadStatus(\n            upload.getOCUploadId(),\n            UploadStatus.UPLOAD_IN_PROGRESS,\n            UploadResult.UNKNOWN,\n            upload.getRemotePath(),\n            localPath\n                          );\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled updateDatabaseUploadStart from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: updateDatabaseUploadStart\n\n        Method Code: blic void updateDatabaseUploadStart(UploadFileOperation upload) {\n        String localPath = (FileUploadWorker.LOCAL_BEHAVIOUR_MOVE == upload.getLocalBehaviour())\n            ? upload.getStoragePath() : null;\n\n        updateUploadStatus(\n            upload.getOCUploadId(),\n            UploadStatus.UPLOAD_IN_PROGRESS,\n            UploadResult.UNKNOWN,\n            upload.getRemotePath(),\n            localPath\n                          );\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc updateDatabaseUploadStart(upload: UploadFileOperation) {\n    let localPath = (upload.getLocalBehaviour() == FileUploadWorker.LOCAL_BEHAVIOUR_MOVE) ? upload.getStoragePath() : nil\n\n    updateUploadStatus(\n        ocUploadId: upload.getOCUploadId(),\n        status: .uploadInProgress,\n        result: .unknown,\n        remotePath: upload.getRemotePath(),\n        localPath: localPath\n    )\n}\n```"
    },
    {
        "method_name": "failInProgressUploads",
        "method_code": "blic int failInProgressUploads(UploadResult fail) {\n        Log_OC.v(TAG, \"Updating state of any killed upload\");\n\n        ContentValues cv = new ContentValues();\n        cv.put(ProviderTableMeta.UPLOADS_STATUS, UploadStatus.UPLOAD_FAILED.getValue());\n        cv.put(\n            ProviderTableMeta.UPLOADS_LAST_RESULT,\n            fail != null ? fail.getValue() : UploadResult.UNKNOWN.getValue()\n              );\n        cv.put(ProviderTableMeta.UPLOADS_UPLOAD_END_TIMESTAMP, Calendar.getInstance().getTimeInMillis());\n\n        int result = getDB().update(\n            ProviderTableMeta.CONTENT_URI_UPLOADS,\n            cv,\n            ProviderTableMeta.UPLOADS_STATUS + \"=?\",\n            new String[]{String.valueOf(UploadStatus.UPLOAD_IN_PROGRESS.getValue())}\n                                   );\n\n        if (result == 0) {\n            Log_OC.v(TAG, \"No upload was killed\");\n        } else {\n            Log_OC.w(TAG, Integer.toString(result) + \" uploads where abruptly interrupted\");\n            notifyObserversNow();\n        }\n\n        return result;\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled failInProgressUploads from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: failInProgressUploads\n\n        Method Code: blic int failInProgressUploads(UploadResult fail) {\n        Log_OC.v(TAG, \"Updating state of any killed upload\");\n\n        ContentValues cv = new ContentValues();\n        cv.put(ProviderTableMeta.UPLOADS_STATUS, UploadStatus.UPLOAD_FAILED.getValue());\n        cv.put(\n            ProviderTableMeta.UPLOADS_LAST_RESULT,\n            fail != null ? fail.getValue() : UploadResult.UNKNOWN.getValue()\n              );\n        cv.put(ProviderTableMeta.UPLOADS_UPLOAD_END_TIMESTAMP, Calendar.getInstance().getTimeInMillis());\n\n        int result = getDB().update(\n            ProviderTableMeta.CONTENT_URI_UPLOADS,\n            cv,\n            ProviderTableMeta.UPLOADS_STATUS + \"=?\",\n            new String[]{String.valueOf(UploadStatus.UPLOAD_IN_PROGRESS.getValue())}\n                                   );\n\n        if (result == 0) {\n            Log_OC.v(TAG, \"No upload was killed\");\n        } else {\n            Log_OC.w(TAG, Integer.toString(result) + \" uploads where abruptly interrupted\");\n            notifyObserversNow();\n        }\n\n        return result;\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc failInProgressUploads(fail: UploadResult?) -> Int {\n    Log_OC.v(TAG, \"Updating state of any killed upload\")\n\n    var cv = [String: Any]()\n    cv[ProviderTableMeta.UPLOADS_STATUS] = UploadStatus.UPLOAD_FAILED.rawValue\n    cv[ProviderTableMeta.UPLOADS_LAST_RESULT] = fail?.rawValue ?? UploadResult.UNKNOWN.rawValue\n    cv[ProviderTableMeta.UPLOADS_UPLOAD_END_TIMESTAMP] = Date().timeIntervalSince1970 * 1000\n\n    let result = getDB().update(\n        ProviderTableMeta.CONTENT_URI_UPLOADS,\n        values: cv,\n        where: \"\\(ProviderTableMeta.UPLOADS_STATUS)=?\",\n        whereArgs: [String(UploadStatus.UPLOAD_IN_PROGRESS.rawValue)]\n    )\n\n    if result == 0 {\n        Log_OC.v(TAG, \"No upload was killed\")\n    } else {\n        Log_OC.w(TAG, \"\\(result) uploads where abruptly interrupted\")\n        notifyObserversNow()\n    }\n\n    return result\n}\n```"
    },
    {
        "method_name": "removeAllUploads",
        "method_code": "isibleForTesting\n    public int removeAllUploads() {\n        Log_OC.v(TAG, \"Delete all uploads!\");\n        return getDB().delete(\n            ProviderTableMeta.CONTENT_URI_UPLOADS,\n            \"\",\n            new String[]{});\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled removeAllUploads from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: removeAllUploads\n\n        Method Code: isibleForTesting\n    public int removeAllUploads() {\n        Log_OC.v(TAG, \"Delete all uploads!\");\n        return getDB().delete(\n            ProviderTableMeta.CONTENT_URI_UPLOADS,\n            \"\",\n            new String[]{});\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc removeAllUploads() -> Int {\n    OCLog.v(TAG, \"Delete all uploads!\")\n    return getDB().delete(ProviderTableMeta.CONTENT_URI_UPLOADS, where: \"\", args: [])\n}\n```"
    },
    {
        "method_name": "removeUserUploads",
        "method_code": "blic int removeUserUploads(User user) {\n        Log_OC.v(TAG, \"Delete all uploads for account \" + user.getAccountName());\n        return getDB().delete(\n            ProviderTableMeta.CONTENT_URI_UPLOADS,\n            ProviderTableMeta.UPLOADS_ACCOUNT_NAME + \"=?\",\n            new String[]{user.getAccountName()});\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled removeUserUploads from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: removeUserUploads\n\n        Method Code: blic int removeUserUploads(User user) {\n        Log_OC.v(TAG, \"Delete all uploads for account \" + user.getAccountName());\n        return getDB().delete(\n            ProviderTableMeta.CONTENT_URI_UPLOADS,\n            ProviderTableMeta.UPLOADS_ACCOUNT_NAME + \"=?\",\n            new String[]{user.getAccountName()});\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc removeUserUploads(user: User) -> Int {\n    Log_OC.v(TAG, \"Delete all uploads for account \\(user.getAccountName())\")\n    return getDB().delete(\n        ProviderTableMeta.CONTENT_URI_UPLOADS,\n        where: \"\\(ProviderTableMeta.UPLOADS_ACCOUNT_NAME)=?\",\n        args: [user.getAccountName()]\n    )\n}\n```"
    },
    {
        "method_name": "fromValue",
        "method_code": "blic static UploadStatus fromValue(int value) {\n            return switch (value) {\n                case 0 -> UPLOAD_IN_PROGRESS;\n                case 1 -> UPLOAD_FAILED;\n                case 2 -> UPLOAD_SUCCEEDED;\n                case 3 -> UPLOAD_CANCELLED;\n                default -> null;\n            };\n        }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled fromValue from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: fromValue\n\n        Method Code: blic static UploadStatus fromValue(int value) {\n            return switch (value) {\n                case 0 -> UPLOAD_IN_PROGRESS;\n                case 1 -> UPLOAD_FAILED;\n                case 2 -> UPLOAD_SUCCEEDED;\n                case 3 -> UPLOAD_CANCELLED;\n                default -> null;\n            };\n        }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nenum UploadStatus: Int {\n    case uploadInProgress = 0\n    case uploadFailed = 1\n    case uploadSucceeded = 2\n    case uploadCancelled = 3\n\n    static func fromValue(_ value: Int) -> UploadStatus? {\n        switch value {\n        case 0:\n            return .uploadInProgress\n        case 1:\n            return .uploadFailed\n        case 2:\n            return .uploadSucceeded\n        case 3:\n            return .uploadCancelled\n        default:\n            return nil\n        }\n    }\n}\n```"
    },
    {
        "method_name": "getValue",
        "method_code": "blic int getValue() {\n            return value;\n        }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getValue from UploadsStorageManager.java into Swift.\n\n        Input:\n\n        Method Name: getValue\n\n        Method Code: blic int getValue() {\n            return value;\n        }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getValue() -> Int {\n    return value\n}\n```"
    }
]