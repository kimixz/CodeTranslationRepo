[
    {
        "method_name": "setupDrawer",
        "method_code": "protected void setupDrawer() {\n        mDrawerLayout = findViewById(R.id.drawer_layout);\n\n        mNavigationView = findViewById(R.id.nav_view);\n        if (mNavigationView != null) {\n\n            // Setting up drawer header\n            mNavigationViewHeader = mNavigationView.getHeaderView(0);\n            updateHeader();\n\n            setupDrawerMenu(mNavigationView);\n            getAndDisplayUserQuota();\n            setupQuotaElement();\n        }\n\n        setupDrawerToggle();\n\n        if (getSupportActionBar() != null) {\n            getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setupDrawer from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: setupDrawer\n\n        Method Code: protected void setupDrawer() {\n        mDrawerLayout = findViewById(R.id.drawer_layout);\n\n        mNavigationView = findViewById(R.id.nav_view);\n        if (mNavigationView != null) {\n\n            // Setting up drawer header\n            mNavigationViewHeader = mNavigationView.getHeaderView(0);\n            updateHeader();\n\n            setupDrawerMenu(mNavigationView);\n            getAndDisplayUserQuota();\n            setupQuotaElement();\n        }\n\n        setupDrawerToggle();\n\n        if (getSupportActionBar() != null) {\n            getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setupDrawer() {\n    mDrawerLayout = findViewById(R.id.drawer_layout)\n\n    mNavigationView = findViewById(R.id.nav_view)\n    if mNavigationView != nil {\n\n        // Setting up drawer header\n        mNavigationViewHeader = mNavigationView?.headerView(forSection: 0)\n        updateHeader()\n\n        setupDrawerMenu(mNavigationView)\n        getAndDisplayUserQuota()\n        setupQuotaElement()\n    }\n\n    setupDrawerToggle()\n\n    if let actionBar = navigationController?.navigationBar {\n        actionBar.topItem?.setHidesBackButton(false, animated: true)\n    }\n}\n```"
    },
    {
        "method_name": "setupDrawerToggle",
        "method_code": "private void setupDrawerToggle() {\n        mDrawerToggle = new ActionBarDrawerToggle(this, mDrawerLayout, R.string.drawer_open, R.string.drawer_close) {\n            private boolean isMenuItemChecked = false;\n\n            @Override\n            public void onDrawerSlide(View drawerView, float slideOffset) {\n                super.onDrawerSlide(drawerView, slideOffset);\n                if (slideOffset > 0 && !isMenuItemChecked) {\n                    Integer menuItemIdFromTitle = getMenuItemIdFromTitle(DrawerActivity.this);\n                    if (menuItemIdFromTitle != null && menuItemIdFromTitle != menuItemId) {\n                        menuItemId = menuItemIdFromTitle;\n                    }\n                    setDrawerMenuItemChecked();\n                    isMenuItemChecked = true;\n                }\n            }\n\n            /** Called when a drawer has settled in a completely closed state. */\n            public void onDrawerClosed(View view) {\n                super.onDrawerClosed(view);\n                supportInvalidateOptionsMenu();\n                mDrawerToggle.setDrawerIndicatorEnabled(isDrawerIndicatorAvailable());\n\n                if (pendingRunnable != null) {\n                    new Handler().post(pendingRunnable);\n                    pendingRunnable = null;\n                }\n\n                isMenuItemChecked = false;\n                closeDrawer();\n            }\n\n            /** Called when a drawer has settled in a completely open state. */\n            public void onDrawerOpened(View drawerView) {\n                super.onDrawerOpened(drawerView);\n                mDrawerToggle.setDrawerIndicatorEnabled(true);\n                supportInvalidateOptionsMenu();\n            }\n        };\n\n        // Set the drawer toggle as the DrawerListener\n        mDrawerLayout.addDrawerListener(mDrawerToggle);\n        mDrawerToggle.setDrawerIndicatorEnabled(true);\n        mDrawerToggle.setDrawerSlideAnimationEnabled(true);\n        Drawable backArrow = ResourcesCompat.getDrawable(getResources(),\n                                                         R.drawable.ic_arrow_back,\n                                                         null);\n\n        if (backArrow != null) {\n            viewThemeUtils.platform.tintToolbarArrowDrawable(this, mDrawerToggle, backArrow);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setupDrawerToggle from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: setupDrawerToggle\n\n        Method Code: private void setupDrawerToggle() {\n        mDrawerToggle = new ActionBarDrawerToggle(this, mDrawerLayout, R.string.drawer_open, R.string.drawer_close) {\n            private boolean isMenuItemChecked = false;\n\n            @Override\n            public void onDrawerSlide(View drawerView, float slideOffset) {\n                super.onDrawerSlide(drawerView, slideOffset);\n                if (slideOffset > 0 && !isMenuItemChecked) {\n                    Integer menuItemIdFromTitle = getMenuItemIdFromTitle(DrawerActivity.this);\n                    if (menuItemIdFromTitle != null && menuItemIdFromTitle != menuItemId) {\n                        menuItemId = menuItemIdFromTitle;\n                    }\n                    setDrawerMenuItemChecked();\n                    isMenuItemChecked = true;\n                }\n            }\n\n            /** Called when a drawer has settled in a completely closed state. */\n            public void onDrawerClosed(View view) {\n                super.onDrawerClosed(view);\n                supportInvalidateOptionsMenu();\n                mDrawerToggle.setDrawerIndicatorEnabled(isDrawerIndicatorAvailable());\n\n                if (pendingRunnable != null) {\n                    new Handler().post(pendingRunnable);\n                    pendingRunnable = null;\n                }\n\n                isMenuItemChecked = false;\n                closeDrawer();\n            }\n\n            /** Called when a drawer has settled in a completely open state. */\n            public void onDrawerOpened(View drawerView) {\n                super.onDrawerOpened(drawerView);\n                mDrawerToggle.setDrawerIndicatorEnabled(true);\n                supportInvalidateOptionsMenu();\n            }\n        };\n\n        // Set the drawer toggle as the DrawerListener\n        mDrawerLayout.addDrawerListener(mDrawerToggle);\n        mDrawerToggle.setDrawerIndicatorEnabled(true);\n        mDrawerToggle.setDrawerSlideAnimationEnabled(true);\n        Drawable backArrow = ResourcesCompat.getDrawable(getResources(),\n                                                         R.drawable.ic_arrow_back,\n                                                         null);\n\n        if (backArrow != null) {\n            viewThemeUtils.platform.tintToolbarArrowDrawable(this, mDrawerToggle, backArrow);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setupDrawerToggle() {\n    mDrawerToggle = ActionBarDrawerToggle(self, mDrawerLayout, R.string.drawer_open, R.string.drawer_close)\n    \n    mDrawerToggle.drawerSlideCallback = { [weak self] drawerView, slideOffset in\n        guard let self = self else { return }\n        if slideOffset > 0 && !self.isMenuItemChecked {\n            if let menuItemIdFromTitle = self.getMenuItemIdFromTitle(self), menuItemIdFromTitle != self.menuItemId {\n                self.menuItemId = menuItemIdFromTitle\n            }\n            self.setDrawerMenuItemChecked()\n            self.isMenuItemChecked = true\n        }\n    }\n    \n    mDrawerToggle.drawerClosedCallback = { [weak self] view in\n        guard let self = self else { return }\n        self.supportInvalidateOptionsMenu()\n        self.mDrawerToggle.setDrawerIndicatorEnabled(self.isDrawerIndicatorAvailable())\n        \n        if let pendingRunnable = self.pendingRunnable {\n            DispatchQueue.main.async {\n                pendingRunnable()\n            }\n            self.pendingRunnable = nil\n        }\n        \n        self.isMenuItemChecked = false\n        self.closeDrawer()\n    }\n    \n    mDrawerToggle.drawerOpenedCallback = { [weak self] drawerView in\n        guard let self = self else { return }\n        self.mDrawerToggle.setDrawerIndicatorEnabled(true)\n        self.supportInvalidateOptionsMenu()\n    }\n    \n    mDrawerLayout.addDrawerListener(mDrawerToggle)\n    mDrawerToggle.setDrawerIndicatorEnabled(true)\n    mDrawerToggle.setDrawerSlideAnimationEnabled(true)\n    \n    if let backArrow = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_arrow_back, nil) {\n        viewThemeUtils.platform.tintToolbarArrowDrawable(self, mDrawerToggle, backArrow)\n    }\n}\n```"
    },
    {
        "method_name": "onDrawerSlide",
        "method_code": "@Override\n            public void onDrawerSlide(View drawerView, float slideOffset) {\n                super.onDrawerSlide(drawerView, slideOffset);\n                if (slideOffset > 0 && !isMenuItemChecked) {\n                    Integer menuItemIdFromTitle = getMenuItemIdFromTitle(DrawerActivity.this);\n                    if (menuItemIdFromTitle != null && menuItemIdFromTitle != menuItemId) {\n                        menuItemId = menuItemIdFromTitle;\n                    }\n                    setDrawerMenuItemChecked();\n                    isMenuItemChecked = true;\n                }\n            }",
        "prompt": "\n        Please translate the following Java (Android) method titled onDrawerSlide from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: onDrawerSlide\n\n        Method Code: @Override\n            public void onDrawerSlide(View drawerView, float slideOffset) {\n                super.onDrawerSlide(drawerView, slideOffset);\n                if (slideOffset > 0 && !isMenuItemChecked) {\n                    Integer menuItemIdFromTitle = getMenuItemIdFromTitle(DrawerActivity.this);\n                    if (menuItemIdFromTitle != null && menuItemIdFromTitle != menuItemId) {\n                        menuItemId = menuItemIdFromTitle;\n                    }\n                    setDrawerMenuItemChecked();\n                    isMenuItemChecked = true;\n                }\n            }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onDrawerSlide(_ drawerView: UIView, slideOffset: CGFloat) {\n    super.onDrawerSlide(drawerView, slideOffset)\n    if slideOffset > 0 && !isMenuItemChecked {\n        if let menuItemIdFromTitle = getMenuItemIdFromTitle(self), menuItemIdFromTitle != menuItemId {\n            menuItemId = menuItemIdFromTitle\n        }\n        setDrawerMenuItemChecked()\n        isMenuItemChecked = true\n    }\n}\n```"
    },
    {
        "method_name": "onDrawerClosed",
        "method_code": "public void onDrawerClosed(View view) {\n                super.onDrawerClosed(view);\n                supportInvalidateOptionsMenu();\n                mDrawerToggle.setDrawerIndicatorEnabled(isDrawerIndicatorAvailable());\n\n                if (pendingRunnable != null) {\n                    new Handler().post(pendingRunnable);\n                    pendingRunnable = null;\n                }\n\n                isMenuItemChecked = false;\n                closeDrawer();\n            }",
        "prompt": "\n        Please translate the following Java (Android) method titled onDrawerClosed from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: onDrawerClosed\n\n        Method Code: public void onDrawerClosed(View view) {\n                super.onDrawerClosed(view);\n                supportInvalidateOptionsMenu();\n                mDrawerToggle.setDrawerIndicatorEnabled(isDrawerIndicatorAvailable());\n\n                if (pendingRunnable != null) {\n                    new Handler().post(pendingRunnable);\n                    pendingRunnable = null;\n                }\n\n                isMenuItemChecked = false;\n                closeDrawer();\n            }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onDrawerClosed(_ view: UIView) {\n    super.onDrawerClosed(view)\n    invalidateOptionsMenu()\n    mDrawerToggle.isDrawerIndicatorEnabled = isDrawerIndicatorAvailable()\n\n    if let pendingRunnable = pendingRunnable {\n        DispatchQueue.main.async {\n            pendingRunnable()\n        }\n        self.pendingRunnable = nil\n    }\n\n    isMenuItemChecked = false\n    closeDrawer()\n}\n```"
    },
    {
        "method_name": "onDrawerOpened",
        "method_code": "public void onDrawerOpened(View drawerView) {\n                super.onDrawerOpened(drawerView);\n                mDrawerToggle.setDrawerIndicatorEnabled(true);\n                supportInvalidateOptionsMenu();\n            }",
        "prompt": "\n        Please translate the following Java (Android) method titled onDrawerOpened from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: onDrawerOpened\n\n        Method Code: public void onDrawerOpened(View drawerView) {\n                super.onDrawerOpened(drawerView);\n                mDrawerToggle.setDrawerIndicatorEnabled(true);\n                supportInvalidateOptionsMenu();\n            }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onDrawerOpened(_ drawerView: UIView) {\n    super.onDrawerOpened(drawerView)\n    mDrawerToggle.setDrawerIndicatorEnabled(true)\n    invalidateOptionsMenu()\n}\n```"
    },
    {
        "method_name": "setupQuotaElement",
        "method_code": "private void setupQuotaElement() {\n        mQuotaView = (LinearLayout) findQuotaViewById(R.id.drawer_quota);\n        mQuotaProgressBar = (LinearProgressIndicator) findQuotaViewById(R.id.drawer_quota_ProgressBar);\n        mQuotaTextPercentage = (TextView) findQuotaViewById(R.id.drawer_quota_percentage);\n        mQuotaTextLink = (TextView) findQuotaViewById(R.id.drawer_quota_link);\n        viewThemeUtils.material.colorProgressBar(mQuotaProgressBar);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setupQuotaElement from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: setupQuotaElement\n\n        Method Code: private void setupQuotaElement() {\n        mQuotaView = (LinearLayout) findQuotaViewById(R.id.drawer_quota);\n        mQuotaProgressBar = (LinearProgressIndicator) findQuotaViewById(R.id.drawer_quota_ProgressBar);\n        mQuotaTextPercentage = (TextView) findQuotaViewById(R.id.drawer_quota_percentage);\n        mQuotaTextLink = (TextView) findQuotaViewById(R.id.drawer_quota_link);\n        viewThemeUtils.material.colorProgressBar(mQuotaProgressBar);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setupQuotaElement() {\n    mQuotaView = findQuotaViewById(R.id.drawer_quota) as? LinearLayout\n    mQuotaProgressBar = findQuotaViewById(R.id.drawer_quota_ProgressBar) as? LinearProgressIndicator\n    mQuotaTextPercentage = findQuotaViewById(R.id.drawer_quota_percentage) as? TextView\n    mQuotaTextLink = findQuotaViewById(R.id.drawer_quota_link) as? TextView\n    viewThemeUtils.material.colorProgressBar(mQuotaProgressBar)\n}\n```"
    },
    {
        "method_name": "updateHeader",
        "method_code": "public void updateHeader() {\n        int primaryColor = themeColorUtils.unchangedPrimaryColor(getAccount(), this);\n        boolean isClientBranded = getResources().getBoolean(R.bool.is_branded_client);\n\n        if (getAccount() != null &&\n            getCapabilities().getServerBackground() != null && !isClientBranded) {\n\n            OCCapability capability = getCapabilities();\n            String logo = capability.getServerLogo();\n\n            // set background to primary color\n            LinearLayout drawerHeader = mNavigationViewHeader.findViewById(R.id.drawer_header_view);\n            drawerHeader.setBackgroundColor(primaryColor);\n\n            if (!TextUtils.isEmpty(logo) && URLUtil.isValidUrl(logo)) {\n                // background image\n                GenericRequestBuilder<Uri, InputStream, SVGorImage, Bitmap> requestBuilder = Glide.with(this)\n                    .using(Glide.buildStreamModelLoader(Uri.class, this), InputStream.class)\n                    .from(Uri.class)\n                    .as(SVGorImage.class)\n                    .transcode(new SvgOrImageBitmapTranscoder(128, 128), Bitmap.class)\n                    .sourceEncoder(new StreamEncoder())\n                    .cacheDecoder(new FileToStreamDecoder<>(new SvgOrImageDecoder()))\n                    .decoder(new SvgOrImageDecoder());\n\n                // background image\n                SimpleTarget<Bitmap> target = new SimpleTarget<>() {\n                    @Override\n                    public void onResourceReady(Bitmap resource, GlideAnimation glideAnimation) {\n\n                        Bitmap logo = resource;\n                        int width = resource.getWidth();\n                        int height = resource.getHeight();\n                        int max = Math.max(width, height);\n                        if (max > MAX_LOGO_SIZE_PX) {\n                            logo = BitmapUtils.scaleBitmap(resource, MAX_LOGO_SIZE_PX, width, height, max);\n                        }\n\n                        Drawable[] drawables = {new ColorDrawable(primaryColor),\n                            new BitmapDrawable(getResources(), logo)};\n                        LayerDrawable layerDrawable = new LayerDrawable(drawables);\n\n                        String name = capability.getServerName();\n                        setDrawerHeaderLogo(layerDrawable, name);\n                    }\n                };\n\n                requestBuilder\n                    .diskCacheStrategy(DiskCacheStrategy.SOURCE)\n                    .load(Uri.parse(logo))\n                    .into(target);\n            }\n        }\n\n        // hide ecosystem apps according to user preference or in branded client\n        LinearLayout banner = mNavigationViewHeader.findViewById(R.id.drawer_ecosystem_apps);\n        boolean shouldHideTopBanner = isClientBranded || !preferences.isShowEcosystemApps();\n\n        if (shouldHideTopBanner) {\n            hideTopBanner(banner);\n        } else {\n            showTopBanner(banner, primaryColor);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled updateHeader from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: updateHeader\n\n        Method Code: public void updateHeader() {\n        int primaryColor = themeColorUtils.unchangedPrimaryColor(getAccount(), this);\n        boolean isClientBranded = getResources().getBoolean(R.bool.is_branded_client);\n\n        if (getAccount() != null &&\n            getCapabilities().getServerBackground() != null && !isClientBranded) {\n\n            OCCapability capability = getCapabilities();\n            String logo = capability.getServerLogo();\n\n            // set background to primary color\n            LinearLayout drawerHeader = mNavigationViewHeader.findViewById(R.id.drawer_header_view);\n            drawerHeader.setBackgroundColor(primaryColor);\n\n            if (!TextUtils.isEmpty(logo) && URLUtil.isValidUrl(logo)) {\n                // background image\n                GenericRequestBuilder<Uri, InputStream, SVGorImage, Bitmap> requestBuilder = Glide.with(this)\n                    .using(Glide.buildStreamModelLoader(Uri.class, this), InputStream.class)\n                    .from(Uri.class)\n                    .as(SVGorImage.class)\n                    .transcode(new SvgOrImageBitmapTranscoder(128, 128), Bitmap.class)\n                    .sourceEncoder(new StreamEncoder())\n                    .cacheDecoder(new FileToStreamDecoder<>(new SvgOrImageDecoder()))\n                    .decoder(new SvgOrImageDecoder());\n\n                // background image\n                SimpleTarget<Bitmap> target = new SimpleTarget<>() {\n                    @Override\n                    public void onResourceReady(Bitmap resource, GlideAnimation glideAnimation) {\n\n                        Bitmap logo = resource;\n                        int width = resource.getWidth();\n                        int height = resource.getHeight();\n                        int max = Math.max(width, height);\n                        if (max > MAX_LOGO_SIZE_PX) {\n                            logo = BitmapUtils.scaleBitmap(resource, MAX_LOGO_SIZE_PX, width, height, max);\n                        }\n\n                        Drawable[] drawables = {new ColorDrawable(primaryColor),\n                            new BitmapDrawable(getResources(), logo)};\n                        LayerDrawable layerDrawable = new LayerDrawable(drawables);\n\n                        String name = capability.getServerName();\n                        setDrawerHeaderLogo(layerDrawable, name);\n                    }\n                };\n\n                requestBuilder\n                    .diskCacheStrategy(DiskCacheStrategy.SOURCE)\n                    .load(Uri.parse(logo))\n                    .into(target);\n            }\n        }\n\n        // hide ecosystem apps according to user preference or in branded client\n        LinearLayout banner = mNavigationViewHeader.findViewById(R.id.drawer_ecosystem_apps);\n        boolean shouldHideTopBanner = isClientBranded || !preferences.isShowEcosystemApps();\n\n        if (shouldHideTopBanner) {\n            hideTopBanner(banner);\n        } else {\n            showTopBanner(banner, primaryColor);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc updateHeader() {\n    let primaryColor = themeColorUtils.unchangedPrimaryColor(getAccount(), self)\n    let isClientBranded = getResources().getBoolean(R.bool.is_branded_client)\n\n    if let account = getAccount(),\n       let serverBackground = getCapabilities().getServerBackground(), !isClientBranded {\n\n        let capability = getCapabilities()\n        let logo = capability.getServerLogo()\n\n        // set background to primary color\n        if let drawerHeader = mNavigationViewHeader.findViewById(R.id.drawer_header_view) as? LinearLayout {\n            drawerHeader.setBackgroundColor(primaryColor)\n        }\n\n        if !logo.isEmpty, let logoUrl = URL(string: logo), UIApplication.shared.canOpenURL(logoUrl) {\n            // background image\n            let requestBuilder = Glide.with(self)\n                .using(Glide.buildStreamModelLoader(Uri.self, self), InputStream.self)\n                .from(Uri.self)\n                .as(SVGorImage.self)\n                .transcode(SvgOrImageBitmapTranscoder(128, 128), Bitmap.self)\n                .sourceEncoder(StreamEncoder())\n                .cacheDecoder(FileToStreamDecoder(SvgOrImageDecoder()))\n                .decoder(SvgOrImageDecoder())\n\n            // background image\n            let target = SimpleTarget<Bitmap> { resource, glideAnimation in\n                var logo = resource\n                let width = resource.width\n                let height = resource.height\n                let max = max(width, height)\n                if max > MAX_LOGO_SIZE_PX {\n                    logo = BitmapUtils.scaleBitmap(resource, MAX_LOGO_SIZE_PX, width, height, max)\n                }\n\n                let drawables: [Drawable] = [ColorDrawable(primaryColor), BitmapDrawable(getResources(), logo)]\n                let layerDrawable = LayerDrawable(drawables)\n\n                let name = capability.getServerName()\n                setDrawerHeaderLogo(layerDrawable, name)\n            }\n\n            requestBuilder\n                .diskCacheStrategy(DiskCacheStrategy.SOURCE)\n                .load(Uri.parse(logo))\n                .into(target)\n        }\n    }\n\n    // hide ecosystem apps according to user preference or in branded client\n    if let banner = mNavigationViewHeader.findViewById(R.id.drawer_ecosystem_apps) as? LinearLayout {\n        let shouldHideTopBanner = isClientBranded || !preferences.isShowEcosystemApps()\n\n        if shouldHideTopBanner {\n            hideTopBanner(banner)\n        } else {\n            showTopBanner(banner, primaryColor)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "onResourceReady",
        "method_code": "@Override\n                    public void onResourceReady(Bitmap resource, GlideAnimation glideAnimation) {\n\n                        Bitmap logo = resource;\n                        int width = resource.getWidth();\n                        int height = resource.getHeight();\n                        int max = Math.max(width, height);\n                        if (max > MAX_LOGO_SIZE_PX) {\n                            logo = BitmapUtils.scaleBitmap(resource, MAX_LOGO_SIZE_PX, width, height, max);\n                        }\n\n                        Drawable[] drawables = {new ColorDrawable(primaryColor),\n                            new BitmapDrawable(getResources(), logo)};\n                        LayerDrawable layerDrawable = new LayerDrawable(drawables);\n\n                        String name = capability.getServerName();\n                        setDrawerHeaderLogo(layerDrawable, name);\n                    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onResourceReady from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: onResourceReady\n\n        Method Code: @Override\n                    public void onResourceReady(Bitmap resource, GlideAnimation glideAnimation) {\n\n                        Bitmap logo = resource;\n                        int width = resource.getWidth();\n                        int height = resource.getHeight();\n                        int max = Math.max(width, height);\n                        if (max > MAX_LOGO_SIZE_PX) {\n                            logo = BitmapUtils.scaleBitmap(resource, MAX_LOGO_SIZE_PX, width, height, max);\n                        }\n\n                        Drawable[] drawables = {new ColorDrawable(primaryColor),\n                            new BitmapDrawable(getResources(), logo)};\n                        LayerDrawable layerDrawable = new LayerDrawable(drawables);\n\n                        String name = capability.getServerName();\n                        setDrawerHeaderLogo(layerDrawable, name);\n                    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onResourceReady(resource: UIImage, glideAnimation: GlideAnimation) {\n    var logo = resource\n    let width = resource.size.width\n    let height = resource.size.height\n    let max = max(width, height)\n    if max > MAX_LOGO_SIZE_PX {\n        logo = BitmapUtils.scaleBitmap(resource, maxSize: MAX_LOGO_SIZE_PX, width: width, height: height, max: max)\n    }\n\n    let drawables: [Drawable] = [ColorDrawable(color: primaryColor), BitmapDrawable(image: logo)]\n    let layerDrawable = LayerDrawable(drawables: drawables)\n\n    let name = capability.getServerName()\n    setDrawerHeaderLogo(layerDrawable: layerDrawable, name: name)\n}\n```"
    },
    {
        "method_name": "hideTopBanner",
        "method_code": "private void hideTopBanner(LinearLayout banner) {\n        banner.setVisibility(View.GONE);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled hideTopBanner from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: hideTopBanner\n\n        Method Code: private void hideTopBanner(LinearLayout banner) {\n        banner.setVisibility(View.GONE);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func hideTopBanner(banner: UIView) {\n    banner.isHidden = true\n}\n```"
    },
    {
        "method_name": "showTopBanner",
        "method_code": "private void showTopBanner(LinearLayout banner, int primaryColor) {\n        LinearLayout notesView = banner.findViewById(R.id.drawer_ecosystem_notes);\n        LinearLayout talkView = banner.findViewById(R.id.drawer_ecosystem_talk);\n        LinearLayout moreView = banner.findViewById(R.id.drawer_ecosystem_more);\n        LinearLayout assistantView = banner.findViewById(R.id.drawer_ecosystem_assistant);\n\n        notesView.setOnClickListener(v -> openAppOrStore(\"it.niedermann.owncloud.notes\"));\n        talkView.setOnClickListener(v -> openAppOrStore(\"com.nextcloud.talk2\"));\n        moreView.setOnClickListener(v -> openAppStore(\"Nextcloud\", true));\n        assistantView.setOnClickListener(v -> {\n            DrawerActivity.menuItemId = Menu.NONE;\n            startComposeActivity(ComposeDestination.AssistantScreen, R.string.assistant_screen_top_bar_title);\n        });\n        if (getCapabilities() != null && getCapabilities().getAssistant().isTrue()) {\n            assistantView.setVisibility(View.VISIBLE);\n        } else {\n            assistantView.setVisibility(View.GONE);\n        }\n\n        List<LinearLayout> views = Arrays.asList(notesView, talkView, moreView, assistantView);\n\n        int iconColor;\n        if (Hct.fromInt(primaryColor).getTone() < 80.0) {\n            iconColor = Color.WHITE;\n        } else {\n            iconColor = getColor(R.color.grey_800_transparent);\n        }\n\n        for (LinearLayout view : views) {\n            ImageView imageView = (ImageView) view.getChildAt(0);\n            imageView.setImageTintList(ColorStateList.valueOf(iconColor));\n            GradientDrawable background = (GradientDrawable) imageView.getBackground();\n            background.setStroke(DisplayUtils.convertDpToPixel(1, this), iconColor);\n            TextView textView = (TextView) view.getChildAt(1);\n            textView.setTextColor(iconColor);\n        }\n\n        banner.setVisibility(View.VISIBLE);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showTopBanner from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: showTopBanner\n\n        Method Code: private void showTopBanner(LinearLayout banner, int primaryColor) {\n        LinearLayout notesView = banner.findViewById(R.id.drawer_ecosystem_notes);\n        LinearLayout talkView = banner.findViewById(R.id.drawer_ecosystem_talk);\n        LinearLayout moreView = banner.findViewById(R.id.drawer_ecosystem_more);\n        LinearLayout assistantView = banner.findViewById(R.id.drawer_ecosystem_assistant);\n\n        notesView.setOnClickListener(v -> openAppOrStore(\"it.niedermann.owncloud.notes\"));\n        talkView.setOnClickListener(v -> openAppOrStore(\"com.nextcloud.talk2\"));\n        moreView.setOnClickListener(v -> openAppStore(\"Nextcloud\", true));\n        assistantView.setOnClickListener(v -> {\n            DrawerActivity.menuItemId = Menu.NONE;\n            startComposeActivity(ComposeDestination.AssistantScreen, R.string.assistant_screen_top_bar_title);\n        });\n        if (getCapabilities() != null && getCapabilities().getAssistant().isTrue()) {\n            assistantView.setVisibility(View.VISIBLE);\n        } else {\n            assistantView.setVisibility(View.GONE);\n        }\n\n        List<LinearLayout> views = Arrays.asList(notesView, talkView, moreView, assistantView);\n\n        int iconColor;\n        if (Hct.fromInt(primaryColor).getTone() < 80.0) {\n            iconColor = Color.WHITE;\n        } else {\n            iconColor = getColor(R.color.grey_800_transparent);\n        }\n\n        for (LinearLayout view : views) {\n            ImageView imageView = (ImageView) view.getChildAt(0);\n            imageView.setImageTintList(ColorStateList.valueOf(iconColor));\n            GradientDrawable background = (GradientDrawable) imageView.getBackground();\n            background.setStroke(DisplayUtils.convertDpToPixel(1, this), iconColor);\n            TextView textView = (TextView) view.getChildAt(1);\n            textView.setTextColor(iconColor);\n        }\n\n        banner.setVisibility(View.VISIBLE);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func showTopBanner(banner: LinearLayout, primaryColor: Int) {\n    let notesView = banner.findViewById(R.id.drawer_ecosystem_notes) as! LinearLayout\n    let talkView = banner.findViewById(R.id.drawer_ecosystem_talk) as! LinearLayout\n    let moreView = banner.findViewById(R.id.drawer_ecosystem_more) as! LinearLayout\n    let assistantView = banner.findViewById(R.id.drawer_ecosystem_assistant) as! LinearLayout\n\n    notesView.setOnClickListener { _ in\n        self.openAppOrStore(\"it.niedermann.owncloud.notes\")\n    }\n    talkView.setOnClickListener { _ in\n        self.openAppOrStore(\"com.nextcloud.talk2\")\n    }\n    moreView.setOnClickListener { _ in\n        self.openAppStore(\"Nextcloud\", true)\n    }\n    assistantView.setOnClickListener { _ in\n        DrawerActivity.menuItemId = Menu.NONE\n        self.startComposeActivity(destination: .AssistantScreen, titleResId: R.string.assistant_screen_top_bar_title)\n    }\n    if let capabilities = getCapabilities(), capabilities.getAssistant().isTrue() {\n        assistantView.visibility = .visible\n    } else {\n        assistantView.visibility = .gone\n    }\n\n    let views = [notesView, talkView, moreView, assistantView]\n\n    let iconColor: Int\n    if Hct.fromInt(primaryColor).tone < 80.0 {\n        iconColor = Color.WHITE\n    } else {\n        iconColor = getColor(R.color.grey_800_transparent)\n    }\n\n    for view in views {\n        let imageView = view.getChildAt(0) as! ImageView\n        imageView.imageTintList = ColorStateList.valueOf(iconColor)\n        let background = imageView.background as! GradientDrawable\n        background.setStroke(DisplayUtils.convertDpToPixel(1, context: self), iconColor)\n        let textView = view.getChildAt(1) as! TextView\n        textView.setTextColor(iconColor)\n    }\n\n    banner.visibility = .visible\n}\n```"
    },
    {
        "method_name": "openAppOrStore",
        "method_code": "private void openAppOrStore(String packageName) {\n        Intent intent = getPackageManager().getLaunchIntentForPackage(packageName);\n        if (intent != null) {\n            // app installed - open directly\n            intent.putExtra(FileDisplayActivity.KEY_ACCOUNT, getUser().get().hashCode());\n            startActivity(intent);\n        } else {\n            // app not found - open market (Google Play Store, F-Droid, etc.)\n            openAppStore(packageName, false);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled openAppOrStore from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: openAppOrStore\n\n        Method Code: private void openAppOrStore(String packageName) {\n        Intent intent = getPackageManager().getLaunchIntentForPackage(packageName);\n        if (intent != null) {\n            // app installed - open directly\n            intent.putExtra(FileDisplayActivity.KEY_ACCOUNT, getUser().get().hashCode());\n            startActivity(intent);\n        } else {\n            // app not found - open market (Google Play Store, F-Droid, etc.)\n            openAppStore(packageName, false);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func openAppOrStore(packageName: String) {\n    if let url = URL(string: \"app-\\(packageName)://\"), UIApplication.shared.canOpenURL(url) {\n        // app installed - open directly\n        var components = URLComponents(url: url, resolvingAgainstBaseURL: false)\n        components?.queryItems = [URLQueryItem(name: \"KEY_ACCOUNT\", value: \"\\(getUser().hashValue)\")]\n        if let finalURL = components?.url {\n            UIApplication.shared.open(finalURL, options: [:], completionHandler: nil)\n        }\n    } else {\n        // app not found - open market (App Store)\n        openAppStore(packageName: packageName, isAppInstalled: false)\n    }\n}\n```"
    },
    {
        "method_name": "openAppStore",
        "method_code": "private void openAppStore(String string, boolean search) {\n        String suffix = (search ? \"search?q=\" : \"details?id=\") + string;\n        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(\"market://\" + suffix));\n        try {\n            startActivity(intent);\n        } catch (android.content.ActivityNotFoundException activityNotFoundException1) {\n            // all is lost: open google play store web page for app\n            if (!search) {\n                suffix = \"apps/\" + suffix;\n            }\n            intent.setData(Uri.parse(\"https://play.google.com/store/\" + suffix));\n            startActivity(intent);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled openAppStore from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: openAppStore\n\n        Method Code: private void openAppStore(String string, boolean search) {\n        String suffix = (search ? \"search?q=\" : \"details?id=\") + string;\n        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(\"market://\" + suffix));\n        try {\n            startActivity(intent);\n        } catch (android.content.ActivityNotFoundException activityNotFoundException1) {\n            // all is lost: open google play store web page for app\n            if (!search) {\n                suffix = \"apps/\" + suffix;\n            }\n            intent.setData(Uri.parse(\"https://play.google.com/store/\" + suffix));\n            startActivity(intent);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func openAppStore(_ string: String, search: Bool) {\n    let suffix = (search ? \"search?q=\" : \"details?id=\") + string\n    if let url = URL(string: \"market://\" + suffix) {\n        if UIApplication.shared.canOpenURL(url) {\n            UIApplication.shared.open(url, options: [:], completionHandler: nil)\n        } else {\n            // all is lost: open google play store web page for app\n            var webSuffix = suffix\n            if !search {\n                webSuffix = \"apps/\" + webSuffix\n            }\n            if let webUrl = URL(string: \"https://play.google.com/store/\" + webSuffix) {\n                UIApplication.shared.open(webUrl, options: [:], completionHandler: nil)\n            }\n        }\n    }\n}\n```"
    },
    {
        "method_name": "setDrawerHeaderLogo",
        "method_code": "private void setDrawerHeaderLogo(Drawable drawable, String serverName) {\n        ImageView imageHeader = mNavigationViewHeader.findViewById(R.id.drawer_header_logo);\n        imageHeader.setImageDrawable(drawable);\n        imageHeader.setAdjustViewBounds(true);\n\n        if (!TextUtils.isEmpty(serverName)) {\n            TextView serverNameView = mNavigationViewHeader.findViewById(R.id.drawer_header_server_name);\n            serverNameView.setVisibility(View.VISIBLE);\n            serverNameView.setText(serverName);\n            serverNameView.setTextColor(themeColorUtils.unchangedFontColor(this));\n        }\n\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setDrawerHeaderLogo from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: setDrawerHeaderLogo\n\n        Method Code: private void setDrawerHeaderLogo(Drawable drawable, String serverName) {\n        ImageView imageHeader = mNavigationViewHeader.findViewById(R.id.drawer_header_logo);\n        imageHeader.setImageDrawable(drawable);\n        imageHeader.setAdjustViewBounds(true);\n\n        if (!TextUtils.isEmpty(serverName)) {\n            TextView serverNameView = mNavigationViewHeader.findViewById(R.id.drawer_header_server_name);\n            serverNameView.setVisibility(View.VISIBLE);\n            serverNameView.setText(serverName);\n            serverNameView.setTextColor(themeColorUtils.unchangedFontColor(this));\n        }\n\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setDrawerHeaderLogo(drawable: UIImage, serverName: String?) {\n    if let imageHeader = mNavigationViewHeader.viewWithTag(R.id.drawer_header_logo) as? UIImageView {\n        imageHeader.image = drawable\n        imageHeader.contentMode = .scaleAspectFit\n    }\n\n    if let serverName = serverName, !serverName.isEmpty {\n        if let serverNameView = mNavigationViewHeader.viewWithTag(R.id.drawer_header_server_name) as? UILabel {\n            serverNameView.isHidden = false\n            serverNameView.text = serverName\n            serverNameView.textColor = themeColorUtils.unchangedFontColor(self)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "setupDrawerMenu",
        "method_code": "private void setupDrawerMenu(NavigationView navigationView) {\n        navigationView.setItemIconTintList(null);\n\n        // setup actions for drawer menu items\n        navigationView.setNavigationItemSelectedListener(\n            menuItem -> {\n                mDrawerLayout.closeDrawers();\n                // pending runnable will be executed after the drawer has been closed\n                pendingRunnable = () -> onNavigationItemClicked(menuItem);\n                return true;\n            });\n\n\n        User account = accountManager.getUser();\n        filterDrawerMenu(navigationView.getMenu(), account);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setupDrawerMenu from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: setupDrawerMenu\n\n        Method Code: private void setupDrawerMenu(NavigationView navigationView) {\n        navigationView.setItemIconTintList(null);\n\n        // setup actions for drawer menu items\n        navigationView.setNavigationItemSelectedListener(\n            menuItem -> {\n                mDrawerLayout.closeDrawers();\n                // pending runnable will be executed after the drawer has been closed\n                pendingRunnable = () -> onNavigationItemClicked(menuItem);\n                return true;\n            });\n\n\n        User account = accountManager.getUser();\n        filterDrawerMenu(navigationView.getMenu(), account);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setupDrawerMenu(navigationView: NavigationView) {\n    navigationView.itemIconTintList = nil\n\n    // setup actions for drawer menu items\n    navigationView.setNavigationItemSelectedListener { menuItem in\n        mDrawerLayout.closeDrawers()\n        // pending runnable will be executed after the drawer has been closed\n        pendingRunnable = {\n            self.onNavigationItemClicked(menuItem)\n        }\n        return true\n    }\n\n    let account = accountManager.getUser()\n    filterDrawerMenu(navigationView.menu, account)\n}\n```"
    },
    {
        "method_name": "filterDrawerMenu",
        "method_code": "private void filterDrawerMenu(final Menu menu, @NonNull final User user) {\n        OCCapability capability = getCapabilities();\n\n        DrawerMenuUtil.filterSearchMenuItems(menu, user, getResources());\n        DrawerMenuUtil.filterTrashbinMenuItem(menu, capability);\n        DrawerMenuUtil.filterActivityMenuItem(menu, capability);\n        DrawerMenuUtil.filterGroupfoldersMenuItem(menu, capability);\n        DrawerMenuUtil.filterAssistantMenuItem(menu, capability, getResources());\n        DrawerMenuUtil.setupHomeMenuItem(menu, getResources());\n        DrawerMenuUtil.removeMenuItem(menu, R.id.nav_community, !getResources().getBoolean(R.bool.participate_enabled));\n        DrawerMenuUtil.removeMenuItem(menu, R.id.nav_shared, !getResources().getBoolean(R.bool.shared_enabled));\n        DrawerMenuUtil.removeMenuItem(menu, R.id.nav_logout, !getResources().getBoolean(R.bool.show_drawer_logout));\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled filterDrawerMenu from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: filterDrawerMenu\n\n        Method Code: private void filterDrawerMenu(final Menu menu, @NonNull final User user) {\n        OCCapability capability = getCapabilities();\n\n        DrawerMenuUtil.filterSearchMenuItems(menu, user, getResources());\n        DrawerMenuUtil.filterTrashbinMenuItem(menu, capability);\n        DrawerMenuUtil.filterActivityMenuItem(menu, capability);\n        DrawerMenuUtil.filterGroupfoldersMenuItem(menu, capability);\n        DrawerMenuUtil.filterAssistantMenuItem(menu, capability, getResources());\n        DrawerMenuUtil.setupHomeMenuItem(menu, getResources());\n        DrawerMenuUtil.removeMenuItem(menu, R.id.nav_community, !getResources().getBoolean(R.bool.participate_enabled));\n        DrawerMenuUtil.removeMenuItem(menu, R.id.nav_shared, !getResources().getBoolean(R.bool.shared_enabled));\n        DrawerMenuUtil.removeMenuItem(menu, R.id.nav_logout, !getResources().getBoolean(R.bool.show_drawer_logout));\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func filterDrawerMenu(menu: Menu, user: User) {\n    let capability = getCapabilities()\n\n    DrawerMenuUtil.filterSearchMenuItems(menu: menu, user: user, resources: getResources())\n    DrawerMenuUtil.filterTrashbinMenuItem(menu: menu, capability: capability)\n    DrawerMenuUtil.filterActivityMenuItem(menu: menu, capability: capability)\n    DrawerMenuUtil.filterGroupfoldersMenuItem(menu: menu, capability: capability)\n    DrawerMenuUtil.filterAssistantMenuItem(menu: menu, capability: capability, resources: getResources())\n    DrawerMenuUtil.setupHomeMenuItem(menu: menu, resources: getResources())\n    DrawerMenuUtil.removeMenuItem(menu: menu, itemId: R.id.nav_community, condition: !getResources().getBoolean(R.bool.participate_enabled))\n    DrawerMenuUtil.removeMenuItem(menu: menu, itemId: R.id.nav_shared, condition: !getResources().getBoolean(R.bool.shared_enabled))\n    DrawerMenuUtil.removeMenuItem(menu: menu, itemId: R.id.nav_logout, condition: !getResources().getBoolean(R.bool.show_drawer_logout))\n}\n```"
    },
    {
        "method_name": "onMessageEvent",
        "method_code": "@Subscribe(threadMode = ThreadMode.MAIN)\n    public void onMessageEvent(DummyDrawerEvent event) {\n        unsetAllDrawerMenuItems();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onMessageEvent from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: onMessageEvent\n\n        Method Code: @Subscribe(threadMode = ThreadMode.MAIN)\n    public void onMessageEvent(DummyDrawerEvent event) {\n        unsetAllDrawerMenuItems();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\n@objc func onMessageEvent(_ event: DummyDrawerEvent) {\n    unsetAllDrawerMenuItems()\n}\n```"
    },
    {
        "method_name": "onNavigationItemClicked",
        "method_code": "private void onNavigationItemClicked(final MenuItem menuItem) {\n        int itemId = menuItem.getItemId();\n        menuItemId = itemId;\n        setDrawerMenuItemChecked();\n\n        if (itemId == R.id.nav_all_files || itemId == R.id.nav_personal_files) {\n            if (this instanceof FileDisplayActivity &&\n                !(((FileDisplayActivity) this).getLeftFragment() instanceof GalleryFragment) &&\n                !(((FileDisplayActivity) this).getLeftFragment() instanceof SharedListFragment) &&\n                !(((FileDisplayActivity) this).getLeftFragment() instanceof GroupfolderListFragment) &&\n                !(((FileDisplayActivity) this).getLeftFragment() instanceof PreviewTextStringFragment)) {\n                showFiles(false, itemId == R.id.nav_personal_files);\n                ((FileDisplayActivity) this).browseToRoot();\n                EventBus.getDefault().post(new ChangeMenuEvent());\n            } else {\n                MainApp.showOnlyFilesOnDevice(false);\n                MainApp.showOnlyPersonalFiles(itemId == R.id.nav_personal_files);\n                Intent intent = new Intent(getApplicationContext(), FileDisplayActivity.class);\n                intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n\n                if (this instanceof ComposeActivity) {\n                    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\n                }\n\n                intent.setAction(FileDisplayActivity.ALL_FILES);\n                startActivity(intent);\n            }\n\n            closeDrawer();\n        } else if (itemId == R.id.nav_favorites) {\n            handleSearchEvents(new SearchEvent(\"\", SearchRemoteOperation.SearchType.FAVORITE_SEARCH),\n                               menuItem.getItemId());\n        } else if (itemId == R.id.nav_gallery) {\n            startPhotoSearch(menuItem.getItemId());\n        } else if (itemId == R.id.nav_on_device) {\n            EventBus.getDefault().post(new ChangeMenuEvent());\n            showFiles(true, false);\n        } else if (itemId == R.id.nav_uploads) {\n            startActivity(UploadListActivity.class, Intent.FLAG_ACTIVITY_CLEAR_TOP);\n        } else if (itemId == R.id.nav_trashbin) {\n            startActivity(TrashbinActivity.class, Intent.FLAG_ACTIVITY_CLEAR_TOP);\n        } else if (itemId == R.id.nav_activity) {\n            startActivity(ActivitiesActivity.class, Intent.FLAG_ACTIVITY_CLEAR_TOP);\n        } else if (itemId == R.id.nav_settings) {\n            startActivity(SettingsActivity.class);\n        } else if (itemId == R.id.nav_community) {\n            startActivity(CommunityActivity.class);\n        } else if (itemId == R.id.nav_logout) {\n            menuItemId = Menu.NONE;\n            MenuItem isNewMenuItemChecked = menuItem.setChecked(false);\n            Log_OC.d(TAG,\"onNavigationItemClicked nav_logout setChecked \" + isNewMenuItemChecked);\n            final Optional<User> optionalUser = getUser();\n            if (optionalUser.isPresent()) {\n                UserInfoActivity.openAccountRemovalDialog(optionalUser.get(), getSupportFragmentManager());\n            }\n        } else if (itemId == R.id.nav_shared) {\n            startSharedSearch(menuItem);\n        } else if (itemId == R.id.nav_recently_modified) {\n            startRecentlyModifiedSearch(menuItem);\n        } else if (itemId == R.id.nav_assistant) {\n            startComposeActivity(ComposeDestination.AssistantScreen, R.string.assistant_screen_top_bar_title);\n        } else if (itemId == R.id.nav_groupfolders) {\n            MainApp.showOnlyFilesOnDevice(false);\n            Intent intent = new Intent(getApplicationContext(), FileDisplayActivity.class);\n            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n            intent.setAction(FileDisplayActivity.LIST_GROUPFOLDERS);\n            startActivity(intent);\n        } else {\n            if (menuItem.getItemId() >= MENU_ITEM_EXTERNAL_LINK &&\n                menuItem.getItemId() <= MENU_ITEM_EXTERNAL_LINK + 100) {\n                // external link clicked\n                externalLinkClicked(menuItem);\n            } else {\n                Log_OC.w(TAG, \"Unknown drawer menu item clicked: \" + menuItem.getTitle());\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onNavigationItemClicked from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: onNavigationItemClicked\n\n        Method Code: private void onNavigationItemClicked(final MenuItem menuItem) {\n        int itemId = menuItem.getItemId();\n        menuItemId = itemId;\n        setDrawerMenuItemChecked();\n\n        if (itemId == R.id.nav_all_files || itemId == R.id.nav_personal_files) {\n            if (this instanceof FileDisplayActivity &&\n                !(((FileDisplayActivity) this).getLeftFragment() instanceof GalleryFragment) &&\n                !(((FileDisplayActivity) this).getLeftFragment() instanceof SharedListFragment) &&\n                !(((FileDisplayActivity) this).getLeftFragment() instanceof GroupfolderListFragment) &&\n                !(((FileDisplayActivity) this).getLeftFragment() instanceof PreviewTextStringFragment)) {\n                showFiles(false, itemId == R.id.nav_personal_files);\n                ((FileDisplayActivity) this).browseToRoot();\n                EventBus.getDefault().post(new ChangeMenuEvent());\n            } else {\n                MainApp.showOnlyFilesOnDevice(false);\n                MainApp.showOnlyPersonalFiles(itemId == R.id.nav_personal_files);\n                Intent intent = new Intent(getApplicationContext(), FileDisplayActivity.class);\n                intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n\n                if (this instanceof ComposeActivity) {\n                    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\n                }\n\n                intent.setAction(FileDisplayActivity.ALL_FILES);\n                startActivity(intent);\n            }\n\n            closeDrawer();\n        } else if (itemId == R.id.nav_favorites) {\n            handleSearchEvents(new SearchEvent(\"\", SearchRemoteOperation.SearchType.FAVORITE_SEARCH),\n                               menuItem.getItemId());\n        } else if (itemId == R.id.nav_gallery) {\n            startPhotoSearch(menuItem.getItemId());\n        } else if (itemId == R.id.nav_on_device) {\n            EventBus.getDefault().post(new ChangeMenuEvent());\n            showFiles(true, false);\n        } else if (itemId == R.id.nav_uploads) {\n            startActivity(UploadListActivity.class, Intent.FLAG_ACTIVITY_CLEAR_TOP);\n        } else if (itemId == R.id.nav_trashbin) {\n            startActivity(TrashbinActivity.class, Intent.FLAG_ACTIVITY_CLEAR_TOP);\n        } else if (itemId == R.id.nav_activity) {\n            startActivity(ActivitiesActivity.class, Intent.FLAG_ACTIVITY_CLEAR_TOP);\n        } else if (itemId == R.id.nav_settings) {\n            startActivity(SettingsActivity.class);\n        } else if (itemId == R.id.nav_community) {\n            startActivity(CommunityActivity.class);\n        } else if (itemId == R.id.nav_logout) {\n            menuItemId = Menu.NONE;\n            MenuItem isNewMenuItemChecked = menuItem.setChecked(false);\n            Log_OC.d(TAG,\"onNavigationItemClicked nav_logout setChecked \" + isNewMenuItemChecked);\n            final Optional<User> optionalUser = getUser();\n            if (optionalUser.isPresent()) {\n                UserInfoActivity.openAccountRemovalDialog(optionalUser.get(), getSupportFragmentManager());\n            }\n        } else if (itemId == R.id.nav_shared) {\n            startSharedSearch(menuItem);\n        } else if (itemId == R.id.nav_recently_modified) {\n            startRecentlyModifiedSearch(menuItem);\n        } else if (itemId == R.id.nav_assistant) {\n            startComposeActivity(ComposeDestination.AssistantScreen, R.string.assistant_screen_top_bar_title);\n        } else if (itemId == R.id.nav_groupfolders) {\n            MainApp.showOnlyFilesOnDevice(false);\n            Intent intent = new Intent(getApplicationContext(), FileDisplayActivity.class);\n            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n            intent.setAction(FileDisplayActivity.LIST_GROUPFOLDERS);\n            startActivity(intent);\n        } else {\n            if (menuItem.getItemId() >= MENU_ITEM_EXTERNAL_LINK &&\n                menuItem.getItemId() <= MENU_ITEM_EXTERNAL_LINK + 100) {\n                // external link clicked\n                externalLinkClicked(menuItem);\n            } else {\n                Log_OC.w(TAG, \"Unknown drawer menu item clicked: \" + menuItem.getTitle());\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func onNavigationItemClicked(_ menuItem: MenuItem) {\n    let itemId = menuItem.itemId\n    menuItemId = itemId\n    setDrawerMenuItemChecked()\n\n    if itemId == R.id.nav_all_files || itemId == R.id.nav_personal_files {\n        if let fileDisplayActivity = self as? FileDisplayActivity,\n           !(fileDisplayActivity.getLeftFragment() is GalleryFragment),\n           !(fileDisplayActivity.getLeftFragment() is SharedListFragment),\n           !(fileDisplayActivity.getLeftFragment() is GroupfolderListFragment),\n           !(fileDisplayActivity.getLeftFragment() is PreviewTextStringFragment) {\n            showFiles(false, itemId == R.id.nav_personal_files)\n            fileDisplayActivity.browseToRoot()\n            EventBus.default.post(ChangeMenuEvent())\n        } else {\n            MainApp.showOnlyFilesOnDevice(false)\n            MainApp.showOnlyPersonalFiles(itemId == R.id.nav_personal_files)\n            let intent = Intent(context: getApplicationContext(), FileDisplayActivity.self)\n            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)\n\n            if self is ComposeActivity {\n                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK)\n            }\n\n            intent.setAction(FileDisplayActivity.ALL_FILES)\n            startActivity(intent)\n        }\n\n        closeDrawer()\n    } else if itemId == R.id.nav_favorites {\n        handleSearchEvents(SearchEvent(\"\", .FAVORITE_SEARCH), menuItem.itemId)\n    } else if itemId == R.id.nav_gallery {\n        startPhotoSearch(menuItem.itemId)\n    } else if itemId == R.id.nav_on_device {\n        EventBus.default.post(ChangeMenuEvent())\n        showFiles(true, false)\n    } else if itemId == R.id.nav_uploads {\n        startActivity(UploadListActivity.self, Intent.FLAG_ACTIVITY_CLEAR_TOP)\n    } else if itemId == R.id.nav_trashbin {\n        startActivity(TrashbinActivity.self, Intent.FLAG_ACTIVITY_CLEAR_TOP)\n    } else if itemId == R.id.nav_activity {\n        startActivity(ActivitiesActivity.self, Intent.FLAG_ACTIVITY_CLEAR_TOP)\n    } else if itemId == R.id.nav_settings {\n        startActivity(SettingsActivity.self)\n    } else if itemId == R.id.nav_community {\n        startActivity(CommunityActivity.self)\n    } else if itemId == R.id.nav_logout {\n        menuItemId = Menu.NONE\n        let isNewMenuItemChecked = menuItem.setChecked(false)\n        Log_OC.d(TAG, \"onNavigationItemClicked nav_logout setChecked \\(isNewMenuItemChecked)\")\n        if let optionalUser = getUser() {\n            UserInfoActivity.openAccountRemovalDialog(optionalUser, getSupportFragmentManager())\n        }\n    } else if itemId == R.id.nav_shared {\n        startSharedSearch(menuItem)\n    } else if itemId == R.id.nav_recently_modified {\n        startRecentlyModifiedSearch(menuItem)\n    } else if itemId == R.id.nav_assistant {\n        startComposeActivity(.AssistantScreen, R.string.assistant_screen_top_bar_title)\n    } else if itemId == R.id.nav_groupfolders {\n        MainApp.showOnlyFilesOnDevice(false)\n        let intent = Intent(context: getApplicationContext(), FileDisplayActivity.self)\n        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)\n        intent.setAction(FileDisplayActivity.LIST_GROUPFOLDERS)\n        startActivity(intent)\n    } else {\n        if menuItem.itemId >= MENU_ITEM_EXTERNAL_LINK && menuItem.itemId <= MENU_ITEM_EXTERNAL_LINK + 100 {\n            // external link clicked\n            externalLinkClicked(menuItem)\n        } else {\n            Log_OC.w(TAG, \"Unknown drawer menu item clicked: \\(menuItem.title)\")\n        }\n    }\n}\n```"
    },
    {
        "method_name": "startComposeActivity",
        "method_code": "private void startComposeActivity(ComposeDestination destination, int titleId) {\n        Intent composeActivity = new Intent(getApplicationContext(), ComposeActivity.class);\n        composeActivity.putExtra(ComposeActivity.DESTINATION, destination);\n        composeActivity.putExtra(ComposeActivity.TITLE, titleId);\n        startActivity(composeActivity);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled startComposeActivity from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: startComposeActivity\n\n        Method Code: private void startComposeActivity(ComposeDestination destination, int titleId) {\n        Intent composeActivity = new Intent(getApplicationContext(), ComposeActivity.class);\n        composeActivity.putExtra(ComposeActivity.DESTINATION, destination);\n        composeActivity.putExtra(ComposeActivity.TITLE, titleId);\n        startActivity(composeActivity);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func startComposeActivity(destination: ComposeDestination, titleId: Int) {\n    let composeActivity = UIStoryboard(name: \"Main\", bundle: nil).instantiateViewController(withIdentifier: \"ComposeActivity\") as! ComposeActivity\n    composeActivity.destination = destination\n    composeActivity.titleId = titleId\n    self.present(composeActivity, animated: true, completion: nil)\n}\n```"
    },
    {
        "method_name": "startActivity",
        "method_code": "void startActivity(Class<? extends Activity> activity) {\n        startActivity(new Intent(getApplicationContext(), activity));\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled startActivity from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: startActivity\n\n        Method Code: void startActivity(Class<? extends Activity> activity) {\n        startActivity(new Intent(getApplicationContext(), activity));\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc startActivity(_ activity: Activity.Type) {\n    let intent = Intent(context: getApplicationContext(), activity: activity)\n    startActivity(intent)\n}\n```"
    },
    {
        "method_name": "startActivity",
        "method_code": "private void startActivity(Class<? extends Activity> activity, int flags) {\n        Intent intent = new Intent(getApplicationContext(), activity);\n        intent.setFlags(flags);\n        startActivity(intent);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled startActivity from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: startActivity\n\n        Method Code: private void startActivity(Class<? extends Activity> activity, int flags) {\n        Intent intent = new Intent(getApplicationContext(), activity);\n        intent.setFlags(flags);\n        startActivity(intent);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func startActivity(activity: Activity.Type, flags: Int) {\n    let intent = Intent(context: getApplicationContext(), activity: activity)\n    intent.setFlags(flags)\n    startActivity(intent)\n}\n```"
    },
    {
        "method_name": "showManageAccountsDialog",
        "method_code": "public void showManageAccountsDialog() {\n        ChooseAccountDialogFragment choseAccountDialog = ChooseAccountDialogFragment.newInstance(accountManager.getUser());\n        choseAccountDialog.show(getSupportFragmentManager(), \"fragment_chose_account\");\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showManageAccountsDialog from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: showManageAccountsDialog\n\n        Method Code: public void showManageAccountsDialog() {\n        ChooseAccountDialogFragment choseAccountDialog = ChooseAccountDialogFragment.newInstance(accountManager.getUser());\n        choseAccountDialog.show(getSupportFragmentManager(), \"fragment_chose_account\");\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc showManageAccountsDialog() {\n    let choseAccountDialog = ChooseAccountDialogFragment.newInstance(accountManager.getUser())\n    choseAccountDialog.show(self.supportFragmentManager, \"fragment_chose_account\")\n}\n```"
    },
    {
        "method_name": "openManageAccounts",
        "method_code": "public void openManageAccounts() {\n        Intent manageAccountsIntent = new Intent(getApplicationContext(), ManageAccountsActivity.class);\n        startActivityForResult(manageAccountsIntent, ACTION_MANAGE_ACCOUNTS);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled openManageAccounts from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: openManageAccounts\n\n        Method Code: public void openManageAccounts() {\n        Intent manageAccountsIntent = new Intent(getApplicationContext(), ManageAccountsActivity.class);\n        startActivityForResult(manageAccountsIntent, ACTION_MANAGE_ACCOUNTS);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc openManageAccounts() {\n    let manageAccountsIntent = UIStoryboard(name: \"Main\", bundle: nil).instantiateViewController(withIdentifier: \"ManageAccountsViewController\")\n    self.present(manageAccountsIntent, animated: true, completion: nil)\n}\n```"
    },
    {
        "method_name": "openAddAccount",
        "method_code": "public void openAddAccount() {\n        if (MDMConfig.INSTANCE.showIntro(this)) {\n            Intent firstRunIntent = new Intent(getApplicationContext(), FirstRunActivity.class);\n            firstRunIntent.putExtra(FirstRunActivity.EXTRA_ALLOW_CLOSE, true);\n            startActivity(firstRunIntent);\n        } else {\n            startAccountCreation();\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled openAddAccount from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: openAddAccount\n\n        Method Code: public void openAddAccount() {\n        if (MDMConfig.INSTANCE.showIntro(this)) {\n            Intent firstRunIntent = new Intent(getApplicationContext(), FirstRunActivity.class);\n            firstRunIntent.putExtra(FirstRunActivity.EXTRA_ALLOW_CLOSE, true);\n            startActivity(firstRunIntent);\n        } else {\n            startAccountCreation();\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc openAddAccount() {\n    if MDMConfig.INSTANCE.showIntro(self) {\n        let firstRunIntent = UIStoryboard(name: \"Main\", bundle: nil).instantiateViewController(withIdentifier: \"FirstRunActivity\") as! FirstRunActivity\n        firstRunIntent.allowClose = true\n        self.present(firstRunIntent, animated: true, completion: nil)\n    } else {\n        startAccountCreation()\n    }\n}\n```"
    },
    {
        "method_name": "startSharedSearch",
        "method_code": "private void startSharedSearch(MenuItem menuItem) {\n        SearchEvent searchEvent = new SearchEvent(\"\", SearchRemoteOperation.SearchType.SHARED_FILTER);\n        MainApp.showOnlyFilesOnDevice(false);\n\n        launchActivityForSearch(searchEvent, menuItem.getItemId());\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled startSharedSearch from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: startSharedSearch\n\n        Method Code: private void startSharedSearch(MenuItem menuItem) {\n        SearchEvent searchEvent = new SearchEvent(\"\", SearchRemoteOperation.SearchType.SHARED_FILTER);\n        MainApp.showOnlyFilesOnDevice(false);\n\n        launchActivityForSearch(searchEvent, menuItem.getItemId());\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func startSharedSearch(_ menuItem: MenuItem) {\n    let searchEvent = SearchEvent(\"\", .sharedFilter)\n    MainApp.showOnlyFilesOnDevice(false)\n    \n    launchActivityForSearch(searchEvent, menuItem.itemId)\n}\n```"
    },
    {
        "method_name": "startRecentlyModifiedSearch",
        "method_code": "private void startRecentlyModifiedSearch(MenuItem menuItem) {\n        SearchEvent searchEvent = new SearchEvent(\"\", SearchRemoteOperation.SearchType.RECENTLY_MODIFIED_SEARCH);\n        MainApp.showOnlyFilesOnDevice(false);\n\n        launchActivityForSearch(searchEvent, menuItem.getItemId());\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled startRecentlyModifiedSearch from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: startRecentlyModifiedSearch\n\n        Method Code: private void startRecentlyModifiedSearch(MenuItem menuItem) {\n        SearchEvent searchEvent = new SearchEvent(\"\", SearchRemoteOperation.SearchType.RECENTLY_MODIFIED_SEARCH);\n        MainApp.showOnlyFilesOnDevice(false);\n\n        launchActivityForSearch(searchEvent, menuItem.getItemId());\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func startRecentlyModifiedSearch(_ menuItem: MenuItem) {\n    let searchEvent = SearchEvent(\"\", .recentlyModifiedSearch)\n    MainApp.showOnlyFilesOnDevice(false)\n\n    launchActivityForSearch(searchEvent, menuItem.itemId)\n}\n```"
    },
    {
        "method_name": "startPhotoSearch",
        "method_code": "public void startPhotoSearch(int id) {\n        SearchEvent searchEvent = new SearchEvent(\"image/%\", SearchRemoteOperation.SearchType.PHOTO_SEARCH);\n        MainApp.showOnlyFilesOnDevice(false);\n\n        launchActivityForSearch(searchEvent, id);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled startPhotoSearch from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: startPhotoSearch\n\n        Method Code: public void startPhotoSearch(int id) {\n        SearchEvent searchEvent = new SearchEvent(\"image/%\", SearchRemoteOperation.SearchType.PHOTO_SEARCH);\n        MainApp.showOnlyFilesOnDevice(false);\n\n        launchActivityForSearch(searchEvent, id);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc startPhotoSearch(id: Int) {\n    let searchEvent = SearchEvent(\"image/%\", SearchRemoteOperation.SearchType.photoSearch)\n    MainApp.showOnlyFilesOnDevice(false)\n    \n    launchActivityForSearch(searchEvent, id: id)\n}\n```"
    },
    {
        "method_name": "handleSearchEvents",
        "method_code": "private void handleSearchEvents(SearchEvent searchEvent, int menuItemId) {\n        if (this instanceof FileDisplayActivity) {\n            final Fragment leftFragment = ((FileDisplayActivity) this).getLeftFragment();\n            if (leftFragment instanceof GalleryFragment || leftFragment instanceof SharedListFragment) {\n                launchActivityForSearch(searchEvent, menuItemId);\n            } else {\n                EventBus.getDefault().post(searchEvent);\n            }\n        } else {\n            launchActivityForSearch(searchEvent, menuItemId);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled handleSearchEvents from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: handleSearchEvents\n\n        Method Code: private void handleSearchEvents(SearchEvent searchEvent, int menuItemId) {\n        if (this instanceof FileDisplayActivity) {\n            final Fragment leftFragment = ((FileDisplayActivity) this).getLeftFragment();\n            if (leftFragment instanceof GalleryFragment || leftFragment instanceof SharedListFragment) {\n                launchActivityForSearch(searchEvent, menuItemId);\n            } else {\n                EventBus.getDefault().post(searchEvent);\n            }\n        } else {\n            launchActivityForSearch(searchEvent, menuItemId);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func handleSearchEvents(searchEvent: SearchEvent, menuItemId: Int) {\n    if self is FileDisplayActivity {\n        let leftFragment = (self as! FileDisplayActivity).getLeftFragment()\n        if leftFragment is GalleryFragment || leftFragment is SharedListFragment {\n            launchActivityForSearch(searchEvent: searchEvent, menuItemId: menuItemId)\n        } else {\n            EventBus.default.post(searchEvent)\n        }\n    } else {\n        launchActivityForSearch(searchEvent: searchEvent, menuItemId: menuItemId)\n    }\n}\n```"
    },
    {
        "method_name": "launchActivityForSearch",
        "method_code": "private void launchActivityForSearch(SearchEvent searchEvent, int menuItemId) {\n        DrawerActivity.menuItemId = menuItemId;\n        Intent intent = new Intent(getApplicationContext(), FileDisplayActivity.class);\n        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n\n        if (this instanceof ComposeActivity) {\n            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\n        }\n\n        intent.setAction(Intent.ACTION_SEARCH);\n        intent.putExtra(OCFileListFragment.SEARCH_EVENT, searchEvent);\n        startActivity(intent);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled launchActivityForSearch from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: launchActivityForSearch\n\n        Method Code: private void launchActivityForSearch(SearchEvent searchEvent, int menuItemId) {\n        DrawerActivity.menuItemId = menuItemId;\n        Intent intent = new Intent(getApplicationContext(), FileDisplayActivity.class);\n        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n\n        if (this instanceof ComposeActivity) {\n            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\n        }\n\n        intent.setAction(Intent.ACTION_SEARCH);\n        intent.putExtra(OCFileListFragment.SEARCH_EVENT, searchEvent);\n        startActivity(intent);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func launchActivityForSearch(searchEvent: SearchEvent, menuItemId: Int) {\n    DrawerActivity.menuItemId = menuItemId\n    let intent = Intent(context: getApplicationContext(), cls: FileDisplayActivity.self)\n    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)\n\n    if self is ComposeActivity {\n        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK)\n    }\n\n    intent.setAction(Intent.ACTION_SEARCH)\n    intent.putExtra(OCFileListFragment.SEARCH_EVENT, searchEvent)\n    startActivity(intent)\n}\n```"
    },
    {
        "method_name": "accountClicked",
        "method_code": "public void accountClicked(int hashCode) {\n        final User currentUser = accountManager.getUser();\n        if (currentUser.hashCode() != hashCode && accountManager.setCurrentOwnCloudAccount(hashCode)) {\n            fetchExternalLinks(true);\n            restart();\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled accountClicked from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: accountClicked\n\n        Method Code: public void accountClicked(int hashCode) {\n        final User currentUser = accountManager.getUser();\n        if (currentUser.hashCode() != hashCode && accountManager.setCurrentOwnCloudAccount(hashCode)) {\n            fetchExternalLinks(true);\n            restart();\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc accountClicked(hashCode: Int) {\n    let currentUser = accountManager.getUser()\n    if currentUser.hash != hashCode && accountManager.setCurrentOwnCloudAccount(hashCode: hashCode) {\n        fetchExternalLinks(force: true)\n        restart()\n    }\n}\n```"
    },
    {
        "method_name": "externalLinkClicked",
        "method_code": "private void externalLinkClicked(MenuItem menuItem) {\n        for (ExternalLink link : externalLinksProvider.getExternalLink(ExternalLinkType.LINK)) {\n            if (menuItem.getTitle().toString().equalsIgnoreCase(link.getName())) {\n                if (link.getRedirect()) {\n                    DisplayUtils.startLinkIntent(this, link.getUrl());\n                } else {\n                    Intent externalWebViewIntent = new Intent(getApplicationContext(), ExternalSiteWebView.class);\n                    externalWebViewIntent.putExtra(ExternalSiteWebView.EXTRA_TITLE, link.getName());\n                    externalWebViewIntent.putExtra(ExternalSiteWebView.EXTRA_URL, link.getUrl());\n                    externalWebViewIntent.putExtra(ExternalSiteWebView.EXTRA_SHOW_SIDEBAR, true);\n                    startActivity(externalWebViewIntent);\n                }\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled externalLinkClicked from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: externalLinkClicked\n\n        Method Code: private void externalLinkClicked(MenuItem menuItem) {\n        for (ExternalLink link : externalLinksProvider.getExternalLink(ExternalLinkType.LINK)) {\n            if (menuItem.getTitle().toString().equalsIgnoreCase(link.getName())) {\n                if (link.getRedirect()) {\n                    DisplayUtils.startLinkIntent(this, link.getUrl());\n                } else {\n                    Intent externalWebViewIntent = new Intent(getApplicationContext(), ExternalSiteWebView.class);\n                    externalWebViewIntent.putExtra(ExternalSiteWebView.EXTRA_TITLE, link.getName());\n                    externalWebViewIntent.putExtra(ExternalSiteWebView.EXTRA_URL, link.getUrl());\n                    externalWebViewIntent.putExtra(ExternalSiteWebView.EXTRA_SHOW_SIDEBAR, true);\n                    startActivity(externalWebViewIntent);\n                }\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func externalLinkClicked(menuItem: MenuItem) {\n    for link in externalLinksProvider.getExternalLink(type: .link) {\n        if menuItem.title?.lowercased() == link.name.lowercased() {\n            if link.redirect {\n                DisplayUtils.startLinkIntent(self, url: link.url)\n            } else {\n                let externalWebViewIntent = ExternalSiteWebView()\n                externalWebViewIntent.title = link.name\n                externalWebViewIntent.url = link.url\n                externalWebViewIntent.showSidebar = true\n                present(externalWebViewIntent, animated: true, completion: nil)\n            }\n        }\n    }\n}\n```"
    },
    {
        "method_name": "isDrawerOpen",
        "method_code": "public boolean isDrawerOpen() {\n        return mDrawerLayout != null && mDrawerLayout.isDrawerOpen(GravityCompat.START);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled isDrawerOpen from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: isDrawerOpen\n\n        Method Code: public boolean isDrawerOpen() {\n        return mDrawerLayout != null && mDrawerLayout.isDrawerOpen(GravityCompat.START);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc isDrawerOpen() -> Bool {\n    return mDrawerLayout != nil && mDrawerLayout.isDrawerOpen(at: .start)\n}\n```"
    },
    {
        "method_name": "toggleDrawer",
        "method_code": "public void toggleDrawer() {\n        if (isDrawerOpen()) {\n            closeDrawer();\n        } else {\n            openDrawer();\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled toggleDrawer from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: toggleDrawer\n\n        Method Code: public void toggleDrawer() {\n        if (isDrawerOpen()) {\n            closeDrawer();\n        } else {\n            openDrawer();\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc toggleDrawer() {\n    if isDrawerOpen() {\n        closeDrawer()\n    } else {\n        openDrawer()\n    }\n}\n```"
    },
    {
        "method_name": "closeDrawer",
        "method_code": "public void closeDrawer() {\n        if (mDrawerLayout != null) {\n            mDrawerLayout.closeDrawer(GravityCompat.START);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled closeDrawer from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: closeDrawer\n\n        Method Code: public void closeDrawer() {\n        if (mDrawerLayout != null) {\n            mDrawerLayout.closeDrawer(GravityCompat.START);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc closeDrawer() {\n    if let drawerLayout = mDrawerLayout {\n        drawerLayout.closeDrawer(.start)\n    }\n}\n```"
    },
    {
        "method_name": "openDrawer",
        "method_code": "public void openDrawer() {\n        if (mDrawerLayout != null) {\n            mDrawerLayout.openDrawer(GravityCompat.START);\n            updateExternalLinksInDrawer();\n            updateQuotaLink();\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled openDrawer from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: openDrawer\n\n        Method Code: public void openDrawer() {\n        if (mDrawerLayout != null) {\n            mDrawerLayout.openDrawer(GravityCompat.START);\n            updateExternalLinksInDrawer();\n            updateQuotaLink();\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc openDrawer() {\n    if let drawerLayout = mDrawerLayout {\n        drawerLayout.openDrawer(.start)\n        updateExternalLinksInDrawer()\n        updateQuotaLink()\n    }\n}\n```"
    },
    {
        "method_name": "setDrawerLockMode",
        "method_code": "public void setDrawerLockMode(int lockMode) {\n        if (mDrawerLayout != null) {\n            mDrawerLayout.setDrawerLockMode(lockMode);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setDrawerLockMode from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: setDrawerLockMode\n\n        Method Code: public void setDrawerLockMode(int lockMode) {\n        if (mDrawerLayout != null) {\n            mDrawerLayout.setDrawerLockMode(lockMode);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setDrawerLockMode(lockMode: Int) {\n    if let drawerLayout = mDrawerLayout {\n        drawerLayout.setDrawerLockMode(lockMode)\n    }\n}\n```"
    },
    {
        "method_name": "setDrawerIndicatorEnabled",
        "method_code": "public void setDrawerIndicatorEnabled(boolean enable) {\n        if (mDrawerToggle != null) {\n            mDrawerToggle.setDrawerIndicatorEnabled(enable);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setDrawerIndicatorEnabled from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: setDrawerIndicatorEnabled\n\n        Method Code: public void setDrawerIndicatorEnabled(boolean enable) {\n        if (mDrawerToggle != null) {\n            mDrawerToggle.setDrawerIndicatorEnabled(enable);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setDrawerIndicatorEnabled(_ enable: Bool) {\n    mDrawerToggle?.setDrawerIndicatorEnabled(enable)\n}\n```"
    },
    {
        "method_name": "updateActionBarTitleAndHomeButton",
        "method_code": "protected void updateActionBarTitleAndHomeButton(OCFile chosenFile) {\n        super.updateActionBarTitleAndHomeButton(chosenFile);\n\n        // set home button properties\n        if (mDrawerToggle != null) {\n            mDrawerToggle.setDrawerIndicatorEnabled(chosenFile != null && isRoot(chosenFile));\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled updateActionBarTitleAndHomeButton from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: updateActionBarTitleAndHomeButton\n\n        Method Code: protected void updateActionBarTitleAndHomeButton(OCFile chosenFile) {\n        super.updateActionBarTitleAndHomeButton(chosenFile);\n\n        // set home button properties\n        if (mDrawerToggle != null) {\n            mDrawerToggle.setDrawerIndicatorEnabled(chosenFile != null && isRoot(chosenFile));\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc updateActionBarTitleAndHomeButton(chosenFile: OCFile?) {\n    super.updateActionBarTitleAndHomeButton(chosenFile: chosenFile)\n\n    // set home button properties\n    if let drawerToggle = mDrawerToggle {\n        drawerToggle.setDrawerIndicatorEnabled(chosenFile != nil && isRoot(chosenFile: chosenFile))\n    }\n}\n```"
    },
    {
        "method_name": "showQuota",
        "method_code": "private void showQuota(boolean showQuota) {\n        if (showQuota) {\n            mQuotaView.setVisibility(View.VISIBLE);\n        } else {\n            mQuotaView.setVisibility(View.GONE);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showQuota from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: showQuota\n\n        Method Code: private void showQuota(boolean showQuota) {\n        if (showQuota) {\n            mQuotaView.setVisibility(View.VISIBLE);\n        } else {\n            mQuotaView.setVisibility(View.GONE);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func showQuota(_ showQuota: Bool) {\n    if showQuota {\n        mQuotaView.isHidden = false\n    } else {\n        mQuotaView.isHidden = true\n    }\n}\n```"
    },
    {
        "method_name": "setQuotaInformation",
        "method_code": "private void setQuotaInformation(long usedSpace, long totalSpace, int relative, long quotaValue) {\n        if (GetUserInfoRemoteOperation.SPACE_UNLIMITED == quotaValue) {\n            mQuotaTextPercentage.setText(String.format(\n                getString(R.string.drawer_quota_unlimited),\n                DisplayUtils.bytesToHumanReadable(usedSpace)));\n        } else {\n            mQuotaTextPercentage.setText(String.format(\n                getString(R.string.drawer_quota),\n                DisplayUtils.bytesToHumanReadable(usedSpace),\n                DisplayUtils.bytesToHumanReadable(totalSpace)));\n        }\n\n        mQuotaProgressBar.setProgress(relative);\n\n        if (relative < RELATIVE_THRESHOLD_WARNING) {\n            viewThemeUtils.material.colorProgressBar(mQuotaProgressBar);\n        } else {\n            viewThemeUtils.material.colorProgressBar(mQuotaProgressBar,\n                                                     getResources().getColor(R.color.infolevel_warning, getTheme()));\n        }\n\n        updateQuotaLink();\n        showQuota(true);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setQuotaInformation from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: setQuotaInformation\n\n        Method Code: private void setQuotaInformation(long usedSpace, long totalSpace, int relative, long quotaValue) {\n        if (GetUserInfoRemoteOperation.SPACE_UNLIMITED == quotaValue) {\n            mQuotaTextPercentage.setText(String.format(\n                getString(R.string.drawer_quota_unlimited),\n                DisplayUtils.bytesToHumanReadable(usedSpace)));\n        } else {\n            mQuotaTextPercentage.setText(String.format(\n                getString(R.string.drawer_quota),\n                DisplayUtils.bytesToHumanReadable(usedSpace),\n                DisplayUtils.bytesToHumanReadable(totalSpace)));\n        }\n\n        mQuotaProgressBar.setProgress(relative);\n\n        if (relative < RELATIVE_THRESHOLD_WARNING) {\n            viewThemeUtils.material.colorProgressBar(mQuotaProgressBar);\n        } else {\n            viewThemeUtils.material.colorProgressBar(mQuotaProgressBar,\n                                                     getResources().getColor(R.color.infolevel_warning, getTheme()));\n        }\n\n        updateQuotaLink();\n        showQuota(true);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setQuotaInformation(usedSpace: Int64, totalSpace: Int64, relative: Int, quotaValue: Int64) {\n    if GetUserInfoRemoteOperation.SPACE_UNLIMITED == quotaValue {\n        mQuotaTextPercentage.text = String(format: NSLocalizedString(\"drawer_quota_unlimited\", comment: \"\"),\n                                           DisplayUtils.bytesToHumanReadable(usedSpace))\n    } else {\n        mQuotaTextPercentage.text = String(format: NSLocalizedString(\"drawer_quota\", comment: \"\"),\n                                           DisplayUtils.bytesToHumanReadable(usedSpace),\n                                           DisplayUtils.bytesToHumanReadable(totalSpace))\n    }\n\n    mQuotaProgressBar.progress = relative\n\n    if relative < RELATIVE_THRESHOLD_WARNING {\n        viewThemeUtils.material.colorProgressBar(mQuotaProgressBar)\n    } else {\n        viewThemeUtils.material.colorProgressBar(mQuotaProgressBar,\n                                                 UIColor(named: \"infolevel_warning\") ?? UIColor())\n    }\n\n    updateQuotaLink()\n    showQuota(true)\n}\n```"
    },
    {
        "method_name": "unsetAllDrawerMenuItems",
        "method_code": "private void unsetAllDrawerMenuItems() {\n        if (mNavigationView != null) {\n            mNavigationView.getMenu();\n            Menu menu = mNavigationView.getMenu();\n            for (int i = 0; i < menu.size(); i++) {\n                menu.getItem(i).setChecked(false);\n            }\n        }\n\n        menuItemId = Menu.NONE;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled unsetAllDrawerMenuItems from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: unsetAllDrawerMenuItems\n\n        Method Code: private void unsetAllDrawerMenuItems() {\n        if (mNavigationView != null) {\n            mNavigationView.getMenu();\n            Menu menu = mNavigationView.getMenu();\n            for (int i = 0; i < menu.size(); i++) {\n                menu.getItem(i).setChecked(false);\n            }\n        }\n\n        menuItemId = Menu.NONE;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func unsetAllDrawerMenuItems() {\n    if let navigationView = mNavigationView {\n        let menu = navigationView.menu\n        for i in 0..<menu.count {\n            menu.item(at: i)?.isChecked = false\n        }\n    }\n    \n    menuItemId = Menu.none\n}\n```"
    },
    {
        "method_name": "updateQuotaLink",
        "method_code": "private void updateQuotaLink() {\n        if (mQuotaTextLink != null) {\n            if (MDMConfig.INSTANCE.externalSiteSupport(this)) {\n                List<ExternalLink> quotas = externalLinksProvider.getExternalLink(ExternalLinkType.QUOTA);\n\n                float density = getResources().getDisplayMetrics().density;\n                final int size = Math.round(24 * density);\n\n                if (quotas.size() > 0) {\n                    final ExternalLink firstQuota = quotas.get(0);\n                    mQuotaTextLink.setText(firstQuota.getName());\n                    mQuotaTextLink.setClickable(true);\n                    mQuotaTextLink.setVisibility(View.VISIBLE);\n                    mQuotaTextLink.setOnClickListener(v -> {\n                        Intent externalWebViewIntent = new Intent(getApplicationContext(), ExternalSiteWebView.class);\n                        externalWebViewIntent.putExtra(ExternalSiteWebView.EXTRA_TITLE, firstQuota.getName());\n                        externalWebViewIntent.putExtra(ExternalSiteWebView.EXTRA_URL, firstQuota.getUrl());\n                        externalWebViewIntent.putExtra(ExternalSiteWebView.EXTRA_SHOW_SIDEBAR, true);\n                        menuItemId = Menu.NONE;\n                        startActivity(externalWebViewIntent);\n                    });\n\n\n                    SimpleTarget target = new SimpleTarget<Drawable>() {\n                        @Override\n                        public void onResourceReady(Drawable resource, GlideAnimation glideAnimation) {\n                            Drawable test = resource.getCurrent();\n                            test.setBounds(0, 0, size, size);\n                            mQuotaTextLink.setCompoundDrawablesWithIntrinsicBounds(test, null, null, null);\n                        }\n\n                        @Override\n                        public void onLoadFailed(Exception e, Drawable errorDrawable) {\n                            super.onLoadFailed(e, errorDrawable);\n\n                            Drawable test = errorDrawable.getCurrent();\n                            test.setBounds(0, 0, size, size);\n\n                            mQuotaTextLink.setCompoundDrawablesWithIntrinsicBounds(test, null, null, null);\n                        }\n                    };\n\n                    DisplayUtils.downloadIcon(getUserAccountManager(),\n                                              clientFactory,\n                                              this,\n                                              firstQuota.getIconUrl(),\n                                              target,\n                                              R.drawable.ic_link);\n\n                } else {\n                    mQuotaTextLink.setVisibility(View.GONE);\n                }\n            } else {\n                mQuotaTextLink.setVisibility(View.GONE);\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled updateQuotaLink from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: updateQuotaLink\n\n        Method Code: private void updateQuotaLink() {\n        if (mQuotaTextLink != null) {\n            if (MDMConfig.INSTANCE.externalSiteSupport(this)) {\n                List<ExternalLink> quotas = externalLinksProvider.getExternalLink(ExternalLinkType.QUOTA);\n\n                float density = getResources().getDisplayMetrics().density;\n                final int size = Math.round(24 * density);\n\n                if (quotas.size() > 0) {\n                    final ExternalLink firstQuota = quotas.get(0);\n                    mQuotaTextLink.setText(firstQuota.getName());\n                    mQuotaTextLink.setClickable(true);\n                    mQuotaTextLink.setVisibility(View.VISIBLE);\n                    mQuotaTextLink.setOnClickListener(v -> {\n                        Intent externalWebViewIntent = new Intent(getApplicationContext(), ExternalSiteWebView.class);\n                        externalWebViewIntent.putExtra(ExternalSiteWebView.EXTRA_TITLE, firstQuota.getName());\n                        externalWebViewIntent.putExtra(ExternalSiteWebView.EXTRA_URL, firstQuota.getUrl());\n                        externalWebViewIntent.putExtra(ExternalSiteWebView.EXTRA_SHOW_SIDEBAR, true);\n                        menuItemId = Menu.NONE;\n                        startActivity(externalWebViewIntent);\n                    });\n\n\n                    SimpleTarget target = new SimpleTarget<Drawable>() {\n                        @Override\n                        public void onResourceReady(Drawable resource, GlideAnimation glideAnimation) {\n                            Drawable test = resource.getCurrent();\n                            test.setBounds(0, 0, size, size);\n                            mQuotaTextLink.setCompoundDrawablesWithIntrinsicBounds(test, null, null, null);\n                        }\n\n                        @Override\n                        public void onLoadFailed(Exception e, Drawable errorDrawable) {\n                            super.onLoadFailed(e, errorDrawable);\n\n                            Drawable test = errorDrawable.getCurrent();\n                            test.setBounds(0, 0, size, size);\n\n                            mQuotaTextLink.setCompoundDrawablesWithIntrinsicBounds(test, null, null, null);\n                        }\n                    };\n\n                    DisplayUtils.downloadIcon(getUserAccountManager(),\n                                              clientFactory,\n                                              this,\n                                              firstQuota.getIconUrl(),\n                                              target,\n                                              R.drawable.ic_link);\n\n                } else {\n                    mQuotaTextLink.setVisibility(View.GONE);\n                }\n            } else {\n                mQuotaTextLink.setVisibility(View.GONE);\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func updateQuotaLink() {\n    if let mQuotaTextLink = mQuotaTextLink {\n        if MDMConfig.INSTANCE.externalSiteSupport(self) {\n            let quotas = externalLinksProvider.getExternalLink(type: .QUOTA)\n            \n            let density = UIScreen.main.scale\n            let size = Int(round(24 * density))\n            \n            if quotas.count > 0 {\n                let firstQuota = quotas[0]\n                mQuotaTextLink.text = firstQuota.getName()\n                mQuotaTextLink.isUserInteractionEnabled = true\n                mQuotaTextLink.isHidden = false\n                mQuotaTextLink.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(quotaLinkTapped)))\n                \n                let target = SimpleTarget<UIImage> { resource in\n                    let test = resource\n                    test?.draw(in: CGRect(x: 0, y: 0, width: size, height: size))\n                    mQuotaTextLink.setImage(test, for: .normal)\n                } onFailure: { error in\n                    let test = UIImage(named: \"ic_link\")\n                    test?.draw(in: CGRect(x: 0, y: 0, width: size, height: size))\n                    mQuotaTextLink.setImage(test, for: .normal)\n                }\n                \n                DisplayUtils.downloadIcon(userAccountManager: getUserAccountManager(),\n                                          clientFactory: clientFactory,\n                                          context: self,\n                                          url: firstQuota.getIconUrl(),\n                                          target: target,\n                                          placeholder: UIImage(named: \"ic_link\"))\n                \n            } else {\n                mQuotaTextLink.isHidden = true\n            }\n        } else {\n            mQuotaTextLink.isHidden = true\n        }\n    }\n}\n\n@objc private func quotaLinkTapped() {\n    if let firstQuota = externalLinksProvider.getExternalLink(type: .QUOTA).first {\n        let externalWebViewIntent = ExternalSiteWebView()\n        externalWebViewIntent.title = firstQuota.getName()\n        externalWebViewIntent.url = firstQuota.getUrl()\n        externalWebViewIntent.showSidebar = true\n        menuItemId = .none\n        present(externalWebViewIntent, animated: true, completion: nil)\n    }\n}\n```"
    },
    {
        "method_name": "onResourceReady",
        "method_code": "@Override\n                        public void onResourceReady(Drawable resource, GlideAnimation glideAnimation) {\n                            Drawable test = resource.getCurrent();\n                            test.setBounds(0, 0, size, size);\n                            mQuotaTextLink.setCompoundDrawablesWithIntrinsicBounds(test, null, null, null);\n                        }",
        "prompt": "\n        Please translate the following Java (Android) method titled onResourceReady from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: onResourceReady\n\n        Method Code: @Override\n                        public void onResourceReady(Drawable resource, GlideAnimation glideAnimation) {\n                            Drawable test = resource.getCurrent();\n                            test.setBounds(0, 0, size, size);\n                            mQuotaTextLink.setCompoundDrawablesWithIntrinsicBounds(test, null, null, null);\n                        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onResourceReady(resource: Drawable, glideAnimation: GlideAnimation) {\n    let test = resource.current\n    test.setBounds(CGRect(x: 0, y: 0, width: size, height: size))\n    mQuotaTextLink.setCompoundDrawablesWithIntrinsicBounds(test, nil, nil, nil)\n}\n```"
    },
    {
        "method_name": "onLoadFailed",
        "method_code": "@Override\n                        public void onLoadFailed(Exception e, Drawable errorDrawable) {\n                            super.onLoadFailed(e, errorDrawable);\n\n                            Drawable test = errorDrawable.getCurrent();\n                            test.setBounds(0, 0, size, size);\n\n                            mQuotaTextLink.setCompoundDrawablesWithIntrinsicBounds(test, null, null, null);\n                        }",
        "prompt": "\n        Please translate the following Java (Android) method titled onLoadFailed from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: onLoadFailed\n\n        Method Code: @Override\n                        public void onLoadFailed(Exception e, Drawable errorDrawable) {\n                            super.onLoadFailed(e, errorDrawable);\n\n                            Drawable test = errorDrawable.getCurrent();\n                            test.setBounds(0, 0, size, size);\n\n                            mQuotaTextLink.setCompoundDrawablesWithIntrinsicBounds(test, null, null, null);\n                        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onLoadFailed(_ error: Error?, errorDrawable: Drawable?) {\n    super.onLoadFailed(error, errorDrawable: errorDrawable)\n\n    if let test = errorDrawable?.current {\n        test.bounds = CGRect(x: 0, y: 0, width: size, height: size)\n        mQuotaTextLink.setCompoundDrawablesWithIntrinsicBounds(test, nil, nil, nil)\n    }\n}\n```"
    },
    {
        "method_name": "setDrawerMenuItemChecked",
        "method_code": "public void setDrawerMenuItemChecked() {\n        if (mNavigationView == null) {\n            return;\n        }\n\n        MenuItem menuItem = mNavigationView.getMenu().findItem(menuItemId);\n\n        if (menuItem == null) {\n            Log_OC.w(TAG, \"setDrawerMenuItemChecked has been called with invalid menu-item-ID\");\n            return;\n        }\n\n        if (menuItem.isChecked()) {\n            return;\n        }\n\n        Log_OC.d(TAG, \"New menu item is: \" + menuItemId);\n\n        viewThemeUtils.platform.colorNavigationView(mNavigationView);\n        menuItem.setChecked(true);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setDrawerMenuItemChecked from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: setDrawerMenuItemChecked\n\n        Method Code: public void setDrawerMenuItemChecked() {\n        if (mNavigationView == null) {\n            return;\n        }\n\n        MenuItem menuItem = mNavigationView.getMenu().findItem(menuItemId);\n\n        if (menuItem == null) {\n            Log_OC.w(TAG, \"setDrawerMenuItemChecked has been called with invalid menu-item-ID\");\n            return;\n        }\n\n        if (menuItem.isChecked()) {\n            return;\n        }\n\n        Log_OC.d(TAG, \"New menu item is: \" + menuItemId);\n\n        viewThemeUtils.platform.colorNavigationView(mNavigationView);\n        menuItem.setChecked(true);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setDrawerMenuItemChecked() {\n    guard let navigationView = mNavigationView else {\n        return\n    }\n\n    guard let menuItem = navigationView.menu.findItem(withId: menuItemId) else {\n        Log_OC.w(TAG, \"setDrawerMenuItemChecked has been called with invalid menu-item-ID\")\n        return\n    }\n\n    if menuItem.isChecked {\n        return\n    }\n\n    Log_OC.d(TAG, \"New menu item is: \\(menuItemId)\")\n\n    viewThemeUtils.platform.colorNavigationView(navigationView)\n    menuItem.isChecked = true\n}\n```"
    },
    {
        "method_name": "getAndDisplayUserQuota",
        "method_code": "private void getAndDisplayUserQuota() {\n        // set user space information\n        Thread t = new Thread(() -> {\n            final User user = accountManager.getUser();\n\n            if (user.isAnonymous()) {\n                return;\n            }\n\n            final Context context = MainApp.getAppContext();\n            NextcloudClient nextcloudClient = null;\n            try {\n                nextcloudClient = OwnCloudClientManagerFactory\n                    .getDefaultSingleton()\n                    .getNextcloudClientFor(user.toOwnCloudAccount(),\n                                           context);\n            } catch (OperationCanceledException | AuthenticatorException | IOException e) {\n                Log_OC.e(this, \"Error retrieving user quota\", e);\n            }\n\n            if (nextcloudClient == null) {\n                return;\n            }\n\n            RemoteOperationResult<UserInfo> result = new GetUserInfoRemoteOperation().execute(nextcloudClient);\n\n            if (result.isSuccess() && result.getResultData() != null) {\n                final UserInfo userInfo = result.getResultData();\n                final Quota quota = userInfo.getQuota();\n\n                if (quota != null) {\n                    final long used = quota.getUsed();\n                    final long total = quota.getTotal();\n                    final int relative = (int) Math.ceil(quota.getRelative());\n                    final long quotaValue = quota.getQuota();\n\n                    runOnUiThread(() -> {\n                        if (quotaValue > 0 || quotaValue == GetUserInfoRemoteOperation.SPACE_UNLIMITED\n                            || quotaValue == GetUserInfoRemoteOperation.QUOTA_LIMIT_INFO_NOT_AVAILABLE) {\n                            /*\n                             * show quota in case\n                             * it is available and calculated (> 0) or\n                             * in case of legacy servers (==QUOTA_LIMIT_INFO_NOT_AVAILABLE)\n                             */\n                            setQuotaInformation(used, total, relative, quotaValue);\n                        } else {\n                            /*\n                             * quotaValue < 0 means special cases like\n                             * {@link RemoteGetUserQuotaOperation.SPACE_NOT_COMPUTED},\n                             * {@link RemoteGetUserQuotaOperation.SPACE_UNKNOWN} or\n                             * {@link RemoteGetUserQuotaOperation.SPACE_UNLIMITED}\n                             * thus don't display any quota information.\n                             */\n                            showQuota(false);\n                        }\n                    });\n                }\n            }\n        });\n\n        t.start();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getAndDisplayUserQuota from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: getAndDisplayUserQuota\n\n        Method Code: private void getAndDisplayUserQuota() {\n        // set user space information\n        Thread t = new Thread(() -> {\n            final User user = accountManager.getUser();\n\n            if (user.isAnonymous()) {\n                return;\n            }\n\n            final Context context = MainApp.getAppContext();\n            NextcloudClient nextcloudClient = null;\n            try {\n                nextcloudClient = OwnCloudClientManagerFactory\n                    .getDefaultSingleton()\n                    .getNextcloudClientFor(user.toOwnCloudAccount(),\n                                           context);\n            } catch (OperationCanceledException | AuthenticatorException | IOException e) {\n                Log_OC.e(this, \"Error retrieving user quota\", e);\n            }\n\n            if (nextcloudClient == null) {\n                return;\n            }\n\n            RemoteOperationResult<UserInfo> result = new GetUserInfoRemoteOperation().execute(nextcloudClient);\n\n            if (result.isSuccess() && result.getResultData() != null) {\n                final UserInfo userInfo = result.getResultData();\n                final Quota quota = userInfo.getQuota();\n\n                if (quota != null) {\n                    final long used = quota.getUsed();\n                    final long total = quota.getTotal();\n                    final int relative = (int) Math.ceil(quota.getRelative());\n                    final long quotaValue = quota.getQuota();\n\n                    runOnUiThread(() -> {\n                        if (quotaValue > 0 || quotaValue == GetUserInfoRemoteOperation.SPACE_UNLIMITED\n                            || quotaValue == GetUserInfoRemoteOperation.QUOTA_LIMIT_INFO_NOT_AVAILABLE) {\n                            /*\n                             * show quota in case\n                             * it is available and calculated (> 0) or\n                             * in case of legacy servers (==QUOTA_LIMIT_INFO_NOT_AVAILABLE)\n                             */\n                            setQuotaInformation(used, total, relative, quotaValue);\n                        } else {\n                            /*\n                             * quotaValue < 0 means special cases like\n                             * {@link RemoteGetUserQuotaOperation.SPACE_NOT_COMPUTED},\n                             * {@link RemoteGetUserQuotaOperation.SPACE_UNKNOWN} or\n                             * {@link RemoteGetUserQuotaOperation.SPACE_UNLIMITED}\n                             * thus don't display any quota information.\n                             */\n                            showQuota(false);\n                        }\n                    });\n                }\n            }\n        });\n\n        t.start();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getAndDisplayUserQuota() {\n    DispatchQueue.global().async {\n        guard let user = accountManager.getUser(), !user.isAnonymous() else {\n            return\n        }\n\n        let context = MainApp.getAppContext()\n        var nextcloudClient: NextcloudClient? = nil\n        do {\n            nextcloudClient = try OwnCloudClientManagerFactory\n                .getDefaultSingleton()\n                .getNextcloudClientFor(user.toOwnCloudAccount(), context)\n        } catch {\n            Log_OC.e(self, \"Error retrieving user quota\", error)\n        }\n\n        guard let client = nextcloudClient else {\n            return\n        }\n\n        let result = GetUserInfoRemoteOperation().execute(client)\n\n        if result.isSuccess(), let userInfo = result.getResultData() {\n            let quota = userInfo.getQuota()\n\n            if let quota = quota {\n                let used = quota.getUsed()\n                let total = quota.getTotal()\n                let relative = Int(ceil(quota.getRelative()))\n                let quotaValue = quota.getQuota()\n\n                DispatchQueue.main.async {\n                    if quotaValue > 0 || quotaValue == GetUserInfoRemoteOperation.SPACE_UNLIMITED\n                        || quotaValue == GetUserInfoRemoteOperation.QUOTA_LIMIT_INFO_NOT_AVAILABLE {\n                        self.setQuotaInformation(used: used, total: total, relative: relative, quotaValue: quotaValue)\n                    } else {\n                        self.showQuota(false)\n                    }\n                }\n            }\n        }\n    }\n}\n```"
    },
    {
        "method_name": "updateExternalLinksInDrawer",
        "method_code": "private void updateExternalLinksInDrawer() {\n        if (mNavigationView != null && MDMConfig.INSTANCE.externalSiteSupport(this)) {\n            mNavigationView.getMenu().removeGroup(R.id.drawer_menu_external_links);\n\n            int greyColor = ContextCompat.getColor(this, R.color.drawer_menu_icon);\n\n            for (final ExternalLink link : externalLinksProvider.getExternalLink(ExternalLinkType.LINK)) {\n                int id = mNavigationView.getMenu().add(R.id.drawer_menu_external_links,\n                                                       MENU_ITEM_EXTERNAL_LINK + link.getId(), MENU_ORDER_EXTERNAL_LINKS, link.getName())\n                    .setCheckable(true).getItemId();\n\n                MenuSimpleTarget target = new MenuSimpleTarget<Drawable>(id) {\n                    @Override\n                    public void onResourceReady(Drawable resource, GlideAnimation glideAnimation) {\n                        setExternalLinkIcon(getIdMenuItem(), resource, greyColor);\n                    }\n\n                    @Override\n                    public void onLoadFailed(Exception e, Drawable errorDrawable) {\n                        super.onLoadFailed(e, errorDrawable);\n                        setExternalLinkIcon(getIdMenuItem(), errorDrawable, greyColor);\n                    }\n                };\n\n                DisplayUtils.downloadIcon(getUserAccountManager(),\n                                          clientFactory,\n                                          this,\n                                          link.getIconUrl(),\n                                          target,\n                                          R.drawable.ic_link);\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled updateExternalLinksInDrawer from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: updateExternalLinksInDrawer\n\n        Method Code: private void updateExternalLinksInDrawer() {\n        if (mNavigationView != null && MDMConfig.INSTANCE.externalSiteSupport(this)) {\n            mNavigationView.getMenu().removeGroup(R.id.drawer_menu_external_links);\n\n            int greyColor = ContextCompat.getColor(this, R.color.drawer_menu_icon);\n\n            for (final ExternalLink link : externalLinksProvider.getExternalLink(ExternalLinkType.LINK)) {\n                int id = mNavigationView.getMenu().add(R.id.drawer_menu_external_links,\n                                                       MENU_ITEM_EXTERNAL_LINK + link.getId(), MENU_ORDER_EXTERNAL_LINKS, link.getName())\n                    .setCheckable(true).getItemId();\n\n                MenuSimpleTarget target = new MenuSimpleTarget<Drawable>(id) {\n                    @Override\n                    public void onResourceReady(Drawable resource, GlideAnimation glideAnimation) {\n                        setExternalLinkIcon(getIdMenuItem(), resource, greyColor);\n                    }\n\n                    @Override\n                    public void onLoadFailed(Exception e, Drawable errorDrawable) {\n                        super.onLoadFailed(e, errorDrawable);\n                        setExternalLinkIcon(getIdMenuItem(), errorDrawable, greyColor);\n                    }\n                };\n\n                DisplayUtils.downloadIcon(getUserAccountManager(),\n                                          clientFactory,\n                                          this,\n                                          link.getIconUrl(),\n                                          target,\n                                          R.drawable.ic_link);\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func updateExternalLinksInDrawer() {\n    if let navigationView = mNavigationView, MDMConfig.INSTANCE.externalSiteSupport(self) {\n        navigationView.menu.removeGroup(R.id.drawer_menu_external_links)\n\n        let greyColor = ContextCompat.getColor(self, R.color.drawer_menu_icon)\n\n        for link in externalLinksProvider.getExternalLink(.LINK) {\n            let id = navigationView.menu.add(groupId: R.id.drawer_menu_external_links,\n                                             itemId: MENU_ITEM_EXTERNAL_LINK + link.getId(),\n                                             order: MENU_ORDER_EXTERNAL_LINKS,\n                                             title: link.getName())\n                .setCheckable(true).itemId\n\n            let target = MenuSimpleTarget<Drawable>(id: id) { resource, glideAnimation in\n                self.setExternalLinkIcon(id, resource, greyColor)\n            } onLoadFailed: { e, errorDrawable in\n                self.setExternalLinkIcon(id, errorDrawable, greyColor)\n            }\n\n            DisplayUtils.downloadIcon(getUserAccountManager(),\n                                      clientFactory: clientFactory,\n                                      context: self,\n                                      url: link.getIconUrl(),\n                                      target: target,\n                                      placeholder: R.drawable.ic_link)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "onResourceReady",
        "method_code": "@Override\n                    public void onResourceReady(Drawable resource, GlideAnimation glideAnimation) {\n                        setExternalLinkIcon(getIdMenuItem(), resource, greyColor);\n                    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onResourceReady from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: onResourceReady\n\n        Method Code: @Override\n                    public void onResourceReady(Drawable resource, GlideAnimation glideAnimation) {\n                        setExternalLinkIcon(getIdMenuItem(), resource, greyColor);\n                    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onResourceReady(resource: Drawable, glideAnimation: GlideAnimation) {\n    setExternalLinkIcon(getIdMenuItem(), resource, greyColor)\n}\n```"
    },
    {
        "method_name": "onLoadFailed",
        "method_code": "@Override\n                    public void onLoadFailed(Exception e, Drawable errorDrawable) {\n                        super.onLoadFailed(e, errorDrawable);\n                        setExternalLinkIcon(getIdMenuItem(), errorDrawable, greyColor);\n                    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onLoadFailed from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: onLoadFailed\n\n        Method Code: @Override\n                    public void onLoadFailed(Exception e, Drawable errorDrawable) {\n                        super.onLoadFailed(e, errorDrawable);\n                        setExternalLinkIcon(getIdMenuItem(), errorDrawable, greyColor);\n                    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onLoadFailed(_ error: Error?, _ errorDrawable: Drawable?) {\n    super.onLoadFailed(error, errorDrawable)\n    setExternalLinkIcon(getIdMenuItem(), errorDrawable, greyColor)\n}\n```"
    },
    {
        "method_name": "setExternalLinkIcon",
        "method_code": "private void setExternalLinkIcon(int id, Drawable drawable, int greyColor) {\n        MenuItem menuItem = mNavigationView.getMenu().findItem(id);\n\n        if (menuItem != null) {\n            if (drawable != null) {\n                menuItem.setIcon(viewThemeUtils.platform.colorDrawable(drawable, greyColor));\n            } else {\n                menuItem.setIcon(R.drawable.ic_link);\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setExternalLinkIcon from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: setExternalLinkIcon\n\n        Method Code: private void setExternalLinkIcon(int id, Drawable drawable, int greyColor) {\n        MenuItem menuItem = mNavigationView.getMenu().findItem(id);\n\n        if (menuItem != null) {\n            if (drawable != null) {\n                menuItem.setIcon(viewThemeUtils.platform.colorDrawable(drawable, greyColor));\n            } else {\n                menuItem.setIcon(R.drawable.ic_link);\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setExternalLinkIcon(id: Int, drawable: Drawable?, greyColor: Int) {\n    if let menuItem = mNavigationView.menu.findItem(withId: id) {\n        if let drawable = drawable {\n            menuItem.icon = viewThemeUtils.platform.colorDrawable(drawable, greyColor: greyColor)\n        } else {\n            menuItem.icon = UIImage(named: \"ic_link\")\n        }\n    }\n}\n```"
    },
    {
        "method_name": "onCreate",
        "method_code": "@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        if (savedInstanceState != null) {\n            mIsAccountChooserActive = savedInstanceState.getBoolean(KEY_IS_ACCOUNT_CHOOSER_ACTIVE, false);\n        }\n\n        externalLinksProvider = new ExternalLinksProvider(getContentResolver());\n        arbitraryDataProvider = new ArbitraryDataProviderImpl(this);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreate from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: onCreate\n\n        Method Code: @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        if (savedInstanceState != null) {\n            mIsAccountChooserActive = savedInstanceState.getBoolean(KEY_IS_ACCOUNT_CHOOSER_ACTIVE, false);\n        }\n\n        externalLinksProvider = new ExternalLinksProvider(getContentResolver());\n        arbitraryDataProvider = new ArbitraryDataProviderImpl(this);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    if let savedInstanceState = savedInstanceState {\n        mIsAccountChooserActive = savedInstanceState.bool(forKey: KEY_IS_ACCOUNT_CHOOSER_ACTIVE)\n    }\n\n    externalLinksProvider = ExternalLinksProvider(contentResolver: getContentResolver())\n    arbitraryDataProvider = ArbitraryDataProviderImpl(context: self)\n}\n```"
    },
    {
        "method_name": "onSaveInstanceState",
        "method_code": "@Override\n    protected void onSaveInstanceState(@NonNull Bundle outState) {\n        super.onSaveInstanceState(outState);\n        outState.putBoolean(KEY_IS_ACCOUNT_CHOOSER_ACTIVE, mIsAccountChooserActive);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onSaveInstanceState from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: onSaveInstanceState\n\n        Method Code: @Override\n    protected void onSaveInstanceState(@NonNull Bundle outState) {\n        super.onSaveInstanceState(outState);\n        outState.putBoolean(KEY_IS_ACCOUNT_CHOOSER_ACTIVE, mIsAccountChooserActive);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func encodeRestorableState(with coder: NSCoder) {\n    super.encodeRestorableState(with: coder)\n    coder.encode(mIsAccountChooserActive, forKey: KEY_IS_ACCOUNT_CHOOSER_ACTIVE)\n}\n```"
    },
    {
        "method_name": "onRestoreInstanceState",
        "method_code": "@Override\n    public void onRestoreInstanceState(@NonNull Bundle savedInstanceState) {\n        super.onRestoreInstanceState(savedInstanceState);\n        mIsAccountChooserActive = savedInstanceState.getBoolean(KEY_IS_ACCOUNT_CHOOSER_ACTIVE, false);\n        setDrawerMenuItemChecked();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onRestoreInstanceState from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: onRestoreInstanceState\n\n        Method Code: @Override\n    public void onRestoreInstanceState(@NonNull Bundle savedInstanceState) {\n        super.onRestoreInstanceState(savedInstanceState);\n        mIsAccountChooserActive = savedInstanceState.getBoolean(KEY_IS_ACCOUNT_CHOOSER_ACTIVE, false);\n        setDrawerMenuItemChecked();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n    if let savedInstanceState = self.savedInstanceState {\n        mIsAccountChooserActive = savedInstanceState.bool(forKey: KEY_IS_ACCOUNT_CHOOSER_ACTIVE)\n        setDrawerMenuItemChecked()\n    }\n}\n```"
    },
    {
        "method_name": "onPostCreate",
        "method_code": "@Override\n    protected void onPostCreate(Bundle savedInstanceState) {\n        super.onPostCreate(savedInstanceState);\n        // Sync the toggle state after onRestoreInstanceState has occurred.\n        if (mDrawerToggle != null) {\n            mDrawerToggle.syncState();\n            if (isDrawerOpen()) {\n                mDrawerToggle.setDrawerIndicatorEnabled(true);\n            }\n        }\n        updateExternalLinksInDrawer();\n        updateQuotaLink();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onPostCreate from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: onPostCreate\n\n        Method Code: @Override\n    protected void onPostCreate(Bundle savedInstanceState) {\n        super.onPostCreate(savedInstanceState);\n        // Sync the toggle state after onRestoreInstanceState has occurred.\n        if (mDrawerToggle != null) {\n            mDrawerToggle.syncState();\n            if (isDrawerOpen()) {\n                mDrawerToggle.setDrawerIndicatorEnabled(true);\n            }\n        }\n        updateExternalLinksInDrawer();\n        updateQuotaLink();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n    // Sync the toggle state after onRestoreInstanceState has occurred.\n    if let drawerToggle = mDrawerToggle {\n        drawerToggle.syncState()\n        if isDrawerOpen() {\n            drawerToggle.setDrawerIndicatorEnabled(true)\n        }\n    }\n    updateExternalLinksInDrawer()\n    updateQuotaLink()\n}\n```"
    },
    {
        "method_name": "onConfigurationChanged",
        "method_code": "@Override\n    public void onConfigurationChanged(@NonNull Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n        if (mDrawerToggle != null) {\n            mDrawerToggle.onConfigurationChanged(newConfig);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onConfigurationChanged from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: onConfigurationChanged\n\n        Method Code: @Override\n    public void onConfigurationChanged(@NonNull Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n        if (mDrawerToggle != null) {\n            mDrawerToggle.onConfigurationChanged(newConfig);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func didChange(_ newConfig: Configuration) {\n    super.didChange(newConfig)\n    if let drawerToggle = mDrawerToggle {\n        drawerToggle.didChange(newConfig)\n    }\n}\n```"
    },
    {
        "method_name": "onBackPressed",
        "method_code": "@Override\n    public void onBackPressed() {\n        if (isDrawerOpen()) {\n            closeDrawer();\n            return;\n        }\n        Fragment fileDetailsSharingProcessFragment =\n            getSupportFragmentManager().findFragmentByTag(FileDetailsSharingProcessFragment.TAG);\n        if (fileDetailsSharingProcessFragment != null) {\n            ((FileDetailsSharingProcessFragment) fileDetailsSharingProcessFragment).onBackPressed();\n        } else {\n            super.onBackPressed();\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onBackPressed from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: onBackPressed\n\n        Method Code: @Override\n    public void onBackPressed() {\n        if (isDrawerOpen()) {\n            closeDrawer();\n            return;\n        }\n        Fragment fileDetailsSharingProcessFragment =\n            getSupportFragmentManager().findFragmentByTag(FileDetailsSharingProcessFragment.TAG);\n        if (fileDetailsSharingProcessFragment != null) {\n            ((FileDetailsSharingProcessFragment) fileDetailsSharingProcessFragment).onBackPressed();\n        } else {\n            super.onBackPressed();\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n    if isDrawerOpen() {\n        closeDrawer()\n        return\n    }\n    if let fileDetailsSharingProcessFragment = getSupportFragmentManager().findFragment(byTag: FileDetailsSharingProcessFragment.TAG) as? FileDetailsSharingProcessFragment {\n        fileDetailsSharingProcessFragment.onBackPressed()\n    } else {\n        super.viewWillDisappear(animated)\n    }\n}\n```"
    },
    {
        "method_name": "onActivityResult",
        "method_code": "@Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n\n        // update Account list and active account if Manage Account activity replies with\n        // - ACCOUNT_LIST_CHANGED = true\n        // - RESULT_OK\n        if (requestCode == ACTION_MANAGE_ACCOUNTS && resultCode == RESULT_OK\n            && data.getBooleanExtra(ManageAccountsActivity.KEY_ACCOUNT_LIST_CHANGED, false)) {\n\n            // current account has changed\n            if (data.getBooleanExtra(ManageAccountsActivity.KEY_CURRENT_ACCOUNT_CHANGED, false)) {\n                setAccount(accountManager.getCurrentAccount(), false);\n                restart();\n            }\n        } else if (requestCode == PassCodeManager.PASSCODE_ACTIVITY && data != null) {\n            int result = data.getIntExtra(RequestCredentialsActivity.KEY_CHECK_RESULT,\n                                          RequestCredentialsActivity.KEY_CHECK_RESULT_FALSE);\n\n            if (result == RequestCredentialsActivity.KEY_CHECK_RESULT_CANCEL) {\n                Log_OC.d(TAG, \"PassCodeManager cancelled\");\n                preferences.setLockTimestamp(0);\n                finish();\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onActivityResult from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: onActivityResult\n\n        Method Code: @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n\n        // update Account list and active account if Manage Account activity replies with\n        // - ACCOUNT_LIST_CHANGED = true\n        // - RESULT_OK\n        if (requestCode == ACTION_MANAGE_ACCOUNTS && resultCode == RESULT_OK\n            && data.getBooleanExtra(ManageAccountsActivity.KEY_ACCOUNT_LIST_CHANGED, false)) {\n\n            // current account has changed\n            if (data.getBooleanExtra(ManageAccountsActivity.KEY_CURRENT_ACCOUNT_CHANGED, false)) {\n                setAccount(accountManager.getCurrentAccount(), false);\n                restart();\n            }\n        } else if (requestCode == PassCodeManager.PASSCODE_ACTIVITY && data != null) {\n            int result = data.getIntExtra(RequestCredentialsActivity.KEY_CHECK_RESULT,\n                                          RequestCredentialsActivity.KEY_CHECK_RESULT_FALSE);\n\n            if (result == RequestCredentialsActivity.KEY_CHECK_RESULT_CANCEL) {\n                Log_OC.d(TAG, \"PassCodeManager cancelled\");\n                preferences.setLockTimestamp(0);\n                finish();\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n    super.prepare(for: segue, sender: sender)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func didReceiveMemoryWarning() {\n    super.didReceiveMemoryWarning()\n}\n\noverride func onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n    super.onActivityResult(requestCode: requestCode, resultCode: resultCode, data: data)\n\n    if requestCode == ACTION_MANAGE_ACCOUNTS && resultCode == RESULT_OK,\n       let data = data,\n       data.getBooleanExtra(ManageAccountsActivity.KEY_ACCOUNT_LIST_CHANGED, false) {\n\n        if data.getBooleanExtra(ManageAccountsActivity.KEY_CURRENT_ACCOUNT_CHANGED, false) {\n            setAccount(accountManager.getCurrentAccount(), false)\n            restart()\n        }\n    } else if requestCode == PassCodeManager.PASSCODE_ACTIVITY, let data = data {\n        let result = data.getIntExtra(RequestCredentialsActivity.KEY_CHECK_RESULT,\n                                      defaultValue: RequestCredentialsActivity.KEY_CHECK_RESULT_FALSE)\n\n        if result == RequestCredentialsActivity.KEY_CHECK_RESULT_CANCEL {\n            Log_OC.d(TAG, \"PassCodeManager cancelled\")\n            preferences.setLockTimestamp(0)\n            finish()\n        }\n    }\n}\n```"
    },
    {
        "method_name": "findQuotaViewById",
        "method_code": "private View findQuotaViewById(int id) {\n        View v = ((NavigationView) findViewById(R.id.nav_view)).getHeaderView(0).findViewById(id);\n\n        if (v != null) {\n            return v;\n        } else {\n            return findViewById(id);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled findQuotaViewById from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: findQuotaViewById\n\n        Method Code: private View findQuotaViewById(int id) {\n        View v = ((NavigationView) findViewById(R.id.nav_view)).getHeaderView(0).findViewById(id);\n\n        if (v != null) {\n            return v;\n        } else {\n            return findViewById(id);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func findQuotaViewById(_ id: Int) -> UIView? {\n    if let navView = view.viewWithTag(R.id.nav_view) as? NavigationView,\n       let headerView = navView.subviews.first,\n       let v = headerView.viewWithTag(id) {\n        return v\n    } else {\n        return view.viewWithTag(id)\n    }\n}\n```"
    },
    {
        "method_name": "restart",
        "method_code": "private void restart() {\n        Intent i = new Intent(this, FileDisplayActivity.class);\n        i.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n        i.setAction(FileDisplayActivity.RESTART);\n        startActivity(i);\n\n        fetchExternalLinks(false);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled restart from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: restart\n\n        Method Code: private void restart() {\n        Intent i = new Intent(this, FileDisplayActivity.class);\n        i.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n        i.setAction(FileDisplayActivity.RESTART);\n        startActivity(i);\n\n        fetchExternalLinks(false);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func restart() {\n    let i = Intent(context: self, class: FileDisplayActivity.self)\n    i.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)\n    i.setAction(FileDisplayActivity.RESTART)\n    startActivity(i)\n\n    fetchExternalLinks(false)\n}\n```"
    },
    {
        "method_name": "showFiles",
        "method_code": "public void showFiles(boolean onDeviceOnly, boolean onlyPersonalFiles) {\n        MainApp.showOnlyFilesOnDevice(onDeviceOnly);\n        MainApp.showOnlyPersonalFiles(onlyPersonalFiles);\n        Intent fileDisplayActivity = new Intent(getApplicationContext(), FileDisplayActivity.class);\n        fileDisplayActivity.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n\n        if (this instanceof ComposeActivity) {\n            fileDisplayActivity.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\n        }\n\n        fileDisplayActivity.setAction(FileDisplayActivity.ALL_FILES);\n        startActivity(fileDisplayActivity);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showFiles from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: showFiles\n\n        Method Code: public void showFiles(boolean onDeviceOnly, boolean onlyPersonalFiles) {\n        MainApp.showOnlyFilesOnDevice(onDeviceOnly);\n        MainApp.showOnlyPersonalFiles(onlyPersonalFiles);\n        Intent fileDisplayActivity = new Intent(getApplicationContext(), FileDisplayActivity.class);\n        fileDisplayActivity.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n\n        if (this instanceof ComposeActivity) {\n            fileDisplayActivity.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\n        }\n\n        fileDisplayActivity.setAction(FileDisplayActivity.ALL_FILES);\n        startActivity(fileDisplayActivity);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc showFiles(onDeviceOnly: Bool, onlyPersonalFiles: Bool) {\n    MainApp.showOnlyFilesOnDevice(onDeviceOnly)\n    MainApp.showOnlyPersonalFiles(onlyPersonalFiles)\n    let fileDisplayActivity = UIStoryboard(name: \"Main\", bundle: nil).instantiateViewController(withIdentifier: \"FileDisplayActivity\")\n    \n    if self is ComposeActivity {\n        fileDisplayActivity.modalPresentationStyle = .fullScreen\n        fileDisplayActivity.modalTransitionStyle = .crossDissolve\n    }\n    \n    fileDisplayActivity.restorationIdentifier = FileDisplayActivity.ALL_FILES\n    present(fileDisplayActivity, animated: true, completion: nil)\n}\n```"
    },
    {
        "method_name": "avatarGenerated",
        "method_code": "@Override\n    public void avatarGenerated(Drawable avatarDrawable, Object callContext) {\n        if (callContext instanceof MenuItem menuItem) {\n            MenuItem newIcon = menuItem.setIcon(avatarDrawable);\n            Log_OC.d(TAG,\"avatarGenerated new icon: \" + newIcon);\n        } else if (callContext instanceof ImageView imageView) {\n            imageView.setImageDrawable(avatarDrawable);\n        } else if (callContext instanceof MaterialButton materialButton) {\n            materialButton.setIcon(avatarDrawable);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled avatarGenerated from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: avatarGenerated\n\n        Method Code: @Override\n    public void avatarGenerated(Drawable avatarDrawable, Object callContext) {\n        if (callContext instanceof MenuItem menuItem) {\n            MenuItem newIcon = menuItem.setIcon(avatarDrawable);\n            Log_OC.d(TAG,\"avatarGenerated new icon: \" + newIcon);\n        } else if (callContext instanceof ImageView imageView) {\n            imageView.setImageDrawable(avatarDrawable);\n        } else if (callContext instanceof MaterialButton materialButton) {\n            materialButton.setIcon(avatarDrawable);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc avatarGenerated(avatarDrawable: UIImage, callContext: Any) {\n    if let menuItem = callContext as? UIBarButtonItem {\n        menuItem.image = avatarDrawable\n        print(\"avatarGenerated new icon: \\(String(describing: menuItem.image))\")\n    } else if let imageView = callContext as? UIImageView {\n        imageView.image = avatarDrawable\n    } else if let materialButton = callContext as? UIButton {\n        materialButton.setImage(avatarDrawable, for: .normal)\n    }\n}\n```"
    },
    {
        "method_name": "shouldCallGeneratedCallback",
        "method_code": "@Override\n    public boolean shouldCallGeneratedCallback(String tag, Object callContext) {\n        if (callContext instanceof MenuItem menuItem) {\n            return String.valueOf(menuItem.getTitle()).equals(tag);\n        } else if (callContext instanceof ImageView imageView) {\n            return String.valueOf(imageView.getTag()).equals(tag);\n        } else if (callContext instanceof MaterialButton materialButton) {\n            return String.valueOf(materialButton.getTag()).equals(tag);\n        }\n        return false;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled shouldCallGeneratedCallback from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: shouldCallGeneratedCallback\n\n        Method Code: @Override\n    public boolean shouldCallGeneratedCallback(String tag, Object callContext) {\n        if (callContext instanceof MenuItem menuItem) {\n            return String.valueOf(menuItem.getTitle()).equals(tag);\n        } else if (callContext instanceof ImageView imageView) {\n            return String.valueOf(imageView.getTag()).equals(tag);\n        } else if (callContext instanceof MaterialButton materialButton) {\n            return String.valueOf(materialButton.getTag()).equals(tag);\n        }\n        return false;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc shouldCallGeneratedCallback(tag: String, callContext: Any) -> Bool {\n    if let menuItem = callContext as? MenuItem {\n        return String(describing: menuItem.title) == tag\n    } else if let imageView = callContext as? UIImageView {\n        return String(describing: imageView.tag) == tag\n    } else if let materialButton = callContext as? MaterialButton {\n        return String(describing: materialButton.tag) == tag\n    }\n    return false\n}\n```"
    },
    {
        "method_name": "addDrawerListener",
        "method_code": "public void addDrawerListener(DrawerLayout.DrawerListener listener) {\n        if (mDrawerLayout != null) {\n            mDrawerLayout.addDrawerListener(listener);\n        } else {\n            Log_OC.e(TAG, \"Drawer layout not ready to add drawer listener\");\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled addDrawerListener from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: addDrawerListener\n\n        Method Code: public void addDrawerListener(DrawerLayout.DrawerListener listener) {\n        if (mDrawerLayout != null) {\n            mDrawerLayout.addDrawerListener(listener);\n        } else {\n            Log_OC.e(TAG, \"Drawer layout not ready to add drawer listener\");\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc addDrawerListener(listener: DrawerLayout.DrawerListener) {\n    if let drawerLayout = mDrawerLayout {\n        drawerLayout.addDrawerListener(listener)\n    } else {\n        Log_OC.e(TAG, \"Drawer layout not ready to add drawer listener\")\n    }\n}\n```"
    },
    {
        "method_name": "isDrawerIndicatorAvailable",
        "method_code": "public boolean isDrawerIndicatorAvailable() {\n        return true;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled isDrawerIndicatorAvailable from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: isDrawerIndicatorAvailable\n\n        Method Code: public boolean isDrawerIndicatorAvailable() {\n        return true;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc isDrawerIndicatorAvailable() -> Bool {\n    return true\n}\n```"
    },
    {
        "method_name": "getAppPreferences",
        "method_code": "public AppPreferences getAppPreferences() {\n        return preferences;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getAppPreferences from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: getAppPreferences\n\n        Method Code: public AppPreferences getAppPreferences() {\n        return preferences;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getAppPreferences() -> AppPreferences {\n    return preferences\n}\n```"
    },
    {
        "method_name": "onStart",
        "method_code": "@Override\n    protected void onStart() {\n        super.onStart();\n        EventBus.getDefault().register(this);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onStart from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: onStart\n\n        Method Code: @Override\n    protected void onStart() {\n        super.onStart();\n        EventBus.getDefault().register(this);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n    EventBus.default.register(self)\n}\n```"
    },
    {
        "method_name": "onStop",
        "method_code": "@Override\n    protected void onStop() {\n        if (preferences.getLockTimestamp() != 0) {\n            preferences.setLockTimestamp(SystemClock.elapsedRealtime());\n        }\n        EventBus.getDefault().unregister(this);\n        super.onStop();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onStop from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: onStop\n\n        Method Code: @Override\n    protected void onStop() {\n        if (preferences.getLockTimestamp() != 0) {\n            preferences.setLockTimestamp(SystemClock.elapsedRealtime());\n        }\n        EventBus.getDefault().unregister(this);\n        super.onStop();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n    if preferences.lockTimestamp != 0 {\n        preferences.lockTimestamp = ProcessInfo.processInfo.systemUptime\n    }\n    EventBus.default.unregister(self)\n}\n```"
    },
    {
        "method_name": "onAccountRemovedEvent",
        "method_code": "@Subscribe(threadMode = ThreadMode.MAIN)\n    public void onAccountRemovedEvent(AccountRemovedEvent event) {\n        restart();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onAccountRemovedEvent from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: onAccountRemovedEvent\n\n        Method Code: @Subscribe(threadMode = ThreadMode.MAIN)\n    public void onAccountRemovedEvent(AccountRemovedEvent event) {\n        restart();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\n@objc func onAccountRemovedEvent(_ event: AccountRemovedEvent) {\n    restart()\n}\n```"
    },
    {
        "method_name": "fetchExternalLinks",
        "method_code": "public void fetchExternalLinks(final boolean force) {\n        if (!MDMConfig.INSTANCE.externalSiteSupport(this)) {\n            return;\n        }\n\n        User user = accountManager.getUser();\n        if (user.isAnonymous()) {\n            Log_OC.d(TAG, \"Trying to execute a sync operation with a storage manager for an anonymous account\");\n            return;\n        }\n\n        Thread t = new Thread(() -> {\n            // fetch capabilities as early as possible\n            if ((getCapabilities() == null || getCapabilities().getAccountName() != null && getCapabilities().getAccountName().isEmpty())\n                && getStorageManager() != null) {\n                GetCapabilitiesOperation getCapabilities = new GetCapabilitiesOperation(getStorageManager());\n                getCapabilities.execute(getBaseContext());\n            }\n\n            if (getStorageManager() != null && CapabilityUtils.getCapability(user, this)\n                .getExternalLinks().isTrue()) {\n\n                int count = arbitraryDataProvider.getIntegerValue(FilesSyncHelper.GLOBAL,\n                                                                  FileActivity.APP_OPENED_COUNT);\n\n                if (count > 10 || count == -1 || force) {\n                    if (force) {\n                        Log_OC.d(\"ExternalLinks\", \"force update\");\n                    }\n\n                    arbitraryDataProvider.storeOrUpdateKeyValue(FilesSyncHelper.GLOBAL,\n                                                                FileActivity.APP_OPENED_COUNT, \"0\");\n\n                    Log_OC.d(\"ExternalLinks\", \"update via api\");\n                    RemoteOperation getExternalLinksOperation = new ExternalLinksOperation();\n                    RemoteOperationResult result = getExternalLinksOperation.execute(user, this);\n\n                    if (result.isSuccess() && result.getData() != null) {\n                        externalLinksProvider.deleteAllExternalLinks();\n\n                        ArrayList<ExternalLink> externalLinks = (ArrayList<ExternalLink>) (Object) result.getData();\n\n                        for (ExternalLink link : externalLinks) {\n                            externalLinksProvider.storeExternalLink(link);\n                        }\n                    }\n                } else {\n                    arbitraryDataProvider.storeOrUpdateKeyValue(FilesSyncHelper.GLOBAL,\n                                                                FileActivity.APP_OPENED_COUNT, String.valueOf(count + 1));\n                }\n            } else {\n                externalLinksProvider.deleteAllExternalLinks();\n                Log_OC.d(\"ExternalLinks\", \"links disabled\");\n            }\n            runOnUiThread(this::updateExternalLinksInDrawer);\n        });\n        t.start();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled fetchExternalLinks from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: fetchExternalLinks\n\n        Method Code: public void fetchExternalLinks(final boolean force) {\n        if (!MDMConfig.INSTANCE.externalSiteSupport(this)) {\n            return;\n        }\n\n        User user = accountManager.getUser();\n        if (user.isAnonymous()) {\n            Log_OC.d(TAG, \"Trying to execute a sync operation with a storage manager for an anonymous account\");\n            return;\n        }\n\n        Thread t = new Thread(() -> {\n            // fetch capabilities as early as possible\n            if ((getCapabilities() == null || getCapabilities().getAccountName() != null && getCapabilities().getAccountName().isEmpty())\n                && getStorageManager() != null) {\n                GetCapabilitiesOperation getCapabilities = new GetCapabilitiesOperation(getStorageManager());\n                getCapabilities.execute(getBaseContext());\n            }\n\n            if (getStorageManager() != null && CapabilityUtils.getCapability(user, this)\n                .getExternalLinks().isTrue()) {\n\n                int count = arbitraryDataProvider.getIntegerValue(FilesSyncHelper.GLOBAL,\n                                                                  FileActivity.APP_OPENED_COUNT);\n\n                if (count > 10 || count == -1 || force) {\n                    if (force) {\n                        Log_OC.d(\"ExternalLinks\", \"force update\");\n                    }\n\n                    arbitraryDataProvider.storeOrUpdateKeyValue(FilesSyncHelper.GLOBAL,\n                                                                FileActivity.APP_OPENED_COUNT, \"0\");\n\n                    Log_OC.d(\"ExternalLinks\", \"update via api\");\n                    RemoteOperation getExternalLinksOperation = new ExternalLinksOperation();\n                    RemoteOperationResult result = getExternalLinksOperation.execute(user, this);\n\n                    if (result.isSuccess() && result.getData() != null) {\n                        externalLinksProvider.deleteAllExternalLinks();\n\n                        ArrayList<ExternalLink> externalLinks = (ArrayList<ExternalLink>) (Object) result.getData();\n\n                        for (ExternalLink link : externalLinks) {\n                            externalLinksProvider.storeExternalLink(link);\n                        }\n                    }\n                } else {\n                    arbitraryDataProvider.storeOrUpdateKeyValue(FilesSyncHelper.GLOBAL,\n                                                                FileActivity.APP_OPENED_COUNT, String.valueOf(count + 1));\n                }\n            } else {\n                externalLinksProvider.deleteAllExternalLinks();\n                Log_OC.d(\"ExternalLinks\", \"links disabled\");\n            }\n            runOnUiThread(this::updateExternalLinksInDrawer);\n        });\n        t.start();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc fetchExternalLinks(force: Bool) {\n    guard MDMConfig.INSTANCE.externalSiteSupport(self) else {\n        return\n    }\n\n    guard let user = accountManager.getUser(), !user.isAnonymous() else {\n        Log_OC.d(TAG, \"Trying to execute a sync operation with a storage manager for an anonymous account\")\n        return\n    }\n\n    let t = Thread {\n        if (self.getCapabilities() == nil || (self.getCapabilities()?.getAccountName() != nil && self.getCapabilities()?.getAccountName()?.isEmpty ?? true))\n            && self.getStorageManager() != nil {\n            let getCapabilities = GetCapabilitiesOperation(storageManager: self.getStorageManager()!)\n            getCapabilities.execute(self.getBaseContext())\n        }\n\n        if let storageManager = self.getStorageManager(), CapabilityUtils.getCapability(user, self).getExternalLinks().isTrue() {\n            let count = arbitraryDataProvider.getIntegerValue(FilesSyncHelper.GLOBAL, FileActivity.APP_OPENED_COUNT)\n\n            if count > 10 || count == -1 || force {\n                if force {\n                    Log_OC.d(\"ExternalLinks\", \"force update\")\n                }\n\n                arbitraryDataProvider.storeOrUpdateKeyValue(FilesSyncHelper.GLOBAL, FileActivity.APP_OPENED_COUNT, \"0\")\n\n                Log_OC.d(\"ExternalLinks\", \"update via api\")\n                let getExternalLinksOperation = ExternalLinksOperation()\n                let result = getExternalLinksOperation.execute(user, self)\n\n                if result.isSuccess(), let data = result.getData() as? [ExternalLink] {\n                    externalLinksProvider.deleteAllExternalLinks()\n\n                    for link in data {\n                        externalLinksProvider.storeExternalLink(link)\n                    }\n                }\n            } else {\n                arbitraryDataProvider.storeOrUpdateKeyValue(FilesSyncHelper.GLOBAL, FileActivity.APP_OPENED_COUNT, String(count + 1))\n            }\n        } else {\n            externalLinksProvider.deleteAllExternalLinks()\n            Log_OC.d(\"ExternalLinks\", \"links disabled\")\n        }\n        DispatchQueue.main.async {\n            self.updateExternalLinksInDrawer()\n        }\n    }\n    t.start()\n}\n```"
    },
    {
        "method_name": "handleDeepLink",
        "method_code": "protected void handleDeepLink(@NonNull Uri uri) {\n        String path = uri.getLastPathSegment();\n        if (path == null) return;\n\n        DeepLinkConstants deepLinkType = DeepLinkConstants.Companion.fromPath(path);\n        if (deepLinkType == null) {\n            DisplayUtils.showSnackMessage(this, getString(R.string.invalid_url));\n            return;\n        }\n\n        switch (deepLinkType) {\n            case OPEN_AUTO_UPLOAD:\n                startActivity(new Intent(this, SyncedFoldersActivity.class));\n                break;\n            case OPEN_EXTERNAL_URL:\n                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri.getQueryParameter(\"url\")));\n                startActivity(intent);\n                break;\n            case ACTION_CREATE_NEW:\n                findViewById(R.id.fab_main).callOnClick();\n                break;\n            case ACTION_APP_UPDATE:\n                openAppStore(getPackageName(), false);\n                break;\n            case OPEN_NOTIFICATIONS:\n                startActivity(NotificationsActivity.class);\n                break;\n            default:\n                handleNavItemClickEvent(deepLinkType.getNavId());\n                break;\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled handleDeepLink from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: handleDeepLink\n\n        Method Code: protected void handleDeepLink(@NonNull Uri uri) {\n        String path = uri.getLastPathSegment();\n        if (path == null) return;\n\n        DeepLinkConstants deepLinkType = DeepLinkConstants.Companion.fromPath(path);\n        if (deepLinkType == null) {\n            DisplayUtils.showSnackMessage(this, getString(R.string.invalid_url));\n            return;\n        }\n\n        switch (deepLinkType) {\n            case OPEN_AUTO_UPLOAD:\n                startActivity(new Intent(this, SyncedFoldersActivity.class));\n                break;\n            case OPEN_EXTERNAL_URL:\n                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri.getQueryParameter(\"url\")));\n                startActivity(intent);\n                break;\n            case ACTION_CREATE_NEW:\n                findViewById(R.id.fab_main).callOnClick();\n                break;\n            case ACTION_APP_UPDATE:\n                openAppStore(getPackageName(), false);\n                break;\n            case OPEN_NOTIFICATIONS:\n                startActivity(NotificationsActivity.class);\n                break;\n            default:\n                handleNavItemClickEvent(deepLinkType.getNavId());\n                break;\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc handleDeepLink(uri: URL) {\n    guard let path = uri.lastPathComponent else { return }\n\n    guard let deepLinkType = DeepLinkConstants.fromPath(path) else {\n        DisplayUtils.showSnackMessage(self, message: NSLocalizedString(\"invalid_url\", comment: \"\"))\n        return\n    }\n\n    switch deepLinkType {\n    case .openAutoUpload:\n        let syncedFoldersVC = SyncedFoldersActivity()\n        self.present(syncedFoldersVC, animated: true, completion: nil)\n    case .openExternalUrl:\n        if let urlString = uri.queryParameters?[\"url\"], let url = URL(string: urlString) {\n            UIApplication.shared.open(url, options: [:], completionHandler: nil)\n        }\n    case .actionCreateNew:\n        if let fabMain = self.view.viewWithTag(R.id.fab_main) {\n            fabMain.sendActions(for: .touchUpInside)\n        }\n    case .actionAppUpdate:\n        openAppStore(packageName: Bundle.main.bundleIdentifier ?? \"\", isUpdate: false)\n    case .openNotifications:\n        let notificationsVC = NotificationsActivity()\n        self.present(notificationsVC, animated: true, completion: nil)\n    default:\n        handleNavItemClickEvent(navId: deepLinkType.navId)\n    }\n}\n```"
    },
    {
        "method_name": "handleNavItemClickEvent",
        "method_code": "private void handleNavItemClickEvent(@IdRes int menuItemId) {\n        if (mNavigationView == null) {\n            mNavigationView = findViewById(R.id.nav_view);\n        }\n        Menu navMenu = mNavigationView.getMenu();\n        onNavigationItemClicked(navMenu.findItem(menuItemId));\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled handleNavItemClickEvent from DrawerActivity.java into Swift.\n\n        Input:\n\n        Method Name: handleNavItemClickEvent\n\n        Method Code: private void handleNavItemClickEvent(@IdRes int menuItemId) {\n        if (mNavigationView == null) {\n            mNavigationView = findViewById(R.id.nav_view);\n        }\n        Menu navMenu = mNavigationView.getMenu();\n        onNavigationItemClicked(navMenu.findItem(menuItemId));\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func handleNavItemClickEvent(menuItemId: Int) {\n    if mNavigationView == nil {\n        mNavigationView = view.viewWithTag(R.id.nav_view) as? UINavigationView\n    }\n    let navMenu = mNavigationView?.menu\n    if let menuItem = navMenu?.findItem(withId: menuItemId) {\n        onNavigationItemClicked(menuItem)\n    }\n}\n```"
    }
]