[
    {
        "method_name": "onLayout",
        "method_code": "@Override\n    public void onLayout(PrintAttributes oldAttributes,\n                         PrintAttributes newAttributes,\n                         CancellationSignal cancellationSignal,\n                         LayoutResultCallback callback,\n                         Bundle extras) {\n        if (cancellationSignal.isCanceled()) {\n            callback.onLayoutCancelled();\n        } else {\n            PrintDocumentInfo.Builder builder = new PrintDocumentInfo.Builder(PDF_NAME);\n            builder.setContentType(PrintDocumentInfo.CONTENT_TYPE_DOCUMENT)\n                .setPageCount(PrintDocumentInfo.PAGE_COUNT_UNKNOWN)\n                .build();\n            callback.onLayoutFinished(builder.build(), !newAttributes.equals(oldAttributes));\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onLayout from PrintAdapter.java into Swift.\n\n        Input:\n\n        Method Name: onLayout\n\n        Method Code: @Override\n    public void onLayout(PrintAttributes oldAttributes,\n                         PrintAttributes newAttributes,\n                         CancellationSignal cancellationSignal,\n                         LayoutResultCallback callback,\n                         Bundle extras) {\n        if (cancellationSignal.isCanceled()) {\n            callback.onLayoutCancelled();\n        } else {\n            PrintDocumentInfo.Builder builder = new PrintDocumentInfo.Builder(PDF_NAME);\n            builder.setContentType(PrintDocumentInfo.CONTENT_TYPE_DOCUMENT)\n                .setPageCount(PrintDocumentInfo.PAGE_COUNT_UNKNOWN)\n                .build();\n            callback.onLayoutFinished(builder.build(), !newAttributes.equals(oldAttributes));\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onLayout(oldAttributes: UIPrintPaper, newAttributes: UIPrintPaper, cancellationSignal: NSProgress, callback: @escaping (UIPrintFormatter, Bool) -> Void, extras: [AnyHashable: Any]?) {\n    if cancellationSignal.isCancelled {\n        callback(UIPrintFormatter(), false)\n    } else {\n        let printInfo = UIPrintInfo(dictionary: nil)\n        printInfo.outputType = .general\n        printInfo.jobName = PDF_NAME\n        callback(UIPrintFormatter(), newAttributes != oldAttributes)\n    }\n}\n```"
    },
    {
        "method_name": "onWrite",
        "method_code": "@Override\n    public void onWrite(PageRange[] pages,\n                        ParcelFileDescriptor destination,\n                        CancellationSignal cancellationSignal,\n                        WriteResultCallback callback) {\n\n        try (InputStream in = new FileInputStream(filePath);\n             OutputStream out = new FileOutputStream(destination.getFileDescriptor())) {\n\n            byte[] buf = new byte[16384];\n            int size;\n\n            while ((size = in.read(buf)) >= 0 && !cancellationSignal.isCanceled()) {\n                out.write(buf, 0, size);\n            }\n\n            if (cancellationSignal.isCanceled()) {\n                callback.onWriteCancelled();\n            } else {\n                callback.onWriteFinished(new PageRange[]{PageRange.ALL_PAGES});\n            }\n\n        } catch (IOException e) {\n            Log_OC.e(TAG, \"Error using temp file\", e);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onWrite from PrintAdapter.java into Swift.\n\n        Input:\n\n        Method Name: onWrite\n\n        Method Code: @Override\n    public void onWrite(PageRange[] pages,\n                        ParcelFileDescriptor destination,\n                        CancellationSignal cancellationSignal,\n                        WriteResultCallback callback) {\n\n        try (InputStream in = new FileInputStream(filePath);\n             OutputStream out = new FileOutputStream(destination.getFileDescriptor())) {\n\n            byte[] buf = new byte[16384];\n            int size;\n\n            while ((size = in.read(buf)) >= 0 && !cancellationSignal.isCanceled()) {\n                out.write(buf, 0, size);\n            }\n\n            if (cancellationSignal.isCanceled()) {\n                callback.onWriteCancelled();\n            } else {\n                callback.onWriteFinished(new PageRange[]{PageRange.ALL_PAGES});\n            }\n\n        } catch (IOException e) {\n            Log_OC.e(TAG, \"Error using temp file\", e);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onWrite(pages: [UIPrintPageRenderer.PageRange], \n                      to destination: URL, \n                      with cancellationSignal: NSProgress, \n                      completionHandler: @escaping (UIPrintPageRenderer.PageRange) -> Void) {\n\n    do {\n        let inputStream = InputStream(fileAtPath: filePath)\n        let outputStream = OutputStream(url: destination, append: false)\n\n        inputStream?.open()\n        outputStream?.open()\n\n        var buffer = [UInt8](repeating: 0, count: 16384)\n        var size: Int\n\n        while inputStream?.hasBytesAvailable == true && !cancellationSignal.isCancelled {\n            size = inputStream!.read(&buffer, maxLength: buffer.count)\n            if size > 0 {\n                outputStream?.write(buffer, maxLength: size)\n            }\n        }\n\n        if cancellationSignal.isCancelled {\n            completionHandler(.cancelled)\n        } else {\n            completionHandler(.completed)\n        }\n\n        inputStream?.close()\n        outputStream?.close()\n\n    } catch {\n        print(\"Error using temp file: \\(error)\")\n    }\n}\n```"
    }
]