[
    {
        "method_name": "bind",
        "method_code": "public void bind(OCShare publicShare, ShareeListAdapterListener listener) {\n        if (ShareType.EMAIL == publicShare.getShareType()) {\n            binding.name.setText(publicShare.getSharedWithDisplayName());\n            binding.icon.setImageDrawable(ResourcesCompat.getDrawable(context.getResources(),\n                                                                      R.drawable.ic_email,\n                                                                      null));\n            binding.copyLink.setVisibility(View.GONE);\n\n            binding.icon.getBackground().setColorFilter(context.getResources().getColor(R.color.nc_grey),\n                                                        PorterDuff.Mode.SRC_IN);\n            binding.icon.getDrawable().mutate().setColorFilter(context.getResources().getColor(R.color.icon_on_nc_grey),\n                                                               PorterDuff.Mode.SRC_IN);\n        } else {\n            if (!TextUtils.isEmpty(publicShare.getLabel())) {\n                String text = String.format(context.getString(R.string.share_link_with_label), publicShare.getLabel());\n                binding.name.setText(text);\n            } else {\n                if (SharingMenuHelper.isSecureFileDrop(publicShare)) {\n                    binding.name.setText(context.getResources().getString(R.string.share_permission_secure_file_drop));\n                } else {\n                    binding.name.setText(R.string.share_link);\n                }\n            }\n\n            viewThemeUtils.platform.colorImageViewBackgroundAndIcon(binding.icon);\n        }\n\n        String permissionName = SharingMenuHelper.getPermissionName(context, publicShare);\n        setPermissionName(publicShare, permissionName);\n\n        binding.overflowMenu.setOnClickListener(v -> listener.showSharingMenuActionSheet(publicShare));\n        if (!SharingMenuHelper.isSecureFileDrop(publicShare)) {\n            binding.shareByLinkContainer.setOnClickListener(v -> listener.showPermissionsDialog(publicShare));\n        }\n\n        if (MDMConfig.INSTANCE.clipBoardSupport(context)) {\n            binding.copyLink.setOnClickListener(v -> listener.copyLink(publicShare));\n        } else {\n            binding.copyLink.setVisibility(View.GONE);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled bind from LinkShareViewHolder.java into Swift.\n\n        Input:\n\n        Method Name: bind\n\n        Method Code: public void bind(OCShare publicShare, ShareeListAdapterListener listener) {\n        if (ShareType.EMAIL == publicShare.getShareType()) {\n            binding.name.setText(publicShare.getSharedWithDisplayName());\n            binding.icon.setImageDrawable(ResourcesCompat.getDrawable(context.getResources(),\n                                                                      R.drawable.ic_email,\n                                                                      null));\n            binding.copyLink.setVisibility(View.GONE);\n\n            binding.icon.getBackground().setColorFilter(context.getResources().getColor(R.color.nc_grey),\n                                                        PorterDuff.Mode.SRC_IN);\n            binding.icon.getDrawable().mutate().setColorFilter(context.getResources().getColor(R.color.icon_on_nc_grey),\n                                                               PorterDuff.Mode.SRC_IN);\n        } else {\n            if (!TextUtils.isEmpty(publicShare.getLabel())) {\n                String text = String.format(context.getString(R.string.share_link_with_label), publicShare.getLabel());\n                binding.name.setText(text);\n            } else {\n                if (SharingMenuHelper.isSecureFileDrop(publicShare)) {\n                    binding.name.setText(context.getResources().getString(R.string.share_permission_secure_file_drop));\n                } else {\n                    binding.name.setText(R.string.share_link);\n                }\n            }\n\n            viewThemeUtils.platform.colorImageViewBackgroundAndIcon(binding.icon);\n        }\n\n        String permissionName = SharingMenuHelper.getPermissionName(context, publicShare);\n        setPermissionName(publicShare, permissionName);\n\n        binding.overflowMenu.setOnClickListener(v -> listener.showSharingMenuActionSheet(publicShare));\n        if (!SharingMenuHelper.isSecureFileDrop(publicShare)) {\n            binding.shareByLinkContainer.setOnClickListener(v -> listener.showPermissionsDialog(publicShare));\n        }\n\n        if (MDMConfig.INSTANCE.clipBoardSupport(context)) {\n            binding.copyLink.setOnClickListener(v -> listener.copyLink(publicShare));\n        } else {\n            binding.copyLink.setVisibility(View.GONE);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc bind(publicShare: OCShare, listener: ShareeListAdapterListener) {\n    if publicShare.shareType == .email {\n        binding.name.text = publicShare.sharedWithDisplayName\n        binding.icon.image = UIImage(named: \"ic_email\")\n        binding.copyLink.isHidden = true\n\n        binding.icon.backgroundColor = UIColor(named: \"nc_grey\")\n        binding.icon.tintColor = UIColor(named: \"icon_on_nc_grey\")\n    } else {\n        if let label = publicShare.label, !label.isEmpty {\n            let text = String(format: NSLocalizedString(\"share_link_with_label\", comment: \"\"), label)\n            binding.name.text = text\n        } else {\n            if SharingMenuHelper.isSecureFileDrop(publicShare) {\n                binding.name.text = NSLocalizedString(\"share_permission_secure_file_drop\", comment: \"\")\n            } else {\n                binding.name.text = NSLocalizedString(\"share_link\", comment: \"\")\n            }\n        }\n\n        viewThemeUtils.platform.colorImageViewBackgroundAndIcon(binding.icon)\n    }\n\n    let permissionName = SharingMenuHelper.getPermissionName(context: context, publicShare: publicShare)\n    setPermissionName(publicShare: publicShare, permissionName: permissionName)\n\n    binding.overflowMenu.addTarget(self, action: #selector(showSharingMenuActionSheet), for: .touchUpInside)\n    if !SharingMenuHelper.isSecureFileDrop(publicShare) {\n        binding.shareByLinkContainer.addTarget(self, action: #selector(showPermissionsDialog), for: .touchUpInside)\n    }\n\n    if MDMConfig.INSTANCE.clipBoardSupport(context: context) {\n        binding.copyLink.addTarget(self, action: #selector(copyLink), for: .touchUpInside)\n    } else {\n        binding.copyLink.isHidden = true\n    }\n}\n\n@objc func showSharingMenuActionSheet() {\n    listener.showSharingMenuActionSheet(publicShare)\n}\n\n@objc func showPermissionsDialog() {\n    listener.showPermissionsDialog(publicShare)\n}\n\n@objc func copyLink() {\n    listener.copyLink(publicShare)\n}\n```"
    },
    {
        "method_name": "setPermissionName",
        "method_code": "private void setPermissionName(OCShare publicShare, String permissionName) {\n        if (!TextUtils.isEmpty(permissionName) && !SharingMenuHelper.isSecureFileDrop(publicShare)) {\n            binding.permissionName.setText(permissionName);\n            binding.permissionName.setVisibility(View.VISIBLE);\n            viewThemeUtils.androidx.colorPrimaryTextViewElement(binding.permissionName);\n        } else {\n            binding.permissionName.setVisibility(View.GONE);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setPermissionName from LinkShareViewHolder.java into Swift.\n\n        Input:\n\n        Method Name: setPermissionName\n\n        Method Code: private void setPermissionName(OCShare publicShare, String permissionName) {\n        if (!TextUtils.isEmpty(permissionName) && !SharingMenuHelper.isSecureFileDrop(publicShare)) {\n            binding.permissionName.setText(permissionName);\n            binding.permissionName.setVisibility(View.VISIBLE);\n            viewThemeUtils.androidx.colorPrimaryTextViewElement(binding.permissionName);\n        } else {\n            binding.permissionName.setVisibility(View.GONE);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setPermissionName(publicShare: OCShare, permissionName: String?) {\n    if let permissionName = permissionName, !permissionName.isEmpty, !SharingMenuHelper.isSecureFileDrop(publicShare) {\n        binding.permissionName.text = permissionName\n        binding.permissionName.isHidden = false\n        viewThemeUtils.androidx.colorPrimaryTextViewElement(binding.permissionName)\n    } else {\n        binding.permissionName.isHidden = true\n    }\n}\n```"
    }
]