[
    {
        "method_name": "initializeDevice",
        "method_code": "@Before\n    public void initializeDevice() {\n        // Initialize UiDevice instance\n        mDevice = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled initializeDevice from InitialTest.java into Swift.\n\n        Input:\n\n        Method Name: initializeDevice\n\n        Method Code: @Before\n    public void initializeDevice() {\n        // Initialize UiDevice instance\n        mDevice = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport XCTest\n\nclass InitialTest: XCTestCase {\n    var mDevice: XCUIApplication!\n\n    override func setUp() {\n        super.setUp()\n        // Initialize XCUIApplication instance\n        mDevice = XCUIApplication()\n    }\n}\n```"
    },
    {
        "method_name": "checkPreconditions",
        "method_code": "@Test\n    public void checkPreconditions() {\n        assertThat(mDevice, notNullValue());\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled checkPreconditions from InitialTest.java into Swift.\n\n        Input:\n\n        Method Name: checkPreconditions\n\n        Method Code: @Test\n    public void checkPreconditions() {\n        assertThat(mDevice, notNullValue());\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc checkPreconditions() {\n    XCTAssertNotNil(mDevice)\n}\n```"
    },
    {
        "method_name": "startAppFromHomeScreen",
        "method_code": "@Test\n    public void startAppFromHomeScreen() {\n        // Perform a short press on the HOME button\n        mDevice.pressHome();\n\n        // Wait for launcher\n        final String launcherPackage = getLauncherPackageName();\n        assertThat(launcherPackage, notNullValue());\n        mDevice.wait(Until.hasObject(By.pkg(launcherPackage).depth(0)), LAUNCH_TIMEOUT);\n\n        // Launch the app\n        Context context = InstrumentationRegistry.getContext();\n        final Intent intent = context.getPackageManager()\n                .getLaunchIntentForPackage(OWNCLOUD_APP_PACKAGE);\n        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);\n        context.startActivity(intent);\n\n        // Wait for the app to appear\n        mDevice.wait(Until.hasObject(By.pkg(OWNCLOUD_APP_PACKAGE).depth(0)), LAUNCH_TIMEOUT);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled startAppFromHomeScreen from InitialTest.java into Swift.\n\n        Input:\n\n        Method Name: startAppFromHomeScreen\n\n        Method Code: @Test\n    public void startAppFromHomeScreen() {\n        // Perform a short press on the HOME button\n        mDevice.pressHome();\n\n        // Wait for launcher\n        final String launcherPackage = getLauncherPackageName();\n        assertThat(launcherPackage, notNullValue());\n        mDevice.wait(Until.hasObject(By.pkg(launcherPackage).depth(0)), LAUNCH_TIMEOUT);\n\n        // Launch the app\n        Context context = InstrumentationRegistry.getContext();\n        final Intent intent = context.getPackageManager()\n                .getLaunchIntentForPackage(OWNCLOUD_APP_PACKAGE);\n        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);\n        context.startActivity(intent);\n\n        // Wait for the app to appear\n        mDevice.wait(Until.hasObject(By.pkg(OWNCLOUD_APP_PACKAGE).depth(0)), LAUNCH_TIMEOUT);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport XCTest\nimport UIKit\n\nclass InitialTest: XCTestCase {\n    let OWNCLOUD_APP_PACKAGE = \"com.owncloud.android\"\n    let LAUNCH_TIMEOUT: TimeInterval = 5000\n\n    func startAppFromHomeScreen() {\n        // Perform a short press on the HOME button\n        XCUIDevice.shared.press(.home)\n\n        // Wait for launcher\n        let springboard = XCUIApplication(bundleIdentifier: \"com.apple.springboard\")\n        XCTAssertTrue(springboard.wait(for: .runningForeground, timeout: LAUNCH_TIMEOUT))\n\n        // Launch the app\n        let app = XCUIApplication(bundleIdentifier: OWNCLOUD_APP_PACKAGE)\n        app.launch()\n\n        // Wait for the app to appear\n        XCTAssertTrue(app.wait(for: .runningForeground, timeout: LAUNCH_TIMEOUT))\n    }\n}\n```"
    },
    {
        "method_name": "startSettingsFromHomeScreen",
        "method_code": "@Test\n    public void startSettingsFromHomeScreen() throws UiObjectNotFoundException {\n\n        mDevice.pressHome();\n\n        // Wait for launcher\n        final String launcherPackage = getLauncherPackageName();\n        assertThat(launcherPackage, notNullValue());\n        mDevice.wait(Until.hasObject(By.pkg(launcherPackage).depth(0)), LAUNCH_TIMEOUT);\n\n        // Launch the app\n        Context context = InstrumentationRegistry.getContext();\n        final Intent intent = context.getPackageManager()\n                .getLaunchIntentForPackage(ANDROID_SETTINGS_PACKAGE);\n        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);\n        context.startActivity(intent);\n\n        clickByText(SETTINGS_DATA_USAGE_OPTION);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled startSettingsFromHomeScreen from InitialTest.java into Swift.\n\n        Input:\n\n        Method Name: startSettingsFromHomeScreen\n\n        Method Code: @Test\n    public void startSettingsFromHomeScreen() throws UiObjectNotFoundException {\n\n        mDevice.pressHome();\n\n        // Wait for launcher\n        final String launcherPackage = getLauncherPackageName();\n        assertThat(launcherPackage, notNullValue());\n        mDevice.wait(Until.hasObject(By.pkg(launcherPackage).depth(0)), LAUNCH_TIMEOUT);\n\n        // Launch the app\n        Context context = InstrumentationRegistry.getContext();\n        final Intent intent = context.getPackageManager()\n                .getLaunchIntentForPackage(ANDROID_SETTINGS_PACKAGE);\n        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);\n        context.startActivity(intent);\n\n        clickByText(SETTINGS_DATA_USAGE_OPTION);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport XCTest\nimport UIKit\n\nclass InitialTest: XCTestCase {\n\n    func startSettingsFromHomeScreen() throws {\n        let app = XCUIApplication()\n        app.activate()\n\n        // Wait for launcher\n        let launcherPackage = getLauncherPackageName()\n        XCTAssertNotNil(launcherPackage)\n        let exists = app.otherElements[launcherPackage!].waitForExistence(timeout: TimeInterval(LAUNCH_TIMEOUT))\n        XCTAssertTrue(exists)\n\n        // Launch the app\n        let settingsApp = XCUIApplication(bundleIdentifier: ANDROID_SETTINGS_PACKAGE)\n        settingsApp.launchArguments.append(\"--reset\")\n        settingsApp.launch()\n\n        clickByText(SETTINGS_DATA_USAGE_OPTION)\n    }\n\n    func getLauncherPackageName() -> String? {\n        // Implement logic to get the launcher package name\n        return nil\n    }\n\n    func clickByText(_ text: String) {\n        let app = XCUIApplication()\n        let element = app.staticTexts[text]\n        XCTAssertTrue(element.exists)\n        element.tap()\n    }\n}\n```"
    },
    {
        "method_name": "getLauncherPackageName",
        "method_code": "private String getLauncherPackageName() {\n        // Create launcher Intent\n        final Intent intent = new Intent(Intent.ACTION_MAIN);\n        intent.addCategory(Intent.CATEGORY_HOME);\n\n        // Use PackageManager to get the launcher package name\n        PackageManager pm = InstrumentationRegistry.getContext().getPackageManager();\n        ResolveInfo resolveInfo = pm.resolveActivity(intent, PackageManager.MATCH_DEFAULT_ONLY);\n        return resolveInfo.activityInfo.packageName;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getLauncherPackageName from InitialTest.java into Swift.\n\n        Input:\n\n        Method Name: getLauncherPackageName\n\n        Method Code: private String getLauncherPackageName() {\n        // Create launcher Intent\n        final Intent intent = new Intent(Intent.ACTION_MAIN);\n        intent.addCategory(Intent.CATEGORY_HOME);\n\n        // Use PackageManager to get the launcher package name\n        PackageManager pm = InstrumentationRegistry.getContext().getPackageManager();\n        ResolveInfo resolveInfo = pm.resolveActivity(intent, PackageManager.MATCH_DEFAULT_ONLY);\n        return resolveInfo.activityInfo.packageName;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getLauncherPackageName() -> String? {\n    // Create launcher Intent\n    let intent = Intent(action: Intent.ACTION_MAIN)\n    intent.addCategory(Intent.CATEGORY_HOME)\n\n    // Use PackageManager to get the launcher package name\n    let pm = InstrumentationRegistry.getContext().getPackageManager()\n    if let resolveInfo = pm.resolveActivity(intent, PackageManager.MATCH_DEFAULT_ONLY) {\n        return resolveInfo.activityInfo.packageName\n    }\n    return nil\n}\n```"
    },
    {
        "method_name": "clickByText",
        "method_code": "private void clickByText(String text) throws UiObjectNotFoundException {\n        UiDevice device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());\n        UiObject obj = device.findObject(new UiSelector().text(text));\n        obj.clickAndWaitForNewWindow();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled clickByText from InitialTest.java into Swift.\n\n        Input:\n\n        Method Name: clickByText\n\n        Method Code: private void clickByText(String text) throws UiObjectNotFoundException {\n        UiDevice device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());\n        UiObject obj = device.findObject(new UiSelector().text(text));\n        obj.clickAndWaitForNewWindow();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func clickByText(_ text: String) throws {\n    let device = XCUIApplication()\n    let obj = device.staticTexts[text]\n    if obj.exists {\n        obj.tap()\n    } else {\n        throw NSError(domain: \"UiObjectNotFoundException\", code: 0, userInfo: nil)\n    }\n}\n```"
    }
]