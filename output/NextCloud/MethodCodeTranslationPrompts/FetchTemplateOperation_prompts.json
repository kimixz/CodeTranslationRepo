[
    {
        "method_name": "run",
        "method_code": "protected RemoteOperationResult run(OwnCloudClient client) {\n        RemoteOperationResult result;\n        GetMethod getMethod = null;\n\n        try {\n\n            getMethod = new GetMethod(client.getBaseUri() + TEMPLATE_URL + type.toString().toLowerCase(Locale.ENGLISH) +\n                JSON_FORMAT);\n\n            // remote request\n            getMethod.addRequestHeader(OCS_API_HEADER, OCS_API_HEADER_VALUE);\n\n            int status = client.executeMethod(getMethod, SYNC_READ_TIMEOUT, SYNC_CONNECTION_TIMEOUT);\n\n            if (status == HttpStatus.SC_OK) {\n                String response = getMethod.getResponseBodyAsString();\n\n                // Parse the response\n                JSONObject respJSON = new JSONObject(response);\n                JSONArray templates = respJSON.getJSONObject(NODE_OCS).getJSONArray(NODE_DATA);\n\n                ArrayList<Object> templateArray = new ArrayList<>();\n\n                for (int i = 0; i < templates.length(); i++) {\n                    JSONObject templateObject = templates.getJSONObject(i);\n\n                    templateArray.add(new Template(templateObject.getLong(\"id\"),\n                                                   templateObject.getString(\"name\"),\n                                                   templateObject.optString(\"preview\"),\n                                                   Template.Type.parse(templateObject.getString(\"type\")\n                                                                           .toUpperCase(Locale.ROOT)),\n                                                   templateObject.getString(\"extension\")));\n                }\n\n                result = new RemoteOperationResult(true, getMethod);\n                result.setData(templateArray);\n            } else {\n                result = new RemoteOperationResult(false, getMethod);\n                client.exhaustResponse(getMethod.getResponseBodyAsStream());\n            }\n        } catch (Exception e) {\n            result = new RemoteOperationResult(e);\n            Log_OC.e(TAG, \"Get templates for typ \" + type + \" failed: \" + result.getLogMessage(),\n                result.getException());\n        } finally {\n            if (getMethod != null) {\n                getMethod.releaseConnection();\n            }\n        }\n        return result;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled run from FetchTemplateOperation.java into Swift.\n\n        Input:\n\n        Method Name: run\n\n        Method Code: protected RemoteOperationResult run(OwnCloudClient client) {\n        RemoteOperationResult result;\n        GetMethod getMethod = null;\n\n        try {\n\n            getMethod = new GetMethod(client.getBaseUri() + TEMPLATE_URL + type.toString().toLowerCase(Locale.ENGLISH) +\n                JSON_FORMAT);\n\n            // remote request\n            getMethod.addRequestHeader(OCS_API_HEADER, OCS_API_HEADER_VALUE);\n\n            int status = client.executeMethod(getMethod, SYNC_READ_TIMEOUT, SYNC_CONNECTION_TIMEOUT);\n\n            if (status == HttpStatus.SC_OK) {\n                String response = getMethod.getResponseBodyAsString();\n\n                // Parse the response\n                JSONObject respJSON = new JSONObject(response);\n                JSONArray templates = respJSON.getJSONObject(NODE_OCS).getJSONArray(NODE_DATA);\n\n                ArrayList<Object> templateArray = new ArrayList<>();\n\n                for (int i = 0; i < templates.length(); i++) {\n                    JSONObject templateObject = templates.getJSONObject(i);\n\n                    templateArray.add(new Template(templateObject.getLong(\"id\"),\n                                                   templateObject.getString(\"name\"),\n                                                   templateObject.optString(\"preview\"),\n                                                   Template.Type.parse(templateObject.getString(\"type\")\n                                                                           .toUpperCase(Locale.ROOT)),\n                                                   templateObject.getString(\"extension\")));\n                }\n\n                result = new RemoteOperationResult(true, getMethod);\n                result.setData(templateArray);\n            } else {\n                result = new RemoteOperationResult(false, getMethod);\n                client.exhaustResponse(getMethod.getResponseBodyAsStream());\n            }\n        } catch (Exception e) {\n            result = new RemoteOperationResult(e);\n            Log_OC.e(TAG, \"Get templates for typ \" + type + \" failed: \" + result.getLogMessage(),\n                result.getException());\n        } finally {\n            if (getMethod != null) {\n                getMethod.releaseConnection();\n            }\n        }\n        return result;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprotected func run(client: OwnCloudClient) -> RemoteOperationResult {\n    var result: RemoteOperationResult\n    var getMethod: GetMethod? = nil\n\n    do {\n        getMethod = GetMethod(client.getBaseUri() + TEMPLATE_URL + type.toString().lowercased(with: Locale(identifier: \"en\")) + JSON_FORMAT)\n\n        // remote request\n        getMethod?.addRequestHeader(OCS_API_HEADER, OCS_API_HEADER_VALUE)\n\n        let status = client.executeMethod(getMethod, SYNC_READ_TIMEOUT, SYNC_CONNECTION_TIMEOUT)\n\n        if status == HttpStatus.SC_OK {\n            let response = getMethod?.getResponseBodyAsString() ?? \"\"\n\n            // Parse the response\n            let respJSON = try JSONSerialization.jsonObject(with: Data(response.utf8), options: []) as! [String: Any]\n            let templates = (respJSON[NODE_OCS] as! [String: Any])[NODE_DATA] as! [[String: Any]]\n\n            var templateArray: [Any] = []\n\n            for templateObject in templates {\n                let template = Template(\n                    id: templateObject[\"id\"] as! Int64,\n                    name: templateObject[\"name\"] as! String,\n                    preview: templateObject[\"preview\"] as? String,\n                    type: Template.Type.parse((templateObject[\"type\"] as! String).uppercased(with: Locale(identifier: \"en\"))),\n                    extension: templateObject[\"extension\"] as! String\n                )\n                templateArray.append(template)\n            }\n\n            result = RemoteOperationResult(success: true, method: getMethod)\n            result.setData(templateArray)\n        } else {\n            result = RemoteOperationResult(success: false, method: getMethod)\n            client.exhaustResponse(getMethod?.getResponseBodyAsStream())\n        }\n    } catch {\n        result = RemoteOperationResult(error)\n        Log_OC.e(TAG, \"Get templates for type \\(type) failed: \\(result.getLogMessage())\", result.getException())\n    } finally {\n        getMethod?.releaseConnection()\n    }\n    return result\n}\n```"
    }
]