[
    {
        "method_name": "setupToolbar",
        "method_code": "rivate void setupToolbar(boolean isHomeSearchToolbarShow, boolean showSortListButtonGroup) {\n        mToolbar = findViewById(R.id.toolbar);\n        setSupportActionBar(mToolbar);\n\n        mAppBar = findViewById(R.id.appbar);\n        mDefaultToolbar = findViewById(R.id.default_toolbar);\n        mHomeSearchToolbar = findViewById(R.id.home_toolbar);\n        mMenuButton = findViewById(R.id.menu_button);\n        mSearchText = findViewById(R.id.search_text);\n        mSwitchAccountButton = findViewById(R.id.switch_account_button);\n        mNotificationButton = findViewById(R.id.notification_button);\n\n        if (showSortListButtonGroup) {\n            findViewById(R.id.sort_list_button_group).setVisibility(View.VISIBLE);\n        }\n\n        this.isHomeSearchToolbarShow = isHomeSearchToolbarShow;\n        updateActionBarTitleAndHomeButton(null);\n\n        mInfoBox = findViewById(R.id.info_box);\n        mInfoBoxMessage = findViewById(R.id.info_box_message);\n\n        mPreviewImage = findViewById(R.id.preview_image);\n        mPreviewImageContainer = findViewById(R.id.preview_image_frame);\n\n        mToolbarSpinner = findViewById(R.id.toolbar_spinner);\n\n        viewThemeUtils.material.themeToolbar(mToolbar);\n        viewThemeUtils.material.colorToolbarOverflowIcon(mToolbar);\n        viewThemeUtils.platform.themeStatusBar(this);\n        viewThemeUtils.material.colorMaterialTextButton(mSwitchAccountButton);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setupToolbar from ToolbarActivity.java into Swift.\n\n        Input:\n\n        Method Name: setupToolbar\n\n        Method Code: rivate void setupToolbar(boolean isHomeSearchToolbarShow, boolean showSortListButtonGroup) {\n        mToolbar = findViewById(R.id.toolbar);\n        setSupportActionBar(mToolbar);\n\n        mAppBar = findViewById(R.id.appbar);\n        mDefaultToolbar = findViewById(R.id.default_toolbar);\n        mHomeSearchToolbar = findViewById(R.id.home_toolbar);\n        mMenuButton = findViewById(R.id.menu_button);\n        mSearchText = findViewById(R.id.search_text);\n        mSwitchAccountButton = findViewById(R.id.switch_account_button);\n        mNotificationButton = findViewById(R.id.notification_button);\n\n        if (showSortListButtonGroup) {\n            findViewById(R.id.sort_list_button_group).setVisibility(View.VISIBLE);\n        }\n\n        this.isHomeSearchToolbarShow = isHomeSearchToolbarShow;\n        updateActionBarTitleAndHomeButton(null);\n\n        mInfoBox = findViewById(R.id.info_box);\n        mInfoBoxMessage = findViewById(R.id.info_box_message);\n\n        mPreviewImage = findViewById(R.id.preview_image);\n        mPreviewImageContainer = findViewById(R.id.preview_image_frame);\n\n        mToolbarSpinner = findViewById(R.id.toolbar_spinner);\n\n        viewThemeUtils.material.themeToolbar(mToolbar);\n        viewThemeUtils.material.colorToolbarOverflowIcon(mToolbar);\n        viewThemeUtils.platform.themeStatusBar(this);\n        viewThemeUtils.material.colorMaterialTextButton(mSwitchAccountButton);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setupToolbar(isHomeSearchToolbarShow: Bool, showSortListButtonGroup: Bool) {\n    mToolbar = findViewById(R.id.toolbar)\n    setSupportActionBar(mToolbar)\n\n    mAppBar = findViewById(R.id.appbar)\n    mDefaultToolbar = findViewById(R.id.default_toolbar)\n    mHomeSearchToolbar = findViewById(R.id.home_toolbar)\n    mMenuButton = findViewById(R.id.menu_button)\n    mSearchText = findViewById(R.id.search_text)\n    mSwitchAccountButton = findViewById(R.id.switch_account_button)\n    mNotificationButton = findViewById(R.id.notification_button)\n\n    if showSortListButtonGroup {\n        findViewById(R.id.sort_list_button_group).visibility = .visible\n    }\n\n    self.isHomeSearchToolbarShow = isHomeSearchToolbarShow\n    updateActionBarTitleAndHomeButton(nil)\n\n    mInfoBox = findViewById(R.id.info_box)\n    mInfoBoxMessage = findViewById(R.id.info_box_message)\n\n    mPreviewImage = findViewById(R.id.preview_image)\n    mPreviewImageContainer = findViewById(R.id.preview_image_frame)\n\n    mToolbarSpinner = findViewById(R.id.toolbar_spinner)\n\n    viewThemeUtils.material.themeToolbar(mToolbar)\n    viewThemeUtils.material.colorToolbarOverflowIcon(mToolbar)\n    viewThemeUtils.platform.themeStatusBar(self)\n    viewThemeUtils.material.colorMaterialTextButton(mSwitchAccountButton)\n}\n```"
    },
    {
        "method_name": "setupToolbarShowOnlyMenuButtonAndTitle",
        "method_code": "ublic void setupToolbarShowOnlyMenuButtonAndTitle(String title, View.OnClickListener toggleDrawer) {\n        setupToolbar(false, false);\n\n        ActionBar actionBar = getSupportActionBar();\n        if (actionBar != null) {\n            actionBar.setDisplayShowTitleEnabled(false);\n        }\n\n        LinearLayout toolbar = findViewById(R.id.toolbar_linear_layout);\n        MaterialButton menuButton = findViewById(R.id.toolbar_menu_button);\n        MaterialTextView titleTextView = findViewById(R.id.toolbar_title);\n        titleTextView.setText(title);\n\n        titleTextView.setTextColor(ContextCompat.getColor(this, R.color.foreground_highlight));\n        menuButton.setIconTint(ContextCompat.getColorStateList(this, R.color.foreground_highlight));\n\n        toolbar.setVisibility(View.VISIBLE);\n        menuButton.setOnClickListener(toggleDrawer);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setupToolbarShowOnlyMenuButtonAndTitle from ToolbarActivity.java into Swift.\n\n        Input:\n\n        Method Name: setupToolbarShowOnlyMenuButtonAndTitle\n\n        Method Code: ublic void setupToolbarShowOnlyMenuButtonAndTitle(String title, View.OnClickListener toggleDrawer) {\n        setupToolbar(false, false);\n\n        ActionBar actionBar = getSupportActionBar();\n        if (actionBar != null) {\n            actionBar.setDisplayShowTitleEnabled(false);\n        }\n\n        LinearLayout toolbar = findViewById(R.id.toolbar_linear_layout);\n        MaterialButton menuButton = findViewById(R.id.toolbar_menu_button);\n        MaterialTextView titleTextView = findViewById(R.id.toolbar_title);\n        titleTextView.setText(title);\n\n        titleTextView.setTextColor(ContextCompat.getColor(this, R.color.foreground_highlight));\n        menuButton.setIconTint(ContextCompat.getColorStateList(this, R.color.foreground_highlight));\n\n        toolbar.setVisibility(View.VISIBLE);\n        menuButton.setOnClickListener(toggleDrawer);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setupToolbarShowOnlyMenuButtonAndTitle(title: String, toggleDrawer: @escaping () -> Void) {\n    setupToolbar(showBackButton: false, showTitle: false)\n\n    if let actionBar = self.navigationController?.navigationBar {\n        actionBar.topItem?.title = nil\n    }\n\n    if let toolbar = self.view.viewWithTag(R.id.toolbar_linear_layout) as? UIView,\n       let menuButton = self.view.viewWithTag(R.id.toolbar_menu_button) as? UIButton,\n       let titleTextView = self.view.viewWithTag(R.id.toolbar_title) as? UILabel {\n        \n        titleTextView.text = title\n        titleTextView.textColor = UIColor(named: \"foreground_highlight\")\n        menuButton.tintColor = UIColor(named: \"foreground_highlight\")\n        \n        toolbar.isHidden = false\n        menuButton.addAction(UIAction(handler: { _ in toggleDrawer() }), for: .touchUpInside)\n    }\n}\n```"
    },
    {
        "method_name": "setupToolbar",
        "method_code": "ublic void setupToolbar() {\n        setupToolbar(false, false);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setupToolbar from ToolbarActivity.java into Swift.\n\n        Input:\n\n        Method Name: setupToolbar\n\n        Method Code: ublic void setupToolbar() {\n        setupToolbar(false, false);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setupToolbar() {\n    setupToolbar(false, false)\n}\n```"
    },
    {
        "method_name": "setupHomeSearchToolbarWithSortAndListButtons",
        "method_code": "ublic void setupHomeSearchToolbarWithSortAndListButtons() {\n        setupToolbar(true, true);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setupHomeSearchToolbarWithSortAndListButtons from ToolbarActivity.java into Swift.\n\n        Input:\n\n        Method Name: setupHomeSearchToolbarWithSortAndListButtons\n\n        Method Code: ublic void setupHomeSearchToolbarWithSortAndListButtons() {\n        setupToolbar(true, true);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setupHomeSearchToolbarWithSortAndListButtons() {\n    setupToolbar(true, true)\n}\n```"
    },
    {
        "method_name": "updateActionBarTitleAndHomeButton",
        "method_code": "rotected void updateActionBarTitleAndHomeButton(OCFile chosenFile) {\n        String title;\n        boolean isRoot = isRoot(chosenFile);\n\n        title = isRoot ? themeUtils.getDefaultDisplayNameForRootFolder(this) : fileDataStorageManager.getFilenameConsideringOfflineOperation(chosenFile);\n        updateActionBarTitleAndHomeButtonByString(title);\n\n        if (mAppBar != null) {\n            showHomeSearchToolbar(title, isRoot);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled updateActionBarTitleAndHomeButton from ToolbarActivity.java into Swift.\n\n        Input:\n\n        Method Name: updateActionBarTitleAndHomeButton\n\n        Method Code: rotected void updateActionBarTitleAndHomeButton(OCFile chosenFile) {\n        String title;\n        boolean isRoot = isRoot(chosenFile);\n\n        title = isRoot ? themeUtils.getDefaultDisplayNameForRootFolder(this) : fileDataStorageManager.getFilenameConsideringOfflineOperation(chosenFile);\n        updateActionBarTitleAndHomeButtonByString(title);\n\n        if (mAppBar != null) {\n            showHomeSearchToolbar(title, isRoot);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc updateActionBarTitleAndHomeButton(chosenFile: OCFile) {\n    let title: String\n    let isRoot = isRoot(chosenFile: chosenFile)\n\n    title = isRoot ? themeUtils.getDefaultDisplayNameForRootFolder(self) : fileDataStorageManager.getFilenameConsideringOfflineOperation(chosenFile: chosenFile)\n    updateActionBarTitleAndHomeButtonByString(title: title)\n\n    if mAppBar != nil {\n        showHomeSearchToolbar(title: title, isRoot: isRoot)\n    }\n}\n```"
    },
    {
        "method_name": "showSearchView",
        "method_code": "ublic void showSearchView() {\n        if (isHomeSearchToolbarShow) {\n            showHomeSearchToolbar(false);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled showSearchView from ToolbarActivity.java into Swift.\n\n        Input:\n\n        Method Name: showSearchView\n\n        Method Code: ublic void showSearchView() {\n        if (isHomeSearchToolbarShow) {\n            showHomeSearchToolbar(false);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc showSearchView() {\n    if isHomeSearchToolbarShow {\n        showHomeSearchToolbar(false)\n    }\n}\n```"
    },
    {
        "method_name": "hideSearchView",
        "method_code": "ublic void hideSearchView(OCFile chosenFile) {\n        if (isHomeSearchToolbarShow) {\n            showHomeSearchToolbar(isRoot(chosenFile));\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled hideSearchView from ToolbarActivity.java into Swift.\n\n        Input:\n\n        Method Name: hideSearchView\n\n        Method Code: ublic void hideSearchView(OCFile chosenFile) {\n        if (isHomeSearchToolbarShow) {\n            showHomeSearchToolbar(isRoot(chosenFile));\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc hideSearchView(chosenFile: OCFile) {\n    if isHomeSearchToolbarShow {\n        showHomeSearchToolbar(isRoot(chosenFile))\n    }\n}\n```"
    },
    {
        "method_name": "showHomeSearchToolbar",
        "method_code": "rivate void showHomeSearchToolbar(String title, boolean isRoot) {\n        showHomeSearchToolbar(isHomeSearchToolbarShow && isRoot);\n        mSearchText.setText(getString(R.string.appbar_search_in, title));\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled showHomeSearchToolbar from ToolbarActivity.java into Swift.\n\n        Input:\n\n        Method Name: showHomeSearchToolbar\n\n        Method Code: rivate void showHomeSearchToolbar(String title, boolean isRoot) {\n        showHomeSearchToolbar(isHomeSearchToolbarShow && isRoot);\n        mSearchText.setText(getString(R.string.appbar_search_in, title));\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func showHomeSearchToolbar(title: String, isRoot: Bool) {\n    showHomeSearchToolbar(isHomeSearchToolbarShow && isRoot)\n    mSearchText.text = String(format: NSLocalizedString(\"appbar_search_in\", comment: \"\"), title)\n}\n```"
    },
    {
        "method_name": "showHomeSearchToolbar",
        "method_code": "SuppressLint(\"PrivateResource\")\n    private void showHomeSearchToolbar(boolean isShow) {\n        viewThemeUtils.material.themeToolbar(mToolbar);\n        if (isShow) {\n            viewThemeUtils.platform.resetStatusBar(this);\n            mAppBar.setStateListAnimator(AnimatorInflater.loadStateListAnimator(mAppBar.getContext(),\n                                                                                R.animator.appbar_elevation_off));\n            mDefaultToolbar.setVisibility(View.GONE);\n            mHomeSearchToolbar.setVisibility(View.VISIBLE);\n            viewThemeUtils.material.themeCardView(mHomeSearchToolbar);\n            viewThemeUtils.material.themeSearchBarText(mSearchText);\n        } else {\n            mAppBar.setStateListAnimator(AnimatorInflater.loadStateListAnimator(mAppBar.getContext(),\n                                                                                R.animator.appbar_elevation_on));\n            viewThemeUtils.platform.themeStatusBar(this);\n            mDefaultToolbar.setVisibility(View.VISIBLE);\n            mHomeSearchToolbar.setVisibility(View.GONE);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled showHomeSearchToolbar from ToolbarActivity.java into Swift.\n\n        Input:\n\n        Method Name: showHomeSearchToolbar\n\n        Method Code: SuppressLint(\"PrivateResource\")\n    private void showHomeSearchToolbar(boolean isShow) {\n        viewThemeUtils.material.themeToolbar(mToolbar);\n        if (isShow) {\n            viewThemeUtils.platform.resetStatusBar(this);\n            mAppBar.setStateListAnimator(AnimatorInflater.loadStateListAnimator(mAppBar.getContext(),\n                                                                                R.animator.appbar_elevation_off));\n            mDefaultToolbar.setVisibility(View.GONE);\n            mHomeSearchToolbar.setVisibility(View.VISIBLE);\n            viewThemeUtils.material.themeCardView(mHomeSearchToolbar);\n            viewThemeUtils.material.themeSearchBarText(mSearchText);\n        } else {\n            mAppBar.setStateListAnimator(AnimatorInflater.loadStateListAnimator(mAppBar.getContext(),\n                                                                                R.animator.appbar_elevation_on));\n            viewThemeUtils.platform.themeStatusBar(this);\n            mDefaultToolbar.setVisibility(View.VISIBLE);\n            mHomeSearchToolbar.setVisibility(View.GONE);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport UIKit\n\nfunc showHomeSearchToolbar(isShow: Bool) {\n    viewThemeUtils.material.themeToolbar(mToolbar)\n    if isShow {\n        viewThemeUtils.platform.resetStatusBar(self)\n        mAppBar.layer.shadowOpacity = 0\n        mDefaultToolbar.isHidden = true\n        mHomeSearchToolbar.isHidden = false\n        viewThemeUtils.material.themeCardView(mHomeSearchToolbar)\n        viewThemeUtils.material.themeSearchBarText(mSearchText)\n    } else {\n        mAppBar.layer.shadowOpacity = 1\n        viewThemeUtils.platform.themeStatusBar(self)\n        mDefaultToolbar.isHidden = false\n        mHomeSearchToolbar.isHidden = true\n    }\n}\n```"
    },
    {
        "method_name": "updateActionBarTitleAndHomeButtonByString",
        "method_code": "ublic void updateActionBarTitleAndHomeButtonByString(String title) {\n        // set & color the chosen title\n        ActionBar actionBar = getSupportActionBar();\n\n        // set home button properties\n        if (actionBar != null) {\n            if (title != null) {\n                actionBar.setTitle(title);\n                actionBar.setDisplayShowTitleEnabled(true);\n            } else {\n                actionBar.setDisplayShowTitleEnabled(false);\n            }\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled updateActionBarTitleAndHomeButtonByString from ToolbarActivity.java into Swift.\n\n        Input:\n\n        Method Name: updateActionBarTitleAndHomeButtonByString\n\n        Method Code: ublic void updateActionBarTitleAndHomeButtonByString(String title) {\n        // set & color the chosen title\n        ActionBar actionBar = getSupportActionBar();\n\n        // set home button properties\n        if (actionBar != null) {\n            if (title != null) {\n                actionBar.setTitle(title);\n                actionBar.setDisplayShowTitleEnabled(true);\n            } else {\n                actionBar.setDisplayShowTitleEnabled(false);\n            }\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc updateActionBarTitleAndHomeButtonByString(title: String?) {\n    if let actionBar = self.navigationController?.navigationBar {\n        if let title = title {\n            actionBar.topItem?.title = title\n            actionBar.isTranslucent = false\n        } else {\n            actionBar.isTranslucent = true\n        }\n    }\n}\n```"
    },
    {
        "method_name": "isRoot",
        "method_code": "ublic boolean isRoot(OCFile file) {\n\n        return file == null || (file.isFolder() && file.getParentId() == FileDataStorageManager.ROOT_PARENT_ID);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isRoot from ToolbarActivity.java into Swift.\n\n        Input:\n\n        Method Name: isRoot\n\n        Method Code: ublic boolean isRoot(OCFile file) {\n\n        return file == null || (file.isFolder() && file.getParentId() == FileDataStorageManager.ROOT_PARENT_ID);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc isRoot(file: OCFile?) -> Bool {\n    return file == nil || (file!.isFolder() && file!.getParentId() == FileDataStorageManager.ROOT_PARENT_ID)\n}\n```"
    },
    {
        "method_name": "showInfoBox",
        "method_code": "rotected final void showInfoBox(@StringRes int text) {\n        if (mInfoBox != null && mInfoBoxMessage != null) {\n            mInfoBox.setVisibility(View.VISIBLE);\n            mInfoBoxMessage.setText(text);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled showInfoBox from ToolbarActivity.java into Swift.\n\n        Input:\n\n        Method Name: showInfoBox\n\n        Method Code: rotected final void showInfoBox(@StringRes int text) {\n        if (mInfoBox != null && mInfoBoxMessage != null) {\n            mInfoBox.setVisibility(View.VISIBLE);\n            mInfoBoxMessage.setText(text);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc showInfoBox(text: Int) {\n    if let infoBox = mInfoBox, let infoBoxMessage = mInfoBoxMessage {\n        infoBox.isHidden = false\n        infoBoxMessage.text = String(text)\n    }\n}\n```"
    },
    {
        "method_name": "hideInfoBox",
        "method_code": "ublic final void hideInfoBox() {\n        if (mInfoBox != null) {\n            mInfoBox.setVisibility(View.GONE);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled hideInfoBox from ToolbarActivity.java into Swift.\n\n        Input:\n\n        Method Name: hideInfoBox\n\n        Method Code: ublic final void hideInfoBox() {\n        if (mInfoBox != null) {\n            mInfoBox.setVisibility(View.GONE);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc hideInfoBox() {\n    if let infoBox = mInfoBox {\n        infoBox.isHidden = true\n    }\n}\n```"
    },
    {
        "method_name": "setPreviewImageVisibility",
        "method_code": "ublic void setPreviewImageVisibility(boolean isVisibility) {\n        if (mPreviewImage != null && mPreviewImageContainer != null) {\n            if (isVisibility) {\n                mToolbar.setTitle(null);\n                mToolbar.setBackgroundColor(Color.TRANSPARENT);\n            } else {\n                mToolbar.setBackgroundResource(R.color.appbar);\n            }\n            mPreviewImageContainer.setVisibility(isVisibility ? View.VISIBLE : View.GONE);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setPreviewImageVisibility from ToolbarActivity.java into Swift.\n\n        Input:\n\n        Method Name: setPreviewImageVisibility\n\n        Method Code: ublic void setPreviewImageVisibility(boolean isVisibility) {\n        if (mPreviewImage != null && mPreviewImageContainer != null) {\n            if (isVisibility) {\n                mToolbar.setTitle(null);\n                mToolbar.setBackgroundColor(Color.TRANSPARENT);\n            } else {\n                mToolbar.setBackgroundResource(R.color.appbar);\n            }\n            mPreviewImageContainer.setVisibility(isVisibility ? View.VISIBLE : View.GONE);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setPreviewImageVisibility(isVisibility: Bool) {\n    if let previewImage = mPreviewImage, let previewImageContainer = mPreviewImageContainer {\n        if isVisibility {\n            mToolbar.title = nil\n            mToolbar.backgroundColor = UIColor.clear\n        } else {\n            mToolbar.setBackgroundImage(UIImage(named: \"appbar\"), for: .default)\n        }\n        previewImageContainer.isHidden = !isVisibility\n    }\n}\n```"
    },
    {
        "method_name": "hidePreviewImage",
        "method_code": "ublic void hidePreviewImage() {\n        setPreviewImageVisibility(false);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled hidePreviewImage from ToolbarActivity.java into Swift.\n\n        Input:\n\n        Method Name: hidePreviewImage\n\n        Method Code: ublic void hidePreviewImage() {\n        setPreviewImageVisibility(false);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc hidePreviewImage() {\n    setPreviewImageVisibility(false)\n}\n```"
    },
    {
        "method_name": "showSortListGroup",
        "method_code": "ublic void showSortListGroup(boolean show) {\n        findViewById(R.id.sort_list_button_group).setVisibility(show ? View.VISIBLE : View.GONE);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled showSortListGroup from ToolbarActivity.java into Swift.\n\n        Input:\n\n        Method Name: showSortListGroup\n\n        Method Code: ublic void showSortListGroup(boolean show) {\n        findViewById(R.id.sort_list_button_group).setVisibility(show ? View.VISIBLE : View.GONE);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc showSortListGroup(show: Bool) {\n    let visibility = show ? UIView.Visibility.visible : UIView.Visibility.gone\n    view.viewWithTag(R.id.sort_list_button_group)?.visibility = visibility\n}\n```"
    },
    {
        "method_name": "sortListGroupVisibility",
        "method_code": "ublic boolean sortListGroupVisibility(){\n        return findViewById(R.id.sort_list_button_group).getVisibility() == View.VISIBLE;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled sortListGroupVisibility from ToolbarActivity.java into Swift.\n\n        Input:\n\n        Method Name: sortListGroupVisibility\n\n        Method Code: ublic boolean sortListGroupVisibility(){\n        return findViewById(R.id.sort_list_button_group).getVisibility() == View.VISIBLE;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc sortListGroupVisibility() -> Bool {\n    return findViewById(R.id.sort_list_button_group).visibility == .visible\n}\n```"
    },
    {
        "method_name": "setPreviewImageBitmap",
        "method_code": "ublic void setPreviewImageBitmap(Bitmap bitmap) {\n        if (mPreviewImage != null) {\n            mPreviewImage.setImageBitmap(bitmap);\n            setPreviewImageVisibility(true);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setPreviewImageBitmap from ToolbarActivity.java into Swift.\n\n        Input:\n\n        Method Name: setPreviewImageBitmap\n\n        Method Code: ublic void setPreviewImageBitmap(Bitmap bitmap) {\n        if (mPreviewImage != null) {\n            mPreviewImage.setImageBitmap(bitmap);\n            setPreviewImageVisibility(true);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setPreviewImageBitmap(_ bitmap: UIImage?) {\n    if let previewImage = mPreviewImage {\n        previewImage.image = bitmap\n        setPreviewImageVisibility(true)\n    }\n}\n```"
    },
    {
        "method_name": "setPreviewImageDrawable",
        "method_code": "ublic void setPreviewImageDrawable(Drawable drawable) {\n        if (mPreviewImage != null) {\n            mPreviewImage.setImageDrawable(drawable);\n            setPreviewImageVisibility(true);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setPreviewImageDrawable from ToolbarActivity.java into Swift.\n\n        Input:\n\n        Method Name: setPreviewImageDrawable\n\n        Method Code: ublic void setPreviewImageDrawable(Drawable drawable) {\n        if (mPreviewImage != null) {\n            mPreviewImage.setImageDrawable(drawable);\n            setPreviewImageVisibility(true);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setPreviewImageDrawable(_ drawable: UIImage?) {\n    if mPreviewImage != nil {\n        mPreviewImage.image = drawable\n        setPreviewImageVisibility(true)\n    }\n}\n```"
    },
    {
        "method_name": "getPreviewImageView",
        "method_code": "ublic ImageView getPreviewImageView() {\n        return mPreviewImage;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getPreviewImageView from ToolbarActivity.java into Swift.\n\n        Input:\n\n        Method Name: getPreviewImageView\n\n        Method Code: ublic ImageView getPreviewImageView() {\n        return mPreviewImage;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getPreviewImageView() -> UIImageView {\n    return mPreviewImage\n}\n```"
    },
    {
        "method_name": "getPreviewImageContainer",
        "method_code": "ublic FrameLayout getPreviewImageContainer() {\n        return mPreviewImageContainer;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getPreviewImageContainer from ToolbarActivity.java into Swift.\n\n        Input:\n\n        Method Name: getPreviewImageContainer\n\n        Method Code: ublic FrameLayout getPreviewImageContainer() {\n        return mPreviewImageContainer;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getPreviewImageContainer() -> UIView {\n    return mPreviewImageContainer\n}\n```"
    },
    {
        "method_name": "updateToolbarSubtitle",
        "method_code": "ublic void updateToolbarSubtitle(@NonNull String subtitle) {\n        ActionBar actionBar = getSupportActionBar();\n        if (actionBar != null) {\n            actionBar.setSubtitle(subtitle);\n            viewThemeUtils.androidx.themeActionBarSubtitle(this, actionBar);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled updateToolbarSubtitle from ToolbarActivity.java into Swift.\n\n        Input:\n\n        Method Name: updateToolbarSubtitle\n\n        Method Code: ublic void updateToolbarSubtitle(@NonNull String subtitle) {\n        ActionBar actionBar = getSupportActionBar();\n        if (actionBar != null) {\n            actionBar.setSubtitle(subtitle);\n            viewThemeUtils.androidx.themeActionBarSubtitle(this, actionBar);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc updateToolbarSubtitle(subtitle: String) {\n    if let actionBar = self.navigationController?.navigationBar {\n        actionBar.topItem?.subtitle = subtitle\n        viewThemeUtils.androidx.themeActionBarSubtitle(self, actionBar)\n    }\n}\n```"
    },
    {
        "method_name": "clearToolbarSubtitle",
        "method_code": "ublic void clearToolbarSubtitle() {\n        ActionBar actionBar = getSupportActionBar();\n        if (actionBar != null) {\n            actionBar.setSubtitle(null);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled clearToolbarSubtitle from ToolbarActivity.java into Swift.\n\n        Input:\n\n        Method Name: clearToolbarSubtitle\n\n        Method Code: ublic void clearToolbarSubtitle() {\n        ActionBar actionBar = getSupportActionBar();\n        if (actionBar != null) {\n            actionBar.setSubtitle(null);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc clearToolbarSubtitle() {\n    if let actionBar = self.navigationController?.navigationBar {\n        actionBar.topItem?.subtitle = nil\n    }\n}\n```"
    }
]