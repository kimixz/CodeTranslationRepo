[
    {
        "method_name": "setAvatars",
        "method_code": "public void setAvatars(@NonNull User user,\n                           @NonNull List<ShareeUser> sharees,\n                           final ViewThemeUtils viewThemeUtils) {\n        @NonNull Context context = getContext();\n        removeAllViews();\n        RelativeLayout.LayoutParams avatarLayoutParams;\n        int avatarCount;\n        int shareeSize = Math.min(sharees.size(), MAX_AVATAR_COUNT);\n\n        Resources resources = context.getResources();\n        float avatarRadius = resources.getDimension(R.dimen.list_item_avatar_icon_radius);\n        ShareeUser sharee;\n\n        for (avatarCount = 0; avatarCount < shareeSize; avatarCount++) {\n            avatarLayoutParams = new RelativeLayout.LayoutParams(avatarSize, avatarSize);\n            avatarLayoutParams.setMargins(0, 0, avatarCount * overlapPx, 0);\n            avatarLayoutParams.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);\n\n            final ImageView avatar = new ImageView(context);\n            avatar.setLayoutParams(avatarLayoutParams);\n            avatar.setPadding(avatarBorderSize, avatarBorderSize, avatarBorderSize, avatarBorderSize);\n\n            avatar.setBackground(borderDrawable);\n            addView(avatar);\n            avatar.requestLayout();\n\n            if (avatarCount == 0 && sharees.size() > MAX_AVATAR_COUNT) {\n                avatar.setImageResource(R.drawable.ic_people);\n                viewThemeUtils.platform.tintTextDrawable(context, avatar.getDrawable());\n            } else {\n                sharee = sharees.get(avatarCount);\n                switch (sharee.getShareType()) {\n                    case GROUP:\n                    case EMAIL:\n                    case ROOM:\n                    case CIRCLE:\n                        viewThemeUtils.files.createAvatar(sharee.getShareType(), avatar, context);\n                        break;\n                    case FEDERATED:\n                        showFederatedShareAvatar(context,\n                                                 sharee.getUserId(),\n                                                 avatarRadius,\n                                                 resources,\n                                                 avatar,\n                                                 viewThemeUtils);\n                        break;\n                    default:\n                        avatar.setTag(sharee);\n                        DisplayUtils.setAvatar(user,\n                                               sharee.getUserId(),\n                                               sharee.getDisplayName(),\n                                               this,\n                                               avatarRadius,\n                                               resources,\n                                               avatar,\n                                               context);\n                        break;\n                }\n            }\n        }\n\n        // Recalculate container size based on avatar count\n        int size = overlapPx * (avatarCount - 1) + avatarSize;\n        ViewGroup.LayoutParams rememberParam = getLayoutParams();\n        rememberParam.width = size;\n        setLayoutParams(rememberParam);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setAvatars from AvatarGroupLayout.java into Swift.\n\n        Input:\n\n        Method Name: setAvatars\n\n        Method Code: public void setAvatars(@NonNull User user,\n                           @NonNull List<ShareeUser> sharees,\n                           final ViewThemeUtils viewThemeUtils) {\n        @NonNull Context context = getContext();\n        removeAllViews();\n        RelativeLayout.LayoutParams avatarLayoutParams;\n        int avatarCount;\n        int shareeSize = Math.min(sharees.size(), MAX_AVATAR_COUNT);\n\n        Resources resources = context.getResources();\n        float avatarRadius = resources.getDimension(R.dimen.list_item_avatar_icon_radius);\n        ShareeUser sharee;\n\n        for (avatarCount = 0; avatarCount < shareeSize; avatarCount++) {\n            avatarLayoutParams = new RelativeLayout.LayoutParams(avatarSize, avatarSize);\n            avatarLayoutParams.setMargins(0, 0, avatarCount * overlapPx, 0);\n            avatarLayoutParams.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);\n\n            final ImageView avatar = new ImageView(context);\n            avatar.setLayoutParams(avatarLayoutParams);\n            avatar.setPadding(avatarBorderSize, avatarBorderSize, avatarBorderSize, avatarBorderSize);\n\n            avatar.setBackground(borderDrawable);\n            addView(avatar);\n            avatar.requestLayout();\n\n            if (avatarCount == 0 && sharees.size() > MAX_AVATAR_COUNT) {\n                avatar.setImageResource(R.drawable.ic_people);\n                viewThemeUtils.platform.tintTextDrawable(context, avatar.getDrawable());\n            } else {\n                sharee = sharees.get(avatarCount);\n                switch (sharee.getShareType()) {\n                    case GROUP:\n                    case EMAIL:\n                    case ROOM:\n                    case CIRCLE:\n                        viewThemeUtils.files.createAvatar(sharee.getShareType(), avatar, context);\n                        break;\n                    case FEDERATED:\n                        showFederatedShareAvatar(context,\n                                                 sharee.getUserId(),\n                                                 avatarRadius,\n                                                 resources,\n                                                 avatar,\n                                                 viewThemeUtils);\n                        break;\n                    default:\n                        avatar.setTag(sharee);\n                        DisplayUtils.setAvatar(user,\n                                               sharee.getUserId(),\n                                               sharee.getDisplayName(),\n                                               this,\n                                               avatarRadius,\n                                               resources,\n                                               avatar,\n                                               context);\n                        break;\n                }\n            }\n        }\n\n        // Recalculate container size based on avatar count\n        int size = overlapPx * (avatarCount - 1) + avatarSize;\n        ViewGroup.LayoutParams rememberParam = getLayoutParams();\n        rememberParam.width = size;\n        setLayoutParams(rememberParam);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setAvatars(user: User, sharees: [ShareeUser], viewThemeUtils: ViewThemeUtils) {\n    guard let context = self.context else { return }\n    removeAllViews()\n    var avatarLayoutParams: RelativeLayout.LayoutParams\n    let shareeSize = min(sharees.count, MAX_AVATAR_COUNT)\n\n    let resources = context.resources\n    let avatarRadius = resources.getDimension(R.dimen.list_item_avatar_icon_radius)\n\n    for avatarCount in 0..<shareeSize {\n        avatarLayoutParams = RelativeLayout.LayoutParams(width: avatarSize, height: avatarSize)\n        avatarLayoutParams.setMargins(left: 0, top: 0, right: avatarCount * overlapPx, bottom: 0)\n        avatarLayoutParams.addRule(.alignParentRight)\n\n        let avatar = ImageView(context: context)\n        avatar.layoutParams = avatarLayoutParams\n        avatar.setPadding(left: avatarBorderSize, top: avatarBorderSize, right: avatarBorderSize, bottom: avatarBorderSize)\n\n        avatar.background = borderDrawable\n        addView(avatar)\n        avatar.requestLayout()\n\n        if avatarCount == 0 && sharees.count > MAX_AVATAR_COUNT {\n            avatar.image = UIImage(named: \"ic_people\")\n            viewThemeUtils.platform.tintTextDrawable(context: context, drawable: avatar.image)\n        } else {\n            let sharee = sharees[avatarCount]\n            switch sharee.shareType {\n            case .group, .email, .room, .circle:\n                viewThemeUtils.files.createAvatar(shareType: sharee.shareType, imageView: avatar, context: context)\n            case .federated:\n                showFederatedShareAvatar(context: context, userId: sharee.userId, avatarRadius: avatarRadius, resources: resources, imageView: avatar, viewThemeUtils: viewThemeUtils)\n            default:\n                avatar.tag = sharee\n                DisplayUtils.setAvatar(user: user, userId: sharee.userId, displayName: sharee.displayName, view: self, avatarRadius: avatarRadius, resources: resources, imageView: avatar, context: context)\n            }\n        }\n    }\n\n    // Recalculate container size based on avatar count\n    let size = overlapPx * (shareeSize - 1) + avatarSize\n    var rememberParam = self.layoutParams\n    rememberParam.width = size\n    self.layoutParams = rememberParam\n}\n```"
    },
    {
        "method_name": "showFederatedShareAvatar",
        "method_code": "private void showFederatedShareAvatar(Context context,\n                                          String user,\n                                          float avatarRadius,\n                                          Resources resources,\n                                          ImageView avatar,\n                                          ViewThemeUtils viewThemeUtils) {\n        // maybe federated share\n        String[] split = user.split(\"@\");\n        String userId = split[0];\n        String server = split[1];\n\n        String url = \"https://\" + server + \"/index.php/avatar/\" + userId + \"/\" +\n            resources.getInteger(R.integer.file_avatar_px);\n\n        Drawable placeholder;\n        try {\n            placeholder = TextDrawable.createAvatarByUserId(userId, avatarRadius);\n        } catch (Exception e) {\n            Log_OC.e(TAG, \"Error calculating RGB value for active account icon.\", e);\n            placeholder = viewThemeUtils.platform.colorDrawable(ResourcesCompat.getDrawable(resources,\n                                                                                            R.drawable.account_circle_white,\n                                                                                            null),\n                                                                ContextCompat.getColor(context, R.color.black));\n        }\n\n        avatar.setTag(null);\n        Glide.with(context).load(url)\n            .asBitmap()\n            .placeholder(placeholder)\n            .error(placeholder)\n            .into(new BitmapImageViewTarget(avatar) {\n                @Override\n                protected void setResource(Bitmap resource) {\n                    RoundedBitmapDrawable circularBitmapDrawable = RoundedBitmapDrawableFactory.create(resources,\n                                                                                                       resource);\n                    circularBitmapDrawable.setCircular(true);\n                    avatar.setImageDrawable(circularBitmapDrawable);\n                }\n            });\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showFederatedShareAvatar from AvatarGroupLayout.java into Swift.\n\n        Input:\n\n        Method Name: showFederatedShareAvatar\n\n        Method Code: private void showFederatedShareAvatar(Context context,\n                                          String user,\n                                          float avatarRadius,\n                                          Resources resources,\n                                          ImageView avatar,\n                                          ViewThemeUtils viewThemeUtils) {\n        // maybe federated share\n        String[] split = user.split(\"@\");\n        String userId = split[0];\n        String server = split[1];\n\n        String url = \"https://\" + server + \"/index.php/avatar/\" + userId + \"/\" +\n            resources.getInteger(R.integer.file_avatar_px);\n\n        Drawable placeholder;\n        try {\n            placeholder = TextDrawable.createAvatarByUserId(userId, avatarRadius);\n        } catch (Exception e) {\n            Log_OC.e(TAG, \"Error calculating RGB value for active account icon.\", e);\n            placeholder = viewThemeUtils.platform.colorDrawable(ResourcesCompat.getDrawable(resources,\n                                                                                            R.drawable.account_circle_white,\n                                                                                            null),\n                                                                ContextCompat.getColor(context, R.color.black));\n        }\n\n        avatar.setTag(null);\n        Glide.with(context).load(url)\n            .asBitmap()\n            .placeholder(placeholder)\n            .error(placeholder)\n            .into(new BitmapImageViewTarget(avatar) {\n                @Override\n                protected void setResource(Bitmap resource) {\n                    RoundedBitmapDrawable circularBitmapDrawable = RoundedBitmapDrawableFactory.create(resources,\n                                                                                                       resource);\n                    circularBitmapDrawable.setCircular(true);\n                    avatar.setImageDrawable(circularBitmapDrawable);\n                }\n            });\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func showFederatedShareAvatar(context: Context, user: String, avatarRadius: CGFloat, resources: Resources, avatar: UIImageView, viewThemeUtils: ViewThemeUtils) {\n    let split = user.split(separator: \"@\")\n    let userId = String(split[0])\n    let server = String(split[1])\n    \n    let url = \"https://\\(server)/index.php/avatar/\\(userId)/\\(resources.integer(forKey: \"file_avatar_px\"))\"\n    \n    var placeholder: Drawable\n    do {\n        placeholder = try TextDrawable.createAvatarByUserId(userId, avatarRadius: avatarRadius)\n    } catch {\n        Log_OC.e(TAG, \"Error calculating RGB value for active account icon.\", error)\n        placeholder = viewThemeUtils.platform.colorDrawable(ResourcesCompat.getDrawable(resources, R.drawable.account_circle_white, nil), ContextCompat.getColor(context, R.color.black))\n    }\n    \n    avatar.tag = nil\n    Glide.with(context).load(url)\n        .asBitmap()\n        .placeholder(placeholder)\n        .error(placeholder)\n        .into(BitmapImageViewTarget(avatar: avatar) { resource in\n            let circularBitmapDrawable = RoundedBitmapDrawableFactory.create(resources, resource)\n            circularBitmapDrawable.isCircular = true\n            avatar.image = circularBitmapDrawable\n        })\n}\n```"
    },
    {
        "method_name": "setResource",
        "method_code": "@Override\n                protected void setResource(Bitmap resource) {\n                    RoundedBitmapDrawable circularBitmapDrawable = RoundedBitmapDrawableFactory.create(resources,\n                                                                                                       resource);\n                    circularBitmapDrawable.setCircular(true);\n                    avatar.setImageDrawable(circularBitmapDrawable);\n                }",
        "prompt": "\n        Please translate the following Java (Android) method titled setResource from AvatarGroupLayout.java into Swift.\n\n        Input:\n\n        Method Name: setResource\n\n        Method Code: @Override\n                protected void setResource(Bitmap resource) {\n                    RoundedBitmapDrawable circularBitmapDrawable = RoundedBitmapDrawableFactory.create(resources,\n                                                                                                       resource);\n                    circularBitmapDrawable.setCircular(true);\n                    avatar.setImageDrawable(circularBitmapDrawable);\n                }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func setResource(_ resource: UIImage) {\n    let circularBitmapDrawable = resource.withRoundedCorners(radius: min(resource.size.width, resource.size.height) / 2)\n    avatar.image = circularBitmapDrawable\n}\n```"
    },
    {
        "method_name": "avatarGenerated",
        "method_code": "@Override\n    public void avatarGenerated(Drawable avatarDrawable, Object callContext) {\n        ((ImageView) callContext).setImageDrawable(avatarDrawable);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled avatarGenerated from AvatarGroupLayout.java into Swift.\n\n        Input:\n\n        Method Name: avatarGenerated\n\n        Method Code: @Override\n    public void avatarGenerated(Drawable avatarDrawable, Object callContext) {\n        ((ImageView) callContext).setImageDrawable(avatarDrawable);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc avatarGenerated(avatarDrawable: Drawable, callContext: Any) {\n    if let imageView = callContext as? UIImageView {\n        imageView.image = avatarDrawable\n    }\n}\n```"
    },
    {
        "method_name": "shouldCallGeneratedCallback",
        "method_code": "@Override\n    public boolean shouldCallGeneratedCallback(String tag, Object callContext) {\n        return ((ImageView) callContext).getTag().equals(tag);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled shouldCallGeneratedCallback from AvatarGroupLayout.java into Swift.\n\n        Input:\n\n        Method Name: shouldCallGeneratedCallback\n\n        Method Code: @Override\n    public boolean shouldCallGeneratedCallback(String tag, Object callContext) {\n        return ((ImageView) callContext).getTag().equals(tag);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc shouldCallGeneratedCallback(tag: String, callContext: Any) -> Bool {\n    return (callContext as! UIImageView).tag == tag\n}\n```"
    }
]