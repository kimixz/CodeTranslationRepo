[
    {
        "method_name": "getAll",
        "method_code": "public ConcurrentMap<String, Node<V>> getAll() {\n        return mMap;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getAll from IndexedForest.java into Swift.\n\n        Input:\n\n        Method Name: getAll\n\n        Method Code: public ConcurrentMap<String, Node<V>> getAll() {\n        return mMap;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getAll() -> [String: Node<V>] {\n    return mMap\n}\n```"
    },
    {
        "method_name": "getParent",
        "method_code": "public Node<V> getParent() {\n            return mParent;\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled getParent from IndexedForest.java into Swift.\n\n        Input:\n\n        Method Name: getParent\n\n        Method Code: public Node<V> getParent() {\n            return mParent;\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getParent() -> Node<V>? {\n    return mParent\n}\n```"
    },
    {
        "method_name": "getChildren",
        "method_code": "public Set<Node<V>> getChildren() {\n            return mChildren;\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled getChildren from IndexedForest.java into Swift.\n\n        Input:\n\n        Method Name: getChildren\n\n        Method Code: public Set<Node<V>> getChildren() {\n            return mChildren;\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getChildren() -> Set<Node<V>> {\n    return mChildren\n}\n```"
    },
    {
        "method_name": "getKey",
        "method_code": "public String getKey() {\n            return mKey;\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled getKey from IndexedForest.java into Swift.\n\n        Input:\n\n        Method Name: getKey\n\n        Method Code: public String getKey() {\n            return mKey;\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getKey() -> String {\n    return mKey\n}\n```"
    },
    {
        "method_name": "getPayload",
        "method_code": "public V getPayload() {\n            return mPayload;\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled getPayload from IndexedForest.java into Swift.\n\n        Input:\n\n        Method Name: getPayload\n\n        Method Code: public V getPayload() {\n            return mPayload;\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getPayload() -> V {\n    return mPayload\n}\n```"
    },
    {
        "method_name": "addChild",
        "method_code": "public void addChild(Node<V> child) {\n            mChildren.add(child);\n            child.setParent(this);\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled addChild from IndexedForest.java into Swift.\n\n        Input:\n\n        Method Name: addChild\n\n        Method Code: public void addChild(Node<V> child) {\n            mChildren.add(child);\n            child.setParent(this);\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc addChild(_ child: Node<V>) {\n    mChildren.append(child)\n    child.setParent(self)\n}\n```"
    },
    {
        "method_name": "setParent",
        "method_code": "private void setParent(Node<V> parent) {\n            mParent = parent;\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled setParent from IndexedForest.java into Swift.\n\n        Input:\n\n        Method Name: setParent\n\n        Method Code: private void setParent(Node<V> parent) {\n            mParent = parent;\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setParent(_ parent: Node<V>) {\n    mParent = parent\n}\n```"
    },
    {
        "method_name": "hasChildren",
        "method_code": "public boolean hasChildren() {\n            return mChildren.size() > 0;\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled hasChildren from IndexedForest.java into Swift.\n\n        Input:\n\n        Method Name: hasChildren\n\n        Method Code: public boolean hasChildren() {\n            return mChildren.size() > 0;\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc hasChildren() -> Bool {\n    return mChildren.count > 0\n}\n```"
    },
    {
        "method_name": "removeChild",
        "method_code": "public void removeChild(Node<V> removed) {\n            mChildren.remove(removed);\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled removeChild from IndexedForest.java into Swift.\n\n        Input:\n\n        Method Name: removeChild\n\n        Method Code: public void removeChild(Node<V> removed) {\n            mChildren.remove(removed);\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc removeChild(removed: Node<V>) {\n    mChildren.remove(removed)\n}\n```"
    },
    {
        "method_name": "clearPayload",
        "method_code": "public void clearPayload() {\n            mPayload = null;\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled clearPayload from IndexedForest.java into Swift.\n\n        Input:\n\n        Method Name: clearPayload\n\n        Method Code: public void clearPayload() {\n            mPayload = null;\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc clearPayload() {\n    mPayload = nil\n}\n```"
    },
    {
        "method_name": "putIfAbsent",
        "method_code": "public /* synchronized */ Pair<String, String> putIfAbsent(String accountName, String remotePath, V value) {\n        String targetKey = buildKey(accountName, remotePath);\n\n        Node<V> valuedNode = new Node<>(targetKey, value);\n        Node<V> previousValue = mMap.putIfAbsent(\n            targetKey,\n            valuedNode\n        );\n        if (previousValue != null) {\n            // remotePath already known; not replaced\n            return null;\n\n        } else {\n            // value really added\n            String currentPath = remotePath;\n            String parentPath;\n            String parentKey;\n            Node<V> currentNode = valuedNode;\n            Node<V> parentNode = null;\n            boolean linked = false;\n            while (!OCFile.ROOT_PATH.equals(currentPath) && !linked) {\n                parentPath = new File(currentPath).getParent();\n                if (parentPath != null && !parentPath.endsWith(OCFile.PATH_SEPARATOR)) {\n                    parentPath += OCFile.PATH_SEPARATOR;\n                }\n                parentKey = buildKey(accountName, parentPath);\n                parentNode = mMap.get(parentKey);\n                if (parentNode == null) {\n                    parentNode = new Node<>(parentKey, null);\n                    parentNode.addChild(currentNode);\n                    mMap.put(parentKey, parentNode);\n                } else {\n                    parentNode.addChild(currentNode);\n                    linked = true;\n                }\n                currentPath = parentPath;\n                currentNode = parentNode;\n            }\n\n            String linkedTo = OCFile.ROOT_PATH;\n            if (linked) {\n                linkedTo = parentNode.getKey().substring(accountName.length());\n            }\n\n            return new Pair<>(targetKey, linkedTo);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled putIfAbsent from IndexedForest.java into Swift.\n\n        Input:\n\n        Method Name: putIfAbsent\n\n        Method Code: public /* synchronized */ Pair<String, String> putIfAbsent(String accountName, String remotePath, V value) {\n        String targetKey = buildKey(accountName, remotePath);\n\n        Node<V> valuedNode = new Node<>(targetKey, value);\n        Node<V> previousValue = mMap.putIfAbsent(\n            targetKey,\n            valuedNode\n        );\n        if (previousValue != null) {\n            // remotePath already known; not replaced\n            return null;\n\n        } else {\n            // value really added\n            String currentPath = remotePath;\n            String parentPath;\n            String parentKey;\n            Node<V> currentNode = valuedNode;\n            Node<V> parentNode = null;\n            boolean linked = false;\n            while (!OCFile.ROOT_PATH.equals(currentPath) && !linked) {\n                parentPath = new File(currentPath).getParent();\n                if (parentPath != null && !parentPath.endsWith(OCFile.PATH_SEPARATOR)) {\n                    parentPath += OCFile.PATH_SEPARATOR;\n                }\n                parentKey = buildKey(accountName, parentPath);\n                parentNode = mMap.get(parentKey);\n                if (parentNode == null) {\n                    parentNode = new Node<>(parentKey, null);\n                    parentNode.addChild(currentNode);\n                    mMap.put(parentKey, parentNode);\n                } else {\n                    parentNode.addChild(currentNode);\n                    linked = true;\n                }\n                currentPath = parentPath;\n                currentNode = parentNode;\n            }\n\n            String linkedTo = OCFile.ROOT_PATH;\n            if (linked) {\n                linkedTo = parentNode.getKey().substring(accountName.length());\n            }\n\n            return new Pair<>(targetKey, linkedTo);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc putIfAbsent(accountName: String, remotePath: String, value: V) -> (String, String)? {\n    let targetKey = buildKey(accountName: accountName, remotePath: remotePath)\n\n    let valuedNode = Node(key: targetKey, value: value)\n    if let previousValue = mMap.putIfAbsent(key: targetKey, value: valuedNode) {\n        return nil\n    } else {\n        var currentPath = remotePath\n        var parentPath: String?\n        var parentKey: String\n        var currentNode = valuedNode\n        var parentNode: Node<V>? = nil\n        var linked = false\n        while currentPath != OCFile.ROOT_PATH && !linked {\n            parentPath = File(currentPath).getParent()\n            if let parentPath = parentPath, !parentPath.hasSuffix(OCFile.PATH_SEPARATOR) {\n                parentPath += OCFile.PATH_SEPARATOR\n            }\n            parentKey = buildKey(accountName: accountName, remotePath: parentPath ?? \"\")\n            parentNode = mMap[parentKey]\n            if parentNode == nil {\n                parentNode = Node(key: parentKey, value: nil)\n                parentNode?.addChild(child: currentNode)\n                mMap[parentKey] = parentNode\n            } else {\n                parentNode?.addChild(child: currentNode)\n                linked = true\n            }\n            currentPath = parentPath ?? \"\"\n            currentNode = parentNode!\n        }\n\n        var linkedTo = OCFile.ROOT_PATH\n        if linked {\n            linkedTo = String(parentNode!.key.dropFirst(accountName.count))\n        }\n\n        return (targetKey, linkedTo)\n    }\n}\n```"
    },
    {
        "method_name": "removePayload",
        "method_code": "public Pair<V, String> removePayload(String accountName, String remotePath) {\n        String targetKey = buildKey(accountName, remotePath);\n        Node<V> target = mMap.get(targetKey);\n        if (target != null) {\n            target.clearPayload();\n            if (!target.hasChildren()) {\n                return remove(accountName, remotePath);\n            }\n        }\n        return new Pair<>(null, null);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled removePayload from IndexedForest.java into Swift.\n\n        Input:\n\n        Method Name: removePayload\n\n        Method Code: public Pair<V, String> removePayload(String accountName, String remotePath) {\n        String targetKey = buildKey(accountName, remotePath);\n        Node<V> target = mMap.get(targetKey);\n        if (target != null) {\n            target.clearPayload();\n            if (!target.hasChildren()) {\n                return remove(accountName, remotePath);\n            }\n        }\n        return new Pair<>(null, null);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc removePayload(accountName: String, remotePath: String) -> (V?, String?) {\n    let targetKey = buildKey(accountName: accountName, remotePath: remotePath)\n    if let target = mMap[targetKey] {\n        target.clearPayload()\n        if !target.hasChildren() {\n            return remove(accountName: accountName, remotePath: remotePath)\n        }\n    }\n    return (nil, nil)\n}\n```"
    },
    {
        "method_name": "remove",
        "method_code": "public /* synchronized */ Pair<V, String> remove(String accountName, String remotePath) {\n        String targetKey = buildKey(accountName, remotePath);\n        Node<V> firstRemoved = mMap.remove(targetKey);\n        String unlinkedFrom = null;\n\n        if (firstRemoved != null) {\n            /// remove children\n            removeDescendants(firstRemoved);\n\n            /// remove ancestors if only here due to firstRemoved\n            Node<V> removed = firstRemoved;\n            Node<V> parent = removed.getParent();\n            while (parent != null) {\n                parent.removeChild(removed);\n                if (!parent.hasChildren()) {\n                    removed = mMap.remove(parent.getKey());\n                    parent = removed.getParent();\n                } else {\n                    break;\n                }\n            }\n\n            if (parent != null) {\n                unlinkedFrom = parent.getKey().substring(accountName.length());\n            }\n\n            return new Pair<>(firstRemoved.getPayload(), unlinkedFrom);\n        }\n\n        return new Pair<>(null, null);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled remove from IndexedForest.java into Swift.\n\n        Input:\n\n        Method Name: remove\n\n        Method Code: public /* synchronized */ Pair<V, String> remove(String accountName, String remotePath) {\n        String targetKey = buildKey(accountName, remotePath);\n        Node<V> firstRemoved = mMap.remove(targetKey);\n        String unlinkedFrom = null;\n\n        if (firstRemoved != null) {\n            /// remove children\n            removeDescendants(firstRemoved);\n\n            /// remove ancestors if only here due to firstRemoved\n            Node<V> removed = firstRemoved;\n            Node<V> parent = removed.getParent();\n            while (parent != null) {\n                parent.removeChild(removed);\n                if (!parent.hasChildren()) {\n                    removed = mMap.remove(parent.getKey());\n                    parent = removed.getParent();\n                } else {\n                    break;\n                }\n            }\n\n            if (parent != null) {\n                unlinkedFrom = parent.getKey().substring(accountName.length());\n            }\n\n            return new Pair<>(firstRemoved.getPayload(), unlinkedFrom);\n        }\n\n        return new Pair<>(null, null);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc remove(accountName: String, remotePath: String) -> (V?, String?) {\n    let targetKey = buildKey(accountName: accountName, remotePath: remotePath)\n    let firstRemoved = mMap.removeValue(forKey: targetKey)\n    var unlinkedFrom: String? = nil\n\n    if let firstRemoved = firstRemoved {\n        // remove children\n        removeDescendants(node: firstRemoved)\n\n        // remove ancestors if only here due to firstRemoved\n        var removed = firstRemoved\n        var parent = removed.getParent()\n        while let currentParent = parent {\n            currentParent.removeChild(removed)\n            if !currentParent.hasChildren() {\n                removed = mMap.removeValue(forKey: currentParent.getKey())!\n                parent = removed.getParent()\n            } else {\n                break\n            }\n        }\n\n        if let parent = parent {\n            unlinkedFrom = String(parent.getKey().dropFirst(accountName.count))\n        }\n\n        return (firstRemoved.getPayload(), unlinkedFrom)\n    }\n\n    return (nil, nil)\n}\n```"
    },
    {
        "method_name": "removeDescendants",
        "method_code": "private void removeDescendants(Node<V> removed) {\n        Iterator<Node<V>> childrenIt = removed.getChildren().iterator();\n        Node<V> child = null;\n        while (childrenIt.hasNext()) {\n            child = childrenIt.next();\n            mMap.remove(child.getKey());\n            removeDescendants(child);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled removeDescendants from IndexedForest.java into Swift.\n\n        Input:\n\n        Method Name: removeDescendants\n\n        Method Code: private void removeDescendants(Node<V> removed) {\n        Iterator<Node<V>> childrenIt = removed.getChildren().iterator();\n        Node<V> child = null;\n        while (childrenIt.hasNext()) {\n            child = childrenIt.next();\n            mMap.remove(child.getKey());\n            removeDescendants(child);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func removeDescendants(_ removed: Node<V>) {\n    var childrenIt = removed.getChildren().makeIterator()\n    while let child = childrenIt.next() {\n        mMap.removeValue(forKey: child.getKey())\n        removeDescendants(child)\n    }\n}\n```"
    },
    {
        "method_name": "contains",
        "method_code": "public boolean contains(String accountName, String remotePath) {\n        String targetKey = buildKey(accountName, remotePath);\n        return mMap.containsKey(targetKey);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled contains from IndexedForest.java into Swift.\n\n        Input:\n\n        Method Name: contains\n\n        Method Code: public boolean contains(String accountName, String remotePath) {\n        String targetKey = buildKey(accountName, remotePath);\n        return mMap.containsKey(targetKey);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc contains(accountName: String, remotePath: String) -> Bool {\n    let targetKey = buildKey(accountName: accountName, remotePath: remotePath)\n    return mMap.keys.contains(targetKey)\n}\n```"
    },
    {
        "method_name": "get",
        "method_code": "public /* synchronized */ V get(String key) {\n        Node<V> node = mMap.get(key);\n        if (node != null) {\n            return node.getPayload();\n        } else {\n            return null;\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled get from IndexedForest.java into Swift.\n\n        Input:\n\n        Method Name: get\n\n        Method Code: public /* synchronized */ V get(String key) {\n        Node<V> node = mMap.get(key);\n        if (node != null) {\n            return node.getPayload();\n        } else {\n            return null;\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc get(_ key: String) -> V? {\n    if let node = mMap[key] {\n        return node.getPayload()\n    } else {\n        return nil\n    }\n}\n```"
    },
    {
        "method_name": "get",
        "method_code": "public V get(String accountName, String remotePath) {\n        String key = buildKey(accountName, remotePath);\n        return get(key);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled get from IndexedForest.java into Swift.\n\n        Input:\n\n        Method Name: get\n\n        Method Code: public V get(String accountName, String remotePath) {\n        String key = buildKey(accountName, remotePath);\n        return get(key);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc get(accountName: String, remotePath: String) -> V? {\n    let key = buildKey(accountName: accountName, remotePath: remotePath)\n    return get(key: key)\n}\n```"
    },
    {
        "method_name": "remove",
        "method_code": "public void remove(String accountName){\n        Iterator<String> it = mMap.keySet().iterator();\n        while (it.hasNext()) {\n            String key = it.next();\n            Log_OC.d(\"IndexedForest\", \"Number of pending downloads= \"  + mMap.size());\n            if (key.startsWith(accountName)) {\n                mMap.remove(key);\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled remove from IndexedForest.java into Swift.\n\n        Input:\n\n        Method Name: remove\n\n        Method Code: public void remove(String accountName){\n        Iterator<String> it = mMap.keySet().iterator();\n        while (it.hasNext()) {\n            String key = it.next();\n            Log_OC.d(\"IndexedForest\", \"Number of pending downloads= \"  + mMap.size());\n            if (key.startsWith(accountName)) {\n                mMap.remove(key);\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc remove(accountName: String) {\n    for key in mMap.keys {\n        print(\"IndexedForest: Number of pending downloads= \\(mMap.count)\")\n        if key.hasPrefix(accountName) {\n            mMap.removeValue(forKey: key)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "buildKey",
        "method_code": "private String buildKey(String accountName, String remotePath) {\n        return accountName + remotePath;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled buildKey from IndexedForest.java into Swift.\n\n        Input:\n\n        Method Name: buildKey\n\n        Method Code: private String buildKey(String accountName, String remotePath) {\n        return accountName + remotePath;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func buildKey(accountName: String, remotePath: String) -> String {\n    return accountName + remotePath\n}\n```"
    }
]