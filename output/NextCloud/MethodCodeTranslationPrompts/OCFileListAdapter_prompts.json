[
    {
        "method_name": "isMultiSelect",
        "method_code": "public boolean isMultiSelect() {\n        return ocFileListDelegate.isMultiSelect();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled isMultiSelect from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: isMultiSelect\n\n        Method Code: public boolean isMultiSelect() {\n        return ocFileListDelegate.isMultiSelect();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc isMultiSelect() -> Bool {\n    return ocFileListDelegate.isMultiSelect()\n}\n```"
    },
    {
        "method_name": "setMultiSelect",
        "method_code": "@SuppressLint(\"NotifyDataSetChanged\")\n    public void setMultiSelect(boolean bool) {\n        ocFileListDelegate.setMultiSelect(bool);\n        notifyDataSetChanged();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setMultiSelect from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: setMultiSelect\n\n        Method Code: @SuppressLint(\"NotifyDataSetChanged\")\n    public void setMultiSelect(boolean bool) {\n        ocFileListDelegate.setMultiSelect(bool);\n        notifyDataSetChanged();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setMultiSelect(_ bool: Bool) {\n    ocFileListDelegate.setMultiSelect(bool)\n    notifyDataSetChanged()\n}\n```"
    },
    {
        "method_name": "removeCheckedFile",
        "method_code": "public void removeCheckedFile(@NonNull OCFile file) {\n        ocFileListDelegate.removeCheckedFile(file);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled removeCheckedFile from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: removeCheckedFile\n\n        Method Code: public void removeCheckedFile(@NonNull OCFile file) {\n        ocFileListDelegate.removeCheckedFile(file);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc removeCheckedFile(file: OCFile) {\n    ocFileListDelegate.removeCheckedFile(file)\n}\n```"
    },
    {
        "method_name": "addAllFilesToCheckedFiles",
        "method_code": "public void addAllFilesToCheckedFiles() {\n        ocFileListDelegate.addToCheckedFiles(mFiles);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled addAllFilesToCheckedFiles from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: addAllFilesToCheckedFiles\n\n        Method Code: public void addAllFilesToCheckedFiles() {\n        ocFileListDelegate.addToCheckedFiles(mFiles);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc addAllFilesToCheckedFiles() {\n    ocFileListDelegate.addToCheckedFiles(mFiles)\n}\n```"
    },
    {
        "method_name": "getItemPosition",
        "method_code": "public int getItemPosition(@NonNull OCFile file) {\n        int position = mFiles.indexOf(file);\n\n        if (shouldShowHeader()) {\n            position = position + 1;\n        }\n\n        return position;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getItemPosition from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getItemPosition\n\n        Method Code: public int getItemPosition(@NonNull OCFile file) {\n        int position = mFiles.indexOf(file);\n\n        if (shouldShowHeader()) {\n            position = position + 1;\n        }\n\n        return position;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getItemPosition(file: OCFile) -> Int {\n    var position = mFiles.firstIndex(of: file) ?? -1\n\n    if shouldShowHeader() {\n        position += 1\n    }\n\n    return position\n}\n```"
    },
    {
        "method_name": "setFavoriteAttributeForItemID",
        "method_code": "@SuppressLint(\"NotifyDataSetChanged\")\n    public void setFavoriteAttributeForItemID(String remotePath, boolean favorite, boolean removeFromList) {\n        List<OCFile> filesToDelete = new ArrayList<>();\n        for (OCFile file : mFiles) {\n            if (file.getRemotePath().equals(remotePath)) {\n                file.setFavorite(favorite);\n\n                if (removeFromList) {\n                    filesToDelete.add(file);\n                }\n\n                break;\n            }\n        }\n\n        for (OCFile file : mFilesAll) {\n            if (file.getRemotePath().equals(remotePath)) {\n                file.setFavorite(favorite);\n\n                mStorageManager.saveFile(file);\n\n                if (removeFromList) {\n                    filesToDelete.add(file);\n                }\n\n                break;\n            }\n        }\n\n        FileSortOrder sortOrder = preferences.getSortOrderByFolder(currentDirectory);\n        if (searchType == SearchType.SHARED_FILTER) {\n            Collections.sort(mFiles,\n                             (o1, o2) -> Long.compare(o2.getFirstShareTimestamp(), o1.getFirstShareTimestamp())\n                            );\n        } else {\n            mFiles = sortOrder.sortCloudFiles(mFiles);\n        }\n\n        new Handler(Looper.getMainLooper()).post(() -> {\n            mFiles.removeAll(filesToDelete);\n            notifyDataSetChanged();\n        });\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setFavoriteAttributeForItemID from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: setFavoriteAttributeForItemID\n\n        Method Code: @SuppressLint(\"NotifyDataSetChanged\")\n    public void setFavoriteAttributeForItemID(String remotePath, boolean favorite, boolean removeFromList) {\n        List<OCFile> filesToDelete = new ArrayList<>();\n        for (OCFile file : mFiles) {\n            if (file.getRemotePath().equals(remotePath)) {\n                file.setFavorite(favorite);\n\n                if (removeFromList) {\n                    filesToDelete.add(file);\n                }\n\n                break;\n            }\n        }\n\n        for (OCFile file : mFilesAll) {\n            if (file.getRemotePath().equals(remotePath)) {\n                file.setFavorite(favorite);\n\n                mStorageManager.saveFile(file);\n\n                if (removeFromList) {\n                    filesToDelete.add(file);\n                }\n\n                break;\n            }\n        }\n\n        FileSortOrder sortOrder = preferences.getSortOrderByFolder(currentDirectory);\n        if (searchType == SearchType.SHARED_FILTER) {\n            Collections.sort(mFiles,\n                             (o1, o2) -> Long.compare(o2.getFirstShareTimestamp(), o1.getFirstShareTimestamp())\n                            );\n        } else {\n            mFiles = sortOrder.sortCloudFiles(mFiles);\n        }\n\n        new Handler(Looper.getMainLooper()).post(() -> {\n            mFiles.removeAll(filesToDelete);\n            notifyDataSetChanged();\n        });\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setFavoriteAttributeForItemID(remotePath: String, favorite: Bool, removeFromList: Bool) {\n    var filesToDelete: [OCFile] = []\n    \n    for file in mFiles {\n        if file.remotePath == remotePath {\n            file.setFavorite(favorite)\n            \n            if removeFromList {\n                filesToDelete.append(file)\n            }\n            \n            break\n        }\n    }\n    \n    for file in mFilesAll {\n        if file.remotePath == remotePath {\n            file.setFavorite(favorite)\n            \n            mStorageManager.saveFile(file)\n            \n            if removeFromList {\n                filesToDelete.append(file)\n            }\n            \n            break\n        }\n    }\n    \n    let sortOrder = preferences.getSortOrderByFolder(currentDirectory)\n    if searchType == .sharedFilter {\n        mFiles.sort { $0.firstShareTimestamp > $1.firstShareTimestamp }\n    } else {\n        mFiles = sortOrder.sortCloudFiles(mFiles)\n    }\n    \n    DispatchQueue.main.async {\n        self.mFiles.removeAll { filesToDelete.contains($0) }\n        self.notifyDataSetChanged()\n    }\n}\n```"
    },
    {
        "method_name": "refreshCommentsCount",
        "method_code": "public void refreshCommentsCount(String fileId) {\n        for (OCFile file : mFiles) {\n            if (file.getRemoteId().equals(fileId)) {\n                file.setUnreadCommentsCount(0);\n                break;\n            }\n        }\n\n        for (OCFile file : mFilesAll) {\n            if (file.getRemoteId().equals(fileId)) {\n                file.setUnreadCommentsCount(0);\n                break;\n            }\n        }\n\n        new Handler(Looper.getMainLooper()).post(this::notifyDataSetChanged);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled refreshCommentsCount from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: refreshCommentsCount\n\n        Method Code: public void refreshCommentsCount(String fileId) {\n        for (OCFile file : mFiles) {\n            if (file.getRemoteId().equals(fileId)) {\n                file.setUnreadCommentsCount(0);\n                break;\n            }\n        }\n\n        for (OCFile file : mFilesAll) {\n            if (file.getRemoteId().equals(fileId)) {\n                file.setUnreadCommentsCount(0);\n                break;\n            }\n        }\n\n        new Handler(Looper.getMainLooper()).post(this::notifyDataSetChanged);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc refreshCommentsCount(fileId: String) {\n    for file in mFiles {\n        if file.getRemoteId() == fileId {\n            file.setUnreadCommentsCount(0)\n            break\n        }\n    }\n\n    for file in mFilesAll {\n        if file.getRemoteId() == fileId {\n            file.setUnreadCommentsCount(0)\n            break\n        }\n    }\n\n    DispatchQueue.main.async {\n        self.notifyDataSetChanged()\n    }\n}\n```"
    },
    {
        "method_name": "setEncryptionAttributeForItemID",
        "method_code": "public void setEncryptionAttributeForItemID(String fileId, boolean encrypted) {\n        for (OCFile file : mFiles) {\n            if (file.getRemoteId().equals(fileId)) {\n                file.setEncrypted(encrypted);\n                file.setE2eCounter(0L);\n                mStorageManager.saveFile(file);\n\n                break;\n            }\n        }\n\n        for (OCFile file : mFilesAll) {\n            if (file.getRemoteId().equals(fileId)) {\n                file.setEncrypted(encrypted);\n                file.setE2eCounter(0L);\n            }\n        }\n\n        new Handler(Looper.getMainLooper()).post(this::notifyDataSetChanged);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setEncryptionAttributeForItemID from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: setEncryptionAttributeForItemID\n\n        Method Code: public void setEncryptionAttributeForItemID(String fileId, boolean encrypted) {\n        for (OCFile file : mFiles) {\n            if (file.getRemoteId().equals(fileId)) {\n                file.setEncrypted(encrypted);\n                file.setE2eCounter(0L);\n                mStorageManager.saveFile(file);\n\n                break;\n            }\n        }\n\n        for (OCFile file : mFilesAll) {\n            if (file.getRemoteId().equals(fileId)) {\n                file.setEncrypted(encrypted);\n                file.setE2eCounter(0L);\n            }\n        }\n\n        new Handler(Looper.getMainLooper()).post(this::notifyDataSetChanged);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setEncryptionAttributeForItemID(fileId: String, encrypted: Bool) {\n    for file in mFiles {\n        if file.getRemoteId() == fileId {\n            file.setEncrypted(encrypted)\n            file.setE2eCounter(0)\n            mStorageManager.saveFile(file)\n            break\n        }\n    }\n\n    for file in mFilesAll {\n        if file.getRemoteId() == fileId {\n            file.setEncrypted(encrypted)\n            file.setE2eCounter(0)\n        }\n    }\n\n    DispatchQueue.main.async {\n        self.notifyDataSetChanged()\n    }\n}\n```"
    },
    {
        "method_name": "getItemId",
        "method_code": "@Override\n    public long getItemId(int position) {\n        if (shouldShowHeader()) {\n            if (position == 0) {\n                return headerId;\n            }\n\n\n            // skip header\n            position--;\n        }\n\n        if (position == mFiles.size()) {\n            return footerId;\n        } if (position < mFiles.size()) {\n            return mFiles.get(position).getFileId();\n        }\n\n        // fallback\n        return RecyclerView.NO_ID;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getItemId from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getItemId\n\n        Method Code: @Override\n    public long getItemId(int position) {\n        if (shouldShowHeader()) {\n            if (position == 0) {\n                return headerId;\n            }\n\n\n            // skip header\n            position--;\n        }\n\n        if (position == mFiles.size()) {\n            return footerId;\n        } if (position < mFiles.size()) {\n            return mFiles.get(position).getFileId();\n        }\n\n        // fallback\n        return RecyclerView.NO_ID;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getItemId(position: Int) -> Int64 {\n    if shouldShowHeader() {\n        if position == 0 {\n            return headerId\n        }\n        \n        // skip header\n        position -= 1\n    }\n    \n    if position == mFiles.count {\n        return footerId\n    } else if position < mFiles.count {\n        return mFiles[position].getFileId()\n    }\n    \n    // fallback\n    return UICollectionView.noItem\n}\n```"
    },
    {
        "method_name": "getItemCount",
        "method_code": "@Override\n    public int getItemCount() {\n        return mFiles.size() + (shouldShowHeader() ? 2 : 1);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getItemCount from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getItemCount\n\n        Method Code: @Override\n    public int getItemCount() {\n        return mFiles.size() + (shouldShowHeader() ? 2 : 1);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func getItemCount() -> Int {\n    return mFiles.count + (shouldShowHeader() ? 2 : 1)\n}\n```"
    },
    {
        "method_name": "getItem",
        "method_code": "@Nullable\n    public OCFile getItem(int position) {\n        int newPosition = position;\n\n        if (shouldShowHeader() && position > 0) {\n            newPosition = position - 1;\n        }\n\n        if (newPosition >= mFiles.size()) {\n            return null;\n        }\n\n        return mFiles.get(newPosition);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getItem from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getItem\n\n        Method Code: @Nullable\n    public OCFile getItem(int position) {\n        int newPosition = position;\n\n        if (shouldShowHeader() && position > 0) {\n            newPosition = position - 1;\n        }\n\n        if (newPosition >= mFiles.size()) {\n            return null;\n        }\n\n        return mFiles.get(newPosition);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getItem(at position: Int) -> OCFile? {\n    var newPosition = position\n\n    if shouldShowHeader() && position > 0 {\n        newPosition = position - 1\n    }\n\n    if newPosition >= mFiles.count {\n        return nil\n    }\n\n    return mFiles[newPosition]\n}\n```"
    },
    {
        "method_name": "getItemViewType",
        "method_code": "@Override\n    public int getItemViewType(int position) {\n        if (shouldShowHeader() && position == 0) {\n            return VIEW_TYPE_HEADER;\n        }\n\n        if (shouldShowHeader() && position == mFiles.size() + 1 ||\n            (!shouldShowHeader() && position == mFiles.size())) {\n            return VIEW_TYPE_FOOTER;\n        }\n\n        OCFile item = getItem(position);\n        if (item == null) {\n            return VIEW_TYPE_ITEM;\n        }\n\n        if (MimeTypeUtil.isImageOrVideo(item)) {\n            return VIEW_TYPE_IMAGE;\n        } else {\n            return VIEW_TYPE_ITEM;\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getItemViewType from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getItemViewType\n\n        Method Code: @Override\n    public int getItemViewType(int position) {\n        if (shouldShowHeader() && position == 0) {\n            return VIEW_TYPE_HEADER;\n        }\n\n        if (shouldShowHeader() && position == mFiles.size() + 1 ||\n            (!shouldShowHeader() && position == mFiles.size())) {\n            return VIEW_TYPE_FOOTER;\n        }\n\n        OCFile item = getItem(position);\n        if (item == null) {\n            return VIEW_TYPE_ITEM;\n        }\n\n        if (MimeTypeUtil.isImageOrVideo(item)) {\n            return VIEW_TYPE_IMAGE;\n        } else {\n            return VIEW_TYPE_ITEM;\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func getItemViewType(_ position: Int) -> Int {\n    if shouldShowHeader() && position == 0 {\n        return VIEW_TYPE_HEADER\n    }\n\n    if (shouldShowHeader() && position == mFiles.count + 1) ||\n       (!shouldShowHeader() && position == mFiles.count) {\n        return VIEW_TYPE_FOOTER\n    }\n\n    let item = getItem(position)\n    if item == nil {\n        return VIEW_TYPE_ITEM\n    }\n\n    if MimeTypeUtil.isImageOrVideo(item) {\n        return VIEW_TYPE_IMAGE\n    } else {\n        return VIEW_TYPE_ITEM\n    }\n}\n```"
    },
    {
        "method_name": "isEmpty",
        "method_code": "public boolean isEmpty() {\n        return mFiles.isEmpty();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled isEmpty from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: isEmpty\n\n        Method Code: public boolean isEmpty() {\n        return mFiles.isEmpty();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc isEmpty() -> Bool {\n    return mFiles.isEmpty\n}\n```"
    },
    {
        "method_name": "onCreateViewHolder",
        "method_code": "@NonNull\n    @Override\n    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n        switch (viewType) {\n            default -> {\n                if (gridView) {\n                    return new OCFileListGridItemViewHolder(\n                        GridItemBinding.inflate(LayoutInflater.from(parent.getContext()), parent, false)\n                    );\n                } else {\n                    return new OCFileListItemViewHolder(\n                        ListItemBinding.inflate(LayoutInflater.from(parent.getContext()), parent, false)\n                    );\n                }\n            }\n            case VIEW_TYPE_IMAGE -> {\n                if (gridView) {\n                    return new OCFileListViewHolder(\n                        GridImageBinding.inflate(LayoutInflater.from(parent.getContext()), parent, false)\n                    );\n                } else {\n                    return new OCFileListItemViewHolder(\n                        ListItemBinding.inflate(LayoutInflater.from(parent.getContext()), parent, false)\n                    );\n                }\n            }\n            case VIEW_TYPE_FOOTER -> {\n                return new OCFileListFooterViewHolder(\n                    ListFooterBinding.inflate(LayoutInflater.from(parent.getContext()), parent, false)\n                );\n            }\n            case VIEW_TYPE_HEADER -> {\n                ListHeaderBinding binding = ListHeaderBinding.inflate(\n                    LayoutInflater.from(parent.getContext()),\n                    parent,\n                    false);\n                ViewGroup.LayoutParams layoutParams = binding.headerView.getLayoutParams();\n                layoutParams.height = (int) (parent.getHeight() * 0.3);\n                binding.headerView.setLayoutParams(layoutParams);\n                return new OCFileListHeaderViewHolder(binding);\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreateViewHolder from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: onCreateViewHolder\n\n        Method Code: @NonNull\n    @Override\n    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n        switch (viewType) {\n            default -> {\n                if (gridView) {\n                    return new OCFileListGridItemViewHolder(\n                        GridItemBinding.inflate(LayoutInflater.from(parent.getContext()), parent, false)\n                    );\n                } else {\n                    return new OCFileListItemViewHolder(\n                        ListItemBinding.inflate(LayoutInflater.from(parent.getContext()), parent, false)\n                    );\n                }\n            }\n            case VIEW_TYPE_IMAGE -> {\n                if (gridView) {\n                    return new OCFileListViewHolder(\n                        GridImageBinding.inflate(LayoutInflater.from(parent.getContext()), parent, false)\n                    );\n                } else {\n                    return new OCFileListItemViewHolder(\n                        ListItemBinding.inflate(LayoutInflater.from(parent.getContext()), parent, false)\n                    );\n                }\n            }\n            case VIEW_TYPE_FOOTER -> {\n                return new OCFileListFooterViewHolder(\n                    ListFooterBinding.inflate(LayoutInflater.from(parent.getContext()), parent, false)\n                );\n            }\n            case VIEW_TYPE_HEADER -> {\n                ListHeaderBinding binding = ListHeaderBinding.inflate(\n                    LayoutInflater.from(parent.getContext()),\n                    parent,\n                    false);\n                ViewGroup.LayoutParams layoutParams = binding.headerView.getLayoutParams();\n                layoutParams.height = (int) (parent.getHeight() * 0.3);\n                binding.headerView.setLayoutParams(layoutParams);\n                return new OCFileListHeaderViewHolder(binding);\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n    let viewType = getViewType(for: indexPath)\n    switch viewType {\n    default:\n        if gridView {\n            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"GridItemCell\", for: indexPath) as! OCFileListGridItemViewHolder\n            // Configure cell with GridItemBinding\n            return cell\n        } else {\n            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"ListItemCell\", for: indexPath) as! OCFileListItemViewHolder\n            // Configure cell with ListItemBinding\n            return cell\n        }\n    case VIEW_TYPE_IMAGE:\n        if gridView {\n            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"GridImageCell\", for: indexPath) as! OCFileListViewHolder\n            // Configure cell with GridImageBinding\n            return cell\n        } else {\n            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"ListItemCell\", for: indexPath) as! OCFileListItemViewHolder\n            // Configure cell with ListItemBinding\n            return cell\n        }\n    case VIEW_TYPE_FOOTER:\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"ListFooterCell\", for: indexPath) as! OCFileListFooterViewHolder\n        // Configure cell with ListFooterBinding\n        return cell\n    case VIEW_TYPE_HEADER:\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"ListHeaderCell\", for: indexPath) as! OCFileListHeaderViewHolder\n        // Configure cell with ListHeaderBinding\n        if let layoutParams = cell.headerView?.layoutParams {\n            layoutParams.height = Int(collectionView.frame.height * 0.3)\n            cell.headerView?.layoutParams = layoutParams\n        }\n        return cell\n    }\n}\n```"
    },
    {
        "method_name": "onBindViewHolder",
        "method_code": "@Override\n    @SuppressFBWarnings(\"ITC_INHERITANCE_TYPE_CHECKING\")\n    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {\n        if (holder instanceof OCFileListFooterViewHolder footerViewHolder) {\n            footerViewHolder.getFooterText().setText(getFooterText());\n            viewThemeUtils.platform.colorCircularProgressBar(footerViewHolder.getLoadingProgressBar(), ColorRole.ON_SURFACE_VARIANT);\n            footerViewHolder.getLoadingProgressBar().setVisibility(\n                ocFileListFragmentInterface.isLoading() ? View.VISIBLE : View.GONE);\n        } else if (holder instanceof OCFileListHeaderViewHolder headerViewHolder) {\n            String text = currentDirectory.getRichWorkspace();\n\n            PreviewTextFragment.setText(headerViewHolder.getHeaderText(), text, null, activity, true, true, viewThemeUtils);\n            headerViewHolder.getHeaderView().setOnClickListener(v -> ocFileListFragmentInterface.onHeaderClicked());\n        } else {\n            ListViewHolder gridViewHolder = (ListViewHolder) holder;\n            OCFile file = getItem(position);\n\n            if (file == null) {\n                Log_OC.e(this, \"Cannot bind on view holder on a null file\");\n                return;\n            }\n\n            ocFileListDelegate.bindGridViewHolder(gridViewHolder, file, currentDirectory, searchType);\n            ViewExtensionsKt.setVisibleIf(gridViewHolder.getMore(), !isMultiSelect());\n            checkVisibilityOfFileFeaturesLayout(gridViewHolder);\n\n            if (holder instanceof ListItemViewHolder itemViewHolder) {\n                bindListItemViewHolder(itemViewHolder, file);\n            }\n\n            if (holder instanceof ListGridItemViewHolder gridItemViewHolder) {\n                bindListGridItemViewHolder(gridItemViewHolder, file);\n                ViewExtensionsKt.setVisibleIf(gridItemViewHolder.getMore(), !isMultiSelect());\n                checkVisibilityOfFileFeaturesLayout(gridItemViewHolder);\n            }\n\n            updateLivePhotoIndicators(gridViewHolder, file);\n\n            if (!MDMConfig.INSTANCE.sharingSupport(activity)) {\n                gridViewHolder.getShared().setVisibility(View.GONE);\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onBindViewHolder from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: onBindViewHolder\n\n        Method Code: @Override\n    @SuppressFBWarnings(\"ITC_INHERITANCE_TYPE_CHECKING\")\n    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {\n        if (holder instanceof OCFileListFooterViewHolder footerViewHolder) {\n            footerViewHolder.getFooterText().setText(getFooterText());\n            viewThemeUtils.platform.colorCircularProgressBar(footerViewHolder.getLoadingProgressBar(), ColorRole.ON_SURFACE_VARIANT);\n            footerViewHolder.getLoadingProgressBar().setVisibility(\n                ocFileListFragmentInterface.isLoading() ? View.VISIBLE : View.GONE);\n        } else if (holder instanceof OCFileListHeaderViewHolder headerViewHolder) {\n            String text = currentDirectory.getRichWorkspace();\n\n            PreviewTextFragment.setText(headerViewHolder.getHeaderText(), text, null, activity, true, true, viewThemeUtils);\n            headerViewHolder.getHeaderView().setOnClickListener(v -> ocFileListFragmentInterface.onHeaderClicked());\n        } else {\n            ListViewHolder gridViewHolder = (ListViewHolder) holder;\n            OCFile file = getItem(position);\n\n            if (file == null) {\n                Log_OC.e(this, \"Cannot bind on view holder on a null file\");\n                return;\n            }\n\n            ocFileListDelegate.bindGridViewHolder(gridViewHolder, file, currentDirectory, searchType);\n            ViewExtensionsKt.setVisibleIf(gridViewHolder.getMore(), !isMultiSelect());\n            checkVisibilityOfFileFeaturesLayout(gridViewHolder);\n\n            if (holder instanceof ListItemViewHolder itemViewHolder) {\n                bindListItemViewHolder(itemViewHolder, file);\n            }\n\n            if (holder instanceof ListGridItemViewHolder gridItemViewHolder) {\n                bindListGridItemViewHolder(gridItemViewHolder, file);\n                ViewExtensionsKt.setVisibleIf(gridItemViewHolder.getMore(), !isMultiSelect());\n                checkVisibilityOfFileFeaturesLayout(gridItemViewHolder);\n            }\n\n            updateLivePhotoIndicators(gridViewHolder, file);\n\n            if (!MDMConfig.INSTANCE.sharingSupport(activity)) {\n                gridViewHolder.getShared().setVisibility(View.GONE);\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onBindViewHolder(_ holder: RecyclerView.ViewHolder, position: Int) {\n    if let footerViewHolder = holder as? OCFileListFooterViewHolder {\n        footerViewHolder.getFooterText().text = getFooterText()\n        viewThemeUtils.platform.colorCircularProgressBar(footerViewHolder.getLoadingProgressBar(), colorRole: .onSurfaceVariant)\n        footerViewHolder.getLoadingProgressBar().visibility = ocFileListFragmentInterface.isLoading() ? .visible : .gone\n    } else if let headerViewHolder = holder as? OCFileListHeaderViewHolder {\n        let text = currentDirectory.getRichWorkspace()\n        PreviewTextFragment.setText(headerViewHolder.getHeaderText(), text, nil, activity, true, true, viewThemeUtils)\n        headerViewHolder.getHeaderView().setOnClickListener { _ in\n            ocFileListFragmentInterface.onHeaderClicked()\n        }\n    } else {\n        guard let gridViewHolder = holder as? ListViewHolder else { return }\n        guard let file = getItem(position) else {\n            Log_OC.e(self, \"Cannot bind on view holder on a null file\")\n            return\n        }\n\n        ocFileListDelegate.bindGridViewHolder(gridViewHolder, file, currentDirectory, searchType)\n        gridViewHolder.getMore().setVisibleIf(!isMultiSelect())\n        checkVisibilityOfFileFeaturesLayout(gridViewHolder)\n\n        if let itemViewHolder = holder as? ListItemViewHolder {\n            bindListItemViewHolder(itemViewHolder, file)\n        }\n\n        if let gridItemViewHolder = holder as? ListGridItemViewHolder {\n            bindListGridItemViewHolder(gridItemViewHolder, file)\n            gridItemViewHolder.getMore().setVisibleIf(!isMultiSelect())\n            checkVisibilityOfFileFeaturesLayout(gridItemViewHolder)\n        }\n\n        updateLivePhotoIndicators(gridViewHolder, file)\n\n        if !MDMConfig.INSTANCE.sharingSupport(activity) {\n            gridViewHolder.getShared().visibility = .gone\n        }\n    }\n}\n```"
    },
    {
        "method_name": "checkVisibilityOfFileFeaturesLayout",
        "method_code": "private void checkVisibilityOfFileFeaturesLayout(ListViewHolder holder) {\n        int fileFeaturesVisibility = View.GONE;\n        LinearLayout fileFeaturesLayout = holder.getFileFeaturesLayout();\n\n        if (fileFeaturesLayout == null) {\n            return;\n        }\n\n        for (int i = 0; i < fileFeaturesLayout.getChildCount(); i++) {\n            View child = fileFeaturesLayout.getChildAt(i);\n            if (child.getVisibility() == View.VISIBLE) {\n                fileFeaturesVisibility = View.VISIBLE;\n            }\n        }\n\n        fileFeaturesLayout.setVisibility(fileFeaturesVisibility);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled checkVisibilityOfFileFeaturesLayout from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: checkVisibilityOfFileFeaturesLayout\n\n        Method Code: private void checkVisibilityOfFileFeaturesLayout(ListViewHolder holder) {\n        int fileFeaturesVisibility = View.GONE;\n        LinearLayout fileFeaturesLayout = holder.getFileFeaturesLayout();\n\n        if (fileFeaturesLayout == null) {\n            return;\n        }\n\n        for (int i = 0; i < fileFeaturesLayout.getChildCount(); i++) {\n            View child = fileFeaturesLayout.getChildAt(i);\n            if (child.getVisibility() == View.VISIBLE) {\n                fileFeaturesVisibility = View.VISIBLE;\n            }\n        }\n\n        fileFeaturesLayout.setVisibility(fileFeaturesVisibility);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func checkVisibilityOfFileFeaturesLayout(holder: ListViewHolder) {\n    var fileFeaturesVisibility: Int = View.GONE\n    guard let fileFeaturesLayout = holder.getFileFeaturesLayout() else {\n        return\n    }\n\n    for i in 0..<fileFeaturesLayout.childCount {\n        let child = fileFeaturesLayout.getChildAt(i)\n        if child.visibility == View.VISIBLE {\n            fileFeaturesVisibility = View.VISIBLE\n        }\n    }\n\n    fileFeaturesLayout.visibility = fileFeaturesVisibility\n}\n```"
    },
    {
        "method_name": "mergeOCFilesForLivePhoto",
        "method_code": "private void mergeOCFilesForLivePhoto() {\n        List<OCFile> filesToRemove = new ArrayList<>();\n\n        for (int i = 0; i < mFiles.size(); i++) {\n            OCFile file = mFiles.get(i);\n\n            for (int j = i + 1; j < mFiles.size(); j++) {\n                OCFile nextFile = mFiles.get(j);\n                String fileLocalId = String.valueOf(file.getLocalId());\n                String nextFileLinkedLocalId = nextFile.getLinkedFileIdForLivePhoto();\n\n                if (fileLocalId.equals(nextFileLinkedLocalId)) {\n                    if (MimeTypeUtil.isVideo(file.getMimeType())) {\n                        nextFile.livePhotoVideo = file;\n                        filesToRemove.add(file);\n                    } else if (MimeTypeUtil.isVideo(nextFile.getMimeType())) {\n                        file.livePhotoVideo = nextFile;\n                        filesToRemove.add(nextFile);\n                    }\n                }\n            }\n        }\n\n        mFiles.removeAll(filesToRemove);\n        filesToRemove.clear();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled mergeOCFilesForLivePhoto from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: mergeOCFilesForLivePhoto\n\n        Method Code: private void mergeOCFilesForLivePhoto() {\n        List<OCFile> filesToRemove = new ArrayList<>();\n\n        for (int i = 0; i < mFiles.size(); i++) {\n            OCFile file = mFiles.get(i);\n\n            for (int j = i + 1; j < mFiles.size(); j++) {\n                OCFile nextFile = mFiles.get(j);\n                String fileLocalId = String.valueOf(file.getLocalId());\n                String nextFileLinkedLocalId = nextFile.getLinkedFileIdForLivePhoto();\n\n                if (fileLocalId.equals(nextFileLinkedLocalId)) {\n                    if (MimeTypeUtil.isVideo(file.getMimeType())) {\n                        nextFile.livePhotoVideo = file;\n                        filesToRemove.add(file);\n                    } else if (MimeTypeUtil.isVideo(nextFile.getMimeType())) {\n                        file.livePhotoVideo = nextFile;\n                        filesToRemove.add(nextFile);\n                    }\n                }\n            }\n        }\n\n        mFiles.removeAll(filesToRemove);\n        filesToRemove.clear();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func mergeOCFilesForLivePhoto() {\n    var filesToRemove: [OCFile] = []\n\n    for i in 0..<mFiles.count {\n        let file = mFiles[i]\n\n        for j in (i + 1)..<mFiles.count {\n            let nextFile = mFiles[j]\n            let fileLocalId = String(file.localId)\n            let nextFileLinkedLocalId = nextFile.linkedFileIdForLivePhoto()\n\n            if fileLocalId == nextFileLinkedLocalId {\n                if MimeTypeUtil.isVideo(file.mimeType) {\n                    nextFile.livePhotoVideo = file\n                    filesToRemove.append(file)\n                } else if MimeTypeUtil.isVideo(nextFile.mimeType) {\n                    file.livePhotoVideo = nextFile\n                    filesToRemove.append(nextFile)\n                }\n            }\n        }\n    }\n\n    mFiles.removeAll { filesToRemove.contains($0) }\n    filesToRemove.removeAll()\n}\n```"
    },
    {
        "method_name": "updateLivePhotoIndicators",
        "method_code": "private void updateLivePhotoIndicators(ListViewHolder holder, OCFile file) {\n        boolean isLivePhoto = file.getLinkedFileIdForLivePhoto() != null;\n\n        if (holder instanceof OCFileListItemViewHolder) {\n            holder.getLivePhotoIndicator().setVisibility(isLivePhoto ? (View.VISIBLE) : (View.GONE));\n            holder.getLivePhotoIndicatorSeparator().setVisibility(isLivePhoto ? (View.VISIBLE) : (View.GONE));\n        } else if (holder instanceof OCFileListViewHolder) {\n            holder.getGridLivePhotoIndicator().setVisibility(isLivePhoto ? (View.VISIBLE) : (View.GONE));\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled updateLivePhotoIndicators from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: updateLivePhotoIndicators\n\n        Method Code: private void updateLivePhotoIndicators(ListViewHolder holder, OCFile file) {\n        boolean isLivePhoto = file.getLinkedFileIdForLivePhoto() != null;\n\n        if (holder instanceof OCFileListItemViewHolder) {\n            holder.getLivePhotoIndicator().setVisibility(isLivePhoto ? (View.VISIBLE) : (View.GONE));\n            holder.getLivePhotoIndicatorSeparator().setVisibility(isLivePhoto ? (View.VISIBLE) : (View.GONE));\n        } else if (holder instanceof OCFileListViewHolder) {\n            holder.getGridLivePhotoIndicator().setVisibility(isLivePhoto ? (View.VISIBLE) : (View.GONE));\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func updateLivePhotoIndicators(holder: ListViewHolder, file: OCFile) {\n    let isLivePhoto = file.getLinkedFileIdForLivePhoto() != nil\n\n    if let holder = holder as? OCFileListItemViewHolder {\n        holder.getLivePhotoIndicator().isHidden = !isLivePhoto\n        holder.getLivePhotoIndicatorSeparator().isHidden = !isLivePhoto\n    } else if let holder = holder as? OCFileListViewHolder {\n        holder.getGridLivePhotoIndicator().isHidden = !isLivePhoto\n    }\n}\n```"
    },
    {
        "method_name": "bindListGridItemViewHolder",
        "method_code": "private void bindListGridItemViewHolder(ListGridItemViewHolder holder, OCFile file) {\n        holder.getFileName().setText(mStorageManager.getFilenameConsideringOfflineOperation(file));\n\n        boolean gridImage = MimeTypeUtil.isImage(file) || MimeTypeUtil.isVideo(file);\n        if (gridView && gridImage) {\n            holder.getFileName().setVisibility(View.GONE);\n        } else {\n            if (gridView && ocFileListFragmentInterface.getColumnsCount() > showFilenameColumnThreshold) {\n                holder.getFileName().setVisibility(View.GONE);\n            } else {\n                holder.getFileName().setVisibility(View.VISIBLE);\n            }\n        }\n\n        configureThumbnail(holder, file);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled bindListGridItemViewHolder from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: bindListGridItemViewHolder\n\n        Method Code: private void bindListGridItemViewHolder(ListGridItemViewHolder holder, OCFile file) {\n        holder.getFileName().setText(mStorageManager.getFilenameConsideringOfflineOperation(file));\n\n        boolean gridImage = MimeTypeUtil.isImage(file) || MimeTypeUtil.isVideo(file);\n        if (gridView && gridImage) {\n            holder.getFileName().setVisibility(View.GONE);\n        } else {\n            if (gridView && ocFileListFragmentInterface.getColumnsCount() > showFilenameColumnThreshold) {\n                holder.getFileName().setVisibility(View.GONE);\n            } else {\n                holder.getFileName().setVisibility(View.VISIBLE);\n            }\n        }\n\n        configureThumbnail(holder, file);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func bindListGridItemViewHolder(holder: ListGridItemViewHolder, file: OCFile) {\n    holder.getFileName().text = mStorageManager.getFilenameConsideringOfflineOperation(file)\n\n    let gridImage = MimeTypeUtil.isImage(file) || MimeTypeUtil.isVideo(file)\n    if gridView && gridImage {\n        holder.getFileName().isHidden = true\n    } else {\n        if gridView && ocFileListFragmentInterface.getColumnsCount() > showFilenameColumnThreshold {\n            holder.getFileName().isHidden = true\n        } else {\n            holder.getFileName().isHidden = false\n        }\n    }\n\n    configureThumbnail(holder: holder, file: file)\n}\n```"
    },
    {
        "method_name": "bindListItemViewHolder",
        "method_code": "private void bindListItemViewHolder(ListItemViewHolder holder, OCFile file) {\n        if ((file.isSharedWithMe() || file.isSharedWithSharee()) && !isMultiSelect() && !gridView &&\n            !hideItemOptions) {\n            holder.getSharedAvatars().setVisibility(View.VISIBLE);\n            holder.getSharedAvatars().removeAllViews();\n\n            String fileOwner = file.getOwnerId();\n            List<ShareeUser> sharees = file.getSharees();\n\n            // use fileOwner if not oneself, then add at first\n            ShareeUser fileOwnerSharee = new ShareeUser(fileOwner, file.getOwnerDisplayName(), ShareType.USER);\n            if (!TextUtils.isEmpty(fileOwner) &&\n                !fileOwner.equals(userId) &&\n                !sharees.contains(fileOwnerSharee)) {\n                sharees.add(fileOwnerSharee);\n            }\n\n            Collections.reverse(sharees);\n\n            Log_OC.d(this, \"sharees of \" + file.getFileName() + \": \" + sharees);\n\n            holder.getSharedAvatars().setAvatars(user, sharees, viewThemeUtils);\n            holder.getSharedAvatars().setOnClickListener(\n                view -> ocFileListFragmentInterface.onShareIconClick(file));\n        } else {\n            holder.getSharedAvatars().setVisibility(View.GONE);\n            holder.getSharedAvatars().removeAllViews();\n        }\n\n        // tags\n        if (file.getTags().isEmpty()) {\n            holder.getTagsGroup().setVisibility(View.GONE);\n            holder.getFileDetailGroup().setVisibility(View.VISIBLE);\n        } else {\n            holder.getTagsGroup().setVisibility(View.VISIBLE);\n            holder.getFileDetailGroup().setVisibility(View.GONE);\n            viewThemeUtils.material.themeChipSuggestion(holder.getFirstTag());\n            holder.getFirstTag().setVisibility(View.VISIBLE);\n            holder.getSecondTag().setVisibility(View.GONE);\n            holder.getTagMore().setVisibility(View.GONE);\n\n            holder.getFirstTag().setText(file.getTags().get(0));\n\n            if (file.getTags().size() > 1) {\n                viewThemeUtils.material.themeChipSuggestion(holder.getSecondTag());\n                holder.getSecondTag().setVisibility(View.VISIBLE);\n                holder.getSecondTag().setText(file.getTags().get(1));\n            }\n\n            if (file.getTags().size() > 2) {\n                viewThemeUtils.material.themeChipSuggestion(holder.getTagMore());\n                holder.getTagMore().setVisibility(View.VISIBLE);\n                holder.getTagMore().setText(String.format(activity.getString(R.string.tags_more),\n                                                          (file.getTags().size() - 2)));\n            }\n        }\n\n        // npe fix: looks like file without local storage path somehow get here\n        final String storagePath = file.getStoragePath();\n        if (onlyOnDevice && storagePath != null) {\n            File localFile = new File(storagePath);\n            long localSize;\n            if (localFile.isDirectory()) {\n                localSize = FileStorageUtils.getFolderSize(localFile);\n            } else {\n                localSize = localFile.length();\n            }\n\n            prepareFileSize(holder, file, localSize);\n        } else {\n            final long fileLength = file.getFileLength();\n            if (fileLength >= 0) {\n                prepareFileSize(holder, file, fileLength);\n            } else {\n                holder.getFileSize().setVisibility(View.GONE);\n                holder.getFileSizeSeparator().setVisibility(View.GONE);\n            }\n        }\n\n        final long modificationTimestamp = file.getModificationTimestamp();\n        if (modificationTimestamp > 0) {\n            holder.getLastModification().setText(DisplayUtils.getRelativeTimestamp(activity,\n                                                                                   modificationTimestamp));\n            holder.getLastModification().setVisibility(View.VISIBLE);\n        } else if (file.getFirstShareTimestamp() > 0) {\n            holder.getLastModification().setText(\n                DisplayUtils.getRelativeTimestamp(activity, file.getFirstShareTimestamp())\n                                                );\n            holder.getLastModification().setVisibility(View.VISIBLE);\n        } else {\n            holder.getLastModification().setVisibility(View.GONE);\n        }\n\n        if (isMultiSelect() || gridView || hideItemOptions) {\n            holder.getOverflowMenu().setVisibility(View.GONE);\n        } else {\n            holder.getOverflowMenu().setVisibility(View.VISIBLE);\n            holder.getOverflowMenu().setOnClickListener(view -> ocFileListFragmentInterface\n                .onOverflowIconClicked(file, view));\n        }\n\n        if (file.isLocked()) {\n            holder.getOverflowMenu().setImageResource(R.drawable.ic_locked_dots_small);\n        } else {\n            holder.getOverflowMenu().setImageResource(R.drawable.ic_dots_vertical);\n        }\n\n        configureThumbnail(holder, file);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled bindListItemViewHolder from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: bindListItemViewHolder\n\n        Method Code: private void bindListItemViewHolder(ListItemViewHolder holder, OCFile file) {\n        if ((file.isSharedWithMe() || file.isSharedWithSharee()) && !isMultiSelect() && !gridView &&\n            !hideItemOptions) {\n            holder.getSharedAvatars().setVisibility(View.VISIBLE);\n            holder.getSharedAvatars().removeAllViews();\n\n            String fileOwner = file.getOwnerId();\n            List<ShareeUser> sharees = file.getSharees();\n\n            // use fileOwner if not oneself, then add at first\n            ShareeUser fileOwnerSharee = new ShareeUser(fileOwner, file.getOwnerDisplayName(), ShareType.USER);\n            if (!TextUtils.isEmpty(fileOwner) &&\n                !fileOwner.equals(userId) &&\n                !sharees.contains(fileOwnerSharee)) {\n                sharees.add(fileOwnerSharee);\n            }\n\n            Collections.reverse(sharees);\n\n            Log_OC.d(this, \"sharees of \" + file.getFileName() + \": \" + sharees);\n\n            holder.getSharedAvatars().setAvatars(user, sharees, viewThemeUtils);\n            holder.getSharedAvatars().setOnClickListener(\n                view -> ocFileListFragmentInterface.onShareIconClick(file));\n        } else {\n            holder.getSharedAvatars().setVisibility(View.GONE);\n            holder.getSharedAvatars().removeAllViews();\n        }\n\n        // tags\n        if (file.getTags().isEmpty()) {\n            holder.getTagsGroup().setVisibility(View.GONE);\n            holder.getFileDetailGroup().setVisibility(View.VISIBLE);\n        } else {\n            holder.getTagsGroup().setVisibility(View.VISIBLE);\n            holder.getFileDetailGroup().setVisibility(View.GONE);\n            viewThemeUtils.material.themeChipSuggestion(holder.getFirstTag());\n            holder.getFirstTag().setVisibility(View.VISIBLE);\n            holder.getSecondTag().setVisibility(View.GONE);\n            holder.getTagMore().setVisibility(View.GONE);\n\n            holder.getFirstTag().setText(file.getTags().get(0));\n\n            if (file.getTags().size() > 1) {\n                viewThemeUtils.material.themeChipSuggestion(holder.getSecondTag());\n                holder.getSecondTag().setVisibility(View.VISIBLE);\n                holder.getSecondTag().setText(file.getTags().get(1));\n            }\n\n            if (file.getTags().size() > 2) {\n                viewThemeUtils.material.themeChipSuggestion(holder.getTagMore());\n                holder.getTagMore().setVisibility(View.VISIBLE);\n                holder.getTagMore().setText(String.format(activity.getString(R.string.tags_more),\n                                                          (file.getTags().size() - 2)));\n            }\n        }\n\n        // npe fix: looks like file without local storage path somehow get here\n        final String storagePath = file.getStoragePath();\n        if (onlyOnDevice && storagePath != null) {\n            File localFile = new File(storagePath);\n            long localSize;\n            if (localFile.isDirectory()) {\n                localSize = FileStorageUtils.getFolderSize(localFile);\n            } else {\n                localSize = localFile.length();\n            }\n\n            prepareFileSize(holder, file, localSize);\n        } else {\n            final long fileLength = file.getFileLength();\n            if (fileLength >= 0) {\n                prepareFileSize(holder, file, fileLength);\n            } else {\n                holder.getFileSize().setVisibility(View.GONE);\n                holder.getFileSizeSeparator().setVisibility(View.GONE);\n            }\n        }\n\n        final long modificationTimestamp = file.getModificationTimestamp();\n        if (modificationTimestamp > 0) {\n            holder.getLastModification().setText(DisplayUtils.getRelativeTimestamp(activity,\n                                                                                   modificationTimestamp));\n            holder.getLastModification().setVisibility(View.VISIBLE);\n        } else if (file.getFirstShareTimestamp() > 0) {\n            holder.getLastModification().setText(\n                DisplayUtils.getRelativeTimestamp(activity, file.getFirstShareTimestamp())\n                                                );\n            holder.getLastModification().setVisibility(View.VISIBLE);\n        } else {\n            holder.getLastModification().setVisibility(View.GONE);\n        }\n\n        if (isMultiSelect() || gridView || hideItemOptions) {\n            holder.getOverflowMenu().setVisibility(View.GONE);\n        } else {\n            holder.getOverflowMenu().setVisibility(View.VISIBLE);\n            holder.getOverflowMenu().setOnClickListener(view -> ocFileListFragmentInterface\n                .onOverflowIconClicked(file, view));\n        }\n\n        if (file.isLocked()) {\n            holder.getOverflowMenu().setImageResource(R.drawable.ic_locked_dots_small);\n        } else {\n            holder.getOverflowMenu().setImageResource(R.drawable.ic_dots_vertical);\n        }\n\n        configureThumbnail(holder, file);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func bindListItemViewHolder(holder: ListItemViewHolder, file: OCFile) {\n    if (file.isSharedWithMe() || file.isSharedWithSharee()) && !isMultiSelect() && !gridView && !hideItemOptions {\n        holder.getSharedAvatars().isHidden = false\n        holder.getSharedAvatars().removeAllSubviews()\n\n        let fileOwner = file.getOwnerId()\n        var sharees = file.getSharees()\n\n        let fileOwnerSharee = ShareeUser(id: fileOwner, displayName: file.getOwnerDisplayName(), type: .user)\n        if !fileOwner.isEmpty && fileOwner != userId && !sharees.contains(fileOwnerSharee) {\n            sharees.append(fileOwnerSharee)\n        }\n\n        sharees.reverse()\n\n        Log_OC.d(self, \"sharees of \\(file.getFileName()): \\(sharees)\")\n\n        holder.getSharedAvatars().setAvatars(user: user, sharees: sharees, themeUtils: viewThemeUtils)\n        holder.getSharedAvatars().onClick { [weak self] in\n            self?.ocFileListFragmentInterface.onShareIconClick(file: file)\n        }\n    } else {\n        holder.getSharedAvatars().isHidden = true\n        holder.getSharedAvatars().removeAllSubviews()\n    }\n\n    if file.getTags().isEmpty {\n        holder.getTagsGroup().isHidden = true\n        holder.getFileDetailGroup().isHidden = false\n    } else {\n        holder.getTagsGroup().isHidden = false\n        holder.getFileDetailGroup().isHidden = true\n        viewThemeUtils.material.themeChipSuggestion(holder.getFirstTag())\n        holder.getFirstTag().isHidden = false\n        holder.getSecondTag().isHidden = true\n        holder.getTagMore().isHidden = true\n\n        holder.getFirstTag().text = file.getTags()[0]\n\n        if file.getTags().count > 1 {\n            viewThemeUtils.material.themeChipSuggestion(holder.getSecondTag())\n            holder.getSecondTag().isHidden = false\n            holder.getSecondTag().text = file.getTags()[1]\n        }\n\n        if file.getTags().count > 2 {\n            viewThemeUtils.material.themeChipSuggestion(holder.getTagMore())\n            holder.getTagMore().isHidden = false\n            holder.getTagMore().text = String(format: activity.getString(R.string.tags_more), file.getTags().count - 2)\n        }\n    }\n\n    let storagePath = file.getStoragePath()\n    if onlyOnDevice, let storagePath = storagePath {\n        let localFile = FileManager.default.fileExists(atPath: storagePath)\n        let localSize: Int64\n        if localFile.isDirectory {\n            localSize = FileStorageUtils.getFolderSize(localFile)\n        } else {\n            localSize = localFile.length\n        }\n\n        prepareFileSize(holder: holder, file: file, size: localSize)\n    } else {\n        let fileLength = file.getFileLength()\n        if fileLength >= 0 {\n            prepareFileSize(holder: holder, file: file, size: fileLength)\n        } else {\n            holder.getFileSize().isHidden = true\n            holder.getFileSizeSeparator().isHidden = true\n        }\n    }\n\n    let modificationTimestamp = file.getModificationTimestamp()\n    if modificationTimestamp > 0 {\n        holder.getLastModification().text = DisplayUtils.getRelativeTimestamp(activity: activity, timestamp: modificationTimestamp)\n        holder.getLastModification().isHidden = false\n    } else if file.getFirstShareTimestamp() > 0 {\n        holder.getLastModification().text = DisplayUtils.getRelativeTimestamp(activity: activity, timestamp: file.getFirstShareTimestamp())\n        holder.getLastModification().isHidden = false\n    } else {\n        holder.getLastModification().isHidden = true\n    }\n\n    if isMultiSelect() || gridView || hideItemOptions {\n        holder.getOverflowMenu().isHidden = true\n    } else {\n        holder.getOverflowMenu().isHidden = false\n        holder.getOverflowMenu().onClick { [weak self] in\n            self?.ocFileListFragmentInterface.onOverflowIconClicked(file: file, view: holder.getOverflowMenu())\n        }\n    }\n\n    if file.isLocked() {\n        holder.getOverflowMenu().setImage(UIImage(named: \"ic_locked_dots_small\"))\n    } else {\n        holder.getOverflowMenu().setImage(UIImage(named: \"ic_dots_vertical\"))\n    }\n\n    configureThumbnail(holder: holder, file: file)\n}\n```"
    },
    {
        "method_name": "prepareFileSize",
        "method_code": "private void prepareFileSize(ListItemViewHolder holder, OCFile file, long size) {\n        holder.getFileSize().setVisibility(View.VISIBLE);\n        String fileSizeText = getFileSizeText(file, size);\n        holder.getFileSize().setText(fileSizeText);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled prepareFileSize from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: prepareFileSize\n\n        Method Code: private void prepareFileSize(ListItemViewHolder holder, OCFile file, long size) {\n        holder.getFileSize().setVisibility(View.VISIBLE);\n        String fileSizeText = getFileSizeText(file, size);\n        holder.getFileSize().setText(fileSizeText);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func prepareFileSize(holder: ListItemViewHolder, file: OCFile, size: Int64) {\n    holder.getFileSize().isHidden = false\n    let fileSizeText = getFileSizeText(file: file, size: size)\n    holder.getFileSize().text = fileSizeText\n}\n```"
    },
    {
        "method_name": "getFileSizeText",
        "method_code": "private String getFileSizeText(OCFile file, long size) {\n        if (!file.isOfflineOperation()) {\n            return DisplayUtils.bytesToHumanReadable(size);\n        }\n\n        OfflineOperationEntity entity = mStorageManager.getOfflineEntityFromOCFile(file);\n        boolean isRemoveOperation = (entity != null && entity.getType() instanceof OfflineOperationType.RemoveFile);\n        if (isRemoveOperation) {\n            return activity.getString(R.string.oc_file_list_adapter_offline_operation_remove_description_text);\n        }\n\n        return activity.getString(R.string.oc_file_list_adapter_offline_operation_description_text);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getFileSizeText from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getFileSizeText\n\n        Method Code: private String getFileSizeText(OCFile file, long size) {\n        if (!file.isOfflineOperation()) {\n            return DisplayUtils.bytesToHumanReadable(size);\n        }\n\n        OfflineOperationEntity entity = mStorageManager.getOfflineEntityFromOCFile(file);\n        boolean isRemoveOperation = (entity != null && entity.getType() instanceof OfflineOperationType.RemoveFile);\n        if (isRemoveOperation) {\n            return activity.getString(R.string.oc_file_list_adapter_offline_operation_remove_description_text);\n        }\n\n        return activity.getString(R.string.oc_file_list_adapter_offline_operation_description_text);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getFileSizeText(file: OCFile, size: Int64) -> String {\n    if !file.isOfflineOperation() {\n        return DisplayUtils.bytesToHumanReadable(size)\n    }\n\n    let entity = mStorageManager.getOfflineEntityFromOCFile(file)\n    let isRemoveOperation = (entity != nil && entity?.type is OfflineOperationType.RemoveFile)\n    if isRemoveOperation {\n        return activity.getString(R.string.oc_file_list_adapter_offline_operation_remove_description_text)\n    }\n\n    return activity.getString(R.string.oc_file_list_adapter_offline_operation_description_text)\n}\n```"
    },
    {
        "method_name": "configureThumbnail",
        "method_code": "private void configureThumbnail(ListViewHolder holder, OCFile file) {\n        final var context = MainApp.getAppContext();\n\n        if (file.isOfflineOperation()) {\n            if (file.isFolder()) {\n                Drawable icon = ContextCompat.getDrawable(context, R.drawable.ic_folder_offline);\n                holder.getThumbnail().setImageDrawable(icon);\n            } else {\n                executorService.execute(() -> {\n                    OfflineOperationEntity entity = mStorageManager.offlineOperationDao.getByPath(file.getDecryptedRemotePath());\n\n                    if (entity != null && entity.getType() != null && entity.getType() instanceof OfflineOperationType.CreateFile createFileOperation) {\n                        Bitmap bitmap = BitmapUtils.decodeSampledBitmapFromFile(createFileOperation.getLocalPath(), holder.getThumbnail().getWidth(), holder.getThumbnail().getHeight());\n                        if (bitmap == null) return;\n\n                        Bitmap thumbnail = BitmapUtils.addColorFilter(bitmap, Color.GRAY,100);\n                        mainHandler.post(() -> holder.getThumbnail().setImageBitmap(thumbnail));\n                    }\n                });\n            }\n        } else {\n            boolean isAutoUpload = SyncedFolderProvider.isAutoUploadFolder(syncedFolderProvider, file, user);\n            boolean isDarkModeActive = preferences.isDarkModeEnabled();\n            Drawable icon = MimeTypeUtil.getOCFileIcon(file, context, viewThemeUtils, isAutoUpload, isDarkModeActive);\n            holder.getThumbnail().setImageDrawable(icon);\n\n            if (!file.isFolder()) {\n                ViewExtensionsKt.makeRounded(holder.getThumbnail(), context, 4);\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled configureThumbnail from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: configureThumbnail\n\n        Method Code: private void configureThumbnail(ListViewHolder holder, OCFile file) {\n        final var context = MainApp.getAppContext();\n\n        if (file.isOfflineOperation()) {\n            if (file.isFolder()) {\n                Drawable icon = ContextCompat.getDrawable(context, R.drawable.ic_folder_offline);\n                holder.getThumbnail().setImageDrawable(icon);\n            } else {\n                executorService.execute(() -> {\n                    OfflineOperationEntity entity = mStorageManager.offlineOperationDao.getByPath(file.getDecryptedRemotePath());\n\n                    if (entity != null && entity.getType() != null && entity.getType() instanceof OfflineOperationType.CreateFile createFileOperation) {\n                        Bitmap bitmap = BitmapUtils.decodeSampledBitmapFromFile(createFileOperation.getLocalPath(), holder.getThumbnail().getWidth(), holder.getThumbnail().getHeight());\n                        if (bitmap == null) return;\n\n                        Bitmap thumbnail = BitmapUtils.addColorFilter(bitmap, Color.GRAY,100);\n                        mainHandler.post(() -> holder.getThumbnail().setImageBitmap(thumbnail));\n                    }\n                });\n            }\n        } else {\n            boolean isAutoUpload = SyncedFolderProvider.isAutoUploadFolder(syncedFolderProvider, file, user);\n            boolean isDarkModeActive = preferences.isDarkModeEnabled();\n            Drawable icon = MimeTypeUtil.getOCFileIcon(file, context, viewThemeUtils, isAutoUpload, isDarkModeActive);\n            holder.getThumbnail().setImageDrawable(icon);\n\n            if (!file.isFolder()) {\n                ViewExtensionsKt.makeRounded(holder.getThumbnail(), context, 4);\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func configureThumbnail(holder: ListViewHolder, file: OCFile) {\n    let context = MainApp.getAppContext()\n\n    if file.isOfflineOperation() {\n        if file.isFolder() {\n            let icon = UIImage(named: \"ic_folder_offline\")\n            holder.getThumbnail().image = icon\n        } else {\n            executorService.execute {\n                if let entity = mStorageManager.offlineOperationDao.getByPath(file.getDecryptedRemotePath()),\n                   let createFileOperation = entity.getType() as? OfflineOperationType.CreateFile {\n                    if let bitmap = BitmapUtils.decodeSampledBitmapFromFile(createFileOperation.getLocalPath(), holder.getThumbnail().frame.width, holder.getThumbnail().frame.height) {\n                        let thumbnail = BitmapUtils.addColorFilter(bitmap, UIColor.gray, 100)\n                        mainHandler.post {\n                            holder.getThumbnail().image = thumbnail\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        let isAutoUpload = SyncedFolderProvider.isAutoUploadFolder(syncedFolderProvider, file, user)\n        let isDarkModeActive = preferences.isDarkModeEnabled()\n        let icon = MimeTypeUtil.getOCFileIcon(file, context, viewThemeUtils, isAutoUpload, isDarkModeActive)\n        holder.getThumbnail().image = icon\n\n        if !file.isFolder() {\n            holder.getThumbnail().makeRounded(context: context, radius: 4)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "onDestroy",
        "method_code": "public void onDestroy() {\n        executorService.shutdown();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onDestroy from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: onDestroy\n\n        Method Code: public void onDestroy() {\n        executorService.shutdown();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onDestroy() {\n    executorService.shutdown()\n}\n```"
    },
    {
        "method_name": "onViewAttachedToWindow",
        "method_code": "@Override\n    public void onViewAttachedToWindow(@NonNull RecyclerView.ViewHolder holder) {\n        if (holder instanceof ListViewHolder) {\n            LoaderImageView thumbnailShimmer = ((ListViewHolder) holder).getShimmerThumbnail();\n            if (thumbnailShimmer.getVisibility() == View.VISIBLE) {\n                thumbnailShimmer.setImageResource(R.drawable.background);\n                thumbnailShimmer.resetLoader();\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onViewAttachedToWindow from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: onViewAttachedToWindow\n\n        Method Code: @Override\n    public void onViewAttachedToWindow(@NonNull RecyclerView.ViewHolder holder) {\n        if (holder instanceof ListViewHolder) {\n            LoaderImageView thumbnailShimmer = ((ListViewHolder) holder).getShimmerThumbnail();\n            if (thumbnailShimmer.getVisibility() == View.VISIBLE) {\n                thumbnailShimmer.setImageResource(R.drawable.background);\n                thumbnailShimmer.resetLoader();\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onViewAttachedToWindow(_ holder: UICollectionViewCell) {\n    if let listViewHolder = holder as? ListViewHolder {\n        let thumbnailShimmer = listViewHolder.getShimmerThumbnail()\n        if thumbnailShimmer.visibility == .visible {\n            thumbnailShimmer.image = UIImage(named: \"background\")\n            thumbnailShimmer.resetLoader()\n        }\n    }\n}\n```"
    },
    {
        "method_name": "getFooterText",
        "method_code": "private String getFooterText() {\n        int filesCount = 0;\n        int foldersCount = 0;\n        int count = mFiles.size();\n        OCFile file;\n        final boolean showHiddenFiles = preferences.isShowHiddenFilesEnabled();\n        for (int i = 0; i < count; i++) {\n            file = mFiles.get(i);\n            if (file.isFolder()) {\n                foldersCount++;\n            } else {\n                if (!file.isHidden() || showHiddenFiles) {\n                    filesCount++;\n                }\n            }\n        }\n\n        return generateFooterText(filesCount, foldersCount);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getFooterText from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getFooterText\n\n        Method Code: private String getFooterText() {\n        int filesCount = 0;\n        int foldersCount = 0;\n        int count = mFiles.size();\n        OCFile file;\n        final boolean showHiddenFiles = preferences.isShowHiddenFilesEnabled();\n        for (int i = 0; i < count; i++) {\n            file = mFiles.get(i);\n            if (file.isFolder()) {\n                foldersCount++;\n            } else {\n                if (!file.isHidden() || showHiddenFiles) {\n                    filesCount++;\n                }\n            }\n        }\n\n        return generateFooterText(filesCount, foldersCount);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getFooterText() -> String {\n    var filesCount = 0\n    var foldersCount = 0\n    let count = mFiles.count\n    let showHiddenFiles = preferences.isShowHiddenFilesEnabled()\n    for i in 0..<count {\n        let file = mFiles[i]\n        if file.isFolder() {\n            foldersCount += 1\n        } else {\n            if !file.isHidden() || showHiddenFiles {\n                filesCount += 1\n            }\n        }\n    }\n    \n    return generateFooterText(filesCount: filesCount, foldersCount: foldersCount)\n}\n```"
    },
    {
        "method_name": "generateFooterText",
        "method_code": "private String generateFooterText(int filesCount, int foldersCount) {\n        String output;\n        Resources resources = activity.getResources();\n\n        if (filesCount + foldersCount <= 0) {\n            output = \"\";\n        } else if (foldersCount <= 0) {\n            output = resources.getQuantityString(R.plurals.file_list__footer__file, filesCount, filesCount);\n        } else if (filesCount <= 0) {\n            output = resources.getQuantityString(R.plurals.file_list__footer__folder, foldersCount, foldersCount);\n        } else {\n            output = resources.getQuantityString(R.plurals.file_list__footer__file, filesCount, filesCount) + \", \" +\n                resources.getQuantityString(R.plurals.file_list__footer__folder, foldersCount, foldersCount);\n        }\n\n        return output;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled generateFooterText from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: generateFooterText\n\n        Method Code: private String generateFooterText(int filesCount, int foldersCount) {\n        String output;\n        Resources resources = activity.getResources();\n\n        if (filesCount + foldersCount <= 0) {\n            output = \"\";\n        } else if (foldersCount <= 0) {\n            output = resources.getQuantityString(R.plurals.file_list__footer__file, filesCount, filesCount);\n        } else if (filesCount <= 0) {\n            output = resources.getQuantityString(R.plurals.file_list__footer__folder, foldersCount, foldersCount);\n        } else {\n            output = resources.getQuantityString(R.plurals.file_list__footer__file, filesCount, filesCount) + \", \" +\n                resources.getQuantityString(R.plurals.file_list__footer__folder, foldersCount, foldersCount);\n        }\n\n        return output;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func generateFooterText(filesCount: Int, foldersCount: Int) -> String {\n    var output: String\n    let resources = activity.resources\n\n    if filesCount + foldersCount <= 0 {\n        output = \"\"\n    } else if foldersCount <= 0 {\n        output = resources.localizedStringWithFormat(NSLocalizedString(\"file_list__footer__file\", comment: \"\"), filesCount)\n    } else if filesCount <= 0 {\n        output = resources.localizedStringWithFormat(NSLocalizedString(\"file_list__footer__folder\", comment: \"\"), foldersCount)\n    } else {\n        output = resources.localizedStringWithFormat(NSLocalizedString(\"file_list__footer__file\", comment: \"\"), filesCount) + \", \" +\n            resources.localizedStringWithFormat(NSLocalizedString(\"file_list__footer__folder\", comment: \"\"), foldersCount)\n    }\n\n    return output\n}\n```"
    },
    {
        "method_name": "shouldShowHeader",
        "method_code": "public boolean shouldShowHeader() {\n        if (currentDirectory == null) {\n            return false;\n        }\n\n        if (MainApp.isOnlyOnDevice()) {\n            return false;\n        }\n\n        if (currentDirectory.getRichWorkspace() == null) {\n            return false;\n        }\n\n        return !TextUtils.isEmpty(currentDirectory.getRichWorkspace().trim());\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled shouldShowHeader from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: shouldShowHeader\n\n        Method Code: public boolean shouldShowHeader() {\n        if (currentDirectory == null) {\n            return false;\n        }\n\n        if (MainApp.isOnlyOnDevice()) {\n            return false;\n        }\n\n        if (currentDirectory.getRichWorkspace() == null) {\n            return false;\n        }\n\n        return !TextUtils.isEmpty(currentDirectory.getRichWorkspace().trim());\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc shouldShowHeader() -> Bool {\n    if currentDirectory == nil {\n        return false\n    }\n\n    if MainApp.isOnlyOnDevice() {\n        return false\n    }\n\n    if currentDirectory?.getRichWorkspace() == nil {\n        return false\n    }\n\n    return !(currentDirectory?.getRichWorkspace().trimmingCharacters(in: .whitespacesAndNewlines).isEmpty ?? true)\n}\n```"
    },
    {
        "method_name": "swapDirectory",
        "method_code": "@SuppressLint(\"NotifyDataSetChanged\")\n    public void swapDirectory(\n        @NonNull User account,\n        @NonNull OCFile directory,\n        @NonNull FileDataStorageManager updatedStorageManager,\n        boolean onlyOnDevice,\n        @NonNull String limitToMimeType) {\n        this.onlyOnDevice = onlyOnDevice;\n\n        if (!updatedStorageManager.equals(mStorageManager)) {\n            mStorageManager = updatedStorageManager;\n            ocFileListDelegate.setShowShareAvatar(CapabilityUtils.getCapability(account, activity).getVersion().isShareesOnDavSupported());\n            this.user = account;\n        }\n        if (mStorageManager != null) {\n            // TODO refactor filtering mechanism for mFiles\n            mFiles = mStorageManager.getFolderContent(directory, onlyOnDevice);\n            if (!preferences.isShowHiddenFilesEnabled()) {\n                mFiles = filterHiddenFiles(mFiles);\n            }\n            if (!limitToMimeType.isEmpty()) {\n                mFiles = filterByMimeType(mFiles, limitToMimeType);\n            }\n            if (OCFile.ROOT_PATH.equals(directory.getRemotePath()) && MainApp.isOnlyPersonFiles()) {\n                mFiles = limitToPersonalFiles(mFiles);\n            }\n\n            // TODO refactor add DrawerState instead of using static menuItemId\n            if (DrawerActivity.menuItemId == R.id.nav_shared && currentDirectory != null) {\n                mFiles = updatedStorageManager.filter(currentDirectory, OCFileFilterType.Shared);\n            }\n            if (DrawerActivity.menuItemId == R.id.nav_favorites && currentDirectory != null) {\n                mFiles = updatedStorageManager.filter(currentDirectory, OCFileFilterType.Favorite);\n            }\n\n            sortOrder = preferences.getSortOrderByFolder(directory);\n            mFiles = sortOrder.sortCloudFiles(mFiles);\n            prepareListOfHiddenFiles();\n            mergeOCFilesForLivePhoto();\n            mFilesAll.clear();\n            addOfflineOperations(directory.getFileId());\n            mFilesAll.addAll(mFiles);\n            currentDirectory = directory;\n        } else {\n            mFiles.clear();\n            mFilesAll.clear();\n        }\n\n        searchType = null;\n        notifyDataSetChanged();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled swapDirectory from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: swapDirectory\n\n        Method Code: @SuppressLint(\"NotifyDataSetChanged\")\n    public void swapDirectory(\n        @NonNull User account,\n        @NonNull OCFile directory,\n        @NonNull FileDataStorageManager updatedStorageManager,\n        boolean onlyOnDevice,\n        @NonNull String limitToMimeType) {\n        this.onlyOnDevice = onlyOnDevice;\n\n        if (!updatedStorageManager.equals(mStorageManager)) {\n            mStorageManager = updatedStorageManager;\n            ocFileListDelegate.setShowShareAvatar(CapabilityUtils.getCapability(account, activity).getVersion().isShareesOnDavSupported());\n            this.user = account;\n        }\n        if (mStorageManager != null) {\n            // TODO refactor filtering mechanism for mFiles\n            mFiles = mStorageManager.getFolderContent(directory, onlyOnDevice);\n            if (!preferences.isShowHiddenFilesEnabled()) {\n                mFiles = filterHiddenFiles(mFiles);\n            }\n            if (!limitToMimeType.isEmpty()) {\n                mFiles = filterByMimeType(mFiles, limitToMimeType);\n            }\n            if (OCFile.ROOT_PATH.equals(directory.getRemotePath()) && MainApp.isOnlyPersonFiles()) {\n                mFiles = limitToPersonalFiles(mFiles);\n            }\n\n            // TODO refactor add DrawerState instead of using static menuItemId\n            if (DrawerActivity.menuItemId == R.id.nav_shared && currentDirectory != null) {\n                mFiles = updatedStorageManager.filter(currentDirectory, OCFileFilterType.Shared);\n            }\n            if (DrawerActivity.menuItemId == R.id.nav_favorites && currentDirectory != null) {\n                mFiles = updatedStorageManager.filter(currentDirectory, OCFileFilterType.Favorite);\n            }\n\n            sortOrder = preferences.getSortOrderByFolder(directory);\n            mFiles = sortOrder.sortCloudFiles(mFiles);\n            prepareListOfHiddenFiles();\n            mergeOCFilesForLivePhoto();\n            mFilesAll.clear();\n            addOfflineOperations(directory.getFileId());\n            mFilesAll.addAll(mFiles);\n            currentDirectory = directory;\n        } else {\n            mFiles.clear();\n            mFilesAll.clear();\n        }\n\n        searchType = null;\n        notifyDataSetChanged();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc swapDirectory(account: User, directory: OCFile, updatedStorageManager: FileDataStorageManager, onlyOnDevice: Bool, limitToMimeType: String) {\n    self.onlyOnDevice = onlyOnDevice\n\n    if updatedStorageManager != mStorageManager {\n        mStorageManager = updatedStorageManager\n        ocFileListDelegate.setShowShareAvatar(CapabilityUtils.getCapability(account, activity).version.isShareesOnDavSupported())\n        self.user = account\n    }\n    if let storageManager = mStorageManager {\n        mFiles = storageManager.getFolderContent(directory: directory, onlyOnDevice: onlyOnDevice)\n        if !preferences.isShowHiddenFilesEnabled() {\n            mFiles = filterHiddenFiles(mFiles)\n        }\n        if !limitToMimeType.isEmpty {\n            mFiles = filterByMimeType(mFiles, limitToMimeType)\n        }\n        if OCFile.ROOT_PATH == directory.remotePath && MainApp.isOnlyPersonFiles() {\n            mFiles = limitToPersonalFiles(mFiles)\n        }\n\n        if DrawerActivity.menuItemId == R.id.nav_shared && currentDirectory != nil {\n            mFiles = updatedStorageManager.filter(currentDirectory!, filterType: .Shared)\n        }\n        if DrawerActivity.menuItemId == R.id.nav_favorites && currentDirectory != nil {\n            mFiles = updatedStorageManager.filter(currentDirectory!, filterType: .Favorite)\n        }\n\n        sortOrder = preferences.getSortOrderByFolder(directory: directory)\n        mFiles = sortOrder.sortCloudFiles(mFiles)\n        prepareListOfHiddenFiles()\n        mergeOCFilesForLivePhoto()\n        mFilesAll.removeAll()\n        addOfflineOperations(directory.fileId)\n        mFilesAll.append(contentsOf: mFiles)\n        currentDirectory = directory\n    } else {\n        mFiles.removeAll()\n        mFilesAll.removeAll()\n    }\n\n    searchType = nil\n    notifyDataSetChanged()\n}\n```"
    },
    {
        "method_name": "addOfflineOperations",
        "method_code": "private void addOfflineOperations(long fileId) {\n        List<OCFile> offlineOperations = mStorageManager.offlineOperationsRepository.convertToOCFiles(fileId);\n        if (offlineOperations.isEmpty()) {\n            return;\n        }\n\n        List<OCFile> newFiles;\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE) {\n            newFiles = offlineOperations.stream()\n                .filter(offlineFile -> mFilesAll.stream()\n                    .noneMatch(file -> Objects.equals(file.getDecryptedRemotePath(), offlineFile.getDecryptedRemotePath())))\n                .toList();\n        } else {\n            newFiles = offlineOperations.stream()\n                .filter(offlineFile -> mFilesAll.stream()\n                    .noneMatch(file -> Objects.equals(file.getDecryptedRemotePath(), offlineFile.getDecryptedRemotePath())))\n                .collect(Collectors.toList());\n        }\n\n        mFilesAll.addAll(newFiles);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled addOfflineOperations from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: addOfflineOperations\n\n        Method Code: private void addOfflineOperations(long fileId) {\n        List<OCFile> offlineOperations = mStorageManager.offlineOperationsRepository.convertToOCFiles(fileId);\n        if (offlineOperations.isEmpty()) {\n            return;\n        }\n\n        List<OCFile> newFiles;\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE) {\n            newFiles = offlineOperations.stream()\n                .filter(offlineFile -> mFilesAll.stream()\n                    .noneMatch(file -> Objects.equals(file.getDecryptedRemotePath(), offlineFile.getDecryptedRemotePath())))\n                .toList();\n        } else {\n            newFiles = offlineOperations.stream()\n                .filter(offlineFile -> mFilesAll.stream()\n                    .noneMatch(file -> Objects.equals(file.getDecryptedRemotePath(), offlineFile.getDecryptedRemotePath())))\n                .collect(Collectors.toList());\n        }\n\n        mFilesAll.addAll(newFiles);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func addOfflineOperations(fileId: Int64) {\n    let offlineOperations = mStorageManager.offlineOperationsRepository.convertToOCFiles(fileId: fileId)\n    if offlineOperations.isEmpty {\n        return\n    }\n\n    var newFiles: [OCFile]\n    if #available(iOS 14.0, *) {\n        newFiles = offlineOperations.filter { offlineFile in\n            !mFilesAll.contains { file in\n                file.decryptedRemotePath == offlineFile.decryptedRemotePath\n            }\n        }\n    } else {\n        newFiles = offlineOperations.filter { offlineFile in\n            !mFilesAll.contains { file in\n                file.decryptedRemotePath == offlineFile.decryptedRemotePath\n            }\n        }\n    }\n\n    mFilesAll.append(contentsOf: newFiles)\n}\n```"
    },
    {
        "method_name": "setData",
        "method_code": "public void setData(List<Object> objects,\n                        SearchType searchType,\n                        FileDataStorageManager storageManager,\n                        @Nullable OCFile folder,\n                        boolean clear) {\n        if (storageManager != null && mStorageManager == null) {\n            mStorageManager = storageManager;\n            ocFileListDelegate.setShowShareAvatar(mStorageManager\n                                                      .getCapability(user.getAccountName())\n                                                      .getVersion()\n                                                      .isShareesOnDavSupported());\n        }\n\n\n        if (mStorageManager == null) {\n            mStorageManager = new FileDataStorageManager(user, activity.getContentResolver());\n        }\n\n        if (clear) {\n            mFiles.clear();\n            resetLastTimestamp();\n            preferences.setPhotoSearchTimestamp(0);\n\n            VirtualFolderType type;\n            switch (searchType) {\n                case FAVORITE_SEARCH:\n                    type = VirtualFolderType.FAVORITE;\n                    break;\n                case GALLERY_SEARCH:\n                    type = VirtualFolderType.GALLERY;\n                    break;\n                default:\n                    type = VirtualFolderType.NONE;\n                    break;\n            }\n\n            if (type != VirtualFolderType.GALLERY) {\n                mStorageManager.deleteVirtuals(type);\n            }\n        }\n\n        // early exit\n        if (objects.size() > 0 && mStorageManager != null) {\n            if (searchType == SearchType.SHARED_FILTER) {\n                parseShares(objects);\n            } else {\n                if (searchType != SearchType.GALLERY_SEARCH) {\n                    parseVirtuals(objects, searchType);\n                }\n            }\n        }\n\n        if (searchType == SearchType.GALLERY_SEARCH ||\n            searchType == SearchType.RECENTLY_MODIFIED_SEARCH) {\n            mFiles = FileStorageUtils.sortOcFolderDescDateModifiedWithoutFavoritesFirst(mFiles);\n        } else if (searchType != SearchType.SHARED_FILTER) {\n            sortOrder = preferences.getSortOrderByFolder(folder);\n            mFiles = sortOrder.sortCloudFiles(mFiles);\n        }\n\n        this.searchType = searchType;\n\n        mFilesAll.clear();\n        mFilesAll.addAll(mFiles);\n\n        new Handler(Looper.getMainLooper()).post(this::notifyDataSetChanged);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setData from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: setData\n\n        Method Code: public void setData(List<Object> objects,\n                        SearchType searchType,\n                        FileDataStorageManager storageManager,\n                        @Nullable OCFile folder,\n                        boolean clear) {\n        if (storageManager != null && mStorageManager == null) {\n            mStorageManager = storageManager;\n            ocFileListDelegate.setShowShareAvatar(mStorageManager\n                                                      .getCapability(user.getAccountName())\n                                                      .getVersion()\n                                                      .isShareesOnDavSupported());\n        }\n\n\n        if (mStorageManager == null) {\n            mStorageManager = new FileDataStorageManager(user, activity.getContentResolver());\n        }\n\n        if (clear) {\n            mFiles.clear();\n            resetLastTimestamp();\n            preferences.setPhotoSearchTimestamp(0);\n\n            VirtualFolderType type;\n            switch (searchType) {\n                case FAVORITE_SEARCH:\n                    type = VirtualFolderType.FAVORITE;\n                    break;\n                case GALLERY_SEARCH:\n                    type = VirtualFolderType.GALLERY;\n                    break;\n                default:\n                    type = VirtualFolderType.NONE;\n                    break;\n            }\n\n            if (type != VirtualFolderType.GALLERY) {\n                mStorageManager.deleteVirtuals(type);\n            }\n        }\n\n        // early exit\n        if (objects.size() > 0 && mStorageManager != null) {\n            if (searchType == SearchType.SHARED_FILTER) {\n                parseShares(objects);\n            } else {\n                if (searchType != SearchType.GALLERY_SEARCH) {\n                    parseVirtuals(objects, searchType);\n                }\n            }\n        }\n\n        if (searchType == SearchType.GALLERY_SEARCH ||\n            searchType == SearchType.RECENTLY_MODIFIED_SEARCH) {\n            mFiles = FileStorageUtils.sortOcFolderDescDateModifiedWithoutFavoritesFirst(mFiles);\n        } else if (searchType != SearchType.SHARED_FILTER) {\n            sortOrder = preferences.getSortOrderByFolder(folder);\n            mFiles = sortOrder.sortCloudFiles(mFiles);\n        }\n\n        this.searchType = searchType;\n\n        mFilesAll.clear();\n        mFilesAll.addAll(mFiles);\n\n        new Handler(Looper.getMainLooper()).post(this::notifyDataSetChanged);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setData(objects: [Any],\n             searchType: SearchType,\n             storageManager: FileDataStorageManager?,\n             folder: OCFile?,\n             clear: Bool) {\n    if storageManager != nil && mStorageManager == nil {\n        mStorageManager = storageManager\n        ocFileListDelegate.setShowShareAvatar(mStorageManager!\n                                                  .getCapability(user.accountName)\n                                                  .getVersion()\n                                                  .isShareesOnDavSupported())\n    }\n\n    if mStorageManager == nil {\n        mStorageManager = FileDataStorageManager(user: user, contentResolver: activity.contentResolver)\n    }\n\n    if clear {\n        mFiles.removeAll()\n        resetLastTimestamp()\n        preferences.setPhotoSearchTimestamp(0)\n\n        let type: VirtualFolderType\n        switch searchType {\n        case .FAVORITE_SEARCH:\n            type = .FAVORITE\n        case .GALLERY_SEARCH:\n            type = .GALLERY\n        default:\n            type = .NONE\n        }\n\n        if type != .GALLERY {\n            mStorageManager?.deleteVirtuals(type)\n        }\n    }\n\n    // early exit\n    if objects.count > 0 && mStorageManager != nil {\n        if searchType == .SHARED_FILTER {\n            parseShares(objects)\n        } else {\n            if searchType != .GALLERY_SEARCH {\n                parseVirtuals(objects, searchType)\n            }\n        }\n    }\n\n    if searchType == .GALLERY_SEARCH || searchType == .RECENTLY_MODIFIED_SEARCH {\n        mFiles = FileStorageUtils.sortOcFolderDescDateModifiedWithoutFavoritesFirst(mFiles)\n    } else if searchType != .SHARED_FILTER {\n        sortOrder = preferences.getSortOrderByFolder(folder)\n        mFiles = sortOrder.sortCloudFiles(mFiles)\n    }\n\n    self.searchType = searchType\n\n    mFilesAll.removeAll()\n    mFilesAll.append(contentsOf: mFiles)\n\n    DispatchQueue.main.async {\n        self.notifyDataSetChanged()\n    }\n}\n```"
    },
    {
        "method_name": "parseShares",
        "method_code": "private void parseShares(List<Object> objects) {\n        List<OCShare> shares = new ArrayList<>();\n\n        for (Object shareObject : objects) {\n            // check type before cast as of long running data fetch it is possible that old result is filled\n            if (shareObject instanceof OCShare) {\n                OCShare ocShare = (OCShare) shareObject;\n                shares.add(ocShare);\n            }\n        }\n\n        // create partial OCFile from OCShares\n        List<OCFile> files = OCShareToOCFileConverter.buildOCFilesFromShares(shares);\n\n        // set localPath of individual files iff present on device\n        for (OCFile file : files) {\n            FileStorageUtils.searchForLocalFileInDefaultPath(file, user.getAccountName());\n        }\n\n        mFiles.clear();\n        mFiles.addAll(files);\n        mStorageManager.saveShares(shares);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled parseShares from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: parseShares\n\n        Method Code: private void parseShares(List<Object> objects) {\n        List<OCShare> shares = new ArrayList<>();\n\n        for (Object shareObject : objects) {\n            // check type before cast as of long running data fetch it is possible that old result is filled\n            if (shareObject instanceof OCShare) {\n                OCShare ocShare = (OCShare) shareObject;\n                shares.add(ocShare);\n            }\n        }\n\n        // create partial OCFile from OCShares\n        List<OCFile> files = OCShareToOCFileConverter.buildOCFilesFromShares(shares);\n\n        // set localPath of individual files iff present on device\n        for (OCFile file : files) {\n            FileStorageUtils.searchForLocalFileInDefaultPath(file, user.getAccountName());\n        }\n\n        mFiles.clear();\n        mFiles.addAll(files);\n        mStorageManager.saveShares(shares);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func parseShares(_ objects: [Any]) {\n    var shares: [OCShare] = []\n\n    for shareObject in objects {\n        if let ocShare = shareObject as? OCShare {\n            shares.append(ocShare)\n        }\n    }\n\n    let files = OCShareToOCFileConverter.buildOCFilesFromShares(shares)\n\n    for file in files {\n        FileStorageUtils.searchForLocalFileInDefaultPath(file, user.accountName)\n    }\n\n    mFiles.removeAll()\n    mFiles.append(contentsOf: files)\n    mStorageManager.saveShares(shares)\n}\n```"
    },
    {
        "method_name": "parseVirtuals",
        "method_code": "private void parseVirtuals(List<Object> objects, SearchType searchType) {\n        VirtualFolderType type;\n        boolean onlyMedia = false;\n\n        switch (searchType) {\n            case FAVORITE_SEARCH:\n                type = VirtualFolderType.FAVORITE;\n                break;\n            case GALLERY_SEARCH:\n                type = VirtualFolderType.GALLERY;\n                onlyMedia = true;\n\n                int lastPosition = objects.size() - 1;\n\n                if (lastPosition < 0) {\n                    lastTimestamp = -1;\n                    break;\n                }\n\n                RemoteFile lastFile = (RemoteFile) objects.get(lastPosition);\n                lastTimestamp = lastFile.getModifiedTimestamp() / 1000;\n                break;\n            default:\n                type = VirtualFolderType.NONE;\n                break;\n        }\n\n        List<ContentValues> contentValues = new ArrayList<>();\n\n        for (Object remoteFile : objects) {\n            OCFile ocFile = FileStorageUtils.fillOCFile((RemoteFile) remoteFile);\n            FileStorageUtils.searchForLocalFileInDefaultPath(ocFile, user.getAccountName());\n\n            try {\n                ocFile = mStorageManager.saveFileWithParent(ocFile, activity);\n\n                OCFile parentFolder = mStorageManager.getFileById(ocFile.getParentId());\n                if (parentFolder != null && (ocFile.isEncrypted() || parentFolder.isEncrypted())) {\n                    Object object = RefreshFolderOperation.getDecryptedFolderMetadata(\n                        true,\n                        parentFolder,\n                        OwnCloudClientFactory.createOwnCloudClient(user.toPlatformAccount(), activity),\n                        user,\n                        activity);\n\n                    if (object == null) {\n                        throw new IllegalStateException(\"metadata is null!\");\n                    }\n\n                    if (object instanceof DecryptedFolderMetadataFileV1) {\n                        // update ocFile\n                        RefreshFolderOperation.updateFileNameForEncryptedFileV1(mStorageManager,\n                                                                                (DecryptedFolderMetadataFileV1) object,\n                                                                                ocFile);\n                    } else {\n                        // update ocFile\n                        RefreshFolderOperation.updateFileNameForEncryptedFile(mStorageManager,\n                                                                              (DecryptedFolderMetadataFile) object,\n                                                                              ocFile);\n                    }\n\n                    ocFile = mStorageManager.saveFileWithParent(ocFile, activity);\n                }\n\n                if (SearchType.GALLERY_SEARCH != searchType) {\n                    // also sync folder content\n                    if (ocFile.isFolder()) {\n                        long currentSyncTime = System.currentTimeMillis();\n                        RemoteOperation refreshFolderOperation = new RefreshFolderOperation(ocFile,\n                                                                                            currentSyncTime,\n                                                                                            true,\n                                                                                            false,\n                                                                                            mStorageManager,\n                                                                                            user,\n                                                                                            activity);\n                        refreshFolderOperation.execute(user, activity);\n                    }\n                }\n\n                if (!onlyMedia || MimeTypeUtil.isImage(ocFile) || MimeTypeUtil.isVideo(ocFile)) {\n                    //handling duplicates for favorites section\n                    if (mFiles.isEmpty() || !mFiles.contains(ocFile)) {\n                        mFiles.add(ocFile);\n                    }\n                }\n\n                ContentValues cv = new ContentValues();\n                cv.put(ProviderMeta.ProviderTableMeta.VIRTUAL_TYPE, type.toString());\n                cv.put(ProviderMeta.ProviderTableMeta.VIRTUAL_OCFILE_ID, ocFile.getFileId());\n\n                contentValues.add(cv);\n            } catch (\n                RemoteOperationFailedException |\n                OperationCanceledException |\n                AuthenticatorException |\n                IOException |\n                AccountUtils.AccountNotFoundException |\n                IllegalStateException e) {\n                Log_OC.e(TAG, \"Error saving file with parent\" + e.getMessage(), e);\n            }\n        }\n\n        preferences.setPhotoSearchTimestamp(System.currentTimeMillis());\n        mStorageManager.saveVirtuals(contentValues);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled parseVirtuals from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: parseVirtuals\n\n        Method Code: private void parseVirtuals(List<Object> objects, SearchType searchType) {\n        VirtualFolderType type;\n        boolean onlyMedia = false;\n\n        switch (searchType) {\n            case FAVORITE_SEARCH:\n                type = VirtualFolderType.FAVORITE;\n                break;\n            case GALLERY_SEARCH:\n                type = VirtualFolderType.GALLERY;\n                onlyMedia = true;\n\n                int lastPosition = objects.size() - 1;\n\n                if (lastPosition < 0) {\n                    lastTimestamp = -1;\n                    break;\n                }\n\n                RemoteFile lastFile = (RemoteFile) objects.get(lastPosition);\n                lastTimestamp = lastFile.getModifiedTimestamp() / 1000;\n                break;\n            default:\n                type = VirtualFolderType.NONE;\n                break;\n        }\n\n        List<ContentValues> contentValues = new ArrayList<>();\n\n        for (Object remoteFile : objects) {\n            OCFile ocFile = FileStorageUtils.fillOCFile((RemoteFile) remoteFile);\n            FileStorageUtils.searchForLocalFileInDefaultPath(ocFile, user.getAccountName());\n\n            try {\n                ocFile = mStorageManager.saveFileWithParent(ocFile, activity);\n\n                OCFile parentFolder = mStorageManager.getFileById(ocFile.getParentId());\n                if (parentFolder != null && (ocFile.isEncrypted() || parentFolder.isEncrypted())) {\n                    Object object = RefreshFolderOperation.getDecryptedFolderMetadata(\n                        true,\n                        parentFolder,\n                        OwnCloudClientFactory.createOwnCloudClient(user.toPlatformAccount(), activity),\n                        user,\n                        activity);\n\n                    if (object == null) {\n                        throw new IllegalStateException(\"metadata is null!\");\n                    }\n\n                    if (object instanceof DecryptedFolderMetadataFileV1) {\n                        // update ocFile\n                        RefreshFolderOperation.updateFileNameForEncryptedFileV1(mStorageManager,\n                                                                                (DecryptedFolderMetadataFileV1) object,\n                                                                                ocFile);\n                    } else {\n                        // update ocFile\n                        RefreshFolderOperation.updateFileNameForEncryptedFile(mStorageManager,\n                                                                              (DecryptedFolderMetadataFile) object,\n                                                                              ocFile);\n                    }\n\n                    ocFile = mStorageManager.saveFileWithParent(ocFile, activity);\n                }\n\n                if (SearchType.GALLERY_SEARCH != searchType) {\n                    // also sync folder content\n                    if (ocFile.isFolder()) {\n                        long currentSyncTime = System.currentTimeMillis();\n                        RemoteOperation refreshFolderOperation = new RefreshFolderOperation(ocFile,\n                                                                                            currentSyncTime,\n                                                                                            true,\n                                                                                            false,\n                                                                                            mStorageManager,\n                                                                                            user,\n                                                                                            activity);\n                        refreshFolderOperation.execute(user, activity);\n                    }\n                }\n\n                if (!onlyMedia || MimeTypeUtil.isImage(ocFile) || MimeTypeUtil.isVideo(ocFile)) {\n                    //handling duplicates for favorites section\n                    if (mFiles.isEmpty() || !mFiles.contains(ocFile)) {\n                        mFiles.add(ocFile);\n                    }\n                }\n\n                ContentValues cv = new ContentValues();\n                cv.put(ProviderMeta.ProviderTableMeta.VIRTUAL_TYPE, type.toString());\n                cv.put(ProviderMeta.ProviderTableMeta.VIRTUAL_OCFILE_ID, ocFile.getFileId());\n\n                contentValues.add(cv);\n            } catch (\n                RemoteOperationFailedException |\n                OperationCanceledException |\n                AuthenticatorException |\n                IOException |\n                AccountUtils.AccountNotFoundException |\n                IllegalStateException e) {\n                Log_OC.e(TAG, \"Error saving file with parent\" + e.getMessage(), e);\n            }\n        }\n\n        preferences.setPhotoSearchTimestamp(System.currentTimeMillis());\n        mStorageManager.saveVirtuals(contentValues);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func parseVirtuals(objects: [Any], searchType: SearchType) {\n    var type: VirtualFolderType\n    var onlyMedia = false\n\n    switch searchType {\n    case .FAVORITE_SEARCH:\n        type = .FAVORITE\n    case .GALLERY_SEARCH:\n        type = .GALLERY\n        onlyMedia = true\n\n        let lastPosition = objects.count - 1\n\n        if lastPosition < 0 {\n            lastTimestamp = -1\n            break\n        }\n\n        if let lastFile = objects[lastPosition] as? RemoteFile {\n            lastTimestamp = lastFile.getModifiedTimestamp() / 1000\n        }\n    default:\n        type = .NONE\n    }\n\n    var contentValues: [ContentValues] = []\n\n    for remoteFile in objects {\n        if var ocFile = FileStorageUtils.fillOCFile(remoteFile as! RemoteFile) {\n            FileStorageUtils.searchForLocalFileInDefaultPath(ocFile, user.getAccountName())\n\n            do {\n                ocFile = try mStorageManager.saveFileWithParent(ocFile, activity: activity)\n\n                if let parentFolder = mStorageManager.getFileById(ocFile.getParentId()) {\n                    if ocFile.isEncrypted() || parentFolder.isEncrypted() {\n                        let object = RefreshFolderOperation.getDecryptedFolderMetadata(\n                            true,\n                            parentFolder: parentFolder,\n                            client: OwnCloudClientFactory.createOwnCloudClient(user.toPlatformAccount(), activity: activity),\n                            user: user,\n                            activity: activity)\n\n                        guard let metadata = object else {\n                            throw NSError(domain: \"IllegalStateException\", code: 0, userInfo: [NSLocalizedDescriptionKey: \"metadata is null!\"])\n                        }\n\n                        if let decryptedMetadata = metadata as? DecryptedFolderMetadataFileV1 {\n                            RefreshFolderOperation.updateFileNameForEncryptedFileV1(mStorageManager, decryptedMetadata, ocFile)\n                        } else if let decryptedMetadata = metadata as? DecryptedFolderMetadataFile {\n                            RefreshFolderOperation.updateFileNameForEncryptedFile(mStorageManager, decryptedMetadata, ocFile)\n                        }\n\n                        ocFile = try mStorageManager.saveFileWithParent(ocFile, activity: activity)\n                    }\n                }\n\n                if searchType != .GALLERY_SEARCH {\n                    if ocFile.isFolder() {\n                        let currentSyncTime = Date().timeIntervalSince1970\n                        let refreshFolderOperation = RefreshFolderOperation(ocFile: ocFile, currentSyncTime: currentSyncTime, syncFolderContent: true, syncFolderContentRecursively: false, storageManager: mStorageManager, user: user, activity: activity)\n                        refreshFolderOperation.execute(user: user, activity: activity)\n                    }\n                }\n\n                if !onlyMedia || MimeTypeUtil.isImage(ocFile) || MimeTypeUtil.isVideo(ocFile) {\n                    if mFiles.isEmpty || !mFiles.contains(ocFile) {\n                        mFiles.append(ocFile)\n                    }\n                }\n\n                var cv = ContentValues()\n                cv.put(ProviderMeta.ProviderTableMeta.VIRTUAL_TYPE, type.rawValue)\n                cv.put(ProviderMeta.ProviderTableMeta.VIRTUAL_OCFILE_ID, ocFile.getFileId())\n\n                contentValues.append(cv)\n            } catch {\n                Log_OC.e(TAG, \"Error saving file with parent: \\(error.localizedDescription)\", error)\n            }\n        }\n    }\n\n    preferences.setPhotoSearchTimestamp(Date().timeIntervalSince1970)\n    mStorageManager.saveVirtuals(contentValues)\n}\n```"
    },
    {
        "method_name": "showVirtuals",
        "method_code": "public void showVirtuals(VirtualFolderType type, boolean onlyImages, FileDataStorageManager storageManager) {\n        mFiles = storageManager.getVirtualFolderContent(type, onlyImages);\n\n        if (VirtualFolderType.GALLERY == type) {\n            mFiles = FileStorageUtils.sortOcFolderDescDateModifiedWithoutFavoritesFirst(mFiles);\n        }\n\n        mFilesAll.clear();\n        mFilesAll.addAll(mFiles);\n\n        new Handler(Looper.getMainLooper()).post(this::notifyDataSetChanged);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showVirtuals from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: showVirtuals\n\n        Method Code: public void showVirtuals(VirtualFolderType type, boolean onlyImages, FileDataStorageManager storageManager) {\n        mFiles = storageManager.getVirtualFolderContent(type, onlyImages);\n\n        if (VirtualFolderType.GALLERY == type) {\n            mFiles = FileStorageUtils.sortOcFolderDescDateModifiedWithoutFavoritesFirst(mFiles);\n        }\n\n        mFilesAll.clear();\n        mFilesAll.addAll(mFiles);\n\n        new Handler(Looper.getMainLooper()).post(this::notifyDataSetChanged);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc showVirtuals(type: VirtualFolderType, onlyImages: Bool, storageManager: FileDataStorageManager) {\n    mFiles = storageManager.getVirtualFolderContent(type: type, onlyImages: onlyImages)\n\n    if type == .GALLERY {\n        mFiles = FileStorageUtils.sortOcFolderDescDateModifiedWithoutFavoritesFirst(mFiles)\n    }\n\n    mFilesAll.removeAll()\n    mFilesAll.append(contentsOf: mFiles)\n\n    DispatchQueue.main.async {\n        self.notifyDataSetChanged()\n    }\n}\n```"
    },
    {
        "method_name": "setSortOrder",
        "method_code": "public void setSortOrder(@Nullable OCFile folder, FileSortOrder sortOrder) {\n        preferences.setSortOrder(folder, sortOrder);\n        mFiles = sortOrder.sortCloudFiles(mFiles);\n        notifyDataSetChanged();\n\n        this.sortOrder = sortOrder;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setSortOrder from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: setSortOrder\n\n        Method Code: public void setSortOrder(@Nullable OCFile folder, FileSortOrder sortOrder) {\n        preferences.setSortOrder(folder, sortOrder);\n        mFiles = sortOrder.sortCloudFiles(mFiles);\n        notifyDataSetChanged();\n\n        this.sortOrder = sortOrder;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setSortOrder(folder: OCFile?, sortOrder: FileSortOrder) {\n    preferences.setSortOrder(folder: folder, sortOrder: sortOrder)\n    mFiles = sortOrder.sortCloudFiles(mFiles)\n    notifyDataSetChanged()\n    \n    self.sortOrder = sortOrder\n}\n```"
    },
    {
        "method_name": "getCheckedItems",
        "method_code": "public Set<OCFile> getCheckedItems() {\n        return ocFileListDelegate.getCheckedItems();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getCheckedItems from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getCheckedItems\n\n        Method Code: public Set<OCFile> getCheckedItems() {\n        return ocFileListDelegate.getCheckedItems();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getCheckedItems() -> Set<OCFile> {\n    return ocFileListDelegate.getCheckedItems()\n}\n```"
    },
    {
        "method_name": "setCheckedItem",
        "method_code": "public void setCheckedItem(Set<OCFile> files) {\n        ocFileListDelegate.setCheckedItem(files);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setCheckedItem from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: setCheckedItem\n\n        Method Code: public void setCheckedItem(Set<OCFile> files) {\n        ocFileListDelegate.setCheckedItem(files);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setCheckedItem(files: Set<OCFile>) {\n    ocFileListDelegate.setCheckedItem(files: files)\n}\n```"
    },
    {
        "method_name": "clearCheckedItems",
        "method_code": "public void clearCheckedItems() {\n        ocFileListDelegate.clearCheckedItems();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled clearCheckedItems from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: clearCheckedItems\n\n        Method Code: public void clearCheckedItems() {\n        ocFileListDelegate.clearCheckedItems();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc clearCheckedItems() {\n    ocFileListDelegate.clearCheckedItems()\n}\n```"
    },
    {
        "method_name": "setFiles",
        "method_code": "public void setFiles(List<OCFile> files) {\n        mFiles = files;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setFiles from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: setFiles\n\n        Method Code: public void setFiles(List<OCFile> files) {\n        mFiles = files;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setFiles(_ files: [OCFile]) {\n    mFiles = files\n}\n```"
    },
    {
        "method_name": "getFiles",
        "method_code": "public List<OCFile> getFiles() {\n        return mFiles;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getFiles from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getFiles\n\n        Method Code: public List<OCFile> getFiles() {\n        return mFiles;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getFiles() -> [OCFile] {\n    return mFiles\n}\n```"
    },
    {
        "method_name": "prepareListOfHiddenFiles",
        "method_code": "private void prepareListOfHiddenFiles() {\n        listOfHiddenFiles.clear();\n\n        mFiles.forEach(file -> {\n            if (file.shouldHide()) {\n                listOfHiddenFiles.add(file.getFileName());\n            }\n        });\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled prepareListOfHiddenFiles from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: prepareListOfHiddenFiles\n\n        Method Code: private void prepareListOfHiddenFiles() {\n        listOfHiddenFiles.clear();\n\n        mFiles.forEach(file -> {\n            if (file.shouldHide()) {\n                listOfHiddenFiles.add(file.getFileName());\n            }\n        });\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func prepareListOfHiddenFiles() {\n    listOfHiddenFiles.removeAll()\n\n    mFiles.forEach { file in\n        if file.shouldHide() {\n            listOfHiddenFiles.append(file.getFileName())\n        }\n    }\n}\n```"
    },
    {
        "method_name": "resetLastTimestamp",
        "method_code": "public void resetLastTimestamp() {\n        lastTimestamp = -1;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled resetLastTimestamp from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: resetLastTimestamp\n\n        Method Code: public void resetLastTimestamp() {\n        lastTimestamp = -1;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc resetLastTimestamp() {\n    lastTimestamp = -1\n}\n```"
    },
    {
        "method_name": "getLastTimestamp",
        "method_code": "public long getLastTimestamp() {\n        return lastTimestamp;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getLastTimestamp from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getLastTimestamp\n\n        Method Code: public long getLastTimestamp() {\n        return lastTimestamp;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getLastTimestamp() -> Int64 {\n    return lastTimestamp\n}\n```"
    },
    {
        "method_name": "onViewRecycled",
        "method_code": "@Override\n    public void onViewRecycled(@NonNull RecyclerView.ViewHolder holder) {\n        super.onViewRecycled(holder);\n        if (holder instanceof ListViewHolder listGridImageViewHolder) {\n            LoaderImageView thumbnailShimmer = listGridImageViewHolder.getShimmerThumbnail();\n            DisplayUtils.stopShimmer(thumbnailShimmer,  listGridImageViewHolder.getThumbnail());\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onViewRecycled from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: onViewRecycled\n\n        Method Code: @Override\n    public void onViewRecycled(@NonNull RecyclerView.ViewHolder holder) {\n        super.onViewRecycled(holder);\n        if (holder instanceof ListViewHolder listGridImageViewHolder) {\n            LoaderImageView thumbnailShimmer = listGridImageViewHolder.getShimmerThumbnail();\n            DisplayUtils.stopShimmer(thumbnailShimmer,  listGridImageViewHolder.getThumbnail());\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onViewRecycled(_ holder: RecyclerView.ViewHolder) {\n    super.onViewRecycled(holder)\n    if let listGridImageViewHolder = holder as? ListViewHolder {\n        let thumbnailShimmer = listGridImageViewHolder.getShimmerThumbnail()\n        DisplayUtils.stopShimmer(thumbnailShimmer, listGridImageViewHolder.getThumbnail())\n    }\n}\n```"
    },
    {
        "method_name": "avatarGenerated",
        "method_code": "@Override\n    public void avatarGenerated(Drawable avatarDrawable, Object callContext) {\n        ((ImageView) callContext).setImageDrawable(avatarDrawable);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled avatarGenerated from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: avatarGenerated\n\n        Method Code: @Override\n    public void avatarGenerated(Drawable avatarDrawable, Object callContext) {\n        ((ImageView) callContext).setImageDrawable(avatarDrawable);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc avatarGenerated(avatarDrawable: Drawable, callContext: Any) {\n    (callContext as? UIImageView)?.image = avatarDrawable\n}\n```"
    },
    {
        "method_name": "shouldCallGeneratedCallback",
        "method_code": "@Override\n    public boolean shouldCallGeneratedCallback(String tag, Object callContext) {\n        return ((ImageView) callContext).getTag().equals(tag);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled shouldCallGeneratedCallback from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: shouldCallGeneratedCallback\n\n        Method Code: @Override\n    public boolean shouldCallGeneratedCallback(String tag, Object callContext) {\n        return ((ImageView) callContext).getTag().equals(tag);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc shouldCallGeneratedCallback(tag: String, callContext: Any) -> Bool {\n    return (callContext as! UIImageView).tag == tag\n}\n```"
    },
    {
        "method_name": "isCheckedFile",
        "method_code": "public boolean isCheckedFile(OCFile file) {\n        return ocFileListDelegate.isCheckedFile(file);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled isCheckedFile from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: isCheckedFile\n\n        Method Code: public boolean isCheckedFile(OCFile file) {\n        return ocFileListDelegate.isCheckedFile(file);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc isCheckedFile(_ file: OCFile) -> Bool {\n    return ocFileListDelegate.isCheckedFile(file)\n}\n```"
    },
    {
        "method_name": "addCheckedFile",
        "method_code": "public void addCheckedFile(OCFile file) {\n        ocFileListDelegate.addCheckedFile(file);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled addCheckedFile from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: addCheckedFile\n\n        Method Code: public void addCheckedFile(OCFile file) {\n        ocFileListDelegate.addCheckedFile(file);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc addCheckedFile(_ file: OCFile) {\n    ocFileListDelegate.addCheckedFile(file)\n}\n```"
    },
    {
        "method_name": "setHighlightedItem",
        "method_code": "public void setHighlightedItem(OCFile file) {\n        ocFileListDelegate.setHighlightedItem(file);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setHighlightedItem from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: setHighlightedItem\n\n        Method Code: public void setHighlightedItem(OCFile file) {\n        ocFileListDelegate.setHighlightedItem(file);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setHighlightedItem(file: OCFile) {\n    ocFileListDelegate.setHighlightedItem(file)\n}\n```"
    },
    {
        "method_name": "filterHiddenFiles",
        "method_code": "private List<OCFile> filterHiddenFiles(Iterable<OCFile> files) {\n        List<OCFile> ret = new ArrayList<>();\n\n        for (OCFile file : files) {\n            if (!file.isHidden() && !ret.contains(file)) {\n                ret.add(file);\n            }\n        }\n\n        return ret;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled filterHiddenFiles from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: filterHiddenFiles\n\n        Method Code: private List<OCFile> filterHiddenFiles(Iterable<OCFile> files) {\n        List<OCFile> ret = new ArrayList<>();\n\n        for (OCFile file : files) {\n            if (!file.isHidden() && !ret.contains(file)) {\n                ret.add(file);\n            }\n        }\n\n        return ret;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func filterHiddenFiles(files: [OCFile]) -> [OCFile] {\n    var ret: [OCFile] = []\n\n    for file in files {\n        if !file.isHidden && !ret.contains(file) {\n            ret.append(file)\n        }\n    }\n\n    return ret\n}\n```"
    },
    {
        "method_name": "filterByMimeType",
        "method_code": "private List<OCFile> filterByMimeType(Iterable<OCFile> files, String mimeType) {\n        List<OCFile> ret = new ArrayList<>();\n\n        for (OCFile file : files) {\n            if (file.isFolder() || file.getMimeType().startsWith(mimeType)) {\n                ret.add(file);\n            }\n        }\n\n        return ret;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled filterByMimeType from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: filterByMimeType\n\n        Method Code: private List<OCFile> filterByMimeType(Iterable<OCFile> files, String mimeType) {\n        List<OCFile> ret = new ArrayList<>();\n\n        for (OCFile file : files) {\n            if (file.isFolder() || file.getMimeType().startsWith(mimeType)) {\n                ret.add(file);\n            }\n        }\n\n        return ret;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func filterByMimeType(files: [OCFile], mimeType: String) -> [OCFile] {\n    var ret: [OCFile] = []\n\n    for file in files {\n        if file.isFolder || file.getMimeType().hasPrefix(mimeType) {\n            ret.append(file)\n        }\n    }\n\n    return ret\n}\n```"
    },
    {
        "method_name": "limitToPersonalFiles",
        "method_code": "private List<OCFile> limitToPersonalFiles(Iterable<OCFile> files) {\n        List<OCFile> ret = new ArrayList<>();\n\n        for (OCFile file : files) {\n            String ownerId = file.getOwnerId();\n\n            if (ownerId != null && ownerId.equals(userId) && !file.isSharedWithMe() && !file.isGroupFolder()) {\n                ret.add(file);\n            }\n        }\n\n        return ret;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled limitToPersonalFiles from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: limitToPersonalFiles\n\n        Method Code: private List<OCFile> limitToPersonalFiles(Iterable<OCFile> files) {\n        List<OCFile> ret = new ArrayList<>();\n\n        for (OCFile file : files) {\n            String ownerId = file.getOwnerId();\n\n            if (ownerId != null && ownerId.equals(userId) && !file.isSharedWithMe() && !file.isGroupFolder()) {\n                ret.add(file);\n            }\n        }\n\n        return ret;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func limitToPersonalFiles(files: [OCFile]) -> [OCFile] {\n    var ret: [OCFile] = []\n\n    for file in files {\n        if let ownerId = file.getOwnerId(), ownerId == userId, !file.isSharedWithMe(), !file.isGroupFolder() {\n            ret.append(file)\n        }\n    }\n\n    return ret\n}\n```"
    },
    {
        "method_name": "cancelAllPendingTasks",
        "method_code": "public void cancelAllPendingTasks() {\n        ocFileListDelegate.cancelAllPendingTasks();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled cancelAllPendingTasks from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: cancelAllPendingTasks\n\n        Method Code: public void cancelAllPendingTasks() {\n        ocFileListDelegate.cancelAllPendingTasks();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc cancelAllPendingTasks() {\n    ocFileListDelegate.cancelAllPendingTasks()\n}\n```"
    },
    {
        "method_name": "setGridView",
        "method_code": "public void setGridView(boolean bool) {\n        gridView = bool;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setGridView from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: setGridView\n\n        Method Code: public void setGridView(boolean bool) {\n        gridView = bool;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setGridView(_ bool: Bool) {\n    gridView = bool\n}\n```"
    },
    {
        "method_name": "setShowMetadata",
        "method_code": "public void setShowMetadata(boolean bool) {\n        ocFileListDelegate.setMultiSelect(bool);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setShowMetadata from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: setShowMetadata\n\n        Method Code: public void setShowMetadata(boolean bool) {\n        ocFileListDelegate.setMultiSelect(bool);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setShowMetadata(_ bool: Bool) {\n    ocFileListDelegate.setMultiSelect(bool)\n}\n```"
    },
    {
        "method_name": "getPopupText",
        "method_code": "@NonNull\n    @Override\n    public String getPopupText(View view, int position) {\n        OCFile file = getItem(position);\n\n        if (file == null || sortOrder == null) {\n            return \"\";\n        }\n\n        switch (sortOrder.getType()) {\n            case ALPHABET:\n                return String.valueOf(file.getFileName().charAt(0)).toUpperCase(Locale.getDefault());\n            case DATE:\n                long milliseconds = file.getModificationTimestamp();\n                Date date = new Date(milliseconds);\n                return dateFormat.format(date);\n            case SIZE:\n                return DisplayUtils.bytesToHumanReadable(file.getFileLength());\n            default:\n                Log_OC.d(TAG, \"getPopupText: Unsupported sort order: \" + sortOrder.getType());\n                return \"\";\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getPopupText from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getPopupText\n\n        Method Code: @NonNull\n    @Override\n    public String getPopupText(View view, int position) {\n        OCFile file = getItem(position);\n\n        if (file == null || sortOrder == null) {\n            return \"\";\n        }\n\n        switch (sortOrder.getType()) {\n            case ALPHABET:\n                return String.valueOf(file.getFileName().charAt(0)).toUpperCase(Locale.getDefault());\n            case DATE:\n                long milliseconds = file.getModificationTimestamp();\n                Date date = new Date(milliseconds);\n                return dateFormat.format(date);\n            case SIZE:\n                return DisplayUtils.bytesToHumanReadable(file.getFileLength());\n            default:\n                Log_OC.d(TAG, \"getPopupText: Unsupported sort order: \" + sortOrder.getType());\n                return \"\";\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getPopupText(view: UIView, position: Int) -> String {\n    guard let file = getItem(position), let sortOrder = sortOrder else {\n        return \"\"\n    }\n\n    switch sortOrder.type {\n    case .alphabet:\n        return String(file.fileName.first ?? Character(\"\")).uppercased()\n    case .date:\n        let milliseconds = file.modificationTimestamp\n        let date = Date(timeIntervalSince1970: TimeInterval(milliseconds) / 1000)\n        return dateFormat.string(from: date)\n    case .size:\n        return DisplayUtils.bytesToHumanReadable(file.fileLength)\n    default:\n        Log_OC.d(TAG, \"getPopupText: Unsupported sort order: \\(sortOrder.type)\")\n        return \"\"\n    }\n}\n```"
    },
    {
        "method_name": "setShowShareAvatar",
        "method_code": "@VisibleForTesting\n    public void setShowShareAvatar(boolean bool) {\n        ocFileListDelegate.setShowShareAvatar(bool);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setShowShareAvatar from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: setShowShareAvatar\n\n        Method Code: @VisibleForTesting\n    public void setShowShareAvatar(boolean bool) {\n        ocFileListDelegate.setShowShareAvatar(bool);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setShowShareAvatar(_ bool: Bool) {\n    ocFileListDelegate.setShowShareAvatar(bool)\n}\n```"
    },
    {
        "method_name": "setCurrentDirectory",
        "method_code": "@VisibleForTesting\n    public void setCurrentDirectory(OCFile folder) {\n        currentDirectory = folder;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setCurrentDirectory from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: setCurrentDirectory\n\n        Method Code: @VisibleForTesting\n    public void setCurrentDirectory(OCFile folder) {\n        currentDirectory = folder;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setCurrentDirectory(folder: OCFile) {\n    currentDirectory = folder\n}\n```"
    },
    {
        "method_name": "getAllFiles",
        "method_code": "@SuppressFBWarnings(\"EI_EXPOSE_REP\")\n    public List<OCFile> getAllFiles() {\n        return mFilesAll;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getAllFiles from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getAllFiles\n\n        Method Code: @SuppressFBWarnings(\"EI_EXPOSE_REP\")\n    public List<OCFile> getAllFiles() {\n        return mFilesAll;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getAllFiles() -> [OCFile] {\n    return mFilesAll\n}\n```"
    },
    {
        "method_name": "getCurrentDirectory",
        "method_code": "public OCFile getCurrentDirectory() {\n        return currentDirectory;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getCurrentDirectory from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getCurrentDirectory\n\n        Method Code: public OCFile getCurrentDirectory() {\n        return currentDirectory;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getCurrentDirectory() -> OCFile {\n    return currentDirectory\n}\n```"
    },
    {
        "method_name": "getFilesCount",
        "method_code": "@Override\n    public int getFilesCount() {\n        return mFiles.size();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getFilesCount from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getFilesCount\n\n        Method Code: @Override\n    public int getFilesCount() {\n        return mFiles.size();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getFilesCount() -> Int {\n    return mFiles.count\n}\n```"
    },
    {
        "method_name": "notifyItemChanged",
        "method_code": "@Override\n    public void notifyItemChanged(@NonNull OCFile file) {\n        notifyItemChanged(getItemPosition(file));\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled notifyItemChanged from OCFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: notifyItemChanged\n\n        Method Code: @Override\n    public void notifyItemChanged(@NonNull OCFile file) {\n        notifyItemChanged(getItemPosition(file));\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func notifyItemChanged(_ file: OCFile) {\n    notifyItemChanged(getItemPosition(file))\n}\n```"
    }
]