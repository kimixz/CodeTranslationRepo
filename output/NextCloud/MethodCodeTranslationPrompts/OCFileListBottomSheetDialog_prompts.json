[
    {
        "method_name": "onCreate",
        "method_code": "@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        binding = FileListActionsBottomSheetFragmentBinding.inflate(getLayoutInflater());\n        setContentView(binding.getRoot());\n\n        viewThemeUtils.platform.colorImageView(binding.menuIconUploadFiles, ColorRole.PRIMARY);\n        viewThemeUtils.platform.colorImageView(binding.menuIconUploadFromApp, ColorRole.PRIMARY);\n        viewThemeUtils.platform.colorImageView(binding.menuIconDirectCameraUpload, ColorRole.PRIMARY);\n        viewThemeUtils.platform.colorImageView(binding.menuIconScanDocUpload, ColorRole.PRIMARY);\n        viewThemeUtils.platform.colorImageView(binding.menuIconMkdir, ColorRole.PRIMARY);\n        viewThemeUtils.platform.colorImageView(binding.menuIconAddFolderInfo, ColorRole.PRIMARY);\n\n        binding.addToCloud.setText(getContext().getResources().getString(R.string.add_to_cloud,\n                                                                         themeUtils.getDefaultDisplayNameForRootFolder(getContext())));\n\n        OCCapability capability = fileActivity.getCapabilities();\n        if (capability != null &&\n            capability.getRichDocuments().isTrue() &&\n            capability.getRichDocumentsDirectEditing().isTrue() &&\n            capability.getRichDocumentsTemplatesAvailable().isTrue() &&\n            !file.isEncrypted()) {\n            binding.templates.setVisibility(View.VISIBLE);\n        }\n\n        String json = new ArbitraryDataProviderImpl(getContext())\n            .getValue(user, ArbitraryDataProvider.DIRECT_EDITING);\n\n        if (!json.isEmpty() &&\n            !file.isEncrypted()) {\n            DirectEditing directEditing = new Gson().fromJson(json, DirectEditing.class);\n\n            if (!directEditing.getCreators().isEmpty()) {\n                binding.creatorsContainer.setVisibility(View.VISIBLE);\n\n                for (Creator creator : directEditing.getCreators().values()) {\n                    FileListActionsBottomSheetCreatorBinding creatorViewBinding =\n                        FileListActionsBottomSheetCreatorBinding.inflate(getLayoutInflater());\n\n                    View creatorView = creatorViewBinding.getRoot();\n\n                    creatorViewBinding.creatorName.setText(\n                        String.format(fileActivity.getString(R.string.editor_placeholder),\n                                      fileActivity.getString(R.string.create_new),\n                                      creator.getName()));\n\n                    creatorViewBinding.creatorThumbnail.setImageDrawable(\n                        MimeTypeUtil.getFileTypeIcon(creator.getMimetype(),\n                                                     creator.getExtension(),\n                                                     creatorViewBinding.creatorThumbnail.getContext(),\n                                                     viewThemeUtils));\n\n                    creatorView.setOnClickListener(v -> {\n                        actions.showTemplate(creator, creatorViewBinding.creatorName.getText().toString());\n                        dismiss();\n                    });\n\n                    binding.creators.addView(creatorView);\n                }\n            }\n        }\n\n        if (!deviceInfo.hasCamera(getContext())) {\n            binding.menuDirectCameraUpload.setVisibility(View.GONE);\n        }\n\n        // create rich workspace\n        if (editorUtils.isEditorAvailable(user,\n                                          MimeTypeUtil.MIMETYPE_TEXT_MARKDOWN) &&\n            file != null && !file.isEncrypted()) {\n            // richWorkspace\n            // == \"\": no info set -> show button\n            // == null: disabled on server side -> hide button\n            // != \"\": info set -> hide button\n            if (file.getRichWorkspace() == null || !\"\".equals(file.getRichWorkspace())) {\n                binding.menuCreateRichWorkspace.setVisibility(View.GONE);\n                binding.menuCreateRichWorkspaceDivider.setVisibility(View.GONE);\n            } else {\n                binding.menuCreateRichWorkspace.setVisibility(View.VISIBLE);\n                binding.menuCreateRichWorkspaceDivider.setVisibility(View.VISIBLE);\n            }\n        } else {\n            binding.menuCreateRichWorkspace.setVisibility(View.GONE);\n            binding.menuCreateRichWorkspaceDivider.setVisibility(View.GONE);\n        }\n\n        setupClickListener();\n        filterActionsForOfflineOperations();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreate from OCFileListBottomSheetDialog.java into Swift.\n\n        Input:\n\n        Method Name: onCreate\n\n        Method Code: @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        binding = FileListActionsBottomSheetFragmentBinding.inflate(getLayoutInflater());\n        setContentView(binding.getRoot());\n\n        viewThemeUtils.platform.colorImageView(binding.menuIconUploadFiles, ColorRole.PRIMARY);\n        viewThemeUtils.platform.colorImageView(binding.menuIconUploadFromApp, ColorRole.PRIMARY);\n        viewThemeUtils.platform.colorImageView(binding.menuIconDirectCameraUpload, ColorRole.PRIMARY);\n        viewThemeUtils.platform.colorImageView(binding.menuIconScanDocUpload, ColorRole.PRIMARY);\n        viewThemeUtils.platform.colorImageView(binding.menuIconMkdir, ColorRole.PRIMARY);\n        viewThemeUtils.platform.colorImageView(binding.menuIconAddFolderInfo, ColorRole.PRIMARY);\n\n        binding.addToCloud.setText(getContext().getResources().getString(R.string.add_to_cloud,\n                                                                         themeUtils.getDefaultDisplayNameForRootFolder(getContext())));\n\n        OCCapability capability = fileActivity.getCapabilities();\n        if (capability != null &&\n            capability.getRichDocuments().isTrue() &&\n            capability.getRichDocumentsDirectEditing().isTrue() &&\n            capability.getRichDocumentsTemplatesAvailable().isTrue() &&\n            !file.isEncrypted()) {\n            binding.templates.setVisibility(View.VISIBLE);\n        }\n\n        String json = new ArbitraryDataProviderImpl(getContext())\n            .getValue(user, ArbitraryDataProvider.DIRECT_EDITING);\n\n        if (!json.isEmpty() &&\n            !file.isEncrypted()) {\n            DirectEditing directEditing = new Gson().fromJson(json, DirectEditing.class);\n\n            if (!directEditing.getCreators().isEmpty()) {\n                binding.creatorsContainer.setVisibility(View.VISIBLE);\n\n                for (Creator creator : directEditing.getCreators().values()) {\n                    FileListActionsBottomSheetCreatorBinding creatorViewBinding =\n                        FileListActionsBottomSheetCreatorBinding.inflate(getLayoutInflater());\n\n                    View creatorView = creatorViewBinding.getRoot();\n\n                    creatorViewBinding.creatorName.setText(\n                        String.format(fileActivity.getString(R.string.editor_placeholder),\n                                      fileActivity.getString(R.string.create_new),\n                                      creator.getName()));\n\n                    creatorViewBinding.creatorThumbnail.setImageDrawable(\n                        MimeTypeUtil.getFileTypeIcon(creator.getMimetype(),\n                                                     creator.getExtension(),\n                                                     creatorViewBinding.creatorThumbnail.getContext(),\n                                                     viewThemeUtils));\n\n                    creatorView.setOnClickListener(v -> {\n                        actions.showTemplate(creator, creatorViewBinding.creatorName.getText().toString());\n                        dismiss();\n                    });\n\n                    binding.creators.addView(creatorView);\n                }\n            }\n        }\n\n        if (!deviceInfo.hasCamera(getContext())) {\n            binding.menuDirectCameraUpload.setVisibility(View.GONE);\n        }\n\n        // create rich workspace\n        if (editorUtils.isEditorAvailable(user,\n                                          MimeTypeUtil.MIMETYPE_TEXT_MARKDOWN) &&\n            file != null && !file.isEncrypted()) {\n            // richWorkspace\n            // == \"\": no info set -> show button\n            // == null: disabled on server side -> hide button\n            // != \"\": info set -> hide button\n            if (file.getRichWorkspace() == null || !\"\".equals(file.getRichWorkspace())) {\n                binding.menuCreateRichWorkspace.setVisibility(View.GONE);\n                binding.menuCreateRichWorkspaceDivider.setVisibility(View.GONE);\n            } else {\n                binding.menuCreateRichWorkspace.setVisibility(View.VISIBLE);\n                binding.menuCreateRichWorkspaceDivider.setVisibility(View.VISIBLE);\n            }\n        } else {\n            binding.menuCreateRichWorkspace.setVisibility(View.GONE);\n            binding.menuCreateRichWorkspaceDivider.setVisibility(View.GONE);\n        }\n\n        setupClickListener();\n        filterActionsForOfflineOperations();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    binding = FileListActionsBottomSheetFragmentBinding.inflate(getLayoutInflater())\n    view = binding.root\n\n    viewThemeUtils.platform.colorImageView(binding.menuIconUploadFiles, colorRole: .primary)\n    viewThemeUtils.platform.colorImageView(binding.menuIconUploadFromApp, colorRole: .primary)\n    viewThemeUtils.platform.colorImageView(binding.menuIconDirectCameraUpload, colorRole: .primary)\n    viewThemeUtils.platform.colorImageView(binding.menuIconScanDocUpload, colorRole: .primary)\n    viewThemeUtils.platform.colorImageView(binding.menuIconMkdir, colorRole: .primary)\n    viewThemeUtils.platform.colorImageView(binding.menuIconAddFolderInfo, colorRole: .primary)\n\n    binding.addToCloud.text = String(format: NSLocalizedString(\"add_to_cloud\", comment: \"\"),\n                                     themeUtils.getDefaultDisplayNameForRootFolder(context: self))\n\n    if let capability = fileActivity.getCapabilities(),\n       capability.getRichDocuments().isTrue(),\n       capability.getRichDocumentsDirectEditing().isTrue(),\n       capability.getRichDocumentsTemplatesAvailable().isTrue(),\n       !file.isEncrypted() {\n        binding.templates.isHidden = false\n    }\n\n    let json = ArbitraryDataProviderImpl(context: self)\n        .getValue(user, key: ArbitraryDataProvider.DIRECT_EDITING)\n\n    if !json.isEmpty,\n       !file.isEncrypted() {\n        let directEditing = try? JSONDecoder().decode(DirectEditing.self, from: Data(json.utf8))\n\n        if let creators = directEditing?.getCreators(), !creators.isEmpty {\n            binding.creatorsContainer.isHidden = false\n\n            for creator in creators.values {\n                let creatorViewBinding = FileListActionsBottomSheetCreatorBinding.inflate(getLayoutInflater())\n                let creatorView = creatorViewBinding.root\n\n                creatorViewBinding.creatorName.text = String(format: NSLocalizedString(\"editor_placeholder\", comment: \"\"),\n                                                             NSLocalizedString(\"create_new\", comment: \"\"),\n                                                             creator.getName())\n\n                creatorViewBinding.creatorThumbnail.image = MimeTypeUtil.getFileTypeIcon(mimeType: creator.getMimetype(),\n                                                                                         extension: creator.getExtension(),\n                                                                                         context: creatorViewBinding.creatorThumbnail.context,\n                                                                                         viewThemeUtils: viewThemeUtils)\n\n                creatorView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(creatorTapped(_:))))\n                binding.creators.addSubview(creatorView)\n            }\n        }\n    }\n\n    if !deviceInfo.hasCamera(context: self) {\n        binding.menuDirectCameraUpload.isHidden = true\n    }\n\n    if editorUtils.isEditorAvailable(user: user, mimeType: MimeTypeUtil.MIMETYPE_TEXT_MARKDOWN),\n       let file = file, !file.isEncrypted() {\n        if file.getRichWorkspace() == nil || file.getRichWorkspace() != \"\" {\n            binding.menuCreateRichWorkspace.isHidden = true\n            binding.menuCreateRichWorkspaceDivider.isHidden = true\n        } else {\n            binding.menuCreateRichWorkspace.isHidden = false\n            binding.menuCreateRichWorkspaceDivider.isHidden = false\n        }\n    } else {\n        binding.menuCreateRichWorkspace.isHidden = true\n        binding.menuCreateRichWorkspaceDivider.isHidden = true\n    }\n\n    setupClickListener()\n    filterActionsForOfflineOperations()\n}\n\n@objc func creatorTapped(_ sender: UITapGestureRecognizer) {\n    if let creatorView = sender.view as? FileListActionsBottomSheetCreatorBinding {\n        actions.showTemplate(creator: creator, name: creatorView.creatorName.text ?? \"\")\n        dismiss(animated: true, completion: nil)\n    }\n}\n```"
    },
    {
        "method_name": "setupClickListener",
        "method_code": "private void setupClickListener() {\n        binding.menuCreateRichWorkspace.setOnClickListener(v -> {\n            actions.createRichWorkspace();\n            dismiss();\n        });\n\n        binding.menuMkdir.setOnClickListener(v -> {\n            actions.createFolder();\n            dismiss();\n        });\n\n        binding.menuUploadFromApp.setOnClickListener(v -> {\n            actions.uploadFromApp();\n            dismiss();\n        });\n\n        binding.menuDirectCameraUpload.setOnClickListener(v -> {\n            actions.directCameraUpload();\n            dismiss();\n        });\n\n        if (appScanOptionalFeature.isAvailable()) {\n            binding.menuScanDocUpload.setOnClickListener(v -> {\n                actions.scanDocUpload();\n                dismiss();\n            });\n        } else {\n            binding.menuScanDocUpload.setVisibility(View.GONE);\n        }\n\n        binding.menuUploadFiles.setOnClickListener(v -> {\n            actions.uploadFiles();\n            dismiss();\n        });\n\n        binding.menuNewDocument.setOnClickListener(v -> {\n            actions.newDocument();\n            dismiss();\n        });\n\n        binding.menuNewSpreadsheet.setOnClickListener(v -> {\n            actions.newSpreadsheet();\n            dismiss();\n        });\n\n        binding.menuNewPresentation.setOnClickListener(v -> {\n            actions.newPresentation();\n            dismiss();\n        });\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setupClickListener from OCFileListBottomSheetDialog.java into Swift.\n\n        Input:\n\n        Method Name: setupClickListener\n\n        Method Code: private void setupClickListener() {\n        binding.menuCreateRichWorkspace.setOnClickListener(v -> {\n            actions.createRichWorkspace();\n            dismiss();\n        });\n\n        binding.menuMkdir.setOnClickListener(v -> {\n            actions.createFolder();\n            dismiss();\n        });\n\n        binding.menuUploadFromApp.setOnClickListener(v -> {\n            actions.uploadFromApp();\n            dismiss();\n        });\n\n        binding.menuDirectCameraUpload.setOnClickListener(v -> {\n            actions.directCameraUpload();\n            dismiss();\n        });\n\n        if (appScanOptionalFeature.isAvailable()) {\n            binding.menuScanDocUpload.setOnClickListener(v -> {\n                actions.scanDocUpload();\n                dismiss();\n            });\n        } else {\n            binding.menuScanDocUpload.setVisibility(View.GONE);\n        }\n\n        binding.menuUploadFiles.setOnClickListener(v -> {\n            actions.uploadFiles();\n            dismiss();\n        });\n\n        binding.menuNewDocument.setOnClickListener(v -> {\n            actions.newDocument();\n            dismiss();\n        });\n\n        binding.menuNewSpreadsheet.setOnClickListener(v -> {\n            actions.newSpreadsheet();\n            dismiss();\n        });\n\n        binding.menuNewPresentation.setOnClickListener(v -> {\n            actions.newPresentation();\n            dismiss();\n        });\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setupClickListener() {\n    binding.menuCreateRichWorkspace.addTarget(self, action: #selector(createRichWorkspace), for: .touchUpInside)\n    binding.menuMkdir.addTarget(self, action: #selector(createFolder), for: .touchUpInside)\n    binding.menuUploadFromApp.addTarget(self, action: #selector(uploadFromApp), for: .touchUpInside)\n    binding.menuDirectCameraUpload.addTarget(self, action: #selector(directCameraUpload), for: .touchUpInside)\n\n    if appScanOptionalFeature.isAvailable() {\n        binding.menuScanDocUpload.addTarget(self, action: #selector(scanDocUpload), for: .touchUpInside)\n    } else {\n        binding.menuScanDocUpload.isHidden = true\n    }\n\n    binding.menuUploadFiles.addTarget(self, action: #selector(uploadFiles), for: .touchUpInside)\n    binding.menuNewDocument.addTarget(self, action: #selector(newDocument), for: .touchUpInside)\n    binding.menuNewSpreadsheet.addTarget(self, action: #selector(newSpreadsheet), for: .touchUpInside)\n    binding.menuNewPresentation.addTarget(self, action: #selector(newPresentation), for: .touchUpInside)\n}\n\n@objc private func createRichWorkspace() {\n    actions.createRichWorkspace()\n    dismiss()\n}\n\n@objc private func createFolder() {\n    actions.createFolder()\n    dismiss()\n}\n\n@objc private func uploadFromApp() {\n    actions.uploadFromApp()\n    dismiss()\n}\n\n@objc private func directCameraUpload() {\n    actions.directCameraUpload()\n    dismiss()\n}\n\n@objc private func scanDocUpload() {\n    actions.scanDocUpload()\n    dismiss()\n}\n\n@objc private func uploadFiles() {\n    actions.uploadFiles()\n    dismiss()\n}\n\n@objc private func newDocument() {\n    actions.newDocument()\n    dismiss()\n}\n\n@objc private func newSpreadsheet() {\n    actions.newSpreadsheet()\n    dismiss()\n}\n\n@objc private func newPresentation() {\n    actions.newPresentation()\n    dismiss()\n}\n```"
    },
    {
        "method_name": "filterActionsForOfflineOperations",
        "method_code": "private void filterActionsForOfflineOperations() {\n        if (file == null) return;\n\n        fileActivity.connectivityService.isNetworkAndServerAvailable(result -> {\n            if (file.isRootDirectory()) {\n                return;\n            }\n\n            if (!result || file.isOfflineOperation()) {\n                binding.menuCreateRichWorkspace.setVisibility(View.GONE);\n                binding.menuUploadFromApp.setVisibility(View.GONE);\n                binding.menuDirectCameraUpload.setVisibility(View.GONE);\n                binding.menuScanDocUpload.setVisibility(View.GONE);\n                binding.menuNewDocument.setVisibility(View.GONE);\n                binding.menuNewSpreadsheet.setVisibility(View.GONE);\n                binding.menuNewPresentation.setVisibility(View.GONE);\n                binding.creatorsContainer.setVisibility(View.GONE);\n            }\n        });\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled filterActionsForOfflineOperations from OCFileListBottomSheetDialog.java into Swift.\n\n        Input:\n\n        Method Name: filterActionsForOfflineOperations\n\n        Method Code: private void filterActionsForOfflineOperations() {\n        if (file == null) return;\n\n        fileActivity.connectivityService.isNetworkAndServerAvailable(result -> {\n            if (file.isRootDirectory()) {\n                return;\n            }\n\n            if (!result || file.isOfflineOperation()) {\n                binding.menuCreateRichWorkspace.setVisibility(View.GONE);\n                binding.menuUploadFromApp.setVisibility(View.GONE);\n                binding.menuDirectCameraUpload.setVisibility(View.GONE);\n                binding.menuScanDocUpload.setVisibility(View.GONE);\n                binding.menuNewDocument.setVisibility(View.GONE);\n                binding.menuNewSpreadsheet.setVisibility(View.GONE);\n                binding.menuNewPresentation.setVisibility(View.GONE);\n                binding.creatorsContainer.setVisibility(View.GONE);\n            }\n        });\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func filterActionsForOfflineOperations() {\n    guard let file = file else { return }\n\n    fileActivity.connectivityService.isNetworkAndServerAvailable { result in\n        if file.isRootDirectory() {\n            return\n        }\n\n        if !result || file.isOfflineOperation() {\n            binding.menuCreateRichWorkspace.isHidden = true\n            binding.menuUploadFromApp.isHidden = true\n            binding.menuDirectCameraUpload.isHidden = true\n            binding.menuScanDocUpload.isHidden = true\n            binding.menuNewDocument.isHidden = true\n            binding.menuNewSpreadsheet.isHidden = true\n            binding.menuNewPresentation.isHidden = true\n            binding.creatorsContainer.isHidden = true\n        }\n    }\n}\n```"
    },
    {
        "method_name": "onStop",
        "method_code": "@Override\n    protected void onStop() {\n        super.onStop();\n        binding = null;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onStop from OCFileListBottomSheetDialog.java into Swift.\n\n        Input:\n\n        Method Name: onStop\n\n        Method Code: @Override\n    protected void onStop() {\n        super.onStop();\n        binding = null;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n    binding = nil\n}\n```"
    }
]