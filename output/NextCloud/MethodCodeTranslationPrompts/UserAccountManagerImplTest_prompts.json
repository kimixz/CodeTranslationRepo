[
    {
        "method_name": "setUp",
        "method_code": "@Before\n    public void setUp() {\n        accountManager = AccountManager.get(targetContext);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setUp from UserAccountManagerImplTest.java into Swift.\n\n        Input:\n\n        Method Name: setUp\n\n        Method Code: @Before\n    public void setUp() {\n        accountManager = AccountManager.get(targetContext);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func setUp() {\n    accountManager = AccountManager.get(targetContext)\n}\n```"
    },
    {
        "method_name": "updateOneAccount",
        "method_code": "@Test\n    public void updateOneAccount() {\n        AppPreferences appPreferences = AppPreferencesImpl.fromContext(targetContext);\n        UserAccountManagerImpl sut = new UserAccountManagerImpl(targetContext, accountManager);\n        assertEquals(1, sut.getAccounts().length);\n        assertFalse(appPreferences.isUserIdMigrated());\n\n        Account account = sut.getAccounts()[0];\n\n        // for testing remove userId\n        accountManager.setUserData(account, AccountUtils.Constants.KEY_USER_ID, null);\n        assertNull(accountManager.getUserData(account, AccountUtils.Constants.KEY_USER_ID));\n\n        boolean success = sut.migrateUserId();\n        assertTrue(success);\n\n        Bundle arguments = androidx.test.platform.app.InstrumentationRegistry.getArguments();\n        String userId = arguments.getString(\"TEST_SERVER_USERNAME\");\n\n        // assume that userId == loginname (as we manually set it)\n        assertEquals(userId, accountManager.getUserData(account, AccountUtils.Constants.KEY_USER_ID));\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled updateOneAccount from UserAccountManagerImplTest.java into Swift.\n\n        Input:\n\n        Method Name: updateOneAccount\n\n        Method Code: @Test\n    public void updateOneAccount() {\n        AppPreferences appPreferences = AppPreferencesImpl.fromContext(targetContext);\n        UserAccountManagerImpl sut = new UserAccountManagerImpl(targetContext, accountManager);\n        assertEquals(1, sut.getAccounts().length);\n        assertFalse(appPreferences.isUserIdMigrated());\n\n        Account account = sut.getAccounts()[0];\n\n        // for testing remove userId\n        accountManager.setUserData(account, AccountUtils.Constants.KEY_USER_ID, null);\n        assertNull(accountManager.getUserData(account, AccountUtils.Constants.KEY_USER_ID));\n\n        boolean success = sut.migrateUserId();\n        assertTrue(success);\n\n        Bundle arguments = androidx.test.platform.app.InstrumentationRegistry.getArguments();\n        String userId = arguments.getString(\"TEST_SERVER_USERNAME\");\n\n        // assume that userId == loginname (as we manually set it)\n        assertEquals(userId, accountManager.getUserData(account, AccountUtils.Constants.KEY_USER_ID));\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport XCTest\n@testable import YourAppModule\n\nclass UserAccountManagerImplTest: XCTestCase {\n\n    func testUpdateOneAccount() {\n        let appPreferences = AppPreferencesImpl.fromContext(targetContext)\n        let sut = UserAccountManagerImpl(targetContext: targetContext, accountManager: accountManager)\n        XCTAssertEqual(1, sut.getAccounts().count)\n        XCTAssertFalse(appPreferences.isUserIdMigrated())\n\n        let account = sut.getAccounts()[0]\n\n        // for testing remove userId\n        accountManager.setUserData(account, key: AccountUtils.Constants.KEY_USER_ID, value: nil)\n        XCTAssertNil(accountManager.getUserData(account, key: AccountUtils.Constants.KEY_USER_ID))\n\n        let success = sut.migrateUserId()\n        XCTAssertTrue(success)\n\n        let arguments = ProcessInfo.processInfo.environment\n        let userId = arguments[\"TEST_SERVER_USERNAME\"]\n\n        // assume that userId == loginname (as we manually set it)\n        XCTAssertEqual(userId, accountManager.getUserData(account, key: AccountUtils.Constants.KEY_USER_ID))\n    }\n}\n```"
    },
    {
        "method_name": "checkName",
        "method_code": "@Test\n    public void checkName() {\n        UserAccountManagerImpl sut = new UserAccountManagerImpl(targetContext, accountManager);\n\n        Account owner = new Account(\"John@nextcloud.local\", \"nextcloud\");\n        Account account1 = new Account(\"John@nextcloud.local\", \"nextcloud\");\n        Account account2 = new Account(\"john@nextcloud.local\", \"nextcloud\");\n\n        OCFile file1 = new OCFile(\"/test1.pdf\");\n        file1.setOwnerId(\"John\");\n\n        assertTrue(sut.accountOwnsFile(file1, owner));\n        assertTrue(sut.accountOwnsFile(file1, account1));\n        assertTrue(sut.accountOwnsFile(file1, account2));\n\n        file1.setOwnerId(\"john\");\n        assertTrue(sut.accountOwnsFile(file1, owner));\n        assertTrue(sut.accountOwnsFile(file1, account1));\n        assertTrue(sut.accountOwnsFile(file1, account2));\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled checkName from UserAccountManagerImplTest.java into Swift.\n\n        Input:\n\n        Method Name: checkName\n\n        Method Code: @Test\n    public void checkName() {\n        UserAccountManagerImpl sut = new UserAccountManagerImpl(targetContext, accountManager);\n\n        Account owner = new Account(\"John@nextcloud.local\", \"nextcloud\");\n        Account account1 = new Account(\"John@nextcloud.local\", \"nextcloud\");\n        Account account2 = new Account(\"john@nextcloud.local\", \"nextcloud\");\n\n        OCFile file1 = new OCFile(\"/test1.pdf\");\n        file1.setOwnerId(\"John\");\n\n        assertTrue(sut.accountOwnsFile(file1, owner));\n        assertTrue(sut.accountOwnsFile(file1, account1));\n        assertTrue(sut.accountOwnsFile(file1, account2));\n\n        file1.setOwnerId(\"john\");\n        assertTrue(sut.accountOwnsFile(file1, owner));\n        assertTrue(sut.accountOwnsFile(file1, account1));\n        assertTrue(sut.accountOwnsFile(file1, account2));\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport XCTest\n\nclass UserAccountManagerImplTest: XCTestCase {\n\n    func testCheckName() {\n        let sut = UserAccountManagerImpl(targetContext: targetContext, accountManager: accountManager)\n\n        let owner = Account(username: \"John@nextcloud.local\", type: \"nextcloud\")\n        let account1 = Account(username: \"John@nextcloud.local\", type: \"nextcloud\")\n        let account2 = Account(username: \"john@nextcloud.local\", type: \"nextcloud\")\n\n        let file1 = OCFile(path: \"/test1.pdf\")\n        file1.setOwnerId(\"John\")\n\n        XCTAssertTrue(sut.accountOwnsFile(file1, owner))\n        XCTAssertTrue(sut.accountOwnsFile(file1, account1))\n        XCTAssertTrue(sut.accountOwnsFile(file1, account2))\n\n        file1.setOwnerId(\"john\")\n        XCTAssertTrue(sut.accountOwnsFile(file1, owner))\n        XCTAssertTrue(sut.accountOwnsFile(file1, account1))\n        XCTAssertTrue(sut.accountOwnsFile(file1, account2))\n    }\n}\n```"
    }
]