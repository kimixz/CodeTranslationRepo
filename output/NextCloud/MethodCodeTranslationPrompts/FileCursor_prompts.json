[
    {
        "method_name": "setLoadingTask",
        "method_code": "public void setLoadingTask(AsyncTask<?, ?, ?> task) {\n        this.loadingTask = task;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setLoadingTask from FileCursor.java into Swift.\n\n        Input:\n\n        Method Name: setLoadingTask\n\n        Method Code: public void setLoadingTask(AsyncTask<?, ?, ?> task) {\n        this.loadingTask = task;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setLoadingTask(task: AnyObject) {\n    self.loadingTask = task\n}\n```"
    },
    {
        "method_name": "setExtras",
        "method_code": "@Override\n    public void setExtras(Bundle extras) {\n        this.extra = extras;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setExtras from FileCursor.java into Swift.\n\n        Input:\n\n        Method Name: setExtras\n\n        Method Code: @Override\n    public void setExtras(Bundle extras) {\n        this.extra = extras;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func setExtras(_ extras: Bundle) {\n    self.extra = extras\n}\n```"
    },
    {
        "method_name": "getExtras",
        "method_code": "@Override\n    public Bundle getExtras() {\n        return extra;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getExtras from FileCursor.java into Swift.\n\n        Input:\n\n        Method Name: getExtras\n\n        Method Code: @Override\n    public Bundle getExtras() {\n        return extra;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func getExtras() -> Bundle {\n    return extra\n}\n```"
    },
    {
        "method_name": "close",
        "method_code": "@Override\n    public void close() {\n        super.close();\n        if (loadingTask != null && loadingTask.getStatus() != AsyncTask.Status.FINISHED) {\n            loadingTask.cancel(false);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled close from FileCursor.java into Swift.\n\n        Input:\n\n        Method Name: close\n\n        Method Code: @Override\n    public void close() {\n        super.close();\n        if (loadingTask != null && loadingTask.getStatus() != AsyncTask.Status.FINISHED) {\n            loadingTask.cancel(false);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func close() {\n    super.close()\n    if let task = loadingTask, task.status != .finished {\n        task.cancel()\n    }\n}\n```"
    },
    {
        "method_name": "addFile",
        "method_code": "public void addFile(DocumentsStorageProvider.Document document) {\n        if (document == null) {\n            return;\n        }\n\n        OCFile file = document.getFile();\n\n        final int iconRes = MimeTypeUtil.getFileTypeIconId(file.getMimeType(), file.getFileName());\n        final String mimeType = file.isFolder() ? Document.MIME_TYPE_DIR : file.getMimeType();\n        int flags = Document.FLAG_SUPPORTS_DELETE |\n            Document.FLAG_SUPPORTS_WRITE |\n            (MimeTypeUtil.isImage(file) ? Document.FLAG_SUPPORTS_THUMBNAIL : 0) |\n            Document.FLAG_SUPPORTS_COPY | Document.FLAG_SUPPORTS_MOVE | Document.FLAG_SUPPORTS_REMOVE;\n\n        if (file.isFolder()) {\n            flags = flags | Document.FLAG_DIR_SUPPORTS_CREATE;\n        }\n\n        flags = Document.FLAG_SUPPORTS_RENAME | flags;\n\n        newRow().add(Document.COLUMN_DOCUMENT_ID, document.getDocumentId())\n                .add(Document.COLUMN_DISPLAY_NAME, file.getFileName())\n                .add(Document.COLUMN_LAST_MODIFIED, file.getModificationTimestamp())\n                .add(Document.COLUMN_SIZE, file.getFileLength())\n                .add(Document.COLUMN_FLAGS, flags)\n                .add(Document.COLUMN_ICON, iconRes)\n                .add(Document.COLUMN_MIME_TYPE, mimeType);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled addFile from FileCursor.java into Swift.\n\n        Input:\n\n        Method Name: addFile\n\n        Method Code: public void addFile(DocumentsStorageProvider.Document document) {\n        if (document == null) {\n            return;\n        }\n\n        OCFile file = document.getFile();\n\n        final int iconRes = MimeTypeUtil.getFileTypeIconId(file.getMimeType(), file.getFileName());\n        final String mimeType = file.isFolder() ? Document.MIME_TYPE_DIR : file.getMimeType();\n        int flags = Document.FLAG_SUPPORTS_DELETE |\n            Document.FLAG_SUPPORTS_WRITE |\n            (MimeTypeUtil.isImage(file) ? Document.FLAG_SUPPORTS_THUMBNAIL : 0) |\n            Document.FLAG_SUPPORTS_COPY | Document.FLAG_SUPPORTS_MOVE | Document.FLAG_SUPPORTS_REMOVE;\n\n        if (file.isFolder()) {\n            flags = flags | Document.FLAG_DIR_SUPPORTS_CREATE;\n        }\n\n        flags = Document.FLAG_SUPPORTS_RENAME | flags;\n\n        newRow().add(Document.COLUMN_DOCUMENT_ID, document.getDocumentId())\n                .add(Document.COLUMN_DISPLAY_NAME, file.getFileName())\n                .add(Document.COLUMN_LAST_MODIFIED, file.getModificationTimestamp())\n                .add(Document.COLUMN_SIZE, file.getFileLength())\n                .add(Document.COLUMN_FLAGS, flags)\n                .add(Document.COLUMN_ICON, iconRes)\n                .add(Document.COLUMN_MIME_TYPE, mimeType);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc addFile(document: DocumentsStorageProvider.Document?) {\n    guard let document = document else {\n        return\n    }\n\n    let file = document.getFile()\n\n    let iconRes = MimeTypeUtil.getFileTypeIconId(mimeType: file.getMimeType(), fileName: file.getFileName())\n    let mimeType = file.isFolder() ? Document.MIME_TYPE_DIR : file.getMimeType()\n    var flags = Document.FLAG_SUPPORTS_DELETE |\n        Document.FLAG_SUPPORTS_WRITE |\n        (MimeTypeUtil.isImage(file) ? Document.FLAG_SUPPORTS_THUMBNAIL : 0) |\n        Document.FLAG_SUPPORTS_COPY | Document.FLAG_SUPPORTS_MOVE | Document.FLAG_SUPPORTS_REMOVE\n\n    if file.isFolder() {\n        flags = flags | Document.FLAG_DIR_SUPPORTS_CREATE\n    }\n\n    flags = Document.FLAG_SUPPORTS_RENAME | flags\n\n    newRow().add(Document.COLUMN_DOCUMENT_ID, document.getDocumentId())\n            .add(Document.COLUMN_DISPLAY_NAME, file.getFileName())\n            .add(Document.COLUMN_LAST_MODIFIED, file.getModificationTimestamp())\n            .add(Document.COLUMN_SIZE, file.getFileLength())\n            .add(Document.COLUMN_FLAGS, flags)\n            .add(Document.COLUMN_ICON, iconRes)\n            .add(Document.COLUMN_MIME_TYPE, mimeType)\n}\n```"
    }
]