[
    {
        "method_name": "onAttach",
        "method_code": "@Override\n    public void onAttach(@NonNull Context context) {\n        super.onAttach(context);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onAttach from LocalFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onAttach\n\n        Method Code: @Override\n    public void onAttach(@NonNull Context context) {\n        super.onAttach(context);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func didMove(toParent parent: UIViewController?) {\n    super.didMove(toParent: parent)\n}\n```"
    },
    {
        "method_name": "onCreate",
        "method_code": "@Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setHasOptionsMenu(true);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreate from LocalFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onCreate\n\n        Method Code: @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setHasOptionsMenu(true);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    self.navigationItem.rightBarButtonItem = self.editButtonItem\n}\n```"
    },
    {
        "method_name": "onAttach",
        "method_code": "@Override\n    public void onAttach(@NonNull Activity activity) {\n        super.onAttach(activity);\n        try {\n            mContainerActivity = (ContainerActivity) activity;\n        } catch (ClassCastException e) {\n            throw new IllegalArgumentException(activity.toString() + \" must implement \" +\n                                                   LocalFileListFragment.ContainerActivity.class.getSimpleName(), e);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onAttach from LocalFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onAttach\n\n        Method Code: @Override\n    public void onAttach(@NonNull Activity activity) {\n        super.onAttach(activity);\n        try {\n            mContainerActivity = (ContainerActivity) activity;\n        } catch (ClassCastException e) {\n            throw new IllegalArgumentException(activity.toString() + \" must implement \" +\n                                                   LocalFileListFragment.ContainerActivity.class.getSimpleName(), e);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func didMove(toParent parent: UIViewController?) {\n    super.didMove(toParent: parent)\n    if let containerActivity = parent as? ContainerActivity {\n        mContainerActivity = containerActivity\n    } else {\n        fatalError(\"\\(String(describing: parent)) must implement \\(String(describing: ContainerActivity.self))\")\n    }\n}\n```"
    },
    {
        "method_name": "onCreateView",
        "method_code": "@Override\n    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        Log_OC.i(TAG, \"onCreateView() start\");\n        View v = super.onCreateView(inflater, container, savedInstanceState);\n\n        if (!mContainerActivity.isFolderPickerMode()) {\n            setMessageForEmptyList(R.string.file_list_empty_headline, R.string.local_file_list_empty,\n                    R.drawable.ic_list_empty_folder, true);\n        } else {\n            setMessageForEmptyList(R.string.folder_list_empty_headline, R.string.local_folder_list_empty,\n                    R.drawable.ic_list_empty_folder, true);\n        }\n\n        setSwipeEnabled(false); // Disable pull-to-refresh\n\n        Log_OC.i(TAG, \"onCreateView() end\");\n        return v;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreateView from LocalFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onCreateView\n\n        Method Code: @Override\n    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        Log_OC.i(TAG, \"onCreateView() start\");\n        View v = super.onCreateView(inflater, container, savedInstanceState);\n\n        if (!mContainerActivity.isFolderPickerMode()) {\n            setMessageForEmptyList(R.string.file_list_empty_headline, R.string.local_file_list_empty,\n                    R.drawable.ic_list_empty_folder, true);\n        } else {\n            setMessageForEmptyList(R.string.folder_list_empty_headline, R.string.local_folder_list_empty,\n                    R.drawable.ic_list_empty_folder, true);\n        }\n\n        setSwipeEnabled(false); // Disable pull-to-refresh\n\n        Log_OC.i(TAG, \"onCreateView() end\");\n        return v;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onCreateView(_ inflater: LayoutInflater, _ container: ViewGroup?, _ savedInstanceState: Bundle?) -> View? {\n    Log_OC.i(TAG, \"onCreateView() start\")\n    let v = super.onCreateView(inflater, container, savedInstanceState)\n\n    if !mContainerActivity.isFolderPickerMode() {\n        setMessageForEmptyList(R.string.file_list_empty_headline, R.string.local_file_list_empty, R.drawable.ic_list_empty_folder, true)\n    } else {\n        setMessageForEmptyList(R.string.folder_list_empty_headline, R.string.local_folder_list_empty, R.drawable.ic_list_empty_folder, true)\n    }\n\n    setSwipeEnabled(false) // Disable pull-to-refresh\n\n    Log_OC.i(TAG, \"onCreateView() end\")\n    return v\n}\n```"
    },
    {
        "method_name": "onActivityCreated",
        "method_code": "@Override\n    public void onActivityCreated(Bundle savedInstanceState) {\n        Log_OC.i(TAG, \"onActivityCreated() start\");\n\n        super.onActivityCreated(savedInstanceState);\n\n        mAdapter = new LocalFileListAdapter(mContainerActivity.isFolderPickerMode(),\n                                            mContainerActivity.getInitialDirectory(),\n                                            this,\n                                            preferences,\n                                            getActivity(),\n                                            viewThemeUtils,\n                                            mContainerActivity.isWithinEncryptedFolder());\n        setRecyclerViewAdapter(mAdapter);\n\n        listDirectory(mContainerActivity.getInitialDirectory());\n\n        mSortButton.setOnClickListener(v -> {\n            FileSortOrder sortOrder = preferences.getSortOrderByType(FileSortOrder.Type.localFileListView);\n            openSortingOrderDialogFragment(requireFragmentManager(), sortOrder);\n        });\n\n        FileSortOrder sortOrder = preferences.getSortOrderByType(FileSortOrder.Type.localFileListView);\n        mSortButton.setText(DisplayUtils.getSortOrderStringId(sortOrder));\n\n        setGridSwitchButton();\n        mSwitchGridViewButton.setOnClickListener(v -> {\n            if (isGridEnabled()) {\n                switchToListView();\n            } else {\n                switchToGridView();\n            }\n            setGridSwitchButton();\n        });\n\n        Log_OC.i(TAG, \"onActivityCreated() stop\");\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onActivityCreated from LocalFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onActivityCreated\n\n        Method Code: @Override\n    public void onActivityCreated(Bundle savedInstanceState) {\n        Log_OC.i(TAG, \"onActivityCreated() start\");\n\n        super.onActivityCreated(savedInstanceState);\n\n        mAdapter = new LocalFileListAdapter(mContainerActivity.isFolderPickerMode(),\n                                            mContainerActivity.getInitialDirectory(),\n                                            this,\n                                            preferences,\n                                            getActivity(),\n                                            viewThemeUtils,\n                                            mContainerActivity.isWithinEncryptedFolder());\n        setRecyclerViewAdapter(mAdapter);\n\n        listDirectory(mContainerActivity.getInitialDirectory());\n\n        mSortButton.setOnClickListener(v -> {\n            FileSortOrder sortOrder = preferences.getSortOrderByType(FileSortOrder.Type.localFileListView);\n            openSortingOrderDialogFragment(requireFragmentManager(), sortOrder);\n        });\n\n        FileSortOrder sortOrder = preferences.getSortOrderByType(FileSortOrder.Type.localFileListView);\n        mSortButton.setText(DisplayUtils.getSortOrderStringId(sortOrder));\n\n        setGridSwitchButton();\n        mSwitchGridViewButton.setOnClickListener(v -> {\n            if (isGridEnabled()) {\n                switchToListView();\n            } else {\n                switchToGridView();\n            }\n            setGridSwitchButton();\n        });\n\n        Log_OC.i(TAG, \"onActivityCreated() stop\");\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    Log_OC.i(TAG, \"onActivityCreated() start\")\n\n    mAdapter = LocalFileListAdapter(\n        isFolderPickerMode: mContainerActivity.isFolderPickerMode(),\n        initialDirectory: mContainerActivity.getInitialDirectory(),\n        fragment: self,\n        preferences: preferences,\n        activity: getActivity(),\n        viewThemeUtils: viewThemeUtils,\n        isWithinEncryptedFolder: mContainerActivity.isWithinEncryptedFolder()\n    )\n    setRecyclerViewAdapter(mAdapter)\n\n    listDirectory(mContainerActivity.getInitialDirectory())\n\n    mSortButton.setOnClickListener { _ in\n        let sortOrder = preferences.getSortOrderByType(.localFileListView)\n        openSortingOrderDialogFragment(requireFragmentManager(), sortOrder)\n    }\n\n    let sortOrder = preferences.getSortOrderByType(.localFileListView)\n    mSortButton.setTitle(DisplayUtils.getSortOrderStringId(sortOrder), for: .normal)\n\n    setGridSwitchButton()\n    mSwitchGridViewButton.setOnClickListener { _ in\n        if isGridEnabled() {\n            switchToListView()\n        } else {\n            switchToGridView()\n        }\n        setGridSwitchButton()\n    }\n\n    Log_OC.i(TAG, \"onActivityCreated() stop\")\n}\n```"
    },
    {
        "method_name": "onCreateOptionsMenu",
        "method_code": "@Override\n    public void onCreateOptionsMenu(Menu menu, @NonNull MenuInflater inflater) {\n        if (mContainerActivity.isFolderPickerMode()) {\n            menu.removeItem(R.id.action_select_all);\n            menu.removeItem(R.id.action_search);\n        } else {\n            super.onCreateOptionsMenu(menu, inflater);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreateOptionsMenu from LocalFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onCreateOptionsMenu\n\n        Method Code: @Override\n    public void onCreateOptionsMenu(Menu menu, @NonNull MenuInflater inflater) {\n        if (mContainerActivity.isFolderPickerMode()) {\n            menu.removeItem(R.id.action_select_all);\n            menu.removeItem(R.id.action_search);\n        } else {\n            super.onCreateOptionsMenu(menu, inflater);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onCreateOptionsMenu(_ menu: Menu, _ inflater: MenuInflater) {\n    if mContainerActivity.isFolderPickerMode() {\n        menu.removeItem(R.id.action_select_all)\n        menu.removeItem(R.id.action_search)\n    } else {\n        super.onCreateOptionsMenu(menu, inflater)\n    }\n}\n```"
    },
    {
        "method_name": "onItemClicked",
        "method_code": "@Override\n    public void onItemClicked(File file) {\n        if (file != null) {\n            /// Click on a directory\n            if (file.isDirectory()) {\n                // just local updates\n                listDirectory(file);\n                // notify the click to container Activity\n                mContainerActivity.onDirectoryClick(file);\n\n                // save index and top position\n                saveIndexAndTopPosition(mAdapter.getItemPosition(file));\n\n            } else {    /// Click on a file, behave like checkbox was clicked\n                onItemCheckboxClicked(file);\n            }\n\n        } else {\n            Log_OC.w(TAG, \"Null object in ListAdapter!!\");\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onItemClicked from LocalFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onItemClicked\n\n        Method Code: @Override\n    public void onItemClicked(File file) {\n        if (file != null) {\n            /// Click on a directory\n            if (file.isDirectory()) {\n                // just local updates\n                listDirectory(file);\n                // notify the click to container Activity\n                mContainerActivity.onDirectoryClick(file);\n\n                // save index and top position\n                saveIndexAndTopPosition(mAdapter.getItemPosition(file));\n\n            } else {    /// Click on a file, behave like checkbox was clicked\n                onItemCheckboxClicked(file);\n            }\n\n        } else {\n            Log_OC.w(TAG, \"Null object in ListAdapter!!\");\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onItemClicked(file: File?) {\n    if let file = file {\n        if file.isDirectory {\n            listDirectory(file)\n            mContainerActivity.onDirectoryClick(file)\n            saveIndexAndTopPosition(mAdapter.getItemPosition(file))\n        } else {\n            onItemCheckboxClicked(file)\n        }\n    } else {\n        Log_OC.w(TAG, \"Null object in ListAdapter!!\")\n    }\n}\n```"
    },
    {
        "method_name": "onItemCheckboxClicked",
        "method_code": "@Override\n    public void onItemCheckboxClicked(File file) {\n        if (file != null) {\n            if (mAdapter.isCheckedFile(file)) {\n                // uncheck\n                mAdapter.removeCheckedFile(file);\n            } else {\n                // check\n                mAdapter.addCheckedFile(file);\n            }\n\n            mAdapter.notifyItemChanged(mAdapter.getItemPosition(file));\n\n            // notify the change to the container Activity\n            mContainerActivity.onFileClick(file);\n        } else {\n            Log_OC.w(TAG, \"Null object in ListAdapter!!\");\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onItemCheckboxClicked from LocalFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onItemCheckboxClicked\n\n        Method Code: @Override\n    public void onItemCheckboxClicked(File file) {\n        if (file != null) {\n            if (mAdapter.isCheckedFile(file)) {\n                // uncheck\n                mAdapter.removeCheckedFile(file);\n            } else {\n                // check\n                mAdapter.addCheckedFile(file);\n            }\n\n            mAdapter.notifyItemChanged(mAdapter.getItemPosition(file));\n\n            // notify the change to the container Activity\n            mContainerActivity.onFileClick(file);\n        } else {\n            Log_OC.w(TAG, \"Null object in ListAdapter!!\");\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onItemCheckboxClicked(file: File?) {\n    if let file = file {\n        if mAdapter.isCheckedFile(file) {\n            // uncheck\n            mAdapter.removeCheckedFile(file)\n        } else {\n            // check\n            mAdapter.addCheckedFile(file)\n        }\n\n        mAdapter.notifyItemChanged(mAdapter.getItemPosition(file))\n\n        // notify the change to the container Activity\n        mContainerActivity.onFileClick(file)\n    } else {\n        Log_OC.w(TAG, \"Null object in ListAdapter!!\")\n    }\n}\n```"
    },
    {
        "method_name": "onNavigateUp",
        "method_code": "public void onNavigateUp() {\n        File parentDir = null;\n        if (mDirectory != null) {\n            parentDir = mDirectory.getParentFile();  // can be null\n        }\n        listDirectory(parentDir);\n\n        // restore index and top position\n        restoreIndexAndTopPosition();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onNavigateUp from LocalFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onNavigateUp\n\n        Method Code: public void onNavigateUp() {\n        File parentDir = null;\n        if (mDirectory != null) {\n            parentDir = mDirectory.getParentFile();  // can be null\n        }\n        listDirectory(parentDir);\n\n        // restore index and top position\n        restoreIndexAndTopPosition();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onNavigateUp() {\n    var parentDir: File? = nil\n    if let directory = mDirectory {\n        parentDir = directory.parentFile\n    }\n    listDirectory(parentDir)\n    \n    // restore index and top position\n    restoreIndexAndTopPosition()\n}\n```"
    },
    {
        "method_name": "getCurrentDirectory",
        "method_code": "public File getCurrentDirectory() {\n        return mDirectory;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getCurrentDirectory from LocalFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: getCurrentDirectory\n\n        Method Code: public File getCurrentDirectory() {\n        return mDirectory;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getCurrentDirectory() -> File {\n    return mDirectory\n}\n```"
    },
    {
        "method_name": "listDirectory",
        "method_code": "public void listDirectory() {\n        listDirectory(null);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled listDirectory from LocalFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: listDirectory\n\n        Method Code: public void listDirectory() {\n        listDirectory(null);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc listDirectory() {\n    listDirectory(nil)\n}\n```"
    },
    {
        "method_name": "listDirectory",
        "method_code": "public void listDirectory(File directory) {\n\n        // Check input parameters for null\n        if (directory == null) {\n            if (mDirectory != null) {\n                directory = mDirectory;\n            } else {\n                directory = Environment.getExternalStorageDirectory();\n                // TODO be careful with the state of the storage; could not be available\n                if (directory == null) {\n                    return; // no files to show\n                }\n            }\n        }\n\n\n        // if that's not a directory -> List its parent\n        if (!directory.isDirectory()) {\n            Log_OC.w(TAG, \"You see, that is not a directory -> \" + directory);\n            directory = directory.getParentFile();\n        }\n\n        // by now, only files in the same directory will be kept as selected\n        mAdapter.removeAllFilesFromCheckedFiles();\n        mAdapter.swapDirectory(directory);\n\n        mDirectory = directory;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled listDirectory from LocalFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: listDirectory\n\n        Method Code: public void listDirectory(File directory) {\n\n        // Check input parameters for null\n        if (directory == null) {\n            if (mDirectory != null) {\n                directory = mDirectory;\n            } else {\n                directory = Environment.getExternalStorageDirectory();\n                // TODO be careful with the state of the storage; could not be available\n                if (directory == null) {\n                    return; // no files to show\n                }\n            }\n        }\n\n\n        // if that's not a directory -> List its parent\n        if (!directory.isDirectory()) {\n            Log_OC.w(TAG, \"You see, that is not a directory -> \" + directory);\n            directory = directory.getParentFile();\n        }\n\n        // by now, only files in the same directory will be kept as selected\n        mAdapter.removeAllFilesFromCheckedFiles();\n        mAdapter.swapDirectory(directory);\n\n        mDirectory = directory;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc listDirectory(directory: File?) {\n    var directory = directory\n\n    // Check input parameters for null\n    if directory == nil {\n        if mDirectory != nil {\n            directory = mDirectory\n        } else {\n            directory = Environment.getExternalStorageDirectory()\n            // TODO be careful with the state of the storage; could not be available\n            if directory == nil {\n                return // no files to show\n            }\n        }\n    }\n\n    // if that's not a directory -> List its parent\n    if !(directory!.isDirectory) {\n        Log_OC.w(TAG, \"You see, that is not a directory -> \\(directory!)\")\n        directory = directory!.parentFile\n    }\n\n    // by now, only files in the same directory will be kept as selected\n    mAdapter.removeAllFilesFromCheckedFiles()\n    mAdapter.swapDirectory(directory!)\n\n    mDirectory = directory\n}\n```"
    },
    {
        "method_name": "getCheckedFilePaths",
        "method_code": "public String[] getCheckedFilePaths() {\n        return mAdapter.getCheckedFilesPath();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getCheckedFilePaths from LocalFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: getCheckedFilePaths\n\n        Method Code: public String[] getCheckedFilePaths() {\n        return mAdapter.getCheckedFilesPath();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getCheckedFilePaths() -> [String] {\n    return mAdapter.getCheckedFilesPath()\n}\n```"
    },
    {
        "method_name": "getCheckedFilesCount",
        "method_code": "public int getCheckedFilesCount() {\n        return mAdapter.checkedFilesCount();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getCheckedFilesCount from LocalFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: getCheckedFilesCount\n\n        Method Code: public int getCheckedFilesCount() {\n        return mAdapter.checkedFilesCount();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getCheckedFilesCount() -> Int {\n    return mAdapter.checkedFilesCount()\n}\n```"
    },
    {
        "method_name": "getFilesCount",
        "method_code": "public int getFilesCount() {\n        return mAdapter.getFilesCount();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getFilesCount from LocalFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: getFilesCount\n\n        Method Code: public int getFilesCount() {\n        return mAdapter.getFilesCount();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getFilesCount() -> Int {\n    return mAdapter.getFilesCount()\n}\n```"
    },
    {
        "method_name": "sortFiles",
        "method_code": "public void sortFiles(FileSortOrder sortOrder) {\n        mSortButton.setText(DisplayUtils.getSortOrderStringId(sortOrder));\n        mAdapter.setSortOrder(sortOrder);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled sortFiles from LocalFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: sortFiles\n\n        Method Code: public void sortFiles(FileSortOrder sortOrder) {\n        mSortButton.setText(DisplayUtils.getSortOrderStringId(sortOrder));\n        mAdapter.setSortOrder(sortOrder);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc sortFiles(sortOrder: FileSortOrder) {\n    mSortButton.setTitle(DisplayUtils.getSortOrderStringId(sortOrder), for: .normal)\n    mAdapter.setSortOrder(sortOrder)\n}\n```"
    },
    {
        "method_name": "selectAllFiles",
        "method_code": "public void selectAllFiles(boolean select) {\n        LocalFileListAdapter localFileListAdapter = (LocalFileListAdapter) getRecyclerView().getAdapter();\n\n        if (select) {\n            localFileListAdapter.addAllFilesToCheckedFiles();\n        } else {\n            localFileListAdapter.removeAllFilesFromCheckedFiles();\n        }\n\n        for (int i = 0; i < mAdapter.getItemCount(); i++) {\n            mAdapter.notifyItemChanged(i);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled selectAllFiles from LocalFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: selectAllFiles\n\n        Method Code: public void selectAllFiles(boolean select) {\n        LocalFileListAdapter localFileListAdapter = (LocalFileListAdapter) getRecyclerView().getAdapter();\n\n        if (select) {\n            localFileListAdapter.addAllFilesToCheckedFiles();\n        } else {\n            localFileListAdapter.removeAllFilesFromCheckedFiles();\n        }\n\n        for (int i = 0; i < mAdapter.getItemCount(); i++) {\n            mAdapter.notifyItemChanged(i);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc selectAllFiles(select: Bool) {\n    guard let localFileListAdapter = getRecyclerView().adapter as? LocalFileListAdapter else { return }\n\n    if select {\n        localFileListAdapter.addAllFilesToCheckedFiles()\n    } else {\n        localFileListAdapter.removeAllFilesFromCheckedFiles()\n    }\n\n    for i in 0..<mAdapter.itemCount {\n        mAdapter.notifyItemChanged(i)\n    }\n}\n```"
    },
    {
        "method_name": "switchToGridView",
        "method_code": "@Override\n    public void switchToGridView() {\n        mAdapter.setGridView(true);\n        /**\n         * Set recyclerview adapter again to force new view for items. If this is not done\n         * a few items keep their old view.\n         *\n         * https://stackoverflow.com/questions/36495009/force-recyclerview-to-redraw-android\n         */\n        getRecyclerView().setAdapter(mAdapter);\n\n        if (!isGridEnabled()) {\n            RecyclerView.LayoutManager layoutManager;\n            layoutManager = new GridLayoutManager(getContext(), getColumnsCount());\n            ((GridLayoutManager) layoutManager).setSpanSizeLookup(new GridLayoutManager.SpanSizeLookup() {\n                @Override\n                public int getSpanSize(int position) {\n                    if (position == mAdapter.getItemCount() - 1) {\n                        return ((GridLayoutManager) layoutManager).getSpanCount();\n                    } else {\n                        return 1;\n                    }\n                }\n            });\n\n            getRecyclerView().setLayoutManager(layoutManager);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled switchToGridView from LocalFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: switchToGridView\n\n        Method Code: @Override\n    public void switchToGridView() {\n        mAdapter.setGridView(true);\n        /**\n         * Set recyclerview adapter again to force new view for items. If this is not done\n         * a few items keep their old view.\n         *\n         * https://stackoverflow.com/questions/36495009/force-recyclerview-to-redraw-android\n         */\n        getRecyclerView().setAdapter(mAdapter);\n\n        if (!isGridEnabled()) {\n            RecyclerView.LayoutManager layoutManager;\n            layoutManager = new GridLayoutManager(getContext(), getColumnsCount());\n            ((GridLayoutManager) layoutManager).setSpanSizeLookup(new GridLayoutManager.SpanSizeLookup() {\n                @Override\n                public int getSpanSize(int position) {\n                    if (position == mAdapter.getItemCount() - 1) {\n                        return ((GridLayoutManager) layoutManager).getSpanCount();\n                    } else {\n                        return 1;\n                    }\n                }\n            });\n\n            getRecyclerView().setLayoutManager(layoutManager);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func switchToGridView() {\n    mAdapter.setGridView(true)\n    // Set recyclerview adapter again to force new view for items.\n    getRecyclerView().adapter = mAdapter\n\n    if !isGridEnabled() {\n        let layoutManager = GridLayoutManager(context: getContext(), spanCount: getColumnsCount())\n        layoutManager.spanSizeLookup = GridLayoutManager.SpanSizeLookup { position in\n            if position == self.mAdapter.getItemCount() - 1 {\n                return layoutManager.spanCount\n            } else {\n                return 1\n            }\n        }\n\n        getRecyclerView().layoutManager = layoutManager\n    }\n}\n```"
    },
    {
        "method_name": "getSpanSize",
        "method_code": "@Override\n                public int getSpanSize(int position) {\n                    if (position == mAdapter.getItemCount() - 1) {\n                        return ((GridLayoutManager) layoutManager).getSpanCount();\n                    } else {\n                        return 1;\n                    }\n                }",
        "prompt": "\n        Please translate the following Java (Android) method titled getSpanSize from LocalFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: getSpanSize\n\n        Method Code: @Override\n                public int getSpanSize(int position) {\n                    if (position == mAdapter.getItemCount() - 1) {\n                        return ((GridLayoutManager) layoutManager).getSpanCount();\n                    } else {\n                        return 1;\n                    }\n                }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getSpanSize(position: Int) -> Int {\n    if position == mAdapter.itemCount - 1 {\n        return (layoutManager as! GridLayoutManager).spanCount\n    } else {\n        return 1\n    }\n}\n```"
    },
    {
        "method_name": "switchToListView",
        "method_code": "@Override\n    public void switchToListView() {\n        mAdapter.setGridView(false);\n        /** Same problem here, see switchToGridView() */\n        getRecyclerView().setAdapter(mAdapter);\n        super.switchToListView();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled switchToListView from LocalFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: switchToListView\n\n        Method Code: @Override\n    public void switchToListView() {\n        mAdapter.setGridView(false);\n        /** Same problem here, see switchToGridView() */\n        getRecyclerView().setAdapter(mAdapter);\n        super.switchToListView();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func switchToListView() {\n    mAdapter.setGridView(false)\n    // Same problem here, see switchToGridView()\n    getRecyclerView().adapter = mAdapter\n    super.switchToListView()\n}\n```"
    },
    {
        "method_name": "setLoading",
        "method_code": "@Override\n    public void setLoading(boolean enabled) {\n        super.setLoading(enabled);\n        if (enabled) {\n            setEmptyListLoadingMessage();\n        } else {\n            // ugly hack because setEmptyListLoadingMessage also uses a handler and there's a race condition otherwise\n            new Handler().post(() -> {\n                mAdapter.notifyDataSetChanged();\n                if (mAdapter.getFilesCount() == 0) {\n                    setEmptyListMessage(SearchType.LOCAL_SEARCH);\n                }\n            });\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setLoading from LocalFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: setLoading\n\n        Method Code: @Override\n    public void setLoading(boolean enabled) {\n        super.setLoading(enabled);\n        if (enabled) {\n            setEmptyListLoadingMessage();\n        } else {\n            // ugly hack because setEmptyListLoadingMessage also uses a handler and there's a race condition otherwise\n            new Handler().post(() -> {\n                mAdapter.notifyDataSetChanged();\n                if (mAdapter.getFilesCount() == 0) {\n                    setEmptyListMessage(SearchType.LOCAL_SEARCH);\n                }\n            });\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func setLoading(_ enabled: Bool) {\n    super.setLoading(enabled)\n    if enabled {\n        setEmptyListLoadingMessage()\n    } else {\n        DispatchQueue.main.async {\n            self.mAdapter.notifyDataSetChanged()\n            if self.mAdapter.getFilesCount() == 0 {\n                self.setEmptyListMessage(.localSearch)\n            }\n        }\n    }\n}\n```"
    },
    {
        "method_name": "setFiles",
        "method_code": "@VisibleForTesting\n    public void setFiles(List<File> newFiles) {\n        mAdapter.setFiles(newFiles);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setFiles from LocalFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: setFiles\n\n        Method Code: @VisibleForTesting\n    public void setFiles(List<File> newFiles) {\n        mAdapter.setFiles(newFiles);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\n@objc func setFiles(_ newFiles: [File]) {\n    mAdapter.setFiles(newFiles)\n}\n```"
    },
    {
        "method_name": "onDirectoryClick",
        "method_code": "void onDirectoryClick(File directory);",
        "prompt": "\n        Please translate the following Java (Android) method titled onDirectoryClick from LocalFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onDirectoryClick\n\n        Method Code: void onDirectoryClick(File directory);\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onDirectoryClick(directory: File) {\n    // Implementation goes here\n}\n```"
    },
    {
        "method_name": "onFileClick",
        "method_code": "void onFileClick(File file);",
        "prompt": "\n        Please translate the following Java (Android) method titled onFileClick from LocalFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onFileClick\n\n        Method Code: void onFileClick(File file);\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onFileClick(file: File) {\n    // Implementation here\n}\n```"
    },
    {
        "method_name": "getInitialDirectory",
        "method_code": "File getInitialDirectory();",
        "prompt": "\n        Please translate the following Java (Android) method titled getInitialDirectory from LocalFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: getInitialDirectory\n\n        Method Code: File getInitialDirectory();\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getInitialDirectory() -> URL? {\n    // Implementation goes here\n    return nil\n}\n```"
    },
    {
        "method_name": "isFolderPickerMode",
        "method_code": "boolean isFolderPickerMode();",
        "prompt": "\n        Please translate the following Java (Android) method titled isFolderPickerMode from LocalFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: isFolderPickerMode\n\n        Method Code: boolean isFolderPickerMode();\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc isFolderPickerMode() -> Bool\n```"
    },
    {
        "method_name": "isWithinEncryptedFolder",
        "method_code": "boolean isWithinEncryptedFolder();",
        "prompt": "\n        Please translate the following Java (Android) method titled isWithinEncryptedFolder from LocalFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: isWithinEncryptedFolder\n\n        Method Code: boolean isWithinEncryptedFolder();\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc isWithinEncryptedFolder() -> Bool {\n    // Implementation goes here\n    return false // Placeholder return value\n}\n```"
    }
]