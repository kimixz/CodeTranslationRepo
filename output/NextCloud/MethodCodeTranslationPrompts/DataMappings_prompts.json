[
    {
        "method_name": "getWebSiteType",
        "method_code": "public static int getWebSiteType(String type) {\n        if (type == null){\n            return ContactsContract.CommonDataKinds.Website.TYPE_CUSTOM;\n        }\n\n        type = type.toLowerCase(Locale.ROOT);\n        Integer value = websiteTypeMappings.get(type);\n        return (value == null) ? ContactsContract.CommonDataKinds.Website.TYPE_CUSTOM : value;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getWebSiteType from DataMappings.java into Swift.\n\n        Input:\n\n        Method Name: getWebSiteType\n\n        Method Code: public static int getWebSiteType(String type) {\n        if (type == null){\n            return ContactsContract.CommonDataKinds.Website.TYPE_CUSTOM;\n        }\n\n        type = type.toLowerCase(Locale.ROOT);\n        Integer value = websiteTypeMappings.get(type);\n        return (value == null) ? ContactsContract.CommonDataKinds.Website.TYPE_CUSTOM : value;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func getWebSiteType(_ type: String?) -> Int {\n    if type == nil {\n        return ContactsContract.CommonDataKinds.Website.TYPE_CUSTOM\n    }\n    \n    let lowercasedType = type!.lowercased()\n    let value = websiteTypeMappings[lowercasedType]\n    return value ?? ContactsContract.CommonDataKinds.Website.TYPE_CUSTOM\n}\n```"
    },
    {
        "method_name": "getDateType",
        "method_code": "public static int getDateType(String type) {\n        if (type == null) {\n            return ContactsContract.CommonDataKinds.Event.TYPE_OTHER;\n        }\n\n        type = type.toLowerCase(Locale.ROOT);\n        for (Map.Entry<String, Integer> entry : abDateMappings.entrySet()){\n            if (type.contains(entry.getKey())){\n                return entry.getValue();\n            }\n        }\n        return ContactsContract.CommonDataKinds.Event.TYPE_OTHER;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getDateType from DataMappings.java into Swift.\n\n        Input:\n\n        Method Name: getDateType\n\n        Method Code: public static int getDateType(String type) {\n        if (type == null) {\n            return ContactsContract.CommonDataKinds.Event.TYPE_OTHER;\n        }\n\n        type = type.toLowerCase(Locale.ROOT);\n        for (Map.Entry<String, Integer> entry : abDateMappings.entrySet()){\n            if (type.contains(entry.getKey())){\n                return entry.getValue();\n            }\n        }\n        return ContactsContract.CommonDataKinds.Event.TYPE_OTHER;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport Contacts\n\nfunc getDateType(_ type: String?) -> Int {\n    guard let type = type else {\n        return CNContactType.other.rawValue\n    }\n\n    let lowercasedType = type.lowercased()\n    for (key, value) in abDateMappings {\n        if lowercasedType.contains(key) {\n            return value\n        }\n    }\n    return CNContactType.other.rawValue\n}\n```"
    },
    {
        "method_name": "getNameType",
        "method_code": "public static int getNameType(String type) {\n        if (type == null) {\n            return ContactsContract.CommonDataKinds.Relation.TYPE_CUSTOM;\n        }\n\n        type = type.toLowerCase(Locale.ROOT);\n        for (Map.Entry<String, Integer> entry : abRelatedNamesMappings.entrySet()){\n            if (type.contains(entry.getKey())){\n                return entry.getValue();\n            }\n        }\n        return ContactsContract.CommonDataKinds.Relation.TYPE_CUSTOM;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getNameType from DataMappings.java into Swift.\n\n        Input:\n\n        Method Name: getNameType\n\n        Method Code: public static int getNameType(String type) {\n        if (type == null) {\n            return ContactsContract.CommonDataKinds.Relation.TYPE_CUSTOM;\n        }\n\n        type = type.toLowerCase(Locale.ROOT);\n        for (Map.Entry<String, Integer> entry : abRelatedNamesMappings.entrySet()){\n            if (type.contains(entry.getKey())){\n                return entry.getValue();\n            }\n        }\n        return ContactsContract.CommonDataKinds.Relation.TYPE_CUSTOM;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport Contacts\n\nfunc getNameType(_ type: String?) -> Int {\n    guard let type = type else {\n        return CNLabelContactRelationCustom\n    }\n\n    let lowercasedType = type.lowercased()\n    for (key, value) in abRelatedNamesMappings {\n        if lowercasedType.contains(key) {\n            return value\n        }\n    }\n    return CNLabelContactRelationCustom\n}\n```"
    },
    {
        "method_name": "getImPropertyNameMappings",
        "method_code": "public static Map<String, Integer> getImPropertyNameMappings(){\n        return imPropertyNameMappings;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getImPropertyNameMappings from DataMappings.java into Swift.\n\n        Input:\n\n        Method Name: getImPropertyNameMappings\n\n        Method Code: public static Map<String, Integer> getImPropertyNameMappings(){\n        return imPropertyNameMappings;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func getImPropertyNameMappings() -> [String: Int] {\n    return imPropertyNameMappings\n}\n```"
    },
    {
        "method_name": "getIMTypeFromProtocol",
        "method_code": "public static int getIMTypeFromProtocol(String protocol) {\n        if (protocol == null){\n            return ContactsContract.CommonDataKinds.Im.PROTOCOL_CUSTOM;\n        }\n\n        protocol = protocol.toLowerCase(Locale.ROOT);\n        Integer value = imProtocolMappings.get(protocol);\n        return (value == null) ? ContactsContract.CommonDataKinds.Im.PROTOCOL_CUSTOM : value;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getIMTypeFromProtocol from DataMappings.java into Swift.\n\n        Input:\n\n        Method Name: getIMTypeFromProtocol\n\n        Method Code: public static int getIMTypeFromProtocol(String protocol) {\n        if (protocol == null){\n            return ContactsContract.CommonDataKinds.Im.PROTOCOL_CUSTOM;\n        }\n\n        protocol = protocol.toLowerCase(Locale.ROOT);\n        Integer value = imProtocolMappings.get(protocol);\n        return (value == null) ? ContactsContract.CommonDataKinds.Im.PROTOCOL_CUSTOM : value;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport Contacts\n\nfunc getIMTypeFromProtocol(_ protocol: String?) -> Int {\n    guard let protocol = protocol else {\n        return CNInstantMessageAddress.IMProtocol.custom.rawValue\n    }\n    \n    let lowercasedProtocol = protocol.lowercased()\n    let value = imProtocolMappings[lowercasedProtocol]\n    return value ?? CNInstantMessageAddress.IMProtocol.custom.rawValue\n}\n```"
    },
    {
        "method_name": "getPhoneType",
        "method_code": "public static int getPhoneType(Telephone property) {\n        for (TelephoneType type : property.getTypes()){\n            Integer androidType = phoneTypeMappings.get(type);\n            if (androidType != null){\n                return androidType;\n            }\n        }\n        return ContactsContract.CommonDataKinds.Phone.TYPE_OTHER;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getPhoneType from DataMappings.java into Swift.\n\n        Input:\n\n        Method Name: getPhoneType\n\n        Method Code: public static int getPhoneType(Telephone property) {\n        for (TelephoneType type : property.getTypes()){\n            Integer androidType = phoneTypeMappings.get(type);\n            if (androidType != null){\n                return androidType;\n            }\n        }\n        return ContactsContract.CommonDataKinds.Phone.TYPE_OTHER;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func getPhoneType(_ property: Telephone) -> Int {\n    for type in property.getTypes() {\n        if let androidType = phoneTypeMappings[type] {\n            return androidType\n        }\n    }\n    return ContactsContract.CommonDataKinds.Phone.TYPE_OTHER\n}\n```"
    },
    {
        "method_name": "getEmailType",
        "method_code": "public static int getEmailType(Email property) {\n        for (EmailType type : property.getTypes()){\n            Integer androidType = emailTypeMappings.get(type);\n            if (androidType != null){\n                return androidType;\n            }\n        }\n        return ContactsContract.CommonDataKinds.Email.TYPE_OTHER;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getEmailType from DataMappings.java into Swift.\n\n        Input:\n\n        Method Name: getEmailType\n\n        Method Code: public static int getEmailType(Email property) {\n        for (EmailType type : property.getTypes()){\n            Integer androidType = emailTypeMappings.get(type);\n            if (androidType != null){\n                return androidType;\n            }\n        }\n        return ContactsContract.CommonDataKinds.Email.TYPE_OTHER;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func getEmailType(_ property: Email) -> Int {\n    for type in property.getTypes() {\n        if let androidType = emailTypeMappings[type] {\n            return androidType\n        }\n    }\n    return ContactsContract.CommonDataKinds.Email.TYPE_OTHER\n}\n```"
    },
    {
        "method_name": "getAddressType",
        "method_code": "public static int getAddressType(Address property) {\n        for (AddressType type : property.getTypes()){\n            Integer androidType = addressTypeMappings.get(type);\n            if (androidType != null){\n                return androidType;\n            }\n        }\n        return ContactsContract.CommonDataKinds.StructuredPostal.TYPE_CUSTOM;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getAddressType from DataMappings.java into Swift.\n\n        Input:\n\n        Method Name: getAddressType\n\n        Method Code: public static int getAddressType(Address property) {\n        for (AddressType type : property.getTypes()){\n            Integer androidType = addressTypeMappings.get(type);\n            if (androidType != null){\n                return androidType;\n            }\n        }\n        return ContactsContract.CommonDataKinds.StructuredPostal.TYPE_CUSTOM;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func getAddressType(property: Address) -> Int {\n    for type in property.getTypes() {\n        if let iosType = addressTypeMappings[type] {\n            return iosType\n        }\n    }\n    return CNPostalAddressType.custom.rawValue\n}\n```"
    }
]