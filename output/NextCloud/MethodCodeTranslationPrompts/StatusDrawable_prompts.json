[
    {
        "method_name": "draw",
        "method_code": "@Override\n    public void draw(@NonNull Canvas canvas) {\n        if (backgroundPaint != null) {\n            canvas.drawCircle(radius, radius, radius, backgroundPaint);\n        }\n\n        if (text != null) {\n            textPaint.setTextSize(1.6f * radius);\n            canvas.drawText(text, radius, radius - ((textPaint.descent() + textPaint.ascent()) / 2), textPaint);\n        }\n\n        if (icon != -1) {\n            Drawable drawable = ResourcesCompat.getDrawable(context.getResources(), icon, null);\n\n            if (drawable != null) {\n                drawable.setBounds(0,\n                                   0,\n                                   (int) (2 * radius),\n                                   (int) (2 * radius));\n                drawable.draw(canvas);\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled draw from StatusDrawable.java into Swift.\n\n        Input:\n\n        Method Name: draw\n\n        Method Code: @Override\n    public void draw(@NonNull Canvas canvas) {\n        if (backgroundPaint != null) {\n            canvas.drawCircle(radius, radius, radius, backgroundPaint);\n        }\n\n        if (text != null) {\n            textPaint.setTextSize(1.6f * radius);\n            canvas.drawText(text, radius, radius - ((textPaint.descent() + textPaint.ascent()) / 2), textPaint);\n        }\n\n        if (icon != -1) {\n            Drawable drawable = ResourcesCompat.getDrawable(context.getResources(), icon, null);\n\n            if (drawable != null) {\n                drawable.setBounds(0,\n                                   0,\n                                   (int) (2 * radius),\n                                   (int) (2 * radius));\n                drawable.draw(canvas);\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func draw(_ rect: CGRect) {\n    guard let context = UIGraphicsGetCurrentContext() else { return }\n    \n    if let backgroundPaint = backgroundPaint {\n        context.setFillColor(backgroundPaint.cgColor)\n        context.fillEllipse(in: CGRect(x: 0, y: 0, width: 2 * radius, height: 2 * radius))\n    }\n    \n    if let text = text {\n        let textSize = 1.6 * radius\n        let attributes: [NSAttributedString.Key: Any] = [\n            .font: UIFont.systemFont(ofSize: textSize),\n            .foregroundColor: textPaint\n        ]\n        let textSizeRect = text.size(withAttributes: attributes)\n        let textRect = CGRect(x: radius - textSizeRect.width / 2,\n                              y: radius - textSizeRect.height / 2,\n                              width: textSizeRect.width,\n                              height: textSizeRect.height)\n        text.draw(in: textRect, withAttributes: attributes)\n    }\n    \n    if icon != -1, let drawable = UIImage(named: \"\\(icon)\") {\n        let drawableRect = CGRect(x: 0, y: 0, width: 2 * radius, height: 2 * radius)\n        drawable.draw(in: drawableRect)\n    }\n}\n```"
    },
    {
        "method_name": "setAlpha",
        "method_code": "@Override\n    public void setAlpha(int alpha) {\n        textPaint.setAlpha(alpha);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setAlpha from StatusDrawable.java into Swift.\n\n        Input:\n\n        Method Name: setAlpha\n\n        Method Code: @Override\n    public void setAlpha(int alpha) {\n        textPaint.setAlpha(alpha);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func setAlpha(_ alpha: Int) {\n    textPaint.alpha = alpha\n}\n```"
    },
    {
        "method_name": "setColorFilter",
        "method_code": "@Override\n    public void setColorFilter(ColorFilter cf) {\n        textPaint.setColorFilter(cf);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setColorFilter from StatusDrawable.java into Swift.\n\n        Input:\n\n        Method Name: setColorFilter\n\n        Method Code: @Override\n    public void setColorFilter(ColorFilter cf) {\n        textPaint.setColorFilter(cf);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func setColorFilter(_ cf: ColorFilter?) {\n    textPaint.colorFilter = cf\n}\n```"
    },
    {
        "method_name": "getOpacity",
        "method_code": "@Override\n    public int getOpacity() {\n        return PixelFormat.TRANSLUCENT;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getOpacity from StatusDrawable.java into Swift.\n\n        Input:\n\n        Method Name: getOpacity\n\n        Method Code: @Override\n    public int getOpacity() {\n        return PixelFormat.TRANSLUCENT;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func getOpacity() -> Int {\n    return PixelFormat.translucent\n}\n```"
    }
]