[
    {
        "method_name": "onCreate",
        "method_code": "@Override\n    public void onCreate(Bundle savedInstanceState) {\n        Log_OC.v(TAG, \"onCreate() start\");\n        super.onCreate(savedInstanceState);\n        Bundle bundle = getIntent().getExtras();\n\n        if (bundle == null) {\n            finish();\n            return;\n        }\n\n        user = BundleExtensionsKt.getParcelableArgument(bundle, KEY_ACCOUNT, User.class);\n        if(user == null) {\n            finish();\n            return;\n        }\n\n        if (savedInstanceState != null && savedInstanceState.containsKey(KEY_USER_DATA)) {\n            userInfo = BundleExtensionsKt.getParcelableArgument(savedInstanceState, KEY_USER_DATA, UserInfo.class);\n        } else if (bundle.containsKey(KEY_ACCOUNT)) {\n            userInfo =  BundleExtensionsKt.getParcelableArgument(bundle, KEY_USER_DATA, UserInfo.class);\n        }\n\n        mCurrentAccountAvatarRadiusDimension = getResources().getDimension(R.dimen.user_icon_radius);\n\n        binding = UserInfoLayoutBinding.inflate(getLayoutInflater());\n        setContentView(binding.getRoot());\n\n        setupToolbar();\n\n        // set the back button from action bar\n        ActionBar actionBar = getSupportActionBar();\n\n        // check if is not null\n        if (actionBar != null) {\n            actionBar.setDisplayHomeAsUpEnabled(true);\n            actionBar.setDisplayShowHomeEnabled(true);\n            viewThemeUtils.files.themeActionBar(this, actionBar);\n        }\n\n        binding.userinfoList.setAdapter(new UserInfoAdapter(null, viewThemeUtils));\n\n        if (userInfo != null) {\n            populateUserInfoUi(userInfo);\n        } else {\n            setMultiListLoadingMessage();\n            fetchAndSetData();\n        }\n\n        setHeaderImage();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreate from UserInfoActivity.java into Swift.\n\n        Input:\n\n        Method Name: onCreate\n\n        Method Code: @Override\n    public void onCreate(Bundle savedInstanceState) {\n        Log_OC.v(TAG, \"onCreate() start\");\n        super.onCreate(savedInstanceState);\n        Bundle bundle = getIntent().getExtras();\n\n        if (bundle == null) {\n            finish();\n            return;\n        }\n\n        user = BundleExtensionsKt.getParcelableArgument(bundle, KEY_ACCOUNT, User.class);\n        if(user == null) {\n            finish();\n            return;\n        }\n\n        if (savedInstanceState != null && savedInstanceState.containsKey(KEY_USER_DATA)) {\n            userInfo = BundleExtensionsKt.getParcelableArgument(savedInstanceState, KEY_USER_DATA, UserInfo.class);\n        } else if (bundle.containsKey(KEY_ACCOUNT)) {\n            userInfo =  BundleExtensionsKt.getParcelableArgument(bundle, KEY_USER_DATA, UserInfo.class);\n        }\n\n        mCurrentAccountAvatarRadiusDimension = getResources().getDimension(R.dimen.user_icon_radius);\n\n        binding = UserInfoLayoutBinding.inflate(getLayoutInflater());\n        setContentView(binding.getRoot());\n\n        setupToolbar();\n\n        // set the back button from action bar\n        ActionBar actionBar = getSupportActionBar();\n\n        // check if is not null\n        if (actionBar != null) {\n            actionBar.setDisplayHomeAsUpEnabled(true);\n            actionBar.setDisplayShowHomeEnabled(true);\n            viewThemeUtils.files.themeActionBar(this, actionBar);\n        }\n\n        binding.userinfoList.setAdapter(new UserInfoAdapter(null, viewThemeUtils));\n\n        if (userInfo != null) {\n            populateUserInfoUi(userInfo);\n        } else {\n            setMultiListLoadingMessage();\n            fetchAndSetData();\n        }\n\n        setHeaderImage();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    NSLog(\"onCreate() start\")\n    \n    guard let bundle = self.intent?.extras else {\n        self.finish()\n        return\n    }\n    \n    user = bundle.getParcelableArgument(key: KEY_ACCOUNT, type: User.self)\n    if user == nil {\n        self.finish()\n        return\n    }\n    \n    if let savedInstanceState = savedInstanceState, savedInstanceState.contains(KEY_USER_DATA) {\n        userInfo = savedInstanceState.getParcelableArgument(key: KEY_USER_DATA, type: UserInfo.self)\n    } else if bundle.contains(KEY_ACCOUNT) {\n        userInfo = bundle.getParcelableArgument(key: KEY_USER_DATA, type: UserInfo.self)\n    }\n    \n    mCurrentAccountAvatarRadiusDimension = self.resources.getDimension(R.dimen.user_icon_radius)\n    \n    binding = UserInfoLayoutBinding.inflate(layoutInflater)\n    self.setContentView(binding.root)\n    \n    setupToolbar()\n    \n    if let actionBar = self.supportActionBar {\n        actionBar.setDisplayHomeAsUpEnabled(true)\n        actionBar.setDisplayShowHomeEnabled(true)\n        viewThemeUtils.files.themeActionBar(self, actionBar)\n    }\n    \n    binding.userinfoList.adapter = UserInfoAdapter(nil, viewThemeUtils)\n    \n    if let userInfo = userInfo {\n        populateUserInfoUi(userInfo)\n    } else {\n        setMultiListLoadingMessage()\n        fetchAndSetData()\n    }\n    \n    setHeaderImage()\n}\n```"
    },
    {
        "method_name": "onPrepareOptionsMenu",
        "method_code": "@Override\n    public boolean onPrepareOptionsMenu(Menu menu) {\n        if (accountManager.getUser().equals(user)) {\n            menu.findItem(R.id.action_open_account).setVisible(false);\n        }\n        return super.onPrepareOptionsMenu(menu);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onPrepareOptionsMenu from UserInfoActivity.java into Swift.\n\n        Input:\n\n        Method Name: onPrepareOptionsMenu\n\n        Method Code: @Override\n    public boolean onPrepareOptionsMenu(Menu menu) {\n        if (accountManager.getUser().equals(user)) {\n            menu.findItem(R.id.action_open_account).setVisible(false);\n        }\n        return super.onPrepareOptionsMenu(menu);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n    if accountManager.getUser() == user {\n        if let menu = sender as? UIMenu {\n            menu.children.forEach { item in\n                if item.identifier == UIAction.Identifier(\"action_open_account\") {\n                    item.isHidden = true\n                }\n            }\n        }\n    }\n    super.prepare(for: segue, sender: sender)\n}\n```"
    },
    {
        "method_name": "onCreateOptionsMenu",
        "method_code": "@Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        MenuInflater inflater = getMenuInflater();\n        inflater.inflate(R.menu.item_account, menu);\n\n        return true;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreateOptionsMenu from UserInfoActivity.java into Swift.\n\n        Input:\n\n        Method Name: onCreateOptionsMenu\n\n        Method Code: @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        MenuInflater inflater = getMenuInflater();\n        inflater.inflate(R.menu.item_account, menu);\n\n        return true;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    let menu = UIMenu(title: \"\", children: [])\n    navigationItem.rightBarButtonItem = UIBarButtonItem(title: \"Menu\", menu: menu)\n}\n```"
    },
    {
        "method_name": "onOptionsItemSelected",
        "method_code": "@Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        boolean retval = true;\n        int itemId = item.getItemId();\n\n        if (itemId == android.R.id.home) {\n            onBackPressed();\n        } else if (itemId == R.id.action_open_account) {\n            accountClicked(user.hashCode());\n        } else if (itemId == R.id.action_delete_account) {\n            openAccountRemovalDialog(user, getSupportFragmentManager());\n        } else {\n            retval = super.onOptionsItemSelected(item);\n        }\n\n        return retval;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onOptionsItemSelected from UserInfoActivity.java into Swift.\n\n        Input:\n\n        Method Name: onOptionsItemSelected\n\n        Method Code: @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        boolean retval = true;\n        int itemId = item.getItemId();\n\n        if (itemId == android.R.id.home) {\n            onBackPressed();\n        } else if (itemId == R.id.action_open_account) {\n            accountClicked(user.hashCode());\n        } else if (itemId == R.id.action_delete_account) {\n            openAccountRemovalDialog(user, getSupportFragmentManager());\n        } else {\n            retval = super.onOptionsItemSelected(item);\n        }\n\n        return retval;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onOptionsItemSelected(_ item: MenuItem) -> Bool {\n    var retval = true\n    let itemId = item.itemId\n\n    if itemId == android.R.id.home {\n        onBackPressed()\n    } else if itemId == R.id.action_open_account {\n        accountClicked(user.hashCode())\n    } else if itemId == R.id.action_delete_account {\n        openAccountRemovalDialog(user, getSupportFragmentManager())\n    } else {\n        retval = super.onOptionsItemSelected(item)\n    }\n\n    return retval\n}\n```"
    },
    {
        "method_name": "setMultiListLoadingMessage",
        "method_code": "private void setMultiListLoadingMessage() {\n        binding.userinfoList.setVisibility(View.GONE);\n        binding.emptyList.emptyListView.setVisibility(View.GONE);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setMultiListLoadingMessage from UserInfoActivity.java into Swift.\n\n        Input:\n\n        Method Name: setMultiListLoadingMessage\n\n        Method Code: private void setMultiListLoadingMessage() {\n        binding.userinfoList.setVisibility(View.GONE);\n        binding.emptyList.emptyListView.setVisibility(View.GONE);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setMultiListLoadingMessage() {\n    binding.userinfoList.isHidden = true\n    binding.emptyList.emptyListView.isHidden = true\n}\n```"
    },
    {
        "method_name": "setErrorMessageForMultiList",
        "method_code": "private void setErrorMessageForMultiList(String headline, String message, @DrawableRes int errorResource) {\n        binding.emptyList.emptyListViewHeadline.setText(headline);\n        binding.emptyList.emptyListViewText.setText(message);\n        binding.emptyList.emptyListIcon.setImageResource(errorResource);\n\n        binding.emptyList.emptyListIcon.setVisibility(View.VISIBLE);\n        binding.emptyList.emptyListViewText.setVisibility(View.VISIBLE);\n        binding.userinfoList.setVisibility(View.GONE);\n        binding.loadingContent.setVisibility(View.GONE);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setErrorMessageForMultiList from UserInfoActivity.java into Swift.\n\n        Input:\n\n        Method Name: setErrorMessageForMultiList\n\n        Method Code: private void setErrorMessageForMultiList(String headline, String message, @DrawableRes int errorResource) {\n        binding.emptyList.emptyListViewHeadline.setText(headline);\n        binding.emptyList.emptyListViewText.setText(message);\n        binding.emptyList.emptyListIcon.setImageResource(errorResource);\n\n        binding.emptyList.emptyListIcon.setVisibility(View.VISIBLE);\n        binding.emptyList.emptyListViewText.setVisibility(View.VISIBLE);\n        binding.userinfoList.setVisibility(View.GONE);\n        binding.loadingContent.setVisibility(View.GONE);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setErrorMessageForMultiList(headline: String, message: String, errorResource: Int) {\n    binding.emptyList.emptyListViewHeadline.text = headline\n    binding.emptyList.emptyListViewText.text = message\n    binding.emptyList.emptyListIcon.image = UIImage(named: String(errorResource))\n\n    binding.emptyList.emptyListIcon.isHidden = false\n    binding.emptyList.emptyListViewText.isHidden = false\n    binding.userinfoList.isHidden = true\n    binding.loadingContent.isHidden = true\n}\n```"
    },
    {
        "method_name": "setHeaderImage",
        "method_code": "private void setHeaderImage() {\n        if (getStorageManager().getCapability(user.getAccountName()).getServerBackground() != null) {\n            ImageView backgroundImageView = findViewById(R.id.userinfo_background);\n\n            if (backgroundImageView != null) {\n\n                String background = getStorageManager().getCapability(user.getAccountName()).getServerBackground();\n\n                if (URLUtil.isValidUrl(background)) {\n                    // background image\n                    SimpleTarget target = new SimpleTarget<Drawable>() {\n                        @Override\n                        public void onResourceReady(Drawable resource, GlideAnimation glideAnimation) {\n                            Drawable[] drawables = {\n                                viewThemeUtils.platform.getPrimaryColorDrawable(backgroundImageView.getContext()),\n                                resource};\n                            LayerDrawable layerDrawable = new LayerDrawable(drawables);\n                            backgroundImageView.setImageDrawable(layerDrawable);\n                        }\n\n                        @Override\n                        public void onLoadFailed(Exception e, Drawable errorDrawable) {\n                            Drawable[] drawables = {\n                                viewThemeUtils.platform.getPrimaryColorDrawable(backgroundImageView.getContext()),\n                                ResourcesCompat.getDrawable(getResources(),\n                                                            R.drawable.background,\n                                                            null)};\n                            LayerDrawable layerDrawable = new LayerDrawable(drawables);\n                            backgroundImageView.setImageDrawable(layerDrawable);\n                        }\n                    };\n\n                    Glide.with(this)\n                            .load(background)\n                            .centerCrop()\n                            .placeholder(R.drawable.background)\n                            .error(R.drawable.background)\n                            .crossFade()\n                            .into(target);\n                } else {\n                    // plain color\n                    backgroundImageView.setImageDrawable(\n                        viewThemeUtils.platform.getPrimaryColorDrawable(backgroundImageView.getContext()));\n                }\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setHeaderImage from UserInfoActivity.java into Swift.\n\n        Input:\n\n        Method Name: setHeaderImage\n\n        Method Code: private void setHeaderImage() {\n        if (getStorageManager().getCapability(user.getAccountName()).getServerBackground() != null) {\n            ImageView backgroundImageView = findViewById(R.id.userinfo_background);\n\n            if (backgroundImageView != null) {\n\n                String background = getStorageManager().getCapability(user.getAccountName()).getServerBackground();\n\n                if (URLUtil.isValidUrl(background)) {\n                    // background image\n                    SimpleTarget target = new SimpleTarget<Drawable>() {\n                        @Override\n                        public void onResourceReady(Drawable resource, GlideAnimation glideAnimation) {\n                            Drawable[] drawables = {\n                                viewThemeUtils.platform.getPrimaryColorDrawable(backgroundImageView.getContext()),\n                                resource};\n                            LayerDrawable layerDrawable = new LayerDrawable(drawables);\n                            backgroundImageView.setImageDrawable(layerDrawable);\n                        }\n\n                        @Override\n                        public void onLoadFailed(Exception e, Drawable errorDrawable) {\n                            Drawable[] drawables = {\n                                viewThemeUtils.platform.getPrimaryColorDrawable(backgroundImageView.getContext()),\n                                ResourcesCompat.getDrawable(getResources(),\n                                                            R.drawable.background,\n                                                            null)};\n                            LayerDrawable layerDrawable = new LayerDrawable(drawables);\n                            backgroundImageView.setImageDrawable(layerDrawable);\n                        }\n                    };\n\n                    Glide.with(this)\n                            .load(background)\n                            .centerCrop()\n                            .placeholder(R.drawable.background)\n                            .error(R.drawable.background)\n                            .crossFade()\n                            .into(target);\n                } else {\n                    // plain color\n                    backgroundImageView.setImageDrawable(\n                        viewThemeUtils.platform.getPrimaryColorDrawable(backgroundImageView.getContext()));\n                }\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setHeaderImage() {\n    if let serverBackground = getStorageManager().getCapability(user.getAccountName()).getServerBackground() {\n        if let backgroundImageView = view.viewWithTag(R.id.userinfo_background) as? UIImageView {\n            if let url = URL(string: serverBackground), UIApplication.shared.canOpenURL(url) {\n                // background image\n                let placeholderImage = UIImage(named: \"background\")\n                let primaryColorDrawable = viewThemeUtils.platform.getPrimaryColorDrawable(context: backgroundImageView)\n\n                let target = SDWebImageContextOption.customManager as! SDWebImageManager\n                target.loadImage(with: url, options: .highPriority, progress: nil) { (image, data, error, cacheType, finished, imageUrl) in\n                    if let resource = image {\n                        let layerDrawable = [primaryColorDrawable, resource]\n                        backgroundImageView.image = UIImage.layeredImage(from: layerDrawable)\n                    } else {\n                        let errorDrawable = UIImage(named: \"background\")\n                        let layerDrawable = [primaryColorDrawable, errorDrawable]\n                        backgroundImageView.image = UIImage.layeredImage(from: layerDrawable)\n                    }\n                }\n            } else {\n                // plain color\n                backgroundImageView.image = viewThemeUtils.platform.getPrimaryColorDrawable(context: backgroundImageView)\n            }\n        }\n    }\n}\n```"
    },
    {
        "method_name": "onResourceReady",
        "method_code": "@Override\n                        public void onResourceReady(Drawable resource, GlideAnimation glideAnimation) {\n                            Drawable[] drawables = {\n                                viewThemeUtils.platform.getPrimaryColorDrawable(backgroundImageView.getContext()),\n                                resource};\n                            LayerDrawable layerDrawable = new LayerDrawable(drawables);\n                            backgroundImageView.setImageDrawable(layerDrawable);\n                        }",
        "prompt": "\n        Please translate the following Java (Android) method titled onResourceReady from UserInfoActivity.java into Swift.\n\n        Input:\n\n        Method Name: onResourceReady\n\n        Method Code: @Override\n                        public void onResourceReady(Drawable resource, GlideAnimation glideAnimation) {\n                            Drawable[] drawables = {\n                                viewThemeUtils.platform.getPrimaryColorDrawable(backgroundImageView.getContext()),\n                                resource};\n                            LayerDrawable layerDrawable = new LayerDrawable(drawables);\n                            backgroundImageView.setImageDrawable(layerDrawable);\n                        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onResourceReady(resource: Drawable, glideAnimation: GlideAnimation) {\n    let drawables = [\n        viewThemeUtils.platform.getPrimaryColorDrawable(context: backgroundImageView.context),\n        resource\n    ]\n    let layerDrawable = LayerDrawable(drawables: drawables)\n    backgroundImageView.image = layerDrawable\n}\n```"
    },
    {
        "method_name": "onLoadFailed",
        "method_code": "@Override\n                        public void onLoadFailed(Exception e, Drawable errorDrawable) {\n                            Drawable[] drawables = {\n                                viewThemeUtils.platform.getPrimaryColorDrawable(backgroundImageView.getContext()),\n                                ResourcesCompat.getDrawable(getResources(),\n                                                            R.drawable.background,\n                                                            null)};\n                            LayerDrawable layerDrawable = new LayerDrawable(drawables);\n                            backgroundImageView.setImageDrawable(layerDrawable);\n                        }",
        "prompt": "\n        Please translate the following Java (Android) method titled onLoadFailed from UserInfoActivity.java into Swift.\n\n        Input:\n\n        Method Name: onLoadFailed\n\n        Method Code: @Override\n                        public void onLoadFailed(Exception e, Drawable errorDrawable) {\n                            Drawable[] drawables = {\n                                viewThemeUtils.platform.getPrimaryColorDrawable(backgroundImageView.getContext()),\n                                ResourcesCompat.getDrawable(getResources(),\n                                                            R.drawable.background,\n                                                            null)};\n                            LayerDrawable layerDrawable = new LayerDrawable(drawables);\n                            backgroundImageView.setImageDrawable(layerDrawable);\n                        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onLoadFailed(_ error: Error?, errorDrawable: Drawable?) {\n    let drawables: [Drawable] = [\n        viewThemeUtils.platform.getPrimaryColorDrawable(context: backgroundImageView.context),\n        UIImage(named: \"background\")!\n    ]\n    let layerDrawable = LayerDrawable(drawables: drawables)\n    backgroundImageView.image = layerDrawable\n}\n```"
    },
    {
        "method_name": "populateUserInfoUi",
        "method_code": "private void populateUserInfoUi(UserInfo userInfo) {\n        binding.userinfoUsername.setText(user.getAccountName());\n        binding.userinfoIcon.setTag(user.getAccountName());\n        DisplayUtils.setAvatar(user,\n                               this,\n                               mCurrentAccountAvatarRadiusDimension,\n                               getResources(),\n                               binding.userinfoIcon,\n                               this);\n\n        if (!TextUtils.isEmpty(userInfo.getDisplayName())) {\n            binding.userinfoFullName.setText(userInfo.getDisplayName());\n        }\n\n        if (TextUtils.isEmpty(userInfo.getPhone()) && TextUtils.isEmpty(userInfo.getEmail())\n            && TextUtils.isEmpty(userInfo.getAddress()) && TextUtils.isEmpty(userInfo.getTwitter())\n            && TextUtils.isEmpty(userInfo.getWebsite())) {\n            binding.userinfoList.setVisibility(View.GONE);\n            binding.loadingContent.setVisibility(View.GONE);\n            binding.emptyList.emptyListView.setVisibility(View.VISIBLE);\n\n            setErrorMessageForMultiList(getString(R.string.userinfo_no_info_headline),\n                                        getString(R.string.userinfo_no_info_text), R.drawable.ic_user);\n        } else {\n            binding.loadingContent.setVisibility(View.VISIBLE);\n            binding.emptyList.emptyListView.setVisibility(View.GONE);\n\n            if (binding.userinfoList.getAdapter() instanceof UserInfoAdapter) {\n                binding.userinfoList.setAdapter(new UserInfoAdapter(createUserInfoDetails(userInfo), viewThemeUtils));\n            }\n\n            binding.loadingContent.setVisibility(View.GONE);\n            binding.userinfoList.setVisibility(View.VISIBLE);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled populateUserInfoUi from UserInfoActivity.java into Swift.\n\n        Input:\n\n        Method Name: populateUserInfoUi\n\n        Method Code: private void populateUserInfoUi(UserInfo userInfo) {\n        binding.userinfoUsername.setText(user.getAccountName());\n        binding.userinfoIcon.setTag(user.getAccountName());\n        DisplayUtils.setAvatar(user,\n                               this,\n                               mCurrentAccountAvatarRadiusDimension,\n                               getResources(),\n                               binding.userinfoIcon,\n                               this);\n\n        if (!TextUtils.isEmpty(userInfo.getDisplayName())) {\n            binding.userinfoFullName.setText(userInfo.getDisplayName());\n        }\n\n        if (TextUtils.isEmpty(userInfo.getPhone()) && TextUtils.isEmpty(userInfo.getEmail())\n            && TextUtils.isEmpty(userInfo.getAddress()) && TextUtils.isEmpty(userInfo.getTwitter())\n            && TextUtils.isEmpty(userInfo.getWebsite())) {\n            binding.userinfoList.setVisibility(View.GONE);\n            binding.loadingContent.setVisibility(View.GONE);\n            binding.emptyList.emptyListView.setVisibility(View.VISIBLE);\n\n            setErrorMessageForMultiList(getString(R.string.userinfo_no_info_headline),\n                                        getString(R.string.userinfo_no_info_text), R.drawable.ic_user);\n        } else {\n            binding.loadingContent.setVisibility(View.VISIBLE);\n            binding.emptyList.emptyListView.setVisibility(View.GONE);\n\n            if (binding.userinfoList.getAdapter() instanceof UserInfoAdapter) {\n                binding.userinfoList.setAdapter(new UserInfoAdapter(createUserInfoDetails(userInfo), viewThemeUtils));\n            }\n\n            binding.loadingContent.setVisibility(View.GONE);\n            binding.userinfoList.setVisibility(View.VISIBLE);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func populateUserInfoUi(userInfo: UserInfo) {\n    binding.userinfoUsername.text = user.getAccountName()\n    binding.userinfoIcon.tag = user.getAccountName()\n    DisplayUtils.setAvatar(user: user,\n                           context: self,\n                           avatarRadius: mCurrentAccountAvatarRadiusDimension,\n                           resources: getResources(),\n                           imageView: binding.userinfoIcon,\n                           activity: self)\n\n    if !userInfo.getDisplayName().isEmpty {\n        binding.userinfoFullName.text = userInfo.getDisplayName()\n    }\n\n    if userInfo.getPhone().isEmpty && userInfo.getEmail().isEmpty &&\n       userInfo.getAddress().isEmpty && userInfo.getTwitter().isEmpty &&\n       userInfo.getWebsite().isEmpty {\n        binding.userinfoList.isHidden = true\n        binding.loadingContent.isHidden = true\n        binding.emptyList.emptyListView.isHidden = false\n\n        setErrorMessageForMultiList(headline: getString(R.string.userinfo_no_info_headline),\n                                    text: getString(R.string.userinfo_no_info_text),\n                                    icon: R.drawable.ic_user)\n    } else {\n        binding.loadingContent.isHidden = false\n        binding.emptyList.emptyListView.isHidden = true\n\n        if binding.userinfoList.adapter is UserInfoAdapter {\n            binding.userinfoList.adapter = UserInfoAdapter(details: createUserInfoDetails(userInfo: userInfo), themeUtils: viewThemeUtils)\n        }\n\n        binding.loadingContent.isHidden = true\n        binding.userinfoList.isHidden = false\n    }\n}\n```"
    },
    {
        "method_name": "createUserInfoDetails",
        "method_code": "private List<UserInfoDetailsItem> createUserInfoDetails(UserInfo userInfo) {\n        List<UserInfoDetailsItem> result = new LinkedList<>();\n\n        addToListIfNeeded(result, R.drawable.ic_phone, userInfo.getPhone(), R.string.user_info_phone);\n        addToListIfNeeded(result, R.drawable.ic_email, userInfo.getEmail(), R.string.user_info_email);\n        addToListIfNeeded(result, R.drawable.ic_map_marker, userInfo.getAddress(), R.string.user_info_address);\n        addToListIfNeeded(result, R.drawable.ic_web, DisplayUtils.beautifyURL(userInfo.getWebsite()),\n                    R.string.user_info_website);\n        addToListIfNeeded(result, R.drawable.ic_twitter, DisplayUtils.beautifyTwitterHandle(userInfo.getTwitter()),\n                    R.string.user_info_twitter);\n\n        return result;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled createUserInfoDetails from UserInfoActivity.java into Swift.\n\n        Input:\n\n        Method Name: createUserInfoDetails\n\n        Method Code: private List<UserInfoDetailsItem> createUserInfoDetails(UserInfo userInfo) {\n        List<UserInfoDetailsItem> result = new LinkedList<>();\n\n        addToListIfNeeded(result, R.drawable.ic_phone, userInfo.getPhone(), R.string.user_info_phone);\n        addToListIfNeeded(result, R.drawable.ic_email, userInfo.getEmail(), R.string.user_info_email);\n        addToListIfNeeded(result, R.drawable.ic_map_marker, userInfo.getAddress(), R.string.user_info_address);\n        addToListIfNeeded(result, R.drawable.ic_web, DisplayUtils.beautifyURL(userInfo.getWebsite()),\n                    R.string.user_info_website);\n        addToListIfNeeded(result, R.drawable.ic_twitter, DisplayUtils.beautifyTwitterHandle(userInfo.getTwitter()),\n                    R.string.user_info_twitter);\n\n        return result;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func createUserInfoDetails(userInfo: UserInfo) -> [UserInfoDetailsItem] {\n    var result: [UserInfoDetailsItem] = []\n\n    addToListIfNeeded(result: &result, icon: R.drawable.ic_phone, value: userInfo.getPhone(), label: R.string.user_info_phone)\n    addToListIfNeeded(result: &result, icon: R.drawable.ic_email, value: userInfo.getEmail(), label: R.string.user_info_email)\n    addToListIfNeeded(result: &result, icon: R.drawable.ic_map_marker, value: userInfo.getAddress(), label: R.string.user_info_address)\n    addToListIfNeeded(result: &result, icon: R.drawable.ic_web, value: DisplayUtils.beautifyURL(userInfo.getWebsite()), label: R.string.user_info_website)\n    addToListIfNeeded(result: &result, icon: R.drawable.ic_twitter, value: DisplayUtils.beautifyTwitterHandle(userInfo.getTwitter()), label: R.string.user_info_twitter)\n\n    return result\n}\n```"
    },
    {
        "method_name": "addToListIfNeeded",
        "method_code": "private void addToListIfNeeded(List<UserInfoDetailsItem> info, @DrawableRes int icon, String text,\n                                   @StringRes int contentDescriptionInt) {\n        if (!TextUtils.isEmpty(text)) {\n            info.add(new UserInfoDetailsItem(icon, text, getResources().getString(contentDescriptionInt)));\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled addToListIfNeeded from UserInfoActivity.java into Swift.\n\n        Input:\n\n        Method Name: addToListIfNeeded\n\n        Method Code: private void addToListIfNeeded(List<UserInfoDetailsItem> info, @DrawableRes int icon, String text,\n                                   @StringRes int contentDescriptionInt) {\n        if (!TextUtils.isEmpty(text)) {\n            info.add(new UserInfoDetailsItem(icon, text, getResources().getString(contentDescriptionInt)));\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func addToListIfNeeded(info: inout [UserInfoDetailsItem], icon: Int, text: String, contentDescriptionInt: Int) {\n    if !text.isEmpty {\n        info.append(UserInfoDetailsItem(icon: icon, text: text, contentDescription: getResources().getString(contentDescriptionInt)))\n    }\n}\n```"
    },
    {
        "method_name": "openAccountRemovalDialog",
        "method_code": "public static void openAccountRemovalDialog(User user, FragmentManager fragmentManager) {\n        AccountRemovalDialog dialog = AccountRemovalDialog.newInstance(user);\n        dialog.show(fragmentManager, \"dialog\");\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled openAccountRemovalDialog from UserInfoActivity.java into Swift.\n\n        Input:\n\n        Method Name: openAccountRemovalDialog\n\n        Method Code: public static void openAccountRemovalDialog(User user, FragmentManager fragmentManager) {\n        AccountRemovalDialog dialog = AccountRemovalDialog.newInstance(user);\n        dialog.show(fragmentManager, \"dialog\");\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func openAccountRemovalDialog(user: User, fragmentManager: FragmentManager) {\n    let dialog = AccountRemovalDialog.newInstance(user: user)\n    dialog.show(fragmentManager, tag: \"dialog\")\n}\n```"
    },
    {
        "method_name": "fetchAndSetData",
        "method_code": "private void fetchAndSetData() {\n        Thread t = new Thread(() -> {\n            NextcloudClient nextcloudClient;\n\n            try {\n                nextcloudClient = OwnCloudClientFactory.createNextcloudClient(user,\n                                                                              this);\n            } catch (AccountUtils.AccountNotFoundException e) {\n                Log_OC.e(this, \"Error retrieving user info\", e);\n                return;\n            }\n\n            RemoteOperationResult<UserInfo> result = new GetUserInfoRemoteOperation().execute(nextcloudClient);\n\n            if (getLifecycle().getCurrentState().isAtLeast(Lifecycle.State.RESUMED)) {\n                if (result.isSuccess() && result.getResultData() != null) {\n                    userInfo = result.getResultData();\n\n                    runOnUiThread(() -> populateUserInfoUi(userInfo));\n                } else {\n                    // show error\n                    runOnUiThread(() -> setErrorMessageForMultiList(\n                        getString(R.string.user_information_retrieval_error),\n                        result.getLogMessage(),\n                        R.drawable.ic_list_empty_error)\n                                 );\n                    Log_OC.d(TAG, result.getLogMessage());\n                }\n            }\n        });\n\n        t.start();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled fetchAndSetData from UserInfoActivity.java into Swift.\n\n        Input:\n\n        Method Name: fetchAndSetData\n\n        Method Code: private void fetchAndSetData() {\n        Thread t = new Thread(() -> {\n            NextcloudClient nextcloudClient;\n\n            try {\n                nextcloudClient = OwnCloudClientFactory.createNextcloudClient(user,\n                                                                              this);\n            } catch (AccountUtils.AccountNotFoundException e) {\n                Log_OC.e(this, \"Error retrieving user info\", e);\n                return;\n            }\n\n            RemoteOperationResult<UserInfo> result = new GetUserInfoRemoteOperation().execute(nextcloudClient);\n\n            if (getLifecycle().getCurrentState().isAtLeast(Lifecycle.State.RESUMED)) {\n                if (result.isSuccess() && result.getResultData() != null) {\n                    userInfo = result.getResultData();\n\n                    runOnUiThread(() -> populateUserInfoUi(userInfo));\n                } else {\n                    // show error\n                    runOnUiThread(() -> setErrorMessageForMultiList(\n                        getString(R.string.user_information_retrieval_error),\n                        result.getLogMessage(),\n                        R.drawable.ic_list_empty_error)\n                                 );\n                    Log_OC.d(TAG, result.getLogMessage());\n                }\n            }\n        });\n\n        t.start();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func fetchAndSetData() {\n    DispatchQueue.global().async {\n        var nextcloudClient: NextcloudClient\n\n        do {\n            nextcloudClient = try OwnCloudClientFactory.createNextcloudClient(user: user, context: self)\n        } catch {\n            Log_OC.e(self, \"Error retrieving user info\", error)\n            return\n        }\n\n        let result = GetUserInfoRemoteOperation().execute(nextcloudClient: nextcloudClient)\n\n        if self.lifecycle.currentState.isAtLeast(.resumed) {\n            if result.isSuccess, let userInfo = result.resultData {\n                self.userInfo = userInfo\n\n                DispatchQueue.main.async {\n                    self.populateUserInfoUi(userInfo: userInfo)\n                }\n            } else {\n                DispatchQueue.main.async {\n                    self.setErrorMessageForMultiList(\n                        message: self.getString(R.string.user_information_retrieval_error),\n                        logMessage: result.logMessage,\n                        icon: R.drawable.ic_list_empty_error\n                    )\n                }\n                Log_OC.d(TAG, result.logMessage)\n            }\n        }\n    }\n}\n```"
    },
    {
        "method_name": "onSaveInstanceState",
        "method_code": "@Override\n    protected void onSaveInstanceState(@NonNull Bundle outState) {\n        super.onSaveInstanceState(outState);\n        if (userInfo != null) {\n            outState.putParcelable(KEY_USER_DATA, userInfo);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onSaveInstanceState from UserInfoActivity.java into Swift.\n\n        Input:\n\n        Method Name: onSaveInstanceState\n\n        Method Code: @Override\n    protected void onSaveInstanceState(@NonNull Bundle outState) {\n        super.onSaveInstanceState(outState);\n        if (userInfo != null) {\n            outState.putParcelable(KEY_USER_DATA, userInfo);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func encodeRestorableState(with coder: NSCoder) {\n    super.encodeRestorableState(with: coder)\n    if let userInfo = userInfo {\n        coder.encode(userInfo, forKey: KEY_USER_DATA)\n    }\n}\n```"
    },
    {
        "method_name": "onMessageEvent",
        "method_code": "@Subscribe(threadMode = ThreadMode.BACKGROUND)\n    public void onMessageEvent(TokenPushEvent event) {\n        PushUtils.pushRegistrationToServer(getUserAccountManager(), preferences.getPushToken());\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onMessageEvent from UserInfoActivity.java into Swift.\n\n        Input:\n\n        Method Name: onMessageEvent\n\n        Method Code: @Subscribe(threadMode = ThreadMode.BACKGROUND)\n    public void onMessageEvent(TokenPushEvent event) {\n        PushUtils.pushRegistrationToServer(getUserAccountManager(), preferences.getPushToken());\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\n@objc func onMessageEvent(_ event: TokenPushEvent) {\n    PushUtils.pushRegistrationToServer(userAccountManager: getUserAccountManager(), pushToken: preferences.pushToken)\n}\n```"
    },
    {
        "method_name": "setData",
        "method_code": "public void setData(List<UserInfoDetailsItem> displayList) {\n            mDisplayList = displayList == null ? new LinkedList<>() : displayList;\n            notifyDataSetChanged();\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled setData from UserInfoActivity.java into Swift.\n\n        Input:\n\n        Method Name: setData\n\n        Method Code: public void setData(List<UserInfoDetailsItem> displayList) {\n            mDisplayList = displayList == null ? new LinkedList<>() : displayList;\n            notifyDataSetChanged();\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setData(displayList: [UserInfoDetailsItem]?) {\n    mDisplayList = displayList ?? []\n    notifyDataSetChanged()\n}\n```"
    },
    {
        "method_name": "onCreateViewHolder",
        "method_code": "@NonNull\n        @Override\n        public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n            return new ViewHolder(\n                UserInfoDetailsTableItemBinding.inflate(\n                    LayoutInflater.from(parent.getContext()),\n                    parent,\n                    false)\n            );\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreateViewHolder from UserInfoActivity.java into Swift.\n\n        Input:\n\n        Method Name: onCreateViewHolder\n\n        Method Code: @NonNull\n        @Override\n        public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n            return new ViewHolder(\n                UserInfoDetailsTableItemBinding.inflate(\n                    LayoutInflater.from(parent.getContext()),\n                    parent,\n                    false)\n            );\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n    let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"UserInfoDetailsTableItemCell\", for: indexPath) as! UserInfoDetailsTableItemCell\n    return cell\n}\n```"
    },
    {
        "method_name": "onBindViewHolder",
        "method_code": "@Override\n        public void onBindViewHolder(@NonNull ViewHolder holder, int position) {\n            UserInfoDetailsItem item = mDisplayList.get(position);\n            holder.binding.icon.setImageResource(item.icon);\n            holder.binding.text.setText(item.text);\n            holder.binding.icon.setContentDescription(item.iconContentDescription);\n            viewThemeUtils.platform.colorImageView(holder.binding.icon);\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled onBindViewHolder from UserInfoActivity.java into Swift.\n\n        Input:\n\n        Method Name: onBindViewHolder\n\n        Method Code: @Override\n        public void onBindViewHolder(@NonNull ViewHolder holder, int position) {\n            UserInfoDetailsItem item = mDisplayList.get(position);\n            holder.binding.icon.setImageResource(item.icon);\n            holder.binding.text.setText(item.text);\n            holder.binding.icon.setContentDescription(item.iconContentDescription);\n            viewThemeUtils.platform.colorImageView(holder.binding.icon);\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onBindViewHolder(holder: ViewHolder, position: Int) {\n    let item = mDisplayList[position]\n    holder.binding.icon.image = UIImage(named: item.icon)\n    holder.binding.text.text = item.text\n    holder.binding.icon.accessibilityLabel = item.iconContentDescription\n    viewThemeUtils.platform.colorImageView(holder.binding.icon)\n}\n```"
    },
    {
        "method_name": "getItemCount",
        "method_code": "@Override\n        public int getItemCount() {\n            return mDisplayList.size();\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled getItemCount from UserInfoActivity.java into Swift.\n\n        Input:\n\n        Method Name: getItemCount\n\n        Method Code: @Override\n        public int getItemCount() {\n            return mDisplayList.size();\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getItemCount() -> Int {\n    return mDisplayList.count\n}\n```"
    }
]