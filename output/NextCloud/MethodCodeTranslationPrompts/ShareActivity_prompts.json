[
    {
        "method_name": "onCreate",
        "method_code": "verride\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        ShareActivityBinding binding = ShareActivityBinding.inflate(getLayoutInflater());\n        setContentView(binding.getRoot());\n\n        OCFile file = getFile();\n        Optional<User> optionalUser = getUser();\n        if (!optionalUser.isPresent()) {\n            finish();\n            return;\n        }\n\n        // Icon\n        if (file.isFolder()) {\n            boolean isAutoUploadFolder = SyncedFolderProvider.isAutoUploadFolder(syncedFolderProvider, file, optionalUser.get());\n\n            Integer overlayIconId = file.getFileOverlayIconId(isAutoUploadFolder);\n            LayerDrawable drawable = MimeTypeUtil.getFolderIcon(preferences.isDarkModeEnabled(), overlayIconId, this, viewThemeUtils);\n            binding.shareFileIcon.setImageDrawable(drawable);\n        } else {\n            binding.shareFileIcon.setImageDrawable(MimeTypeUtil.getFileTypeIcon(file.getMimeType(),\n                                                                                file.getFileName(),\n                                                                                this,\n                                                                                viewThemeUtils));\n            if (MimeTypeUtil.isImage(file)) {\n                String remoteId = String.valueOf(file.getRemoteId());\n                Bitmap thumbnail = ThumbnailsCacheManager.getBitmapFromDiskCache(remoteId);\n                if (thumbnail != null) {\n                    binding.shareFileIcon.setImageBitmap(thumbnail);\n                }\n            }\n        }\n\n        // Name\n        binding.shareFileName.setText(getResources().getString(R.string.share_file, file.getFileName()));\n\n        viewThemeUtils.platform.colorViewBackground(binding.shareHeaderDivider);\n\n        // Size\n        binding.shareFileSize.setText(DisplayUtils.bytesToHumanReadable(file.getFileLength()));\n\n        Activity activity = this;\n        new Thread(() -> {\n            RemoteOperationResult result = new ReadFileRemoteOperation(getFile().getRemotePath())\n                .execute(optionalUser.get(),\n                         activity);\n\n            if (result.isSuccess()) {\n                RemoteFile remoteFile = (RemoteFile) result.getData().get(0);\n                long length = remoteFile.getLength();\n\n                getFile().setFileLength(length);\n                runOnUiThread(() -> binding.shareFileSize.setText(DisplayUtils.bytesToHumanReadable(length)));\n            }\n        }).start();\n\n        if (savedInstanceState == null) {\n            // Add Share fragment on first creation\n            FragmentTransaction ft = getSupportFragmentManager().beginTransaction();\n            Fragment fragment = FileDetailSharingFragment.newInstance(getFile(), optionalUser.get());\n            ft.replace(R.id.share_fragment_container, fragment, TAG_SHARE_FRAGMENT);\n            ft.commit();\n        }\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreate from ShareActivity.java into Swift.\n\n        Input:\n\n        Method Name: onCreate\n\n        Method Code: verride\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        ShareActivityBinding binding = ShareActivityBinding.inflate(getLayoutInflater());\n        setContentView(binding.getRoot());\n\n        OCFile file = getFile();\n        Optional<User> optionalUser = getUser();\n        if (!optionalUser.isPresent()) {\n            finish();\n            return;\n        }\n\n        // Icon\n        if (file.isFolder()) {\n            boolean isAutoUploadFolder = SyncedFolderProvider.isAutoUploadFolder(syncedFolderProvider, file, optionalUser.get());\n\n            Integer overlayIconId = file.getFileOverlayIconId(isAutoUploadFolder);\n            LayerDrawable drawable = MimeTypeUtil.getFolderIcon(preferences.isDarkModeEnabled(), overlayIconId, this, viewThemeUtils);\n            binding.shareFileIcon.setImageDrawable(drawable);\n        } else {\n            binding.shareFileIcon.setImageDrawable(MimeTypeUtil.getFileTypeIcon(file.getMimeType(),\n                                                                                file.getFileName(),\n                                                                                this,\n                                                                                viewThemeUtils));\n            if (MimeTypeUtil.isImage(file)) {\n                String remoteId = String.valueOf(file.getRemoteId());\n                Bitmap thumbnail = ThumbnailsCacheManager.getBitmapFromDiskCache(remoteId);\n                if (thumbnail != null) {\n                    binding.shareFileIcon.setImageBitmap(thumbnail);\n                }\n            }\n        }\n\n        // Name\n        binding.shareFileName.setText(getResources().getString(R.string.share_file, file.getFileName()));\n\n        viewThemeUtils.platform.colorViewBackground(binding.shareHeaderDivider);\n\n        // Size\n        binding.shareFileSize.setText(DisplayUtils.bytesToHumanReadable(file.getFileLength()));\n\n        Activity activity = this;\n        new Thread(() -> {\n            RemoteOperationResult result = new ReadFileRemoteOperation(getFile().getRemotePath())\n                .execute(optionalUser.get(),\n                         activity);\n\n            if (result.isSuccess()) {\n                RemoteFile remoteFile = (RemoteFile) result.getData().get(0);\n                long length = remoteFile.getLength();\n\n                getFile().setFileLength(length);\n                runOnUiThread(() -> binding.shareFileSize.setText(DisplayUtils.bytesToHumanReadable(length)));\n            }\n        }).start();\n\n        if (savedInstanceState == null) {\n            // Add Share fragment on first creation\n            FragmentTransaction ft = getSupportFragmentManager().beginTransaction();\n            Fragment fragment = FileDetailSharingFragment.newInstance(getFile(), optionalUser.get());\n            ft.replace(R.id.share_fragment_container, fragment, TAG_SHARE_FRAGMENT);\n            ft.commit();\n        }\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n\n    let binding = ShareActivityBinding.inflate(getLayoutInflater())\n    setContentView(binding.root)\n\n    guard let file = getFile(), let user = getUser() else {\n        finish()\n        return\n    }\n\n    // Icon\n    if file.isFolder() {\n        let isAutoUploadFolder = SyncedFolderProvider.isAutoUploadFolder(syncedFolderProvider, file, user)\n\n        let overlayIconId = file.getFileOverlayIconId(isAutoUploadFolder)\n        let drawable = MimeTypeUtil.getFolderIcon(preferences.isDarkModeEnabled(), overlayIconId, self, viewThemeUtils)\n        binding.shareFileIcon.setImageDrawable(drawable)\n    } else {\n        binding.shareFileIcon.setImageDrawable(MimeTypeUtil.getFileTypeIcon(file.getMimeType(), file.getFileName(), self, viewThemeUtils))\n        if MimeTypeUtil.isImage(file) {\n            let remoteId = String(file.getRemoteId())\n            if let thumbnail = ThumbnailsCacheManager.getBitmapFromDiskCache(remoteId) {\n                binding.shareFileIcon.setImageBitmap(thumbnail)\n            }\n        }\n    }\n\n    // Name\n    binding.shareFileName.text = getResources().getString(R.string.share_file, file.getFileName())\n\n    viewThemeUtils.platform.colorViewBackground(binding.shareHeaderDivider)\n\n    // Size\n    binding.shareFileSize.text = DisplayUtils.bytesToHumanReadable(file.getFileLength())\n\n    let activity = self\n    DispatchQueue.global().async {\n        let result = ReadFileRemoteOperation(getFile().getRemotePath()).execute(user, activity)\n\n        if result.isSuccess {\n            if let remoteFile = result.getData().first as? RemoteFile {\n                let length = remoteFile.getLength()\n\n                getFile().setFileLength(length)\n                DispatchQueue.main.async {\n                    binding.shareFileSize.text = DisplayUtils.bytesToHumanReadable(length)\n                }\n            }\n        }\n    }\n\n    if savedInstanceState == nil {\n        // Add Share fragment on first creation\n        let ft = getSupportFragmentManager().beginTransaction()\n        let fragment = FileDetailSharingFragment.newInstance(getFile(), user)\n        ft.replace(R.id.share_fragment_container, fragment, TAG_SHARE_FRAGMENT)\n        ft.commit()\n    }\n}\n```"
    },
    {
        "method_name": "onStart",
        "method_code": "verride\n    protected void onStart() {\n        super.onStart();\n\n        // Load data into the list\n        Log_OC.d(TAG, \"Refreshing lists on account set\");\n        refreshSharesFromStorageManager();\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onStart from ShareActivity.java into Swift.\n\n        Input:\n\n        Method Name: onStart\n\n        Method Code: verride\n    protected void onStart() {\n        super.onStart();\n\n        // Load data into the list\n        Log_OC.d(TAG, \"Refreshing lists on account set\");\n        refreshSharesFromStorageManager();\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n\n    // Load data into the list\n    Log_OC.d(TAG, \"Refreshing lists on account set\")\n    refreshSharesFromStorageManager()\n}\n```"
    },
    {
        "method_name": "doShareWith",
        "method_code": "verride\n    protected void doShareWith(String shareeName, ShareType shareType) {\n        getSupportFragmentManager().beginTransaction().replace(R.id.share_fragment_container,\n                                                               FileDetailsSharingProcessFragment.newInstance(getFile(),\n                                                                                                             shareeName,\n                                                                                                             shareType,\n                                                                                                             false),\n                                                               FileDetailsSharingProcessFragment.TAG)\n            .commit();\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled doShareWith from ShareActivity.java into Swift.\n\n        Input:\n\n        Method Name: doShareWith\n\n        Method Code: verride\n    protected void doShareWith(String shareeName, ShareType shareType) {\n        getSupportFragmentManager().beginTransaction().replace(R.id.share_fragment_container,\n                                                               FileDetailsSharingProcessFragment.newInstance(getFile(),\n                                                                                                             shareeName,\n                                                                                                             shareType,\n                                                                                                             false),\n                                                               FileDetailsSharingProcessFragment.TAG)\n            .commit();\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func doShareWith(shareeName: String, shareType: ShareType) {\n    let fragment = FileDetailsSharingProcessFragment.newInstance(getFile(), shareeName, shareType, false)\n    let transaction = supportFragmentManager.beginTransaction()\n    transaction.replace(R.id.share_fragment_container, fragment, FileDetailsSharingProcessFragment.TAG)\n    transaction.commit()\n}\n```"
    },
    {
        "method_name": "onRemoteOperationFinish",
        "method_code": "verride\n    public void onRemoteOperationFinish(RemoteOperation operation, RemoteOperationResult result) {\n        super.onRemoteOperationFinish(operation, result);\n\n        if (result.isSuccess() ||\n                (operation instanceof GetSharesForFileOperation &&\n                        result.getCode() == RemoteOperationResult.ResultCode.SHARE_NOT_FOUND\n                )\n                ) {\n            Log_OC.d(TAG, \"Refreshing view on successful operation or finished refresh\");\n            refreshSharesFromStorageManager();\n        }\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onRemoteOperationFinish from ShareActivity.java into Swift.\n\n        Input:\n\n        Method Name: onRemoteOperationFinish\n\n        Method Code: verride\n    public void onRemoteOperationFinish(RemoteOperation operation, RemoteOperationResult result) {\n        super.onRemoteOperationFinish(operation, result);\n\n        if (result.isSuccess() ||\n                (operation instanceof GetSharesForFileOperation &&\n                        result.getCode() == RemoteOperationResult.ResultCode.SHARE_NOT_FOUND\n                )\n                ) {\n            Log_OC.d(TAG, \"Refreshing view on successful operation or finished refresh\");\n            refreshSharesFromStorageManager();\n        }\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onRemoteOperationFinish(_ operation: RemoteOperation, result: RemoteOperationResult) {\n    super.onRemoteOperationFinish(operation, result)\n    \n    if result.isSuccess() || \n        (operation is GetSharesForFileOperation && \n         result.code == .shareNotFound) {\n        Log_OC.d(TAG, \"Refreshing view on successful operation or finished refresh\")\n        refreshSharesFromStorageManager()\n    }\n}\n```"
    },
    {
        "method_name": "refreshSharesFromStorageManager",
        "method_code": "ivate void refreshSharesFromStorageManager() {\n\n        FileDetailSharingFragment shareFileFragment = getShareFileFragment();\n        if (shareFileFragment != null\n                && shareFileFragment.isAdded()) {   // only if added to the view hierarchy!!\n            shareFileFragment.refreshCapabilitiesFromDB();\n            shareFileFragment.refreshSharesFromDB();\n        }\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled refreshSharesFromStorageManager from ShareActivity.java into Swift.\n\n        Input:\n\n        Method Name: refreshSharesFromStorageManager\n\n        Method Code: ivate void refreshSharesFromStorageManager() {\n\n        FileDetailSharingFragment shareFileFragment = getShareFileFragment();\n        if (shareFileFragment != null\n                && shareFileFragment.isAdded()) {   // only if added to the view hierarchy!!\n            shareFileFragment.refreshCapabilitiesFromDB();\n            shareFileFragment.refreshSharesFromDB();\n        }\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func refreshSharesFromStorageManager() {\n    if let shareFileFragment = getShareFileFragment(), shareFileFragment.isAdded {\n        shareFileFragment.refreshCapabilitiesFromDB()\n        shareFileFragment.refreshSharesFromDB()\n    }\n}\n```"
    },
    {
        "method_name": "getShareFileFragment",
        "method_code": "ivate FileDetailSharingFragment getShareFileFragment() {\n        return (FileDetailSharingFragment) getSupportFragmentManager().findFragmentByTag(TAG_SHARE_FRAGMENT);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getShareFileFragment from ShareActivity.java into Swift.\n\n        Input:\n\n        Method Name: getShareFileFragment\n\n        Method Code: ivate FileDetailSharingFragment getShareFileFragment() {\n        return (FileDetailSharingFragment) getSupportFragmentManager().findFragmentByTag(TAG_SHARE_FRAGMENT);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getShareFileFragment() -> FileDetailSharingFragment? {\n    return getSupportFragmentManager().findFragment(byTag: TAG_SHARE_FRAGMENT) as? FileDetailSharingFragment\n}\n```"
    },
    {
        "method_name": "onShareProcessClosed",
        "method_code": "verride\n    public void onShareProcessClosed() {\n        finish();\n    }\n}",
        "prompt": "\n        Please translate the following Java (Android) method titled onShareProcessClosed from ShareActivity.java into Swift.\n\n        Input:\n\n        Method Name: onShareProcessClosed\n\n        Method Code: verride\n    public void onShareProcessClosed() {\n        finish();\n    }\n}\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onShareProcessClosed() {\n    self.dismiss(animated: true, completion: nil)\n}\n```"
    }
]