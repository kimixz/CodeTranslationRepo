[
    {
        "method_name": "deleteKeyForAccount",
        "method_code": "@Override\n    public void deleteKeyForAccount(@NonNull String account, @NonNull String key) {\n        arbitraryDataDao.deleteValue(account, key);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled deleteKeyForAccount from ArbitraryDataProviderImpl.java into Swift.\n\n        Input:\n\n        Method Name: deleteKeyForAccount\n\n        Method Code: @Override\n    public void deleteKeyForAccount(@NonNull String account, @NonNull String key) {\n        arbitraryDataDao.deleteValue(account, key);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc deleteKeyForAccount(account: String, key: String) {\n    arbitraryDataDao.deleteValue(account: account, key: key)\n}\n```"
    },
    {
        "method_name": "storeOrUpdateKeyValue",
        "method_code": "@Override\n    public void storeOrUpdateKeyValue(@NonNull String accountName, @NonNull String key, long newValue) {\n        storeOrUpdateKeyValue(accountName, key, String.valueOf(newValue));\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled storeOrUpdateKeyValue from ArbitraryDataProviderImpl.java into Swift.\n\n        Input:\n\n        Method Name: storeOrUpdateKeyValue\n\n        Method Code: @Override\n    public void storeOrUpdateKeyValue(@NonNull String accountName, @NonNull String key, long newValue) {\n        storeOrUpdateKeyValue(accountName, key, String.valueOf(newValue));\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc storeOrUpdateKeyValue(accountName: String, key: String, newValue: Int64) {\n    storeOrUpdateKeyValue(accountName: accountName, key: key, newValue: String(newValue))\n}\n```"
    },
    {
        "method_name": "incrementValue",
        "method_code": "@Override\n    public void incrementValue(@NonNull String accountName, @NonNull String key) {\n        int oldValue = getIntegerValue(accountName, key);\n\n        int value = 1;\n        if (oldValue > 0) {\n            value = oldValue + 1;\n        }\n        storeOrUpdateKeyValue(accountName, key, value);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled incrementValue from ArbitraryDataProviderImpl.java into Swift.\n\n        Input:\n\n        Method Name: incrementValue\n\n        Method Code: @Override\n    public void incrementValue(@NonNull String accountName, @NonNull String key) {\n        int oldValue = getIntegerValue(accountName, key);\n\n        int value = 1;\n        if (oldValue > 0) {\n            value = oldValue + 1;\n        }\n        storeOrUpdateKeyValue(accountName, key, value);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc incrementValue(accountName: String, key: String) {\n    let oldValue = getIntegerValue(accountName: accountName, key: key)\n\n    var value = 1\n    if oldValue > 0 {\n        value = oldValue + 1\n    }\n    storeOrUpdateKeyValue(accountName: accountName, key: key, value: value)\n}\n```"
    },
    {
        "method_name": "storeOrUpdateKeyValue",
        "method_code": "@Override\n    public void storeOrUpdateKeyValue(@NonNull final String accountName, @NonNull final String key, final boolean newValue) {\n        storeOrUpdateKeyValue(accountName, key, String.valueOf(newValue));\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled storeOrUpdateKeyValue from ArbitraryDataProviderImpl.java into Swift.\n\n        Input:\n\n        Method Name: storeOrUpdateKeyValue\n\n        Method Code: @Override\n    public void storeOrUpdateKeyValue(@NonNull final String accountName, @NonNull final String key, final boolean newValue) {\n        storeOrUpdateKeyValue(accountName, key, String.valueOf(newValue));\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc storeOrUpdateKeyValue(accountName: String, key: String, newValue: Bool) {\n    storeOrUpdateKeyValue(accountName: accountName, key: key, newValue: String(newValue))\n}\n```"
    },
    {
        "method_name": "storeOrUpdateKeyValue",
        "method_code": "@Override\n    public void storeOrUpdateKeyValue(@NonNull String accountName,\n                                      @NonNull String key,\n                                      @Nullable String newValue) {\n        final ArbitraryDataEntity currentValue = arbitraryDataDao.getByAccountAndKey(accountName, key);\n        if (currentValue != null) {\n            arbitraryDataDao.updateValue(accountName, key, newValue);\n        } else {\n            arbitraryDataDao.insertValue(accountName, key, newValue);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled storeOrUpdateKeyValue from ArbitraryDataProviderImpl.java into Swift.\n\n        Input:\n\n        Method Name: storeOrUpdateKeyValue\n\n        Method Code: @Override\n    public void storeOrUpdateKeyValue(@NonNull String accountName,\n                                      @NonNull String key,\n                                      @Nullable String newValue) {\n        final ArbitraryDataEntity currentValue = arbitraryDataDao.getByAccountAndKey(accountName, key);\n        if (currentValue != null) {\n            arbitraryDataDao.updateValue(accountName, key, newValue);\n        } else {\n            arbitraryDataDao.insertValue(accountName, key, newValue);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc storeOrUpdateKeyValue(accountName: String, key: String, newValue: String?) {\n    if let currentValue = arbitraryDataDao.getByAccountAndKey(accountName: accountName, key: key) {\n        arbitraryDataDao.updateValue(accountName: accountName, key: key, newValue: newValue)\n    } else {\n        arbitraryDataDao.insertValue(accountName: accountName, key: key, newValue: newValue)\n    }\n}\n```"
    },
    {
        "method_name": "storeOrUpdateKeyValue",
        "method_code": "@Override\n    public void storeOrUpdateKeyValue(@NonNull User user,\n                                      @NonNull String key,\n                                      @NonNull String newValue) {\n        storeOrUpdateKeyValue(user.getAccountName(), key, newValue);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled storeOrUpdateKeyValue from ArbitraryDataProviderImpl.java into Swift.\n\n        Input:\n\n        Method Name: storeOrUpdateKeyValue\n\n        Method Code: @Override\n    public void storeOrUpdateKeyValue(@NonNull User user,\n                                      @NonNull String key,\n                                      @NonNull String newValue) {\n        storeOrUpdateKeyValue(user.getAccountName(), key, newValue);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc storeOrUpdateKeyValue(user: User, key: String, newValue: String) {\n    storeOrUpdateKeyValue(user.getAccountName(), key: key, newValue: newValue)\n}\n```"
    },
    {
        "method_name": "getLongValue",
        "method_code": "@Override\n    public long getLongValue(@NonNull String accountName, @NonNull String key) {\n        String value = getValue(accountName, key);\n\n        if (value.isEmpty()) {\n            return -1L;\n        } else {\n            return Long.parseLong(value);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getLongValue from ArbitraryDataProviderImpl.java into Swift.\n\n        Input:\n\n        Method Name: getLongValue\n\n        Method Code: @Override\n    public long getLongValue(@NonNull String accountName, @NonNull String key) {\n        String value = getValue(accountName, key);\n\n        if (value.isEmpty()) {\n            return -1L;\n        } else {\n            return Long.parseLong(value);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getLongValue(accountName: String, key: String) -> Int64 {\n    let value = getValue(accountName: accountName, key: key)\n    \n    if value.isEmpty {\n        return -1\n    } else {\n        return Int64(value) ?? -1\n    }\n}\n```"
    },
    {
        "method_name": "getLongValue",
        "method_code": "@Override\n    public long getLongValue(User user, @NonNull String key) {\n        return getLongValue(user.getAccountName(), key);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getLongValue from ArbitraryDataProviderImpl.java into Swift.\n\n        Input:\n\n        Method Name: getLongValue\n\n        Method Code: @Override\n    public long getLongValue(User user, @NonNull String key) {\n        return getLongValue(user.getAccountName(), key);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func getLongValue(user: User, key: String) -> Int64 {\n    return getLongValue(user.getAccountName(), key: key)\n}\n```"
    },
    {
        "method_name": "getBooleanValue",
        "method_code": "@Override\n    public boolean getBooleanValue(@NonNull String accountName, @NonNull String key) {\n        return TRUE.equalsIgnoreCase(getValue(accountName, key));\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getBooleanValue from ArbitraryDataProviderImpl.java into Swift.\n\n        Input:\n\n        Method Name: getBooleanValue\n\n        Method Code: @Override\n    public boolean getBooleanValue(@NonNull String accountName, @NonNull String key) {\n        return TRUE.equalsIgnoreCase(getValue(accountName, key));\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getBooleanValue(accountName: String, key: String) -> Bool {\n    return getValue(accountName: accountName, key: key).caseInsensitiveCompare(\"TRUE\") == .orderedSame\n}\n```"
    },
    {
        "method_name": "getBooleanValue",
        "method_code": "@Override\n    public boolean getBooleanValue(User user, @NonNull String key) {\n        return getBooleanValue(user.getAccountName(), key);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getBooleanValue from ArbitraryDataProviderImpl.java into Swift.\n\n        Input:\n\n        Method Name: getBooleanValue\n\n        Method Code: @Override\n    public boolean getBooleanValue(User user, @NonNull String key) {\n        return getBooleanValue(user.getAccountName(), key);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getBooleanValue(user: User, key: String) -> Bool {\n    return getBooleanValue(accountName: user.getAccountName(), key: key)\n}\n```"
    },
    {
        "method_name": "getIntegerValue",
        "method_code": "@Override\n    public int getIntegerValue(@NonNull String accountName, @NonNull String key) {\n        String value = getValue(accountName, key);\n\n        if (value.isEmpty()) {\n            return -1;\n        } else {\n            return Integer.parseInt(value);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getIntegerValue from ArbitraryDataProviderImpl.java into Swift.\n\n        Input:\n\n        Method Name: getIntegerValue\n\n        Method Code: @Override\n    public int getIntegerValue(@NonNull String accountName, @NonNull String key) {\n        String value = getValue(accountName, key);\n\n        if (value.isEmpty()) {\n            return -1;\n        } else {\n            return Integer.parseInt(value);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getIntegerValue(accountName: String, key: String) -> Int {\n    let value = getValue(accountName: accountName, key: key)\n    \n    if value.isEmpty {\n        return -1\n    } else {\n        return Int(value) ?? -1\n    }\n}\n```"
    },
    {
        "method_name": "getValue",
        "method_code": "@Override\n    @NonNull\n    public String getValue(@Nullable User user, @NonNull String key) {\n        return user != null ? getValue(user.getAccountName(), key) : \"\";\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getValue from ArbitraryDataProviderImpl.java into Swift.\n\n        Input:\n\n        Method Name: getValue\n\n        Method Code: @Override\n    @NonNull\n    public String getValue(@Nullable User user, @NonNull String key) {\n        return user != null ? getValue(user.getAccountName(), key) : \"\";\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getValue(user: User?, key: String) -> String {\n    return user != nil ? getValue(user!.accountName, key: key) : \"\"\n}\n```"
    },
    {
        "method_name": "getValue",
        "method_code": "@Override\n    @NonNull\n    public String getValue(@NonNull String accountName, @NonNull String key) {\n        final ArbitraryDataEntity entity = arbitraryDataDao.getByAccountAndKey(accountName, key);\n        if (entity == null || entity.getValue() == null) {\n            return \"\";\n        }\n        return entity.getValue();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getValue from ArbitraryDataProviderImpl.java into Swift.\n\n        Input:\n\n        Method Name: getValue\n\n        Method Code: @Override\n    @NonNull\n    public String getValue(@NonNull String accountName, @NonNull String key) {\n        final ArbitraryDataEntity entity = arbitraryDataDao.getByAccountAndKey(accountName, key);\n        if (entity == null || entity.getValue() == null) {\n            return \"\";\n        }\n        return entity.getValue();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getValue(accountName: String, key: String) -> String {\n    guard let entity = arbitraryDataDao.getByAccountAndKey(accountName: accountName, key: key), let value = entity.getValue() else {\n        return \"\"\n    }\n    return value\n}\n```"
    }
]