[
    {
        "method_name": "onCreate",
        "method_code": "Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n                /// read extra parameters in intent\n        Intent intent = getIntent();\n        user = IntentExtensionsKt.getParcelableArgument(intent, EXTRA_USER, User.class);\n        mRemotePaths = intent.getStringArrayListExtra(EXTRA_REMOTE_PATHS);\n        mLocalPaths = intent.getStringArrayListExtra(EXTRA_LOCAL_PATHS);\n        mStorageManager = new FileDataStorageManager(user, getContentResolver());\n        mHandler = new Handler();\n        if (mCurrentDialog != null) {\n            mCurrentDialog.dismiss();\n            mCurrentDialog = null;\n        }\n\n        /// load generic layout\n        setContentView(R.layout.generic_explanation);\n\n        /// customize text message\n        TextView textView = findViewById(R.id.message);\n        String appName = getString(R.string.app_name);\n        String message = String.format(getString(R.string.sync_foreign_files_forgotten_explanation),\n                appName, appName, appName, appName, user.getAccountName());\n        textView.setText(message);\n        textView.setMovementMethod(new ScrollingMovementMethod());\n\n        /// load the list of local and remote files that failed\n        ListView listView = findViewById(R.id.list);\n        if (mLocalPaths != null && mLocalPaths.size() > 0) {\n            mAdapter = new ErrorsWhileCopyingListAdapter();\n            listView.setAdapter(mAdapter);\n        } else {\n            listView.setVisibility(View.GONE);\n            mAdapter = null;\n        }\n\n        /// customize buttons\n        Button cancelBtn = findViewById(R.id.cancel);\n        Button okBtn = findViewById(R.id.ok);\n\n        okBtn.setText(R.string.foreign_files_move);\n        cancelBtn.setOnClickListener(this);\n        okBtn.setOnClickListener(this);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreate from ErrorsWhileCopyingHandlerActivity.java into Swift.\n\n        Input:\n\n        Method Name: onCreate\n\n        Method Code: Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n                /// read extra parameters in intent\n        Intent intent = getIntent();\n        user = IntentExtensionsKt.getParcelableArgument(intent, EXTRA_USER, User.class);\n        mRemotePaths = intent.getStringArrayListExtra(EXTRA_REMOTE_PATHS);\n        mLocalPaths = intent.getStringArrayListExtra(EXTRA_LOCAL_PATHS);\n        mStorageManager = new FileDataStorageManager(user, getContentResolver());\n        mHandler = new Handler();\n        if (mCurrentDialog != null) {\n            mCurrentDialog.dismiss();\n            mCurrentDialog = null;\n        }\n\n        /// load generic layout\n        setContentView(R.layout.generic_explanation);\n\n        /// customize text message\n        TextView textView = findViewById(R.id.message);\n        String appName = getString(R.string.app_name);\n        String message = String.format(getString(R.string.sync_foreign_files_forgotten_explanation),\n                appName, appName, appName, appName, user.getAccountName());\n        textView.setText(message);\n        textView.setMovementMethod(new ScrollingMovementMethod());\n\n        /// load the list of local and remote files that failed\n        ListView listView = findViewById(R.id.list);\n        if (mLocalPaths != null && mLocalPaths.size() > 0) {\n            mAdapter = new ErrorsWhileCopyingListAdapter();\n            listView.setAdapter(mAdapter);\n        } else {\n            listView.setVisibility(View.GONE);\n            mAdapter = null;\n        }\n\n        /// customize buttons\n        Button cancelBtn = findViewById(R.id.cancel);\n        Button okBtn = findViewById(R.id.ok);\n\n        okBtn.setText(R.string.foreign_files_move);\n        cancelBtn.setOnClickListener(this);\n        okBtn.setOnClickListener(this);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n\n    /// read extra parameters in intent\n    let intent = self.intent\n    user = intent.getParcelableArgument(EXTRA_USER, User.self)\n    mRemotePaths = intent.getStringArrayListExtra(EXTRA_REMOTE_PATHS)\n    mLocalPaths = intent.getStringArrayListExtra(EXTRA_LOCAL_PATHS)\n    mStorageManager = FileDataStorageManager(user: user, contentResolver: contentResolver)\n    mHandler = Handler()\n    if mCurrentDialog != nil {\n        mCurrentDialog?.dismiss()\n        mCurrentDialog = nil\n    }\n\n    /// load generic layout\n    setContentView(R.layout.generic_explanation)\n\n    /// customize text message\n    let textView = findViewById(R.id.message) as! TextView\n    let appName = getString(R.string.app_name)\n    let message = String(format: getString(R.string.sync_foreign_files_forgotten_explanation),\n                         appName, appName, appName, appName, user.getAccountName())\n    textView.text = message\n    textView.movementMethod = ScrollingMovementMethod()\n\n    /// load the list of local and remote files that failed\n    let listView = findViewById(R.id.list) as! ListView\n    if let mLocalPaths = mLocalPaths, !mLocalPaths.isEmpty {\n        mAdapter = ErrorsWhileCopyingListAdapter()\n        listView.adapter = mAdapter\n    } else {\n        listView.visibility = .gone\n        mAdapter = nil\n    }\n\n    /// customize buttons\n    let cancelBtn = findViewById(R.id.cancel) as! Button\n    let okBtn = findViewById(R.id.ok) as! Button\n\n    okBtn.setText(R.string.foreign_files_move)\n    cancelBtn.setOnClickListener(self)\n    okBtn.setOnClickListener(self)\n}\n```"
    },
    {
        "method_name": "isEnabled",
        "method_code": "Override\n        public boolean isEnabled(int position) {\n            return false;\n        }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isEnabled from ErrorsWhileCopyingHandlerActivity.java into Swift.\n\n        Input:\n\n        Method Name: isEnabled\n\n        Method Code: Override\n        public boolean isEnabled(int position) {\n            return false;\n        }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func isEnabled(_ position: Int) -> Bool {\n    return false\n}\n```"
    },
    {
        "method_name": "getView",
        "method_code": "Override\n        public View getView (int position, View convertView, @NonNull ViewGroup parent) {\n            View view = convertView;\n            if (view == null) {\n                LayoutInflater vi = (LayoutInflater) getSystemService(\n                        Context.LAYOUT_INFLATER_SERVICE);\n                view = vi.inflate(android.R.layout.two_line_list_item, null);\n            }\n            if (view != null)  {\n                String localPath = getItem(position);\n                if (localPath != null) {\n                    TextView text1 = view.findViewById(android.R.id.text1);\n                    if (text1 != null) {\n                        text1.setText(String.format(getString(R.string.foreign_files_local_text), localPath));\n                    }\n                }\n                if (mRemotePaths != null && mRemotePaths.size() > 0 && position >= 0 &&\n                        position < mRemotePaths.size()) {\n                    TextView text2 = view.findViewById(android.R.id.text2);\n                    String remotePath = mRemotePaths.get(position);\n                    if (text2 != null && remotePath != null) {\n                        text2.setText(String.format(getString(R.string.foreign_files_remote_text), remotePath));\n                    }\n                }\n            }\n            return view;\n        }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getView from ErrorsWhileCopyingHandlerActivity.java into Swift.\n\n        Input:\n\n        Method Name: getView\n\n        Method Code: Override\n        public View getView (int position, View convertView, @NonNull ViewGroup parent) {\n            View view = convertView;\n            if (view == null) {\n                LayoutInflater vi = (LayoutInflater) getSystemService(\n                        Context.LAYOUT_INFLATER_SERVICE);\n                view = vi.inflate(android.R.layout.two_line_list_item, null);\n            }\n            if (view != null)  {\n                String localPath = getItem(position);\n                if (localPath != null) {\n                    TextView text1 = view.findViewById(android.R.id.text1);\n                    if (text1 != null) {\n                        text1.setText(String.format(getString(R.string.foreign_files_local_text), localPath));\n                    }\n                }\n                if (mRemotePaths != null && mRemotePaths.size() > 0 && position >= 0 &&\n                        position < mRemotePaths.size()) {\n                    TextView text2 = view.findViewById(android.R.id.text2);\n                    String remotePath = mRemotePaths.get(position);\n                    if (text2 != null && remotePath != null) {\n                        text2.setText(String.format(getString(R.string.foreign_files_remote_text), remotePath));\n                    }\n                }\n            }\n            return view;\n        }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n    let cellIdentifier = \"TwoLineCell\"\n    var cell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier)\n    \n    if cell == nil {\n        cell = UITableViewCell(style: .subtitle, reuseIdentifier: cellIdentifier)\n    }\n    \n    if let cell = cell {\n        let localPath = getItem(indexPath.row)\n        if let localPath = localPath {\n            cell.textLabel?.text = String(format: NSLocalizedString(\"foreign_files_local_text\", comment: \"\"), localPath)\n        }\n        \n        if let mRemotePaths = mRemotePaths, mRemotePaths.count > 0, indexPath.row >= 0, indexPath.row < mRemotePaths.count {\n            let remotePath = mRemotePaths[indexPath.row]\n            if let remotePath = remotePath {\n                cell.detailTextLabel?.text = String(format: NSLocalizedString(\"foreign_files_remote_text\", comment: \"\"), remotePath)\n            }\n        }\n    }\n    \n    return cell!\n}\n```"
    },
    {
        "method_name": "onClick",
        "method_code": "Override\n    public void onClick(View v) {\n        if (v.getId() == R.id.ok) {\n            /// perform movement operation in background thread\n            Log_OC.d(TAG, \"Clicked MOVE, start movement\");\n            new MoveFilesTask().execute();\n\n        } else if (v.getId() == R.id.cancel) {\n            /// just finish\n            Log_OC.d(TAG, \"Clicked CANCEL, bye\");\n            finish();\n\n        } else {\n            Log_OC.e(TAG, \"Clicked phantom button, id: \" + v.getId());\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onClick from ErrorsWhileCopyingHandlerActivity.java into Swift.\n\n        Input:\n\n        Method Name: onClick\n\n        Method Code: Override\n    public void onClick(View v) {\n        if (v.getId() == R.id.ok) {\n            /// perform movement operation in background thread\n            Log_OC.d(TAG, \"Clicked MOVE, start movement\");\n            new MoveFilesTask().execute();\n\n        } else if (v.getId() == R.id.cancel) {\n            /// just finish\n            Log_OC.d(TAG, \"Clicked CANCEL, bye\");\n            finish();\n\n        } else {\n            Log_OC.e(TAG, \"Clicked phantom button, id: \" + v.getId());\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\n@IBAction func onClick(_ sender: UIButton) {\n    if sender.tag == R.id.ok {\n        // perform movement operation in background thread\n        Log_OC.d(TAG, \"Clicked MOVE, start movement\")\n        MoveFilesTask().execute()\n        \n    } else if sender.tag == R.id.cancel {\n        // just finish\n        Log_OC.d(TAG, \"Clicked CANCEL, bye\")\n        self.dismiss(animated: true, completion: nil)\n        \n    } else {\n        Log_OC.e(TAG, \"Clicked phantom button, id: \\(sender.tag)\")\n    }\n}\n```"
    },
    {
        "method_name": "onPreExecute",
        "method_code": "Override\n        protected void onPreExecute () {\n            /// progress dialog and disable 'Move' button\n            mCurrentDialog = IndeterminateProgressDialog.newInstance(R.string.wait_a_moment, false);\n            mCurrentDialog.show(getSupportFragmentManager(), WAIT_DIALOG_TAG);\n            findViewById(R.id.ok).setEnabled(false);\n        }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onPreExecute from ErrorsWhileCopyingHandlerActivity.java into Swift.\n\n        Input:\n\n        Method Name: onPreExecute\n\n        Method Code: Override\n        protected void onPreExecute () {\n            /// progress dialog and disable 'Move' button\n            mCurrentDialog = IndeterminateProgressDialog.newInstance(R.string.wait_a_moment, false);\n            mCurrentDialog.show(getSupportFragmentManager(), WAIT_DIALOG_TAG);\n            findViewById(R.id.ok).setEnabled(false);\n        }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onPreExecute() {\n    mCurrentDialog = IndeterminateProgressDialog.newInstance(R.string.wait_a_moment, false)\n    mCurrentDialog.show(getSupportFragmentManager(), WAIT_DIALOG_TAG)\n    view.viewWithTag(\"ok\")?.isEnabled = false\n}\n```"
    },
    {
        "method_name": "doInBackground",
        "method_code": "Override\n        protected Boolean doInBackground(Void... params) {\n            while (!mLocalPaths.isEmpty()) {\n                String currentPath = mLocalPaths.get(0);\n                File currentFile = new File(currentPath);\n                String expectedPath = FileStorageUtils.getSavePath(user.getAccountName()) + mRemotePaths.get(0);\n                File expectedFile = new File(expectedPath);\n\n                if (expectedFile.equals(currentFile) || currentFile.renameTo(expectedFile)) {\n                    // SUCCESS\n                    OCFile file = mStorageManager.getFileByPath(mRemotePaths.get(0));\n                    file.setStoragePath(expectedPath);\n                    mStorageManager.saveFile(file);\n                    mRemotePaths.remove(0);\n                    mLocalPaths.remove(0);\n\n                } else {\n                    // FAIL\n                    return Boolean.FALSE;\n                }\n            }\n            return Boolean.TRUE;\n        }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled doInBackground from ErrorsWhileCopyingHandlerActivity.java into Swift.\n\n        Input:\n\n        Method Name: doInBackground\n\n        Method Code: Override\n        protected Boolean doInBackground(Void... params) {\n            while (!mLocalPaths.isEmpty()) {\n                String currentPath = mLocalPaths.get(0);\n                File currentFile = new File(currentPath);\n                String expectedPath = FileStorageUtils.getSavePath(user.getAccountName()) + mRemotePaths.get(0);\n                File expectedFile = new File(expectedPath);\n\n                if (expectedFile.equals(currentFile) || currentFile.renameTo(expectedFile)) {\n                    // SUCCESS\n                    OCFile file = mStorageManager.getFileByPath(mRemotePaths.get(0));\n                    file.setStoragePath(expectedPath);\n                    mStorageManager.saveFile(file);\n                    mRemotePaths.remove(0);\n                    mLocalPaths.remove(0);\n\n                } else {\n                    // FAIL\n                    return Boolean.FALSE;\n                }\n            }\n            return Boolean.TRUE;\n        }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func doInBackground(_ params: Void...) -> Bool {\n    while !mLocalPaths.isEmpty {\n        let currentPath = mLocalPaths[0]\n        let currentFile = FileManager.default.fileExists(atPath: currentPath)\n        let expectedPath = FileStorageUtils.getSavePath(user.accountName) + mRemotePaths[0]\n        let expectedFile = FileManager.default.fileExists(atPath: expectedPath)\n\n        if expectedFile == currentFile || (try? FileManager.default.moveItem(atPath: currentPath, toPath: expectedPath)) != nil {\n            // SUCCESS\n            if let file = mStorageManager.getFileByPath(mRemotePaths[0]) {\n                file.storagePath = expectedPath\n                mStorageManager.saveFile(file)\n                mRemotePaths.remove(at: 0)\n                mLocalPaths.remove(at: 0)\n            }\n        } else {\n            // FAIL\n            return false\n        }\n    }\n    return true\n}\n```"
    },
    {
        "method_name": "onPostExecute",
        "method_code": "Override\n        protected void onPostExecute(Boolean result) {\n            mAdapter.notifyDataSetChanged();\n            mCurrentDialog.dismiss();\n            mCurrentDialog = null;\n            findViewById(R.id.ok).setEnabled(true);\n\n            if (result) {\n                // nothing else to do in this activity\n                DisplayUtils.showSnackMessage(findViewById(android.R.id.content), R.string.foreign_files_success);\n                finish();\n            } else {\n                DisplayUtils.showSnackMessage(findViewById(android.R.id.content), R.string.foreign_files_fail);\n            }\n        }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onPostExecute from ErrorsWhileCopyingHandlerActivity.java into Swift.\n\n        Input:\n\n        Method Name: onPostExecute\n\n        Method Code: Override\n        protected void onPostExecute(Boolean result) {\n            mAdapter.notifyDataSetChanged();\n            mCurrentDialog.dismiss();\n            mCurrentDialog = null;\n            findViewById(R.id.ok).setEnabled(true);\n\n            if (result) {\n                // nothing else to do in this activity\n                DisplayUtils.showSnackMessage(findViewById(android.R.id.content), R.string.foreign_files_success);\n                finish();\n            } else {\n                DisplayUtils.showSnackMessage(findViewById(android.R.id.content), R.string.foreign_files_fail);\n            }\n        }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onPostExecute(_ result: Bool) {\n    mAdapter.notifyDataSetChanged()\n    mCurrentDialog.dismiss()\n    mCurrentDialog = nil\n    findViewById(R.id.ok).isEnabled = true\n\n    if result {\n        // nothing else to do in this activity\n        DisplayUtils.showSnackMessage(findViewById(android.R.id.content), R.string.foreign_files_success)\n        finish()\n    } else {\n        DisplayUtils.showSnackMessage(findViewById(android.R.id.content), R.string.foreign_files_fail)\n    }\n}\n```"
    }
]