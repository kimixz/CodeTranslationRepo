[
    {
        "method_name": "run",
        "method_code": "Override\n\tprotected RemoteOperationResult run(OwnCloudClient client) {\n\n\t    // first: check the status of the server (including its version)\n        GetStatusRemoteOperation getStatus = new GetStatusRemoteOperation(mContext);\n\n\t    RemoteOperationResult result = getStatus.execute(client);\n\n        if (result.isSuccess()) {\n            // second: get authentication method required by the server\n            mResultData.mVersion = (OwnCloudVersion) result.getData().get(0);\n            mResultData.hasExtendedSupport = (boolean) result.getData().get(1);\n            mResultData.mIsSslConn = result.getCode() == ResultCode.OK_SSL;\n            mResultData.mBaseUrl = normalizeProtocolPrefix(mUrl, mResultData.mIsSslConn);\n            RemoteOperationResult detectAuthResult = detectAuthorizationMethod(client);\n\n            // third: merge results\n            if (detectAuthResult.isSuccess()) {\n                mResultData.mAuthMethod = (AuthenticationMethod) detectAuthResult.getData().get(0);\n                ArrayList<Object> data = new ArrayList<Object>();\n                data.add(mResultData);\n                result.setData(data);\n            } else {\n                result = detectAuthResult;\n            }\n        }\n        return result;\n\t}\n",
        "prompt": "\n        Please translate the following Java (Android) method titled run from GetServerInfoOperation.java into Swift.\n\n        Input:\n\n        Method Name: run\n\n        Method Code: Override\n\tprotected RemoteOperationResult run(OwnCloudClient client) {\n\n\t    // first: check the status of the server (including its version)\n        GetStatusRemoteOperation getStatus = new GetStatusRemoteOperation(mContext);\n\n\t    RemoteOperationResult result = getStatus.execute(client);\n\n        if (result.isSuccess()) {\n            // second: get authentication method required by the server\n            mResultData.mVersion = (OwnCloudVersion) result.getData().get(0);\n            mResultData.hasExtendedSupport = (boolean) result.getData().get(1);\n            mResultData.mIsSslConn = result.getCode() == ResultCode.OK_SSL;\n            mResultData.mBaseUrl = normalizeProtocolPrefix(mUrl, mResultData.mIsSslConn);\n            RemoteOperationResult detectAuthResult = detectAuthorizationMethod(client);\n\n            // third: merge results\n            if (detectAuthResult.isSuccess()) {\n                mResultData.mAuthMethod = (AuthenticationMethod) detectAuthResult.getData().get(0);\n                ArrayList<Object> data = new ArrayList<Object>();\n                data.add(mResultData);\n                result.setData(data);\n            } else {\n                result = detectAuthResult;\n            }\n        }\n        return result;\n\t}\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func run(client: OwnCloudClient) -> RemoteOperationResult {\n    // first: check the status of the server (including its version)\n    let getStatus = GetStatusRemoteOperation(context: mContext)\n    var result = getStatus.execute(client: client)\n\n    if result.isSuccess() {\n        // second: get authentication method required by the server\n        mResultData.mVersion = result.getData()[0] as? OwnCloudVersion\n        mResultData.hasExtendedSupport = result.getData()[1] as? Bool ?? false\n        mResultData.mIsSslConn = result.getCode() == .okSsl\n        mResultData.mBaseUrl = normalizeProtocolPrefix(url: mUrl, isSsl: mResultData.mIsSslConn)\n        let detectAuthResult = detectAuthorizationMethod(client: client)\n\n        // third: merge results\n        if detectAuthResult.isSuccess() {\n            mResultData.mAuthMethod = detectAuthResult.getData()[0] as? AuthenticationMethod\n            var data = [Any]()\n            data.append(mResultData)\n            result.setData(data: data)\n        } else {\n            result = detectAuthResult\n        }\n    }\n    return result\n}\n```"
    },
    {
        "method_name": "detectAuthorizationMethod",
        "method_code": "rivate RemoteOperationResult detectAuthorizationMethod(OwnCloudClient client) {\n        Log_OC.d(TAG, \"Trying empty authorization to detect authentication method\");\n        DetectAuthenticationMethodOperation operation =\n                new DetectAuthenticationMethodOperation(mContext);\n        return operation.execute(client);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled detectAuthorizationMethod from GetServerInfoOperation.java into Swift.\n\n        Input:\n\n        Method Name: detectAuthorizationMethod\n\n        Method Code: rivate RemoteOperationResult detectAuthorizationMethod(OwnCloudClient client) {\n        Log_OC.d(TAG, \"Trying empty authorization to detect authentication method\");\n        DetectAuthenticationMethodOperation operation =\n                new DetectAuthenticationMethodOperation(mContext);\n        return operation.execute(client);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func detectAuthorizationMethod(client: OwnCloudClient) -> RemoteOperationResult {\n    Log_OC.d(TAG, \"Trying empty authorization to detect authentication method\")\n    let operation = DetectAuthenticationMethodOperation(context: mContext)\n    return operation.execute(client: client)\n}\n```"
    },
    {
        "method_name": "normalizeProtocolPrefix",
        "method_code": "rivate String normalizeProtocolPrefix(String url, boolean isSslConn) {\n        if (!url.toLowerCase(Locale.ROOT).startsWith(\"http://\") &&\n                !url.toLowerCase(Locale.ROOT).startsWith(\"https://\")) {\n            if (isSslConn) {\n                return \"https://\" + url;\n            } else {\n                return \"http://\" + url;\n            }\n        }\n        return url;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled normalizeProtocolPrefix from GetServerInfoOperation.java into Swift.\n\n        Input:\n\n        Method Name: normalizeProtocolPrefix\n\n        Method Code: rivate String normalizeProtocolPrefix(String url, boolean isSslConn) {\n        if (!url.toLowerCase(Locale.ROOT).startsWith(\"http://\") &&\n                !url.toLowerCase(Locale.ROOT).startsWith(\"https://\")) {\n            if (isSslConn) {\n                return \"https://\" + url;\n            } else {\n                return \"http://\" + url;\n            }\n        }\n        return url;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func normalizeProtocolPrefix(url: String, isSslConn: Bool) -> String {\n    if !url.lowercased().hasPrefix(\"http://\") && !url.lowercased().hasPrefix(\"https://\") {\n        if isSslConn {\n            return \"https://\" + url\n        } else {\n            return \"http://\" + url\n        }\n    }\n    return url\n}\n```"
    }
]