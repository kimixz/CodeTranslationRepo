[
    {
        "method_name": "setActivityItems",
        "method_code": "public void setActivityItems(List<Object> activityItems, NextcloudClient client, boolean clear) {\n        this.client = client;\n        String sTime = \"\";\n\n        if (clear) {\n            values.clear();\n        }\n\n        for (Object o : activityItems) {\n            Activity activity = (Activity) o;\n            String time;\n            time = getHeaderDateString(context, activity.getDatetime().getTime()).toString();\n\n            if (sTime.equalsIgnoreCase(time)) {\n                values.add(activity);\n            } else {\n                sTime = time;\n                values.add(sTime);\n                values.add(activity);\n            }\n        }\n        notifyDataSetChanged();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setActivityItems from ActivityListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: setActivityItems\n\n        Method Code: public void setActivityItems(List<Object> activityItems, NextcloudClient client, boolean clear) {\n        this.client = client;\n        String sTime = \"\";\n\n        if (clear) {\n            values.clear();\n        }\n\n        for (Object o : activityItems) {\n            Activity activity = (Activity) o;\n            String time;\n            time = getHeaderDateString(context, activity.getDatetime().getTime()).toString();\n\n            if (sTime.equalsIgnoreCase(time)) {\n                values.add(activity);\n            } else {\n                sTime = time;\n                values.add(sTime);\n                values.add(activity);\n            }\n        }\n        notifyDataSetChanged();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setActivityItems(activityItems: [Any], client: NextcloudClient, clear: Bool) {\n    self.client = client\n    var sTime = \"\"\n\n    if clear {\n        values.removeAll()\n    }\n\n    for o in activityItems {\n        if let activity = o as? Activity {\n            let time = getHeaderDateString(context: context, date: activity.datetime.time).description\n\n            if sTime.caseInsensitiveCompare(time) == .orderedSame {\n                values.append(activity)\n            } else {\n                sTime = time\n                values.append(sTime)\n                values.append(activity)\n            }\n        }\n    }\n    notifyDataSetChanged()\n}\n```"
    },
    {
        "method_name": "onCreateViewHolder",
        "method_code": "@NonNull\n    @Override\n    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n        if (viewType == ACTIVITY_TYPE) {\n            return new ActivityViewHolder(\n                ActivityListItemBinding.inflate(LayoutInflater.from(parent.getContext()), parent, false)\n            );\n        } else {\n            return new ActivityViewHeaderHolder(\n                ActivityListItemHeaderBinding.inflate(LayoutInflater.from(parent.getContext()), parent, false)\n            );\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreateViewHolder from ActivityListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: onCreateViewHolder\n\n        Method Code: @NonNull\n    @Override\n    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n        if (viewType == ACTIVITY_TYPE) {\n            return new ActivityViewHolder(\n                ActivityListItemBinding.inflate(LayoutInflater.from(parent.getContext()), parent, false)\n            );\n        } else {\n            return new ActivityViewHeaderHolder(\n                ActivityListItemHeaderBinding.inflate(LayoutInflater.from(parent.getContext()), parent, false)\n            );\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n    let viewType = self.viewType(for: indexPath)\n    if viewType == ACTIVITY_TYPE {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"ActivityViewHolder\", for: indexPath) as! ActivityViewHolder\n        // Configure the cell\n        return cell\n    } else {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"ActivityViewHeaderHolder\", for: indexPath) as! ActivityViewHeaderHolder\n        // Configure the cell\n        return cell\n    }\n}\n```"
    },
    {
        "method_name": "onBindViewHolder",
        "method_code": "@Override\n    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {\n        if (holder instanceof ActivityViewHolder) {\n            final ActivityViewHolder activityViewHolder = (ActivityViewHolder) holder;\n            Activity activity = (Activity) values.get(position);\n            activityViewHolder.binding.datetime.setVisibility(View.VISIBLE);\n            activityViewHolder.binding.datetime.setText(DateFormat.format(\"HH:mm\", activity.getDatetime().getTime()));\n\n            if (!TextUtils.isEmpty(activity.getRichSubjectElement().getRichSubject())) {\n                activityViewHolder.binding.subject.setVisibility(View.VISIBLE);\n                activityViewHolder.binding.subject.setMovementMethod(LinkMovementMethod.getInstance());\n                activityViewHolder.binding.subject.setText(addClickablePart(activity.getRichSubjectElement()),\n                                                           TextView.BufferType.SPANNABLE);\n                activityViewHolder.binding.subject.setVisibility(View.VISIBLE);\n            } else if (!TextUtils.isEmpty(activity.getSubject())) {\n                activityViewHolder.binding.subject.setVisibility(View.VISIBLE);\n                activityViewHolder.binding.subject.setText(activity.getSubject());\n            } else {\n                activityViewHolder.binding.subject.setVisibility(View.GONE);\n            }\n\n            if (!TextUtils.isEmpty(activity.getMessage())) {\n                activityViewHolder.binding.message.setText(activity.getMessage());\n                activityViewHolder.binding.message.setVisibility(View.VISIBLE);\n            } else {\n                activityViewHolder.binding.message.setVisibility(View.GONE);\n            }\n\n            if (!TextUtils.isEmpty(activity.getIcon())) {\n                downloadIcon(activity, activityViewHolder.binding.icon);\n            }\n\n            int nightModeFlag = context.getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK;\n\n            if (!\"file_created\".equalsIgnoreCase(activity.getType()) &&\n                !\"file_deleted\".equalsIgnoreCase(activity.getType())) {\n                if (Configuration.UI_MODE_NIGHT_YES == nightModeFlag) {\n                    activityViewHolder.binding.icon.setColorFilter(Color.WHITE, PorterDuff.Mode.SRC_IN);\n                } else {\n                    activityViewHolder.binding.icon.setColorFilter(Color.BLACK, PorterDuff.Mode.SRC_IN);\n                }\n            }\n\n\n            if (activity.getRichSubjectElement().getRichObjectList().size() > 0) {\n                activityViewHolder.binding.list.setVisibility(View.VISIBLE);\n                activityViewHolder.binding.list.removeAllViews();\n\n                activityViewHolder.binding.list.post(() -> {\n                    int w = activityViewHolder.binding.list.getMeasuredWidth();\n                    int elPxSize = px + 20;\n                    int totalColumnCount = w / elPxSize;\n\n                    try {\n                        activityViewHolder.binding.list.setColumnCount(totalColumnCount);\n                    } catch (IllegalArgumentException e) {\n                        Log_OC.e(TAG, \"error setting column count to \" + totalColumnCount);\n                    }\n                });\n\n                for (PreviewObject previewObject : activity.getPreviews()) {\n                    if (!isDetailView || MimeTypeUtil.isImageOrVideo(previewObject.getMimeType()) ||\n                        MimeTypeUtil.isVideo(previewObject.getMimeType())) {\n                        ImageView imageView = createThumbnailNew(previewObject,\n                                                                 activity\n                                                                     .getRichSubjectElement()\n                                                                     .getRichObjectList());\n                        activityViewHolder.binding.list.addView(imageView);\n                    }\n                }\n            } else {\n                activityViewHolder.binding.list.removeAllViews();\n                activityViewHolder.binding.list.setVisibility(View.GONE);\n            }\n        } else {\n            ActivityViewHeaderHolder activityViewHeaderHolder = (ActivityViewHeaderHolder) holder;\n            activityViewHeaderHolder.binding.header.setText((String) values.get(position));\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onBindViewHolder from ActivityListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: onBindViewHolder\n\n        Method Code: @Override\n    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {\n        if (holder instanceof ActivityViewHolder) {\n            final ActivityViewHolder activityViewHolder = (ActivityViewHolder) holder;\n            Activity activity = (Activity) values.get(position);\n            activityViewHolder.binding.datetime.setVisibility(View.VISIBLE);\n            activityViewHolder.binding.datetime.setText(DateFormat.format(\"HH:mm\", activity.getDatetime().getTime()));\n\n            if (!TextUtils.isEmpty(activity.getRichSubjectElement().getRichSubject())) {\n                activityViewHolder.binding.subject.setVisibility(View.VISIBLE);\n                activityViewHolder.binding.subject.setMovementMethod(LinkMovementMethod.getInstance());\n                activityViewHolder.binding.subject.setText(addClickablePart(activity.getRichSubjectElement()),\n                                                           TextView.BufferType.SPANNABLE);\n                activityViewHolder.binding.subject.setVisibility(View.VISIBLE);\n            } else if (!TextUtils.isEmpty(activity.getSubject())) {\n                activityViewHolder.binding.subject.setVisibility(View.VISIBLE);\n                activityViewHolder.binding.subject.setText(activity.getSubject());\n            } else {\n                activityViewHolder.binding.subject.setVisibility(View.GONE);\n            }\n\n            if (!TextUtils.isEmpty(activity.getMessage())) {\n                activityViewHolder.binding.message.setText(activity.getMessage());\n                activityViewHolder.binding.message.setVisibility(View.VISIBLE);\n            } else {\n                activityViewHolder.binding.message.setVisibility(View.GONE);\n            }\n\n            if (!TextUtils.isEmpty(activity.getIcon())) {\n                downloadIcon(activity, activityViewHolder.binding.icon);\n            }\n\n            int nightModeFlag = context.getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK;\n\n            if (!\"file_created\".equalsIgnoreCase(activity.getType()) &&\n                !\"file_deleted\".equalsIgnoreCase(activity.getType())) {\n                if (Configuration.UI_MODE_NIGHT_YES == nightModeFlag) {\n                    activityViewHolder.binding.icon.setColorFilter(Color.WHITE, PorterDuff.Mode.SRC_IN);\n                } else {\n                    activityViewHolder.binding.icon.setColorFilter(Color.BLACK, PorterDuff.Mode.SRC_IN);\n                }\n            }\n\n\n            if (activity.getRichSubjectElement().getRichObjectList().size() > 0) {\n                activityViewHolder.binding.list.setVisibility(View.VISIBLE);\n                activityViewHolder.binding.list.removeAllViews();\n\n                activityViewHolder.binding.list.post(() -> {\n                    int w = activityViewHolder.binding.list.getMeasuredWidth();\n                    int elPxSize = px + 20;\n                    int totalColumnCount = w / elPxSize;\n\n                    try {\n                        activityViewHolder.binding.list.setColumnCount(totalColumnCount);\n                    } catch (IllegalArgumentException e) {\n                        Log_OC.e(TAG, \"error setting column count to \" + totalColumnCount);\n                    }\n                });\n\n                for (PreviewObject previewObject : activity.getPreviews()) {\n                    if (!isDetailView || MimeTypeUtil.isImageOrVideo(previewObject.getMimeType()) ||\n                        MimeTypeUtil.isVideo(previewObject.getMimeType())) {\n                        ImageView imageView = createThumbnailNew(previewObject,\n                                                                 activity\n                                                                     .getRichSubjectElement()\n                                                                     .getRichObjectList());\n                        activityViewHolder.binding.list.addView(imageView);\n                    }\n                }\n            } else {\n                activityViewHolder.binding.list.removeAllViews();\n                activityViewHolder.binding.list.setVisibility(View.GONE);\n            }\n        } else {\n            ActivityViewHeaderHolder activityViewHeaderHolder = (ActivityViewHeaderHolder) holder;\n            activityViewHeaderHolder.binding.header.setText((String) values.get(position));\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onBindViewHolder(_ holder: RecyclerView.ViewHolder, position: Int) {\n    if let activityViewHolder = holder as? ActivityViewHolder {\n        let activity = values[position] as! Activity\n        activityViewHolder.binding.datetime.isHidden = false\n        activityViewHolder.binding.datetime.text = DateFormatter.localizedString(from: activity.getDatetime(), dateStyle: .none, timeStyle: .short)\n\n        if let richSubject = activity.getRichSubjectElement().getRichSubject(), !richSubject.isEmpty {\n            activityViewHolder.binding.subject.isHidden = false\n            activityViewHolder.binding.subject.isUserInteractionEnabled = true\n            activityViewHolder.binding.subject.attributedText = addClickablePart(activity.getRichSubjectElement())\n            activityViewHolder.binding.subject.isHidden = false\n        } else if let subject = activity.getSubject(), !subject.isEmpty {\n            activityViewHolder.binding.subject.isHidden = false\n            activityViewHolder.binding.subject.text = subject\n        } else {\n            activityViewHolder.binding.subject.isHidden = true\n        }\n\n        if let message = activity.getMessage(), !message.isEmpty {\n            activityViewHolder.binding.message.text = message\n            activityViewHolder.binding.message.isHidden = false\n        } else {\n            activityViewHolder.binding.message.isHidden = true\n        }\n\n        if let icon = activity.getIcon(), !icon.isEmpty {\n            downloadIcon(activity, activityViewHolder.binding.icon)\n        }\n\n        let nightModeFlag = context.traitCollection.userInterfaceStyle\n\n        if activity.getType().lowercased() != \"file_created\" && activity.getType().lowercased() != \"file_deleted\" {\n            if nightModeFlag == .dark {\n                activityViewHolder.binding.icon.tintColor = .white\n            } else {\n                activityViewHolder.binding.icon.tintColor = .black\n            }\n        }\n\n        if activity.getRichSubjectElement().getRichObjectList().count > 0 {\n            activityViewHolder.binding.list.isHidden = false\n            activityViewHolder.binding.list.subviews.forEach { $0.removeFromSuperview() }\n\n            activityViewHolder.binding.list.layoutIfNeeded()\n            let w = activityViewHolder.binding.list.frame.width\n            let elPxSize = px + 20\n            let totalColumnCount = Int(w / elPxSize)\n\n            do {\n                activityViewHolder.binding.list.setColumnCount(totalColumnCount)\n            } catch {\n                print(\"error setting column count to \\(totalColumnCount)\")\n            }\n\n            for previewObject in activity.getPreviews() {\n                if !isDetailView || MimeTypeUtil.isImageOrVideo(previewObject.getMimeType()) || MimeTypeUtil.isVideo(previewObject.getMimeType()) {\n                    let imageView = createThumbnailNew(previewObject, activity.getRichSubjectElement().getRichObjectList())\n                    activityViewHolder.binding.list.addSubview(imageView)\n                }\n            }\n        } else {\n            activityViewHolder.binding.list.subviews.forEach { $0.removeFromSuperview() }\n            activityViewHolder.binding.list.isHidden = true\n        }\n    } else if let activityViewHeaderHolder = holder as? ActivityViewHeaderHolder {\n        activityViewHeaderHolder.binding.header.text = values[position] as? String\n    }\n}\n```"
    },
    {
        "method_name": "createThumbnailNew",
        "method_code": "private ImageView createThumbnailNew(PreviewObject previewObject, List<RichObject> richObjectList) {\n        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(px, px);\n        params.setMargins(10, 10, 10, 10);\n        ImageView imageView = new ImageView(context);\n        imageView.setLayoutParams(params);\n\n        for (RichObject object : richObjectList) {\n            int objectId = -1;\n            try {\n                objectId = Integer.parseInt(object.getId());\n            } catch (NumberFormatException e) {\n                // object.getId() can also be a string if RichObjects refers to an user\n            }\n            if (objectId == previewObject.getFileId()) {\n                imageView.setOnClickListener(v -> activityListInterface.onActivityClicked(object));\n                break;\n            }\n        }\n\n        if (MimeTypeUtil.isImageOrVideo(previewObject.getMimeType())) {\n            int placeholder;\n            if (MimeTypeUtil.isImage(previewObject.getMimeType())) {\n                placeholder = R.drawable.file_image;\n            } else {\n                placeholder = R.drawable.file_movie;\n            }\n            Glide.with(context).using(new CustomGlideStreamLoader(currentAccountProvider.getUser(), clientFactory))\n                .load(previewObject.getSource())\n                .placeholder(placeholder)\n                .error(placeholder)\n                .diskCacheStrategy(DiskCacheStrategy.NONE)\n                .skipMemoryCache(true)\n                .into(imageView);\n        } else {\n            if (MimeTypeUtil.isFolder(previewObject.getMimeType())) {\n                imageView.setImageDrawable(MimeTypeUtil.getDefaultFolderIcon(context, viewThemeUtils));\n            } else {\n                imageView.setImageDrawable(MimeTypeUtil.getFileTypeIcon(previewObject.getMimeType(),\n                                                                        \"\",\n                                                                        context,\n                                                                        viewThemeUtils));\n            }\n        }\n\n        return imageView;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled createThumbnailNew from ActivityListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: createThumbnailNew\n\n        Method Code: private ImageView createThumbnailNew(PreviewObject previewObject, List<RichObject> richObjectList) {\n        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(px, px);\n        params.setMargins(10, 10, 10, 10);\n        ImageView imageView = new ImageView(context);\n        imageView.setLayoutParams(params);\n\n        for (RichObject object : richObjectList) {\n            int objectId = -1;\n            try {\n                objectId = Integer.parseInt(object.getId());\n            } catch (NumberFormatException e) {\n                // object.getId() can also be a string if RichObjects refers to an user\n            }\n            if (objectId == previewObject.getFileId()) {\n                imageView.setOnClickListener(v -> activityListInterface.onActivityClicked(object));\n                break;\n            }\n        }\n\n        if (MimeTypeUtil.isImageOrVideo(previewObject.getMimeType())) {\n            int placeholder;\n            if (MimeTypeUtil.isImage(previewObject.getMimeType())) {\n                placeholder = R.drawable.file_image;\n            } else {\n                placeholder = R.drawable.file_movie;\n            }\n            Glide.with(context).using(new CustomGlideStreamLoader(currentAccountProvider.getUser(), clientFactory))\n                .load(previewObject.getSource())\n                .placeholder(placeholder)\n                .error(placeholder)\n                .diskCacheStrategy(DiskCacheStrategy.NONE)\n                .skipMemoryCache(true)\n                .into(imageView);\n        } else {\n            if (MimeTypeUtil.isFolder(previewObject.getMimeType())) {\n                imageView.setImageDrawable(MimeTypeUtil.getDefaultFolderIcon(context, viewThemeUtils));\n            } else {\n                imageView.setImageDrawable(MimeTypeUtil.getFileTypeIcon(previewObject.getMimeType(),\n                                                                        \"\",\n                                                                        context,\n                                                                        viewThemeUtils));\n            }\n        }\n\n        return imageView;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func createThumbnailNew(previewObject: PreviewObject, richObjectList: [RichObject]) -> UIImageView {\n    let params = CGSize(width: px, height: px)\n    let imageView = UIImageView(frame: CGRect(origin: .zero, size: params))\n    imageView.contentMode = .scaleAspectFit\n    imageView.translatesAutoresizingMaskIntoConstraints = false\n    imageView.layoutMargins = UIEdgeInsets(top: 10, left: 10, bottom: 10, right: 10)\n\n    for object in richObjectList {\n        var objectId = -1\n        if let id = Int(object.getId()) {\n            objectId = id\n        }\n        if objectId == previewObject.getFileId() {\n            imageView.isUserInteractionEnabled = true\n            let tapGesture = UITapGestureRecognizer(target: self, action: #selector(activityClicked(_:)))\n            imageView.addGestureRecognizer(tapGesture)\n            break\n        }\n    }\n\n    if MimeTypeUtil.isImageOrVideo(previewObject.getMimeType()) {\n        let placeholder: UIImage\n        if MimeTypeUtil.isImage(previewObject.getMimeType()) {\n            placeholder = UIImage(named: \"file_image\")!\n        } else {\n            placeholder = UIImage(named: \"file_movie\")!\n        }\n        let url = URL(string: previewObject.getSource())!\n        let user = currentAccountProvider.getUser()\n        let clientFactory = self.clientFactory\n        let loader = CustomGlideStreamLoader(user: user, clientFactory: clientFactory)\n        imageView.kf.setImage(with: url, placeholder: placeholder, options: [.processor(loader), .cacheOriginalImage])\n    } else {\n        if MimeTypeUtil.isFolder(previewObject.getMimeType()) {\n            imageView.image = MimeTypeUtil.getDefaultFolderIcon(context: context, viewThemeUtils: viewThemeUtils)\n        } else {\n            imageView.image = MimeTypeUtil.getFileTypeIcon(previewObject.getMimeType(), \"\", context: context, viewThemeUtils: viewThemeUtils)\n        }\n    }\n\n    return imageView\n}\n\n@objc private func activityClicked(_ sender: UITapGestureRecognizer) {\n    if let imageView = sender.view as? UIImageView, let object = richObjectList.first(where: { Int($0.getId()) == previewObject.getFileId() }) {\n        activityListInterface.onActivityClicked(object)\n    }\n}\n```"
    },
    {
        "method_name": "downloadIcon",
        "method_code": "private void downloadIcon(Activity activity, ImageView itemViewType) {\n        GenericRequestBuilder<Uri, InputStream, SVG, Bitmap> requestBuilder = Glide.with(context)\n            .using(Glide.buildStreamModelLoader(Uri.class, context), InputStream.class)\n            .from(Uri.class)\n            .as(SVG.class)\n            .transcode(new SvgBitmapTranscoder(128, 128), Bitmap.class)\n            .sourceEncoder(new StreamEncoder())\n            .cacheDecoder(new FileToStreamDecoder<>(new SvgDecoder()))\n            .decoder(new SvgDecoder())\n            .placeholder(R.drawable.ic_activity)\n            .error(R.drawable.ic_activity)\n            .animate(android.R.anim.fade_in);\n\n        Uri uri = Uri.parse(activity.getIcon());\n        requestBuilder\n            .diskCacheStrategy(DiskCacheStrategy.SOURCE)\n            .load(uri)\n            .into(itemViewType);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled downloadIcon from ActivityListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: downloadIcon\n\n        Method Code: private void downloadIcon(Activity activity, ImageView itemViewType) {\n        GenericRequestBuilder<Uri, InputStream, SVG, Bitmap> requestBuilder = Glide.with(context)\n            .using(Glide.buildStreamModelLoader(Uri.class, context), InputStream.class)\n            .from(Uri.class)\n            .as(SVG.class)\n            .transcode(new SvgBitmapTranscoder(128, 128), Bitmap.class)\n            .sourceEncoder(new StreamEncoder())\n            .cacheDecoder(new FileToStreamDecoder<>(new SvgDecoder()))\n            .decoder(new SvgDecoder())\n            .placeholder(R.drawable.ic_activity)\n            .error(R.drawable.ic_activity)\n            .animate(android.R.anim.fade_in);\n\n        Uri uri = Uri.parse(activity.getIcon());\n        requestBuilder\n            .diskCacheStrategy(DiskCacheStrategy.SOURCE)\n            .load(uri)\n            .into(itemViewType);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func downloadIcon(activity: Activity, itemViewType: UIImageView) {\n    let requestBuilder = Glide.with(context)\n        .using(Glide.buildStreamModelLoader(Uri.self, context), InputStream.self)\n        .from(Uri.self)\n        .as(SVG.self)\n        .transcode(SvgBitmapTranscoder(width: 128, height: 128), to: Bitmap.self)\n        .sourceEncoder(StreamEncoder())\n        .cacheDecoder(FileToStreamDecoder(SvgDecoder()))\n        .decoder(SvgDecoder())\n        .placeholder(R.drawable.ic_activity)\n        .error(R.drawable.ic_activity)\n        .animate(android.R.anim.fade_in)\n\n    if let uri = Uri.parse(activity.getIcon()) {\n        requestBuilder\n            .diskCacheStrategy(.source)\n            .load(uri)\n            .into(itemViewType)\n    }\n}\n```"
    },
    {
        "method_name": "addClickablePart",
        "method_code": "private SpannableStringBuilder addClickablePart(RichElement richElement) {\n        String text = richElement.getRichSubject();\n        SpannableStringBuilder ssb = new SpannableStringBuilder(text);\n\n        int idx1 = text.indexOf('{');\n        int idx2;\n        while (idx1 != -1) {\n            idx2 = text.indexOf('}', idx1) + 1;\n            final String clickString = text.substring(idx1 + 1, idx2 - 1);\n            final RichObject richObject = searchObjectByName(richElement.getRichObjectList(), clickString);\n            if (richObject != null) {\n                String name = richObject.getName();\n                ssb.replace(idx1, idx2, name);\n                text = ssb.toString();\n                idx2 = idx1 + name.length();\n                ssb.setSpan(new ClickableSpan() {\n                    @Override\n                    public void onClick(@NonNull View widget) {\n                        activityListInterface.onActivityClicked(richObject);\n                    }\n\n                    @Override\n                    public void updateDrawState(@NonNull TextPaint ds) {\n                        ds.setUnderlineText(false);\n                    }\n                }, idx1, idx2, 0);\n                ssb.setSpan(new StyleSpan(android.graphics.Typeface.BOLD), idx1, idx2, 0);\n                ssb.setSpan(\n                    new ForegroundColorSpan(context.getResources().getColor(R.color.text_color)),\n                    idx1,\n                    idx2,\n                    Spannable.SPAN_EXCLUSIVE_EXCLUSIVE\n                );\n            }\n            idx1 = text.indexOf('{', idx2);\n        }\n\n        return ssb;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled addClickablePart from ActivityListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: addClickablePart\n\n        Method Code: private SpannableStringBuilder addClickablePart(RichElement richElement) {\n        String text = richElement.getRichSubject();\n        SpannableStringBuilder ssb = new SpannableStringBuilder(text);\n\n        int idx1 = text.indexOf('{');\n        int idx2;\n        while (idx1 != -1) {\n            idx2 = text.indexOf('}', idx1) + 1;\n            final String clickString = text.substring(idx1 + 1, idx2 - 1);\n            final RichObject richObject = searchObjectByName(richElement.getRichObjectList(), clickString);\n            if (richObject != null) {\n                String name = richObject.getName();\n                ssb.replace(idx1, idx2, name);\n                text = ssb.toString();\n                idx2 = idx1 + name.length();\n                ssb.setSpan(new ClickableSpan() {\n                    @Override\n                    public void onClick(@NonNull View widget) {\n                        activityListInterface.onActivityClicked(richObject);\n                    }\n\n                    @Override\n                    public void updateDrawState(@NonNull TextPaint ds) {\n                        ds.setUnderlineText(false);\n                    }\n                }, idx1, idx2, 0);\n                ssb.setSpan(new StyleSpan(android.graphics.Typeface.BOLD), idx1, idx2, 0);\n                ssb.setSpan(\n                    new ForegroundColorSpan(context.getResources().getColor(R.color.text_color)),\n                    idx1,\n                    idx2,\n                    Spannable.SPAN_EXCLUSIVE_EXCLUSIVE\n                );\n            }\n            idx1 = text.indexOf('{', idx2);\n        }\n\n        return ssb;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func addClickablePart(richElement: RichElement) -> NSMutableAttributedString {\n    let text = richElement.getRichSubject()\n    let ssb = NSMutableAttributedString(string: text)\n\n    var idx1 = text.firstIndex(of: \"{\")\n    var idx2: String.Index?\n    while let startIdx = idx1 {\n        idx2 = text.index(after: text[startIdx...].firstIndex(of: \"}\")!)\n        let clickString = String(text[text.index(after: startIdx)..<text.index(before: idx2!)])\n        if let richObject = searchObjectByName(richElement.getRichObjectList(), clickString) {\n            let name = richObject.getName()\n            ssb.replaceCharacters(in: NSRange(startIdx..<idx2!, in: text), with: name)\n            let newText = ssb.string\n            idx2 = newText.index(startIdx, offsetBy: name.count)\n            let range = NSRange(startIdx..<idx2!, in: newText)\n            ssb.addAttribute(.link, value: \"clickable\", range: range)\n            ssb.addAttribute(.font, value: UIFont.boldSystemFont(ofSize: UIFont.systemFontSize), range: range)\n            ssb.addAttribute(.foregroundColor, value: UIColor(named: \"text_color\")!, range: range)\n        }\n        idx1 = text[newText.index(after: idx2!)...].firstIndex(of: \"{\")\n    }\n\n    return ssb\n}\n```"
    },
    {
        "method_name": "onClick",
        "method_code": "@Override\n                    public void onClick(@NonNull View widget) {\n                        activityListInterface.onActivityClicked(richObject);\n                    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onClick from ActivityListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: onClick\n\n        Method Code: @Override\n                    public void onClick(@NonNull View widget) {\n                        activityListInterface.onActivityClicked(richObject);\n                    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onClick(widget: UIView) {\n    activityListInterface.onActivityClicked(richObject)\n}\n```"
    },
    {
        "method_name": "updateDrawState",
        "method_code": "@Override\n                    public void updateDrawState(@NonNull TextPaint ds) {\n                        ds.setUnderlineText(false);\n                    }",
        "prompt": "\n        Please translate the following Java (Android) method titled updateDrawState from ActivityListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: updateDrawState\n\n        Method Code: @Override\n                    public void updateDrawState(@NonNull TextPaint ds) {\n                        ds.setUnderlineText(false);\n                    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func updateDrawState(_ ds: TextPaint) {\n    ds.isUnderlineText = false\n}\n```"
    },
    {
        "method_name": "searchObjectByName",
        "method_code": "private RichObject searchObjectByName(List<RichObject> richObjectList, String name) {\n        for (RichObject richObject : richObjectList) {\n            if (richObject.getTag().equalsIgnoreCase(name)) {\n                return richObject;\n            }\n        }\n        return null;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled searchObjectByName from ActivityListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: searchObjectByName\n\n        Method Code: private RichObject searchObjectByName(List<RichObject> richObjectList, String name) {\n        for (RichObject richObject : richObjectList) {\n            if (richObject.getTag().equalsIgnoreCase(name)) {\n                return richObject;\n            }\n        }\n        return null;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func searchObjectByName(richObjectList: [RichObject], name: String) -> RichObject? {\n    for richObject in richObjectList {\n        if richObject.getTag().caseInsensitiveCompare(name) == .orderedSame {\n            return richObject\n        }\n    }\n    return nil\n}\n```"
    },
    {
        "method_name": "getItemViewType",
        "method_code": "@Override\n    public int getItemViewType(int position) {\n        if (values.get(position) instanceof Activity) {\n            return ACTIVITY_TYPE;\n        } else {\n            return HEADER_TYPE;\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getItemViewType from ActivityListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getItemViewType\n\n        Method Code: @Override\n    public int getItemViewType(int position) {\n        if (values.get(position) instanceof Activity) {\n            return ACTIVITY_TYPE;\n        } else {\n            return HEADER_TYPE;\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getItemViewType(position: Int) -> Int {\n    if values[position] is Activity {\n        return ACTIVITY_TYPE\n    } else {\n        return HEADER_TYPE\n    }\n}\n```"
    },
    {
        "method_name": "getItemCount",
        "method_code": "@Override\n    public int getItemCount() {\n        return values.size();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getItemCount from ActivityListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getItemCount\n\n        Method Code: @Override\n    public int getItemCount() {\n        return values.size();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getItemCount() -> Int {\n    return values.count\n}\n```"
    },
    {
        "method_name": "isEmpty",
        "method_code": "public boolean isEmpty() {\n        return values.isEmpty();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled isEmpty from ActivityListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: isEmpty\n\n        Method Code: public boolean isEmpty() {\n        return values.isEmpty();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc isEmpty() -> Bool {\n    return values.isEmpty\n}\n```"
    },
    {
        "method_name": "getThumbnailDimension",
        "method_code": "private int getThumbnailDimension() {\n        // Converts dp to pixel\n        Resources r = MainApp.getAppContext().getResources();\n        double d = Math.pow(2, Math.floor(Math.log(r.getDimension(R.dimen.file_icon_size_grid)) / Math.log(2))) / 2;\n        return (int) d;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getThumbnailDimension from ActivityListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getThumbnailDimension\n\n        Method Code: private int getThumbnailDimension() {\n        // Converts dp to pixel\n        Resources r = MainApp.getAppContext().getResources();\n        double d = Math.pow(2, Math.floor(Math.log(r.getDimension(R.dimen.file_icon_size_grid)) / Math.log(2))) / 2;\n        return (int) d;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getThumbnailDimension() -> Int {\n    let r = MainApp.getAppContext().resources\n    let fileIconSizeGrid = r.getDimension(R.dimen.file_icon_size_grid)\n    let d = pow(2, floor(log(fileIconSizeGrid) / log(2))) / 2\n    return Int(d)\n}\n```"
    },
    {
        "method_name": "getHeaderDateString",
        "method_code": "CharSequence getHeaderDateString(Context context, long modificationTimestamp) {\n        if ((System.currentTimeMillis() - modificationTimestamp) < DateUtils.WEEK_IN_MILLIS) {\n            return DisplayUtils.getRelativeDateTimeString(context, modificationTimestamp, DateUtils.DAY_IN_MILLIS,\n                                                          DateUtils.WEEK_IN_MILLIS, 0);\n        } else {\n            return DateFormat.format(DateFormat.getBestDateTimePattern(\n                Locale.getDefault(), \"EEEE, MMMM d\"), modificationTimestamp);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getHeaderDateString from ActivityListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getHeaderDateString\n\n        Method Code: CharSequence getHeaderDateString(Context context, long modificationTimestamp) {\n        if ((System.currentTimeMillis() - modificationTimestamp) < DateUtils.WEEK_IN_MILLIS) {\n            return DisplayUtils.getRelativeDateTimeString(context, modificationTimestamp, DateUtils.DAY_IN_MILLIS,\n                                                          DateUtils.WEEK_IN_MILLIS, 0);\n        } else {\n            return DateFormat.format(DateFormat.getBestDateTimePattern(\n                Locale.getDefault(), \"EEEE, MMMM d\"), modificationTimestamp);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getHeaderDateString(context: Context, modificationTimestamp: Int64) -> String {\n    if (Date().timeIntervalSince1970 * 1000 - modificationTimestamp) < DateUtils.WEEK_IN_MILLIS {\n        return DisplayUtils.getRelativeDateTimeString(context: context, time: modificationTimestamp, minResolution: DateUtils.DAY_IN_MILLIS, transitionResolution: DateUtils.WEEK_IN_MILLIS, flags: 0)\n    } else {\n        let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat = DateFormatter.dateFormat(fromTemplate: \"EEEE, MMMM d\", options: 0, locale: Locale.current)\n        return dateFormatter.string(from: Date(timeIntervalSince1970: TimeInterval(modificationTimestamp / 1000)))\n    }\n}\n```"
    },
    {
        "method_name": "getHeaderPositionForItem",
        "method_code": "@Override\n    public int getHeaderPositionForItem(int itemPosition) {\n        int headerPosition = itemPosition;\n        while (headerPosition >= 0) {\n            if (this.isHeader(headerPosition)) {\n                break;\n            }\n            headerPosition -= 1;\n        }\n        return headerPosition;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getHeaderPositionForItem from ActivityListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getHeaderPositionForItem\n\n        Method Code: @Override\n    public int getHeaderPositionForItem(int itemPosition) {\n        int headerPosition = itemPosition;\n        while (headerPosition >= 0) {\n            if (this.isHeader(headerPosition)) {\n                break;\n            }\n            headerPosition -= 1;\n        }\n        return headerPosition;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getHeaderPositionForItem(itemPosition: Int) -> Int {\n    var headerPosition = itemPosition\n    while headerPosition >= 0 {\n        if isHeader(headerPosition) {\n            break\n        }\n        headerPosition -= 1\n    }\n    return headerPosition\n}\n```"
    },
    {
        "method_name": "getHeaderLayout",
        "method_code": "@Override\n    public int getHeaderLayout(int headerPosition) {\n        return R.layout.activity_list_item_header;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getHeaderLayout from ActivityListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getHeaderLayout\n\n        Method Code: @Override\n    public int getHeaderLayout(int headerPosition) {\n        return R.layout.activity_list_item_header;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getHeaderLayout(headerPosition: Int) -> Int {\n    return R.layout.activity_list_item_header\n}\n```"
    },
    {
        "method_name": "bindHeaderData",
        "method_code": "@Override\n    public void bindHeaderData(View header, int headerPosition) {\n        TextView textView = header.findViewById(R.id.header);\n        String headline = (String) values.get(headerPosition);\n        textView.setText(headline);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled bindHeaderData from ActivityListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: bindHeaderData\n\n        Method Code: @Override\n    public void bindHeaderData(View header, int headerPosition) {\n        TextView textView = header.findViewById(R.id.header);\n        String headline = (String) values.get(headerPosition);\n        textView.setText(headline);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc bindHeaderData(header: UIView, headerPosition: Int) {\n    if let textView = header.viewWithTag(R.id.header) as? UILabel {\n        let headline = values[headerPosition] as? String ?? \"\"\n        textView.text = headline\n    }\n}\n```"
    },
    {
        "method_name": "isHeader",
        "method_code": "@Override\n    public boolean isHeader(int itemPosition) {\n        return this.getItemViewType(itemPosition) == HEADER_TYPE;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled isHeader from ActivityListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: isHeader\n\n        Method Code: @Override\n    public boolean isHeader(int itemPosition) {\n        return this.getItemViewType(itemPosition) == HEADER_TYPE;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc isHeader(itemPosition: Int) -> Bool {\n    return self.getItemViewType(itemPosition) == HEADER_TYPE\n}\n```"
    }
]