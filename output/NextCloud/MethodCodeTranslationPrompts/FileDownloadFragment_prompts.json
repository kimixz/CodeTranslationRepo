[
    {
        "method_name": "newInstance",
        "method_code": "ublic static Fragment newInstance(OCFile file, User user, boolean ignoreFirstSavedState) {\n        FileDownloadFragment frag = new FileDownloadFragment();\n        Bundle args = new Bundle();\n        args.putParcelable(ARG_FILE, file);\n        args.putParcelable(ARG_USER, user);\n        args.putBoolean(ARG_IGNORE_FIRST, ignoreFirstSavedState);\n        frag.setArguments(args);\n        return frag;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled newInstance from FileDownloadFragment.java into Swift.\n\n        Input:\n\n        Method Name: newInstance\n\n        Method Code: ublic static Fragment newInstance(OCFile file, User user, boolean ignoreFirstSavedState) {\n        FileDownloadFragment frag = new FileDownloadFragment();\n        Bundle args = new Bundle();\n        args.putParcelable(ARG_FILE, file);\n        args.putParcelable(ARG_USER, user);\n        args.putBoolean(ARG_IGNORE_FIRST, ignoreFirstSavedState);\n        frag.setArguments(args);\n        return frag;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func newInstance(file: OCFile, user: User, ignoreFirstSavedState: Bool) -> FileDownloadFragment {\n    let frag = FileDownloadFragment()\n    var args = Bundle()\n    args.putParcelable(ARG_FILE, file)\n    args.putParcelable(ARG_USER, user)\n    args.putBoolean(ARG_IGNORE_FIRST, ignoreFirstSavedState)\n    frag.setArguments(args)\n    return frag\n}\n```"
    },
    {
        "method_name": "onCreate",
        "method_code": "Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        Bundle args = getArguments();\n        setFile(BundleExtensionsKt.getParcelableArgument(args, ARG_FILE, OCFile.class));\n            // TODO better in super, but needs to check ALL the class extending FileFragment; not right now\n\n        mIgnoreFirstSavedState = args.getBoolean(ARG_IGNORE_FIRST);\n        user = BundleExtensionsKt.getParcelableArgument(args, ARG_USER, User.class);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreate from FileDownloadFragment.java into Swift.\n\n        Input:\n\n        Method Name: onCreate\n\n        Method Code: Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        Bundle args = getArguments();\n        setFile(BundleExtensionsKt.getParcelableArgument(args, ARG_FILE, OCFile.class));\n            // TODO better in super, but needs to check ALL the class extending FileFragment; not right now\n\n        mIgnoreFirstSavedState = args.getBoolean(ARG_IGNORE_FIRST);\n        user = BundleExtensionsKt.getParcelableArgument(args, ARG_USER, User.class);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    if let args = self.arguments {\n        setFile(args.getParcelableArgument(forKey: ARG_FILE, type: OCFile.self))\n        // TODO better in super, but needs to check ALL the class extending FileFragment; not right now\n\n        mIgnoreFirstSavedState = args.getBoolean(forKey: ARG_IGNORE_FIRST)\n        user = args.getParcelableArgument(forKey: ARG_USER, type: User.self)\n    }\n}\n```"
    },
    {
        "method_name": "onCreateView",
        "method_code": "Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        super.onCreateView(inflater, container, savedInstanceState);\n\n        if (getArguments() != null) {\n            if (!mIgnoreFirstSavedState) {\n                setFile(BundleExtensionsKt.getParcelableArgument(requireArguments(), EXTRA_FILE, OCFile.class));\n                user = BundleExtensionsKt.getParcelableArgument(requireArguments(), EXTRA_USER, User.class);\n                mError = requireArguments().getBoolean(EXTRA_ERROR);\n                FileDownloadHelper.Companion.instance().downloadFile(user, getFile());\n            }\n            else {\n                mIgnoreFirstSavedState = false;\n            }\n        }\n\n        mView = inflater.inflate(R.layout.file_download_fragment, container, false);\n\n        ProgressBar progressBar = mView.findViewById(R.id.progressBar);\n        viewThemeUtils.platform.themeHorizontalProgressBar(progressBar);\n        mProgressListener = new ProgressListener(progressBar);\n\n        (mView.findViewById(R.id.cancelBtn)).setOnClickListener(this);\n\n        (mView.findViewById(R.id.fileDownloadLL)).setOnClickListener(v -> {\n            if (getActivity() instanceof PreviewImageActivity previewImageActivity) {\n                previewImageActivity.toggleFullScreen();\n            }\n        });\n\n        if (mError) {\n            setButtonsForRemote();\n        }\n        else {\n            setButtonsForTransferring();\n        }\n\n        return mView;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreateView from FileDownloadFragment.java into Swift.\n\n        Input:\n\n        Method Name: onCreateView\n\n        Method Code: Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        super.onCreateView(inflater, container, savedInstanceState);\n\n        if (getArguments() != null) {\n            if (!mIgnoreFirstSavedState) {\n                setFile(BundleExtensionsKt.getParcelableArgument(requireArguments(), EXTRA_FILE, OCFile.class));\n                user = BundleExtensionsKt.getParcelableArgument(requireArguments(), EXTRA_USER, User.class);\n                mError = requireArguments().getBoolean(EXTRA_ERROR);\n                FileDownloadHelper.Companion.instance().downloadFile(user, getFile());\n            }\n            else {\n                mIgnoreFirstSavedState = false;\n            }\n        }\n\n        mView = inflater.inflate(R.layout.file_download_fragment, container, false);\n\n        ProgressBar progressBar = mView.findViewById(R.id.progressBar);\n        viewThemeUtils.platform.themeHorizontalProgressBar(progressBar);\n        mProgressListener = new ProgressListener(progressBar);\n\n        (mView.findViewById(R.id.cancelBtn)).setOnClickListener(this);\n\n        (mView.findViewById(R.id.fileDownloadLL)).setOnClickListener(v -> {\n            if (getActivity() instanceof PreviewImageActivity previewImageActivity) {\n                previewImageActivity.toggleFullScreen();\n            }\n        });\n\n        if (mError) {\n            setButtonsForRemote();\n        }\n        else {\n            setButtonsForTransferring();\n        }\n\n        return mView;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n\n    if let arguments = self.arguments {\n        if !mIgnoreFirstSavedState {\n            setFile(arguments.getParcelableArgument(EXTRA_FILE, OCFile.self))\n            user = arguments.getParcelableArgument(EXTRA_USER, User.self)\n            mError = arguments.getBoolean(EXTRA_ERROR)\n            FileDownloadHelper.instance().downloadFile(user, getFile())\n        } else {\n            mIgnoreFirstSavedState = false\n        }\n    }\n\n    mView = inflater.inflate(R.layout.file_download_fragment, container, false)\n\n    if let progressBar = mView.findViewById(R.id.progressBar) as? UIProgressView {\n        viewThemeUtils.platform.themeHorizontalProgressBar(progressBar)\n        mProgressListener = ProgressListener(progressBar)\n    }\n\n    if let cancelBtn = mView.findViewById(R.id.cancelBtn) as? UIButton {\n        cancelBtn.addTarget(self, action: #selector(onClick(_:)), for: .touchUpInside)\n    }\n\n    if let fileDownloadLL = mView.findViewById(R.id.fileDownloadLL) as? UIView {\n        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(toggleFullScreen))\n        fileDownloadLL.addGestureRecognizer(tapGesture)\n    }\n\n    if mError {\n        setButtonsForRemote()\n    } else {\n        setButtonsForTransferring()\n    }\n}\n\n@objc func toggleFullScreen() {\n    if let previewImageActivity = self.activity as? PreviewImageActivity {\n        previewImageActivity.toggleFullScreen()\n    }\n}\n```"
    },
    {
        "method_name": "onSaveInstanceState",
        "method_code": "Override\n    public void onSaveInstanceState(@NonNull Bundle outState) {\n        super.onSaveInstanceState(outState);\n        FileExtensionsKt.logFileSize(getFile(), TAG);\n        outState.putParcelable(FileDownloadFragment.EXTRA_FILE, getFile());\n        outState.putParcelable(FileDownloadFragment.EXTRA_USER, user);\n        outState.putBoolean(FileDownloadFragment.EXTRA_ERROR, mError);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onSaveInstanceState from FileDownloadFragment.java into Swift.\n\n        Input:\n\n        Method Name: onSaveInstanceState\n\n        Method Code: Override\n    public void onSaveInstanceState(@NonNull Bundle outState) {\n        super.onSaveInstanceState(outState);\n        FileExtensionsKt.logFileSize(getFile(), TAG);\n        outState.putParcelable(FileDownloadFragment.EXTRA_FILE, getFile());\n        outState.putParcelable(FileDownloadFragment.EXTRA_USER, user);\n        outState.putBoolean(FileDownloadFragment.EXTRA_ERROR, mError);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func encodeRestorableState(with coder: NSCoder) {\n    super.encodeRestorableState(with: coder)\n    logFileSize(file: getFile(), tag: TAG)\n    coder.encode(getFile(), forKey: FileDownloadFragment.EXTRA_FILE)\n    coder.encode(user, forKey: FileDownloadFragment.EXTRA_USER)\n    coder.encode(mError, forKey: FileDownloadFragment.EXTRA_ERROR)\n}\n```"
    },
    {
        "method_name": "onStart",
        "method_code": "Override\n    public void onStart() {\n        super.onStart();\n        listenForTransferProgress();\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onStart from FileDownloadFragment.java into Swift.\n\n        Input:\n\n        Method Name: onStart\n\n        Method Code: Override\n    public void onStart() {\n        super.onStart();\n        listenForTransferProgress();\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n    listenForTransferProgress()\n}\n```"
    },
    {
        "method_name": "onResume",
        "method_code": "Override\n    public void onResume() {\n        super.onResume();\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onResume from FileDownloadFragment.java into Swift.\n\n        Input:\n\n        Method Name: onResume\n\n        Method Code: Override\n    public void onResume() {\n        super.onResume();\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n```"
    },
    {
        "method_name": "onPause",
        "method_code": "Override\n    public void onPause() {\n        super.onPause();\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onPause from FileDownloadFragment.java into Swift.\n\n        Input:\n\n        Method Name: onPause\n\n        Method Code: Override\n    public void onPause() {\n        super.onPause();\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n```"
    },
    {
        "method_name": "onStop",
        "method_code": "Override\n    public void onStop() {\n        leaveTransferProgress();\n        super.onStop();\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onStop from FileDownloadFragment.java into Swift.\n\n        Input:\n\n        Method Name: onStop\n\n        Method Code: Override\n    public void onStop() {\n        leaveTransferProgress();\n        super.onStop();\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n    leaveTransferProgress()\n}\n```"
    },
    {
        "method_name": "onDestroy",
        "method_code": "Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onDestroy from FileDownloadFragment.java into Swift.\n\n        Input:\n\n        Method Name: onDestroy\n\n        Method Code: Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n```"
    },
    {
        "method_name": "getView",
        "method_code": "Override\n    public View getView() {\n        if (!mListening) {\n            listenForTransferProgress();\n        }\n        return super.getView() == null ? mView : super.getView();\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getView from FileDownloadFragment.java into Swift.\n\n        Input:\n\n        Method Name: getView\n\n        Method Code: Override\n    public View getView() {\n        if (!mListening) {\n            listenForTransferProgress();\n        }\n        return super.getView() == null ? mView : super.getView();\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func getView() -> UIView? {\n    if !mListening {\n        listenForTransferProgress()\n    }\n    return super.getView() ?? mView\n}\n```"
    },
    {
        "method_name": "onClick",
        "method_code": "Override\n    public void onClick(View v) {\n        if (v.getId() == R.id.cancelBtn) {\n            containerActivity.getFileOperationsHelper().cancelTransference(getFile());\n            requireActivity().finish();\n        } else {\n            Log_OC.e(TAG, \"Incorrect view clicked!\");\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onClick from FileDownloadFragment.java into Swift.\n\n        Input:\n\n        Method Name: onClick\n\n        Method Code: Override\n    public void onClick(View v) {\n        if (v.getId() == R.id.cancelBtn) {\n            containerActivity.getFileOperationsHelper().cancelTransference(getFile());\n            requireActivity().finish();\n        } else {\n            Log_OC.e(TAG, \"Incorrect view clicked!\");\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\n@IBAction func onClick(_ sender: UIButton) {\n    if sender.tag == R.id.cancelBtn {\n        containerActivity.getFileOperationsHelper().cancelTransference(getFile())\n        self.dismiss(animated: true, completion: nil)\n    } else {\n        NSLog(\"Incorrect view clicked!\")\n    }\n}\n```"
    },
    {
        "method_name": "setButtonsForTransferring",
        "method_code": "rivate void setButtonsForTransferring() {\n        getView().findViewById(R.id.cancelBtn).setVisibility(View.VISIBLE);\n\n        // show the progress bar for the transfer\n        getView().findViewById(R.id.progressBar).setVisibility(View.VISIBLE);\n        TextView progressText = getView().findViewById(R.id.progressText);\n        progressText.setText(R.string.downloader_download_in_progress_ticker);\n        progressText.setVisibility(View.VISIBLE);\n\n        // hides the error icon\n        getView().findViewById(R.id.errorText).setVisibility(View.GONE);\n        getView().findViewById(R.id.error_image).setVisibility(View.GONE);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setButtonsForTransferring from FileDownloadFragment.java into Swift.\n\n        Input:\n\n        Method Name: setButtonsForTransferring\n\n        Method Code: rivate void setButtonsForTransferring() {\n        getView().findViewById(R.id.cancelBtn).setVisibility(View.VISIBLE);\n\n        // show the progress bar for the transfer\n        getView().findViewById(R.id.progressBar).setVisibility(View.VISIBLE);\n        TextView progressText = getView().findViewById(R.id.progressText);\n        progressText.setText(R.string.downloader_download_in_progress_ticker);\n        progressText.setVisibility(View.VISIBLE);\n\n        // hides the error icon\n        getView().findViewById(R.id.errorText).setVisibility(View.GONE);\n        getView().findViewById(R.id.error_image).setVisibility(View.GONE);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setButtonsForTransferring() {\n    view?.viewWithTag(1)?.isHidden = false // Assuming cancelBtn has tag 1\n    view?.viewWithTag(2)?.isHidden = false // Assuming progressBar has tag 2\n    if let progressText = view?.viewWithTag(3) as? UILabel { // Assuming progressText has tag 3\n        progressText.text = NSLocalizedString(\"downloader_download_in_progress_ticker\", comment: \"\")\n        progressText.isHidden = false\n    }\n    view?.viewWithTag(4)?.isHidden = true // Assuming errorText has tag 4\n    view?.viewWithTag(5)?.isHidden = true // Assuming error_image has tag 5\n}\n```"
    },
    {
        "method_name": "setButtonsForRemote",
        "method_code": "rivate void setButtonsForRemote() {\n        getView().findViewById(R.id.cancelBtn).setVisibility(View.GONE);\n\n        // hides the progress bar and message\n        getView().findViewById(R.id.progressBar).setVisibility(View.GONE);\n        getView().findViewById(R.id.progressText).setVisibility(View.GONE);\n\n        // shows the error icon and message\n        getView().findViewById(R.id.errorText).setVisibility(View.VISIBLE);\n        getView().findViewById(R.id.error_image).setVisibility(View.VISIBLE);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setButtonsForRemote from FileDownloadFragment.java into Swift.\n\n        Input:\n\n        Method Name: setButtonsForRemote\n\n        Method Code: rivate void setButtonsForRemote() {\n        getView().findViewById(R.id.cancelBtn).setVisibility(View.GONE);\n\n        // hides the progress bar and message\n        getView().findViewById(R.id.progressBar).setVisibility(View.GONE);\n        getView().findViewById(R.id.progressText).setVisibility(View.GONE);\n\n        // shows the error icon and message\n        getView().findViewById(R.id.errorText).setVisibility(View.VISIBLE);\n        getView().findViewById(R.id.error_image).setVisibility(View.VISIBLE);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setButtonsForRemote() {\n    view?.viewWithTag(1001)?.isHidden = true // Assuming cancelBtn has tag 1001\n\n    // hides the progress bar and message\n    view?.viewWithTag(1002)?.isHidden = true // Assuming progressBar has tag 1002\n    view?.viewWithTag(1003)?.isHidden = true // Assuming progressText has tag 1003\n\n    // shows the error icon and message\n    view?.viewWithTag(1004)?.isHidden = false // Assuming errorText has tag 1004\n    view?.viewWithTag(1005)?.isHidden = false // Assuming error_image has tag 1005\n}\n```"
    },
    {
        "method_name": "listenForTransferProgress",
        "method_code": "ublic void listenForTransferProgress() {\n        if (mProgressListener != null && !mListening && containerActivity.getFileDownloadProgressListener() != null) {\n            containerActivity.getFileDownloadProgressListener().addDataTransferProgressListener(mProgressListener, getFile());\n            mListening = true;\n            setButtonsForTransferring();\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled listenForTransferProgress from FileDownloadFragment.java into Swift.\n\n        Input:\n\n        Method Name: listenForTransferProgress\n\n        Method Code: ublic void listenForTransferProgress() {\n        if (mProgressListener != null && !mListening && containerActivity.getFileDownloadProgressListener() != null) {\n            containerActivity.getFileDownloadProgressListener().addDataTransferProgressListener(mProgressListener, getFile());\n            mListening = true;\n            setButtonsForTransferring();\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc listenForTransferProgress() {\n    if let progressListener = mProgressListener, !mListening, let fileDownloadProgressListener = containerActivity.getFileDownloadProgressListener() {\n        fileDownloadProgressListener.addDataTransferProgressListener(progressListener, getFile())\n        mListening = true\n        setButtonsForTransferring()\n    }\n}\n```"
    },
    {
        "method_name": "leaveTransferProgress",
        "method_code": "ublic void leaveTransferProgress() {\n        if (mProgressListener != null && containerActivity.getFileDownloadProgressListener() != null) {\n            containerActivity.getFileDownloadProgressListener()\n                .removeDataTransferProgressListener(mProgressListener, getFile());\n            mListening = false;\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled leaveTransferProgress from FileDownloadFragment.java into Swift.\n\n        Input:\n\n        Method Name: leaveTransferProgress\n\n        Method Code: ublic void leaveTransferProgress() {\n        if (mProgressListener != null && containerActivity.getFileDownloadProgressListener() != null) {\n            containerActivity.getFileDownloadProgressListener()\n                .removeDataTransferProgressListener(mProgressListener, getFile());\n            mListening = false;\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc leaveTransferProgress() {\n    if let progressListener = mProgressListener, let fileDownloadProgressListener = containerActivity.getFileDownloadProgressListener() {\n        fileDownloadProgressListener.removeDataTransferProgressListener(progressListener, getFile())\n        mListening = false\n    }\n}\n```"
    },
    {
        "method_name": "onTransferProgress",
        "method_code": "Override\n        public void onTransferProgress(\n                long progressRate, long totalTransferredSoFar, long totalToTransfer, String filename\n        ) {\n            int percent = (int)(100.0*((double)totalTransferredSoFar)/((double)totalToTransfer));\n            if (percent != mLastPercent) {\n                ProgressBar pb = mProgressBar.get();\n                if (pb != null) {\n                    pb.setProgress(percent);\n                    pb.postInvalidate();\n                }\n            }\n            mLastPercent = percent;\n        }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onTransferProgress from FileDownloadFragment.java into Swift.\n\n        Input:\n\n        Method Name: onTransferProgress\n\n        Method Code: Override\n        public void onTransferProgress(\n                long progressRate, long totalTransferredSoFar, long totalToTransfer, String filename\n        ) {\n            int percent = (int)(100.0*((double)totalTransferredSoFar)/((double)totalToTransfer));\n            if (percent != mLastPercent) {\n                ProgressBar pb = mProgressBar.get();\n                if (pb != null) {\n                    pb.setProgress(percent);\n                    pb.postInvalidate();\n                }\n            }\n            mLastPercent = percent;\n        }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onTransferProgress(progressRate: Int64, totalTransferredSoFar: Int64, totalToTransfer: Int64, filename: String) {\n    let percent = Int(100.0 * (Double(totalTransferredSoFar) / Double(totalToTransfer)))\n    if percent != mLastPercent {\n        if let pb = mProgressBar {\n            pb.progress = Float(percent)\n            pb.setNeedsDisplay()\n        }\n    }\n    mLastPercent = percent\n}\n```"
    },
    {
        "method_name": "setError",
        "method_code": "ublic void setError(boolean error) {\n        mError = error;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setError from FileDownloadFragment.java into Swift.\n\n        Input:\n\n        Method Name: setError\n\n        Method Code: ublic void setError(boolean error) {\n        mError = error;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setError(_ error: Bool) {\n    mError = error\n}\n```"
    }
]