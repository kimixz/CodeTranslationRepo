[
    {
        "method_name": "getCommand",
        "method_code": "@Override\n    protected String[] getCommand() {\n        return sCommand;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getCommand from MountCommandStoragePointProvider.java into Swift.\n\n        Input:\n\n        Method Name: getCommand\n\n        Method Code: @Override\n    protected String[] getCommand() {\n        return sCommand;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func getCommand() -> [String] {\n    return sCommand\n}\n```"
    },
    {
        "method_name": "getAvailableStoragePoint",
        "method_code": "@Override\n    public List<StoragePoint> getAvailableStoragePoint() {\n        List<StoragePoint> result = new Vector<>();\n\n        for (String p : getPotentialPaths(getCommandLineResult())) {\n            if (canBeAddedToAvailableList(result, p)) {\n                result.add(new StoragePoint(p, p, StoragePoint.StorageType.EXTERNAL, StoragePoint.PrivacyType.PUBLIC));\n            }\n        }\n\n        return result;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getAvailableStoragePoint from MountCommandStoragePointProvider.java into Swift.\n\n        Input:\n\n        Method Name: getAvailableStoragePoint\n\n        Method Code: @Override\n    public List<StoragePoint> getAvailableStoragePoint() {\n        List<StoragePoint> result = new Vector<>();\n\n        for (String p : getPotentialPaths(getCommandLineResult())) {\n            if (canBeAddedToAvailableList(result, p)) {\n                result.add(new StoragePoint(p, p, StoragePoint.StorageType.EXTERNAL, StoragePoint.PrivacyType.PUBLIC));\n            }\n        }\n\n        return result;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func getAvailableStoragePoint() -> [StoragePoint] {\n    var result: [StoragePoint] = []\n\n    for p in getPotentialPaths(getCommandLineResult()) {\n        if canBeAddedToAvailableList(result, p) {\n            result.append(StoragePoint(path: p, name: p, type: .external, privacy: .public))\n        }\n    }\n\n    return result\n}\n```"
    },
    {
        "method_name": "getPotentialPaths",
        "method_code": "private List<String> getPotentialPaths(String mounted) {\n        final List<String> result = new Vector<>();\n\n        for (String line : mounted.split(\"\\n\")) {\n            if (!line.toLowerCase(Locale.US).contains(\"asec\") && sPattern.matcher(line).matches()) {\n                String parts[] = line.split(\" \");\n                for (String path : parts) {\n                    if (path.length() > 0 && path.charAt(0) == '/' && !path.toLowerCase(Locale.US).contains(\"vold\")) {\n                        result.add(path);\n                    }\n                }\n            }\n        }\n        return result;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getPotentialPaths from MountCommandStoragePointProvider.java into Swift.\n\n        Input:\n\n        Method Name: getPotentialPaths\n\n        Method Code: private List<String> getPotentialPaths(String mounted) {\n        final List<String> result = new Vector<>();\n\n        for (String line : mounted.split(\"\\n\")) {\n            if (!line.toLowerCase(Locale.US).contains(\"asec\") && sPattern.matcher(line).matches()) {\n                String parts[] = line.split(\" \");\n                for (String path : parts) {\n                    if (path.length() > 0 && path.charAt(0) == '/' && !path.toLowerCase(Locale.US).contains(\"vold\")) {\n                        result.add(path);\n                    }\n                }\n            }\n        }\n        return result;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getPotentialPaths(_ mounted: String) -> [String] {\n    var result: [String] = []\n\n    for line in mounted.split(separator: \"\\n\") {\n        if !line.lowercased().contains(\"asec\") && sPattern.matches(String(line)) {\n            let parts = line.split(separator: \" \")\n            for path in parts {\n                if path.count > 0 && path.first == \"/\" && !path.lowercased().contains(\"vold\") {\n                    result.append(String(path))\n                }\n            }\n        }\n    }\n    return result\n}\n```"
    }
]