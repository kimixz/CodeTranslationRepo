[
    {
        "method_name": "getFileListFragment",
        "method_code": "blic LocalFileListFragment getFileListFragment() {\n        return mFileListFragment;\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getFileListFragment from UploadFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: getFileListFragment\n\n        Method Code: blic LocalFileListFragment getFileListFragment() {\n        return mFileListFragment;\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getFileListFragment() -> LocalFileListFragment {\n    return mFileListFragment\n}\n```"
    },
    {
        "method_name": "startUploadActivityForResult",
        "method_code": "blic static void startUploadActivityForResult(Activity activity,\n                                                    User user,\n                                                    int requestCode,\n                                                    boolean isWithinEncryptedFolder) {\n        Intent action = new Intent(activity, UploadFilesActivity.class);\n        action.putExtra(EXTRA_USER, user);\n        action.putExtra(REQUEST_CODE_KEY, requestCode);\n        action.putExtra(ENCRYPTED_FOLDER_KEY, isWithinEncryptedFolder);\n        activity.startActivityForResult(action, requestCode);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled startUploadActivityForResult from UploadFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: startUploadActivityForResult\n\n        Method Code: blic static void startUploadActivityForResult(Activity activity,\n                                                    User user,\n                                                    int requestCode,\n                                                    boolean isWithinEncryptedFolder) {\n        Intent action = new Intent(activity, UploadFilesActivity.class);\n        action.putExtra(EXTRA_USER, user);\n        action.putExtra(REQUEST_CODE_KEY, requestCode);\n        action.putExtra(ENCRYPTED_FOLDER_KEY, isWithinEncryptedFolder);\n        activity.startActivityForResult(action, requestCode);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func startUploadActivityForResult(activity: UIViewController, user: User, requestCode: Int, isWithinEncryptedFolder: Bool) {\n    let action = UIStoryboard(name: \"Main\", bundle: nil).instantiateViewController(withIdentifier: \"UploadFilesActivity\") as! UploadFilesActivity\n    action.user = user\n    action.requestCode = requestCode\n    action.isWithinEncryptedFolder = isWithinEncryptedFolder\n    activity.present(action, animated: true, completion: nil)\n}\n```"
    },
    {
        "method_name": "onCreate",
        "method_code": "verride\n    @SuppressLint(\"WrongViewCast\") // wrong error on finding local_files_list\n    public void onCreate(Bundle savedInstanceState) {\n        Log_OC.d(TAG, \"onCreate() start\");\n        super.onCreate(savedInstanceState);\n\n        Bundle extras = getIntent().getExtras();\n        if (extras != null) {\n            mLocalFolderPickerMode = extras.getBoolean(KEY_LOCAL_FOLDER_PICKER_MODE, false);\n            requestCode = (int) extras.get(REQUEST_CODE_KEY);\n            isWithinEncryptedFolder = extras.getBoolean(ENCRYPTED_FOLDER_KEY, false);\n        }\n\n        if (savedInstanceState != null) {\n            mCurrentDir = new File(savedInstanceState.getString(KEY_DIRECTORY_PATH,\n                                                                Environment.getExternalStorageDirectory().getAbsolutePath()));\n            mSelectAll = savedInstanceState.getBoolean(KEY_ALL_SELECTED, false);\n            isWithinEncryptedFolder = savedInstanceState.getBoolean(ENCRYPTED_FOLDER_KEY, false);\n        } else {\n            String lastUploadFrom = preferences.getUploadFromLocalLastPath();\n\n            if (!lastUploadFrom.isEmpty()) {\n                mCurrentDir = new File(lastUploadFrom);\n\n                while (!mCurrentDir.exists()) {\n                    mCurrentDir = mCurrentDir.getParentFile();\n                }\n            } else {\n                mCurrentDir = Environment.getExternalStorageDirectory();\n            }\n        }\n\n        mAccountOnCreation = getAccount();\n\n        /// USER INTERFACE\n\n        // Drop-down navigation\n        mDirectories = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item);\n        mDirectories.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n        fillDirectoryDropdown();\n\n        // Inflate and set the layout view\n        binding = UploadFilesLayoutBinding.inflate(getLayoutInflater());\n        setContentView(binding.getRoot());\n\n        if (mLocalFolderPickerMode) {\n            binding.uploadOptions.setVisibility(View.GONE);\n            binding.uploadFilesBtnUpload.setText(R.string.uploader_btn_alternative_text);\n        }\n\n        mFileListFragment = (LocalFileListFragment) getSupportFragmentManager().findFragmentByTag(\"local_files_list\");\n\n        // Set input controllers\n        viewThemeUtils.material.colorMaterialButtonPrimaryOutlined(binding.uploadFilesBtnCancel);\n        binding.uploadFilesBtnCancel.setOnClickListener(this);\n\n        viewThemeUtils.material.colorMaterialButtonPrimaryFilled(binding.uploadFilesBtnUpload);\n        binding.uploadFilesBtnUpload.setOnClickListener(this);\n        binding.uploadFilesBtnUpload.setEnabled(mLocalFolderPickerMode);\n\n        int localBehaviour = preferences.getUploaderBehaviour();\n\n        // file upload spinner\n        List<String> behaviours = new ArrayList<>();\n        behaviours.add(getString(R.string.uploader_upload_files_behaviour_move_to_nextcloud_folder,\n                                 themeUtils.getDefaultDisplayNameForRootFolder(this)));\n        behaviours.add(getString(R.string.uploader_upload_files_behaviour_only_upload));\n        behaviours.add(getString(R.string.uploader_upload_files_behaviour_upload_and_delete_from_source));\n\n        ArrayAdapter<String> behaviourAdapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item,\n                                                                   behaviours);\n        behaviourAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n        binding.uploadFilesSpinnerBehaviour.setAdapter(behaviourAdapter);\n        binding.uploadFilesSpinnerBehaviour.setSelection(localBehaviour);\n\n        // setup the toolbar\n        setupToolbar();\n        binding.uploadFilesToolbar.sortListButtonGroup.setVisibility(View.VISIBLE);\n        binding.uploadFilesToolbar.switchGridViewButton.setVisibility(View.GONE);\n\n        // Action bar setup\n        ActionBar actionBar = getSupportActionBar();\n\n        if (actionBar != null) {\n            actionBar.setHomeButtonEnabled(true);   // mandatory since Android ICS, according to the official documentation\n            actionBar.setDisplayHomeAsUpEnabled(mCurrentDir != null);\n            actionBar.setDisplayShowTitleEnabled(false);\n\n            viewThemeUtils.files.themeActionBar(this, actionBar);\n        }\n\n        showToolbarSpinner();\n        mToolbarSpinner.setAdapter(mDirectories);\n        mToolbarSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\n            @Override\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n                int i = position;\n                while (i-- != 0) {\n                    onBackPressed();\n                }\n                // the next operation triggers a new call to this method, but it's necessary to\n                // ensure that the name exposed in the action bar is the current directory when the\n                // user selected it in the navigation list\n                if (position != 0) {\n                    mToolbarSpinner.setSelection(0);\n                }\n            }\n\n            @Override\n            public void onNothingSelected(AdapterView<?> parent) {\n                // no action\n            }\n        });\n\n        // wait dialog\n        if (mCurrentDialog != null) {\n            mCurrentDialog.dismiss();\n            mCurrentDialog = null;\n        }\n\n        checkWritableFolder(mCurrentDir);\n\n        getOnBackPressedDispatcher().addCallback(this, onBackPressedCallback);\n\n        Log_OC.d(TAG, \"onCreate() end\");\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreate from UploadFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onCreate\n\n        Method Code: verride\n    @SuppressLint(\"WrongViewCast\") // wrong error on finding local_files_list\n    public void onCreate(Bundle savedInstanceState) {\n        Log_OC.d(TAG, \"onCreate() start\");\n        super.onCreate(savedInstanceState);\n\n        Bundle extras = getIntent().getExtras();\n        if (extras != null) {\n            mLocalFolderPickerMode = extras.getBoolean(KEY_LOCAL_FOLDER_PICKER_MODE, false);\n            requestCode = (int) extras.get(REQUEST_CODE_KEY);\n            isWithinEncryptedFolder = extras.getBoolean(ENCRYPTED_FOLDER_KEY, false);\n        }\n\n        if (savedInstanceState != null) {\n            mCurrentDir = new File(savedInstanceState.getString(KEY_DIRECTORY_PATH,\n                                                                Environment.getExternalStorageDirectory().getAbsolutePath()));\n            mSelectAll = savedInstanceState.getBoolean(KEY_ALL_SELECTED, false);\n            isWithinEncryptedFolder = savedInstanceState.getBoolean(ENCRYPTED_FOLDER_KEY, false);\n        } else {\n            String lastUploadFrom = preferences.getUploadFromLocalLastPath();\n\n            if (!lastUploadFrom.isEmpty()) {\n                mCurrentDir = new File(lastUploadFrom);\n\n                while (!mCurrentDir.exists()) {\n                    mCurrentDir = mCurrentDir.getParentFile();\n                }\n            } else {\n                mCurrentDir = Environment.getExternalStorageDirectory();\n            }\n        }\n\n        mAccountOnCreation = getAccount();\n\n        /// USER INTERFACE\n\n        // Drop-down navigation\n        mDirectories = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item);\n        mDirectories.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n        fillDirectoryDropdown();\n\n        // Inflate and set the layout view\n        binding = UploadFilesLayoutBinding.inflate(getLayoutInflater());\n        setContentView(binding.getRoot());\n\n        if (mLocalFolderPickerMode) {\n            binding.uploadOptions.setVisibility(View.GONE);\n            binding.uploadFilesBtnUpload.setText(R.string.uploader_btn_alternative_text);\n        }\n\n        mFileListFragment = (LocalFileListFragment) getSupportFragmentManager().findFragmentByTag(\"local_files_list\");\n\n        // Set input controllers\n        viewThemeUtils.material.colorMaterialButtonPrimaryOutlined(binding.uploadFilesBtnCancel);\n        binding.uploadFilesBtnCancel.setOnClickListener(this);\n\n        viewThemeUtils.material.colorMaterialButtonPrimaryFilled(binding.uploadFilesBtnUpload);\n        binding.uploadFilesBtnUpload.setOnClickListener(this);\n        binding.uploadFilesBtnUpload.setEnabled(mLocalFolderPickerMode);\n\n        int localBehaviour = preferences.getUploaderBehaviour();\n\n        // file upload spinner\n        List<String> behaviours = new ArrayList<>();\n        behaviours.add(getString(R.string.uploader_upload_files_behaviour_move_to_nextcloud_folder,\n                                 themeUtils.getDefaultDisplayNameForRootFolder(this)));\n        behaviours.add(getString(R.string.uploader_upload_files_behaviour_only_upload));\n        behaviours.add(getString(R.string.uploader_upload_files_behaviour_upload_and_delete_from_source));\n\n        ArrayAdapter<String> behaviourAdapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item,\n                                                                   behaviours);\n        behaviourAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n        binding.uploadFilesSpinnerBehaviour.setAdapter(behaviourAdapter);\n        binding.uploadFilesSpinnerBehaviour.setSelection(localBehaviour);\n\n        // setup the toolbar\n        setupToolbar();\n        binding.uploadFilesToolbar.sortListButtonGroup.setVisibility(View.VISIBLE);\n        binding.uploadFilesToolbar.switchGridViewButton.setVisibility(View.GONE);\n\n        // Action bar setup\n        ActionBar actionBar = getSupportActionBar();\n\n        if (actionBar != null) {\n            actionBar.setHomeButtonEnabled(true);   // mandatory since Android ICS, according to the official documentation\n            actionBar.setDisplayHomeAsUpEnabled(mCurrentDir != null);\n            actionBar.setDisplayShowTitleEnabled(false);\n\n            viewThemeUtils.files.themeActionBar(this, actionBar);\n        }\n\n        showToolbarSpinner();\n        mToolbarSpinner.setAdapter(mDirectories);\n        mToolbarSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\n            @Override\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n                int i = position;\n                while (i-- != 0) {\n                    onBackPressed();\n                }\n                // the next operation triggers a new call to this method, but it's necessary to\n                // ensure that the name exposed in the action bar is the current directory when the\n                // user selected it in the navigation list\n                if (position != 0) {\n                    mToolbarSpinner.setSelection(0);\n                }\n            }\n\n            @Override\n            public void onNothingSelected(AdapterView<?> parent) {\n                // no action\n            }\n        });\n\n        // wait dialog\n        if (mCurrentDialog != null) {\n            mCurrentDialog.dismiss();\n            mCurrentDialog = null;\n        }\n\n        checkWritableFolder(mCurrentDir);\n\n        getOnBackPressedDispatcher().addCallback(this, onBackPressedCallback);\n\n        Log_OC.d(TAG, \"onCreate() end\");\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    Log_OC.d(TAG, \"onCreate() start\")\n\n    if let extras = self.intent.extras {\n        mLocalFolderPickerMode = extras.getBoolean(KEY_LOCAL_FOLDER_PICKER_MODE, false)\n        requestCode = extras.getInt(REQUEST_CODE_KEY)\n        isWithinEncryptedFolder = extras.getBoolean(ENCRYPTED_FOLDER_KEY, false)\n    }\n\n    if let savedInstanceState = savedInstanceState {\n        mCurrentDir = File(savedInstanceState.getString(KEY_DIRECTORY_PATH, Environment.getExternalStorageDirectory().absolutePath))\n        mSelectAll = savedInstanceState.getBoolean(KEY_ALL_SELECTED, false)\n        isWithinEncryptedFolder = savedInstanceState.getBoolean(ENCRYPTED_FOLDER_KEY, false)\n    } else {\n        let lastUploadFrom = preferences.getUploadFromLocalLastPath()\n        if !lastUploadFrom.isEmpty {\n            mCurrentDir = File(lastUploadFrom)\n            while !mCurrentDir.exists() {\n                mCurrentDir = mCurrentDir.getParentFile()\n            }\n        } else {\n            mCurrentDir = Environment.getExternalStorageDirectory()\n        }\n    }\n\n    mAccountOnCreation = getAccount()\n\n    mDirectories = ArrayAdapter<String>(context: self, android.R.layout.simple_spinner_item)\n    mDirectories.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)\n    fillDirectoryDropdown()\n\n    binding = UploadFilesLayoutBinding.inflate(layoutInflater)\n    setContentView(binding.root)\n\n    if mLocalFolderPickerMode {\n        binding.uploadOptions.visibility = .gone\n        binding.uploadFilesBtnUpload.setText(R.string.uploader_btn_alternative_text)\n    }\n\n    mFileListFragment = supportFragmentManager.findFragmentByTag(\"local_files_list\") as? LocalFileListFragment\n\n    viewThemeUtils.material.colorMaterialButtonPrimaryOutlined(binding.uploadFilesBtnCancel)\n    binding.uploadFilesBtnCancel.setOnClickListener(self)\n\n    viewThemeUtils.material.colorMaterialButtonPrimaryFilled(binding.uploadFilesBtnUpload)\n    binding.uploadFilesBtnUpload.setOnClickListener(self)\n    binding.uploadFilesBtnUpload.isEnabled = mLocalFolderPickerMode\n\n    let localBehaviour = preferences.getUploaderBehaviour()\n\n    var behaviours = [String]()\n    behaviours.append(getString(R.string.uploader_upload_files_behaviour_move_to_nextcloud_folder, themeUtils.getDefaultDisplayNameForRootFolder(self)))\n    behaviours.append(getString(R.string.uploader_upload_files_behaviour_only_upload))\n    behaviours.append(getString(R.string.uploader_upload_files_behaviour_upload_and_delete_from_source))\n\n    let behaviourAdapter = ArrayAdapter<String>(context: self, android.R.layout.simple_spinner_item, behaviours)\n    behaviourAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)\n    binding.uploadFilesSpinnerBehaviour.adapter = behaviourAdapter\n    binding.uploadFilesSpinnerBehaviour.setSelection(localBehaviour)\n\n    setupToolbar()\n    binding.uploadFilesToolbar.sortListButtonGroup.visibility = .visible\n    binding.uploadFilesToolbar.switchGridViewButton.visibility = .gone\n\n    if let actionBar = supportActionBar {\n        actionBar.setHomeButtonEnabled(true)\n        actionBar.setDisplayHomeAsUpEnabled(mCurrentDir != nil)\n        actionBar.setDisplayShowTitleEnabled(false)\n        viewThemeUtils.files.themeActionBar(self, actionBar)\n    }\n\n    showToolbarSpinner()\n    mToolbarSpinner.adapter = mDirectories\n    mToolbarSpinner.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {\n        override fun onItemSelected(parent: AdapterView<*>, view: View, position: Int, id: Long) {\n            var i = position\n            while (i-- != 0) {\n                onBackPressed()\n            }\n            if (position != 0) {\n                mToolbarSpinner.setSelection(0)\n            }\n        }\n\n        override fun onNothingSelected(parent: AdapterView<*>) {\n            // no action\n        }\n    }\n\n    if mCurrentDialog != nil {\n        mCurrentDialog.dismiss()\n        mCurrentDialog = nil\n    }\n\n    checkWritableFolder(mCurrentDir)\n\n    getOnBackPressedDispatcher().addCallback(self, onBackPressedCallback)\n\n    Log_OC.d(TAG, \"onCreate() end\")\n}\n```"
    },
    {
        "method_name": "onItemSelected",
        "method_code": "verride\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n                int i = position;\n                while (i-- != 0) {\n                    onBackPressed();\n                }\n                // the next operation triggers a new call to this method, but it's necessary to\n                // ensure that the name exposed in the action bar is the current directory when the\n                // user selected it in the navigation list\n                if (position != 0) {\n                    mToolbarSpinner.setSelection(0);\n                }\n            }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onItemSelected from UploadFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onItemSelected\n\n        Method Code: verride\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n                int i = position;\n                while (i-- != 0) {\n                    onBackPressed();\n                }\n                // the next operation triggers a new call to this method, but it's necessary to\n                // ensure that the name exposed in the action bar is the current directory when the\n                // user selected it in the navigation list\n                if (position != 0) {\n                    mToolbarSpinner.setSelection(0);\n                }\n            }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onItemSelected(parent: UIPickerView, view: UIView, position: Int, id: Int) {\n    var i = position\n    while i != 0 {\n        onBackPressed()\n        i -= 1\n    }\n    if position != 0 {\n        mToolbarSpinner.selectRow(0, inComponent: 0, animated: true)\n    }\n}\n```"
    },
    {
        "method_name": "onNothingSelected",
        "method_code": "verride\n            public void onNothingSelected(AdapterView<?> parent) {\n                // no action\n            }\n ",
        "prompt": "\n        Please translate the following Java (Android) method titled onNothingSelected from UploadFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onNothingSelected\n\n        Method Code: verride\n            public void onNothingSelected(AdapterView<?> parent) {\n                // no action\n            }\n \n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onNothingSelected(_ parent: Any?) {\n    // no action\n}\n```"
    },
    {
        "method_name": "requestPermissions",
        "method_code": "ivate void requestPermissions() {\n        PermissionUtil.requestExternalStoragePermission(this, viewThemeUtils, true);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled requestPermissions from UploadFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: requestPermissions\n\n        Method Code: ivate void requestPermissions() {\n        PermissionUtil.requestExternalStoragePermission(this, viewThemeUtils, true);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func requestPermissions() {\n    PermissionUtil.requestExternalStoragePermission(self, viewThemeUtils: viewThemeUtils, true)\n}\n```"
    },
    {
        "method_name": "showToolbarSpinner",
        "method_code": "blic void showToolbarSpinner() {\n        mToolbarSpinner.setVisibility(View.VISIBLE);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled showToolbarSpinner from UploadFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: showToolbarSpinner\n\n        Method Code: blic void showToolbarSpinner() {\n        mToolbarSpinner.setVisibility(View.VISIBLE);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc showToolbarSpinner() {\n    mToolbarSpinner.isHidden = false\n}\n```"
    },
    {
        "method_name": "fillDirectoryDropdown",
        "method_code": "ivate void fillDirectoryDropdown() {\n        File currentDir = mCurrentDir;\n        while (currentDir != null && currentDir.getParentFile() != null) {\n            mDirectories.add(currentDir.getName());\n            currentDir = currentDir.getParentFile();\n        }\n        mDirectories.add(File.separator);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled fillDirectoryDropdown from UploadFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: fillDirectoryDropdown\n\n        Method Code: ivate void fillDirectoryDropdown() {\n        File currentDir = mCurrentDir;\n        while (currentDir != null && currentDir.getParentFile() != null) {\n            mDirectories.add(currentDir.getName());\n            currentDir = currentDir.getParentFile();\n        }\n        mDirectories.add(File.separator);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func fillDirectoryDropdown() {\n    var currentDir = mCurrentDir\n    while let dir = currentDir, let parentDir = dir.parent {\n        mDirectories.append(dir.lastPathComponent)\n        currentDir = parentDir\n    }\n    mDirectories.append(FileManager.default.pathSeparator)\n}\n```"
    },
    {
        "method_name": "onCreateOptionsMenu",
        "method_code": "verride\n    public boolean onCreateOptionsMenu(Menu menu) {\n        mOptionsMenu = menu;\n        getMenuInflater().inflate(R.menu.activity_upload_files, menu);\n\n        if (!mLocalFolderPickerMode) {\n            MenuItem selectAll = menu.findItem(R.id.action_select_all);\n            setSelectAllMenuItem(selectAll, mSelectAll);\n        }\n\n        final MenuItem item = menu.findItem(R.id.action_search);\n        mSearchView = (SearchView) MenuItemCompat.getActionView(item);\n        viewThemeUtils.androidx.themeToolbarSearchView(mSearchView);\n        viewThemeUtils.platform.tintTextDrawable(this, menu.findItem(R.id.action_choose_storage_path).getIcon());\n\n        mSearchView.setOnSearchClickListener(v -> mToolbarSpinner.setVisibility(View.GONE));\n\n        return super.onCreateOptionsMenu(menu);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreateOptionsMenu from UploadFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onCreateOptionsMenu\n\n        Method Code: verride\n    public boolean onCreateOptionsMenu(Menu menu) {\n        mOptionsMenu = menu;\n        getMenuInflater().inflate(R.menu.activity_upload_files, menu);\n\n        if (!mLocalFolderPickerMode) {\n            MenuItem selectAll = menu.findItem(R.id.action_select_all);\n            setSelectAllMenuItem(selectAll, mSelectAll);\n        }\n\n        final MenuItem item = menu.findItem(R.id.action_search);\n        mSearchView = (SearchView) MenuItemCompat.getActionView(item);\n        viewThemeUtils.androidx.themeToolbarSearchView(mSearchView);\n        viewThemeUtils.platform.tintTextDrawable(this, menu.findItem(R.id.action_choose_storage_path).getIcon());\n\n        mSearchView.setOnSearchClickListener(v -> mToolbarSpinner.setVisibility(View.GONE));\n\n        return super.onCreateOptionsMenu(menu);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onCreateOptionsMenu(_ menu: Menu) -> Bool {\n    mOptionsMenu = menu\n    menuInflater.inflate(R.menu.activity_upload_files, menu)\n\n    if !mLocalFolderPickerMode {\n        if let selectAll = menu.findItem(withId: R.id.action_select_all) {\n            setSelectAllMenuItem(selectAll, mSelectAll)\n        }\n    }\n\n    if let item = menu.findItem(withId: R.id.action_search) {\n        mSearchView = item.actionView as? UISearchBar\n        viewThemeUtils.androidx.themeToolbarSearchView(mSearchView)\n        if let icon = menu.findItem(withId: R.id.action_choose_storage_path)?.icon {\n            viewThemeUtils.platform.tintTextDrawable(self, icon)\n        }\n\n        mSearchView?.onSearchClick = { [weak self] in\n            self?.mToolbarSpinner.isHidden = true\n        }\n    }\n\n    return super.onCreateOptionsMenu(menu)\n}\n```"
    },
    {
        "method_name": "onOptionsItemSelected",
        "method_code": "verride\n    public boolean onOptionsItemSelected(MenuItem item) {\n        boolean retval = true;\n        int itemId = item.getItemId();\n\n        if (itemId == android.R.id.home) {\n            if (mCurrentDir != null && mCurrentDir.getParentFile() != null) {\n                onBackPressed();\n            }\n        } else if (itemId == R.id.action_select_all) {\n            mSelectAll = !item.isChecked();\n            item.setChecked(mSelectAll);\n            mFileListFragment.selectAllFiles(mSelectAll);\n            setSelectAllMenuItem(item, mSelectAll);\n        } else if (itemId == R.id.action_choose_storage_path) {\n            checkLocalStoragePathPickerPermission();\n        } else {\n            retval = super.onOptionsItemSelected(item);\n        }\n\n        return retval;\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onOptionsItemSelected from UploadFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onOptionsItemSelected\n\n        Method Code: verride\n    public boolean onOptionsItemSelected(MenuItem item) {\n        boolean retval = true;\n        int itemId = item.getItemId();\n\n        if (itemId == android.R.id.home) {\n            if (mCurrentDir != null && mCurrentDir.getParentFile() != null) {\n                onBackPressed();\n            }\n        } else if (itemId == R.id.action_select_all) {\n            mSelectAll = !item.isChecked();\n            item.setChecked(mSelectAll);\n            mFileListFragment.selectAllFiles(mSelectAll);\n            setSelectAllMenuItem(item, mSelectAll);\n        } else if (itemId == R.id.action_choose_storage_path) {\n            checkLocalStoragePathPickerPermission();\n        } else {\n            retval = super.onOptionsItemSelected(item);\n        }\n\n        return retval;\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onOptionsItemSelected(_ item: MenuItem) -> Bool {\n    var retval = true\n    let itemId = item.itemId\n\n    if itemId == android.R.id.home {\n        if let currentDir = mCurrentDir, currentDir.parentFile != nil {\n            onBackPressed()\n        }\n    } else if itemId == R.id.action_select_all {\n        mSelectAll = !item.isChecked\n        item.isChecked = mSelectAll\n        mFileListFragment.selectAllFiles(mSelectAll)\n        setSelectAllMenuItem(item, mSelectAll)\n    } else if itemId == R.id.action_choose_storage_path {\n        checkLocalStoragePathPickerPermission()\n    } else {\n        retval = super.onOptionsItemSelected(item)\n    }\n\n    return retval\n}\n```"
    },
    {
        "method_name": "checkLocalStoragePathPickerPermission",
        "method_code": "ivate void checkLocalStoragePathPickerPermission() {\n        if (!PermissionUtil.checkExternalStoragePermission(this)) {\n            requestPermissions();\n        } else {\n            showLocalStoragePathPickerDialog();\n        }\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled checkLocalStoragePathPickerPermission from UploadFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: checkLocalStoragePathPickerPermission\n\n        Method Code: ivate void checkLocalStoragePathPickerPermission() {\n        if (!PermissionUtil.checkExternalStoragePermission(this)) {\n            requestPermissions();\n        } else {\n            showLocalStoragePathPickerDialog();\n        }\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func checkLocalStoragePathPickerPermission() {\n    if !PermissionUtil.checkExternalStoragePermission(self) {\n        requestPermissions()\n    } else {\n        showLocalStoragePathPickerDialog()\n    }\n}\n```"
    },
    {
        "method_name": "showLocalStoragePathPickerDialog",
        "method_code": "ivate void showLocalStoragePathPickerDialog() {\n        FragmentManager fm = getSupportFragmentManager();\n        FragmentTransaction ft = fm.beginTransaction();\n        ft.addToBackStack(null);\n        dialog = LocalStoragePathPickerDialogFragment.newInstance();\n        dialog.show(ft, LocalStoragePathPickerDialogFragment.LOCAL_STORAGE_PATH_PICKER_FRAGMENT);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled showLocalStoragePathPickerDialog from UploadFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: showLocalStoragePathPickerDialog\n\n        Method Code: ivate void showLocalStoragePathPickerDialog() {\n        FragmentManager fm = getSupportFragmentManager();\n        FragmentTransaction ft = fm.beginTransaction();\n        ft.addToBackStack(null);\n        dialog = LocalStoragePathPickerDialogFragment.newInstance();\n        dialog.show(ft, LocalStoragePathPickerDialogFragment.LOCAL_STORAGE_PATH_PICKER_FRAGMENT);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func showLocalStoragePathPickerDialog() {\n    let fm = self.navigationController\n    let dialog = LocalStoragePathPickerDialogFragment.newInstance()\n    fm?.pushViewController(dialog, animated: true)\n}\n```"
    },
    {
        "method_name": "onRequestPermissionsResult",
        "method_code": "verride\n    public void onRequestPermissionsResult(int requestCode,\n                                           @NonNull String[] permissions,\n                                           @NonNull int[] grantResults) {\n\n        if (requestCode == PermissionUtil.PERMISSIONS_EXTERNAL_STORAGE) {\n            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                // permission was granted\n                showLocalStoragePathPickerDialog();\n            } else {\n                DisplayUtils.showSnackMessage(this, R.string.permission_storage_access);\n            }\n        } else {\n            super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n        }\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onRequestPermissionsResult from UploadFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onRequestPermissionsResult\n\n        Method Code: verride\n    public void onRequestPermissionsResult(int requestCode,\n                                           @NonNull String[] permissions,\n                                           @NonNull int[] grantResults) {\n\n        if (requestCode == PermissionUtil.PERMISSIONS_EXTERNAL_STORAGE) {\n            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                // permission was granted\n                showLocalStoragePathPickerDialog();\n            } else {\n                DisplayUtils.showSnackMessage(this, R.string.permission_storage_access);\n            }\n        } else {\n            super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n        }\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onRequestPermissionsResult(_ requestCode: Int, _ permissions: [String], _ grantResults: [Int]) {\n    if requestCode == PermissionUtil.PERMISSIONS_EXTERNAL_STORAGE {\n        if grantResults.count > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED {\n            // permission was granted\n            showLocalStoragePathPickerDialog()\n        } else {\n            DisplayUtils.showSnackMessage(self, R.string.permission_storage_access)\n        }\n    } else {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\n    }\n}\n```"
    },
    {
        "method_name": "onSortingOrderChosen",
        "method_code": "verride\n    public void onSortingOrderChosen(FileSortOrder selection) {\n        preferences.setSortOrder(FileSortOrder.Type.localFileListView, selection);\n        mFileListFragment.sortFiles(selection);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onSortingOrderChosen from UploadFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onSortingOrderChosen\n\n        Method Code: verride\n    public void onSortingOrderChosen(FileSortOrder selection) {\n        preferences.setSortOrder(FileSortOrder.Type.localFileListView, selection);\n        mFileListFragment.sortFiles(selection);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onSortingOrderChosen(selection: FileSortOrder) {\n    preferences.setSortOrder(type: .localFileListView, selection: selection)\n    mFileListFragment.sortFiles(selection: selection)\n}\n```"
    },
    {
        "method_name": "isSearchOpen",
        "method_code": "ivate boolean isSearchOpen() {\n        if (mSearchView == null) {\n            return false;\n        } else {\n            View mSearchEditFrame = mSearchView.findViewById(androidx.appcompat.R.id.search_edit_frame);\n            return mSearchEditFrame != null && mSearchEditFrame.getVisibility() == View.VISIBLE;\n        }\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isSearchOpen from UploadFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: isSearchOpen\n\n        Method Code: ivate boolean isSearchOpen() {\n        if (mSearchView == null) {\n            return false;\n        } else {\n            View mSearchEditFrame = mSearchView.findViewById(androidx.appcompat.R.id.search_edit_frame);\n            return mSearchEditFrame != null && mSearchEditFrame.getVisibility() == View.VISIBLE;\n        }\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func isSearchOpen() -> Bool {\n    guard let mSearchView = mSearchView else {\n        return false\n    }\n    if let mSearchEditFrame = mSearchView.viewWithTag(androidx.appcompat.R.id.search_edit_frame) {\n        return mSearchEditFrame.isHidden == false\n    }\n    return false\n}\n```"
    },
    {
        "method_name": "handleOnBackPressed",
        "method_code": "verride\n        public void handleOnBackPressed() {\n            if (isSearchOpen() && mSearchView != null) {\n                mSearchView.setQuery(\"\", false);\n                mFileListFragment.onClose();\n                mSearchView.onActionViewCollapsed();\n                setDrawerIndicatorEnabled(isDrawerIndicatorAvailable());\n            } else {\n                if (mDirectories.getCount() <= SINGLE_DIR) {\n                    finish();\n                    return;\n                }\n\n                File parentFolder = mCurrentDir.getParentFile();\n                if (!parentFolder.canRead()) {\n                    checkLocalStoragePathPickerPermission();\n                    return;\n                }\n\n                popDirname();\n                mFileListFragment.onNavigateUp();\n                mCurrentDir = mFileListFragment.getCurrentDirectory();\n                checkWritableFolder(mCurrentDir);\n\n                if (mCurrentDir.getParentFile() == null) {\n                    ActionBar actionBar = getSupportActionBar();\n                    if (actionBar != null) {\n                        actionBar.setDisplayHomeAsUpEnabled(false);\n                    }\n                }\n\n                // invalidate checked state when navigating directories\n                if (!mLocalFolderPickerMode) {\n                    setSelectAllMenuItem(mOptionsMenu.findItem(R.id.action_select_all), false);\n                }\n            }\n        }\n ",
        "prompt": "\n        Please translate the following Java (Android) method titled handleOnBackPressed from UploadFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: handleOnBackPressed\n\n        Method Code: verride\n        public void handleOnBackPressed() {\n            if (isSearchOpen() && mSearchView != null) {\n                mSearchView.setQuery(\"\", false);\n                mFileListFragment.onClose();\n                mSearchView.onActionViewCollapsed();\n                setDrawerIndicatorEnabled(isDrawerIndicatorAvailable());\n            } else {\n                if (mDirectories.getCount() <= SINGLE_DIR) {\n                    finish();\n                    return;\n                }\n\n                File parentFolder = mCurrentDir.getParentFile();\n                if (!parentFolder.canRead()) {\n                    checkLocalStoragePathPickerPermission();\n                    return;\n                }\n\n                popDirname();\n                mFileListFragment.onNavigateUp();\n                mCurrentDir = mFileListFragment.getCurrentDirectory();\n                checkWritableFolder(mCurrentDir);\n\n                if (mCurrentDir.getParentFile() == null) {\n                    ActionBar actionBar = getSupportActionBar();\n                    if (actionBar != null) {\n                        actionBar.setDisplayHomeAsUpEnabled(false);\n                    }\n                }\n\n                // invalidate checked state when navigating directories\n                if (!mLocalFolderPickerMode) {\n                    setSelectAllMenuItem(mOptionsMenu.findItem(R.id.action_select_all), false);\n                }\n            }\n        }\n \n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc handleOnBackPressed() {\n    if isSearchOpen(), let searchView = mSearchView {\n        searchView.setQuery(\"\", submit: false)\n        mFileListFragment.onClose()\n        searchView.onActionViewCollapsed()\n        setDrawerIndicatorEnabled(isDrawerIndicatorAvailable())\n    } else {\n        if mDirectories.count <= SINGLE_DIR {\n            finish()\n            return\n        }\n\n        guard let parentFolder = mCurrentDir.parent else {\n            checkLocalStoragePathPickerPermission()\n            return\n        }\n\n        popDirname()\n        mFileListFragment.onNavigateUp()\n        mCurrentDir = mFileListFragment.getCurrentDirectory()\n        checkWritableFolder(mCurrentDir)\n\n        if mCurrentDir.parent == nil {\n            if let actionBar = getSupportActionBar() {\n                actionBar.setDisplayHomeAsUpEnabled(false)\n            }\n        }\n\n        // invalidate checked state when navigating directories\n        if !mLocalFolderPickerMode {\n            if let selectAllMenuItem = mOptionsMenu.findItem(withId: R.id.action_select_all) {\n                setSelectAllMenuItem(selectAllMenuItem, false)\n            }\n        }\n    }\n}\n```"
    },
    {
        "method_name": "onSaveInstanceState",
        "method_code": "verride\n    protected void onSaveInstanceState(@NonNull Bundle outState) {\n        // responsibility of restore is preferred in onCreate() before than in\n        // onRestoreInstanceState when there are Fragments involved\n        FileExtensionsKt.logFileSize(mCurrentDir, TAG);\n        super.onSaveInstanceState(outState);\n        outState.putString(UploadFilesActivity.KEY_DIRECTORY_PATH, mCurrentDir.getAbsolutePath());\n        if (mOptionsMenu != null && mOptionsMenu.findItem(R.id.action_select_all) != null) {\n            outState.putBoolean(UploadFilesActivity.KEY_ALL_SELECTED, mOptionsMenu.findItem(R.id.action_select_all).isChecked());\n        } else {\n            outState.putBoolean(UploadFilesActivity.KEY_ALL_SELECTED, false);\n        }\n        Log_OC.d(TAG, \"onSaveInstanceState() end\");\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onSaveInstanceState from UploadFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onSaveInstanceState\n\n        Method Code: verride\n    protected void onSaveInstanceState(@NonNull Bundle outState) {\n        // responsibility of restore is preferred in onCreate() before than in\n        // onRestoreInstanceState when there are Fragments involved\n        FileExtensionsKt.logFileSize(mCurrentDir, TAG);\n        super.onSaveInstanceState(outState);\n        outState.putString(UploadFilesActivity.KEY_DIRECTORY_PATH, mCurrentDir.getAbsolutePath());\n        if (mOptionsMenu != null && mOptionsMenu.findItem(R.id.action_select_all) != null) {\n            outState.putBoolean(UploadFilesActivity.KEY_ALL_SELECTED, mOptionsMenu.findItem(R.id.action_select_all).isChecked());\n        } else {\n            outState.putBoolean(UploadFilesActivity.KEY_ALL_SELECTED, false);\n        }\n        Log_OC.d(TAG, \"onSaveInstanceState() end\");\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func encodeRestorableState(with coder: NSCoder) {\n    // responsibility of restore is preferred in viewDidLoad() before than in\n    // decodeRestorableState when there are Fragments involved\n    FileExtensionsKt.logFileSize(mCurrentDir, TAG)\n    super.encodeRestorableState(with: coder)\n    coder.encode(mCurrentDir.path, forKey: UploadFilesActivity.KEY_DIRECTORY_PATH)\n    if let menu = mOptionsMenu, let selectAllItem = menu.findItem(withIdentifier: R.id.action_select_all) {\n        coder.encode(selectAllItem.isChecked, forKey: UploadFilesActivity.KEY_ALL_SELECTED)\n    } else {\n        coder.encode(false, forKey: UploadFilesActivity.KEY_ALL_SELECTED)\n    }\n    Log_OC.d(TAG, \"encodeRestorableState() end\")\n}\n```"
    },
    {
        "method_name": "pushDirname",
        "method_code": "blic void pushDirname(File directory) {\n        if (!directory.isDirectory()) {\n            throw new IllegalArgumentException(\"Only directories may be pushed!\");\n        }\n        mDirectories.insert(directory.getName(), 0);\n        mCurrentDir = directory;\n        checkWritableFolder(mCurrentDir);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled pushDirname from UploadFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: pushDirname\n\n        Method Code: blic void pushDirname(File directory) {\n        if (!directory.isDirectory()) {\n            throw new IllegalArgumentException(\"Only directories may be pushed!\");\n        }\n        mDirectories.insert(directory.getName(), 0);\n        mCurrentDir = directory;\n        checkWritableFolder(mCurrentDir);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc pushDirname(directory: URL) {\n    guard directory.hasDirectoryPath else {\n        fatalError(\"Only directories may be pushed!\")\n    }\n    mDirectories.insert(directory.lastPathComponent, at: 0)\n    mCurrentDir = directory\n    checkWritableFolder(mCurrentDir)\n}\n```"
    },
    {
        "method_name": "popDirname",
        "method_code": "blic boolean popDirname() {\n        mDirectories.remove(mDirectories.getItem(0));\n        return !mDirectories.isEmpty();\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled popDirname from UploadFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: popDirname\n\n        Method Code: blic boolean popDirname() {\n        mDirectories.remove(mDirectories.getItem(0));\n        return !mDirectories.isEmpty();\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc popDirname() -> Bool {\n    mDirectories.remove(at: 0)\n    return !mDirectories.isEmpty\n}\n```"
    },
    {
        "method_name": "updateUploadButtonActive",
        "method_code": "ivate void updateUploadButtonActive() {\n        final boolean anySelected = mFileListFragment.getCheckedFilesCount() > 0;\n        binding.uploadFilesBtnUpload.setEnabled(anySelected || mLocalFolderPickerMode);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled updateUploadButtonActive from UploadFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: updateUploadButtonActive\n\n        Method Code: ivate void updateUploadButtonActive() {\n        final boolean anySelected = mFileListFragment.getCheckedFilesCount() > 0;\n        binding.uploadFilesBtnUpload.setEnabled(anySelected || mLocalFolderPickerMode);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func updateUploadButtonActive() {\n    let anySelected = mFileListFragment.getCheckedFilesCount() > 0\n    binding.uploadFilesBtnUpload.isEnabled = anySelected || mLocalFolderPickerMode\n}\n```"
    },
    {
        "method_name": "setSelectAllMenuItem",
        "method_code": "ivate void setSelectAllMenuItem(MenuItem selectAll, boolean checked) {\n        if (selectAll != null) {\n            selectAll.setChecked(checked);\n            if (checked) {\n                selectAll.setIcon(R.drawable.ic_select_none);\n            } else {\n                selectAll.setIcon(\n                    viewThemeUtils.platform.tintPrimaryDrawable(this, R.drawable.ic_select_all));\n            }\n            updateUploadButtonActive();\n        }\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setSelectAllMenuItem from UploadFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: setSelectAllMenuItem\n\n        Method Code: ivate void setSelectAllMenuItem(MenuItem selectAll, boolean checked) {\n        if (selectAll != null) {\n            selectAll.setChecked(checked);\n            if (checked) {\n                selectAll.setIcon(R.drawable.ic_select_none);\n            } else {\n                selectAll.setIcon(\n                    viewThemeUtils.platform.tintPrimaryDrawable(this, R.drawable.ic_select_all));\n            }\n            updateUploadButtonActive();\n        }\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setSelectAllMenuItem(selectAll: MenuItem?, checked: Bool) {\n    if let selectAll = selectAll {\n        selectAll.isChecked = checked\n        if checked {\n            selectAll.icon = UIImage(named: \"ic_select_none\")\n        } else {\n            selectAll.icon = viewThemeUtils.platform.tintPrimaryDrawable(self, drawableName: \"ic_select_all\")\n        }\n        updateUploadButtonActive()\n    }\n}\n```"
    },
    {
        "method_name": "onCheckAvailableSpaceStart",
        "method_code": "verride\n    public void onCheckAvailableSpaceStart() {\n        if (requestCode == FileDisplayActivity.REQUEST_CODE__SELECT_FILES_FROM_FILE_SYSTEM) {\n            mCurrentDialog = IndeterminateProgressDialog.newInstance(R.string.wait_a_moment, false);\n            mCurrentDialog.show(getSupportFragmentManager(), WAIT_DIALOG_TAG);\n        }\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onCheckAvailableSpaceStart from UploadFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onCheckAvailableSpaceStart\n\n        Method Code: verride\n    public void onCheckAvailableSpaceStart() {\n        if (requestCode == FileDisplayActivity.REQUEST_CODE__SELECT_FILES_FROM_FILE_SYSTEM) {\n            mCurrentDialog = IndeterminateProgressDialog.newInstance(R.string.wait_a_moment, false);\n            mCurrentDialog.show(getSupportFragmentManager(), WAIT_DIALOG_TAG);\n        }\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onCheckAvailableSpaceStart() {\n    if requestCode == FileDisplayActivity.REQUEST_CODE__SELECT_FILES_FROM_FILE_SYSTEM {\n        mCurrentDialog = IndeterminateProgressDialog.newInstance(R.string.wait_a_moment, false)\n        mCurrentDialog.show(getSupportFragmentManager(), WAIT_DIALOG_TAG)\n    }\n}\n```"
    },
    {
        "method_name": "onCheckAvailableSpaceFinish",
        "method_code": "verride\n    public void onCheckAvailableSpaceFinish(boolean hasEnoughSpaceAvailable, String... filesToUpload) {\n        if (mCurrentDialog != null && ActivityExtensionsKt.isDialogFragmentReady(this, mCurrentDialog)) {\n            mCurrentDialog.dismiss();\n            mCurrentDialog = null;\n        }\n\n        if (hasEnoughSpaceAvailable) {\n            // return the list of files (success)\n            Intent data = new Intent();\n\n            if (requestCode == FileDisplayActivity.REQUEST_CODE__UPLOAD_FROM_CAMERA) {\n                data.putExtra(EXTRA_CHOSEN_FILES, new String[]{filesToUpload[0]});\n                setResult(RESULT_OK_AND_DELETE, data);\n\n                preferences.setUploaderBehaviour(FileUploadWorker.LOCAL_BEHAVIOUR_DELETE);\n            } else {\n                data.putExtra(EXTRA_CHOSEN_FILES, mFileListFragment.getCheckedFilePaths());\n                data.putExtra(LOCAL_BASE_PATH, mCurrentDir.getAbsolutePath());\n\n                // set result code\n                switch (binding.uploadFilesSpinnerBehaviour.getSelectedItemPosition()) {\n                    case 0: // move to nextcloud folder\n                        setResult(RESULT_OK_AND_MOVE, data);\n                        break;\n\n                    case 1: // only upload\n                        setResult(RESULT_OK_AND_DO_NOTHING, data);\n                        break;\n\n                    case 2: // upload and delete from source\n                        setResult(RESULT_OK_AND_DELETE, data);\n                        break;\n\n                    default:\n                        // do nothing\n                        break;\n                }\n\n                // store behaviour\n                preferences.setUploaderBehaviour(binding.uploadFilesSpinnerBehaviour.getSelectedItemPosition());\n            }\n\n            finish();\n        } else {\n            // show a dialog to query the user if wants to move the selected files\n            // to the ownCloud folder instead of copying\n            String[] args = { getString(R.string.app_name) };\n            ConfirmationDialogFragment dialog = ConfirmationDialogFragment.newInstance(\n                R.string.upload_query_move_foreign_files, args, 0, R.string.common_yes,  R.string.common_no, -1);\n            dialog.setOnConfirmationListener(this);\n            dialog.show(getSupportFragmentManager(), QUERY_TO_MOVE_DIALOG_TAG);\n        }\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onCheckAvailableSpaceFinish from UploadFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onCheckAvailableSpaceFinish\n\n        Method Code: verride\n    public void onCheckAvailableSpaceFinish(boolean hasEnoughSpaceAvailable, String... filesToUpload) {\n        if (mCurrentDialog != null && ActivityExtensionsKt.isDialogFragmentReady(this, mCurrentDialog)) {\n            mCurrentDialog.dismiss();\n            mCurrentDialog = null;\n        }\n\n        if (hasEnoughSpaceAvailable) {\n            // return the list of files (success)\n            Intent data = new Intent();\n\n            if (requestCode == FileDisplayActivity.REQUEST_CODE__UPLOAD_FROM_CAMERA) {\n                data.putExtra(EXTRA_CHOSEN_FILES, new String[]{filesToUpload[0]});\n                setResult(RESULT_OK_AND_DELETE, data);\n\n                preferences.setUploaderBehaviour(FileUploadWorker.LOCAL_BEHAVIOUR_DELETE);\n            } else {\n                data.putExtra(EXTRA_CHOSEN_FILES, mFileListFragment.getCheckedFilePaths());\n                data.putExtra(LOCAL_BASE_PATH, mCurrentDir.getAbsolutePath());\n\n                // set result code\n                switch (binding.uploadFilesSpinnerBehaviour.getSelectedItemPosition()) {\n                    case 0: // move to nextcloud folder\n                        setResult(RESULT_OK_AND_MOVE, data);\n                        break;\n\n                    case 1: // only upload\n                        setResult(RESULT_OK_AND_DO_NOTHING, data);\n                        break;\n\n                    case 2: // upload and delete from source\n                        setResult(RESULT_OK_AND_DELETE, data);\n                        break;\n\n                    default:\n                        // do nothing\n                        break;\n                }\n\n                // store behaviour\n                preferences.setUploaderBehaviour(binding.uploadFilesSpinnerBehaviour.getSelectedItemPosition());\n            }\n\n            finish();\n        } else {\n            // show a dialog to query the user if wants to move the selected files\n            // to the ownCloud folder instead of copying\n            String[] args = { getString(R.string.app_name) };\n            ConfirmationDialogFragment dialog = ConfirmationDialogFragment.newInstance(\n                R.string.upload_query_move_foreign_files, args, 0, R.string.common_yes,  R.string.common_no, -1);\n            dialog.setOnConfirmationListener(this);\n            dialog.show(getSupportFragmentManager(), QUERY_TO_MOVE_DIALOG_TAG);\n        }\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onCheckAvailableSpaceFinish(hasEnoughSpaceAvailable: Bool, filesToUpload: String...) {\n    if let currentDialog = mCurrentDialog, isDialogFragmentReady(self, currentDialog) {\n        currentDialog.dismiss()\n        mCurrentDialog = nil\n    }\n\n    if hasEnoughSpaceAvailable {\n        let data = Intent()\n\n        if requestCode == FileDisplayActivity.REQUEST_CODE__UPLOAD_FROM_CAMERA {\n            data.putExtra(EXTRA_CHOSEN_FILES, [filesToUpload[0]])\n            setResult(RESULT_OK_AND_DELETE, data)\n\n            preferences.setUploaderBehaviour(FileUploadWorker.LOCAL_BEHAVIOUR_DELETE)\n        } else {\n            data.putExtra(EXTRA_CHOSEN_FILES, mFileListFragment.getCheckedFilePaths())\n            data.putExtra(LOCAL_BASE_PATH, mCurrentDir.absolutePath)\n\n            switch binding.uploadFilesSpinnerBehaviour.selectedItemPosition {\n            case 0:\n                setResult(RESULT_OK_AND_MOVE, data)\n            case 1:\n                setResult(RESULT_OK_AND_DO_NOTHING, data)\n            case 2:\n                setResult(RESULT_OK_AND_DELETE, data)\n            default:\n                break\n            }\n\n            preferences.setUploaderBehaviour(binding.uploadFilesSpinnerBehaviour.selectedItemPosition)\n        }\n\n        finish()\n    } else {\n        let args = [getString(R.string.app_name)]\n        let dialog = ConfirmationDialogFragment.newInstance(\n            R.string.upload_query_move_foreign_files, args, 0, R.string.common_yes, R.string.common_no, -1)\n        dialog.setOnConfirmationListener(self)\n        dialog.show(getSupportFragmentManager(), QUERY_TO_MOVE_DIALOG_TAG)\n    }\n}\n```"
    },
    {
        "method_name": "chosenPath",
        "method_code": "verride\n    public void chosenPath(String path) {\n        if (getListOfFilesFragment() instanceof LocalFileListFragment) {\n            File file = new File(path);\n            ((LocalFileListFragment) getListOfFilesFragment()).listDirectory(file);\n            onDirectoryClick(file);\n\n            mCurrentDir = new File(path);\n            mDirectories.clear();\n\n            fillDirectoryDropdown();\n        }\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled chosenPath from UploadFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: chosenPath\n\n        Method Code: verride\n    public void chosenPath(String path) {\n        if (getListOfFilesFragment() instanceof LocalFileListFragment) {\n            File file = new File(path);\n            ((LocalFileListFragment) getListOfFilesFragment()).listDirectory(file);\n            onDirectoryClick(file);\n\n            mCurrentDir = new File(path);\n            mDirectories.clear();\n\n            fillDirectoryDropdown();\n        }\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc chosenPath(_ path: String) {\n    if let localFileListFragment = getListOfFilesFragment() as? LocalFileListFragment {\n        let file = File(path: path)\n        localFileListFragment.listDirectory(file)\n        onDirectoryClick(file)\n\n        mCurrentDir = File(path: path)\n        mDirectories.removeAll()\n\n        fillDirectoryDropdown()\n    }\n}\n```"
    },
    {
        "method_name": "onDirectoryClick",
        "method_code": "verride\n    public void onDirectoryClick(File directory) {\n        if (!mLocalFolderPickerMode) {\n            // invalidate checked state when navigating directories\n            MenuItem selectAll = mOptionsMenu.findItem(R.id.action_select_all);\n            setSelectAllMenuItem(selectAll, false);\n        }\n\n        pushDirname(directory);\n        ActionBar actionBar = getSupportActionBar();\n        actionBar.setDisplayHomeAsUpEnabled(true);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onDirectoryClick from UploadFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onDirectoryClick\n\n        Method Code: verride\n    public void onDirectoryClick(File directory) {\n        if (!mLocalFolderPickerMode) {\n            // invalidate checked state when navigating directories\n            MenuItem selectAll = mOptionsMenu.findItem(R.id.action_select_all);\n            setSelectAllMenuItem(selectAll, false);\n        }\n\n        pushDirname(directory);\n        ActionBar actionBar = getSupportActionBar();\n        actionBar.setDisplayHomeAsUpEnabled(true);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onDirectoryClick(directory: File) {\n    if !mLocalFolderPickerMode {\n        // invalidate checked state when navigating directories\n        if let selectAll = mOptionsMenu.findItem(withId: R.id.action_select_all) {\n            setSelectAllMenuItem(selectAll, false)\n        }\n    }\n\n    pushDirname(directory)\n    if let actionBar = getSupportActionBar() {\n        actionBar.setDisplayHomeAsUpEnabled(true)\n    }\n}\n```"
    },
    {
        "method_name": "checkWritableFolder",
        "method_code": "ivate void checkWritableFolder(File folder) {\n        boolean canWriteIntoFolder = folder.canWrite();\n        binding.uploadFilesSpinnerBehaviour.setEnabled(canWriteIntoFolder);\n\n        TextView textView = findViewById(R.id.upload_files_upload_files_behaviour_text);\n\n        if (canWriteIntoFolder) {\n            textView.setText(getString(R.string.uploader_upload_files_behaviour));\n            int localBehaviour = preferences.getUploaderBehaviour();\n            binding.uploadFilesSpinnerBehaviour.setSelection(localBehaviour);\n        } else {\n            binding.uploadFilesSpinnerBehaviour.setSelection(1);\n            textView.setText(new StringBuilder().append(getString(R.string.uploader_upload_files_behaviour))\n                                 .append(' ')\n                                 .append(getString(R.string.uploader_upload_files_behaviour_not_writable))\n                                 .toString());\n        }\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled checkWritableFolder from UploadFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: checkWritableFolder\n\n        Method Code: ivate void checkWritableFolder(File folder) {\n        boolean canWriteIntoFolder = folder.canWrite();\n        binding.uploadFilesSpinnerBehaviour.setEnabled(canWriteIntoFolder);\n\n        TextView textView = findViewById(R.id.upload_files_upload_files_behaviour_text);\n\n        if (canWriteIntoFolder) {\n            textView.setText(getString(R.string.uploader_upload_files_behaviour));\n            int localBehaviour = preferences.getUploaderBehaviour();\n            binding.uploadFilesSpinnerBehaviour.setSelection(localBehaviour);\n        } else {\n            binding.uploadFilesSpinnerBehaviour.setSelection(1);\n            textView.setText(new StringBuilder().append(getString(R.string.uploader_upload_files_behaviour))\n                                 .append(' ')\n                                 .append(getString(R.string.uploader_upload_files_behaviour_not_writable))\n                                 .toString());\n        }\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc checkWritableFolder(folder: URL) {\n    let canWriteIntoFolder = FileManager.default.isWritableFile(atPath: folder.path)\n    binding.uploadFilesSpinnerBehaviour.isEnabled = canWriteIntoFolder\n\n    let textView = self.view.viewWithTag(R.id.upload_files_upload_files_behaviour_text) as! UILabel\n\n    if canWriteIntoFolder {\n        textView.text = NSLocalizedString(\"uploader_upload_files_behaviour\", comment: \"\")\n        let localBehaviour = preferences.getUploaderBehaviour()\n        binding.uploadFilesSpinnerBehaviour.selectedSegmentIndex = localBehaviour\n    } else {\n        binding.uploadFilesSpinnerBehaviour.selectedSegmentIndex = 1\n        textView.text = \"\\(NSLocalizedString(\"uploader_upload_files_behaviour\", comment: \"\")) \\(NSLocalizedString(\"uploader_upload_files_behaviour_not_writable\", comment: \"\"))\"\n    }\n}\n```"
    },
    {
        "method_name": "onFileClick",
        "method_code": "verride\n    public void onFileClick(File file) {\n        updateUploadButtonActive();\n\n        boolean selectAll = mFileListFragment.getCheckedFilesCount() == mFileListFragment.getFilesCount();\n        setSelectAllMenuItem(mOptionsMenu.findItem(R.id.action_select_all), selectAll);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onFileClick from UploadFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onFileClick\n\n        Method Code: verride\n    public void onFileClick(File file) {\n        updateUploadButtonActive();\n\n        boolean selectAll = mFileListFragment.getCheckedFilesCount() == mFileListFragment.getFilesCount();\n        setSelectAllMenuItem(mOptionsMenu.findItem(R.id.action_select_all), selectAll);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onFileClick(file: File) {\n    updateUploadButtonActive()\n\n    let selectAll = mFileListFragment.getCheckedFilesCount() == mFileListFragment.getFilesCount()\n    setSelectAllMenuItem(mOptionsMenu.findItem(withId: R.id.action_select_all), selectAll)\n}\n```"
    },
    {
        "method_name": "getInitialDirectory",
        "method_code": "verride\n    public File getInitialDirectory() {\n        return mCurrentDir;\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getInitialDirectory from UploadFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: getInitialDirectory\n\n        Method Code: verride\n    public File getInitialDirectory() {\n        return mCurrentDir;\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getInitialDirectory() -> URL {\n    return mCurrentDir\n}\n```"
    },
    {
        "method_name": "isFolderPickerMode",
        "method_code": "verride\n    public boolean isFolderPickerMode() {\n        return mLocalFolderPickerMode;\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isFolderPickerMode from UploadFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: isFolderPickerMode\n\n        Method Code: verride\n    public boolean isFolderPickerMode() {\n        return mLocalFolderPickerMode;\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc isFolderPickerMode() -> Bool {\n    return mLocalFolderPickerMode\n}\n```"
    },
    {
        "method_name": "isWithinEncryptedFolder",
        "method_code": "verride\n    public boolean isWithinEncryptedFolder() {\n        return isWithinEncryptedFolder;\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isWithinEncryptedFolder from UploadFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: isWithinEncryptedFolder\n\n        Method Code: verride\n    public boolean isWithinEncryptedFolder() {\n        return isWithinEncryptedFolder;\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc isWithinEncryptedFolder() -> Bool {\n    return isWithinEncryptedFolder\n}\n```"
    },
    {
        "method_name": "onClick",
        "method_code": "verride\n    public void onClick(View v) {\n        if (v.getId() == R.id.upload_files_btn_cancel) {\n            setResult(RESULT_CANCELED);\n            finish();\n\n        } else if (v.getId() == R.id.upload_files_btn_upload) {\n            if (PermissionUtil.checkExternalStoragePermission(this)) {\n                if (mCurrentDir != null) {\n                    preferences.setUploadFromLocalLastPath(mCurrentDir.getAbsolutePath());\n                }\n                if (mLocalFolderPickerMode) {\n                    Intent data = new Intent();\n                    if (mCurrentDir != null) {\n                        data.putExtra(EXTRA_CHOSEN_FILES, mCurrentDir.getAbsolutePath());\n                    }\n                    setResult(RESULT_OK, data);\n\n                    finish();\n                } else {\n                    String[] selectedFilePaths = mFileListFragment.getCheckedFilePaths();\n                    boolean isPositionZero = (binding.uploadFilesSpinnerBehaviour.getSelectedItemPosition() == 0);\n                    new CheckAvailableSpaceTask(this, selectedFilePaths).execute(isPositionZero);\n                }\n            } else {\n                requestPermissions();\n            }\n        }\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onClick from UploadFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onClick\n\n        Method Code: verride\n    public void onClick(View v) {\n        if (v.getId() == R.id.upload_files_btn_cancel) {\n            setResult(RESULT_CANCELED);\n            finish();\n\n        } else if (v.getId() == R.id.upload_files_btn_upload) {\n            if (PermissionUtil.checkExternalStoragePermission(this)) {\n                if (mCurrentDir != null) {\n                    preferences.setUploadFromLocalLastPath(mCurrentDir.getAbsolutePath());\n                }\n                if (mLocalFolderPickerMode) {\n                    Intent data = new Intent();\n                    if (mCurrentDir != null) {\n                        data.putExtra(EXTRA_CHOSEN_FILES, mCurrentDir.getAbsolutePath());\n                    }\n                    setResult(RESULT_OK, data);\n\n                    finish();\n                } else {\n                    String[] selectedFilePaths = mFileListFragment.getCheckedFilePaths();\n                    boolean isPositionZero = (binding.uploadFilesSpinnerBehaviour.getSelectedItemPosition() == 0);\n                    new CheckAvailableSpaceTask(this, selectedFilePaths).execute(isPositionZero);\n                }\n            } else {\n                requestPermissions();\n            }\n        }\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onClick(_ sender: UIView) {\n    if sender.tag == R.id.upload_files_btn_cancel {\n        setResult(RESULT_CANCELED)\n        finish()\n    } else if sender.tag == R.id.upload_files_btn_upload {\n        if PermissionUtil.checkExternalStoragePermission(self) {\n            if let currentDir = mCurrentDir {\n                preferences.setUploadFromLocalLastPath(currentDir.absolutePath)\n            }\n            if mLocalFolderPickerMode {\n                let data = Intent()\n                if let currentDir = mCurrentDir {\n                    data.putExtra(EXTRA_CHOSEN_FILES, currentDir.absolutePath)\n                }\n                setResult(RESULT_OK, data)\n                finish()\n            } else {\n                let selectedFilePaths = mFileListFragment.getCheckedFilePaths()\n                let isPositionZero = (binding.uploadFilesSpinnerBehaviour.selectedItemPosition == 0)\n                CheckAvailableSpaceTask(self, selectedFilePaths).execute(isPositionZero)\n            }\n        } else {\n            requestPermissions()\n        }\n    }\n}\n```"
    },
    {
        "method_name": "onConfirmation",
        "method_code": "verride\n    public void onConfirmation(String callerTag) {\n        Log_OC.d(TAG, \"Positive button in dialog was clicked; dialog tag is \" + callerTag);\n        if (mFileListFragment.getCheckedFilePaths().length > FileUploadHelper.MAX_FILE_COUNT) {\n            DisplayUtils.showSnackMessage(this, R.string.max_file_count_warning_message);\n            return;\n        }\n\n        if (QUERY_TO_MOVE_DIALOG_TAG.equals(callerTag)) {\n            // return the list of selected files to the caller activity (success),\n            // signaling that they should be moved to the ownCloud folder, instead of copied\n            Intent data = new Intent();\n            data.putExtra(EXTRA_CHOSEN_FILES, mFileListFragment.getCheckedFilePaths());\n            data.putExtra(LOCAL_BASE_PATH, mCurrentDir.getAbsolutePath());\n            setResult(RESULT_OK_AND_MOVE, data);\n            finish();\n        }\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onConfirmation from UploadFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onConfirmation\n\n        Method Code: verride\n    public void onConfirmation(String callerTag) {\n        Log_OC.d(TAG, \"Positive button in dialog was clicked; dialog tag is \" + callerTag);\n        if (mFileListFragment.getCheckedFilePaths().length > FileUploadHelper.MAX_FILE_COUNT) {\n            DisplayUtils.showSnackMessage(this, R.string.max_file_count_warning_message);\n            return;\n        }\n\n        if (QUERY_TO_MOVE_DIALOG_TAG.equals(callerTag)) {\n            // return the list of selected files to the caller activity (success),\n            // signaling that they should be moved to the ownCloud folder, instead of copied\n            Intent data = new Intent();\n            data.putExtra(EXTRA_CHOSEN_FILES, mFileListFragment.getCheckedFilePaths());\n            data.putExtra(LOCAL_BASE_PATH, mCurrentDir.getAbsolutePath());\n            setResult(RESULT_OK_AND_MOVE, data);\n            finish();\n        }\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onConfirmation(callerTag: String) {\n    Log_OC.d(TAG, \"Positive button in dialog was clicked; dialog tag is \\(callerTag)\")\n    if mFileListFragment.getCheckedFilePaths().count > FileUploadHelper.MAX_FILE_COUNT {\n        DisplayUtils.showSnackMessage(self, R.string.max_file_count_warning_message)\n        return\n    }\n\n    if QUERY_TO_MOVE_DIALOG_TAG == callerTag {\n        // return the list of selected files to the caller activity (success),\n        // signaling that they should be moved to the ownCloud folder, instead of copied\n        let data = Intent()\n        data.putExtra(EXTRA_CHOSEN_FILES, mFileListFragment.getCheckedFilePaths())\n        data.putExtra(LOCAL_BASE_PATH, mCurrentDir.absolutePath)\n        setResult(RESULT_OK_AND_MOVE, data)\n        finish()\n    }\n}\n```"
    },
    {
        "method_name": "onNeutral",
        "method_code": "verride\n    public void onNeutral(String callerTag) {\n        Log_OC.d(TAG, \"Phantom neutral button in dialog was clicked; dialog tag is \" + callerTag);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onNeutral from UploadFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onNeutral\n\n        Method Code: verride\n    public void onNeutral(String callerTag) {\n        Log_OC.d(TAG, \"Phantom neutral button in dialog was clicked; dialog tag is \" + callerTag);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onNeutral(callerTag: String) {\n    print(\"Phantom neutral button in dialog was clicked; dialog tag is \\(callerTag)\")\n}\n```"
    },
    {
        "method_name": "onCancel",
        "method_code": "verride\n    public void onCancel(String callerTag) {\n        /// nothing to do; don't finish, let the user change the selection\n        Log_OC.d(TAG, \"Negative button in dialog was clicked; dialog tag is \" + callerTag);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onCancel from UploadFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onCancel\n\n        Method Code: verride\n    public void onCancel(String callerTag) {\n        /// nothing to do; don't finish, let the user change the selection\n        Log_OC.d(TAG, \"Negative button in dialog was clicked; dialog tag is \" + callerTag);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onCancel(callerTag: String) {\n    // nothing to do; don't finish, let the user change the selection\n    Log_OC.d(TAG, \"Negative button in dialog was clicked; dialog tag is \\(callerTag)\")\n}\n```"
    },
    {
        "method_name": "onStart",
        "method_code": "verride\n    protected void onStart() {\n        super.onStart();\n        final Account account = getAccount();\n        if (mAccountOnCreation != null && mAccountOnCreation.equals(account)) {\n            requestPermissions();\n        } else {\n            setResult(RESULT_CANCELED);\n            finish();\n        }\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onStart from UploadFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onStart\n\n        Method Code: verride\n    protected void onStart() {\n        super.onStart();\n        final Account account = getAccount();\n        if (mAccountOnCreation != null && mAccountOnCreation.equals(account)) {\n            requestPermissions();\n        } else {\n            setResult(RESULT_CANCELED);\n            finish();\n        }\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n    let account = getAccount()\n    if let accountOnCreation = mAccountOnCreation, accountOnCreation == account {\n        requestPermissions()\n    } else {\n        setResult(RESULT_CANCELED)\n        finish()\n    }\n}\n```"
    },
    {
        "method_name": "isGridView",
        "method_code": "ivate boolean isGridView() {\n        return getListOfFilesFragment().isGridEnabled();\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isGridView from UploadFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: isGridView\n\n        Method Code: ivate boolean isGridView() {\n        return getListOfFilesFragment().isGridEnabled();\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func isGridView() -> Bool {\n    return getListOfFilesFragment().isGridEnabled()\n}\n```"
    },
    {
        "method_name": "getListOfFilesFragment",
        "method_code": "ivate ExtendedListFragment getListOfFilesFragment() {\n        if (mFileListFragment == null) {\n            Log_OC.e(TAG, \"Access to unexisting list of files fragment!!\");\n        }\n\n        return mFileListFragment;\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getListOfFilesFragment from UploadFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: getListOfFilesFragment\n\n        Method Code: ivate ExtendedListFragment getListOfFilesFragment() {\n        if (mFileListFragment == null) {\n            Log_OC.e(TAG, \"Access to unexisting list of files fragment!!\");\n        }\n\n        return mFileListFragment;\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getListOfFilesFragment() -> ExtendedListFragment? {\n    if mFileListFragment == nil {\n        Log_OC.e(TAG, \"Access to unexisting list of files fragment!!\")\n    }\n    \n    return mFileListFragment\n}\n```"
    },
    {
        "method_name": "onStop",
        "method_code": "verride\n    protected void onStop() {\n        if (dialog != null) {\n            dialog.dismissAllowingStateLoss();\n        }\n\n        super.onStop();\n    }\n}",
        "prompt": "\n        Please translate the following Java (Android) method titled onStop from UploadFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onStop\n\n        Method Code: verride\n    protected void onStop() {\n        if (dialog != null) {\n            dialog.dismissAllowingStateLoss();\n        }\n\n        super.onStop();\n    }\n}\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n    if dialog != nil {\n        dialog.dismiss(animated: false, completion: nil)\n    }\n}\n```"
    }
]