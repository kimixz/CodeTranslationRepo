[
    {
        "method_name": "getInstance",
        "method_code": "public static DataStorageProvider getInstance() {\n        return sInstance;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getInstance from DataStorageProvider.java into Swift.\n\n        Input:\n\n        Method Name: getInstance\n\n        Method Code: public static DataStorageProvider getInstance() {\n        return sInstance;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func getInstance() -> DataStorageProvider {\n    return sInstance\n}\n```"
    },
    {
        "method_name": "getAvailableStoragePoints",
        "method_code": "public StoragePoint[] getAvailableStoragePoints() {\n        if (mCachedStoragePoints.size() != 0) {\n            return mCachedStoragePoints.toArray(new StoragePoint[0]);\n        }\n\n        List<String> paths = new ArrayList<>();\n        StoragePoint storagePoint;\n        for (File f : MainApp.getAppContext().getExternalMediaDirs()) {\n            if (f != null && !paths.contains(f.getAbsolutePath())) {\n                storagePoint = new StoragePoint();\n                storagePoint.setPath(f.getAbsolutePath());\n                storagePoint.setDescription(f.getAbsolutePath());\n                storagePoint.setPrivacyType(StoragePoint.PrivacyType.PUBLIC);\n                if (f.getAbsolutePath().startsWith(\"/storage/emulated/0\")) {\n                    storagePoint.setStorageType(StoragePoint.StorageType.INTERNAL);\n                    mCachedStoragePoints.add(storagePoint);\n                } else {\n                    storagePoint.setStorageType(StoragePoint.StorageType.EXTERNAL);\n                    if (isExternalStorageWritable()) {\n                        mCachedStoragePoints.add(storagePoint);\n                    }\n                }\n            }\n        }\n\n        // Now we go add private ones\n        // Add internal storage directory\n        storagePoint = new StoragePoint();\n        storagePoint.setDescription(MainApp.getAppContext().getFilesDir().getAbsolutePath());\n        storagePoint.setPath(MainApp.getAppContext().getFilesDir().getAbsolutePath());\n        storagePoint.setPrivacyType(StoragePoint.PrivacyType.PRIVATE);\n        storagePoint.setStorageType(StoragePoint.StorageType.INTERNAL);\n        if (!paths.contains(MainApp.getAppContext().getFilesDir().getAbsolutePath())) {\n            mCachedStoragePoints.add(storagePoint);\n        }\n\n        // Add external storage directory if available.\n        if (isExternalStorageWritable()) {\n            File externalFilesDir = MainApp.getAppContext().getExternalFilesDir(null);\n\n            if (externalFilesDir != null) {\n                String externalFilesDirPath = externalFilesDir.getAbsolutePath();\n\n                storagePoint = new StoragePoint();\n                storagePoint.setPath(externalFilesDirPath);\n                storagePoint.setDescription(externalFilesDirPath);\n                storagePoint.setPrivacyType(StoragePoint.PrivacyType.PRIVATE);\n                storagePoint.setStorageType(StoragePoint.StorageType.EXTERNAL);\n                if (!paths.contains(externalFilesDirPath)) {\n                    mCachedStoragePoints.add(storagePoint);\n                }\n            }\n        }\n\n        return mCachedStoragePoints.toArray(new StoragePoint[0]);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getAvailableStoragePoints from DataStorageProvider.java into Swift.\n\n        Input:\n\n        Method Name: getAvailableStoragePoints\n\n        Method Code: public StoragePoint[] getAvailableStoragePoints() {\n        if (mCachedStoragePoints.size() != 0) {\n            return mCachedStoragePoints.toArray(new StoragePoint[0]);\n        }\n\n        List<String> paths = new ArrayList<>();\n        StoragePoint storagePoint;\n        for (File f : MainApp.getAppContext().getExternalMediaDirs()) {\n            if (f != null && !paths.contains(f.getAbsolutePath())) {\n                storagePoint = new StoragePoint();\n                storagePoint.setPath(f.getAbsolutePath());\n                storagePoint.setDescription(f.getAbsolutePath());\n                storagePoint.setPrivacyType(StoragePoint.PrivacyType.PUBLIC);\n                if (f.getAbsolutePath().startsWith(\"/storage/emulated/0\")) {\n                    storagePoint.setStorageType(StoragePoint.StorageType.INTERNAL);\n                    mCachedStoragePoints.add(storagePoint);\n                } else {\n                    storagePoint.setStorageType(StoragePoint.StorageType.EXTERNAL);\n                    if (isExternalStorageWritable()) {\n                        mCachedStoragePoints.add(storagePoint);\n                    }\n                }\n            }\n        }\n\n        // Now we go add private ones\n        // Add internal storage directory\n        storagePoint = new StoragePoint();\n        storagePoint.setDescription(MainApp.getAppContext().getFilesDir().getAbsolutePath());\n        storagePoint.setPath(MainApp.getAppContext().getFilesDir().getAbsolutePath());\n        storagePoint.setPrivacyType(StoragePoint.PrivacyType.PRIVATE);\n        storagePoint.setStorageType(StoragePoint.StorageType.INTERNAL);\n        if (!paths.contains(MainApp.getAppContext().getFilesDir().getAbsolutePath())) {\n            mCachedStoragePoints.add(storagePoint);\n        }\n\n        // Add external storage directory if available.\n        if (isExternalStorageWritable()) {\n            File externalFilesDir = MainApp.getAppContext().getExternalFilesDir(null);\n\n            if (externalFilesDir != null) {\n                String externalFilesDirPath = externalFilesDir.getAbsolutePath();\n\n                storagePoint = new StoragePoint();\n                storagePoint.setPath(externalFilesDirPath);\n                storagePoint.setDescription(externalFilesDirPath);\n                storagePoint.setPrivacyType(StoragePoint.PrivacyType.PRIVATE);\n                storagePoint.setStorageType(StoragePoint.StorageType.EXTERNAL);\n                if (!paths.contains(externalFilesDirPath)) {\n                    mCachedStoragePoints.add(storagePoint);\n                }\n            }\n        }\n\n        return mCachedStoragePoints.toArray(new StoragePoint[0]);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getAvailableStoragePoints() -> [StoragePoint] {\n    if !mCachedStoragePoints.isEmpty {\n        return mCachedStoragePoints\n    }\n\n    var paths: [String] = []\n    var storagePoint: StoragePoint\n    for f in MainApp.getAppContext().externalMediaDirs {\n        if let f = f, !paths.contains(f.path) {\n            storagePoint = StoragePoint()\n            storagePoint.setPath(f.path)\n            storagePoint.setDescription(f.path)\n            storagePoint.setPrivacyType(.public)\n            if f.path.starts(with: \"/storage/emulated/0\") {\n                storagePoint.setStorageType(.internal)\n                mCachedStoragePoints.append(storagePoint)\n            } else {\n                storagePoint.setStorageType(.external)\n                if isExternalStorageWritable() {\n                    mCachedStoragePoints.append(storagePoint)\n                }\n            }\n        }\n    }\n\n    // Now we go add private ones\n    // Add internal storage directory\n    storagePoint = StoragePoint()\n    storagePoint.setDescription(MainApp.getAppContext().filesDir.path)\n    storagePoint.setPath(MainApp.getAppContext().filesDir.path)\n    storagePoint.setPrivacyType(.private)\n    storagePoint.setStorageType(.internal)\n    if !paths.contains(MainApp.getAppContext().filesDir.path) {\n        mCachedStoragePoints.append(storagePoint)\n    }\n\n    // Add external storage directory if available.\n    if isExternalStorageWritable() {\n        if let externalFilesDir = MainApp.getAppContext().externalFilesDir {\n            let externalFilesDirPath = externalFilesDir.path\n\n            storagePoint = StoragePoint()\n            storagePoint.setPath(externalFilesDirPath)\n            storagePoint.setDescription(externalFilesDirPath)\n            storagePoint.setPrivacyType(.private)\n            storagePoint.setStorageType(.external)\n            if !paths.contains(externalFilesDirPath) {\n                mCachedStoragePoints.append(storagePoint)\n            }\n        }\n    }\n\n    return mCachedStoragePoints\n}\n```"
    },
    {
        "method_name": "getStorageDescriptionByPath",
        "method_code": "public String getStorageDescriptionByPath(String path) {\n        for (StoragePoint s : getAvailableStoragePoints()) {\n            if (s.getPath().equals(path)) {\n                return s.getDescription();\n            }\n        }\n        // Fallback to just display complete path\n        return path;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getStorageDescriptionByPath from DataStorageProvider.java into Swift.\n\n        Input:\n\n        Method Name: getStorageDescriptionByPath\n\n        Method Code: public String getStorageDescriptionByPath(String path) {\n        for (StoragePoint s : getAvailableStoragePoints()) {\n            if (s.getPath().equals(path)) {\n                return s.getDescription();\n            }\n        }\n        // Fallback to just display complete path\n        return path;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getStorageDescriptionByPath(_ path: String) -> String {\n    for storagePoint in getAvailableStoragePoints() {\n        if storagePoint.getPath() == path {\n            return storagePoint.getDescription()\n        }\n    }\n    // Fallback to just display complete path\n    return path\n}\n```"
    },
    {
        "method_name": "isExternalStorageWritable",
        "method_code": "public boolean isExternalStorageWritable() {\n        String state = Environment.getExternalStorageState();\n        return Environment.MEDIA_MOUNTED.equals(state);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled isExternalStorageWritable from DataStorageProvider.java into Swift.\n\n        Input:\n\n        Method Name: isExternalStorageWritable\n\n        Method Code: public boolean isExternalStorageWritable() {\n        String state = Environment.getExternalStorageState();\n        return Environment.MEDIA_MOUNTED.equals(state);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc isExternalStorageWritable() -> Bool {\n    let state = FileManager.default.ubiquityIdentityToken\n    return state != nil\n}\n```"
    }
]