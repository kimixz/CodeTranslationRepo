[
    {
        "method_name": "setupHideFileDownload",
        "method_code": "public static void setupHideFileDownload(MenuItem menuItem,\n                                             boolean hideFileDownload,\n                                             boolean isFileDrop) {\n        if (isFileDrop) {\n            menuItem.setVisible(false);\n        } else {\n            menuItem.setVisible(true);\n            menuItem.setChecked(hideFileDownload);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setupHideFileDownload from SharingMenuHelper.java into Swift.\n\n        Input:\n\n        Method Name: setupHideFileDownload\n\n        Method Code: public static void setupHideFileDownload(MenuItem menuItem,\n                                             boolean hideFileDownload,\n                                             boolean isFileDrop) {\n        if (isFileDrop) {\n            menuItem.setVisible(false);\n        } else {\n            menuItem.setVisible(true);\n            menuItem.setChecked(hideFileDownload);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func setup(menuItem: MenuItem, hideFileDownload:, isFileDrop: Bool wholly) {\n    if isFileDrop {\n        menuItem.isVisible = false\n    } else, {\n        menuItem.isVisible = true\n        menuItem.isChecked = hideFileDownload\n    }\n}\n```"
    },
    {
        "method_name": "setupPasswordMenuItem",
        "method_code": "public static void setupPasswordMenuItem(MenuItem password, boolean isPasswordProtected) {\n        if (isPasswordProtected) {\n            password.setTitle(R.string.share_password_title);\n        } else {\n            password.setTitle(R.string.share_no_password_title);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setupPasswordMenuItem from SharingMenuHelper.java into Swift.\n\n        Input:\n\n        Method Name: setupPasswordMenuItem\n\n        Method Code: public static void setupPasswordMenuItem(MenuItem password, boolean isPasswordProtected) {\n        if (isPasswordProtected) {\n            password.setTitle(R.string.share_password_title);\n        } else {\n            password.setTitle(R.string.share_no_password_title);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func setupPasswordMenuItem(password: MenuItem, isPasswordProtected: Bool) {\n    if isPasswordProtected {\n        password.title = NSLocalizedString(\"share_password_title\", comment: \"\")\n    } else {\n        password.title = NSLocalizedString(\"share_no_password_title\", comment: \"\")\n    }\n}\n```"
    },
    {
        "method_name": "setupExpirationDateMenuItem",
        "method_code": "public static void setupExpirationDateMenuItem(MenuItem expirationDate, long expirationDateValue, Resources res) {\n        if (expirationDateValue > 0) {\n            expirationDate.setTitle(res.getString(\n                R.string.share_expiration_date_label,\n                SimpleDateFormat.getDateInstance().format(new Date(expirationDateValue))\n                                                 ));\n        } else {\n            expirationDate.setTitle(R.string.share_no_expiration_date_label);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setupExpirationDateMenuItem from SharingMenuHelper.java into Swift.\n\n        Input:\n\n        Method Name: setupExpirationDateMenuItem\n\n        Method Code: public static void setupExpirationDateMenuItem(MenuItem expirationDate, long expirationDateValue, Resources res) {\n        if (expirationDateValue > 0) {\n            expirationDate.setTitle(res.getString(\n                R.string.share_expiration_date_label,\n                SimpleDateFormat.getDateInstance().format(new Date(expirationDateValue))\n                                                 ));\n        } else {\n            expirationDate.setTitle(R.string.share_no_expiration_date_label);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport UIKit\n\npublic static func setupExpirationDateMenuItem(expirationDate: UIMenuItem, expirationDateValue: Int64, res: Bundle) {\n    if expirationDateValue > 0 {\n        let date = Date(timeIntervalSince1970: TimeInterval(expirationDateValue) / 1000)\n        let dateFormatter = DateFormatter()\n        dateFormatter.dateStyle = .medium\n        let formattedDate = dateFormatter.string(from: date)\n        expirationDate.title = String(format: NSLocalizedString(\"share_expiration_date_label\", bundle: res, comment: \"\"), formattedDate)\n    } else {\n        expirationDate.title = NSLocalizedString(\"share_no_expiration_date_label\", bundle: res, comment: \"\")\n    }\n}\n```"
    },
    {
        "method_name": "isUploadAndEditingAllowed",
        "method_code": "public static boolean isUploadAndEditingAllowed(OCShare share) {\n        if (share.getPermissions() == NO_PERMISSION) {\n            return false;\n        }\n\n        return (share.getPermissions() & (share.isFolder() ? MAXIMUM_PERMISSIONS_FOR_FOLDER :\n            MAXIMUM_PERMISSIONS_FOR_FILE)) == (share.isFolder() ? MAXIMUM_PERMISSIONS_FOR_FOLDER :\n            MAXIMUM_PERMISSIONS_FOR_FILE);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled isUploadAndEditingAllowed from SharingMenuHelper.java into Swift.\n\n        Input:\n\n        Method Name: isUploadAndEditingAllowed\n\n        Method Code: public static boolean isUploadAndEditingAllowed(OCShare share) {\n        if (share.getPermissions() == NO_PERMISSION) {\n            return false;\n        }\n\n        return (share.getPermissions() & (share.isFolder() ? MAXIMUM_PERMISSIONS_FOR_FOLDER :\n            MAXIMUM_PERMISSIONS_FOR_FILE)) == (share.isFolder() ? MAXIMUM_PERMISSIONS_FOR_FOLDER :\n            MAXIMUM_PERMISSIONS_FOR_FILE);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func isUploadAndEditingAllowed(share: OCShare) -> Bool {\n    if share.getPermissions() == NO_PERMISSION {\n        return false\n    }\n    \n    return (share.getPermissions() & (share.isFolder() ? MAXIMUM_PERMISSIONS_FOR_FOLDER : MAXIMUM_PERMISSIONS_FOR_FILE)) == (share.isFolder() ? MAXIMUM_PERMISSIONS_FOR_FOLDER : MAXIMUM_PERMISSIONS_FOR_FILE)\n}\n```"
    },
    {
        "method_name": "isReadOnly",
        "method_code": "public static boolean isReadOnly(OCShare share) {\n        if (share.getPermissions() == NO_PERMISSION) {\n            return false;\n        }\n\n        return (share.getPermissions() & ~SHARE_PERMISSION_FLAG) == READ_PERMISSION_FLAG;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled isReadOnly from SharingMenuHelper.java into Swift.\n\n        Input:\n\n        Method Name: isReadOnly\n\n        Method Code: public static boolean isReadOnly(OCShare share) {\n        if (share.getPermissions() == NO_PERMISSION) {\n            return false;\n        }\n\n        return (share.getPermissions() & ~SHARE_PERMISSION_FLAG) == READ_PERMISSION_FLAG;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func isReadOnly(share: OCShare) -> Bool {\n    if share.getPermissions() == NO_PERMISSION {\n        return false\n    }\n    return (share.getPermissions() & ~SHARE_PERMISSION_FLAG) == READ_PERMISSION_FLAG\n}\n```"
    },
    {
        "method_name": "isFileDrop",
        "method_code": "public static boolean isFileDrop(OCShare share) {\n        if (share.getPermissions() == NO_PERMISSION) {\n            return false;\n        }\n\n        return (share.getPermissions() & ~SHARE_PERMISSION_FLAG) == CREATE_PERMISSION_FLAG;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled isFileDrop from SharingMenuHelper.java into Swift.\n\n        Input:\n\n        Method Name: isFileDrop\n\n        Method Code: public static boolean isFileDrop(OCShare share) {\n        if (share.getPermissions() == NO_PERMISSION) {\n            return false;\n        }\n\n        return (share.getPermissions() & ~SHARE_PERMISSION_FLAG) == CREATE_PERMISSION_FLAG;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func isFileDrop(share: OCShare) -> Bool {\n    if share.getPermissions() == NO_PERMISSION {\n        return false\n    }\n    \n    return (share.getPermissions() & ~SHARE_PERMISSION_FLAG) == CREATE_PERMISSION_FLAG\n}\n```"
    },
    {
        "method_name": "isSecureFileDrop",
        "method_code": "public static boolean isSecureFileDrop(OCShare share) {\n        if (share.getPermissions() == NO_PERMISSION) {\n            return false;\n        }\n\n        return (share.getPermissions() & ~SHARE_PERMISSION_FLAG) == CREATE_PERMISSION_FLAG + READ_PERMISSION_FLAG;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled isSecureFileDrop from SharingMenuHelper.java into Swift.\n\n        Input:\n\n        Method Name: isSecureFileDrop\n\n        Method Code: public static boolean isSecureFileDrop(OCShare share) {\n        if (share.getPermissions() == NO_PERMISSION) {\n            return false;\n        }\n\n        return (share.getPermissions() & ~SHARE_PERMISSION_FLAG) == CREATE_PERMISSION_FLAG + READ_PERMISSION_FLAG;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func isSecureFileDrop(share: OCShare) -> Bool {\n    if share.getPermissions() == NO_PERMISSION {\n        return false\n    }\n    \n    return (share.getPermissions() & ~SHARE_PERMISSION_FLAG) == CREATE_PERMISSION_FLAG + READ_PERMISSION_FLAG\n}\n```"
    },
    {
        "method_name": "getPermissionName",
        "method_code": "public static String getPermissionName(Context context, OCShare share) {\n        if (SharingMenuHelper.isUploadAndEditingAllowed(share)) {\n            return context.getResources().getString(R.string.share_permission_can_edit);\n        } else if (SharingMenuHelper.isReadOnly(share)) {\n            return context.getResources().getString(R.string.share_permission_view_only);\n        } else if (SharingMenuHelper.isSecureFileDrop(share)) {\n            return context.getResources().getString(R.string.share_permission_secure_file_drop);\n        } else if (SharingMenuHelper.isFileDrop(share)) {\n            return context.getResources().getString(R.string.share_permission_file_drop);\n        }\n        return null;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getPermissionName from SharingMenuHelper.java into Swift.\n\n        Input:\n\n        Method Name: getPermissionName\n\n        Method Code: public static String getPermissionName(Context context, OCShare share) {\n        if (SharingMenuHelper.isUploadAndEditingAllowed(share)) {\n            return context.getResources().getString(R.string.share_permission_can_edit);\n        } else if (SharingMenuHelper.isReadOnly(share)) {\n            return context.getResources().getString(R.string.share_permission_view_only);\n        } else if (SharingMenuHelper.isSecureFileDrop(share)) {\n            return context.getResources().getString(R.string.share_permission_secure_file_drop);\n        } else if (SharingMenuHelper.isFileDrop(share)) {\n            return context.getResources().getString(R.string.share_permission_file_drop);\n        }\n        return null;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func getPermissionName(context: Context, share: OCShare) -> String? {\n    if SharingMenuHelper.isUploadAndEditingAllowed(share) {\n        return context.getResources().getString(R.string.share_permission_can_edit)\n    } else if SharingMenuHelper.isReadOnly(share) {\n        return context.getResources().getString(R.string.share_permission_view_only)\n    } else if SharingMenuHelper.isSecureFileDrop(share) {\n        return context.getResources().getString(R.string.share_permission_secure_file_drop)\n    } else if SharingMenuHelper.isFileDrop(share) {\n        return context.getResources().getString(R.string.share_permission_file_drop)\n    }\n    return nil\n}\n```"
    },
    {
        "method_name": "getPermissionCheckedItem",
        "method_code": "public static int getPermissionCheckedItem(Context context, OCShare share, String[] permissionArray) {\n        if (SharingMenuHelper.isUploadAndEditingAllowed(share)) {\n            if (share.isFolder()) {\n                return getPermissionIndexFromArray(context, permissionArray, R.string.link_share_allow_upload_and_editing);\n            } else {\n                return getPermissionIndexFromArray(context, permissionArray, R.string.link_share_editing);\n            }\n        } else if (SharingMenuHelper.isReadOnly(share)) {\n            return getPermissionIndexFromArray(context, permissionArray, R.string.link_share_view_only);\n        } else if (SharingMenuHelper.isFileDrop(share)) {\n            return getPermissionIndexFromArray(context, permissionArray, R.string.link_share_file_drop);\n        }\n        return 0;//default first item selected\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getPermissionCheckedItem from SharingMenuHelper.java into Swift.\n\n        Input:\n\n        Method Name: getPermissionCheckedItem\n\n        Method Code: public static int getPermissionCheckedItem(Context context, OCShare share, String[] permissionArray) {\n        if (SharingMenuHelper.isUploadAndEditingAllowed(share)) {\n            if (share.isFolder()) {\n                return getPermissionIndexFromArray(context, permissionArray, R.string.link_share_allow_upload_and_editing);\n            } else {\n                return getPermissionIndexFromArray(context, permissionArray, R.string.link_share_editing);\n            }\n        } else if (SharingMenuHelper.isReadOnly(share)) {\n            return getPermissionIndexFromArray(context, permissionArray, R.string.link_share_view_only);\n        } else if (SharingMenuHelper.isFileDrop(share)) {\n            return getPermissionIndexFromArray(context, permissionArray, R.string.link_share_file_drop);\n        }\n        return 0;//default first item selected\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func getPermissionCheckedItem(context: Context, share: OCShare, permissionArray: [String]) -> Int {\n    if SharingMenuHelper.isUploadAndEditingAllowed(share) {\n        if share.isFolder() {\n            return getPermissionIndexFromArray(context: context, permissionArray: permissionArray, R.string.link_share_allow_upload_and_editing)\n        } else {\n            return getPermissionIndexFromArray(context: context, permissionArray: permissionArray, R.string.link_share_editing)\n        }\n    } else if SharingMenuHelper.isReadOnly(share) {\n        return getPermissionIndexFromArray(context: context, permissionArray: permissionArray, R.string.link_share_view_only)\n    } else if SharingMenuHelper.isFileDrop(share) {\n        return getPermissionIndexFromArray(context: context, permissionArray: permissionArray, R.string.link_share_file_drop)\n    }\n    return 0 // default first item selected\n}\n```"
    },
    {
        "method_name": "getPermissionIndexFromArray",
        "method_code": "private static int getPermissionIndexFromArray(Context context, String[] permissionArray, int permissionName) {\n        for (int i = 0; i < permissionArray.length; i++) {\n            if (permissionArray[i].equalsIgnoreCase(context.getResources().getString(permissionName))) {\n                return i;\n            }\n        }\n        return 0;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getPermissionIndexFromArray from SharingMenuHelper.java into Swift.\n\n        Input:\n\n        Method Name: getPermissionIndexFromArray\n\n        Method Code: private static int getPermissionIndexFromArray(Context context, String[] permissionArray, int permissionName) {\n        for (int i = 0; i < permissionArray.length; i++) {\n            if (permissionArray[i].equalsIgnoreCase(context.getResources().getString(permissionName))) {\n                return i;\n            }\n        }\n        return 0;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate static func getPermissionIndexFromArray(context: Context, permissionArray: [String], permissionName: Int) -> Int {\n    for (index, permission) in permissionArray.enumerated() {\n        if permission.caseInsensitiveCompare(context.resources.getString(permissionName)) == .orderedSame {\n            return index\n        }\n    }\n    return 0\n}\n```"
    },
    {
        "method_name": "canReshare",
        "method_code": "public static boolean canReshare(OCShare share) {\n        return (share.getPermissions() & SHARE_PERMISSION_FLAG) > 0;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled canReshare from SharingMenuHelper.java into Swift.\n\n        Input:\n\n        Method Name: canReshare\n\n        Method Code: public static boolean canReshare(OCShare share) {\n        return (share.getPermissions() & SHARE_PERMISSION_FLAG) > 0;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func canReshare(share: OCShare) -> Bool {\n    return (share.permissions & SHARE_PERMISSION_FLAG) > 0\n}\n```"
    }
]