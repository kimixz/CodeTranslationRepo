[
    {
        "method_name": "invoke",
        "method_code": "@Override\n        public GetMethod invoke(String url) {\n            return new GetMethod(url, false);\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled invoke from ConnectivityServiceImpl.java into Swift.\n\n        Input:\n\n        Method Name: invoke\n\n        Method Code: @Override\n        public GetMethod invoke(String url) {\n            return new GetMethod(url, false);\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc invoke(url: String) -> GetMethod {\n    return GetMethod(url: url, flag: false)\n}\n```"
    },
    {
        "method_name": "isNetworkAndServerAvailable",
        "method_code": "@Override\n    public void isNetworkAndServerAvailable(@NonNull GenericCallback<Boolean> callback) {\n        new Thread(() -> {\n            Network activeNetwork = platformConnectivityManager.getActiveNetwork();\n            NetworkCapabilities networkCapabilities = platformConnectivityManager.getNetworkCapabilities(activeNetwork);\n            boolean hasInternet = networkCapabilities != null && networkCapabilities.hasCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET);\n\n            boolean result;\n            if (hasInternet) {\n                result = !isInternetWalled();\n            } else {\n                result = false;\n            }\n\n            mainThreadHandler.post(() -> callback.onComplete(result));\n        }).start();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled isNetworkAndServerAvailable from ConnectivityServiceImpl.java into Swift.\n\n        Input:\n\n        Method Name: isNetworkAndServerAvailable\n\n        Method Code: @Override\n    public void isNetworkAndServerAvailable(@NonNull GenericCallback<Boolean> callback) {\n        new Thread(() -> {\n            Network activeNetwork = platformConnectivityManager.getActiveNetwork();\n            NetworkCapabilities networkCapabilities = platformConnectivityManager.getNetworkCapabilities(activeNetwork);\n            boolean hasInternet = networkCapabilities != null && networkCapabilities.hasCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET);\n\n            boolean result;\n            if (hasInternet) {\n                result = !isInternetWalled();\n            } else {\n                result = false;\n            }\n\n            mainThreadHandler.post(() -> callback.onComplete(result));\n        }).start();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc isNetworkAndServerAvailable(callback: @escaping (Bool) -> Void) {\n    DispatchQueue.global().async {\n        let activeNetwork = platformConnectivityManager.activeNetwork\n        let networkCapabilities = platformConnectivityManager.networkCapabilities(for: activeNetwork)\n        let hasInternet = networkCapabilities?.hasCapability(.internet) ?? false\n\n        let result: Bool\n        if hasInternet {\n            result = !self.isInternetWalled()\n        } else {\n            result = false\n        }\n\n        DispatchQueue.main.async {\n            callback(result)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "isConnected",
        "method_code": "@Override\n    public boolean isConnected() {\n        Network nw = platformConnectivityManager.getActiveNetwork();\n        NetworkCapabilities actNw = platformConnectivityManager.getNetworkCapabilities(nw);\n\n        if (actNw == null) {\n            return false;\n        }\n\n        return actNw.hasTransport(NetworkCapabilities.TRANSPORT_WIFI) ||\n            actNw.hasTransport(NetworkCapabilities.TRANSPORT_CELLULAR) ||\n            actNw.hasTransport(NetworkCapabilities.TRANSPORT_ETHERNET) ||\n            actNw.hasTransport(NetworkCapabilities.TRANSPORT_BLUETOOTH);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled isConnected from ConnectivityServiceImpl.java into Swift.\n\n        Input:\n\n        Method Name: isConnected\n\n        Method Code: @Override\n    public boolean isConnected() {\n        Network nw = platformConnectivityManager.getActiveNetwork();\n        NetworkCapabilities actNw = platformConnectivityManager.getNetworkCapabilities(nw);\n\n        if (actNw == null) {\n            return false;\n        }\n\n        return actNw.hasTransport(NetworkCapabilities.TRANSPORT_WIFI) ||\n            actNw.hasTransport(NetworkCapabilities.TRANSPORT_CELLULAR) ||\n            actNw.hasTransport(NetworkCapabilities.TRANSPORT_ETHERNET) ||\n            actNw.hasTransport(NetworkCapabilities.TRANSPORT_BLUETOOTH);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc isConnected() -> Bool {\n    guard let nw = platformConnectivityManager.currentPath else {\n        return false\n    }\n\n    return nw.usesInterfaceType(.wifi) ||\n           nw.usesInterfaceType(.cellular) ||\n           nw.usesInterfaceType(.wiredEthernet) ||\n           nw.usesInterfaceType(.bluetooth)\n}\n```"
    },
    {
        "method_name": "isInternetWalled",
        "method_code": "@Override\n    public boolean isInternetWalled() {\n        final Boolean cachedValue = walledCheckCache.getValue();\n        if (cachedValue != null) {\n            return cachedValue;\n        } else {\n            Server server = accountManager.getUser().getServer();\n            String baseServerAddress = server.getUri().toString();\n\n            boolean result;\n            Connectivity c = getConnectivity();\n            if (c.isConnected() && c.isWifi() && !c.isMetered() && !baseServerAddress.isEmpty()) {\n                GetMethod get = requestBuilder.invoke(baseServerAddress + CONNECTIVITY_CHECK_ROUTE);\n                PlainClient client = clientFactory.createPlainClient();\n\n                int status = get.execute(client);\n\n                // Content-Length is not available when using chunked transfer encoding, so check for -1 as well\n                result = !(status == HttpStatus.SC_NO_CONTENT && get.getResponseContentLength() <= 0);\n                get.releaseConnection();\n                if (result) {\n                    Log_OC.w(TAG, \"isInternetWalled(): Failed to GET \" + CONNECTIVITY_CHECK_ROUTE + \",\" +\n                        \" assuming connectivity is impaired\");\n                }\n            } else {\n                result = !c.isConnected();\n            }\n\n            walledCheckCache.setValue(result);\n            return result;\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled isInternetWalled from ConnectivityServiceImpl.java into Swift.\n\n        Input:\n\n        Method Name: isInternetWalled\n\n        Method Code: @Override\n    public boolean isInternetWalled() {\n        final Boolean cachedValue = walledCheckCache.getValue();\n        if (cachedValue != null) {\n            return cachedValue;\n        } else {\n            Server server = accountManager.getUser().getServer();\n            String baseServerAddress = server.getUri().toString();\n\n            boolean result;\n            Connectivity c = getConnectivity();\n            if (c.isConnected() && c.isWifi() && !c.isMetered() && !baseServerAddress.isEmpty()) {\n                GetMethod get = requestBuilder.invoke(baseServerAddress + CONNECTIVITY_CHECK_ROUTE);\n                PlainClient client = clientFactory.createPlainClient();\n\n                int status = get.execute(client);\n\n                // Content-Length is not available when using chunked transfer encoding, so check for -1 as well\n                result = !(status == HttpStatus.SC_NO_CONTENT && get.getResponseContentLength() <= 0);\n                get.releaseConnection();\n                if (result) {\n                    Log_OC.w(TAG, \"isInternetWalled(): Failed to GET \" + CONNECTIVITY_CHECK_ROUTE + \",\" +\n                        \" assuming connectivity is impaired\");\n                }\n            } else {\n                result = !c.isConnected();\n            }\n\n            walledCheckCache.setValue(result);\n            return result;\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc isInternetWalled() -> Bool {\n    if let cachedValue = walledCheckCache.getValue() {\n        return cachedValue\n    } else {\n        let server = accountManager.getUser().getServer()\n        let baseServerAddress = server.getUri().absoluteString\n\n        var result: Bool\n        let connectivity = getConnectivity()\n        if connectivity.isConnected() && connectivity.isWifi() && !connectivity.isMetered() && !baseServerAddress.isEmpty {\n            let get = requestBuilder.invoke(baseServerAddress + CONNECTIVITY_CHECK_ROUTE)\n            let client = clientFactory.createPlainClient()\n\n            let status = get.execute(client)\n\n            result = !(status == HttpStatus.SC_NO_CONTENT && get.getResponseContentLength() <= 0)\n            get.releaseConnection()\n            if result {\n                Log_OC.w(TAG, \"isInternetWalled(): Failed to GET \\(CONNECTIVITY_CHECK_ROUTE), assuming connectivity is impaired\")\n            }\n        } else {\n            result = !connectivity.isConnected()\n        }\n\n        walledCheckCache.setValue(result)\n        return result\n    }\n}\n```"
    },
    {
        "method_name": "getConnectivity",
        "method_code": "@Override\n    public Connectivity getConnectivity() {\n        NetworkInfo networkInfo;\n        try {\n            networkInfo = platformConnectivityManager.getActiveNetworkInfo();\n        } catch (Throwable t) {\n            networkInfo = null; // no network available or no information (permission denied?)\n        }\n\n        if (networkInfo != null) {\n            boolean isConnected = networkInfo.isConnectedOrConnecting();\n            // more detailed check\n            boolean isMetered;\n            isMetered = isNetworkMetered();\n            boolean isWifi = networkInfo.getType() == ConnectivityManager.TYPE_WIFI || hasNonCellularConnectivity();\n            return new Connectivity(isConnected, isMetered, isWifi, null);\n        } else {\n            return Connectivity.DISCONNECTED;\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getConnectivity from ConnectivityServiceImpl.java into Swift.\n\n        Input:\n\n        Method Name: getConnectivity\n\n        Method Code: @Override\n    public Connectivity getConnectivity() {\n        NetworkInfo networkInfo;\n        try {\n            networkInfo = platformConnectivityManager.getActiveNetworkInfo();\n        } catch (Throwable t) {\n            networkInfo = null; // no network available or no information (permission denied?)\n        }\n\n        if (networkInfo != null) {\n            boolean isConnected = networkInfo.isConnectedOrConnecting();\n            // more detailed check\n            boolean isMetered;\n            isMetered = isNetworkMetered();\n            boolean isWifi = networkInfo.getType() == ConnectivityManager.TYPE_WIFI || hasNonCellularConnectivity();\n            return new Connectivity(isConnected, isMetered, isWifi, null);\n        } else {\n            return Connectivity.DISCONNECTED;\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func getConnectivity() -> Connectivity {\n    var networkInfo: NetworkInfo?\n    do {\n        networkInfo = platformConnectivityManager.activeNetworkInfo\n    } catch {\n        networkInfo = nil // no network available or no information (permission denied?)\n    }\n\n    if let networkInfo = networkInfo {\n        let isConnected = networkInfo.isConnectedOrConnecting\n        // more detailed check\n        let isMetered = isNetworkMetered()\n        let isWifi = networkInfo.type == ConnectivityManager.TYPE_WIFI || hasNonCellularConnectivity()\n        return Connectivity(isConnected: isConnected, isMetered: isMetered, isWifi: isWifi, other: nil)\n    } else {\n        return Connectivity.DISCONNECTED\n    }\n}\n```"
    },
    {
        "method_name": "isNetworkMetered",
        "method_code": "private boolean isNetworkMetered() {\n        final Network network = platformConnectivityManager.getActiveNetwork();\n        try {\n            NetworkCapabilities networkCapabilities = platformConnectivityManager.getNetworkCapabilities(network);\n            if (networkCapabilities != null) {\n                return !networkCapabilities.hasCapability(NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED);\n            } else {\n                return ConnectivityManagerCompat.isActiveNetworkMetered(platformConnectivityManager);\n            }\n        } catch (RuntimeException e) {\n            Log_OC.e(TAG, \"Exception when checking network capabilities\", e);\n            return false;\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled isNetworkMetered from ConnectivityServiceImpl.java into Swift.\n\n        Input:\n\n        Method Name: isNetworkMetered\n\n        Method Code: private boolean isNetworkMetered() {\n        final Network network = platformConnectivityManager.getActiveNetwork();\n        try {\n            NetworkCapabilities networkCapabilities = platformConnectivityManager.getNetworkCapabilities(network);\n            if (networkCapabilities != null) {\n                return !networkCapabilities.hasCapability(NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED);\n            } else {\n                return ConnectivityManagerCompat.isActiveNetworkMetered(platformConnectivityManager);\n            }\n        } catch (RuntimeException e) {\n            Log_OC.e(TAG, \"Exception when checking network capabilities\", e);\n            return false;\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func isNetworkMetered() -> Bool {\n    let network = platformConnectivityManager.currentNetwork\n    do {\n        if let networkCapabilities = try platformConnectivityManager.networkCapabilities(for: network) {\n            return !networkCapabilities.contains(.notRestricted)\n        } else {\n            return platformConnectivityManager.isActiveNetworkMetered\n        }\n    } catch {\n        print(\"Exception when checking network capabilities: \\(error)\")\n        return false\n    }\n}\n```"
    },
    {
        "method_name": "hasNonCellularConnectivity",
        "method_code": "private boolean hasNonCellularConnectivity() {\n        for (NetworkInfo networkInfo : platformConnectivityManager.getAllNetworkInfo()) {\n            if (networkInfo.isConnectedOrConnecting() && (networkInfo.getType() == ConnectivityManager.TYPE_WIFI ||\n                networkInfo.getType() == ConnectivityManager.TYPE_ETHERNET)) {\n                return true;\n            }\n        }\n        return false;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled hasNonCellularConnectivity from ConnectivityServiceImpl.java into Swift.\n\n        Input:\n\n        Method Name: hasNonCellularConnectivity\n\n        Method Code: private boolean hasNonCellularConnectivity() {\n        for (NetworkInfo networkInfo : platformConnectivityManager.getAllNetworkInfo()) {\n            if (networkInfo.isConnectedOrConnecting() && (networkInfo.getType() == ConnectivityManager.TYPE_WIFI ||\n                networkInfo.getType() == ConnectivityManager.TYPE_ETHERNET)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func hasNonCellularConnectivity() -> Bool {\n    guard let networkInfos = platformConnectivityManager.getAllNetworkInfo() else {\n        return false\n    }\n    for networkInfo in networkInfos {\n        if networkInfo.isConnectedOrConnecting() && (networkInfo.type == .wifi || networkInfo.type == .ethernet) {\n            return true\n        }\n    }\n    return false\n}\n```"
    }
]