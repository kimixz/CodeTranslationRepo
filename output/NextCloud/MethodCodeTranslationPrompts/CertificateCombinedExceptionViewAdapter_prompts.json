[
    {
        "method_name": "updateErrorView",
        "method_code": "Override\n    public void updateErrorView(@NonNull SslUntrustedCertLayoutBinding binding) {\n        /// clean\n        binding.reasonNoInfoAboutError.setVisibility(View.GONE);\n\n        /// refresh\n        if (mSslException.getCertPathValidatorException() != null) {\n            binding.reasonCertNotTrusted.setVisibility(View.VISIBLE);\n        } else {\n            binding.reasonCertNotTrusted.setVisibility(View.GONE);\n        }\n\n        if (mSslException.getCertificateExpiredException() != null) {\n            binding.reasonCertExpired.setVisibility(View.VISIBLE);\n        } else {\n            binding.reasonCertExpired.setVisibility(View.GONE);\n        }\n\n        if (mSslException.getCertificateNotYetValidException() != null) {\n            binding.reasonCertNotYetValid.setVisibility(View.VISIBLE);\n        } else {\n            binding.reasonCertNotYetValid.setVisibility(View.GONE);\n        }\n\n        if (mSslException.getSslPeerUnverifiedException() != null) {\n            binding.reasonHostnameNotVerified.setVisibility(View.VISIBLE);\n        } else {\n            binding.reasonHostnameNotVerified.setVisibility(View.GONE);\n        }\n\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled updateErrorView from CertificateCombinedExceptionViewAdapter.java into Swift.\n\n        Input:\n\n        Method Name: updateErrorView\n\n        Method Code: Override\n    public void updateErrorView(@NonNull SslUntrustedCertLayoutBinding binding) {\n        /// clean\n        binding.reasonNoInfoAboutError.setVisibility(View.GONE);\n\n        /// refresh\n        if (mSslException.getCertPathValidatorException() != null) {\n            binding.reasonCertNotTrusted.setVisibility(View.VISIBLE);\n        } else {\n            binding.reasonCertNotTrusted.setVisibility(View.GONE);\n        }\n\n        if (mSslException.getCertificateExpiredException() != null) {\n            binding.reasonCertExpired.setVisibility(View.VISIBLE);\n        } else {\n            binding.reasonCertExpired.setVisibility(View.GONE);\n        }\n\n        if (mSslException.getCertificateNotYetValidException() != null) {\n            binding.reasonCertNotYetValid.setVisibility(View.VISIBLE);\n        } else {\n            binding.reasonCertNotYetValid.setVisibility(View.GONE);\n        }\n\n        if (mSslException.getSslPeerUnverifiedException() != null) {\n            binding.reasonHostnameNotVerified.setVisibility(View.VISIBLE);\n        } else {\n            binding.reasonHostnameNotVerified.setVisibility(View.GONE);\n        }\n\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc updateErrorView(binding: SslUntrustedCertLayoutBinding) {\n    // clean\n    binding.reasonNoInfoAboutError.isHidden = true\n\n    // refresh\n    if mSslException.certPathValidatorException != nil {\n        binding.reasonCertNotTrusted.isHidden = false\n    } else {\n        binding.reasonCertNotTrusted.isHidden = true\n    }\n\n    if mSslException.certificateExpiredException != nil {\n        binding.reasonCertExpired.isHidden = false\n    } else {\n        binding.reasonCertExpired.isHidden = true\n    }\n\n    if mSslException.certificateNotYetValidException != nil {\n        binding.reasonCertNotYetValid.isHidden = false\n    } else {\n        binding.reasonCertNotYetValid.isHidden = true\n    }\n\n    if mSslException.sslPeerUnverifiedException != nil {\n        binding.reasonHostnameNotVerified.isHidden = false\n    } else {\n        binding.reasonHostnameNotVerified.isHidden = true\n    }\n}\n```"
    }
]