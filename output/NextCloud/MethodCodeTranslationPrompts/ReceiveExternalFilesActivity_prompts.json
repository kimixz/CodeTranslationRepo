[
    {
        "method_name": "onCreate",
        "method_code": "verride\n    protected void onCreate(Bundle savedInstanceState) {\n        if (savedInstanceState != null) {\n            String parentPath = savedInstanceState.getString(KEY_PARENTS);\n\n            if (parentPath != null) {\n                mParents.addAll(Arrays.asList(parentPath.split(OCFile.PATH_SEPARATOR)));\n            }\n\n            mFile = BundleExtensionsKt.getParcelableArgument(savedInstanceState, KEY_FILE, OCFile.class);\n        }\n        mAccountManager = (AccountManager) getSystemService(Context.ACCOUNT_SERVICE);\n\n        super.onCreate(savedInstanceState);\n        binding = ReceiveExternalFilesBinding.inflate(getLayoutInflater());\n        setContentView(binding.getRoot());\n\n        prepareStreamsToUpload();\n\n        // Listen for sync messages\n        IntentFilter syncIntentFilter = new IntentFilter(RefreshFolderOperation.\n                                                             EVENT_SINGLE_FOLDER_CONTENTS_SYNCED);\n        syncIntentFilter.addAction(RefreshFolderOperation.EVENT_SINGLE_FOLDER_SHARES_SYNCED);\n        mSyncBroadcastReceiver = new SyncBroadcastReceiver();\n        localBroadcastManager.registerReceiver(mSyncBroadcastReceiver, syncIntentFilter);\n\n        // Init Fragment without UI to retain AsyncTask across configuration changes\n        FragmentManager fm = getSupportFragmentManager();\n        TaskRetainerFragment taskRetainerFragment =\n            (TaskRetainerFragment) fm.findFragmentByTag(TaskRetainerFragment.FTAG_TASK_RETAINER_FRAGMENT);\n        if (taskRetainerFragment == null) {\n            taskRetainerFragment = new TaskRetainerFragment();\n            fm.beginTransaction()\n                .add(taskRetainerFragment, TaskRetainerFragment.FTAG_TASK_RETAINER_FRAGMENT).commit();\n        }   // else, Fragment already created and retained across configuration change\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreate from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onCreate\n\n        Method Code: verride\n    protected void onCreate(Bundle savedInstanceState) {\n        if (savedInstanceState != null) {\n            String parentPath = savedInstanceState.getString(KEY_PARENTS);\n\n            if (parentPath != null) {\n                mParents.addAll(Arrays.asList(parentPath.split(OCFile.PATH_SEPARATOR)));\n            }\n\n            mFile = BundleExtensionsKt.getParcelableArgument(savedInstanceState, KEY_FILE, OCFile.class);\n        }\n        mAccountManager = (AccountManager) getSystemService(Context.ACCOUNT_SERVICE);\n\n        super.onCreate(savedInstanceState);\n        binding = ReceiveExternalFilesBinding.inflate(getLayoutInflater());\n        setContentView(binding.getRoot());\n\n        prepareStreamsToUpload();\n\n        // Listen for sync messages\n        IntentFilter syncIntentFilter = new IntentFilter(RefreshFolderOperation.\n                                                             EVENT_SINGLE_FOLDER_CONTENTS_SYNCED);\n        syncIntentFilter.addAction(RefreshFolderOperation.EVENT_SINGLE_FOLDER_SHARES_SYNCED);\n        mSyncBroadcastReceiver = new SyncBroadcastReceiver();\n        localBroadcastManager.registerReceiver(mSyncBroadcastReceiver, syncIntentFilter);\n\n        // Init Fragment without UI to retain AsyncTask across configuration changes\n        FragmentManager fm = getSupportFragmentManager();\n        TaskRetainerFragment taskRetainerFragment =\n            (TaskRetainerFragment) fm.findFragmentByTag(TaskRetainerFragment.FTAG_TASK_RETAINER_FRAGMENT);\n        if (taskRetainerFragment == null) {\n            taskRetainerFragment = new TaskRetainerFragment();\n            fm.beginTransaction()\n                .add(taskRetainerFragment, TaskRetainerFragment.FTAG_TASK_RETAINER_FRAGMENT).commit();\n        }   // else, Fragment already created and retained across configuration change\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    \n    if let savedInstanceState = savedInstanceState {\n        if let parentPath = savedInstanceState.string(forKey: KEY_PARENTS) {\n            mParents.append(contentsOf: parentPath.split(separator: OCFile.PATH_SEPARATOR).map { String($0) })\n        }\n        \n        mFile = savedInstanceState.getParcelableArgument(forKey: KEY_FILE, type: OCFile.self)\n    }\n    \n    mAccountManager = AccountManager()\n    \n    binding = ReceiveExternalFilesBinding.inflate(layoutInflater)\n    view = binding.root\n    \n    prepareStreamsToUpload()\n    \n    let syncIntentFilter = IntentFilter(RefreshFolderOperation.EVENT_SINGLE_FOLDER_CONTENTS_SYNCED)\n    syncIntentFilter.addAction(RefreshFolderOperation.EVENT_SINGLE_FOLDER_SHARES_SYNCED)\n    mSyncBroadcastReceiver = SyncBroadcastReceiver()\n    localBroadcastManager.registerReceiver(mSyncBroadcastReceiver, syncIntentFilter)\n    \n    let fm = supportFragmentManager\n    var taskRetainerFragment = fm.findFragment(byTag: TaskRetainerFragment.FTAG_TASK_RETAINER_FRAGMENT) as? TaskRetainerFragment\n    if taskRetainerFragment == nil {\n        taskRetainerFragment = TaskRetainerFragment()\n        fm.beginTransaction()\n            .add(taskRetainerFragment!, TaskRetainerFragment.FTAG_TASK_RETAINER_FRAGMENT).commit()\n    }\n}\n```"
    },
    {
        "method_name": "setAccount",
        "method_code": "verride\n    protected void setAccount(Account account, boolean savedAccount) {\n        Account[] accounts = mAccountManager.getAccountsByType(MainApp.getAccountType(this));\n        if (accounts.length == 0) {\n            Log_OC.i(TAG, \"No ownCloud account is available\");\n            DialogNoAccount dialog = new DialogNoAccount(viewThemeUtils);\n            dialog.show(getSupportFragmentManager(), null);\n        }\n\n        if (!somethingToUpload()) {\n            showErrorDialog(\n                R.string.uploader_error_message_no_file_to_upload,\n                R.string.uploader_error_title_no_file_to_upload\n                           );\n        }\n\n        super.setAccount(account, savedAccount);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setAccount from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: setAccount\n\n        Method Code: verride\n    protected void setAccount(Account account, boolean savedAccount) {\n        Account[] accounts = mAccountManager.getAccountsByType(MainApp.getAccountType(this));\n        if (accounts.length == 0) {\n            Log_OC.i(TAG, \"No ownCloud account is available\");\n            DialogNoAccount dialog = new DialogNoAccount(viewThemeUtils);\n            dialog.show(getSupportFragmentManager(), null);\n        }\n\n        if (!somethingToUpload()) {\n            showErrorDialog(\n                R.string.uploader_error_message_no_file_to_upload,\n                R.string.uploader_error_title_no_file_to_upload\n                           );\n        }\n\n        super.setAccount(account, savedAccount);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func setAccount(_ account: Account, savedAccount: Bool) {\n    let accounts = mAccountManager.accounts(withAccountType: MainApp.getAccountType(self))\n    if accounts.isEmpty {\n        Log_OC.i(TAG, \"No ownCloud account is available\")\n        let dialog = DialogNoAccount(viewThemeUtils: viewThemeUtils)\n        dialog.show(self, sender: nil)\n    }\n\n    if !somethingToUpload() {\n        showErrorDialog(\n            R.string.uploader_error_message_no_file_to_upload,\n            R.string.uploader_error_title_no_file_to_upload\n        )\n    }\n\n    super.setAccount(account, savedAccount: savedAccount)\n}\n```"
    },
    {
        "method_name": "showAccountChooserDialog",
        "method_code": "ivate void showAccountChooserDialog() {\n        MultipleAccountsDialog dialog = new MultipleAccountsDialog();\n        dialog.show(getSupportFragmentManager(), null);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled showAccountChooserDialog from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: showAccountChooserDialog\n\n        Method Code: ivate void showAccountChooserDialog() {\n        MultipleAccountsDialog dialog = new MultipleAccountsDialog();\n        dialog.show(getSupportFragmentManager(), null);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func showAccountChooserDialog() {\n    let dialog = MultipleAccountsDialog()\n    dialog.show(self, sender: nil)\n}\n```"
    },
    {
        "method_name": "getActivity",
        "method_code": "ivate Activity getActivity() {\n        return this;\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getActivity from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: getActivity\n\n        Method Code: ivate Activity getActivity() {\n        return this;\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getActivity() -> ReceiveExternalFilesActivity {\n    return self\n}\n```"
    },
    {
        "method_name": "onAccountChosen",
        "method_code": "verride\n    public void onAccountChosen(@NonNull User user) {\n        setAccount(user.toPlatformAccount(), false);\n        initTargetFolder();\n        populateDirectoryList();\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onAccountChosen from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onAccountChosen\n\n        Method Code: verride\n    public void onAccountChosen(@NonNull User user) {\n        setAccount(user.toPlatformAccount(), false);\n        initTargetFolder();\n        populateDirectoryList();\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onAccountChosen(user: User) {\n    setAccount(user.toPlatformAccount(), false)\n    initTargetFolder()\n    populateDirectoryList()\n}\n```"
    },
    {
        "method_name": "onStart",
        "method_code": "verride\n    protected void onStart() {\n        super.onStart();\n\n        if (mAccountManager.getAccountsByType(MainApp.getAccountType(this)).length == 0) {\n            Toast.makeText(this,\n                           String.format(getString(R.string.uploader_wrn_no_account_text),\n                                         getString(R.string.app_name)),\n                           Toast.LENGTH_LONG).show();\n            return;\n        }\n\n        initTargetFolder();\n        browseToFolderIfItExists();\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onStart from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onStart\n\n        Method Code: verride\n    protected void onStart() {\n        super.onStart();\n\n        if (mAccountManager.getAccountsByType(MainApp.getAccountType(this)).length == 0) {\n            Toast.makeText(this,\n                           String.format(getString(R.string.uploader_wrn_no_account_text),\n                                         getString(R.string.app_name)),\n                           Toast.LENGTH_LONG).show();\n            return;\n        }\n\n        initTargetFolder();\n        browseToFolderIfItExists();\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n\n    if AccountManager.shared.accounts(ofType: MainApp.accountType(self)).isEmpty {\n        let message = String(format: NSLocalizedString(\"uploader_wrn_no_account_text\", comment: \"\"), NSLocalizedString(\"app_name\", comment: \"\"))\n        let alert = UIAlertController(title: nil, message: message, preferredStyle: .alert)\n        alert.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))\n        present(alert, animated: true, completion: nil)\n        return\n    }\n\n    initTargetFolder()\n    browseToFolderIfItExists()\n}\n```"
    },
    {
        "method_name": "browseToFolderIfItExists",
        "method_code": "ivate void browseToFolderIfItExists() {\n        String full_path = generatePath(mParents);\n        final OCFile fileByPath = getStorageManager().getFileByPath(full_path);\n        if (fileByPath != null) {\n            startSyncFolderOperation(fileByPath);\n            populateDirectoryList();\n        } else {\n            browseToRoot();\n            preferences.setLastUploadPath(OCFile.ROOT_PATH);\n        }\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled browseToFolderIfItExists from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: browseToFolderIfItExists\n\n        Method Code: ivate void browseToFolderIfItExists() {\n        String full_path = generatePath(mParents);\n        final OCFile fileByPath = getStorageManager().getFileByPath(full_path);\n        if (fileByPath != null) {\n            startSyncFolderOperation(fileByPath);\n            populateDirectoryList();\n        } else {\n            browseToRoot();\n            preferences.setLastUploadPath(OCFile.ROOT_PATH);\n        }\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func browseToFolderIfItExists() {\n    let fullPath = generatePath(mParents)\n    if let fileByPath = getStorageManager().getFileByPath(fullPath) {\n        startSyncFolderOperation(fileByPath)\n        populateDirectoryList()\n    } else {\n        browseToRoot()\n        preferences.setLastUploadPath(OCFile.ROOT_PATH)\n    }\n}\n```"
    },
    {
        "method_name": "onSaveInstanceState",
        "method_code": "verride\n    protected void onSaveInstanceState(@NonNull Bundle outState) {\n        FileExtensionsKt.logFileSize(mFile, TAG);\n        super.onSaveInstanceState(outState);\n        outState.putString(KEY_PARENTS, generatePath(mParents));\n        outState.putParcelable(KEY_FILE, mFile);\n        if (getUser().isPresent()) {\n            outState.putParcelable(FileActivity.EXTRA_USER, getUser().orElseThrow(RuntimeException::new));\n        }\n\n        Log_OC.d(TAG, \"onSaveInstanceState() end\");\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onSaveInstanceState from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onSaveInstanceState\n\n        Method Code: verride\n    protected void onSaveInstanceState(@NonNull Bundle outState) {\n        FileExtensionsKt.logFileSize(mFile, TAG);\n        super.onSaveInstanceState(outState);\n        outState.putString(KEY_PARENTS, generatePath(mParents));\n        outState.putParcelable(KEY_FILE, mFile);\n        if (getUser().isPresent()) {\n            outState.putParcelable(FileActivity.EXTRA_USER, getUser().orElseThrow(RuntimeException::new));\n        }\n\n        Log_OC.d(TAG, \"onSaveInstanceState() end\");\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func encodeRestorableState(with coder: NSCoder) {\n    logFileSize(file: mFile, tag: TAG)\n    super.encodeRestorableState(with: coder)\n    coder.encode(generatePath(mParents), forKey: KEY_PARENTS)\n    coder.encode(mFile, forKey: KEY_FILE)\n    if let user = getUser() {\n        coder.encode(user, forKey: FileActivity.EXTRA_USER)\n    }\n    \n    Log_OC.d(TAG, \"encodeRestorableState() end\")\n}\n```"
    },
    {
        "method_name": "onDestroy",
        "method_code": "verride\n    protected void onDestroy() {\n        if (mSyncBroadcastReceiver != null) {\n            localBroadcastManager.unregisterReceiver(mSyncBroadcastReceiver);\n        }\n        super.onDestroy();\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onDestroy from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onDestroy\n\n        Method Code: verride\n    protected void onDestroy() {\n        if (mSyncBroadcastReceiver != null) {\n            localBroadcastManager.unregisterReceiver(mSyncBroadcastReceiver);\n        }\n        super.onDestroy();\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n    if let syncBroadcastReceiver = mSyncBroadcastReceiver {\n        localBroadcastManager.removeObserver(syncBroadcastReceiver)\n    }\n}\n```"
    },
    {
        "method_name": "onSortingOrderChosen",
        "method_code": "verride\n    public void onSortingOrderChosen(FileSortOrder newSortOrder) {\n        preferences.setSortOrder(mFile, newSortOrder);\n        sortButton.setText(DisplayUtils.getSortOrderStringId(newSortOrder));\n        populateDirectoryList();\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onSortingOrderChosen from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onSortingOrderChosen\n\n        Method Code: verride\n    public void onSortingOrderChosen(FileSortOrder newSortOrder) {\n        preferences.setSortOrder(mFile, newSortOrder);\n        sortButton.setText(DisplayUtils.getSortOrderStringId(newSortOrder));\n        populateDirectoryList();\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onSortingOrderChosen(newSortOrder: FileSortOrder) {\n    preferences.setSortOrder(for: mFile, newSortOrder: newSortOrder)\n    sortButton.setTitle(DisplayUtils.getSortOrderStringId(newSortOrder), for: .normal)\n    populateDirectoryList()\n}\n```"
    },
    {
        "method_name": "selectFile",
        "method_code": "verride\n    public void selectFile(OCFile file) {\n        if (file.isFolder()) {\n            String filenameErrorMessage = FileNameValidator.INSTANCE.checkFileName(file.getFileName(), getCapabilities(), this, null);\n            if (filenameErrorMessage != null) {\n                DisplayUtils.showSnackMessage(this, filenameErrorMessage);\n                return;\n            }\n\n            if (file.isEncrypted() &&\n                !FileOperationsHelper.isEndToEndEncryptionSetup(this, getUser().orElseThrow(IllegalAccessError::new))) {\n                DisplayUtils.showSnackMessage(this, R.string.e2e_not_yet_setup);\n\n                return;\n            }\n\n            startSyncFolderOperation(file);\n            mParents.push(file.getFileName());\n            populateDirectoryList();\n        }\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled selectFile from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: selectFile\n\n        Method Code: verride\n    public void selectFile(OCFile file) {\n        if (file.isFolder()) {\n            String filenameErrorMessage = FileNameValidator.INSTANCE.checkFileName(file.getFileName(), getCapabilities(), this, null);\n            if (filenameErrorMessage != null) {\n                DisplayUtils.showSnackMessage(this, filenameErrorMessage);\n                return;\n            }\n\n            if (file.isEncrypted() &&\n                !FileOperationsHelper.isEndToEndEncryptionSetup(this, getUser().orElseThrow(IllegalAccessError::new))) {\n                DisplayUtils.showSnackMessage(this, R.string.e2e_not_yet_setup);\n\n                return;\n            }\n\n            startSyncFolderOperation(file);\n            mParents.push(file.getFileName());\n            populateDirectoryList();\n        }\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc selectFile(_ file: OCFile) {\n    if file.isFolder() {\n        if let filenameErrorMessage = FileNameValidator.instance.checkFileName(file.fileName, getCapabilities(), self, nil) {\n            DisplayUtils.showSnackMessage(self, filenameErrorMessage)\n            return\n        }\n\n        if file.isEncrypted && !FileOperationsHelper.isEndToEndEncryptionSetup(self, getUser().orElseThrow { IllegalAccessError() }) {\n            DisplayUtils.showSnackMessage(self, R.string.e2e_not_yet_setup)\n            return\n        }\n\n        startSyncFolderOperation(file)\n        mParents.push(file.fileName)\n        populateDirectoryList()\n    }\n}\n```"
    },
    {
        "method_name": "onCreateDialog",
        "method_code": "onNull\n        @Override\n        public Dialog onCreateDialog(Bundle savedInstanceState) {\n            final MaterialAlertDialogBuilder builder = new MaterialAlertDialogBuilder(requireContext());\n            builder.setIcon(R.drawable.ic_warning);\n            builder.setTitle(R.string.uploader_wrn_no_account_title);\n            builder.setMessage(String.format(getString(R.string.uploader_wrn_no_account_text),\n                                             getString(R.string.app_name)));\n            builder.setCancelable(false);\n            builder.setPositiveButton(R.string.uploader_wrn_no_account_setup_btn_text, (dialog, which) -> {\n                // using string value since in API7 this\n                // constant is not defined\n                // in API7 < this constant is defined in\n                // Settings.ADD_ACCOUNT_SETTINGS\n                // and Settings.EXTRA_AUTHORITIES\n                Intent intent = new Intent(android.provider.Settings.ACTION_ADD_ACCOUNT);\n                intent.putExtra(\"authorities\", new String[]{MainApp.getAuthTokenType()});\n                startActivityForResult(intent, REQUEST_CODE__SETUP_ACCOUNT);\n            });\n            builder.setNeutralButton(R.string.uploader_wrn_no_account_quit_btn_text,\n                                     (dialog, which) -> requireActivity().finish());\n            viewThemeUtils.dialog.colorMaterialAlertDialogBackground(requireContext(), builder);\n            return builder.create();\n        }\n ",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreateDialog from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onCreateDialog\n\n        Method Code: onNull\n        @Override\n        public Dialog onCreateDialog(Bundle savedInstanceState) {\n            final MaterialAlertDialogBuilder builder = new MaterialAlertDialogBuilder(requireContext());\n            builder.setIcon(R.drawable.ic_warning);\n            builder.setTitle(R.string.uploader_wrn_no_account_title);\n            builder.setMessage(String.format(getString(R.string.uploader_wrn_no_account_text),\n                                             getString(R.string.app_name)));\n            builder.setCancelable(false);\n            builder.setPositiveButton(R.string.uploader_wrn_no_account_setup_btn_text, (dialog, which) -> {\n                // using string value since in API7 this\n                // constant is not defined\n                // in API7 < this constant is defined in\n                // Settings.ADD_ACCOUNT_SETTINGS\n                // and Settings.EXTRA_AUTHORITIES\n                Intent intent = new Intent(android.provider.Settings.ACTION_ADD_ACCOUNT);\n                intent.putExtra(\"authorities\", new String[]{MainApp.getAuthTokenType()});\n                startActivityForResult(intent, REQUEST_CODE__SETUP_ACCOUNT);\n            });\n            builder.setNeutralButton(R.string.uploader_wrn_no_account_quit_btn_text,\n                                     (dialog, which) -> requireActivity().finish());\n            viewThemeUtils.dialog.colorMaterialAlertDialogBackground(requireContext(), builder);\n            return builder.create();\n        }\n \n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    present(createDialog(), animated: true, completion: nil)\n}\n\nfunc createDialog() -> UIAlertController {\n    let alertController = UIAlertController(title: NSLocalizedString(\"uploader_wrn_no_account_title\", comment: \"\"),\n                                            message: String(format: NSLocalizedString(\"uploader_wrn_no_account_text\", comment: \"\"), NSLocalizedString(\"app_name\", comment: \"\")),\n                                            preferredStyle: .alert)\n    \n    let setupAction = UIAlertAction(title: NSLocalizedString(\"uploader_wrn_no_account_setup_btn_text\", comment: \"\"), style: .default) { _ in\n        if let url = URL(string: UIApplication.openSettingsURLString) {\n            UIApplication.shared.open(url, options: [:], completionHandler: nil)\n        }\n    }\n    \n    let quitAction = UIAlertAction(title: NSLocalizedString(\"uploader_wrn_no_account_quit_btn_text\", comment: \"\"), style: .default) { _ in\n        self.dismiss(animated: true, completion: nil)\n    }\n    \n    alertController.addAction(setupAction)\n    alertController.addAction(quitAction)\n    \n    return alertController\n}\n```"
    },
    {
        "method_name": "newInstance",
        "method_code": "blic static DialogInputUploadFilename newInstance(String subjectText, String extraText) {\n            DialogInputUploadFilename dialog = new DialogInputUploadFilename();\n            Bundle args = new Bundle();\n            args.putString(KEY_SUBJECT_TEXT, subjectText);\n            args.putString(KEY_EXTRA_TEXT, extraText);\n            dialog.setArguments(args);\n            return dialog;\n        }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled newInstance from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: newInstance\n\n        Method Code: blic static DialogInputUploadFilename newInstance(String subjectText, String extraText) {\n            DialogInputUploadFilename dialog = new DialogInputUploadFilename();\n            Bundle args = new Bundle();\n            args.putString(KEY_SUBJECT_TEXT, subjectText);\n            args.putString(KEY_EXTRA_TEXT, extraText);\n            dialog.setArguments(args);\n            return dialog;\n        }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func newInstance(subjectText: String, extraText: String) -> DialogInputUploadFilename {\n    let dialog = DialogInputUploadFilename()\n    var args = [String: String]()\n    args[KEY_SUBJECT_TEXT] = subjectText\n    args[KEY_EXTRA_TEXT] = extraText\n    dialog.setArguments(args)\n    return dialog\n}\n```"
    },
    {
        "method_name": "onAttach",
        "method_code": "verride\n        public void onAttach(@NonNull Context context) {\n            super.onAttach(context);\n        }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onAttach from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onAttach\n\n        Method Code: verride\n        public void onAttach(@NonNull Context context) {\n            super.onAttach(context);\n        }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func didMove(toParent parent: UIViewController?) {\n    super.didMove(toParent: parent)\n}\n```"
    },
    {
        "method_name": "onCreateDialog",
        "method_code": "onNull\n        @Override\n        public Dialog onCreateDialog(Bundle savedInstanceState) {\n            mFilenameBase = new ArrayList<>();\n            mFilenameSuffix = new ArrayList<>();\n            mText = new ArrayList<>();\n\n            String subjectText = \"\";\n            String extraText = \"\";\n            if (getArguments() != null) {\n                if (getArguments().getString(KEY_SUBJECT_TEXT) != null) {\n                    subjectText = getArguments().getString(KEY_SUBJECT_TEXT);\n                }\n                if (getArguments().getString(KEY_EXTRA_TEXT) != null) {\n                    extraText = getArguments().getString(KEY_EXTRA_TEXT);\n                }\n            }\n\n            LayoutInflater inflater = getLayoutInflater();\n            final UploadFileDialogBinding binding = UploadFileDialogBinding.inflate(inflater);\n\n            ArrayAdapter<String> adapter\n                = new ArrayAdapter<>(requireContext(), android.R.layout.simple_spinner_item);\n            adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n\n            int selectPos = 0;\n            String filename = renameSafeFilename(subjectText);\n            if (filename == null) {\n                filename = \"\";\n            }\n            adapter.add(getString(R.string.upload_file_dialog_filetype_snippet_text));\n            mText.add(extraText);\n            mFilenameBase.add(filename);\n            mFilenameSuffix.add(TEXT_FILE_SUFFIX);\n            if (isIntentStartWithUrl(extraText)) {\n                String str = getString(R.string.upload_file_dialog_filetype_internet_shortcut);\n                mText.add(internetShortcutUrlText(extraText));\n                mFilenameBase.add(filename);\n                mFilenameSuffix.add(URL_FILE_SUFFIX);\n                adapter.add(String.format(str, URL_FILE_SUFFIX));\n\n                mText.add(internetShortcutWeblocText(extraText));\n                mFilenameBase.add(filename);\n                mFilenameSuffix.add(WEBLOC_FILE_SUFFIX);\n                adapter.add(String.format(str, WEBLOC_FILE_SUFFIX));\n\n                mText.add(internetShortcutDesktopText(extraText, filename));\n                mFilenameBase.add(filename);\n                mFilenameSuffix.add(DESKTOP_FILE_SUFFIX);\n                adapter.add(String.format(str, DESKTOP_FILE_SUFFIX));\n\n                selectPos = preferences.getUploadUrlFileExtensionUrlSelectedPos();\n                mFileCategory = CATEGORY_URL;\n            } else if (isIntentFromGoogleMap(subjectText, extraText)) {\n                String str = getString(R.string.upload_file_dialog_filetype_googlemap_shortcut);\n                String texts[] = extraText.split(\"\\n\");\n                mText.add(internetShortcutUrlText(texts[2]));\n                mFilenameBase.add(texts[0]);\n                mFilenameSuffix.add(URL_FILE_SUFFIX);\n                adapter.add(String.format(str, URL_FILE_SUFFIX));\n\n                mText.add(internetShortcutWeblocText(texts[2]));\n                mFilenameBase.add(texts[0]);\n                mFilenameSuffix.add(WEBLOC_FILE_SUFFIX);\n                adapter.add(String.format(str, WEBLOC_FILE_SUFFIX));\n\n                mText.add(internetShortcutDesktopText(texts[2], texts[0]));\n                mFilenameBase.add(texts[0]);\n                mFilenameSuffix.add(DESKTOP_FILE_SUFFIX);\n                adapter.add(String.format(str, DESKTOP_FILE_SUFFIX));\n\n                selectPos = preferences.getUploadMapFileExtensionUrlSelectedPos();\n                mFileCategory = CATEGORY_MAPS_URL;\n            }\n\n            setFilename(binding.userInput, selectPos);\n            binding.userInput.requestFocus();\n            viewThemeUtils.material.colorTextInputLayout(binding.userInputContainer);\n\n            setupSpinner(adapter, selectPos, binding.userInput, binding.fileType);\n            if (adapter.getCount() == SINGLE_SPINNER_ENTRY) {\n                binding.labelFileType.setVisibility(View.GONE);\n                binding.fileType.setVisibility(View.GONE);\n            }\n            mSpinner = binding.fileType;\n\n            Dialog filenameDialog = createFilenameDialog(binding.getRoot(), binding.userInput, binding.fileType);\n            if (filenameDialog.getWindow() != null) {\n                filenameDialog.getWindow().setSoftInputMode(LayoutParams.SOFT_INPUT_STATE_VISIBLE);\n            }\n            return filenameDialog;\n        }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreateDialog from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onCreateDialog\n\n        Method Code: onNull\n        @Override\n        public Dialog onCreateDialog(Bundle savedInstanceState) {\n            mFilenameBase = new ArrayList<>();\n            mFilenameSuffix = new ArrayList<>();\n            mText = new ArrayList<>();\n\n            String subjectText = \"\";\n            String extraText = \"\";\n            if (getArguments() != null) {\n                if (getArguments().getString(KEY_SUBJECT_TEXT) != null) {\n                    subjectText = getArguments().getString(KEY_SUBJECT_TEXT);\n                }\n                if (getArguments().getString(KEY_EXTRA_TEXT) != null) {\n                    extraText = getArguments().getString(KEY_EXTRA_TEXT);\n                }\n            }\n\n            LayoutInflater inflater = getLayoutInflater();\n            final UploadFileDialogBinding binding = UploadFileDialogBinding.inflate(inflater);\n\n            ArrayAdapter<String> adapter\n                = new ArrayAdapter<>(requireContext(), android.R.layout.simple_spinner_item);\n            adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n\n            int selectPos = 0;\n            String filename = renameSafeFilename(subjectText);\n            if (filename == null) {\n                filename = \"\";\n            }\n            adapter.add(getString(R.string.upload_file_dialog_filetype_snippet_text));\n            mText.add(extraText);\n            mFilenameBase.add(filename);\n            mFilenameSuffix.add(TEXT_FILE_SUFFIX);\n            if (isIntentStartWithUrl(extraText)) {\n                String str = getString(R.string.upload_file_dialog_filetype_internet_shortcut);\n                mText.add(internetShortcutUrlText(extraText));\n                mFilenameBase.add(filename);\n                mFilenameSuffix.add(URL_FILE_SUFFIX);\n                adapter.add(String.format(str, URL_FILE_SUFFIX));\n\n                mText.add(internetShortcutWeblocText(extraText));\n                mFilenameBase.add(filename);\n                mFilenameSuffix.add(WEBLOC_FILE_SUFFIX);\n                adapter.add(String.format(str, WEBLOC_FILE_SUFFIX));\n\n                mText.add(internetShortcutDesktopText(extraText, filename));\n                mFilenameBase.add(filename);\n                mFilenameSuffix.add(DESKTOP_FILE_SUFFIX);\n                adapter.add(String.format(str, DESKTOP_FILE_SUFFIX));\n\n                selectPos = preferences.getUploadUrlFileExtensionUrlSelectedPos();\n                mFileCategory = CATEGORY_URL;\n            } else if (isIntentFromGoogleMap(subjectText, extraText)) {\n                String str = getString(R.string.upload_file_dialog_filetype_googlemap_shortcut);\n                String texts[] = extraText.split(\"\\n\");\n                mText.add(internetShortcutUrlText(texts[2]));\n                mFilenameBase.add(texts[0]);\n                mFilenameSuffix.add(URL_FILE_SUFFIX);\n                adapter.add(String.format(str, URL_FILE_SUFFIX));\n\n                mText.add(internetShortcutWeblocText(texts[2]));\n                mFilenameBase.add(texts[0]);\n                mFilenameSuffix.add(WEBLOC_FILE_SUFFIX);\n                adapter.add(String.format(str, WEBLOC_FILE_SUFFIX));\n\n                mText.add(internetShortcutDesktopText(texts[2], texts[0]));\n                mFilenameBase.add(texts[0]);\n                mFilenameSuffix.add(DESKTOP_FILE_SUFFIX);\n                adapter.add(String.format(str, DESKTOP_FILE_SUFFIX));\n\n                selectPos = preferences.getUploadMapFileExtensionUrlSelectedPos();\n                mFileCategory = CATEGORY_MAPS_URL;\n            }\n\n            setFilename(binding.userInput, selectPos);\n            binding.userInput.requestFocus();\n            viewThemeUtils.material.colorTextInputLayout(binding.userInputContainer);\n\n            setupSpinner(adapter, selectPos, binding.userInput, binding.fileType);\n            if (adapter.getCount() == SINGLE_SPINNER_ENTRY) {\n                binding.labelFileType.setVisibility(View.GONE);\n                binding.fileType.setVisibility(View.GONE);\n            }\n            mSpinner = binding.fileType;\n\n            Dialog filenameDialog = createFilenameDialog(binding.getRoot(), binding.userInput, binding.fileType);\n            if (filenameDialog.getWindow() != null) {\n                filenameDialog.getWindow().setSoftInputMode(LayoutParams.SOFT_INPUT_STATE_VISIBLE);\n            }\n            return filenameDialog;\n        }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onCreateDialog(_ savedInstanceState: Bundle?) -> Dialog {\n    mFilenameBase = []\n    mFilenameSuffix = []\n    mText = []\n\n    var subjectText = \"\"\n    var extraText = \"\"\n    if let arguments = self.arguments {\n        if let subject = arguments[KEY_SUBJECT_TEXT] as? String {\n            subjectText = subject\n        }\n        if let extra = arguments[KEY_EXTRA_TEXT] as? String {\n            extraText = extra\n        }\n    }\n\n    let inflater = self.layoutInflater\n    let binding = UploadFileDialogBinding.inflate(inflater)\n\n    let adapter = ArrayAdapter<String>(context: requireContext(), resource: android.R.layout.simple_spinner_item)\n    adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)\n\n    var selectPos = 0\n    var filename = renameSafeFilename(subjectText) ?? \"\"\n    adapter.add(getString(R.string.upload_file_dialog_filetype_snippet_text))\n    mText.append(extraText)\n    mFilenameBase.append(filename)\n    mFilenameSuffix.append(TEXT_FILE_SUFFIX)\n    \n    if isIntentStartWithUrl(extraText) {\n        let str = getString(R.string.upload_file_dialog_filetype_internet_shortcut)\n        mText.append(internetShortcutUrlText(extraText))\n        mFilenameBase.append(filename)\n        mFilenameSuffix.append(URL_FILE_SUFFIX)\n        adapter.add(String(format: str, URL_FILE_SUFFIX))\n\n        mText.append(internetShortcutWeblocText(extraText))\n        mFilenameBase.append(filename)\n        mFilenameSuffix.append(WEBLOC_FILE_SUFFIX)\n        adapter.add(String(format: str, WEBLOC_FILE_SUFFIX))\n\n        mText.append(internetShortcutDesktopText(extraText, filename))\n        mFilenameBase.append(filename)\n        mFilenameSuffix.append(DESKTOP_FILE_SUFFIX)\n        adapter.add(String(format: str, DESKTOP_FILE_SUFFIX))\n\n        selectPos = preferences.getUploadUrlFileExtensionUrlSelectedPos()\n        mFileCategory = CATEGORY_URL\n    } else if isIntentFromGoogleMap(subjectText, extraText) {\n        let str = getString(R.string.upload_file_dialog_filetype_googlemap_shortcut)\n        let texts = extraText.split(separator: \"\\n\")\n        mText.append(internetShortcutUrlText(String(texts[2])))\n        mFilenameBase.append(String(texts[0]))\n        mFilenameSuffix.append(URL_FILE_SUFFIX)\n        adapter.add(String(format: str, URL_FILE_SUFFIX))\n\n        mText.append(internetShortcutWeblocText(String(texts[2])))\n        mFilenameBase.append(String(texts[0]))\n        mFilenameSuffix.append(WEBLOC_FILE_SUFFIX)\n        adapter.add(String(format: str, WEBLOC_FILE_SUFFIX))\n\n        mText.append(internetShortcutDesktopText(String(texts[2]), String(texts[0])))\n        mFilenameBase.append(String(texts[0]))\n        mFilenameSuffix.append(DESKTOP_FILE_SUFFIX)\n        adapter.add(String(format: str, DESKTOP_FILE_SUFFIX))\n\n        selectPos = preferences.getUploadMapFileExtensionUrlSelectedPos()\n        mFileCategory = CATEGORY_MAPS_URL\n    }\n\n    setFilename(binding.userInput, selectPos)\n    binding.userInput.requestFocus()\n    viewThemeUtils.material.colorTextInputLayout(binding.userInputContainer)\n\n    setupSpinner(adapter, selectPos, binding.userInput, binding.fileType)\n    if adapter.count == SINGLE_SPINNER_ENTRY {\n        binding.labelFileType.visibility = .gone\n        binding.fileType.visibility = .gone\n    }\n    mSpinner = binding.fileType\n\n    let filenameDialog = createFilenameDialog(binding.root, binding.userInput, binding.fileType)\n    filenameDialog.window?.setSoftInputMode(LayoutParams.SOFT_INPUT_STATE_VISIBLE)\n    return filenameDialog\n}\n```"
    },
    {
        "method_name": "setupSpinner",
        "method_code": "ivate void setupSpinner(ArrayAdapter<String> adapter, int selectPos, final EditText userInput, Spinner spinner) {\n            spinner.setAdapter(adapter);\n            spinner.setSelection(selectPos, false);\n            spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\n                @Override\n                public void onItemSelected(AdapterView parent, View view, int position, long id) {\n                    Spinner spinner = (Spinner) parent;\n                    int selectPos = spinner.getSelectedItemPosition();\n                    setFilename(userInput, selectPos);\n                    saveSelection(selectPos);\n                }\n\n                @Override\n                public void onNothingSelected(AdapterView<?> parent) {\n                    // nothing to do\n                }\n            });\n        }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setupSpinner from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: setupSpinner\n\n        Method Code: ivate void setupSpinner(ArrayAdapter<String> adapter, int selectPos, final EditText userInput, Spinner spinner) {\n            spinner.setAdapter(adapter);\n            spinner.setSelection(selectPos, false);\n            spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\n                @Override\n                public void onItemSelected(AdapterView parent, View view, int position, long id) {\n                    Spinner spinner = (Spinner) parent;\n                    int selectPos = spinner.getSelectedItemPosition();\n                    setFilename(userInput, selectPos);\n                    saveSelection(selectPos);\n                }\n\n                @Override\n                public void onNothingSelected(AdapterView<?> parent) {\n                    // nothing to do\n                }\n            });\n        }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setupSpinner(adapter: [String], selectPos: Int, userInput: UITextField, spinner: UIPickerView) {\n    spinner.delegate = self\n    spinner.dataSource = self\n    spinner.selectRow(selectPos, inComponent: 0, animated: false)\n    self.selectedPosition = selectPos\n    self.userInput = userInput\n}\n\nextension YourViewController: UIPickerViewDelegate, UIPickerViewDataSource {\n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        return adapter.count\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        return adapter[row]\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {\n        setFilename(userInput, row)\n        saveSelection(row)\n    }\n}\n```"
    },
    {
        "method_name": "onItemSelected",
        "method_code": "verride\n                public void onItemSelected(AdapterView parent, View view, int position, long id) {\n                    Spinner spinner = (Spinner) parent;\n                    int selectPos = spinner.getSelectedItemPosition();\n                    setFilename(userInput, selectPos);\n                    saveSelection(selectPos);\n                }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onItemSelected from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onItemSelected\n\n        Method Code: verride\n                public void onItemSelected(AdapterView parent, View view, int position, long id) {\n                    Spinner spinner = (Spinner) parent;\n                    int selectPos = spinner.getSelectedItemPosition();\n                    setFilename(userInput, selectPos);\n                    saveSelection(selectPos);\n                }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onItemSelected(parent: UIPickerView, view: UIView, position: Int, id: Int64) {\n    let selectPos = parent.selectedRow(inComponent: 0)\n    setFilename(userInput: userInput, selectPos: selectPos)\n    saveSelection(selectPos: selectPos)\n}\n```"
    },
    {
        "method_name": "onNothingSelected",
        "method_code": "verride\n                public void onNothingSelected(AdapterView<?> parent) {\n                    // nothing to do\n                }\n ",
        "prompt": "\n        Please translate the following Java (Android) method titled onNothingSelected from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onNothingSelected\n\n        Method Code: verride\n                public void onNothingSelected(AdapterView<?> parent) {\n                    // nothing to do\n                }\n \n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onNothingSelected(_ parent: Any?) {\n    // nothing to do\n}\n```"
    },
    {
        "method_name": "createFilenameDialog",
        "method_code": "onNull\n        private Dialog createFilenameDialog(View view, final EditText userInput, final Spinner spinner) {\n            Builder builder = new Builder(requireActivity());\n            builder.setView(view);\n            builder.setTitle(R.string.upload_file_dialog_title);\n            builder.setPositiveButton(R.string.common_ok, (dialog, id) -> {\n                int selectPos = spinner.getSelectedItemPosition();\n\n                // verify if file name has suffix\n                String filename = userInput.getText().toString();\n                String suffix = mFilenameSuffix.get(selectPos);\n                if (!filename.endsWith(suffix)) {\n                    filename += suffix;\n                }\n\n                File file = createTempFile(mText.get(selectPos));\n\n                if (file == null) {\n                    getActivity().finish();\n                } else {\n                    String tmpName = file.getAbsolutePath();\n\n                    ((ReceiveExternalFilesActivity) getActivity()).uploadFile(tmpName, filename);\n                }\n            });\n            builder.setNeutralButton(R.string.common_cancel, (dialog, id) -> dialog.cancel());\n\n            return builder.create();\n        }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled createFilenameDialog from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: createFilenameDialog\n\n        Method Code: onNull\n        private Dialog createFilenameDialog(View view, final EditText userInput, final Spinner spinner) {\n            Builder builder = new Builder(requireActivity());\n            builder.setView(view);\n            builder.setTitle(R.string.upload_file_dialog_title);\n            builder.setPositiveButton(R.string.common_ok, (dialog, id) -> {\n                int selectPos = spinner.getSelectedItemPosition();\n\n                // verify if file name has suffix\n                String filename = userInput.getText().toString();\n                String suffix = mFilenameSuffix.get(selectPos);\n                if (!filename.endsWith(suffix)) {\n                    filename += suffix;\n                }\n\n                File file = createTempFile(mText.get(selectPos));\n\n                if (file == null) {\n                    getActivity().finish();\n                } else {\n                    String tmpName = file.getAbsolutePath();\n\n                    ((ReceiveExternalFilesActivity) getActivity()).uploadFile(tmpName, filename);\n                }\n            });\n            builder.setNeutralButton(R.string.common_cancel, (dialog, id) -> dialog.cancel());\n\n            return builder.create();\n        }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func createFilenameDialog(view: UIView, userInput: UITextField, spinner: UIPickerView) -> UIAlertController {\n    let alertController = UIAlertController(title: NSLocalizedString(\"upload_file_dialog_title\", comment: \"\"), message: nil, preferredStyle: .alert)\n    alertController.setValue(view, forKey: \"contentViewController\")\n\n    let okAction = UIAlertAction(title: NSLocalizedString(\"common_ok\", comment: \"\"), style: .default) { _ in\n        let selectPos = spinner.selectedRow(inComponent: 0)\n\n        // verify if file name has suffix\n        var filename = userInput.text ?? \"\"\n        let suffix = self.mFilenameSuffix[selectPos]\n        if !filename.hasSuffix(suffix) {\n            filename += suffix\n        }\n\n        if let file = self.createTempFile(self.mText[selectPos]) {\n            let tmpName = file.path\n            (self as? ReceiveExternalFilesActivity)?.uploadFile(tmpName, filename)\n        } else {\n            self.dismiss(animated: true, completion: nil)\n        }\n    }\n    alertController.addAction(okAction)\n\n    let cancelAction = UIAlertAction(title: NSLocalizedString(\"common_cancel\", comment: \"\"), style: .cancel) { _ in\n        alertController.dismiss(animated: true, completion: nil)\n    }\n    alertController.addAction(cancelAction)\n\n    return alertController\n}\n```"
    },
    {
        "method_name": "onPause",
        "method_code": "blic void onPause() {\n            hideSpinnerDropDown(mSpinner);\n            super.onPause();\n        }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onPause from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onPause\n\n        Method Code: blic void onPause() {\n            hideSpinnerDropDown(mSpinner);\n            super.onPause();\n        }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n    hideSpinnerDropDown(mSpinner)\n}\n```"
    },
    {
        "method_name": "saveSelection",
        "method_code": "ivate void saveSelection(int selectPos) {\n            switch (mFileCategory) {\n                case CATEGORY_URL:\n                    preferences.setUploadUrlFileExtensionUrlSelectedPos(selectPos);\n                    break;\n                case CATEGORY_MAPS_URL:\n                    preferences.setUploadMapFileExtensionUrlSelectedPos(selectPos);\n                    break;\n                default:\n                    Log_OC.d(TAG, \"Simple text snippet only: no selection to be persisted\");\n                    break;\n            }\n        }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled saveSelection from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: saveSelection\n\n        Method Code: ivate void saveSelection(int selectPos) {\n            switch (mFileCategory) {\n                case CATEGORY_URL:\n                    preferences.setUploadUrlFileExtensionUrlSelectedPos(selectPos);\n                    break;\n                case CATEGORY_MAPS_URL:\n                    preferences.setUploadMapFileExtensionUrlSelectedPos(selectPos);\n                    break;\n                default:\n                    Log_OC.d(TAG, \"Simple text snippet only: no selection to be persisted\");\n                    break;\n            }\n        }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func saveSelection(selectPos: Int) {\n    switch mFileCategory {\n    case .CATEGORY_URL:\n        preferences.setUploadUrlFileExtensionUrlSelectedPos(selectPos)\n    case .CATEGORY_MAPS_URL:\n        preferences.setUploadMapFileExtensionUrlSelectedPos(selectPos)\n    default:\n        Log_OC.d(TAG, \"Simple text snippet only: no selection to be persisted\")\n    }\n}\n```"
    },
    {
        "method_name": "hideSpinnerDropDown",
        "method_code": "ivate void hideSpinnerDropDown(Spinner spinner) {\n            try {\n                Method method = Spinner.class.getDeclaredMethod(\"onDetachedFromWindow\");\n                method.setAccessible(true);\n                method.invoke(spinner);\n            } catch (Exception e) {\n                Log_OC.e(TAG, \"onDetachedFromWindow\", e);\n            }\n        }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled hideSpinnerDropDown from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: hideSpinnerDropDown\n\n        Method Code: ivate void hideSpinnerDropDown(Spinner spinner) {\n            try {\n                Method method = Spinner.class.getDeclaredMethod(\"onDetachedFromWindow\");\n                method.setAccessible(true);\n                method.invoke(spinner);\n            } catch (Exception e) {\n                Log_OC.e(TAG, \"onDetachedFromWindow\", e);\n            }\n        }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func hideSpinnerDropDown(spinner: UIPickerView) {\n    do {\n        let method = UIPickerView.self.instanceMethod(for: Selector((\"onDetachedFromWindow\")))\n        if let method = method {\n            let implementation = method.getImplementation()\n            typealias Function = @convention(c) (AnyObject, Selector) -> Void\n            let function = unsafeBitCast(implementation, to: Function.self)\n            function(spinner, Selector((\"onDetachedFromWindow\")))\n        }\n    } catch {\n        print(\"Error in onDetachedFromWindow: \\(error)\")\n    }\n}\n```"
    },
    {
        "method_name": "setFilename",
        "method_code": "ivate void setFilename(EditText inputText, int selectPos) {\n            String filename = mFilenameBase.get(selectPos) + mFilenameSuffix.get(selectPos);\n            inputText.setText(filename);\n            int selectionStart = 0;\n            int extensionStart = filename.lastIndexOf('.');\n            int selectionEnd = extensionStart >= 0 ? extensionStart : filename.length();\n            if (selectionEnd >= 0) {\n                inputText.setSelection(\n                    Math.min(selectionStart, selectionEnd),\n                    Math.max(selectionStart, selectionEnd));\n            }\n        }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setFilename from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: setFilename\n\n        Method Code: ivate void setFilename(EditText inputText, int selectPos) {\n            String filename = mFilenameBase.get(selectPos) + mFilenameSuffix.get(selectPos);\n            inputText.setText(filename);\n            int selectionStart = 0;\n            int extensionStart = filename.lastIndexOf('.');\n            int selectionEnd = extensionStart >= 0 ? extensionStart : filename.length();\n            if (selectionEnd >= 0) {\n                inputText.setSelection(\n                    Math.min(selectionStart, selectionEnd),\n                    Math.max(selectionStart, selectionEnd));\n            }\n        }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setFilename(inputText: UITextField, selectPos: Int) {\n    let filename = mFilenameBase[selectPos] + mFilenameSuffix[selectPos]\n    inputText.text = filename\n    let selectionStart = 0\n    let extensionStart = filename.lastIndex(of: \".\") ?? filename.endIndex\n    let selectionEnd = extensionStart != filename.endIndex ? filename.distance(from: filename.startIndex, to: extensionStart) : filename.count\n    if selectionEnd >= 0 {\n        let startPosition = inputText.position(from: inputText.beginningOfDocument, offset: min(selectionStart, selectionEnd))!\n        let endPosition = inputText.position(from: inputText.beginningOfDocument, offset: max(selectionStart, selectionEnd))!\n        inputText.selectedTextRange = inputText.textRange(from: startPosition, to: endPosition)\n    }\n}\n```"
    },
    {
        "method_name": "isIntentFromGoogleMap",
        "method_code": "ivate boolean isIntentFromGoogleMap(String subjectText, String extraText) {\n            String texts[] = extraText.split(\"\\n\");\n            if (texts.length != EXTRA_TEXT_LENGTH) {\n                return false;\n            }\n\n            if (texts[0].length() == 0 || !subjectText.equals(texts[0])) {\n                return false;\n            }\n\n            return texts[2].startsWith(\"https://goo.gl/maps/\");\n        }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isIntentFromGoogleMap from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: isIntentFromGoogleMap\n\n        Method Code: ivate boolean isIntentFromGoogleMap(String subjectText, String extraText) {\n            String texts[] = extraText.split(\"\\n\");\n            if (texts.length != EXTRA_TEXT_LENGTH) {\n                return false;\n            }\n\n            if (texts[0].length() == 0 || !subjectText.equals(texts[0])) {\n                return false;\n            }\n\n            return texts[2].startsWith(\"https://goo.gl/maps/\");\n        }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func isIntentFromGoogleMap(subjectText: String, extraText: String) -> Bool {\n    let texts = extraText.split(separator: \"\\n\")\n    if texts.count != EXTRA_TEXT_LENGTH {\n        return false\n    }\n\n    if texts[0].isEmpty || subjectText != String(texts[0]) {\n        return false\n    }\n\n    return texts[2].hasPrefix(\"https://goo.gl/maps/\")\n}\n```"
    },
    {
        "method_name": "isIntentStartWithUrl",
        "method_code": "ivate boolean isIntentStartWithUrl(String extraText) {\n            return extraText.startsWith(\"http://\") || extraText.startsWith(\"https://\");\n        }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isIntentStartWithUrl from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: isIntentStartWithUrl\n\n        Method Code: ivate boolean isIntentStartWithUrl(String extraText) {\n            return extraText.startsWith(\"http://\") || extraText.startsWith(\"https://\");\n        }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func isIntentStartWithUrl(_ extraText: String) -> Bool {\n    return extraText.hasPrefix(\"http://\") || extraText.hasPrefix(\"https://\")\n}\n```"
    },
    {
        "method_name": "renameSafeFilename",
        "method_code": "ullable\n        private String renameSafeFilename(String filename) {\n            String safeFilename = filename;\n            safeFilename = safeFilename.replaceAll(\"[?]\", \"_\");\n            safeFilename = safeFilename.replaceAll(\"\\\"\", \"_\");\n            safeFilename = safeFilename.replaceAll(\"/\", \"_\");\n            safeFilename = safeFilename.replaceAll(\"<\", \"_\");\n            safeFilename = safeFilename.replaceAll(\">\", \"_\");\n            safeFilename = safeFilename.replaceAll(\"[*]\", \"_\");\n            safeFilename = safeFilename.replaceAll(\"[|]\", \"_\");\n            safeFilename = safeFilename.replaceAll(\";\", \"_\");\n            safeFilename = safeFilename.replaceAll(\"=\", \"_\");\n            safeFilename = safeFilename.replaceAll(\",\", \"_\");\n\n            int maxLength = 128;\n            if (safeFilename.getBytes(FILENAME_ENCODING).length > maxLength) {\n                safeFilename = new String(safeFilename.getBytes(FILENAME_ENCODING), 0, maxLength, FILENAME_ENCODING);\n            }\n            return safeFilename;\n        }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled renameSafeFilename from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: renameSafeFilename\n\n        Method Code: ullable\n        private String renameSafeFilename(String filename) {\n            String safeFilename = filename;\n            safeFilename = safeFilename.replaceAll(\"[?]\", \"_\");\n            safeFilename = safeFilename.replaceAll(\"\\\"\", \"_\");\n            safeFilename = safeFilename.replaceAll(\"/\", \"_\");\n            safeFilename = safeFilename.replaceAll(\"<\", \"_\");\n            safeFilename = safeFilename.replaceAll(\">\", \"_\");\n            safeFilename = safeFilename.replaceAll(\"[*]\", \"_\");\n            safeFilename = safeFilename.replaceAll(\"[|]\", \"_\");\n            safeFilename = safeFilename.replaceAll(\";\", \"_\");\n            safeFilename = safeFilename.replaceAll(\"=\", \"_\");\n            safeFilename = safeFilename.replaceAll(\",\", \"_\");\n\n            int maxLength = 128;\n            if (safeFilename.getBytes(FILENAME_ENCODING).length > maxLength) {\n                safeFilename = new String(safeFilename.getBytes(FILENAME_ENCODING), 0, maxLength, FILENAME_ENCODING);\n            }\n            return safeFilename;\n        }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func renameSafeFilename(_ filename: String) -> String {\n    var safeFilename = filename\n    safeFilename = safeFilename.replacingOccurrences(of: \"?\", with: \"_\")\n    safeFilename = safeFilename.replacingOccurrences(of: \"\\\"\", with: \"_\")\n    safeFilename = safeFilename.replacingOccurrences(of: \"/\", with: \"_\")\n    safeFilename = safeFilename.replacingOccurrences(of: \"<\", with: \"_\")\n    safeFilename = safeFilename.replacingOccurrences(of: \">\", with: \"_\")\n    safeFilename = safeFilename.replacingOccurrences(of: \"*\", with: \"_\")\n    safeFilename = safeFilename.replacingOccurrences(of: \"|\", with: \"_\")\n    safeFilename = safeFilename.replacingOccurrences(of: \";\", with: \"_\")\n    safeFilename = safeFilename.replacingOccurrences(of: \"=\", with: \"_\")\n    safeFilename = safeFilename.replacingOccurrences(of: \",\", with: \"_\")\n\n    let maxLength = 128\n    if let data = safeFilename.data(using: .utf8), data.count > maxLength {\n        safeFilename = String(data: data.prefix(maxLength), encoding: .utf8) ?? safeFilename\n    }\n    return safeFilename\n}\n```"
    },
    {
        "method_name": "internetShortcutUrlText",
        "method_code": "ivate String internetShortcutUrlText(String url) {\n            return \"[InternetShortcut]\\r\\n\" +\n                \"URL=\" + url + \"\\r\\n\";\n        }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled internetShortcutUrlText from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: internetShortcutUrlText\n\n        Method Code: ivate String internetShortcutUrlText(String url) {\n            return \"[InternetShortcut]\\r\\n\" +\n                \"URL=\" + url + \"\\r\\n\";\n        }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func internetShortcutUrlText(url: String) -> String {\n    return \"[InternetShortcut]\\r\\nURL=\\(url)\\r\\n\"\n}\n```"
    },
    {
        "method_name": "internetShortcutWeblocText",
        "method_code": "ivate String internetShortcutWeblocText(String url) {\n            return \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n                \"<!DOCTYPE plist PUBLIC \\\"-//Apple Computer//DTD PLIST 1.0//EN\\\" \\\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\\\">\\n\" +\n                \"<plist version=\\\"1.0\\\">\\n\" +\n                \"<dict>\\n\" +\n                \"<key>URL</key>\\n\" +\n                \"<string>\" + url + \"</string>\\n\" +\n                \"</dict>\\n\" +\n                \"</plist>\\n\";\n        }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled internetShortcutWeblocText from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: internetShortcutWeblocText\n\n        Method Code: ivate String internetShortcutWeblocText(String url) {\n            return \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n                \"<!DOCTYPE plist PUBLIC \\\"-//Apple Computer//DTD PLIST 1.0//EN\\\" \\\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\\\">\\n\" +\n                \"<plist version=\\\"1.0\\\">\\n\" +\n                \"<dict>\\n\" +\n                \"<key>URL</key>\\n\" +\n                \"<string>\" + url + \"</string>\\n\" +\n                \"</dict>\\n\" +\n                \"</plist>\\n\";\n        }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc internetShortcutWeblocText(url: String) -> String {\n    return \"\"\"\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n    <plist version=\"1.0\">\n    <dict>\n    <key>URL</key>\n    <string>\\(url)</string>\n    </dict>\n    </plist>\n    \"\"\"\n}\n```"
    },
    {
        "method_name": "internetShortcutDesktopText",
        "method_code": "ivate String internetShortcutDesktopText(String url, String filename) {\n            return \"[Desktop Entry]\\n\" +\n                \"Encoding=UTF-8\\n\" +\n                \"Name=\" + filename + \"\\n\" +\n                \"Type=Link\\n\" +\n                \"URL=\" + url + \"\\n\" +\n                \"Icon=text-html\";\n        }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled internetShortcutDesktopText from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: internetShortcutDesktopText\n\n        Method Code: ivate String internetShortcutDesktopText(String url, String filename) {\n            return \"[Desktop Entry]\\n\" +\n                \"Encoding=UTF-8\\n\" +\n                \"Name=\" + filename + \"\\n\" +\n                \"Type=Link\\n\" +\n                \"URL=\" + url + \"\\n\" +\n                \"Icon=text-html\";\n        }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc internetShortcutDesktopText(url: String, filename: String) -> String {\n    return \"[Desktop Entry]\\n\" +\n        \"Encoding=UTF-8\\n\" +\n        \"Name=\\(filename)\\n\" +\n        \"Type=Link\\n\" +\n        \"URL=\\(url)\\n\" +\n        \"Icon=text-html\"\n}\n```"
    },
    {
        "method_name": "createTempFile",
        "method_code": "ullable\n        private File createTempFile(String text) {\n            File file = new File(getActivity().getCacheDir(), \"tmp.tmp\");\n            FileWriter fw = null;\n            try {\n                fw = new FileWriter(file);\n                fw.write(text);\n            } catch (IOException e) {\n                Log_OC.d(TAG, \"Error \", e);\n                return null;\n            } finally {\n                if (fw != null) {\n                    try {\n                        fw.close();\n                    } catch (IOException e) {\n                        Log_OC.d(TAG, \"Error closing file writer \", e);\n                    }\n                }\n            }\n            return file;\n        }\n ",
        "prompt": "\n        Please translate the following Java (Android) method titled createTempFile from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: createTempFile\n\n        Method Code: ullable\n        private File createTempFile(String text) {\n            File file = new File(getActivity().getCacheDir(), \"tmp.tmp\");\n            FileWriter fw = null;\n            try {\n                fw = new FileWriter(file);\n                fw.write(text);\n            } catch (IOException e) {\n                Log_OC.d(TAG, \"Error \", e);\n                return null;\n            } finally {\n                if (fw != null) {\n                    try {\n                        fw.close();\n                    } catch (IOException e) {\n                        Log_OC.d(TAG, \"Error closing file writer \", e);\n                    }\n                }\n            }\n            return file;\n        }\n \n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func createTempFile(text: String) -> URL? {\n    let fileURL = FileManager.default.temporaryDirectory.appendingPathComponent(\"tmp.tmp\")\n    do {\n        try text.write(to: fileURL, atomically: true, encoding: .utf8)\n    } catch {\n        print(\"Error: \\(error)\")\n        return nil\n    }\n    return fileURL\n}\n```"
    },
    {
        "method_name": "onBackPressed",
        "method_code": "verride\n    public void onBackPressed() {\n        if (mParents.size() <= SINGLE_PARENT) {\n            super.onBackPressed();\n        } else {\n            mParents.pop();\n            browseToFolderIfItExists();\n        }\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onBackPressed from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onBackPressed\n\n        Method Code: verride\n    public void onBackPressed() {\n        if (mParents.size() <= SINGLE_PARENT) {\n            super.onBackPressed();\n        } else {\n            mParents.pop();\n            browseToFolderIfItExists();\n        }\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onBackPressed() {\n    if mParents.count <= SINGLE_PARENT {\n        super.onBackPressed()\n    } else {\n        mParents.removeLast()\n        browseToFolderIfItExists()\n    }\n}\n```"
    },
    {
        "method_name": "onClick",
        "method_code": "verride\n    public void onClick(View v) {\n        // click on button\n        int id = v.getId();\n\n        if (id == R.id.uploader_choose_folder) {\n            mUploadPath = \"\";   // first element in mParents is root dir, represented by \"\";\n            // init mUploadPath with \"/\" results in a \"//\" prefix\n\n            StringBuilder stringBuilder = new StringBuilder();\n            for (String p : mParents) {\n                stringBuilder.append(p).append(OCFile.PATH_SEPARATOR);\n            }\n            mUploadPath = stringBuilder.toString();\n\n            if (mUploadFromTmpFile) {\n                DialogInputUploadFilename dialog = DialogInputUploadFilename.newInstance(mSubjectText, mExtraText);\n                dialog.show(getSupportFragmentManager(), null);\n            } else {\n                Log_OC.d(TAG, \"Uploading file to dir \" + mUploadPath);\n                uploadFiles();\n            }\n        } else if (id == R.id.uploader_cancel) {\n            finish();\n        } else {\n            throw new IllegalArgumentException(\"Wrong element clicked\");\n        }\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onClick from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onClick\n\n        Method Code: verride\n    public void onClick(View v) {\n        // click on button\n        int id = v.getId();\n\n        if (id == R.id.uploader_choose_folder) {\n            mUploadPath = \"\";   // first element in mParents is root dir, represented by \"\";\n            // init mUploadPath with \"/\" results in a \"//\" prefix\n\n            StringBuilder stringBuilder = new StringBuilder();\n            for (String p : mParents) {\n                stringBuilder.append(p).append(OCFile.PATH_SEPARATOR);\n            }\n            mUploadPath = stringBuilder.toString();\n\n            if (mUploadFromTmpFile) {\n                DialogInputUploadFilename dialog = DialogInputUploadFilename.newInstance(mSubjectText, mExtraText);\n                dialog.show(getSupportFragmentManager(), null);\n            } else {\n                Log_OC.d(TAG, \"Uploading file to dir \" + mUploadPath);\n                uploadFiles();\n            }\n        } else if (id == R.id.uploader_cancel) {\n            finish();\n        } else {\n            throw new IllegalArgumentException(\"Wrong element clicked\");\n        }\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onClick(_ v: UIView) {\n    let id = v.tag\n\n    if id == R.id.uploader_choose_folder {\n        mUploadPath = \"\"\n\n        let stringBuilder = NSMutableString()\n        for p in mParents {\n            stringBuilder.append(p + OCFile.PATH_SEPARATOR)\n        }\n        mUploadPath = stringBuilder as String\n\n        if mUploadFromTmpFile {\n            let dialog = DialogInputUploadFilename.newInstance(mSubjectText, mExtraText)\n            dialog.show(self, sender: nil)\n        } else {\n            Log_OC.d(TAG, \"Uploading file to dir \\(mUploadPath)\")\n            uploadFiles()\n        }\n    } else if id == R.id.uploader_cancel {\n        self.dismiss(animated: true, completion: nil)\n    } else {\n        fatalError(\"Wrong element clicked\")\n    }\n}\n```"
    },
    {
        "method_name": "onActivityResult",
        "method_code": "verride\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n        Log_OC.i(TAG, \"result received. req: \" + requestCode + \" res: \" + resultCode);\n        if (requestCode == REQUEST_CODE__SETUP_ACCOUNT) {\n            if (resultCode == RESULT_CANCELED) {\n                finish();\n            }\n            Account[] accounts = mAccountManager.getAccountsByType(MainApp.getAuthTokenType());\n            if (accounts.length == 0) {\n                DialogNoAccount dialog = new DialogNoAccount(viewThemeUtils);\n                dialog.show(getSupportFragmentManager(), null);\n            } else {\n                // there is no need for checking for is there more then one\n                // account at this point\n                // since account setup can set only one account at time\n                setAccount(accounts[0], false);\n                populateDirectoryList();\n            }\n        }\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onActivityResult from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onActivityResult\n\n        Method Code: verride\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n        Log_OC.i(TAG, \"result received. req: \" + requestCode + \" res: \" + resultCode);\n        if (requestCode == REQUEST_CODE__SETUP_ACCOUNT) {\n            if (resultCode == RESULT_CANCELED) {\n                finish();\n            }\n            Account[] accounts = mAccountManager.getAccountsByType(MainApp.getAuthTokenType());\n            if (accounts.length == 0) {\n                DialogNoAccount dialog = new DialogNoAccount(viewThemeUtils);\n                dialog.show(getSupportFragmentManager(), null);\n            } else {\n                // there is no need for checking for is there more then one\n                // account at this point\n                // since account setup can set only one account at time\n                setAccount(accounts[0], false);\n                populateDirectoryList();\n            }\n        }\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n    NotificationCenter.default.addObserver(self, selector: #selector(handleActivityResult(notification:)), name: .activityResult, object: nil)\n}\n\n@objc func handleActivityResult(notification: Notification) {\n    guard let userInfo = notification.userInfo,\n          let requestCode = userInfo[\"requestCode\"] as? Int,\n          let resultCode = userInfo[\"resultCode\"] as? Int else { return }\n    \n    print(\"result received. req: \\(requestCode) res: \\(resultCode)\")\n    \n    if requestCode == REQUEST_CODE__SETUP_ACCOUNT {\n        if resultCode == RESULT_CANCELED {\n            self.dismiss(animated: true, completion: nil)\n        }\n        \n        let accounts = mAccountManager.accounts(withAccountType: MainApp.getAuthTokenType())\n        if accounts.isEmpty {\n            let dialog = DialogNoAccount(viewThemeUtils: viewThemeUtils)\n            dialog.show(self, sender: nil)\n        } else {\n            setAccount(accounts[0], false)\n            populateDirectoryList()\n        }\n    }\n}\n```"
    },
    {
        "method_name": "setupActionBarSubtitle",
        "method_code": "ivate void setupActionBarSubtitle() {\n        ActionBar actionBar = getSupportActionBar();\n\n        if (isHaveMultipleAccount() && actionBar != null) {\n            viewThemeUtils.files.themeActionBar(this, actionBar, getAccount().name);\n        } else if (actionBar != null) {\n            actionBar.setSubtitle(null);\n        }\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setupActionBarSubtitle from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: setupActionBarSubtitle\n\n        Method Code: ivate void setupActionBarSubtitle() {\n        ActionBar actionBar = getSupportActionBar();\n\n        if (isHaveMultipleAccount() && actionBar != null) {\n            viewThemeUtils.files.themeActionBar(this, actionBar, getAccount().name);\n        } else if (actionBar != null) {\n            actionBar.setSubtitle(null);\n        }\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setupActionBarSubtitle() {\n    if let actionBar = self.navigationController?.navigationBar {\n        if isHaveMultipleAccount() {\n            viewThemeUtils.files.themeActionBar(self, actionBar, getAccount().name)\n        } else {\n            actionBar.topItem?.subtitle = nil\n        }\n    }\n}\n```"
    },
    {
        "method_name": "populateDirectoryList",
        "method_code": "ivate void populateDirectoryList() {\n        setupEmptyList();\n        setupToolbar();\n        ActionBar actionBar = getSupportActionBar();\n        setupActionBarSubtitle();\n\n        binding.toolbarLayout.sortListButtonGroup.setVisibility(View.VISIBLE);\n        binding.toolbarLayout.switchGridViewButton.setVisibility(View.GONE);\n\n        String current_dir = mParents.peek();\n        boolean notRoot = mParents.size() > 1;\n\n        if (actionBar != null) {\n            if (TextUtils.isEmpty(current_dir)) {\n                viewThemeUtils.files.themeActionBar(this, actionBar, R.string.uploader_top_message);\n            } else {\n                viewThemeUtils.files.themeActionBar(this, actionBar, current_dir);\n            }\n\n            actionBar.setDisplayHomeAsUpEnabled(notRoot);\n            actionBar.setHomeButtonEnabled(notRoot);\n        }\n\n        String full_path = generatePath(mParents);\n\n        Log_OC.d(TAG, \"Populating view with content of : \" + full_path);\n\n        mFile = getStorageManager().getFileByPath(full_path);\n        if (mFile != null) {\n            List<OCFile> files = getStorageManager().getFolderContent(mFile, false);\n\n            if (files.isEmpty()) {\n                setMessageForEmptyList(R.string.file_list_empty_headline, R.string.empty,\n                                       R.drawable.uploads);\n                mEmptyListContainer.setVisibility(View.VISIBLE);\n                binding.list.setVisibility(View.GONE);\n            } else {\n                mEmptyListContainer.setVisibility(View.GONE);\n                files = sortFileList(files);\n                setupReceiveExternalFilesAdapter(files);\n            }\n\n            MaterialButton btnChooseFolder = binding.uploaderChooseFolder;\n            viewThemeUtils.material.colorMaterialButtonPrimaryFilled(btnChooseFolder);\n            btnChooseFolder.setOnClickListener(this);\n\n            btnChooseFolder.setEnabled(mFile.canWrite());\n\n            viewThemeUtils.platform.themeStatusBar(this);\n\n            viewThemeUtils.material.colorMaterialButtonPrimaryOutlined(binding.uploaderCancel);\n            binding.uploaderCancel.setOnClickListener(this);\n\n            sortButton = binding.toolbarLayout.sortButton;\n            FileSortOrder sortOrder = preferences.getSortOrderByFolder(mFile);\n            sortButton.setText(DisplayUtils.getSortOrderStringId(sortOrder));\n            sortButton.setOnClickListener(l -> openSortingOrderDialogFragment(getSupportFragmentManager(), sortOrder));\n        }\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled populateDirectoryList from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: populateDirectoryList\n\n        Method Code: ivate void populateDirectoryList() {\n        setupEmptyList();\n        setupToolbar();\n        ActionBar actionBar = getSupportActionBar();\n        setupActionBarSubtitle();\n\n        binding.toolbarLayout.sortListButtonGroup.setVisibility(View.VISIBLE);\n        binding.toolbarLayout.switchGridViewButton.setVisibility(View.GONE);\n\n        String current_dir = mParents.peek();\n        boolean notRoot = mParents.size() > 1;\n\n        if (actionBar != null) {\n            if (TextUtils.isEmpty(current_dir)) {\n                viewThemeUtils.files.themeActionBar(this, actionBar, R.string.uploader_top_message);\n            } else {\n                viewThemeUtils.files.themeActionBar(this, actionBar, current_dir);\n            }\n\n            actionBar.setDisplayHomeAsUpEnabled(notRoot);\n            actionBar.setHomeButtonEnabled(notRoot);\n        }\n\n        String full_path = generatePath(mParents);\n\n        Log_OC.d(TAG, \"Populating view with content of : \" + full_path);\n\n        mFile = getStorageManager().getFileByPath(full_path);\n        if (mFile != null) {\n            List<OCFile> files = getStorageManager().getFolderContent(mFile, false);\n\n            if (files.isEmpty()) {\n                setMessageForEmptyList(R.string.file_list_empty_headline, R.string.empty,\n                                       R.drawable.uploads);\n                mEmptyListContainer.setVisibility(View.VISIBLE);\n                binding.list.setVisibility(View.GONE);\n            } else {\n                mEmptyListContainer.setVisibility(View.GONE);\n                files = sortFileList(files);\n                setupReceiveExternalFilesAdapter(files);\n            }\n\n            MaterialButton btnChooseFolder = binding.uploaderChooseFolder;\n            viewThemeUtils.material.colorMaterialButtonPrimaryFilled(btnChooseFolder);\n            btnChooseFolder.setOnClickListener(this);\n\n            btnChooseFolder.setEnabled(mFile.canWrite());\n\n            viewThemeUtils.platform.themeStatusBar(this);\n\n            viewThemeUtils.material.colorMaterialButtonPrimaryOutlined(binding.uploaderCancel);\n            binding.uploaderCancel.setOnClickListener(this);\n\n            sortButton = binding.toolbarLayout.sortButton;\n            FileSortOrder sortOrder = preferences.getSortOrderByFolder(mFile);\n            sortButton.setText(DisplayUtils.getSortOrderStringId(sortOrder));\n            sortButton.setOnClickListener(l -> openSortingOrderDialogFragment(getSupportFragmentManager(), sortOrder));\n        }\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func populateDirectoryList() {\n    setupEmptyList()\n    setupToolbar()\n    let actionBar = navigationController?.navigationBar\n    setupActionBarSubtitle()\n\n    binding.toolbarLayout.sortListButtonGroup.isHidden = false\n    binding.toolbarLayout.switchGridViewButton.isHidden = true\n\n    let currentDir = mParents.last\n    let notRoot = mParents.count > 1\n\n    if let actionBar = actionBar {\n        if currentDir?.isEmpty ?? true {\n            viewThemeUtils.files.themeActionBar(self, actionBar, R.string.uploader_top_message)\n        } else {\n            viewThemeUtils.files.themeActionBar(self, actionBar, currentDir!)\n        }\n\n        navigationItem.hidesBackButton = !notRoot\n    }\n\n    let fullPath = generatePath(mParents)\n\n    print(\"Populating view with content of : \\(fullPath)\")\n\n    mFile = getStorageManager().getFileByPath(fullPath)\n    if let mFile = mFile {\n        var files = getStorageManager().getFolderContent(mFile, false)\n\n        if files.isEmpty {\n            setMessageForEmptyList(R.string.file_list_empty_headline, R.string.empty, R.drawable.uploads)\n            mEmptyListContainer.isHidden = false\n            binding.list.isHidden = true\n        } else {\n            mEmptyListContainer.isHidden = true\n            files = sortFileList(files)\n            setupReceiveExternalFilesAdapter(files)\n        }\n\n        let btnChooseFolder = binding.uploaderChooseFolder\n        viewThemeUtils.material.colorMaterialButtonPrimaryFilled(btnChooseFolder)\n        btnChooseFolder.addTarget(self, action: #selector(buttonClicked), for: .touchUpInside)\n\n        btnChooseFolder.isEnabled = mFile.canWrite()\n\n        viewThemeUtils.platform.themeStatusBar(self)\n\n        viewThemeUtils.material.colorMaterialButtonPrimaryOutlined(binding.uploaderCancel)\n        binding.uploaderCancel.addTarget(self, action: #selector(buttonClicked), for: .touchUpInside)\n\n        sortButton = binding.toolbarLayout.sortButton\n        let sortOrder = preferences.getSortOrderByFolder(mFile)\n        sortButton.setTitle(DisplayUtils.getSortOrderStringId(sortOrder), for: .normal)\n        sortButton.addTarget(self, action: #selector(openSortingOrderDialogFragment), for: .touchUpInside)\n    }\n}\n```"
    },
    {
        "method_name": "setupReceiveExternalFilesAdapter",
        "method_code": "ivate void setupReceiveExternalFilesAdapter(List<OCFile> files) {\n        receiveExternalFilesAdapter = new ReceiveExternalFilesAdapter(files,\n                                                                      this,\n                                                                      getUser().get(),\n                                                                      getStorageManager(),\n                                                                      viewThemeUtils,\n                                                                      syncedFolderProvider,\n                                                                      this);\n\n\n        binding.list.setLayoutManager(new LinearLayoutManager(this));\n        binding.list.setAdapter(receiveExternalFilesAdapter);\n        binding.list.setVisibility(View.VISIBLE);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setupReceiveExternalFilesAdapter from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: setupReceiveExternalFilesAdapter\n\n        Method Code: ivate void setupReceiveExternalFilesAdapter(List<OCFile> files) {\n        receiveExternalFilesAdapter = new ReceiveExternalFilesAdapter(files,\n                                                                      this,\n                                                                      getUser().get(),\n                                                                      getStorageManager(),\n                                                                      viewThemeUtils,\n                                                                      syncedFolderProvider,\n                                                                      this);\n\n\n        binding.list.setLayoutManager(new LinearLayoutManager(this));\n        binding.list.setAdapter(receiveExternalFilesAdapter);\n        binding.list.setVisibility(View.VISIBLE);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setupReceiveExternalFilesAdapter(files: [OCFile]) {\n    receiveExternalFilesAdapter = ReceiveExternalFilesAdapter(files: files,\n                                                              context: self,\n                                                              user: getUser().get(),\n                                                              storageManager: getStorageManager(),\n                                                              viewThemeUtils: viewThemeUtils,\n                                                              syncedFolderProvider: syncedFolderProvider,\n                                                              activity: self)\n\n    binding.list.layoutManager = LinearLayoutManager(context: self)\n    binding.list.adapter = receiveExternalFilesAdapter\n    binding.list.isHidden = false\n}\n```"
    },
    {
        "method_name": "setupEmptyList",
        "method_code": "otected void setupEmptyList() {\n        mEmptyListContainer = binding.emptyView.emptyListView;\n        mEmptyListMessage = binding.emptyView.emptyListViewText;\n        mEmptyListHeadline = binding.emptyView.emptyListViewHeadline;\n        mEmptyListIcon = binding.emptyView.emptyListIcon;\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setupEmptyList from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: setupEmptyList\n\n        Method Code: otected void setupEmptyList() {\n        mEmptyListContainer = binding.emptyView.emptyListView;\n        mEmptyListMessage = binding.emptyView.emptyListViewText;\n        mEmptyListHeadline = binding.emptyView.emptyListViewHeadline;\n        mEmptyListIcon = binding.emptyView.emptyListIcon;\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setupEmptyList() {\n    mEmptyListContainer = binding.emptyView.emptyListView\n    mEmptyListMessage = binding.emptyView.emptyListViewText\n    mEmptyListHeadline = binding.emptyView.emptyListViewHeadline\n    mEmptyListIcon = binding.emptyView.emptyListIcon\n}\n```"
    },
    {
        "method_name": "setMessageForEmptyList",
        "method_code": "blic void setMessageForEmptyList(@StringRes final int headline, @StringRes final int message,\n                                       @DrawableRes final int icon) {\n        new Handler(Looper.getMainLooper()).post(() -> {\n            if (mEmptyListContainer != null && mEmptyListMessage != null) {\n                mEmptyListHeadline.setText(headline);\n                mEmptyListMessage.setText(message);\n                mEmptyListIcon.setImageDrawable(viewThemeUtils.platform.tintPrimaryDrawable(this, icon));\n                mEmptyListIcon.setVisibility(View.VISIBLE);\n                mEmptyListMessage.setVisibility(View.VISIBLE);\n            }\n        });\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setMessageForEmptyList from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: setMessageForEmptyList\n\n        Method Code: blic void setMessageForEmptyList(@StringRes final int headline, @StringRes final int message,\n                                       @DrawableRes final int icon) {\n        new Handler(Looper.getMainLooper()).post(() -> {\n            if (mEmptyListContainer != null && mEmptyListMessage != null) {\n                mEmptyListHeadline.setText(headline);\n                mEmptyListMessage.setText(message);\n                mEmptyListIcon.setImageDrawable(viewThemeUtils.platform.tintPrimaryDrawable(this, icon));\n                mEmptyListIcon.setVisibility(View.VISIBLE);\n                mEmptyListMessage.setVisibility(View.VISIBLE);\n            }\n        });\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setMessageForEmptyList(headline: Int, message: Int, icon: Int) {\n    DispatchQueue.main.async {\n        if let emptyListContainer = self.mEmptyListContainer, let emptyListMessage = self.mEmptyListMessage {\n            self.mEmptyListHeadline.text = NSLocalizedString(String(headline), comment: \"\")\n            self.mEmptyListMessage.text = NSLocalizedString(String(message), comment: \"\")\n            self.mEmptyListIcon.image = viewThemeUtils.platform.tintPrimaryDrawable(self, icon: icon)\n            self.mEmptyListIcon.isHidden = false\n            self.mEmptyListMessage.isHidden = false\n        }\n    }\n}\n```"
    },
    {
        "method_name": "onSavedCertificate",
        "method_code": "verride\n    public void onSavedCertificate() {\n        startSyncFolderOperation(getCurrentDir());\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onSavedCertificate from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onSavedCertificate\n\n        Method Code: verride\n    public void onSavedCertificate() {\n        startSyncFolderOperation(getCurrentDir());\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onSavedCertificate() {\n    startSyncFolderOperation(getCurrentDir())\n}\n```"
    },
    {
        "method_name": "startSyncFolderOperation",
        "method_code": "ivate void startSyncFolderOperation(OCFile folder) {\n        if (folder == null) {\n            DisplayUtils.showSnackMessage(this, R.string.receive_external_files_activity_start_sync_folder_is_not_exists_message);\n            return;\n        }\n\n        long currentSyncTime = System.currentTimeMillis();\n\n        mSyncInProgress = true;\n\n        // perform folder synchronization\n        RemoteOperation syncFolderOp = new RefreshFolderOperation(folder,\n                                                                  currentSyncTime,\n                                                                  false,\n                                                                  false,\n                                                                  getStorageManager(),\n                                                                  getUser().orElseThrow(RuntimeException::new),\n                                                                  getApplicationContext()\n        );\n        syncFolderOp.execute(getAccount(), this, null, null);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled startSyncFolderOperation from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: startSyncFolderOperation\n\n        Method Code: ivate void startSyncFolderOperation(OCFile folder) {\n        if (folder == null) {\n            DisplayUtils.showSnackMessage(this, R.string.receive_external_files_activity_start_sync_folder_is_not_exists_message);\n            return;\n        }\n\n        long currentSyncTime = System.currentTimeMillis();\n\n        mSyncInProgress = true;\n\n        // perform folder synchronization\n        RemoteOperation syncFolderOp = new RefreshFolderOperation(folder,\n                                                                  currentSyncTime,\n                                                                  false,\n                                                                  false,\n                                                                  getStorageManager(),\n                                                                  getUser().orElseThrow(RuntimeException::new),\n                                                                  getApplicationContext()\n        );\n        syncFolderOp.execute(getAccount(), this, null, null);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func startSyncFolderOperation(folder: OCFile?) {\n    guard let folder = folder else {\n        DisplayUtils.showSnackMessage(self, R.string.receive_external_files_activity_start_sync_folder_is_not_exists_message)\n        return\n    }\n\n    let currentSyncTime = Date().timeIntervalSince1970 * 1000\n\n    mSyncInProgress = true\n\n    // perform folder synchronization\n    let syncFolderOp = RefreshFolderOperation(folder: folder,\n                                              currentSyncTime: currentSyncTime,\n                                              param1: false,\n                                              param2: false,\n                                              storageManager: getStorageManager(),\n                                              user: getUser().orElseThrow { RuntimeException() },\n                                              context: getApplicationContext())\n    syncFolderOp.execute(account: getAccount(), listener: self, param1: nil, param2: nil)\n}\n```"
    },
    {
        "method_name": "sortFileList",
        "method_code": "ivate List<OCFile> sortFileList(List<OCFile> files) {\n        FileSortOrder sortOrder = preferences.getSortOrderByFolder(mFile);\n        return sortOrder.sortCloudFiles(files);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled sortFileList from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: sortFileList\n\n        Method Code: ivate List<OCFile> sortFileList(List<OCFile> files) {\n        FileSortOrder sortOrder = preferences.getSortOrderByFolder(mFile);\n        return sortOrder.sortCloudFiles(files);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func sortFileList(files: [OCFile]) -> [OCFile] {\n    let sortOrder = preferences.getSortOrderByFolder(mFile)\n    return sortOrder.sortCloudFiles(files)\n}\n```"
    },
    {
        "method_name": "generatePath",
        "method_code": "ivate String generatePath(Stack<String> dirs) {\n        String full_path = \"\";\n\n        for (String a : dirs) {\n            full_path += a + OCFile.PATH_SEPARATOR;\n        }\n        return full_path;\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled generatePath from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: generatePath\n\n        Method Code: ivate String generatePath(Stack<String> dirs) {\n        String full_path = \"\";\n\n        for (String a : dirs) {\n            full_path += a + OCFile.PATH_SEPARATOR;\n        }\n        return full_path;\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func generatePath(dirs: [String]) -> String {\n    var fullPath = \"\"\n\n    for dir in dirs {\n        fullPath += dir + OCFile.PATH_SEPARATOR\n    }\n    return fullPath\n}\n```"
    },
    {
        "method_name": "prepareStreamsToUpload",
        "method_code": "ivate void prepareStreamsToUpload() {\n        Intent intent = getIntent();\n\n        if (intent.hasExtra(Intent.EXTRA_STREAM) && Intent.ACTION_SEND.equals(intent.getAction())) {\n            mStreamsToUpload = new ArrayList<>();\n            mStreamsToUpload.add(IntentExtensionsKt.getParcelableArgument(intent, Intent.EXTRA_STREAM, Parcelable.class));\n        } else if (intent.hasExtra(Intent.EXTRA_STREAM) && Intent.ACTION_SEND_MULTIPLE.equals(intent.getAction())) {\n            mStreamsToUpload = intent.getParcelableArrayListExtra(Intent.EXTRA_STREAM);\n        } else if (intent.hasExtra(Intent.EXTRA_TEXT) && Intent.ACTION_SEND.equals(intent.getAction())) {\n            mStreamsToUpload = null;\n            saveTextsFromIntent(intent);\n        } else {\n            showErrorDialog(R.string.uploader_error_message_no_file_to_upload, R.string.uploader_error_title_file_cannot_be_uploaded);\n        }\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled prepareStreamsToUpload from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: prepareStreamsToUpload\n\n        Method Code: ivate void prepareStreamsToUpload() {\n        Intent intent = getIntent();\n\n        if (intent.hasExtra(Intent.EXTRA_STREAM) && Intent.ACTION_SEND.equals(intent.getAction())) {\n            mStreamsToUpload = new ArrayList<>();\n            mStreamsToUpload.add(IntentExtensionsKt.getParcelableArgument(intent, Intent.EXTRA_STREAM, Parcelable.class));\n        } else if (intent.hasExtra(Intent.EXTRA_STREAM) && Intent.ACTION_SEND_MULTIPLE.equals(intent.getAction())) {\n            mStreamsToUpload = intent.getParcelableArrayListExtra(Intent.EXTRA_STREAM);\n        } else if (intent.hasExtra(Intent.EXTRA_TEXT) && Intent.ACTION_SEND.equals(intent.getAction())) {\n            mStreamsToUpload = null;\n            saveTextsFromIntent(intent);\n        } else {\n            showErrorDialog(R.string.uploader_error_message_no_file_to_upload, R.string.uploader_error_title_file_cannot_be_uploaded);\n        }\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func prepareStreamsToUpload() {\n    let intent = self.intent\n\n    if intent.hasExtra(Intent.EXTRA_STREAM), intent.action == Intent.ACTION_SEND {\n        mStreamsToUpload = [IntentExtensionsKt.getParcelableArgument(intent, Intent.EXTRA_STREAM, Parcelable.self)]\n    } else if intent.hasExtra(Intent.EXTRA_STREAM), intent.action == Intent.ACTION_SEND_MULTIPLE {\n        mStreamsToUpload = intent.getParcelableArrayListExtra(Intent.EXTRA_STREAM)\n    } else if intent.hasExtra(Intent.EXTRA_TEXT), intent.action == Intent.ACTION_SEND {\n        mStreamsToUpload = nil\n        saveTextsFromIntent(intent)\n    } else {\n        showErrorDialog(R.string.uploader_error_message_no_file_to_upload, R.string.uploader_error_title_file_cannot_be_uploaded)\n    }\n}\n```"
    },
    {
        "method_name": "saveTextsFromIntent",
        "method_code": "ivate void saveTextsFromIntent(Intent intent) {\n        if (!MimeType.TEXT_PLAIN.equals(intent.getType())) {\n            return;\n        }\n        mUploadFromTmpFile = true;\n\n        mSubjectText = intent.getStringExtra(Intent.EXTRA_SUBJECT);\n        if (mSubjectText == null) {\n            mSubjectText = intent.getStringExtra(Intent.EXTRA_TITLE);\n            if (mSubjectText == null) {\n                mSubjectText = DateFormat.format(\"yyyyMMdd_kkmmss\", Calendar.getInstance()).toString();\n            }\n        }\n        mExtraText = intent.getStringExtra(Intent.EXTRA_TEXT);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled saveTextsFromIntent from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: saveTextsFromIntent\n\n        Method Code: ivate void saveTextsFromIntent(Intent intent) {\n        if (!MimeType.TEXT_PLAIN.equals(intent.getType())) {\n            return;\n        }\n        mUploadFromTmpFile = true;\n\n        mSubjectText = intent.getStringExtra(Intent.EXTRA_SUBJECT);\n        if (mSubjectText == null) {\n            mSubjectText = intent.getStringExtra(Intent.EXTRA_TITLE);\n            if (mSubjectText == null) {\n                mSubjectText = DateFormat.format(\"yyyyMMdd_kkmmss\", Calendar.getInstance()).toString();\n            }\n        }\n        mExtraText = intent.getStringExtra(Intent.EXTRA_TEXT);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc saveTextsFromIntent(intent: Intent) {\n    guard intent.type == MimeType.TEXT_PLAIN else {\n        return\n    }\n    mUploadFromTmpFile = true\n\n    mSubjectText = intent.getStringExtra(Intent.EXTRA_SUBJECT)\n    if mSubjectText == nil {\n        mSubjectText = intent.getStringExtra(Intent.EXTRA_TITLE)\n        if mSubjectText == nil {\n            let dateFormatter = DateFormatter()\n            dateFormatter.dateFormat = \"yyyyMMdd_HHmmss\"\n            mSubjectText = dateFormatter.string(from: Date())\n        }\n    }\n    mExtraText = intent.getStringExtra(Intent.EXTRA_TEXT)\n}\n```"
    },
    {
        "method_name": "somethingToUpload",
        "method_code": "ivate boolean somethingToUpload() {\n        return (mStreamsToUpload != null && !mStreamsToUpload.isEmpty() && mStreamsToUpload.get(0) != null ||\n            mUploadFromTmpFile);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled somethingToUpload from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: somethingToUpload\n\n        Method Code: ivate boolean somethingToUpload() {\n        return (mStreamsToUpload != null && !mStreamsToUpload.isEmpty() && mStreamsToUpload.get(0) != null ||\n            mUploadFromTmpFile);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func somethingToUpload() -> Bool {\n    return (mStreamsToUpload != nil && !mStreamsToUpload.isEmpty && mStreamsToUpload[0] != nil) || mUploadFromTmpFile\n}\n```"
    },
    {
        "method_name": "uploadFile",
        "method_code": "blic void uploadFile(String tmpName, String filename) {\n        FileUploadHelper.Companion.instance().uploadNewFiles(\n            getUser().orElseThrow(RuntimeException::new),\n            new String[]{ tmpName },\n            new String[]{ mFile.getRemotePath() + filename},\n            FileUploadWorker.LOCAL_BEHAVIOUR_COPY,\n            true,\n            UploadFileOperation.CREATED_BY_USER,\n            false,\n            false,\n            NameCollisionPolicy.ASK_USER);\n        finish();\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled uploadFile from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: uploadFile\n\n        Method Code: blic void uploadFile(String tmpName, String filename) {\n        FileUploadHelper.Companion.instance().uploadNewFiles(\n            getUser().orElseThrow(RuntimeException::new),\n            new String[]{ tmpName },\n            new String[]{ mFile.getRemotePath() + filename},\n            FileUploadWorker.LOCAL_BEHAVIOUR_COPY,\n            true,\n            UploadFileOperation.CREATED_BY_USER,\n            false,\n            false,\n            NameCollisionPolicy.ASK_USER);\n        finish();\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc uploadFile(tmpName: String, filename: String) {\n    FileUploadHelper.instance().uploadNewFiles(\n        user: getUser() ?? { fatalError() }(),\n        localPaths: [tmpName],\n        remotePaths: [mFile.getRemotePath() + filename],\n        localBehaviour: .copy,\n        isUserInitiated: true,\n        operation: .createdByUser,\n        isBackground: false,\n        isSilent: false,\n        collisionPolicy: .askUser\n    )\n    finish()\n}\n```"
    },
    {
        "method_name": "uploadFiles",
        "method_code": "blic void uploadFiles() {\n        if (mStreamsToUpload == null) {\n            DisplayUtils.showSnackMessage(this, R.string.receive_external_files_activity_unable_to_find_file_to_upload);\n            return;\n        }\n\n        if (mStreamsToUpload.size() > FileUploadHelper.MAX_FILE_COUNT) {\n            DisplayUtils.showSnackMessage(this, R.string.max_file_count_warning_message);\n            return;\n        }\n\n        UriUploader uploader = new UriUploader(\n            this,\n            mStreamsToUpload,\n            mUploadPath,\n            getUser().orElseThrow(RuntimeException::new),\n            FileUploadWorker.LOCAL_BEHAVIOUR_DELETE,\n            true, // Show waiting dialog while file is being copied from private storage\n            this  // Copy temp task listener\n        );\n\n        UriUploader.UriUploaderResultCode resultCode = uploader.uploadUris();\n\n        // Save the path to shared preferences; even if upload is not possible, user chose the folder\n        preferences.setLastUploadPath(mUploadPath);\n\n        if (resultCode == UriUploader.UriUploaderResultCode.OK) {\n            finish();\n        } else {\n\n            int messageResTitle = R.string.uploader_error_title_file_cannot_be_uploaded;\n            int messageResId = R.string.common_error_unknown;\n\n            if (resultCode == UriUploader.UriUploaderResultCode.ERROR_NO_FILE_TO_UPLOAD) {\n                messageResId = R.string.uploader_error_message_no_file_to_upload;\n                messageResTitle = R.string.uploader_error_title_no_file_to_upload;\n            } else if (resultCode == UriUploader.UriUploaderResultCode.ERROR_READ_PERMISSION_NOT_GRANTED) {\n                messageResId = R.string.uploader_error_message_read_permission_not_granted;\n            }\n\n            showErrorDialog(messageResId, messageResTitle);\n        }\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled uploadFiles from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: uploadFiles\n\n        Method Code: blic void uploadFiles() {\n        if (mStreamsToUpload == null) {\n            DisplayUtils.showSnackMessage(this, R.string.receive_external_files_activity_unable_to_find_file_to_upload);\n            return;\n        }\n\n        if (mStreamsToUpload.size() > FileUploadHelper.MAX_FILE_COUNT) {\n            DisplayUtils.showSnackMessage(this, R.string.max_file_count_warning_message);\n            return;\n        }\n\n        UriUploader uploader = new UriUploader(\n            this,\n            mStreamsToUpload,\n            mUploadPath,\n            getUser().orElseThrow(RuntimeException::new),\n            FileUploadWorker.LOCAL_BEHAVIOUR_DELETE,\n            true, // Show waiting dialog while file is being copied from private storage\n            this  // Copy temp task listener\n        );\n\n        UriUploader.UriUploaderResultCode resultCode = uploader.uploadUris();\n\n        // Save the path to shared preferences; even if upload is not possible, user chose the folder\n        preferences.setLastUploadPath(mUploadPath);\n\n        if (resultCode == UriUploader.UriUploaderResultCode.OK) {\n            finish();\n        } else {\n\n            int messageResTitle = R.string.uploader_error_title_file_cannot_be_uploaded;\n            int messageResId = R.string.common_error_unknown;\n\n            if (resultCode == UriUploader.UriUploaderResultCode.ERROR_NO_FILE_TO_UPLOAD) {\n                messageResId = R.string.uploader_error_message_no_file_to_upload;\n                messageResTitle = R.string.uploader_error_title_no_file_to_upload;\n            } else if (resultCode == UriUploader.UriUploaderResultCode.ERROR_READ_PERMISSION_NOT_GRANTED) {\n                messageResId = R.string.uploader_error_message_read_permission_not_granted;\n            }\n\n            showErrorDialog(messageResId, messageResTitle);\n        }\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc uploadFiles() {\n    guard let streamsToUpload = mStreamsToUpload else {\n        DisplayUtils.showSnackMessage(self, R.string.receive_external_files_activity_unable_to_find_file_to_upload)\n        return\n    }\n\n    if streamsToUpload.count > FileUploadHelper.MAX_FILE_COUNT {\n        DisplayUtils.showSnackMessage(self, R.string.max_file_count_warning_message)\n        return\n    }\n\n    let uploader = UriUploader(\n        context: self,\n        streamsToUpload: streamsToUpload,\n        uploadPath: mUploadPath,\n        user: getUser() ?? { fatalError() }(),\n        localBehaviour: .delete,\n        showWaitingDialog: true,\n        copyTempTaskListener: self\n    )\n\n    let resultCode = uploader.uploadUris()\n\n    // Save the path to shared preferences; even if upload is not possible, user chose the folder\n    preferences.setLastUploadPath(mUploadPath)\n\n    if resultCode == .ok {\n        finish()\n    } else {\n        var messageResTitle = R.string.uploader_error_title_file_cannot_be_uploaded\n        var messageResId = R.string.common_error_unknown\n\n        switch resultCode {\n        case .errorNoFileToUpload:\n            messageResId = R.string.uploader_error_message_no_file_to_upload\n            messageResTitle = R.string.uploader_error_title_no_file_to_upload\n        case .errorReadPermissionNotGranted:\n            messageResId = R.string.uploader_error_message_read_permission_not_granted\n        default:\n            break\n        }\n\n        showErrorDialog(messageResId, messageResTitle)\n    }\n}\n```"
    },
    {
        "method_name": "onRemoteOperationFinish",
        "method_code": "verride\n    public void onRemoteOperationFinish(RemoteOperation operation, RemoteOperationResult result) {\n        super.onRemoteOperationFinish(operation, result);\n\n\n        if (operation instanceof CreateFolderOperation) {\n            onCreateFolderOperationFinish((CreateFolderOperation) operation, result);\n        }\n\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onRemoteOperationFinish from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onRemoteOperationFinish\n\n        Method Code: verride\n    public void onRemoteOperationFinish(RemoteOperation operation, RemoteOperationResult result) {\n        super.onRemoteOperationFinish(operation, result);\n\n\n        if (operation instanceof CreateFolderOperation) {\n            onCreateFolderOperationFinish((CreateFolderOperation) operation, result);\n        }\n\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onRemoteOperationFinish(_ operation: RemoteOperation, result: RemoteOperationResult) {\n    super.onRemoteOperationFinish(operation, result)\n    \n    if let createFolderOperation = operation as? CreateFolderOperation {\n        onCreateFolderOperationFinish(createFolderOperation, result: result)\n    }\n}\n```"
    },
    {
        "method_name": "onCreateFolderOperationFinish",
        "method_code": "ivate void onCreateFolderOperationFinish(CreateFolderOperation operation,\n                                               RemoteOperationResult result) {\n        if (result.isSuccess()) {\n            String remotePath = operation.getRemotePath().substring(0, operation.getRemotePath().length() - 1);\n            String newFolder = remotePath.substring(remotePath.lastIndexOf('/') + 1);\n            mParents.push(newFolder);\n            populateDirectoryList();\n        } else {\n            try {\n                DisplayUtils.showSnackMessage(\n                    this, ErrorMessageAdapter.getErrorCauseMessage(result, operation, getResources())\n                                             );\n\n            } catch (NotFoundException e) {\n                Log_OC.e(TAG, \"Error while trying to show fail message \", e);\n            }\n        }\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreateFolderOperationFinish from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onCreateFolderOperationFinish\n\n        Method Code: ivate void onCreateFolderOperationFinish(CreateFolderOperation operation,\n                                               RemoteOperationResult result) {\n        if (result.isSuccess()) {\n            String remotePath = operation.getRemotePath().substring(0, operation.getRemotePath().length() - 1);\n            String newFolder = remotePath.substring(remotePath.lastIndexOf('/') + 1);\n            mParents.push(newFolder);\n            populateDirectoryList();\n        } else {\n            try {\n                DisplayUtils.showSnackMessage(\n                    this, ErrorMessageAdapter.getErrorCauseMessage(result, operation, getResources())\n                                             );\n\n            } catch (NotFoundException e) {\n                Log_OC.e(TAG, \"Error while trying to show fail message \", e);\n            }\n        }\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func onCreateFolderOperationFinish(operation: CreateFolderOperation, result: RemoteOperationResult) {\n    if result.isSuccess() {\n        let remotePath = String(operation.getRemotePath().dropLast())\n        let newFolder = remotePath.components(separatedBy: \"/\").last ?? \"\"\n        mParents.push(newFolder)\n        populateDirectoryList()\n    } else {\n        do {\n            try DisplayUtils.showSnackMessage(self, ErrorMessageAdapter.getErrorCauseMessage(result, operation, getResources()))\n        } catch {\n            Log_OC.e(TAG, \"Error while trying to show fail message \", error)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "initTargetFolder",
        "method_code": "ivate void initTargetFolder() {\n        if (getStorageManager() == null) {\n            throw new IllegalStateException(\"Do not call this method before initializing mStorageManager\");\n        }\n\n        if (mParents.empty()) {\n            String lastPath = preferences.getLastUploadPath();\n            // \"/\" equals root-directory\n            if (OCFile.ROOT_PATH.equals(lastPath)) {\n                mParents.add(\"\");\n            } else {\n                String[] dir_names = lastPath.split(OCFile.PATH_SEPARATOR);\n                mParents.clear();\n                mParents.addAll(Arrays.asList(dir_names));\n            }\n        }\n\n        // make sure that path still exists, if it doesn't pop the stack and try the previous path\n        while (!getStorageManager().fileExists(generatePath(mParents)) && mParents.size() > 1) {\n            mParents.pop();\n        }\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled initTargetFolder from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: initTargetFolder\n\n        Method Code: ivate void initTargetFolder() {\n        if (getStorageManager() == null) {\n            throw new IllegalStateException(\"Do not call this method before initializing mStorageManager\");\n        }\n\n        if (mParents.empty()) {\n            String lastPath = preferences.getLastUploadPath();\n            // \"/\" equals root-directory\n            if (OCFile.ROOT_PATH.equals(lastPath)) {\n                mParents.add(\"\");\n            } else {\n                String[] dir_names = lastPath.split(OCFile.PATH_SEPARATOR);\n                mParents.clear();\n                mParents.addAll(Arrays.asList(dir_names));\n            }\n        }\n\n        // make sure that path still exists, if it doesn't pop the stack and try the previous path\n        while (!getStorageManager().fileExists(generatePath(mParents)) && mParents.size() > 1) {\n            mParents.pop();\n        }\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func initTargetFolder() {\n    guard let storageManager = getStorageManager() else {\n        fatalError(\"Do not call this method before initializing mStorageManager\")\n    }\n\n    if mParents.isEmpty {\n        let lastPath = preferences.getLastUploadPath()\n        // \"/\" equals root-directory\n        if OCFile.ROOT_PATH == lastPath {\n            mParents.append(\"\")\n        } else {\n            let dirNames = lastPath.split(separator: OCFile.PATH_SEPARATOR)\n            mParents.removeAll()\n            mParents.append(contentsOf: dirNames.map { String($0) })\n        }\n    }\n\n    // make sure that path still exists, if it doesn't pop the stack and try the previous path\n    while !storageManager.fileExists(generatePath(mParents)) && mParents.count > 1 {\n        mParents.removeLast()\n    }\n}\n```"
    },
    {
        "method_name": "isHaveMultipleAccount",
        "method_code": "ivate boolean isHaveMultipleAccount() {\n        return mAccountManager.getAccountsByType(MainApp.getAccountType(this)).length > 1;\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isHaveMultipleAccount from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: isHaveMultipleAccount\n\n        Method Code: ivate boolean isHaveMultipleAccount() {\n        return mAccountManager.getAccountsByType(MainApp.getAccountType(this)).length > 1;\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func isHaveMultipleAccount() -> Bool {\n    return mAccountManager.accounts(withAccountType: MainApp.getAccountType(self)).count > 1\n}\n```"
    },
    {
        "method_name": "onCreateOptionsMenu",
        "method_code": "verride\n    public boolean onCreateOptionsMenu(Menu menu) {\n        MenuInflater inflater = getMenuInflater();\n        inflater.inflate(R.menu.activity_receive_external_files, menu);\n\n        if (!isHaveMultipleAccount()) {\n            menu.findItem(R.id.action_switch_account).setVisible(false);\n            menu.findItem(R.id.action_create_dir).setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);\n        }\n\n        setupSearchView(menu);\n\n        MenuItem newFolderMenuItem = menu.findItem(R.id.action_create_dir);\n        newFolderMenuItem.setEnabled(mFile.canWrite());\n\n        return true;\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreateOptionsMenu from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onCreateOptionsMenu\n\n        Method Code: verride\n    public boolean onCreateOptionsMenu(Menu menu) {\n        MenuInflater inflater = getMenuInflater();\n        inflater.inflate(R.menu.activity_receive_external_files, menu);\n\n        if (!isHaveMultipleAccount()) {\n            menu.findItem(R.id.action_switch_account).setVisible(false);\n            menu.findItem(R.id.action_create_dir).setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);\n        }\n\n        setupSearchView(menu);\n\n        MenuItem newFolderMenuItem = menu.findItem(R.id.action_create_dir);\n        newFolderMenuItem.setEnabled(mFile.canWrite());\n\n        return true;\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onCreateOptionsMenu(_ menu: Menu) -> Bool {\n    let inflater = menuInflater\n    inflater.inflate(R.menu.activity_receive_external_files, menu)\n\n    if !isHaveMultipleAccount() {\n        menu.findItem(R.id.action_switch_account)?.isVisible = false\n        menu.findItem(R.id.action_create_dir)?.setShowAsAction(.ifRoom)\n    }\n\n    setupSearchView(menu)\n\n    if let newFolderMenuItem = menu.findItem(R.id.action_create_dir) {\n        newFolderMenuItem.isEnabled = mFile.canWrite()\n    }\n\n    return true\n}\n```"
    },
    {
        "method_name": "setupSearchView",
        "method_code": "ivate void setupSearchView(Menu menu) {\n        final MenuItem searchMenuItem = menu.findItem(R.id.action_search);\n\n        SearchView searchView = (SearchView) MenuItemCompat.getActionView(searchMenuItem);\n        searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\n            @Override\n            public boolean onQueryTextSubmit(String query) {\n                receiveExternalFilesAdapter.filter(query);\n                return false;\n            }\n\n            @Override\n            public boolean onQueryTextChange(String newText) {\n                receiveExternalFilesAdapter.filter(newText);\n                return false;\n            }\n        });\n\n        viewThemeUtils.androidx.themeToolbarSearchView(searchView);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setupSearchView from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: setupSearchView\n\n        Method Code: ivate void setupSearchView(Menu menu) {\n        final MenuItem searchMenuItem = menu.findItem(R.id.action_search);\n\n        SearchView searchView = (SearchView) MenuItemCompat.getActionView(searchMenuItem);\n        searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\n            @Override\n            public boolean onQueryTextSubmit(String query) {\n                receiveExternalFilesAdapter.filter(query);\n                return false;\n            }\n\n            @Override\n            public boolean onQueryTextChange(String newText) {\n                receiveExternalFilesAdapter.filter(newText);\n                return false;\n            }\n        });\n\n        viewThemeUtils.androidx.themeToolbarSearchView(searchView);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setupSearchView(menu: UIMenu) {\n    if let searchMenuItem = menu.findItem(withIdentifier: R.id.action_search) {\n        if let searchView = searchMenuItem.customView as? UISearchBar {\n            searchView.delegate = self\n        }\n    }\n}\n\nextension ReceiveExternalFilesActivity: UISearchBarDelegate {\n    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {\n        if let query = searchBar.text {\n            receiveExternalFilesAdapter.filter(query)\n        }\n    }\n\n    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {\n        receiveExternalFilesAdapter.filter(searchText)\n    }\n}\n```"
    },
    {
        "method_name": "onQueryTextSubmit",
        "method_code": "verride\n            public boolean onQueryTextSubmit(String query) {\n                receiveExternalFilesAdapter.filter(query);\n                return false;\n            }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onQueryTextSubmit from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onQueryTextSubmit\n\n        Method Code: verride\n            public boolean onQueryTextSubmit(String query) {\n                receiveExternalFilesAdapter.filter(query);\n                return false;\n            }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onQueryTextSubmit(_ query: String) -> Bool {\n    receiveExternalFilesAdapter.filter(query)\n    return false\n}\n```"
    },
    {
        "method_name": "onQueryTextChange",
        "method_code": "verride\n            public boolean onQueryTextChange(String newText) {\n                receiveExternalFilesAdapter.filter(newText);\n                return false;\n            }\n ",
        "prompt": "\n        Please translate the following Java (Android) method titled onQueryTextChange from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onQueryTextChange\n\n        Method Code: verride\n            public boolean onQueryTextChange(String newText) {\n                receiveExternalFilesAdapter.filter(newText);\n                return false;\n            }\n \n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onQueryTextChange(_ newText: String) -> Bool {\n    receiveExternalFilesAdapter.filter(newText)\n    return false\n}\n```"
    },
    {
        "method_name": "onOptionsItemSelected",
        "method_code": "verride\n    public boolean onOptionsItemSelected(MenuItem item) {\n        boolean retval = true;\n        int itemId = item.getItemId();\n\n        if (itemId == R.id.action_create_dir) {\n            CreateFolderDialogFragment dialog = CreateFolderDialogFragment.newInstance(mFile);\n            dialog.show(getSupportFragmentManager(), CreateFolderDialogFragment.CREATE_FOLDER_FRAGMENT);\n        } else if (itemId == android.R.id.home) {\n            if (mParents.size() > SINGLE_PARENT) {\n                onBackPressed();\n            }\n        } else if (itemId == R.id.action_switch_account) {\n            showAccountChooserDialog();\n        } else {\n            retval = super.onOptionsItemSelected(item);\n        }\n\n        return retval;\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onOptionsItemSelected from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onOptionsItemSelected\n\n        Method Code: verride\n    public boolean onOptionsItemSelected(MenuItem item) {\n        boolean retval = true;\n        int itemId = item.getItemId();\n\n        if (itemId == R.id.action_create_dir) {\n            CreateFolderDialogFragment dialog = CreateFolderDialogFragment.newInstance(mFile);\n            dialog.show(getSupportFragmentManager(), CreateFolderDialogFragment.CREATE_FOLDER_FRAGMENT);\n        } else if (itemId == android.R.id.home) {\n            if (mParents.size() > SINGLE_PARENT) {\n                onBackPressed();\n            }\n        } else if (itemId == R.id.action_switch_account) {\n            showAccountChooserDialog();\n        } else {\n            retval = super.onOptionsItemSelected(item);\n        }\n\n        return retval;\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onOptionsItemSelected(_ item: MenuItem) -> Bool {\n    var retval = true\n    let itemId = item.itemId\n\n    if itemId == R.id.action_create_dir {\n        let dialog = CreateFolderDialogFragment.newInstance(mFile)\n        dialog.show(getSupportFragmentManager(), CreateFolderDialogFragment.CREATE_FOLDER_FRAGMENT)\n    } else if itemId == android.R.id.home {\n        if mParents.count > SINGLE_PARENT {\n            onBackPressed()\n        }\n    } else if itemId == R.id.action_switch_account {\n        showAccountChooserDialog()\n    } else {\n        retval = super.onOptionsItemSelected(item)\n    }\n\n    return retval\n}\n```"
    },
    {
        "method_name": "getCurrentFolder",
        "method_code": "ivate OCFile getCurrentFolder() {\n        OCFile file = mFile;\n        if (file != null) {\n            if (file.isFolder()) {\n                return file;\n            } else if (getStorageManager() != null) {\n                return getStorageManager().getFileByPath(file.getParentRemotePath());\n            }\n        }\n        return null;\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getCurrentFolder from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: getCurrentFolder\n\n        Method Code: ivate OCFile getCurrentFolder() {\n        OCFile file = mFile;\n        if (file != null) {\n            if (file.isFolder()) {\n                return file;\n            } else if (getStorageManager() != null) {\n                return getStorageManager().getFileByPath(file.getParentRemotePath());\n            }\n        }\n        return null;\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getCurrentFolder() -> OCFile? {\n    if let file = mFile {\n        if file.isFolder() {\n            return file\n        } else if let storageManager = getStorageManager() {\n            return storageManager.getFileByPath(file.getParentRemotePath())\n        }\n    }\n    return nil\n}\n```"
    },
    {
        "method_name": "browseToRoot",
        "method_code": "ivate void browseToRoot() {\n        OCFile root = getStorageManager().getFileByPath(OCFile.ROOT_PATH);\n        mFile = root;\n        mParents.clear();\n        mParents.add(\"\");\n        startSyncFolderOperation(root);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled browseToRoot from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: browseToRoot\n\n        Method Code: ivate void browseToRoot() {\n        OCFile root = getStorageManager().getFileByPath(OCFile.ROOT_PATH);\n        mFile = root;\n        mParents.clear();\n        mParents.add(\"\");\n        startSyncFolderOperation(root);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func browseToRoot() {\n    let root = getStorageManager().getFileByPath(OCFile.ROOT_PATH)\n    mFile = root\n    mParents.removeAll()\n    mParents.append(\"\")\n    startSyncFolderOperation(root)\n}\n```"
    },
    {
        "method_name": "onReceive",
        "method_code": "verride\n        public void onReceive(Context context, Intent intent) {\n            try {\n                String event = intent.getAction();\n                Log_OC.d(TAG, \"Received broadcast \" + event);\n                String accountName = intent.getStringExtra(FileSyncAdapter.EXTRA_ACCOUNT_NAME);\n                String syncFolderRemotePath = intent.getStringExtra(FileSyncAdapter.EXTRA_FOLDER_PATH);\n                RemoteOperationResult syncResult = (RemoteOperationResult)\n                    DataHolderUtil.getInstance().retrieve(intent.getStringExtra(FileSyncAdapter.EXTRA_RESULT));\n                boolean sameAccount = getAccount() != null && accountName.equals(getAccount().name)\n                    && getStorageManager() != null;\n\n                if (sameAccount) {\n\n                    if (FileSyncAdapter.EVENT_FULL_SYNC_START.equals(event)) {\n                        mSyncInProgress = true;\n\n                    } else {\n                        OCFile currentFile = (mFile == null) ? null :\n                            getStorageManager().getFileByPath(mFile.getRemotePath());\n                        OCFile currentDir = (getCurrentFolder() == null) ? null :\n                            getStorageManager().getFileByPath(getCurrentFolder().getRemotePath());\n\n                        if (currentDir == null) {\n                            // current folder was removed from the server\n                            DisplayUtils.showSnackMessage(\n                                getActivity(),\n                                R.string.sync_current_folder_was_removed,\n                                getCurrentFolder().getFileName()\n                                                         );\n                            browseToRoot();\n\n                        } else {\n                            if (currentFile == null && !mFile.isFolder()) {\n                                // currently selected file was removed in the server, and now we know it\n                                currentFile = currentDir;\n                            }\n\n                            if (currentDir.getRemotePath().equals(syncFolderRemotePath)) {\n                                populateDirectoryList();\n                            }\n                            mFile = currentFile;\n                        }\n\n                        mSyncInProgress = !FileSyncAdapter.EVENT_FULL_SYNC_END.equals(event) &&\n                            !RefreshFolderOperation.EVENT_SINGLE_FOLDER_SHARES_SYNCED.equals(event);\n\n                        if (RefreshFolderOperation.EVENT_SINGLE_FOLDER_CONTENTS_SYNCED.equals(event)\n                            /// TODO refactor and make common\n                            && syncResult != null && !syncResult.isSuccess()) {\n\n                            if (syncResult.getCode() == ResultCode.UNAUTHORIZED ||\n                                (syncResult.isException() && syncResult.getException()\n                                    instanceof AuthenticatorException)) {\n\n                                requestCredentialsUpdate(context);\n\n                            } else if (ResultCode.SSL_RECOVERABLE_PEER_UNVERIFIED == syncResult.getCode()) {\n\n                                showUntrustedCertDialog(syncResult);\n                            }\n                        }\n                    }\n                    Log_OC.d(TAG, \"Setting progress visibility to \" + mSyncInProgress);\n\n                }\n            } catch (RuntimeException e) {\n                // avoid app crashes after changing the serial id of RemoteOperationResult\n                // in owncloud library with broadcast notifications pending to process\n                DataHolderUtil.getInstance().delete(intent.getStringExtra(FileSyncAdapter.EXTRA_RESULT));\n            }\n        }\n ",
        "prompt": "\n        Please translate the following Java (Android) method titled onReceive from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onReceive\n\n        Method Code: verride\n        public void onReceive(Context context, Intent intent) {\n            try {\n                String event = intent.getAction();\n                Log_OC.d(TAG, \"Received broadcast \" + event);\n                String accountName = intent.getStringExtra(FileSyncAdapter.EXTRA_ACCOUNT_NAME);\n                String syncFolderRemotePath = intent.getStringExtra(FileSyncAdapter.EXTRA_FOLDER_PATH);\n                RemoteOperationResult syncResult = (RemoteOperationResult)\n                    DataHolderUtil.getInstance().retrieve(intent.getStringExtra(FileSyncAdapter.EXTRA_RESULT));\n                boolean sameAccount = getAccount() != null && accountName.equals(getAccount().name)\n                    && getStorageManager() != null;\n\n                if (sameAccount) {\n\n                    if (FileSyncAdapter.EVENT_FULL_SYNC_START.equals(event)) {\n                        mSyncInProgress = true;\n\n                    } else {\n                        OCFile currentFile = (mFile == null) ? null :\n                            getStorageManager().getFileByPath(mFile.getRemotePath());\n                        OCFile currentDir = (getCurrentFolder() == null) ? null :\n                            getStorageManager().getFileByPath(getCurrentFolder().getRemotePath());\n\n                        if (currentDir == null) {\n                            // current folder was removed from the server\n                            DisplayUtils.showSnackMessage(\n                                getActivity(),\n                                R.string.sync_current_folder_was_removed,\n                                getCurrentFolder().getFileName()\n                                                         );\n                            browseToRoot();\n\n                        } else {\n                            if (currentFile == null && !mFile.isFolder()) {\n                                // currently selected file was removed in the server, and now we know it\n                                currentFile = currentDir;\n                            }\n\n                            if (currentDir.getRemotePath().equals(syncFolderRemotePath)) {\n                                populateDirectoryList();\n                            }\n                            mFile = currentFile;\n                        }\n\n                        mSyncInProgress = !FileSyncAdapter.EVENT_FULL_SYNC_END.equals(event) &&\n                            !RefreshFolderOperation.EVENT_SINGLE_FOLDER_SHARES_SYNCED.equals(event);\n\n                        if (RefreshFolderOperation.EVENT_SINGLE_FOLDER_CONTENTS_SYNCED.equals(event)\n                            /// TODO refactor and make common\n                            && syncResult != null && !syncResult.isSuccess()) {\n\n                            if (syncResult.getCode() == ResultCode.UNAUTHORIZED ||\n                                (syncResult.isException() && syncResult.getException()\n                                    instanceof AuthenticatorException)) {\n\n                                requestCredentialsUpdate(context);\n\n                            } else if (ResultCode.SSL_RECOVERABLE_PEER_UNVERIFIED == syncResult.getCode()) {\n\n                                showUntrustedCertDialog(syncResult);\n                            }\n                        }\n                    }\n                    Log_OC.d(TAG, \"Setting progress visibility to \" + mSyncInProgress);\n\n                }\n            } catch (RuntimeException e) {\n                // avoid app crashes after changing the serial id of RemoteOperationResult\n                // in owncloud library with broadcast notifications pending to process\n                DataHolderUtil.getInstance().delete(intent.getStringExtra(FileSyncAdapter.EXTRA_RESULT));\n            }\n        }\n \n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onReceive(context: Context, intent: Intent) {\n    do {\n        let event = intent.action\n        Log_OC.d(TAG, \"Received broadcast \\(event ?? \"\")\")\n        let accountName = intent.getStringExtra(FileSyncAdapter.EXTRA_ACCOUNT_NAME)\n        let syncFolderRemotePath = intent.getStringExtra(FileSyncAdapter.EXTRA_FOLDER_PATH)\n        let syncResult = DataHolderUtil.getInstance().retrieve(intent.getStringExtra(FileSyncAdapter.EXTRA_RESULT)) as? RemoteOperationResult\n        let sameAccount = getAccount() != nil && accountName == getAccount()?.name && getStorageManager() != nil\n\n        if sameAccount {\n            if FileSyncAdapter.EVENT_FULL_SYNC_START == event {\n                mSyncInProgress = true\n            } else {\n                var currentFile: OCFile? = (mFile == nil) ? nil : getStorageManager()?.getFileByPath(mFile!.getRemotePath())\n                var currentDir: OCFile? = (getCurrentFolder() == nil) ? nil : getStorageManager()?.getFileByPath(getCurrentFolder()!.getRemotePath())\n\n                if currentDir == nil {\n                    DisplayUtils.showSnackMessage(getActivity(), R.string.sync_current_folder_was_removed, getCurrentFolder()?.getFileName() ?? \"\")\n                    browseToRoot()\n                } else {\n                    if currentFile == nil && !(mFile?.isFolder() ?? true) {\n                        currentFile = currentDir\n                    }\n\n                    if currentDir?.getRemotePath() == syncFolderRemotePath {\n                        populateDirectoryList()\n                    }\n                    mFile = currentFile\n                }\n\n                mSyncInProgress = !(FileSyncAdapter.EVENT_FULL_SYNC_END == event) && !(RefreshFolderOperation.EVENT_SINGLE_FOLDER_SHARES_SYNCED == event)\n\n                if RefreshFolderOperation.EVENT_SINGLE_FOLDER_CONTENTS_SYNCED == event && syncResult != nil && !syncResult!.isSuccess() {\n                    if syncResult!.getCode() == .UNAUTHORIZED || (syncResult!.isException() && syncResult!.getException() is AuthenticatorException) {\n                        requestCredentialsUpdate(context)\n                    } else if ResultCode.SSL_RECOVERABLE_PEER_UNVERIFIED == syncResult!.getCode() {\n                        showUntrustedCertDialog(syncResult!)\n                    }\n                }\n            }\n            Log_OC.d(TAG, \"Setting progress visibility to \\(mSyncInProgress)\")\n        }\n    } catch {\n        DataHolderUtil.getInstance().delete(intent.getStringExtra(FileSyncAdapter.EXTRA_RESULT))\n    }\n}\n```"
    },
    {
        "method_name": "onTmpFilesCopied",
        "method_code": "verride\n    public void onTmpFilesCopied(ResultCode result) {\n        dismissLoadingDialog();\n        finish();\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onTmpFilesCopied from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onTmpFilesCopied\n\n        Method Code: verride\n    public void onTmpFilesCopied(ResultCode result) {\n        dismissLoadingDialog();\n        finish();\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onTmpFilesCopied(result: ResultCode) {\n    dismissLoadingDialog()\n    finish()\n}\n```"
    },
    {
        "method_name": "showErrorDialog",
        "method_code": "ivate void showErrorDialog(int messageResId, int messageResTitle) {\n\n        ConfirmationDialogFragment errorDialog = ConfirmationDialogFragment.newInstance(\n            messageResId,\n            new String[]{getString(R.string.app_name)}, // see uploader_error_message_* in strings.xml\n            messageResTitle,\n            R.string.common_back,\n            -1,\n            -1\n                                                                                       );\n        errorDialog.setCancelable(false);\n        errorDialog.setOnConfirmationListener(\n            new ConfirmationDialogFragment.ConfirmationDialogFragmentListener() {\n                @Override\n                public void onConfirmation(String callerTag) {\n                    finish();\n                }\n\n                @Override\n                public void onNeutral(String callerTag) {\n                    // not used at the moment\n                }\n\n                @Override\n                public void onCancel(String callerTag) {\n                    // not used at the moment\n                }\n            }\n                                             );\n        errorDialog.show(getSupportFragmentManager(), FTAG_ERROR_FRAGMENT);\n    }\n}",
        "prompt": "\n        Please translate the following Java (Android) method titled showErrorDialog from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: showErrorDialog\n\n        Method Code: ivate void showErrorDialog(int messageResId, int messageResTitle) {\n\n        ConfirmationDialogFragment errorDialog = ConfirmationDialogFragment.newInstance(\n            messageResId,\n            new String[]{getString(R.string.app_name)}, // see uploader_error_message_* in strings.xml\n            messageResTitle,\n            R.string.common_back,\n            -1,\n            -1\n                                                                                       );\n        errorDialog.setCancelable(false);\n        errorDialog.setOnConfirmationListener(\n            new ConfirmationDialogFragment.ConfirmationDialogFragmentListener() {\n                @Override\n                public void onConfirmation(String callerTag) {\n                    finish();\n                }\n\n                @Override\n                public void onNeutral(String callerTag) {\n                    // not used at the moment\n                }\n\n                @Override\n                public void onCancel(String callerTag) {\n                    // not used at the moment\n                }\n            }\n                                             );\n        errorDialog.show(getSupportFragmentManager(), FTAG_ERROR_FRAGMENT);\n    }\n}\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func showErrorDialog(messageResId: Int, messageResTitle: Int) {\n    let errorDialog = ConfirmationDialogFragment.newInstance(\n        messageResId: messageResId,\n        arguments: [getString(R.string.app_name)], // see uploader_error_message_* in strings.xml\n        titleResId: messageResTitle,\n        positiveButtonResId: R.string.common_back,\n        negativeButtonResId: -1,\n        neutralButtonResId: -1\n    )\n    errorDialog.isCancelable = false\n    errorDialog.setOnConfirmationListener { callerTag in\n        finish()\n    } onNeutral: { callerTag in\n        // not used at the moment\n    } onCancel: { callerTag in\n        // not used at the moment\n    }\n    errorDialog.show(getSupportFragmentManager(), tag: FTAG_ERROR_FRAGMENT)\n}\n```"
    },
    {
        "method_name": "onConfirmation",
        "method_code": "verride\n                public void onConfirmation(String callerTag) {\n                    finish();\n                }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onConfirmation from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onConfirmation\n\n        Method Code: verride\n                public void onConfirmation(String callerTag) {\n                    finish();\n                }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onConfirmation(callerTag: String) {\n    self.dismiss(animated: true, completion: nil)\n}\n```"
    },
    {
        "method_name": "onNeutral",
        "method_code": "verride\n                public void onNeutral(String callerTag) {\n                    // not used at the moment\n                }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onNeutral from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onNeutral\n\n        Method Code: verride\n                public void onNeutral(String callerTag) {\n                    // not used at the moment\n                }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onNeutral(callerTag: String) {\n    // not used at the moment\n}\n```"
    },
    {
        "method_name": "onCancel",
        "method_code": "verride\n                public void onCancel(String callerTag) {\n                    // not used at the moment\n                }\n ",
        "prompt": "\n        Please translate the following Java (Android) method titled onCancel from ReceiveExternalFilesActivity.java into Swift.\n\n        Input:\n\n        Method Name: onCancel\n\n        Method Code: verride\n                public void onCancel(String callerTag) {\n                    // not used at the moment\n                }\n \n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onCancel(callerTag: String) {\n    // not used at the moment\n}\n```"
    }
]