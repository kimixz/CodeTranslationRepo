[
    {
        "method_name": "create",
        "method_code": "public static PreviewTextFileFragment create(User user, OCFile file, boolean openSearch, String searchQuery) {\n        Bundle args = new Bundle();\n        args.putParcelable(EXTRA_FILE, file);\n        args.putParcelable(EXTRA_USER, user);\n        args.putBoolean(EXTRA_OPEN_SEARCH, openSearch);\n        args.putString(EXTRA_SEARCH_QUERY, searchQuery);\n        PreviewTextFileFragment fragment = new PreviewTextFileFragment();\n        fragment.setArguments(args);\n        return fragment;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled create from PreviewTextFileFragment.java into Swift.\n\n        Input:\n\n        Method Name: create\n\n        Method Code: public static PreviewTextFileFragment create(User user, OCFile file, boolean openSearch, String searchQuery) {\n        Bundle args = new Bundle();\n        args.putParcelable(EXTRA_FILE, file);\n        args.putParcelable(EXTRA_USER, user);\n        args.putBoolean(EXTRA_OPEN_SEARCH, openSearch);\n        args.putString(EXTRA_SEARCH_QUERY, searchQuery);\n        PreviewTextFileFragment fragment = new PreviewTextFileFragment();\n        fragment.setArguments(args);\n        return fragment;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func create(user: User, file: OCFile, openSearch: Bool, searchQuery: String) -> PreviewTextFileFragment {\n    let args = Bundle()\n    args.putParcelable(EXTRA_FILE, file)\n    args.putParcelable(EXTRA_USER, user)\n    args.putBoolean(EXTRA_OPEN_SEARCH, openSearch)\n    args.putString(EXTRA_SEARCH_QUERY, searchQuery)\n    let fragment = PreviewTextFileFragment()\n    fragment.setArguments(args)\n    return fragment\n}\n```"
    },
    {
        "method_name": "onCreate",
        "method_code": "@Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setHasOptionsMenu(true);\n\n        OCFile file = getFile();\n\n        Bundle args = getArguments();\n\n        if (file == null) {\n            file = BundleExtensionsKt.getParcelableArgument(args, EXTRA_FILE, OCFile.class);\n        }\n\n        if (user == null) {\n            user = BundleExtensionsKt.getParcelableArgument(args, EXTRA_USER, User.class);\n        }\n\n        if (args.containsKey(EXTRA_SEARCH_QUERY)) {\n            searchQuery = args.getString(EXTRA_SEARCH_QUERY);\n        }\n        searchOpen = args.getBoolean(EXTRA_OPEN_SEARCH, false);\n\n        if (savedInstanceState == null) {\n            if (file == null) {\n                throw new IllegalStateException(\"Instanced with a NULL OCFile\");\n            }\n            if (user == null) {\n                throw new IllegalStateException(\"Instanced with a NULL ownCloud Account\");\n            }\n        } else {\n            file = BundleExtensionsKt.getParcelableArgument(savedInstanceState, EXTRA_FILE, OCFile.class);\n            user = BundleExtensionsKt.getParcelableArgument(savedInstanceState, EXTRA_USER, User.class);\n        }\n\n        handler = new Handler();\n        setFile(file);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreate from PreviewTextFileFragment.java into Swift.\n\n        Input:\n\n        Method Name: onCreate\n\n        Method Code: @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setHasOptionsMenu(true);\n\n        OCFile file = getFile();\n\n        Bundle args = getArguments();\n\n        if (file == null) {\n            file = BundleExtensionsKt.getParcelableArgument(args, EXTRA_FILE, OCFile.class);\n        }\n\n        if (user == null) {\n            user = BundleExtensionsKt.getParcelableArgument(args, EXTRA_USER, User.class);\n        }\n\n        if (args.containsKey(EXTRA_SEARCH_QUERY)) {\n            searchQuery = args.getString(EXTRA_SEARCH_QUERY);\n        }\n        searchOpen = args.getBoolean(EXTRA_OPEN_SEARCH, false);\n\n        if (savedInstanceState == null) {\n            if (file == null) {\n                throw new IllegalStateException(\"Instanced with a NULL OCFile\");\n            }\n            if (user == null) {\n                throw new IllegalStateException(\"Instanced with a NULL ownCloud Account\");\n            }\n        } else {\n            file = BundleExtensionsKt.getParcelableArgument(savedInstanceState, EXTRA_FILE, OCFile.class);\n            user = BundleExtensionsKt.getParcelableArgument(savedInstanceState, EXTRA_USER, User.class);\n        }\n\n        handler = new Handler();\n        setFile(file);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    self.navigationItem.rightBarButtonItem = UIBarButtonItem(barButtonSystemItem: .action, target: self, action: #selector(showOptionsMenu))\n\n    var file = getFile()\n\n    let args = self.arguments\n\n    if file == nil {\n        file = args?.getParcelableArgument(EXTRA_FILE, OCFile.self)\n    }\n\n    if user == nil {\n        user = args?.getParcelableArgument(EXTRA_USER, User.self)\n    }\n\n    if let searchQuery = args?.getString(EXTRA_SEARCH_QUERY) {\n        self.searchQuery = searchQuery\n    }\n    searchOpen = args?.getBoolean(EXTRA_OPEN_SEARCH) ?? false\n\n    if savedInstanceState == nil {\n        if file == nil {\n            fatalError(\"Instanced with a NULL OCFile\")\n        }\n        if user == nil {\n            fatalError(\"Instanced with a NULL ownCloud Account\")\n        }\n    } else {\n        file = savedInstanceState?.getParcelableArgument(EXTRA_FILE, OCFile.self)\n        user = savedInstanceState?.getParcelableArgument(EXTRA_USER, User.self)\n    }\n\n    handler = Handler()\n    setFile(file)\n}\n```"
    },
    {
        "method_name": "onSaveInstanceState",
        "method_code": "@Override\n    public void onSaveInstanceState(@NonNull Bundle outState) {\n        FileExtensionsKt.logFileSize(getFile(), TAG);\n        outState.putParcelable(PreviewTextFileFragment.EXTRA_FILE, getFile());\n        outState.putParcelable(PreviewTextFileFragment.EXTRA_USER, user);\n        super.onSaveInstanceState(outState);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onSaveInstanceState from PreviewTextFileFragment.java into Swift.\n\n        Input:\n\n        Method Name: onSaveInstanceState\n\n        Method Code: @Override\n    public void onSaveInstanceState(@NonNull Bundle outState) {\n        FileExtensionsKt.logFileSize(getFile(), TAG);\n        outState.putParcelable(PreviewTextFileFragment.EXTRA_FILE, getFile());\n        outState.putParcelable(PreviewTextFileFragment.EXTRA_USER, user);\n        super.onSaveInstanceState(outState);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func encodeRestorableState(with coder: NSCoder) {\n    FileExtensionsKt.logFileSize(file, tag: TAG)\n    coder.encode(file, forKey: PreviewTextFileFragment.EXTRA_FILE)\n    coder.encode(user, forKey: PreviewTextFileFragment.EXTRA_USER)\n    super.encodeRestorableState(with: coder)\n}\n```"
    },
    {
        "method_name": "loadAndShowTextPreview",
        "method_code": "@Override\n    public void loadAndShowTextPreview() {\n        textLoadAsyncTask = new TextLoadAsyncTask(new WeakReference<>(binding.textPreview),\n                                                  new WeakReference<>(binding.emptyListProgress));\n        textLoadAsyncTask.execute(getFile().getStoragePath());\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled loadAndShowTextPreview from PreviewTextFileFragment.java into Swift.\n\n        Input:\n\n        Method Name: loadAndShowTextPreview\n\n        Method Code: @Override\n    public void loadAndShowTextPreview() {\n        textLoadAsyncTask = new TextLoadAsyncTask(new WeakReference<>(binding.textPreview),\n                                                  new WeakReference<>(binding.emptyListProgress));\n        textLoadAsyncTask.execute(getFile().getStoragePath());\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func loadAndShowTextPreview() {\n    let textLoadAsyncTask = TextLoadAsyncTask(textPreview: WeakReference(binding.textPreview), emptyListProgress: WeakReference(binding.emptyListProgress))\n    textLoadAsyncTask.execute(file.storagePath)\n}\n```"
    },
    {
        "method_name": "onPreExecute",
        "method_code": "@Override\n        protected void onPreExecute() {\n            // not used at the moment\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled onPreExecute from PreviewTextFileFragment.java into Swift.\n\n        Input:\n\n        Method Name: onPreExecute\n\n        Method Code: @Override\n        protected void onPreExecute() {\n            // not used at the moment\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onPreExecute() {\n    // not used at the moment\n}\n```"
    },
    {
        "method_name": "doInBackground",
        "method_code": "@Override\n        protected StringWriter doInBackground(Object... params) {\n            if (params.length != PARAMS_LENGTH) {\n                throw new IllegalArgumentException(\"The parameter to \" + TextLoadAsyncTask.class.getName()\n                                                       + \" must be (1) the file location\");\n            }\n            String location = (String) params[0];\n\n            Scanner scanner = null;\n            StringWriter source = new StringWriter();\n            BufferedWriter bufferedWriter = new BufferedWriter(source);\n            Reader reader = null;\n\n            try {\n                File file = new File(location);\n                reader = ReaderFactory.createReaderFromFile(file);\n                scanner = new Scanner(reader);\n\n                while (scanner.hasNextLine()) {\n                    bufferedWriter.append(scanner.nextLine());\n                    if (scanner.hasNextLine()) {\n                        bufferedWriter.append(\"\\n\");\n                    }\n                }\n                bufferedWriter.close();\n                IOException exc = scanner.ioException();\n                if (exc != null) {\n                    throw exc;\n                }\n            } catch (IOException e) {\n                Log_OC.e(TAG, e.getMessage(), e);\n                finish();\n            } finally {\n                if (reader != null) {\n                    try {\n                        reader.close();\n                    } catch (IOException e) {\n                        Log_OC.e(TAG, e.getMessage(), e);\n                        finish();\n                    }\n                }\n                if (scanner != null) {\n                    scanner.close();\n                }\n            }\n            return source;\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled doInBackground from PreviewTextFileFragment.java into Swift.\n\n        Input:\n\n        Method Name: doInBackground\n\n        Method Code: @Override\n        protected StringWriter doInBackground(Object... params) {\n            if (params.length != PARAMS_LENGTH) {\n                throw new IllegalArgumentException(\"The parameter to \" + TextLoadAsyncTask.class.getName()\n                                                       + \" must be (1) the file location\");\n            }\n            String location = (String) params[0];\n\n            Scanner scanner = null;\n            StringWriter source = new StringWriter();\n            BufferedWriter bufferedWriter = new BufferedWriter(source);\n            Reader reader = null;\n\n            try {\n                File file = new File(location);\n                reader = ReaderFactory.createReaderFromFile(file);\n                scanner = new Scanner(reader);\n\n                while (scanner.hasNextLine()) {\n                    bufferedWriter.append(scanner.nextLine());\n                    if (scanner.hasNextLine()) {\n                        bufferedWriter.append(\"\\n\");\n                    }\n                }\n                bufferedWriter.close();\n                IOException exc = scanner.ioException();\n                if (exc != null) {\n                    throw exc;\n                }\n            } catch (IOException e) {\n                Log_OC.e(TAG, e.getMessage(), e);\n                finish();\n            } finally {\n                if (reader != null) {\n                    try {\n                        reader.close();\n                    } catch (IOException e) {\n                        Log_OC.e(TAG, e.getMessage(), e);\n                        finish();\n                    }\n                }\n                if (scanner != null) {\n                    scanner.close();\n                }\n            }\n            return source;\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc doInBackground(params: [Any]) throws -> StringWriter {\n    guard params.count == PARAMS_LENGTH else {\n        throw NSError(domain: \"InvalidParameter\", code: 0, userInfo: [NSLocalizedDescriptionKey: \"The parameter to TextLoadAsyncTask must be (1) the file location\"])\n    }\n    let location = params[0] as! String\n\n    var scanner: Scanner? = nil\n    let source = StringWriter()\n    let bufferedWriter = BufferedWriter(source: source)\n    var reader: Reader? = nil\n\n    do {\n        let file = File(location: location)\n        reader = try ReaderFactory.createReaderFromFile(file: file)\n        scanner = Scanner(reader: reader!)\n\n        while scanner!.hasNextLine() {\n            try bufferedWriter.append(scanner!.nextLine())\n            if scanner!.hasNextLine() {\n                try bufferedWriter.append(\"\\n\")\n            }\n        }\n        try bufferedWriter.close()\n        if let exc = scanner!.ioException() {\n            throw exc\n        }\n    } catch let e as NSError {\n        Log_OC.e(TAG, e.localizedDescription, e)\n        finish()\n    } finally {\n        if reader != nil {\n            do {\n                try reader!.close()\n            } catch let e as NSError {\n                Log_OC.e(TAG, e.localizedDescription, e)\n                finish()\n            }\n        }\n        scanner?.close()\n    }\n    return source\n}\n```"
    },
    {
        "method_name": "onPostExecute",
        "method_code": "@Override\n        @SuppressFBWarnings(\"STT\")\n        protected void onPostExecute(final StringWriter stringWriter) {\n            final TextView textView = textViewReference.get();\n\n            if (textView != null) {\n                originalText = stringWriter.toString();\n                setText(textView, originalText, getFile(), requireActivity(), false, false, viewThemeUtils);\n\n                if (searchView != null) {\n                    searchView.setOnQueryTextListener(PreviewTextFileFragment.this);\n\n                    if (searchOpen && searchView != null) {\n                        searchView.setQuery(searchQuery, true);\n                    }\n                }\n\n                textView.setVisibility(View.VISIBLE);\n            }\n\n            final FrameLayout progress = progressViewReference.get();\n            if (progress != null) {\n                progress.setVisibility(View.GONE);\n            }\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled onPostExecute from PreviewTextFileFragment.java into Swift.\n\n        Input:\n\n        Method Name: onPostExecute\n\n        Method Code: @Override\n        @SuppressFBWarnings(\"STT\")\n        protected void onPostExecute(final StringWriter stringWriter) {\n            final TextView textView = textViewReference.get();\n\n            if (textView != null) {\n                originalText = stringWriter.toString();\n                setText(textView, originalText, getFile(), requireActivity(), false, false, viewThemeUtils);\n\n                if (searchView != null) {\n                    searchView.setOnQueryTextListener(PreviewTextFileFragment.this);\n\n                    if (searchOpen && searchView != null) {\n                        searchView.setQuery(searchQuery, true);\n                    }\n                }\n\n                textView.setVisibility(View.VISIBLE);\n            }\n\n            final FrameLayout progress = progressViewReference.get();\n            if (progress != null) {\n                progress.setVisibility(View.GONE);\n            }\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onPostExecute(_ stringWriter: StringWriter) {\n    if let textView = textViewReference.get() {\n        originalText = stringWriter.toString()\n        setText(textView, originalText, getFile(), requireActivity(), false, false, viewThemeUtils)\n\n        if let searchView = searchView {\n            searchView.setOnQueryTextListener(self)\n\n            if searchOpen {\n                searchView.setQuery(searchQuery, submit: true)\n            }\n        }\n\n        textView.isHidden = false\n    }\n\n    if let progress = progressViewReference.get() {\n        progress.isHidden = true\n    }\n}\n```"
    },
    {
        "method_name": "onCreateOptionsMenu",
        "method_code": "@Override\n    public void onCreateOptionsMenu(@NonNull Menu menu, @NonNull MenuInflater inflater) {\n        super.onCreateOptionsMenu(menu, inflater);\n        inflater.inflate(R.menu.custom_menu_placeholder, menu);\n\n        MenuItem menuItem = menu.findItem(R.id.action_search);\n        menuItem.setVisible(true);\n        searchView = (SearchView) MenuItemCompat.getActionView(menuItem);\n        searchView.setMaxWidth(Integer.MAX_VALUE);\n        viewThemeUtils.androidx.themeToolbarSearchView(searchView);\n\n        if (searchOpen) {\n            searchView.setIconified(false);\n            searchView.setQuery(searchQuery, false);\n            searchView.clearFocus();\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreateOptionsMenu from PreviewTextFileFragment.java into Swift.\n\n        Input:\n\n        Method Name: onCreateOptionsMenu\n\n        Method Code: @Override\n    public void onCreateOptionsMenu(@NonNull Menu menu, @NonNull MenuInflater inflater) {\n        super.onCreateOptionsMenu(menu, inflater);\n        inflater.inflate(R.menu.custom_menu_placeholder, menu);\n\n        MenuItem menuItem = menu.findItem(R.id.action_search);\n        menuItem.setVisible(true);\n        searchView = (SearchView) MenuItemCompat.getActionView(menuItem);\n        searchView.setMaxWidth(Integer.MAX_VALUE);\n        viewThemeUtils.androidx.themeToolbarSearchView(searchView);\n\n        if (searchOpen) {\n            searchView.setIconified(false);\n            searchView.setQuery(searchQuery, false);\n            searchView.clearFocus();\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onCreateOptionsMenu(_ menu: Menu, _ inflater: MenuInflater) {\n    super.onCreateOptionsMenu(menu, inflater)\n    inflater.inflate(R.menu.custom_menu_placeholder, menu)\n\n    if let menuItem = menu.findItem(R.id.action_search) {\n        menuItem.isVisible = true\n        if let searchView = menuItem.actionView as? UISearchBar {\n            searchView.searchBarStyle = .minimal\n            searchView.placeholder = \"Search\"\n            searchView.showsCancelButton = true\n\n            if searchOpen {\n                searchView.becomeFirstResponder()\n                searchView.text = searchQuery\n            }\n        }\n    }\n}\n```"
    },
    {
        "method_name": "onOptionsItemSelected",
        "method_code": "@Override\n    public boolean onOptionsItemSelected(@NonNull MenuItem item) {\n        if (item.getItemId() == R.id.custom_menu_placeholder_item) {\n            final OCFile file = getFile();\n            if (containerActivity.getStorageManager() != null && file != null) {\n                // Update the file\n                final OCFile updatedFile = containerActivity.getStorageManager().getFileById(file.getFileId());\n                setFile(updatedFile);\n\n                final OCFile fileNew = getFile();\n                if (fileNew != null) {\n                    showFileActions(file);\n                }\n            }\n            return true;\n        }\n        return super.onOptionsItemSelected(item);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onOptionsItemSelected from PreviewTextFileFragment.java into Swift.\n\n        Input:\n\n        Method Name: onOptionsItemSelected\n\n        Method Code: @Override\n    public boolean onOptionsItemSelected(@NonNull MenuItem item) {\n        if (item.getItemId() == R.id.custom_menu_placeholder_item) {\n            final OCFile file = getFile();\n            if (containerActivity.getStorageManager() != null && file != null) {\n                // Update the file\n                final OCFile updatedFile = containerActivity.getStorageManager().getFileById(file.getFileId());\n                setFile(updatedFile);\n\n                final OCFile fileNew = getFile();\n                if (fileNew != null) {\n                    showFileActions(file);\n                }\n            }\n            return true;\n        }\n        return super.onOptionsItemSelected(item);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onOptionsItemSelected(_ item: MenuItem) -> Bool {\n    if item.itemId == R.id.custom_menu_placeholder_item {\n        if let file = getFile(), let storageManager = containerActivity.storageManager {\n            // Update the file\n            if let updatedFile = storageManager.getFileById(file.fileId) {\n                setFile(updatedFile)\n                \n                if let fileNew = getFile() {\n                    showFileActions(file)\n                }\n            }\n        }\n        return true\n    }\n    return super.onOptionsItemSelected(item)\n}\n```"
    },
    {
        "method_name": "showFileActions",
        "method_code": "private void showFileActions(OCFile file) {\n        final List<Integer> additionalFilter = new ArrayList<>(\n            Arrays.asList(\n                R.id.action_rename_file,\n                R.id.action_sync_file,\n                R.id.action_move_or_copy,\n                R.id.action_favorite,\n                R.id.action_unset_favorite,\n                R.id.action_pin_to_homescreen\n                         ));\n        if (getFile() != null && getFile().isSharedWithMe() && !getFile().canReshare()) {\n            additionalFilter.add(R.id.action_send_share_file);\n        }\n        final FragmentManager fragmentManager = getChildFragmentManager();\n        FileActionsBottomSheet.newInstance(file, false, additionalFilter)\n            .setResultListener(fragmentManager, this, this::onFileActionChosen)\n            .show(fragmentManager, \"actions\");\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showFileActions from PreviewTextFileFragment.java into Swift.\n\n        Input:\n\n        Method Name: showFileActions\n\n        Method Code: private void showFileActions(OCFile file) {\n        final List<Integer> additionalFilter = new ArrayList<>(\n            Arrays.asList(\n                R.id.action_rename_file,\n                R.id.action_sync_file,\n                R.id.action_move_or_copy,\n                R.id.action_favorite,\n                R.id.action_unset_favorite,\n                R.id.action_pin_to_homescreen\n                         ));\n        if (getFile() != null && getFile().isSharedWithMe() && !getFile().canReshare()) {\n            additionalFilter.add(R.id.action_send_share_file);\n        }\n        final FragmentManager fragmentManager = getChildFragmentManager();\n        FileActionsBottomSheet.newInstance(file, false, additionalFilter)\n            .setResultListener(fragmentManager, this, this::onFileActionChosen)\n            .show(fragmentManager, \"actions\");\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func showFileActions(file: OCFile) {\n    var additionalFilter: [Int] = [\n        R.id.action_rename_file,\n        R.id.action_sync_file,\n        R.id.action_move_or_copy,\n        R.id.action_favorite,\n        R.id.action_unset_favorite,\n        R.id.action_pin_to_homescreen\n    ]\n    if let currentFile = getFile(), currentFile.isSharedWithMe(), !currentFile.canReshare() {\n        additionalFilter.append(R.id.action_send_share_file)\n    }\n    let fragmentManager = self.children\n    FileActionsBottomSheet.newInstance(file: file, flag: false, additionalFilter: additionalFilter)\n        .setResultListener(fragmentManager: fragmentManager, listener: self, callback: self.onFileActionChosen)\n        .show(fragmentManager: fragmentManager, tag: \"actions\")\n}\n```"
    },
    {
        "method_name": "onFileActionChosen",
        "method_code": "private void onFileActionChosen(final int itemId) {\n        if (itemId == R.id.action_send_share_file) {\n            if (getFile().isSharedWithMe() && !getFile().canReshare()) {\n                DisplayUtils.showSnackMessage(getView(), R.string.resharing_is_not_allowed);\n            } else {\n                containerActivity.getFileOperationsHelper().sendShareFile(getFile());\n            }\n        } else if (itemId == R.id.action_open_file_with) {\n            openFile();\n        } else if (itemId == R.id.action_remove_file) {\n            RemoveFilesDialogFragment dialog = RemoveFilesDialogFragment.newInstance(getFile());\n            dialog.show(getFragmentManager(), ConfirmationDialogFragment.FTAG_CONFIRMATION);\n        } else if (itemId == R.id.action_see_details) {\n            seeDetails();\n        } else if (itemId == R.id.action_sync_file) {\n            containerActivity.getFileOperationsHelper().syncFile(getFile());\n        } else if(itemId == R.id.action_cancel_sync){\n            containerActivity.getFileOperationsHelper().cancelTransference(getFile());\n        } else if (itemId == R.id.action_edit) {\n            containerActivity.getFileOperationsHelper().openFileWithTextEditor(getFile(), getContext());\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onFileActionChosen from PreviewTextFileFragment.java into Swift.\n\n        Input:\n\n        Method Name: onFileActionChosen\n\n        Method Code: private void onFileActionChosen(final int itemId) {\n        if (itemId == R.id.action_send_share_file) {\n            if (getFile().isSharedWithMe() && !getFile().canReshare()) {\n                DisplayUtils.showSnackMessage(getView(), R.string.resharing_is_not_allowed);\n            } else {\n                containerActivity.getFileOperationsHelper().sendShareFile(getFile());\n            }\n        } else if (itemId == R.id.action_open_file_with) {\n            openFile();\n        } else if (itemId == R.id.action_remove_file) {\n            RemoveFilesDialogFragment dialog = RemoveFilesDialogFragment.newInstance(getFile());\n            dialog.show(getFragmentManager(), ConfirmationDialogFragment.FTAG_CONFIRMATION);\n        } else if (itemId == R.id.action_see_details) {\n            seeDetails();\n        } else if (itemId == R.id.action_sync_file) {\n            containerActivity.getFileOperationsHelper().syncFile(getFile());\n        } else if(itemId == R.id.action_cancel_sync){\n            containerActivity.getFileOperationsHelper().cancelTransference(getFile());\n        } else if (itemId == R.id.action_edit) {\n            containerActivity.getFileOperationsHelper().openFileWithTextEditor(getFile(), getContext());\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func onFileActionChosen(itemId: Int) {\n    if itemId == R.id.action_send_share_file {\n        if getFile().isSharedWithMe() && !getFile().canReshare() {\n            DisplayUtils.showSnackMessage(view: getView(), message: R.string.resharing_is_not_allowed)\n        } else {\n            containerActivity.getFileOperationsHelper().sendShareFile(file: getFile())\n        }\n    } else if itemId == R.id.action_open_file_with {\n        openFile()\n    } else if itemId == R.id.action_remove_file {\n        let dialog = RemoveFilesDialogFragment.newInstance(file: getFile())\n        dialog.show(fragmentManager: getFragmentManager(), tag: ConfirmationDialogFragment.FTAG_CONFIRMATION)\n    } else if itemId == R.id.action_see_details {\n        seeDetails()\n    } else if itemId == R.id.action_sync_file {\n        containerActivity.getFileOperationsHelper().syncFile(file: getFile())\n    } else if itemId == R.id.action_cancel_sync {\n        containerActivity.getFileOperationsHelper().cancelTransference(file: getFile())\n    } else if itemId == R.id.action_edit {\n        containerActivity.getFileOperationsHelper().openFileWithTextEditor(file: getFile(), context: getContext())\n    }\n}\n```"
    },
    {
        "method_name": "updateFile",
        "method_code": "public void updateFile(OCFile file) {\n        setFile(file);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled updateFile from PreviewTextFileFragment.java into Swift.\n\n        Input:\n\n        Method Name: updateFile\n\n        Method Code: public void updateFile(OCFile file) {\n        setFile(file);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc updateFile(_ file: OCFile) {\n    setFile(file)\n}\n```"
    },
    {
        "method_name": "seeDetails",
        "method_code": "private void seeDetails() {\n        containerActivity.showDetails(getFile());\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled seeDetails from PreviewTextFileFragment.java into Swift.\n\n        Input:\n\n        Method Name: seeDetails\n\n        Method Code: private void seeDetails() {\n        containerActivity.showDetails(getFile());\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func seeDetails() {\n    containerActivity.showDetails(getFile())\n}\n```"
    },
    {
        "method_name": "openFile",
        "method_code": "private void openFile() {\n        containerActivity.getFileOperationsHelper().openFile(getFile());\n        finish();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled openFile from PreviewTextFileFragment.java into Swift.\n\n        Input:\n\n        Method Name: openFile\n\n        Method Code: private void openFile() {\n        containerActivity.getFileOperationsHelper().openFile(getFile());\n        finish();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func openFile() {\n    containerActivity.fileOperationsHelper.openFile(getFile())\n    finish()\n}\n```"
    },
    {
        "method_name": "canBePreviewed",
        "method_code": "public static boolean canBePreviewed(OCFile file) {\n        final List<String> unsupportedTypes = new LinkedList<>();\n        unsupportedTypes.add(\"text/richtext\");\n        unsupportedTypes.add(\"text/rtf\");\n        unsupportedTypes.add(\"text/calendar\");\n        unsupportedTypes.add(\"text/vnd.abc\");\n        unsupportedTypes.add(\"text/vnd.fmi.flexstor\");\n        unsupportedTypes.add(\"text/vnd.rn-realtext\");\n        unsupportedTypes.add(\"text/vnd.wap.wml\");\n        unsupportedTypes.add(\"text/vnd.wap.wmlscript\");\n        unsupportedTypes.add(\"text/html\");\n        return file != null && file.isDown() && MimeTypeUtil.isText(file) &&\n            !unsupportedTypes.contains(file.getMimeType()) &&\n            !unsupportedTypes.contains(MimeTypeUtil.getMimeTypeFromPath(file.getRemotePath()));\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled canBePreviewed from PreviewTextFileFragment.java into Swift.\n\n        Input:\n\n        Method Name: canBePreviewed\n\n        Method Code: public static boolean canBePreviewed(OCFile file) {\n        final List<String> unsupportedTypes = new LinkedList<>();\n        unsupportedTypes.add(\"text/richtext\");\n        unsupportedTypes.add(\"text/rtf\");\n        unsupportedTypes.add(\"text/calendar\");\n        unsupportedTypes.add(\"text/vnd.abc\");\n        unsupportedTypes.add(\"text/vnd.fmi.flexstor\");\n        unsupportedTypes.add(\"text/vnd.rn-realtext\");\n        unsupportedTypes.add(\"text/vnd.wap.wml\");\n        unsupportedTypes.add(\"text/vnd.wap.wmlscript\");\n        unsupportedTypes.add(\"text/html\");\n        return file != null && file.isDown() && MimeTypeUtil.isText(file) &&\n            !unsupportedTypes.contains(file.getMimeType()) &&\n            !unsupportedTypes.contains(MimeTypeUtil.getMimeTypeFromPath(file.getRemotePath()));\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func canBePreviewed(file: OCFile?) -> Bool {\n    let unsupportedTypes: [String] = [\n        \"text/richtext\",\n        \"text/rtf\",\n        \"text/calendar\",\n        \"text/vnd.abc\",\n        \"text/vnd.fmi.flexstor\",\n        \"text/vnd.rn-realtext\",\n        \"text/vnd.wap.wml\",\n        \"text/vnd.wap.wmlscript\",\n        \"text/html\"\n    ]\n    return file != nil && file!.isDown() && MimeTypeUtil.isText(file!) &&\n        !unsupportedTypes.contains(file!.getMimeType()) &&\n        !unsupportedTypes.contains(MimeTypeUtil.getMimeTypeFromPath(file!.getRemotePath()))\n}\n```"
    },
    {
        "method_name": "onStop",
        "method_code": "@Override\n    public void onStop() {\n        super.onStop();\n        Log_OC.e(TAG, \"onStop\");\n\n        if (textLoadAsyncTask != null) {\n            textLoadAsyncTask.cancel(true);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onStop from PreviewTextFileFragment.java into Swift.\n\n        Input:\n\n        Method Name: onStop\n\n        Method Code: @Override\n    public void onStop() {\n        super.onStop();\n        Log_OC.e(TAG, \"onStop\");\n\n        if (textLoadAsyncTask != null) {\n            textLoadAsyncTask.cancel(true);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n    NSLog(\"onStop\")\n\n    if let task = textLoadAsyncTask {\n        task.cancel()\n    }\n}\n```"
    }
]