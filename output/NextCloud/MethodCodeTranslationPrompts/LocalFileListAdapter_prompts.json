[
    {
        "method_name": "getItemCount",
        "method_code": "@Override\n    public int getItemCount() {\n        return mFiles.size() + 1;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getItemCount from LocalFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getItemCount\n\n        Method Code: @Override\n    public int getItemCount() {\n        return mFiles.size() + 1;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n    return mFiles.count + 1\n}\n```"
    },
    {
        "method_name": "getFilesCount",
        "method_code": "public int getFilesCount() {\n        return mFiles.size();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getFilesCount from LocalFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getFilesCount\n\n        Method Code: public int getFilesCount() {\n        return mFiles.size();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getFilesCount() -> Int {\n    return mFiles.count\n}\n```"
    },
    {
        "method_name": "isCheckedFile",
        "method_code": "public boolean isCheckedFile(File file) {\n        return checkedFiles.contains(file);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled isCheckedFile from LocalFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: isCheckedFile\n\n        Method Code: public boolean isCheckedFile(File file) {\n        return checkedFiles.contains(file);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc isCheckedFile(file: File) -> Bool {\n    return checkedFiles.contains(file)\n}\n```"
    },
    {
        "method_name": "removeCheckedFile",
        "method_code": "public void removeCheckedFile(File file) {\n        checkedFiles.remove(file);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled removeCheckedFile from LocalFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: removeCheckedFile\n\n        Method Code: public void removeCheckedFile(File file) {\n        checkedFiles.remove(file);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc removeCheckedFile(file: File) {\n    checkedFiles.remove(file)\n}\n```"
    },
    {
        "method_name": "addCheckedFile",
        "method_code": "public void addCheckedFile(File file) {\n        checkedFiles.add(file);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled addCheckedFile from LocalFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: addCheckedFile\n\n        Method Code: public void addCheckedFile(File file) {\n        checkedFiles.add(file);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc addCheckedFile(file: File) {\n    checkedFiles.append(file)\n}\n```"
    },
    {
        "method_name": "addAllFilesToCheckedFiles",
        "method_code": "public void addAllFilesToCheckedFiles() {\n        if (isWithinEncryptedFolder) {\n            for (File file : mFilesAll) {\n                if (file.isFile()) {\n                    checkedFiles.add(file);\n                }\n            }\n        } else {\n            checkedFiles.addAll(mFiles);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled addAllFilesToCheckedFiles from LocalFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: addAllFilesToCheckedFiles\n\n        Method Code: public void addAllFilesToCheckedFiles() {\n        if (isWithinEncryptedFolder) {\n            for (File file : mFilesAll) {\n                if (file.isFile()) {\n                    checkedFiles.add(file);\n                }\n            }\n        } else {\n            checkedFiles.addAll(mFiles);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc addAllFilesToCheckedFiles() {\n    if isWithinEncryptedFolder {\n        for file in mFilesAll {\n            if file.isFile {\n                checkedFiles.append(file)\n            }\n        }\n    } else {\n        checkedFiles.append(contentsOf: mFiles)\n    }\n}\n```"
    },
    {
        "method_name": "removeAllFilesFromCheckedFiles",
        "method_code": "public void removeAllFilesFromCheckedFiles() {\n        checkedFiles.clear();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled removeAllFilesFromCheckedFiles from LocalFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: removeAllFilesFromCheckedFiles\n\n        Method Code: public void removeAllFilesFromCheckedFiles() {\n        checkedFiles.clear();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc removeAllFilesFromCheckedFiles() {\n    checkedFiles.removeAll()\n}\n```"
    },
    {
        "method_name": "getItemPosition",
        "method_code": "public int getItemPosition(File file) {\n        return mFiles.indexOf(file);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getItemPosition from LocalFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getItemPosition\n\n        Method Code: public int getItemPosition(File file) {\n        return mFiles.indexOf(file);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getItemPosition(file: File) -> Int {\n    return mFiles.firstIndex(of: file) ?? -1\n}\n```"
    },
    {
        "method_name": "getCheckedFilesPath",
        "method_code": "public String[] getCheckedFilesPath() {\n        List<String> result = listFilesRecursive(checkedFiles);\n\n        Log_OC.d(TAG, \"Returning \" + result.size() + \" selected files\");\n\n        return result.toArray(new String[0]);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getCheckedFilesPath from LocalFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getCheckedFilesPath\n\n        Method Code: public String[] getCheckedFilesPath() {\n        List<String> result = listFilesRecursive(checkedFiles);\n\n        Log_OC.d(TAG, \"Returning \" + result.size() + \" selected files\");\n\n        return result.toArray(new String[0]);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getCheckedFilesPath() -> [String] {\n    let result = listFilesRecursive(checkedFiles)\n    \n    print(\"Returning \\(result.count) selected files\")\n    \n    return result\n}\n```"
    },
    {
        "method_name": "listFilesRecursive",
        "method_code": "public List<String> listFilesRecursive(Collection<File> files) {\n        List<String> result = new ArrayList<>();\n\n        for (File file : files) {\n            if (file.isDirectory()) {\n                result.addAll(listFilesRecursive(getFiles(file)));\n            } else {\n                result.add(file.getAbsolutePath());\n            }\n        }\n\n        return result;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled listFilesRecursive from LocalFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: listFilesRecursive\n\n        Method Code: public List<String> listFilesRecursive(Collection<File> files) {\n        List<String> result = new ArrayList<>();\n\n        for (File file : files) {\n            if (file.isDirectory()) {\n                result.addAll(listFilesRecursive(getFiles(file)));\n            } else {\n                result.add(file.getAbsolutePath());\n            }\n        }\n\n        return result;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc listFilesRecursive(_ files: [File]) -> [String] {\n    var result: [String] = []\n\n    for file in files {\n        if file.isDirectory {\n            result.append(contentsOf: listFilesRecursive(getFiles(file)))\n        } else {\n            result.append(file.absolutePath)\n        }\n    }\n\n    return result\n}\n```"
    },
    {
        "method_name": "getItemId",
        "method_code": "@Override\n    public long getItemId(int position) {\n        return mFiles.size() <= position ? position : -1;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getItemId from LocalFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getItemId\n\n        Method Code: @Override\n    public long getItemId(int position) {\n        return mFiles.size() <= position ? position : -1;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getItemId(position: Int) -> Int {\n    return mFiles.count <= position ? position : -1\n}\n```"
    },
    {
        "method_name": "onBindViewHolder",
        "method_code": "@Override\n    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {\n        if (holder instanceof LocalFileListFooterViewHolder) {\n            ((LocalFileListFooterViewHolder) holder).footerText.setText(getFooterText());\n        } else {\n            File file = null;\n            if (mFiles.size() > position && mFiles.get(position) != null) {\n                file = mFiles.get(position);\n            }\n\n            if (file != null) {\n                File finalFile = file;\n\n                LocalFileListGridImageViewHolder gridViewHolder = (LocalFileListGridImageViewHolder) holder;\n\n                if (mLocalFolderPicker) {\n                    gridViewHolder.itemLayout.setBackgroundColor(mContext.getResources().getColor(R.color.bg_default));\n                    gridViewHolder.checkbox.setVisibility(View.GONE);\n                } else {\n                    gridViewHolder.checkbox.setVisibility(View.VISIBLE);\n                    if (isCheckedFile(file)) {\n                        gridViewHolder.itemLayout.setBackgroundColor(ContextCompat.getColor(mContext, R.color.selected_item_background));\n\n                        gridViewHolder.checkbox.setImageDrawable(\n                            viewThemeUtils.platform.tintDrawable(mContext, R.drawable.ic_checkbox_marked, ColorRole.PRIMARY));\n                    } else {\n                        gridViewHolder.itemLayout.setBackgroundColor(mContext.getResources().getColor(R.color.bg_default));\n                        gridViewHolder.checkbox.setImageResource(R.drawable.ic_checkbox_blank_outline);\n                    }\n                    gridViewHolder.checkbox.setOnClickListener(v -> localFileListFragmentInterface\n                        .onItemCheckboxClicked(finalFile));\n                }\n\n                gridViewHolder.thumbnail.setTag(file.hashCode());\n                setThumbnail(file, gridViewHolder.thumbnail, mContext, viewThemeUtils);\n\n                gridViewHolder.itemLayout.setOnClickListener(v -> localFileListFragmentInterface\n                    .onItemClicked(finalFile));\n\n                if (holder instanceof LocalFileListItemViewHolder) {\n                    LocalFileListItemViewHolder itemViewHolder = (LocalFileListItemViewHolder) holder;\n\n                    if (file.isDirectory()) {\n                        itemViewHolder.fileSize.setVisibility(View.GONE);\n                        itemViewHolder.fileSeparator.setVisibility(View.GONE);\n                        if (isWithinEncryptedFolder) {\n                            itemViewHolder.checkbox.setVisibility(View.GONE);\n                        }\n                    } else {\n                        itemViewHolder.fileSize.setVisibility(View.VISIBLE);\n                        itemViewHolder.fileSeparator.setVisibility(View.VISIBLE);\n                        itemViewHolder.fileSize.setText(DisplayUtils.bytesToHumanReadable(file.length()));\n                    }\n                    itemViewHolder.lastModification.setText(DisplayUtils.getRelativeTimestamp(mContext,\n                            file.lastModified()));\n                }\n\n                if (gridViewHolder instanceof LocalFileListGridItemViewHolder) {\n                    LocalFileListGridItemViewHolder itemVH = (LocalFileListGridItemViewHolder) gridViewHolder;\n                    itemVH.fileName.setText(file.getName());\n\n                    if (gridView && (MimeTypeUtil.isImage(file) || MimeTypeUtil.isVideo(file) ||\n                        localFileListFragmentInterface.getColumnsCount() > showFilenameColumnThreshold)) {\n                        itemVH.fileName.setVisibility(View.GONE);\n                    } else {\n                        itemVH.fileName.setVisibility(View.VISIBLE);\n                    }\n                }\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onBindViewHolder from LocalFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: onBindViewHolder\n\n        Method Code: @Override\n    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {\n        if (holder instanceof LocalFileListFooterViewHolder) {\n            ((LocalFileListFooterViewHolder) holder).footerText.setText(getFooterText());\n        } else {\n            File file = null;\n            if (mFiles.size() > position && mFiles.get(position) != null) {\n                file = mFiles.get(position);\n            }\n\n            if (file != null) {\n                File finalFile = file;\n\n                LocalFileListGridImageViewHolder gridViewHolder = (LocalFileListGridImageViewHolder) holder;\n\n                if (mLocalFolderPicker) {\n                    gridViewHolder.itemLayout.setBackgroundColor(mContext.getResources().getColor(R.color.bg_default));\n                    gridViewHolder.checkbox.setVisibility(View.GONE);\n                } else {\n                    gridViewHolder.checkbox.setVisibility(View.VISIBLE);\n                    if (isCheckedFile(file)) {\n                        gridViewHolder.itemLayout.setBackgroundColor(ContextCompat.getColor(mContext, R.color.selected_item_background));\n\n                        gridViewHolder.checkbox.setImageDrawable(\n                            viewThemeUtils.platform.tintDrawable(mContext, R.drawable.ic_checkbox_marked, ColorRole.PRIMARY));\n                    } else {\n                        gridViewHolder.itemLayout.setBackgroundColor(mContext.getResources().getColor(R.color.bg_default));\n                        gridViewHolder.checkbox.setImageResource(R.drawable.ic_checkbox_blank_outline);\n                    }\n                    gridViewHolder.checkbox.setOnClickListener(v -> localFileListFragmentInterface\n                        .onItemCheckboxClicked(finalFile));\n                }\n\n                gridViewHolder.thumbnail.setTag(file.hashCode());\n                setThumbnail(file, gridViewHolder.thumbnail, mContext, viewThemeUtils);\n\n                gridViewHolder.itemLayout.setOnClickListener(v -> localFileListFragmentInterface\n                    .onItemClicked(finalFile));\n\n                if (holder instanceof LocalFileListItemViewHolder) {\n                    LocalFileListItemViewHolder itemViewHolder = (LocalFileListItemViewHolder) holder;\n\n                    if (file.isDirectory()) {\n                        itemViewHolder.fileSize.setVisibility(View.GONE);\n                        itemViewHolder.fileSeparator.setVisibility(View.GONE);\n                        if (isWithinEncryptedFolder) {\n                            itemViewHolder.checkbox.setVisibility(View.GONE);\n                        }\n                    } else {\n                        itemViewHolder.fileSize.setVisibility(View.VISIBLE);\n                        itemViewHolder.fileSeparator.setVisibility(View.VISIBLE);\n                        itemViewHolder.fileSize.setText(DisplayUtils.bytesToHumanReadable(file.length()));\n                    }\n                    itemViewHolder.lastModification.setText(DisplayUtils.getRelativeTimestamp(mContext,\n                            file.lastModified()));\n                }\n\n                if (gridViewHolder instanceof LocalFileListGridItemViewHolder) {\n                    LocalFileListGridItemViewHolder itemVH = (LocalFileListGridItemViewHolder) gridViewHolder;\n                    itemVH.fileName.setText(file.getName());\n\n                    if (gridView && (MimeTypeUtil.isImage(file) || MimeTypeUtil.isVideo(file) ||\n                        localFileListFragmentInterface.getColumnsCount() > showFilenameColumnThreshold)) {\n                        itemVH.fileName.setVisibility(View.GONE);\n                    } else {\n                        itemVH.fileName.setVisibility(View.VISIBLE);\n                    }\n                }\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onBindViewHolder(_ holder: RecyclerView.ViewHolder, position: Int) {\n    if let footerViewHolder = holder as? LocalFileListFooterViewHolder {\n        footerViewHolder.footerText.text = getFooterText()\n    } else {\n        var file: File? = nil\n        if mFiles.count > position && mFiles[position] != nil {\n            file = mFiles[position]\n        }\n\n        if let file = file {\n            let finalFile = file\n\n            if let gridViewHolder = holder as? LocalFileListGridImageViewHolder {\n                if mLocalFolderPicker {\n                    gridViewHolder.itemLayout.backgroundColor = mContext.resources.getColor(R.color.bg_default)\n                    gridViewHolder.checkbox.isHidden = true\n                } else {\n                    gridViewHolder.checkbox.isHidden = false\n                    if isCheckedFile(file) {\n                        gridViewHolder.itemLayout.backgroundColor = ContextCompat.getColor(mContext, R.color.selected_item_background)\n                        gridViewHolder.checkbox.image = viewThemeUtils.platform.tintDrawable(mContext, R.drawable.ic_checkbox_marked, ColorRole.PRIMARY)\n                    } else {\n                        gridViewHolder.itemLayout.backgroundColor = mContext.resources.getColor(R.color.bg_default)\n                        gridViewHolder.checkbox.image = UIImage(named: \"ic_checkbox_blank_outline\")\n                    }\n                    gridViewHolder.checkbox.addTarget(self, action: #selector(localFileListFragmentInterface.onItemCheckboxClicked(_:)), for: .touchUpInside)\n                }\n\n                gridViewHolder.thumbnail.tag = file.hashValue\n                setThumbnail(file, gridViewHolder.thumbnail, mContext, viewThemeUtils)\n\n                gridViewHolder.itemLayout.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(localFileListFragmentInterface.onItemClicked(_:))))\n\n                if let itemViewHolder = holder as? LocalFileListItemViewHolder {\n                    if file.isDirectory {\n                        itemViewHolder.fileSize.isHidden = true\n                        itemViewHolder.fileSeparator.isHidden = true\n                        if isWithinEncryptedFolder {\n                            itemViewHolder.checkbox.isHidden = true\n                        }\n                    } else {\n                        itemViewHolder.fileSize.isHidden = false\n                        itemViewHolder.fileSeparator.isHidden = false\n                        itemViewHolder.fileSize.text = DisplayUtils.bytesToHumanReadable(file.length)\n                    }\n                    itemViewHolder.lastModification.text = DisplayUtils.getRelativeTimestamp(mContext, file.lastModified)\n                }\n\n                if let itemVH = gridViewHolder as? LocalFileListGridItemViewHolder {\n                    itemVH.fileName.text = file.name\n\n                    if gridView && (MimeTypeUtil.isImage(file) || MimeTypeUtil.isVideo(file) || localFileListFragmentInterface.getColumnsCount() > showFilenameColumnThreshold) {\n                        itemVH.fileName.isHidden = true\n                    } else {\n                        itemVH.fileName.isHidden = false\n                    }\n                }\n            }\n        }\n    }\n}\n```"
    },
    {
        "method_name": "setThumbnail",
        "method_code": "public static void setThumbnail(File file,\n                                    ImageView thumbnailView,\n                                    Context context,\n                                    ViewThemeUtils viewThemeUtils) {\n        if (file.isDirectory()) {\n            thumbnailView.setImageDrawable(MimeTypeUtil.getDefaultFolderIcon(context, viewThemeUtils));\n        } else {\n            thumbnailView.setImageResource(R.drawable.file);\n\n            /* Cancellation needs do be checked and done before changing the drawable in fileIcon, or\n             * {@link ThumbnailsCacheManager#cancelPotentialThumbnailWork} will NEVER cancel any task.\n             */\n            boolean allowedToCreateNewThumbnail = ThumbnailsCacheManager.cancelPotentialThumbnailWork(file,\n                                                                                                      thumbnailView);\n\n\n            // get Thumbnail if file is image\n            if (MimeTypeUtil.isImage(file)) {\n                // Thumbnail in Cache?\n                Bitmap thumbnail = ThumbnailsCacheManager.getBitmapFromDiskCache(\n                        ThumbnailsCacheManager.PREFIX_THUMBNAIL + file.hashCode()\n                );\n                if (thumbnail != null) {\n                    thumbnailView.setImageBitmap(thumbnail);\n                } else {\n\n                    // generate new Thumbnail\n                    if (allowedToCreateNewThumbnail) {\n                        final ThumbnailsCacheManager.ThumbnailGenerationTask task =\n                                new ThumbnailsCacheManager.ThumbnailGenerationTask(thumbnailView);\n                        if (MimeTypeUtil.isVideo(file)) {\n                            thumbnail = ThumbnailsCacheManager.mDefaultVideo;\n                        } else {\n                            thumbnail = ThumbnailsCacheManager.mDefaultImg;\n                        }\n                        final ThumbnailsCacheManager.AsyncThumbnailDrawable asyncDrawable =\n                                new ThumbnailsCacheManager.AsyncThumbnailDrawable(\n                                    context.getResources(),\n                                    thumbnail,\n                                    task\n                                );\n                        thumbnailView.setImageDrawable(asyncDrawable);\n                        task.execute(new ThumbnailsCacheManager.ThumbnailGenerationTaskObject(file, null));\n                        Log_OC.v(TAG, \"Executing task to generate a new thumbnail\");\n\n                    } // else, already being generated, don't restart it\n                }\n            } else {\n                thumbnailView.setImageDrawable(MimeTypeUtil.getFileTypeIcon(null,\n                                                                            file.getName(),\n                                                                            context,\n                                                                            viewThemeUtils));\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setThumbnail from LocalFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: setThumbnail\n\n        Method Code: public static void setThumbnail(File file,\n                                    ImageView thumbnailView,\n                                    Context context,\n                                    ViewThemeUtils viewThemeUtils) {\n        if (file.isDirectory()) {\n            thumbnailView.setImageDrawable(MimeTypeUtil.getDefaultFolderIcon(context, viewThemeUtils));\n        } else {\n            thumbnailView.setImageResource(R.drawable.file);\n\n            /* Cancellation needs do be checked and done before changing the drawable in fileIcon, or\n             * {@link ThumbnailsCacheManager#cancelPotentialThumbnailWork} will NEVER cancel any task.\n             */\n            boolean allowedToCreateNewThumbnail = ThumbnailsCacheManager.cancelPotentialThumbnailWork(file,\n                                                                                                      thumbnailView);\n\n\n            // get Thumbnail if file is image\n            if (MimeTypeUtil.isImage(file)) {\n                // Thumbnail in Cache?\n                Bitmap thumbnail = ThumbnailsCacheManager.getBitmapFromDiskCache(\n                        ThumbnailsCacheManager.PREFIX_THUMBNAIL + file.hashCode()\n                );\n                if (thumbnail != null) {\n                    thumbnailView.setImageBitmap(thumbnail);\n                } else {\n\n                    // generate new Thumbnail\n                    if (allowedToCreateNewThumbnail) {\n                        final ThumbnailsCacheManager.ThumbnailGenerationTask task =\n                                new ThumbnailsCacheManager.ThumbnailGenerationTask(thumbnailView);\n                        if (MimeTypeUtil.isVideo(file)) {\n                            thumbnail = ThumbnailsCacheManager.mDefaultVideo;\n                        } else {\n                            thumbnail = ThumbnailsCacheManager.mDefaultImg;\n                        }\n                        final ThumbnailsCacheManager.AsyncThumbnailDrawable asyncDrawable =\n                                new ThumbnailsCacheManager.AsyncThumbnailDrawable(\n                                    context.getResources(),\n                                    thumbnail,\n                                    task\n                                );\n                        thumbnailView.setImageDrawable(asyncDrawable);\n                        task.execute(new ThumbnailsCacheManager.ThumbnailGenerationTaskObject(file, null));\n                        Log_OC.v(TAG, \"Executing task to generate a new thumbnail\");\n\n                    } // else, already being generated, don't restart it\n                }\n            } else {\n                thumbnailView.setImageDrawable(MimeTypeUtil.getFileTypeIcon(null,\n                                                                            file.getName(),\n                                                                            context,\n                                                                            viewThemeUtils));\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport UIKit\n\nclass LocalFileListAdapter {\n    static func setThumbnail(file: File, thumbnailView: UIImageView, context: Context, viewThemeUtils: ViewThemeUtils) {\n        if file.isDirectory() {\n            thumbnailView.image = MimeTypeUtil.getDefaultFolderIcon(context: context, viewThemeUtils: viewThemeUtils)\n        } else {\n            thumbnailView.image = UIImage(named: \"file\")\n\n            let allowedToCreateNewThumbnail = ThumbnailsCacheManager.cancelPotentialThumbnailWork(file: file, thumbnailView: thumbnailView)\n\n            if MimeTypeUtil.isImage(file: file) {\n                if let thumbnail = ThumbnailsCacheManager.getBitmapFromDiskCache(key: ThumbnailsCacheManager.PREFIX_THUMBNAIL + String(file.hashValue)) {\n                    thumbnailView.image = thumbnail\n                } else {\n                    if allowedToCreateNewThumbnail {\n                        let task = ThumbnailsCacheManager.ThumbnailGenerationTask(thumbnailView: thumbnailView)\n                        let thumbnail: UIImage\n                        if MimeTypeUtil.isVideo(file: file) {\n                            thumbnail = ThumbnailsCacheManager.mDefaultVideo\n                        } else {\n                            thumbnail = ThumbnailsCacheManager.mDefaultImg\n                        }\n                        let asyncDrawable = ThumbnailsCacheManager.AsyncThumbnailDrawable(resources: context.resources, placeholder: thumbnail, task: task)\n                        thumbnailView.image = asyncDrawable\n                        task.execute(taskObject: ThumbnailsCacheManager.ThumbnailGenerationTaskObject(file: file, additionalData: nil))\n                        Log_OC.v(tag: TAG, message: \"Executing task to generate a new thumbnail\")\n                    }\n                }\n            } else {\n                thumbnailView.image = MimeTypeUtil.getFileTypeIcon(fileName: file.name, context: context, viewThemeUtils: viewThemeUtils)\n            }\n        }\n    }\n}\n```"
    },
    {
        "method_name": "getItemViewType",
        "method_code": "@Override\n    public int getItemViewType(int position) {\n        if (position == mFiles.size()) {\n            return VIEWTYPE_FOOTER;\n        } else {\n            if (MimeTypeUtil.isImageOrVideo(getItem(position))) {\n                return VIEWTYPE_IMAGE;\n            } else {\n                return VIEWTYPE_ITEM;\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getItemViewType from LocalFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getItemViewType\n\n        Method Code: @Override\n    public int getItemViewType(int position) {\n        if (position == mFiles.size()) {\n            return VIEWTYPE_FOOTER;\n        } else {\n            if (MimeTypeUtil.isImageOrVideo(getItem(position))) {\n                return VIEWTYPE_IMAGE;\n            } else {\n                return VIEWTYPE_ITEM;\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getItemViewType(position: Int) -> Int {\n    if position == mFiles.count {\n        return VIEWTYPE_FOOTER\n    } else {\n        if MimeTypeUtil.isImageOrVideo(getItem(position)) {\n            return VIEWTYPE_IMAGE\n        } else {\n            return VIEWTYPE_ITEM\n        }\n    }\n}\n```"
    },
    {
        "method_name": "getItem",
        "method_code": "private File getItem(int position) {\n        return mFiles.get(position);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getItem from LocalFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getItem\n\n        Method Code: private File getItem(int position) {\n        return mFiles.get(position);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getItem(position: Int) -> File {\n    return mFiles[position]\n}\n```"
    },
    {
        "method_name": "onCreateViewHolder",
        "method_code": "@NonNull\n    @Override\n    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n        switch (viewType) {\n            default:\n            case VIEWTYPE_ITEM:\n                if (gridView) {\n                    View itemView = LayoutInflater.from(mContext).inflate(R.layout.grid_item, parent, false);\n                    return new LocalFileListGridItemViewHolder(itemView);\n                } else {\n                    View itemView = LayoutInflater.from(mContext).inflate(R.layout.list_item, parent, false);\n                    return new LocalFileListItemViewHolder(itemView);\n                }\n\n            case VIEWTYPE_IMAGE:\n                if (gridView) {\n                    View itemView = LayoutInflater.from(mContext).inflate(R.layout.grid_image, parent, false);\n                    return new LocalFileListGridImageViewHolder(itemView);\n                } else {\n                    View itemView = LayoutInflater.from(mContext).inflate(R.layout.list_item, parent, false);\n                    return new LocalFileListItemViewHolder(itemView);\n                }\n\n            case VIEWTYPE_FOOTER:\n                View itemView = LayoutInflater.from(mContext).inflate(R.layout.list_footer, parent, false);\n                return new LocalFileListFooterViewHolder(itemView);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreateViewHolder from LocalFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: onCreateViewHolder\n\n        Method Code: @NonNull\n    @Override\n    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n        switch (viewType) {\n            default:\n            case VIEWTYPE_ITEM:\n                if (gridView) {\n                    View itemView = LayoutInflater.from(mContext).inflate(R.layout.grid_item, parent, false);\n                    return new LocalFileListGridItemViewHolder(itemView);\n                } else {\n                    View itemView = LayoutInflater.from(mContext).inflate(R.layout.list_item, parent, false);\n                    return new LocalFileListItemViewHolder(itemView);\n                }\n\n            case VIEWTYPE_IMAGE:\n                if (gridView) {\n                    View itemView = LayoutInflater.from(mContext).inflate(R.layout.grid_image, parent, false);\n                    return new LocalFileListGridImageViewHolder(itemView);\n                } else {\n                    View itemView = LayoutInflater.from(mContext).inflate(R.layout.list_item, parent, false);\n                    return new LocalFileListItemViewHolder(itemView);\n                }\n\n            case VIEWTYPE_FOOTER:\n                View itemView = LayoutInflater.from(mContext).inflate(R.layout.list_footer, parent, false);\n                return new LocalFileListFooterViewHolder(itemView);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n    let viewType = getViewType(for: indexPath)\n    switch viewType {\n    case .item:\n        if gridView {\n            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"GridItemCell\", for: indexPath) as! LocalFileListGridItemViewHolder\n            return cell\n        } else {\n            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"ListItemCell\", for: indexPath) as! LocalFileListItemViewHolder\n            return cell\n        }\n    case .image:\n        if gridView {\n            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"GridImageCell\", for: indexPath) as! LocalFileListGridImageViewHolder\n            return cell\n        } else {\n            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"ListItemCell\", for: indexPath) as! LocalFileListItemViewHolder\n            return cell\n        }\n    case .footer:\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"ListFooterCell\", for: indexPath) as! LocalFileListFooterViewHolder\n        return cell\n    }\n}\n```"
    },
    {
        "method_name": "swapDirectory",
        "method_code": "public void swapDirectory(final File directory) {\n        localFileListFragmentInterface.setLoading(true);\n        final Handler uiHandler = new Handler(Looper.getMainLooper());\n        Executors.newSingleThreadExecutor().execute(() -> {\n            List<File> fileList;\n            if (directory == null) {\n                fileList = new ArrayList<>();\n            } else {\n                if (mLocalFolderPicker) {\n                    fileList = getFolders(directory);\n                } else {\n                    fileList = getFiles(directory);\n                }\n            }\n\n            if (!fileList.isEmpty()) {\n                FileSortOrder sortOrder = preferences.getSortOrderByType(FileSortOrder.Type.localFileListView);\n                fileList = sortOrder.sortLocalFiles(fileList);\n\n                // Fetch preferences for showing hidden files\n                boolean showHiddenFiles = preferences.isShowHiddenFilesEnabled();\n                if (!showHiddenFiles) {\n                    fileList = filterHiddenFiles(fileList);\n                }\n            }\n            final List<File> newFiles = fileList;\n\n            uiHandler.post(() -> {\n                mFiles = newFiles;\n                mFilesAll = new ArrayList<>();\n                mFilesAll.addAll(mFiles);\n\n                notifyDataSetChanged();\n                localFileListFragmentInterface.setLoading(false);\n            });\n        });\n\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled swapDirectory from LocalFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: swapDirectory\n\n        Method Code: public void swapDirectory(final File directory) {\n        localFileListFragmentInterface.setLoading(true);\n        final Handler uiHandler = new Handler(Looper.getMainLooper());\n        Executors.newSingleThreadExecutor().execute(() -> {\n            List<File> fileList;\n            if (directory == null) {\n                fileList = new ArrayList<>();\n            } else {\n                if (mLocalFolderPicker) {\n                    fileList = getFolders(directory);\n                } else {\n                    fileList = getFiles(directory);\n                }\n            }\n\n            if (!fileList.isEmpty()) {\n                FileSortOrder sortOrder = preferences.getSortOrderByType(FileSortOrder.Type.localFileListView);\n                fileList = sortOrder.sortLocalFiles(fileList);\n\n                // Fetch preferences for showing hidden files\n                boolean showHiddenFiles = preferences.isShowHiddenFilesEnabled();\n                if (!showHiddenFiles) {\n                    fileList = filterHiddenFiles(fileList);\n                }\n            }\n            final List<File> newFiles = fileList;\n\n            uiHandler.post(() -> {\n                mFiles = newFiles;\n                mFilesAll = new ArrayList<>();\n                mFilesAll.addAll(mFiles);\n\n                notifyDataSetChanged();\n                localFileListFragmentInterface.setLoading(false);\n            });\n        });\n\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc swapDirectory(_ directory: File?) {\n    localFileListFragmentInterface.setLoading(true)\n    let uiHandler = DispatchQueue.main\n    DispatchQueue.global().async {\n        var fileList: [File]\n        if directory == nil {\n            fileList = []\n        } else {\n            if mLocalFolderPicker {\n                fileList = self.getFolders(directory!)\n            } else {\n                fileList = self.getFiles(directory!)\n            }\n        }\n\n        if !fileList.isEmpty {\n            let sortOrder = preferences.getSortOrderByType(.localFileListView)\n            fileList = sortOrder.sortLocalFiles(fileList)\n\n            let showHiddenFiles = preferences.isShowHiddenFilesEnabled()\n            if !showHiddenFiles {\n                fileList = self.filterHiddenFiles(fileList)\n            }\n        }\n        let newFiles = fileList\n\n        uiHandler.async {\n            self.mFiles = newFiles\n            self.mFilesAll = []\n            self.mFilesAll.append(contentsOf: self.mFiles)\n\n            self.notifyDataSetChanged()\n            self.localFileListFragmentInterface.setLoading(false)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "setSortOrder",
        "method_code": "public void setSortOrder(FileSortOrder sortOrder) {\n        localFileListFragmentInterface.setLoading(true);\n        final Handler uiHandler = new Handler(Looper.getMainLooper());\n        Executors.newSingleThreadExecutor().execute(() -> {\n            preferences.setSortOrder(FileSortOrder.Type.localFileListView, sortOrder);\n            mFiles = sortOrder.sortLocalFiles(mFiles);\n\n            uiHandler.post(() -> {\n                notifyDataSetChanged();\n                localFileListFragmentInterface.setLoading(false);\n            });\n        });\n\n\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setSortOrder from LocalFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: setSortOrder\n\n        Method Code: public void setSortOrder(FileSortOrder sortOrder) {\n        localFileListFragmentInterface.setLoading(true);\n        final Handler uiHandler = new Handler(Looper.getMainLooper());\n        Executors.newSingleThreadExecutor().execute(() -> {\n            preferences.setSortOrder(FileSortOrder.Type.localFileListView, sortOrder);\n            mFiles = sortOrder.sortLocalFiles(mFiles);\n\n            uiHandler.post(() -> {\n                notifyDataSetChanged();\n                localFileListFragmentInterface.setLoading(false);\n            });\n        });\n\n\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setSortOrder(_ sortOrder: FileSortOrder) {\n    localFileListFragmentInterface.setLoading(true)\n    DispatchQueue.global().async {\n        preferences.setSortOrder(.localFileListView, sortOrder)\n        self.mFiles = sortOrder.sortLocalFiles(self.mFiles)\n\n        DispatchQueue.main.async {\n            self.notifyDataSetChanged()\n            self.localFileListFragmentInterface.setLoading(false)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "getFolders",
        "method_code": "private List<File> getFolders(final File directory) {\n        File[] folders = directory.listFiles(File::isDirectory);\n\n        if (folders != null && folders.length > 0) {\n            return new ArrayList<>(Arrays.asList(folders));\n        } else {\n            return new ArrayList<>();\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getFolders from LocalFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getFolders\n\n        Method Code: private List<File> getFolders(final File directory) {\n        File[] folders = directory.listFiles(File::isDirectory);\n\n        if (folders != null && folders.length > 0) {\n            return new ArrayList<>(Arrays.asList(folders));\n        } else {\n            return new ArrayList<>();\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getFolders(directory: File) -> [File] {\n    if let folders = try? FileManager.default.contentsOfDirectory(at: directory, includingPropertiesForKeys: nil, options: .skipsHiddenFiles).filter({ $0.hasDirectoryPath }) {\n        return folders\n    } else {\n        return []\n    }\n}\n```"
    },
    {
        "method_name": "getFiles",
        "method_code": "private List<File> getFiles(File directory) {\n        File[] files = directory.listFiles();\n\n        if (files != null && files.length > 0) {\n            return new ArrayList<>(Arrays.asList(files));\n        } else {\n            return new ArrayList<>();\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getFiles from LocalFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getFiles\n\n        Method Code: private List<File> getFiles(File directory) {\n        File[] files = directory.listFiles();\n\n        if (files != null && files.length > 0) {\n            return new ArrayList<>(Arrays.asList(files));\n        } else {\n            return new ArrayList<>();\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getFiles(directory: URL) -> [URL] {\n    do {\n        let files = try FileManager.default.contentsOfDirectory(at: directory, includingPropertiesForKeys: nil)\n        return files\n    } catch {\n        return []\n    }\n}\n```"
    },
    {
        "method_name": "filter",
        "method_code": "public void filter(String text) {\n        if (text.isEmpty()) {\n            mFiles = mFilesAll;\n        } else {\n            List<File> result = new ArrayList<>();\n            String filterText = text.toLowerCase(Locale.getDefault());\n            for (File file : mFilesAll) {\n                if (file.getName().toLowerCase(Locale.getDefault()).contains(filterText)) {\n                    result.add(file);\n                }\n            }\n            mFiles = result;\n        }\n        notifyDataSetChanged();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled filter from LocalFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: filter\n\n        Method Code: public void filter(String text) {\n        if (text.isEmpty()) {\n            mFiles = mFilesAll;\n        } else {\n            List<File> result = new ArrayList<>();\n            String filterText = text.toLowerCase(Locale.getDefault());\n            for (File file : mFilesAll) {\n                if (file.getName().toLowerCase(Locale.getDefault()).contains(filterText)) {\n                    result.add(file);\n                }\n            }\n            mFiles = result;\n        }\n        notifyDataSetChanged();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc filter(_ text: String) {\n    if text.isEmpty {\n        mFiles = mFilesAll\n    } else {\n        var result: [File] = []\n        let filterText = text.lowercased()\n        for file in mFilesAll {\n            if file.name.lowercased().contains(filterText) {\n                result.append(file)\n            }\n        }\n        mFiles = result\n    }\n    notifyDataSetChanged()\n}\n```"
    },
    {
        "method_name": "filterHiddenFiles",
        "method_code": "private List<File> filterHiddenFiles(List<File> files) {\n        List<File> ret = new ArrayList<>();\n\n        for (File file : files) {\n            if (!file.isHidden()) {\n                ret.add(file);\n            }\n        }\n        return ret;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled filterHiddenFiles from LocalFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: filterHiddenFiles\n\n        Method Code: private List<File> filterHiddenFiles(List<File> files) {\n        List<File> ret = new ArrayList<>();\n\n        for (File file : files) {\n            if (!file.isHidden()) {\n                ret.add(file);\n            }\n        }\n        return ret;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func filterHiddenFiles(_ files: [File]) -> [File] {\n    var ret: [File] = []\n\n    for file in files {\n        if !file.isHidden {\n            ret.append(file)\n        }\n    }\n    return ret\n}\n```"
    },
    {
        "method_name": "getFooterText",
        "method_code": "private String getFooterText() {\n        int filesCount = 0;\n        int foldersCount = 0;\n\n        for (File file : mFiles) {\n            if (file.isDirectory()) {\n                foldersCount++;\n            } else {\n                if (!file.isHidden()) {\n                    filesCount++;\n                }\n            }\n        }\n\n        return generateFooterText(filesCount, foldersCount);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getFooterText from LocalFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getFooterText\n\n        Method Code: private String getFooterText() {\n        int filesCount = 0;\n        int foldersCount = 0;\n\n        for (File file : mFiles) {\n            if (file.isDirectory()) {\n                foldersCount++;\n            } else {\n                if (!file.isHidden()) {\n                    filesCount++;\n                }\n            }\n        }\n\n        return generateFooterText(filesCount, foldersCount);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getFooterText() -> String {\n    var filesCount = 0\n    var foldersCount = 0\n\n    for file in mFiles {\n        if file.isDirectory {\n            foldersCount += 1\n        } else {\n            if !file.isHidden {\n                filesCount += 1\n            }\n        }\n    }\n\n    return generateFooterText(filesCount: filesCount, foldersCount: foldersCount)\n}\n```"
    },
    {
        "method_name": "generateFooterText",
        "method_code": "private String generateFooterText(int filesCount, int foldersCount) {\n        String output;\n        Resources resources = mContext.getResources();\n\n        if (filesCount + foldersCount <= 0) {\n            output = \"\";\n        } else if (foldersCount <= 0) {\n            output = resources.getQuantityString(R.plurals.file_list__footer__file, filesCount, filesCount);\n        } else if (filesCount <= 0) {\n            output = resources.getQuantityString(R.plurals.file_list__footer__folder, foldersCount, foldersCount);\n        } else {\n            output = resources.getQuantityString(R.plurals.file_list__footer__file, filesCount, filesCount) + \", \" +\n                resources.getQuantityString(R.plurals.file_list__footer__folder, foldersCount, foldersCount);\n        }\n\n        return output;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled generateFooterText from LocalFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: generateFooterText\n\n        Method Code: private String generateFooterText(int filesCount, int foldersCount) {\n        String output;\n        Resources resources = mContext.getResources();\n\n        if (filesCount + foldersCount <= 0) {\n            output = \"\";\n        } else if (foldersCount <= 0) {\n            output = resources.getQuantityString(R.plurals.file_list__footer__file, filesCount, filesCount);\n        } else if (filesCount <= 0) {\n            output = resources.getQuantityString(R.plurals.file_list__footer__folder, foldersCount, foldersCount);\n        } else {\n            output = resources.getQuantityString(R.plurals.file_list__footer__file, filesCount, filesCount) + \", \" +\n                resources.getQuantityString(R.plurals.file_list__footer__folder, foldersCount, foldersCount);\n        }\n\n        return output;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func generateFooterText(filesCount: Int, foldersCount: Int) -> String {\n    var output: String\n    let resources = mContext.resources\n\n    if filesCount + foldersCount <= 0 {\n        output = \"\"\n    } else if foldersCount <= 0 {\n        output = resources.localizedStringWithFormat(NSLocalizedString(\"file_list__footer__file\", comment: \"\"), filesCount)\n    } else if filesCount <= 0 {\n        output = resources.localizedStringWithFormat(NSLocalizedString(\"file_list__footer__folder\", comment: \"\"), foldersCount)\n    } else {\n        output = resources.localizedStringWithFormat(NSLocalizedString(\"file_list__footer__file\", comment: \"\"), filesCount) + \", \" +\n            resources.localizedStringWithFormat(NSLocalizedString(\"file_list__footer__folder\", comment: \"\"), foldersCount)\n    }\n\n    return output\n}\n```"
    },
    {
        "method_name": "setGridView",
        "method_code": "public void setGridView(boolean gridView) {\n        this.gridView = gridView;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setGridView from LocalFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: setGridView\n\n        Method Code: public void setGridView(boolean gridView) {\n        this.gridView = gridView;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setGridView(_ gridView: Bool) {\n    self.gridView = gridView\n}\n```"
    },
    {
        "method_name": "checkedFilesCount",
        "method_code": "public int checkedFilesCount() {\n        return checkedFiles.size();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled checkedFilesCount from LocalFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: checkedFilesCount\n\n        Method Code: public int checkedFilesCount() {\n        return checkedFiles.size();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc checkedFilesCount() -> Int {\n    return checkedFiles.count\n}\n```"
    },
    {
        "method_name": "setFiles",
        "method_code": "@VisibleForTesting\n    public void setFiles(List<File> newFiles) {\n        mFiles = newFiles;\n        mFilesAll = new ArrayList<>();\n        mFilesAll.addAll(mFiles);\n\n        notifyDataSetChanged();\n        localFileListFragmentInterface.setLoading(false);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setFiles from LocalFileListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: setFiles\n\n        Method Code: @VisibleForTesting\n    public void setFiles(List<File> newFiles) {\n        mFiles = newFiles;\n        mFilesAll = new ArrayList<>();\n        mFilesAll.addAll(mFiles);\n\n        notifyDataSetChanged();\n        localFileListFragmentInterface.setLoading(false);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setFiles(newFiles: [File]) {\n    mFiles = newFiles\n    mFilesAll = []\n    mFilesAll.append(contentsOf: mFiles)\n\n    notifyDataSetChanged()\n    localFileListFragmentInterface.setLoading(false)\n}\n```"
    }
]