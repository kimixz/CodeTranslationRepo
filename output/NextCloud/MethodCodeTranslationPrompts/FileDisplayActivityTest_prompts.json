[
    {
        "method_name": "testSetupToolbar",
        "method_code": "@Test\n    public void testSetupToolbar() {\n        try (ActivityScenario<FileDisplayActivity> scenario = ActivityScenario.launch(FileDisplayActivity.class)) {\n            InstrumentationRegistry.getInstrumentation().waitForIdleSync();\n            InstrumentationRegistry.getInstrumentation().runOnMainSync(() -> {\n                Activity activity =\n                    ActivityLifecycleMonitorRegistry.getInstance().getActivitiesInStage(RESUMED).iterator().next();\n                if (activity instanceof WhatsNewActivity) {\n                    activity.onBackPressed();\n                }\n            });\n            scenario.recreate();\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled testSetupToolbar from FileDisplayActivityTest.java into Swift.\n\n        Input:\n\n        Method Name: testSetupToolbar\n\n        Method Code: @Test\n    public void testSetupToolbar() {\n        try (ActivityScenario<FileDisplayActivity> scenario = ActivityScenario.launch(FileDisplayActivity.class)) {\n            InstrumentationRegistry.getInstrumentation().waitForIdleSync();\n            InstrumentationRegistry.getInstrumentation().runOnMainSync(() -> {\n                Activity activity =\n                    ActivityLifecycleMonitorRegistry.getInstance().getActivitiesInStage(RESUMED).iterator().next();\n                if (activity instanceof WhatsNewActivity) {\n                    activity.onBackPressed();\n                }\n            });\n            scenario.recreate();\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc testSetupToolbar() {\n    let expectation = XCTestExpectation(description: \"Wait for activity to be recreated\")\n    \n    let scenario = XCUIApplication()\n    scenario.launch()\n    \n    DispatchQueue.main.async {\n        let activity = XCUIApplication().windows.element(boundBy: 0)\n        if activity.identifier == \"WhatsNewActivity\" {\n            activity.buttons[\"Back\"].tap()\n        }\n    }\n    \n    scenario.terminate()\n    scenario.launch()\n    \n    expectation.fulfill()\n    wait(for: [expectation], timeout: 5.0)\n}\n```"
    }
]