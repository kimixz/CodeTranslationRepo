[
    {
        "method_name": "setActivityAndVersionItems",
        "method_code": "public void setActivityAndVersionItems(List<Object> items, NextcloudClient newClient, boolean clear) {\n        if (client == null) {\n            client = newClient;\n        }\n        if (clear) {\n            values.clear();\n            Collections.sort(items, (o1, o2) -> {\n                long o1Date;\n                long o2Date;\n                if (o1 instanceof Activity) {\n                    o1Date = ((Activity) o1).getDatetime().getTime();\n                } else {\n                    o1Date = ((FileVersion) o1).getModifiedTimestamp();\n                }\n\n                if (o2 instanceof Activity) {\n                    o2Date = ((Activity) o2).getDatetime().getTime();\n                } else {\n                    o2Date = ((FileVersion) o2).getModifiedTimestamp();\n                }\n\n                return -1 * Long.compare(o1Date, o2Date);\n            });\n        }\n\n        String sTime = \"\";\n        for (Object item : items) {\n            String time;\n\n            if (item instanceof Activity) {\n                Activity activity = (Activity) item;\n                time = getHeaderDateString(context, activity.getDatetime().getTime()).toString();\n            } else {\n                FileVersion version = (FileVersion) item;\n                time = getHeaderDateString(context, version.getModifiedTimestamp()).toString();\n            }\n\n            if (sTime.equalsIgnoreCase(time)) {\n                values.add(item);\n            } else {\n                sTime = time;\n                values.add(sTime);\n                values.add(item);\n            }\n        }\n\n        notifyDataSetChanged();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setActivityAndVersionItems from ActivityAndVersionListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: setActivityAndVersionItems\n\n        Method Code: public void setActivityAndVersionItems(List<Object> items, NextcloudClient newClient, boolean clear) {\n        if (client == null) {\n            client = newClient;\n        }\n        if (clear) {\n            values.clear();\n            Collections.sort(items, (o1, o2) -> {\n                long o1Date;\n                long o2Date;\n                if (o1 instanceof Activity) {\n                    o1Date = ((Activity) o1).getDatetime().getTime();\n                } else {\n                    o1Date = ((FileVersion) o1).getModifiedTimestamp();\n                }\n\n                if (o2 instanceof Activity) {\n                    o2Date = ((Activity) o2).getDatetime().getTime();\n                } else {\n                    o2Date = ((FileVersion) o2).getModifiedTimestamp();\n                }\n\n                return -1 * Long.compare(o1Date, o2Date);\n            });\n        }\n\n        String sTime = \"\";\n        for (Object item : items) {\n            String time;\n\n            if (item instanceof Activity) {\n                Activity activity = (Activity) item;\n                time = getHeaderDateString(context, activity.getDatetime().getTime()).toString();\n            } else {\n                FileVersion version = (FileVersion) item;\n                time = getHeaderDateString(context, version.getModifiedTimestamp()).toString();\n            }\n\n            if (sTime.equalsIgnoreCase(time)) {\n                values.add(item);\n            } else {\n                sTime = time;\n                values.add(sTime);\n                values.add(item);\n            }\n        }\n\n        notifyDataSetChanged();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setActivityAndVersionItems(items: [Any], newClient: NextcloudClient, clear: Bool) {\n    if client == nil {\n        client = newClient\n    }\n    if clear {\n        values.removeAll()\n        let sortedItems = items.sorted { (o1, o2) -> Bool in\n            let o1Date: TimeInterval\n            let o2Date: TimeInterval\n            if let activity1 = o1 as? Activity {\n                o1Date = activity1.datetime.timeIntervalSince1970\n            } else if let fileVersion1 = o1 as? FileVersion {\n                o1Date = fileVersion1.modifiedTimestamp\n            } else {\n                return false\n            }\n            \n            if let activity2 = o2 as? Activity {\n                o2Date = activity2.datetime.timeIntervalSince1970\n            } else if let fileVersion2 = o2 as? FileVersion {\n                o2Date = fileVersion2.modifiedTimestamp\n            } else {\n                return false\n            }\n            \n            return o1Date > o2Date\n        }\n        items = sortedItems\n    }\n    \n    var sTime = \"\"\n    for item in items {\n        var time: String\n        \n        if let activity = item as? Activity {\n            time = getHeaderDateString(context: context, date: activity.datetime.timeIntervalSince1970)\n        } else if let version = item as? FileVersion {\n            time = getHeaderDateString(context: context, date: version.modifiedTimestamp)\n        } else {\n            continue\n        }\n        \n        if sTime.caseInsensitiveCompare(time) == .orderedSame {\n            values.append(item)\n        } else {\n            sTime = time\n            values.append(sTime)\n            values.append(item)\n        }\n    }\n    \n    notifyDataSetChanged()\n}\n```"
    },
    {
        "method_name": "onCreateViewHolder",
        "method_code": "@NonNull\n    @Override\n    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n        if (viewType == VERSION_TYPE) {\n            return new VersionViewHolder(VersionListItemBinding.inflate(LayoutInflater.from(parent.getContext())));\n        }\n\n        return super.onCreateViewHolder(parent, viewType);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreateViewHolder from ActivityAndVersionListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: onCreateViewHolder\n\n        Method Code: @NonNull\n    @Override\n    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n        if (viewType == VERSION_TYPE) {\n            return new VersionViewHolder(VersionListItemBinding.inflate(LayoutInflater.from(parent.getContext())));\n        }\n\n        return super.onCreateViewHolder(parent, viewType);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n    let viewType = self.viewType(for: indexPath)\n    if viewType == VERSION_TYPE {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"VersionViewHolder\", for: indexPath) as! VersionViewHolder\n        return cell\n    }\n    return super.collectionView(collectionView, cellForItemAt: indexPath)\n}\n```"
    },
    {
        "method_name": "onBindViewHolder",
        "method_code": "@Override\n    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {\n        if (holder instanceof VersionViewHolder) {\n            final VersionViewHolder versionViewHolder = (VersionViewHolder) holder;\n            FileVersion fileVersion = (FileVersion) values.get(position);\n\n            versionViewHolder.binding.size.setText(DisplayUtils.bytesToHumanReadable(fileVersion.getFileLength()));\n            versionViewHolder.binding.time.setText(\n                DateFormat.format(\"HH:mm\", new Date(fileVersion.getModifiedTimestamp()).getTime())\n            );\n\n            versionViewHolder.binding.restore.setOnClickListener(\n                v -> versionListInterface.onRestoreClicked(fileVersion)\n            );\n        } else {\n            super.onBindViewHolder(holder, position);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onBindViewHolder from ActivityAndVersionListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: onBindViewHolder\n\n        Method Code: @Override\n    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {\n        if (holder instanceof VersionViewHolder) {\n            final VersionViewHolder versionViewHolder = (VersionViewHolder) holder;\n            FileVersion fileVersion = (FileVersion) values.get(position);\n\n            versionViewHolder.binding.size.setText(DisplayUtils.bytesToHumanReadable(fileVersion.getFileLength()));\n            versionViewHolder.binding.time.setText(\n                DateFormat.format(\"HH:mm\", new Date(fileVersion.getModifiedTimestamp()).getTime())\n            );\n\n            versionViewHolder.binding.restore.setOnClickListener(\n                v -> versionListInterface.onRestoreClicked(fileVersion)\n            );\n        } else {\n            super.onBindViewHolder(holder, position);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onBindViewHolder(_ holder: RecyclerView.ViewHolder, position: Int) {\n    if let versionViewHolder = holder as? VersionViewHolder {\n        let fileVersion = values[position] as! FileVersion\n\n        versionViewHolder.binding.size.text = DisplayUtils.bytesToHumanReadable(fileVersion.fileLength)\n        versionViewHolder.binding.time.text = DateFormatter.localizedString(from: Date(timeIntervalSince1970: TimeInterval(fileVersion.modifiedTimestamp)), dateStyle: .none, timeStyle: .short)\n\n        versionViewHolder.binding.restore.addTarget(self, action: #selector(onRestoreClicked(_:)), for: .touchUpInside)\n    } else {\n        super.onBindViewHolder(holder, position: position)\n    }\n}\n\n@objc func onRestoreClicked(_ sender: UIButton) {\n    if let indexPath = tableView.indexPath(for: sender.superview?.superview as! UITableViewCell) {\n        let fileVersion = values[indexPath.row] as! FileVersion\n        versionListInterface.onRestoreClicked(fileVersion)\n    }\n}\n```"
    },
    {
        "method_name": "getItemViewType",
        "method_code": "@Override\n    public int getItemViewType(int position) {\n        Object value = values.get(position);\n\n        if (value instanceof Activity) {\n            return ACTIVITY_TYPE;\n        } else if (value instanceof FileVersion) {\n            return VERSION_TYPE;\n        } else {\n            return HEADER_TYPE;\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getItemViewType from ActivityAndVersionListAdapter.java into Swift.\n\n        Input:\n\n        Method Name: getItemViewType\n\n        Method Code: @Override\n    public int getItemViewType(int position) {\n        Object value = values.get(position);\n\n        if (value instanceof Activity) {\n            return ACTIVITY_TYPE;\n        } else if (value instanceof FileVersion) {\n            return VERSION_TYPE;\n        } else {\n            return HEADER_TYPE;\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getItemViewType(position: Int) -> Int {\n    let value = values[position]\n\n    if value is Activity {\n        return ACTIVITY_TYPE\n    } else if value is FileVersion {\n        return VERSION_TYPE\n    } else {\n        return HEADER_TYPE\n    }\n}\n```"
    }
]