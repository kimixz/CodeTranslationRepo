[
    {
        "method_name": "onCreate",
        "method_code": "@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        binding = FileDetailsSharingMenuBottomSheetFragmentBinding.inflate(getLayoutInflater());\n        setContentView(binding.getRoot());\n\n        if (getWindow() != null) {\n            getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\n        }\n\n        viewThemeUtils.platform.themeDialog(binding.getRoot());\n\n        viewThemeUtils.platform.colorImageView(binding.menuIconAddAnotherLink);\n        viewThemeUtils.platform.colorImageView(binding.menuIconAdvancedPermissions);\n        viewThemeUtils.platform.colorImageView(binding.menuIconSendLink);\n        viewThemeUtils.platform.colorImageView(binding.menuIconUnshare);\n        viewThemeUtils.platform.colorImageView(binding.menuIconSendNewEmail);\n\n        updateUI();\n\n        setupClickListener();\n\n        setOnShowListener(d ->\n                              BottomSheetBehavior.from((View) binding.getRoot().getParent())\n                                  .setPeekHeight(binding.getRoot().getMeasuredHeight())\n                         );\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreate from FileDetailSharingMenuBottomSheetDialog.java into Swift.\n\n        Input:\n\n        Method Name: onCreate\n\n        Method Code: @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        binding = FileDetailsSharingMenuBottomSheetFragmentBinding.inflate(getLayoutInflater());\n        setContentView(binding.getRoot());\n\n        if (getWindow() != null) {\n            getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\n        }\n\n        viewThemeUtils.platform.themeDialog(binding.getRoot());\n\n        viewThemeUtils.platform.colorImageView(binding.menuIconAddAnotherLink);\n        viewThemeUtils.platform.colorImageView(binding.menuIconAdvancedPermissions);\n        viewThemeUtils.platform.colorImageView(binding.menuIconSendLink);\n        viewThemeUtils.platform.colorImageView(binding.menuIconUnshare);\n        viewThemeUtils.platform.colorImageView(binding.menuIconSendNewEmail);\n\n        updateUI();\n\n        setupClickListener();\n\n        setOnShowListener(d ->\n                              BottomSheetBehavior.from((View) binding.getRoot().getParent())\n                                  .setPeekHeight(binding.getRoot().getMeasuredHeight())\n                         );\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    binding = FileDetailsSharingMenuBottomSheetFragmentBinding.inflate(layoutInflater)\n    view = binding.root\n\n    if let window = view.window {\n        window.setLayout(width: .matchParent, height: .wrapContent)\n    }\n\n    viewThemeUtils.platform.themeDialog(binding.root)\n\n    viewThemeUtils.platform.colorImageView(binding.menuIconAddAnotherLink)\n    viewThemeUtils.platform.colorImageView(binding.menuIconAdvancedPermissions)\n    viewThemeUtils.platform.colorImageView(binding.menuIconSendLink)\n    viewThemeUtils.platform.colorImageView(binding.menuIconUnshare)\n    viewThemeUtils.platform.colorImageView(binding.menuIconSendNewEmail)\n\n    updateUI()\n\n    setupClickListener()\n\n    setOnShowListener { _ in\n        if let parentView = binding.root.superview {\n            BottomSheetBehavior.from(parentView).peekHeight = binding.root.measuredHeight\n        }\n    }\n}\n```"
    },
    {
        "method_name": "updateUI",
        "method_code": "private void updateUI() {\n        if (ocShare.getShareType() == ShareType.PUBLIC_LINK) {\n            binding.menuShareAddAnotherLink.setVisibility(View.VISIBLE);\n\n            if (MDMConfig.INSTANCE.sendFilesSupport(getContext())) {\n                binding.menuShareSendLink.setVisibility(View.VISIBLE);\n            }\n        } else {\n            binding.menuShareAddAnotherLink.setVisibility(View.GONE);\n            binding.menuShareSendLink.setVisibility(View.GONE);\n        }\n\n        if (SharingMenuHelper.isSecureFileDrop(ocShare)) {\n            binding.menuShareAdvancedPermissions.setVisibility(View.GONE);\n            binding.menuShareAddAnotherLink.setVisibility(View.GONE);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled updateUI from FileDetailSharingMenuBottomSheetDialog.java into Swift.\n\n        Input:\n\n        Method Name: updateUI\n\n        Method Code: private void updateUI() {\n        if (ocShare.getShareType() == ShareType.PUBLIC_LINK) {\n            binding.menuShareAddAnotherLink.setVisibility(View.VISIBLE);\n\n            if (MDMConfig.INSTANCE.sendFilesSupport(getContext())) {\n                binding.menuShareSendLink.setVisibility(View.VISIBLE);\n            }\n        } else {\n            binding.menuShareAddAnotherLink.setVisibility(View.GONE);\n            binding.menuShareSendLink.setVisibility(View.GONE);\n        }\n\n        if (SharingMenuHelper.isSecureFileDrop(ocShare)) {\n            binding.menuShareAdvancedPermissions.setVisibility(View.GONE);\n            binding.menuShareAddAnotherLink.setVisibility(View.GONE);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func updateUI() {\n    if ocShare.shareType == .publicLink {\n        binding.menuShareAddAnotherLink.isHidden = false\n\n        if MDMConfig.INSTANCE.sendFilesSupport(context) {\n            binding.menuShareSendLink.isHidden = false\n        }\n    } else {\n        binding.menuShareAddAnotherLink.isHidden = true\n        binding.menuShareSendLink.isHidden = true\n    }\n\n    if SharingMenuHelper.isSecureFileDrop(ocShare) {\n        binding.menuShareAdvancedPermissions.isHidden = true\n        binding.menuShareAddAnotherLink.isHidden = true\n    }\n}\n```"
    },
    {
        "method_name": "setupClickListener",
        "method_code": "private void setupClickListener() {\n        binding.menuShareAdvancedPermissions.setOnClickListener(v -> {\n            actions.advancedPermissions(ocShare);\n            dismiss();\n        });\n\n        binding.menuShareSendNewEmail.setOnClickListener(v -> {\n            actions.sendNewEmail(ocShare);\n            dismiss();\n        });\n\n        binding.menuShareUnshare.setOnClickListener(v -> {\n            actions.unShare(ocShare);\n            dismiss();\n        });\n\n        binding.menuShareSendLink.setOnClickListener(v -> {\n            actions.sendLink(ocShare);\n            dismiss();\n        });\n\n        binding.menuShareAddAnotherLink.setOnClickListener(v -> {\n            actions.addAnotherLink(ocShare);\n            dismiss();\n        });\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setupClickListener from FileDetailSharingMenuBottomSheetDialog.java into Swift.\n\n        Input:\n\n        Method Name: setupClickListener\n\n        Method Code: private void setupClickListener() {\n        binding.menuShareAdvancedPermissions.setOnClickListener(v -> {\n            actions.advancedPermissions(ocShare);\n            dismiss();\n        });\n\n        binding.menuShareSendNewEmail.setOnClickListener(v -> {\n            actions.sendNewEmail(ocShare);\n            dismiss();\n        });\n\n        binding.menuShareUnshare.setOnClickListener(v -> {\n            actions.unShare(ocShare);\n            dismiss();\n        });\n\n        binding.menuShareSendLink.setOnClickListener(v -> {\n            actions.sendLink(ocShare);\n            dismiss();\n        });\n\n        binding.menuShareAddAnotherLink.setOnClickListener(v -> {\n            actions.addAnotherLink(ocShare);\n            dismiss();\n        });\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setupClickListener() {\n    binding.menuShareAdvancedPermissions.addTarget(self, action: #selector(advancedPermissionsTapped), for: .touchUpInside)\n    binding.menuShareSendNewEmail.addTarget(self, action: #selector(sendNewEmailTapped), for: .touchUpInside)\n    binding.menuShareUnshare.addTarget(self, action: #selector(unshareTapped), for: .touchUpInside)\n    binding.menuShareSendLink.addTarget(self, action: #selector(sendLinkTapped), for: .touchUpInside)\n    binding.menuShareAddAnotherLink.addTarget(self, action: #selector(addAnotherLinkTapped), for: .touchUpInside)\n}\n\n@objc private func advancedPermissionsTapped() {\n    actions.advancedPermissions(ocShare)\n    dismiss()\n}\n\n@objc private func sendNewEmailTapped() {\n    actions.sendNewEmail(ocShare)\n    dismiss()\n}\n\n@objc private func unshareTapped() {\n    actions.unShare(ocShare)\n    dismiss()\n}\n\n@objc private func sendLinkTapped() {\n    actions.sendLink(ocShare)\n    dismiss()\n}\n\n@objc private func addAnotherLinkTapped() {\n    actions.addAnotherLink(ocShare)\n    dismiss()\n}\n```"
    },
    {
        "method_name": "onStop",
        "method_code": "@Override\n    protected void onStop() {\n        super.onStop();\n        binding = null;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onStop from FileDetailSharingMenuBottomSheetDialog.java into Swift.\n\n        Input:\n\n        Method Name: onStop\n\n        Method Code: @Override\n    protected void onStop() {\n        super.onStop();\n        binding = null;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n    binding = nil\n}\n```"
    }
]