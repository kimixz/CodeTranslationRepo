[
    {
        "method_name": "loadAll",
        "method_code": "public static List<AndroidCalendar> loadAll(ContentResolver resolver) {\n\n        if (missing(resolver, Calendars.CONTENT_URI) ||\n            missing(resolver, Events.CONTENT_URI)) {\n            return new ArrayList<>();\n        }\n\n        Cursor cur;\n        try {\n            cur = resolver.query(Calendars.CONTENT_URI, CAL_COLS, null, null, null);\n        } catch (Exception except) {\n            Log_OC.w(TAG, \"Calendar provider is missing columns, continuing anyway\");\n            cur = resolver.query(Calendars.CONTENT_URI, null, null, null, null);\n        }\n        List<AndroidCalendar> calendars = new ArrayList<>(cur.getCount());\n\n        while (cur.moveToNext()) {\n            if (getLong(cur, Calendars.DELETED) != 0) {\n                continue;\n            }\n\n            AndroidCalendar calendar = new AndroidCalendar();\n            calendar.mId = getLong(cur, Calendars._ID);\n            if (calendar.mId == -1) {\n                continue;\n            }\n            calendar.mIdStr = getString(cur, Calendars._ID);\n            calendar.mName = getString(cur, Calendars.NAME);\n            calendar.mDisplayName = getString(cur, Calendars.CALENDAR_DISPLAY_NAME);\n            calendar.mAccountName = getString(cur, Calendars.ACCOUNT_NAME);\n            calendar.mAccountType = getString(cur, Calendars.ACCOUNT_TYPE);\n            calendar.mOwner = getString(cur, Calendars.OWNER_ACCOUNT);\n            calendar.mIsActive = getLong(cur, Calendars.VISIBLE) == 1;\n            calendar.mTimezone = getString(cur, Calendars.CALENDAR_TIME_ZONE);\n\n            final String[] args = new String[]{calendar.mIdStr};\n            Cursor eventsCur = resolver.query(Events.CONTENT_URI, CAL_ID_COLS, CAL_ID_WHERE + \" AND deleted=0\", args, null);\n            calendar.mNumEntries = eventsCur.getCount();\n            eventsCur.close();\n            calendars.add(calendar);\n        }\n        cur.close();\n\n        return calendars;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled loadAll from AndroidCalendar.java into Swift.\n\n        Input:\n\n        Method Name: loadAll\n\n        Method Code: public static List<AndroidCalendar> loadAll(ContentResolver resolver) {\n\n        if (missing(resolver, Calendars.CONTENT_URI) ||\n            missing(resolver, Events.CONTENT_URI)) {\n            return new ArrayList<>();\n        }\n\n        Cursor cur;\n        try {\n            cur = resolver.query(Calendars.CONTENT_URI, CAL_COLS, null, null, null);\n        } catch (Exception except) {\n            Log_OC.w(TAG, \"Calendar provider is missing columns, continuing anyway\");\n            cur = resolver.query(Calendars.CONTENT_URI, null, null, null, null);\n        }\n        List<AndroidCalendar> calendars = new ArrayList<>(cur.getCount());\n\n        while (cur.moveToNext()) {\n            if (getLong(cur, Calendars.DELETED) != 0) {\n                continue;\n            }\n\n            AndroidCalendar calendar = new AndroidCalendar();\n            calendar.mId = getLong(cur, Calendars._ID);\n            if (calendar.mId == -1) {\n                continue;\n            }\n            calendar.mIdStr = getString(cur, Calendars._ID);\n            calendar.mName = getString(cur, Calendars.NAME);\n            calendar.mDisplayName = getString(cur, Calendars.CALENDAR_DISPLAY_NAME);\n            calendar.mAccountName = getString(cur, Calendars.ACCOUNT_NAME);\n            calendar.mAccountType = getString(cur, Calendars.ACCOUNT_TYPE);\n            calendar.mOwner = getString(cur, Calendars.OWNER_ACCOUNT);\n            calendar.mIsActive = getLong(cur, Calendars.VISIBLE) == 1;\n            calendar.mTimezone = getString(cur, Calendars.CALENDAR_TIME_ZONE);\n\n            final String[] args = new String[]{calendar.mIdStr};\n            Cursor eventsCur = resolver.query(Events.CONTENT_URI, CAL_ID_COLS, CAL_ID_WHERE + \" AND deleted=0\", args, null);\n            calendar.mNumEntries = eventsCur.getCount();\n            eventsCur.close();\n            calendars.add(calendar);\n        }\n        cur.close();\n\n        return calendars;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport Foundation\nimport CoreData\n\nclass AndroidCalendar {\n    var mId: Int64 = -1\n    var mIdStr: String = \"\"\n    var mName: String = \"\"\n    var mDisplayName: String = \"\"\n    var mAccountName: String = \"\"\n    var mAccountType: String = \"\"\n    var mOwner: String = \"\"\n    var mIsActive: Bool = false\n    var mTimezone: String = \"\"\n    var mNumEntries: Int = 0\n}\n\nfunc loadAll(resolver: NSManagedObjectContext) -> [AndroidCalendar] {\n    if missing(resolver: resolver, uri: Calendars.CONTENT_URI) || missing(resolver: resolver, uri: Events.CONTENT_URI) {\n        return []\n    }\n\n    var cur: NSFetchRequest<NSFetchRequestResult>\n    do {\n        cur = NSFetchRequest<NSFetchRequestResult>(entityName: \"Calendars\")\n        cur.predicate = nil\n    } catch {\n        print(\"Calendar provider is missing columns, continuing anyway\")\n        cur = NSFetchRequest<NSFetchRequestResult>(entityName: \"Calendars\")\n    }\n    \n    var calendars: [AndroidCalendar] = []\n    \n    do {\n        let results = try resolver.fetch(cur)\n        for result in results {\n            guard let calendarEntity = result as? NSManagedObject else { continue }\n            \n            if getLong(entity: calendarEntity, key: \"deleted\") != 0 {\n                continue\n            }\n            \n            let calendar = AndroidCalendar()\n            calendar.mId = getLong(entity: calendarEntity, key: \"_id\")\n            if calendar.mId == -1 {\n                continue\n            }\n            calendar.mIdStr = getString(entity: calendarEntity, key: \"_id\")\n            calendar.mName = getString(entity: calendarEntity, key: \"name\")\n            calendar.mDisplayName = getString(entity: calendarEntity, key: \"calendar_display_name\")\n            calendar.mAccountName = getString(entity: calendarEntity, key: \"account_name\")\n            calendar.mAccountType = getString(entity: calendarEntity, key: \"account_type\")\n            calendar.mOwner = getString(entity: calendarEntity, key: \"owner_account\")\n            calendar.mIsActive = getLong(entity: calendarEntity, key: \"visible\") == 1\n            calendar.mTimezone = getString(entity: calendarEntity, key: \"calendar_time_zone\")\n            \n            let args = [calendar.mIdStr]\n            let eventsCur = NSFetchRequest<NSFetchRequestResult>(entityName: \"Events\")\n            eventsCur.predicate = NSPredicate(format: \"calendar_id = %@ AND deleted = 0\", argumentArray: args)\n            \n            let eventsResults = try resolver.fetch(eventsCur)\n            calendar.mNumEntries = eventsResults.count\n            \n            calendars.append(calendar)\n        }\n    } catch {\n        print(\"Failed to fetch calendars: \\(error)\")\n    }\n    \n    return calendars\n}\n\nfunc missing(resolver: NSManagedObjectContext, uri: String) -> Bool {\n    // Implement the missing check logic\n    return false\n}\n\nfunc getLong(entity: NSManagedObject, key: String) -> Int64 {\n    return entity.value(forKey: key) as? Int64 ?? -1\n}\n\nfunc getString(entity: NSManagedObject, key: String) -> String {\n    return entity.value(forKey: key) as? String ?? \"\"\n}\n```"
    },
    {
        "method_name": "getColumnIndex",
        "method_code": "private static int getColumnIndex(Cursor cur, String dbName) {\n        return dbName == null ? -1 : cur.getColumnIndexOrThrow(dbName);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getColumnIndex from AndroidCalendar.java into Swift.\n\n        Input:\n\n        Method Name: getColumnIndex\n\n        Method Code: private static int getColumnIndex(Cursor cur, String dbName) {\n        return dbName == null ? -1 : cur.getColumnIndexOrThrow(dbName);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate static func getColumnIndex(cur: Cursor, dbName: String?) -> Int {\n    return dbName == nil ? -1 : cur.getColumnIndexOrThrow(dbName!)\n}\n```"
    },
    {
        "method_name": "getLong",
        "method_code": "private static long getLong(Cursor cur, String dbName) {\n        int i = getColumnIndex(cur, dbName);\n        return i == -1 ? -1 : cur.getLong(i);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getLong from AndroidCalendar.java into Swift.\n\n        Input:\n\n        Method Name: getLong\n\n        Method Code: private static long getLong(Cursor cur, String dbName) {\n        int i = getColumnIndex(cur, dbName);\n        return i == -1 ? -1 : cur.getLong(i);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate static func getLong(cur: Cursor, dbName: String) -> Int64 {\n    let i = getColumnIndex(cur: cur, dbName: dbName)\n    return i == -1 ? -1 : cur.getLong(i)\n}\n```"
    },
    {
        "method_name": "getString",
        "method_code": "private static String getString(Cursor cur, String dbName) {\n        int i = getColumnIndex(cur, dbName);\n        return i == -1 ? null : cur.getString(i);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getString from AndroidCalendar.java into Swift.\n\n        Input:\n\n        Method Name: getString\n\n        Method Code: private static String getString(Cursor cur, String dbName) {\n        int i = getColumnIndex(cur, dbName);\n        return i == -1 ? null : cur.getString(i);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate static func getString(cur: Cursor, dbName: String) -> String? {\n    let i = getColumnIndex(cur: cur, dbName: dbName)\n    return i == -1 ? nil : cur.getString(i)\n}\n```"
    },
    {
        "method_name": "missing",
        "method_code": "private static boolean missing(ContentResolver resolver, Uri uri) {\n        // Determine if a provider is missing\n        ContentProviderClient provider = resolver.acquireContentProviderClient(uri);\n        if (provider != null) {\n            provider.release();\n        }\n        return provider == null;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled missing from AndroidCalendar.java into Swift.\n\n        Input:\n\n        Method Name: missing\n\n        Method Code: private static boolean missing(ContentResolver resolver, Uri uri) {\n        // Determine if a provider is missing\n        ContentProviderClient provider = resolver.acquireContentProviderClient(uri);\n        if (provider != null) {\n            provider.release();\n        }\n        return provider == null;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate static func missing(resolver: ContentResolver, uri: Uri) -> Bool {\n    let provider = resolver.acquireContentProviderClient(uri)\n    if provider != nil {\n        provider.release()\n    }\n    return provider == nil\n}\n```"
    },
    {
        "method_name": "toString",
        "method_code": "@Override\n    public String toString() {\n        return mDisplayName + \" (\" + mIdStr + \")\";\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled toString from AndroidCalendar.java into Swift.\n\n        Input:\n\n        Method Name: toString\n\n        Method Code: @Override\n    public String toString() {\n        return mDisplayName + \" (\" + mIdStr + \")\";\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride var description: String {\n    return \"\\(mDisplayName) (\\(mIdStr))\"\n}\n```"
    },
    {
        "method_name": "differ",
        "method_code": "private boolean differ(final String lhs, final String rhs) {\n        if (lhs == null) {\n            return rhs != null;\n        }\n        return rhs == null || !lhs.equals(rhs);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled differ from AndroidCalendar.java into Swift.\n\n        Input:\n\n        Method Name: differ\n\n        Method Code: private boolean differ(final String lhs, final String rhs) {\n        if (lhs == null) {\n            return rhs != null;\n        }\n        return rhs == null || !lhs.equals(rhs);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func differ(_ lhs: String?, _ rhs: String?) -> Bool {\n    if lhs == nil {\n        return rhs != nil\n    }\n    return rhs == nil || lhs != rhs\n}\n```"
    },
    {
        "method_name": "differsFrom",
        "method_code": "public boolean differsFrom(AndroidCalendar other) {\n        return mId != other.mId ||\n            mIsActive != other.mIsActive ||\n            mNumEntries != other.mNumEntries ||\n            differ(mName, other.mName) ||\n            differ(mDisplayName, other.mDisplayName) ||\n            differ(mAccountName, other.mAccountName) ||\n            differ(mAccountType, other.mAccountType) ||\n            differ(mOwner, other.mOwner) ||\n            differ(mTimezone, other.mTimezone);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled differsFrom from AndroidCalendar.java into Swift.\n\n        Input:\n\n        Method Name: differsFrom\n\n        Method Code: public boolean differsFrom(AndroidCalendar other) {\n        return mId != other.mId ||\n            mIsActive != other.mIsActive ||\n            mNumEntries != other.mNumEntries ||\n            differ(mName, other.mName) ||\n            differ(mDisplayName, other.mDisplayName) ||\n            differ(mAccountName, other.mAccountName) ||\n            differ(mAccountType, other.mAccountType) ||\n            differ(mOwner, other.mOwner) ||\n            differ(mTimezone, other.mTimezone);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc differsFrom(_ other: AndroidCalendar) -> Bool {\n    return mId != other.mId ||\n        mIsActive != other.mIsActive ||\n        mNumEntries != other.mNumEntries ||\n        differ(mName, other.mName) ||\n        differ(mDisplayName, other.mDisplayName) ||\n        differ(mAccountName, other.mAccountName) ||\n        differ(mAccountType, other.mAccountType) ||\n        differ(mOwner, other.mOwner) ||\n        differ(mTimezone, other.mTimezone)\n}\n```"
    }
]