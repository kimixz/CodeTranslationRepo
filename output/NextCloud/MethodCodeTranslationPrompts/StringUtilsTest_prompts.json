[
    {
        "method_name": "assertCorrectSingleSearchMatch",
        "method_code": "@Test\n    public void assertCorrectSingleSearchMatch() {\n\n        String text = \"this is a simple test\";\n        String searchText = \"simple\";\n        int dummyColorInt = 44221;\n        String expectedReturn = String.format(\"this is a <font color='%d'><b>%s</b></font> test\",\n                                              dummyColorInt, searchText);\n\n        assertEquals(\"returned parsed text value was incorrect\",\n                     expectedReturn, StringUtils.searchAndColor(text, searchText, dummyColorInt));\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled assertCorrectSingleSearchMatch from StringUtilsTest.java into Swift.\n\n        Input:\n\n        Method Name: assertCorrectSingleSearchMatch\n\n        Method Code: @Test\n    public void assertCorrectSingleSearchMatch() {\n\n        String text = \"this is a simple test\";\n        String searchText = \"simple\";\n        int dummyColorInt = 44221;\n        String expectedReturn = String.format(\"this is a <font color='%d'><b>%s</b></font> test\",\n                                              dummyColorInt, searchText);\n\n        assertEquals(\"returned parsed text value was incorrect\",\n                     expectedReturn, StringUtils.searchAndColor(text, searchText, dummyColorInt));\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport XCTest\n\nclass StringUtilsTest: XCTestCase {\n\n    func testAssertCorrectSingleSearchMatch() {\n        let text = \"this is a simple test\"\n        let searchText = \"simple\"\n        let dummyColorInt = 44221\n        let expectedReturn = String(format: \"this is a <font color='%d'><b>%@</b></font> test\", dummyColorInt, searchText)\n\n        XCTAssertEqual(expectedReturn, StringUtils.searchAndColor(text: text, searchText: searchText, color: dummyColorInt), \"returned parsed text value was incorrect\")\n    }\n}\n```"
    },
    {
        "method_name": "assertTextReturnedIfSearchTextIsEmpty",
        "method_code": "@Test\n    public void assertTextReturnedIfSearchTextIsEmpty() {\n        String helloWorld = \"hello world\";\n        assertEquals(\"text returned when searchText was not empty\",\n                     helloWorld, StringUtils.searchAndColor(helloWorld, \"\", 0));\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled assertTextReturnedIfSearchTextIsEmpty from StringUtilsTest.java into Swift.\n\n        Input:\n\n        Method Name: assertTextReturnedIfSearchTextIsEmpty\n\n        Method Code: @Test\n    public void assertTextReturnedIfSearchTextIsEmpty() {\n        String helloWorld = \"hello world\";\n        assertEquals(\"text returned when searchText was not empty\",\n                     helloWorld, StringUtils.searchAndColor(helloWorld, \"\", 0));\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc testAssertTextReturnedIfSearchTextIsEmpty() {\n    let helloWorld = \"hello world\"\n    XCTAssertEqual(helloWorld, StringUtils.searchAndColor(helloWorld, \"\", 0), \"text returned when searchText was not empty\")\n}\n```"
    },
    {
        "method_name": "searchStringNull",
        "method_code": "@Test\n    public void searchStringNull() {\n        String text = \"this is a simple test\";\n        String searchText = null;\n        int dummyColorInt = 44221;\n        String expectedReturn = \"this is a simple test\";\n\n        assertEquals(\"returned parsed text value was incorrect\",\n                     expectedReturn, StringUtils.searchAndColor(text, searchText, dummyColorInt));\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled searchStringNull from StringUtilsTest.java into Swift.\n\n        Input:\n\n        Method Name: searchStringNull\n\n        Method Code: @Test\n    public void searchStringNull() {\n        String text = \"this is a simple test\";\n        String searchText = null;\n        int dummyColorInt = 44221;\n        String expectedReturn = \"this is a simple test\";\n\n        assertEquals(\"returned parsed text value was incorrect\",\n                     expectedReturn, StringUtils.searchAndColor(text, searchText, dummyColorInt));\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport XCTest\n\nclass StringUtilsTest: XCTestCase {\n    func testSearchStringNull() {\n        let text = \"this is a simple test\"\n        let searchText: String? = nil\n        let dummyColorInt = 44221\n        let expectedReturn = \"this is a simple test\"\n\n        XCTAssertEqual(expectedReturn, StringUtils.searchAndColor(text: text, searchText: searchText, colorInt: dummyColorInt), \"returned parsed text value was incorrect\")\n    }\n}\n```"
    },
    {
        "method_name": "searchStringEmpty",
        "method_code": "@Test\n    public void searchStringEmpty() {\n        String text = \"this is a simple test\";\n        String searchText = \"\";\n        int dummyColorInt = 44221;\n        String expectedReturn = \"this is a simple test\";\n\n        assertEquals(\"returned parsed text value was incorrect\",\n                     expectedReturn, StringUtils.searchAndColor(text, searchText, dummyColorInt));\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled searchStringEmpty from StringUtilsTest.java into Swift.\n\n        Input:\n\n        Method Name: searchStringEmpty\n\n        Method Code: @Test\n    public void searchStringEmpty() {\n        String text = \"this is a simple test\";\n        String searchText = \"\";\n        int dummyColorInt = 44221;\n        String expectedReturn = \"this is a simple test\";\n\n        assertEquals(\"returned parsed text value was incorrect\",\n                     expectedReturn, StringUtils.searchAndColor(text, searchText, dummyColorInt));\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport XCTest\n\nclass StringUtilsTest: XCTestCase {\n    func testSearchStringEmpty() {\n        let text = \"this is a simple test\"\n        let searchText = \"\"\n        let dummyColorInt = 44221\n        let expectedReturn = \"this is a simple test\"\n\n        XCTAssertEqual(expectedReturn, StringUtils.searchAndColor(text: text, searchText: searchText, color: dummyColorInt), \"returned parsed text value was incorrect\")\n    }\n}\n```"
    },
    {
        "method_name": "textNull",
        "method_code": "@Test\n    public void textNull() {\n        String text = null;\n        String searchText = \"test\";\n        int dummyColorInt = 44221;\n        String expectedReturn = \"\";\n\n        assertEquals(\"returned parsed text value was incorrect\",\n                     expectedReturn, StringUtils.searchAndColor(text, searchText, dummyColorInt));\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled textNull from StringUtilsTest.java into Swift.\n\n        Input:\n\n        Method Name: textNull\n\n        Method Code: @Test\n    public void textNull() {\n        String text = null;\n        String searchText = \"test\";\n        int dummyColorInt = 44221;\n        String expectedReturn = \"\";\n\n        assertEquals(\"returned parsed text value was incorrect\",\n                     expectedReturn, StringUtils.searchAndColor(text, searchText, dummyColorInt));\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport XCTest\n\nclass StringUtilsTest: XCTestCase {\n    func testTextNull() {\n        let text: String? = nil\n        let searchText = \"test\"\n        let dummyColorInt = 44221\n        let expectedReturn = \"\"\n\n        XCTAssertEqual(expectedReturn, StringUtils.searchAndColor(text, searchText, dummyColorInt), \"returned parsed text value was incorrect\")\n    }\n}\n```"
    },
    {
        "method_name": "textEmpty",
        "method_code": "@Test\n    public void textEmpty() {\n        String text = \"\";\n        String searchText = \"test\";\n        int dummyColorInt = 44221;\n        String expectedReturn = \"\";\n\n        assertEquals(\"returned parsed text value was incorrect\",\n                     expectedReturn, StringUtils.searchAndColor(text, searchText, dummyColorInt));\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled textEmpty from StringUtilsTest.java into Swift.\n\n        Input:\n\n        Method Name: textEmpty\n\n        Method Code: @Test\n    public void textEmpty() {\n        String text = \"\";\n        String searchText = \"test\";\n        int dummyColorInt = 44221;\n        String expectedReturn = \"\";\n\n        assertEquals(\"returned parsed text value was incorrect\",\n                     expectedReturn, StringUtils.searchAndColor(text, searchText, dummyColorInt));\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport XCTest\n\nclass StringUtilsTest: XCTestCase {\n    func testTextEmpty() {\n        let text = \"\"\n        let searchText = \"test\"\n        let dummyColorInt = 44221\n        let expectedReturn = \"\"\n\n        XCTAssertEqual(expectedReturn, StringUtils.searchAndColor(text: text, searchText: searchText, colorInt: dummyColorInt), \"returned parsed text value was incorrect\")\n    }\n}\n```"
    },
    {
        "method_name": "bothNull",
        "method_code": "@Test\n    public void bothNull() {\n        String text = null;\n        String searchText = null;\n        int dummyColorInt = 44221;\n        String expectedReturn = \"\";\n\n        assertEquals(\"returned parsed text value was incorrect\",\n                     expectedReturn, StringUtils.searchAndColor(text, searchText, dummyColorInt));\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled bothNull from StringUtilsTest.java into Swift.\n\n        Input:\n\n        Method Name: bothNull\n\n        Method Code: @Test\n    public void bothNull() {\n        String text = null;\n        String searchText = null;\n        int dummyColorInt = 44221;\n        String expectedReturn = \"\";\n\n        assertEquals(\"returned parsed text value was incorrect\",\n                     expectedReturn, StringUtils.searchAndColor(text, searchText, dummyColorInt));\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport XCTest\n\nclass StringUtilsTest: XCTestCase {\n\n    func testBothNull() {\n        let text: String? = nil\n        let searchText: String? = nil\n        let dummyColorInt = 44221\n        let expectedReturn = \"\"\n\n        XCTAssertEqual(expectedReturn, StringUtils.searchAndColor(text, searchText, dummyColorInt), \"returned parsed text value was incorrect\")\n    }\n}\n```"
    },
    {
        "method_name": "bothEmpty",
        "method_code": "@Test\n    public void bothEmpty() {\n        String text = \"\";\n        String searchText = \"\";\n        int dummyColorInt = 44221;\n        String expectedReturn = \"\";\n\n        assertEquals(\"returned parsed text value was incorrect\",\n                     expectedReturn, StringUtils.searchAndColor(text, searchText, dummyColorInt));\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled bothEmpty from StringUtilsTest.java into Swift.\n\n        Input:\n\n        Method Name: bothEmpty\n\n        Method Code: @Test\n    public void bothEmpty() {\n        String text = \"\";\n        String searchText = \"\";\n        int dummyColorInt = 44221;\n        String expectedReturn = \"\";\n\n        assertEquals(\"returned parsed text value was incorrect\",\n                     expectedReturn, StringUtils.searchAndColor(text, searchText, dummyColorInt));\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc testBothEmpty() {\n    let text = \"\"\n    let searchText = \"\"\n    let dummyColorInt = 44221\n    let expectedReturn = \"\"\n\n    XCTAssertEqual(expectedReturn, StringUtils.searchAndColor(text: text, searchText: searchText, colorInt: dummyColorInt), \"returned parsed text value was incorrect\")\n}\n```"
    },
    {
        "method_name": "prefixBothEmpty",
        "method_code": "@Test\n    public void prefixBothEmpty() {\n        String text = \"\";\n        String prefix = \"\";\n        String expectedReturn = \"\";\n\n        assertEquals(\"returned text without prefix was incorrect\",\n                     expectedReturn, StringUtils.removePrefix(text, prefix));\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled prefixBothEmpty from StringUtilsTest.java into Swift.\n\n        Input:\n\n        Method Name: prefixBothEmpty\n\n        Method Code: @Test\n    public void prefixBothEmpty() {\n        String text = \"\";\n        String prefix = \"\";\n        String expectedReturn = \"\";\n\n        assertEquals(\"returned text without prefix was incorrect\",\n                     expectedReturn, StringUtils.removePrefix(text, prefix));\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc testPrefixBothEmpty() {\n    let text = \"\"\n    let prefix = \"\"\n    let expectedReturn = \"\"\n\n    XCTAssertEqual(expectedReturn, StringUtils.removePrefix(text, prefix), \"returned text without prefix was incorrect\")\n}\n```"
    },
    {
        "method_name": "noPrefix",
        "method_code": "@Test\n    public void noPrefix() {\n        String text = \"/this/is/some/path\";\n        String prefix = \"/that/is/another/path\";\n        String expectedReturn = \"/this/is/some/path\";\n\n        assertEquals(\"returned text without prefix was incorrect\",\n                     expectedReturn, StringUtils.removePrefix(text, prefix));\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled noPrefix from StringUtilsTest.java into Swift.\n\n        Input:\n\n        Method Name: noPrefix\n\n        Method Code: @Test\n    public void noPrefix() {\n        String text = \"/this/is/some/path\";\n        String prefix = \"/that/is/another/path\";\n        String expectedReturn = \"/this/is/some/path\";\n\n        assertEquals(\"returned text without prefix was incorrect\",\n                     expectedReturn, StringUtils.removePrefix(text, prefix));\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport XCTest\n\nclass StringUtilsTest: XCTestCase {\n    func testNoPrefix() {\n        let text = \"/this/is/some/path\"\n        let prefix = \"/that/is/another/path\"\n        let expectedReturn = \"/this/is/some/path\"\n\n        XCTAssertEqual(expectedReturn, StringUtils.removePrefix(text, prefix), \"returned text without prefix was incorrect\")\n    }\n}\n```"
    },
    {
        "method_name": "simplePrefix",
        "method_code": "@Test\n    public void simplePrefix() {\n        String text = \"/path/and/subpath\";\n        String prefix = \"/path\";\n        String expectedReturn = \"/and/subpath\";\n\n        assertEquals(\"returned text without prefix was incorrect\",\n                     expectedReturn, StringUtils.removePrefix(text, prefix));\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled simplePrefix from StringUtilsTest.java into Swift.\n\n        Input:\n\n        Method Name: simplePrefix\n\n        Method Code: @Test\n    public void simplePrefix() {\n        String text = \"/path/and/subpath\";\n        String prefix = \"/path\";\n        String expectedReturn = \"/and/subpath\";\n\n        assertEquals(\"returned text without prefix was incorrect\",\n                     expectedReturn, StringUtils.removePrefix(text, prefix));\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport XCTest\n\nclass StringUtilsTest: XCTestCase {\n    func simplePrefix() {\n        let text = \"/path/and/subpath\"\n        let prefix = \"/path\"\n        let expectedReturn = \"/and/subpath\"\n\n        XCTAssertEqual(expectedReturn, StringUtils.removePrefix(text, prefix), \"returned text without prefix was incorrect\")\n    }\n}\n```"
    },
    {
        "method_name": "prefixEqual",
        "method_code": "@Test\n    public void prefixEqual() {\n        String text = \"/path/and/subpath\";\n        String prefix = \"/path/and/subpath\";\n        String expectedReturn = \"\";\n\n        assertEquals(\"returned text without prefix was incorrect\",\n                     expectedReturn, StringUtils.removePrefix(text, prefix));\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled prefixEqual from StringUtilsTest.java into Swift.\n\n        Input:\n\n        Method Name: prefixEqual\n\n        Method Code: @Test\n    public void prefixEqual() {\n        String text = \"/path/and/subpath\";\n        String prefix = \"/path/and/subpath\";\n        String expectedReturn = \"\";\n\n        assertEquals(\"returned text without prefix was incorrect\",\n                     expectedReturn, StringUtils.removePrefix(text, prefix));\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc testPrefixEqual() {\n    let text = \"/path/and/subpath\"\n    let prefix = \"/path/and/subpath\"\n    let expectedReturn = \"\"\n\n    XCTAssertEqual(expectedReturn, StringUtils.removePrefix(text, prefix), \"returned text without prefix was incorrect\")\n}\n```"
    }
]