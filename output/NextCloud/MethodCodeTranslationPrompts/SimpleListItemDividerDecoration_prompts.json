[
    {
        "method_name": "onDraw",
        "method_code": "@Override\n    public void onDraw(Canvas canvas, RecyclerView parent, RecyclerView.State state) {\n        canvas.save();\n        final int right;\n        //noinspection AndroidLintNewApi - NewApi lint fails to handle overrides.\n        if (parent.getClipToPadding()) {\n            right = parent.getWidth() - parent.getPaddingRight();\n            canvas.clipRect(leftPadding, parent.getPaddingTop(), right,\n                    parent.getHeight() - parent.getPaddingBottom());\n        } else {\n            right = parent.getWidth();\n        }\n\n        final int childCount = parent.getChildCount();\n        for (int i = 0; i < childCount; i++) {\n            final View child = parent.getChildAt(i);\n            parent.getDecoratedBoundsWithMargins(child, bounds);\n            final int bottom = bounds.bottom + Math.round(child.getTranslationY());\n            final int top = bottom - 1;\n\n            if (divider != null) {\n                divider.setBounds(leftPadding, top, right, bottom);\n                divider.draw(canvas);\n            }\n        }\n        canvas.restore();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onDraw from SimpleListItemDividerDecoration.java into Swift.\n\n        Input:\n\n        Method Name: onDraw\n\n        Method Code: @Override\n    public void onDraw(Canvas canvas, RecyclerView parent, RecyclerView.State state) {\n        canvas.save();\n        final int right;\n        //noinspection AndroidLintNewApi - NewApi lint fails to handle overrides.\n        if (parent.getClipToPadding()) {\n            right = parent.getWidth() - parent.getPaddingRight();\n            canvas.clipRect(leftPadding, parent.getPaddingTop(), right,\n                    parent.getHeight() - parent.getPaddingBottom());\n        } else {\n            right = parent.getWidth();\n        }\n\n        final int childCount = parent.getChildCount();\n        for (int i = 0; i < childCount; i++) {\n            final View child = parent.getChildAt(i);\n            parent.getDecoratedBoundsWithMargins(child, bounds);\n            final int bottom = bounds.bottom + Math.round(child.getTranslationY());\n            final int top = bottom - 1;\n\n            if (divider != null) {\n                divider.setBounds(leftPadding, top, right, bottom);\n                divider.draw(canvas);\n            }\n        }\n        canvas.restore();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func draw(_ rect: CGRect) {\n    guard let context = UIGraphicsGetCurrentContext(), let parent = self.parent else { return }\n    context.saveGState()\n    let right: Int\n    if parent.clipsToBounds {\n        right = Int(parent.bounds.width) - Int(parent.layoutMargins.right)\n        context.clip(to: CGRect(x: leftPadding, y: parent.layoutMargins.top, width: right, height: Int(parent.bounds.height) - Int(parent.layoutMargins.bottom)))\n    } else {\n        right = Int(parent.bounds.width)\n    }\n\n    let childCount = parent.subviews.count\n    for i in 0..<childCount {\n        let child = parent.subviews[i]\n        let bottom = Int(child.frame.maxY)\n        let top = bottom - 1\n\n        if let divider = divider {\n            divider.frame = CGRect(x: leftPadding, y: top, width: right, height: bottom - top)\n            divider.draw(in: context)\n        }\n    }\n    context.restoreGState()\n}\n```"
    }
]