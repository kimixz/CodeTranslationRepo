[
    {
        "method_name": "newInstance",
        "method_code": "ublic FileMenuFilter newInstance(final int numberOfAllFiles, final Collection<OCFile> files, final ComponentsGetter componentsGetter, boolean overflowMenu, User user) {\n            return new FileMenuFilter(storageManager, editorUtils, numberOfAllFiles, files, componentsGetter, context, overflowMenu, user);\n        }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled newInstance from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: newInstance\n\n        Method Code: ublic FileMenuFilter newInstance(final int numberOfAllFiles, final Collection<OCFile> files, final ComponentsGetter componentsGetter, boolean overflowMenu, User user) {\n            return new FileMenuFilter(storageManager, editorUtils, numberOfAllFiles, files, componentsGetter, context, overflowMenu, user);\n        }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc newInstance(numberOfAllFiles: Int, files: [OCFile], componentsGetter: ComponentsGetter, overflowMenu: Bool, user: User) -> FileMenuFilter {\n    return FileMenuFilter(storageManager: storageManager, editorUtils: editorUtils, numberOfAllFiles: numberOfAllFiles, files: files, componentsGetter: componentsGetter, context: context, overflowMenu: overflowMenu, user: user)\n}\n```"
    },
    {
        "method_name": "newInstance",
        "method_code": "ublic FileMenuFilter newInstance(final OCFile file, final ComponentsGetter componentsGetter, boolean overflowMenu, User user) {\n            return newInstance(1, Collections.singletonList(file), componentsGetter, overflowMenu, user);\n        }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled newInstance from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: newInstance\n\n        Method Code: ublic FileMenuFilter newInstance(final OCFile file, final ComponentsGetter componentsGetter, boolean overflowMenu, User user) {\n            return newInstance(1, Collections.singletonList(file), componentsGetter, overflowMenu, user);\n        }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc newInstance(file: OCFile, componentsGetter: ComponentsGetter, overflowMenu: Bool, user: User) -> FileMenuFilter {\n    return newInstance(1, files: [file], componentsGetter: componentsGetter, overflowMenu: overflowMenu, user: user)\n}\n```"
    },
    {
        "method_name": "getToHide",
        "method_code": "IdRes\n    public List<Integer> getToHide(final boolean inSingleFileFragment){\n        if(files != null && ! files.isEmpty()){\n            return filter(inSingleFileFragment);\n        }\n        return null;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getToHide from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: getToHide\n\n        Method Code: IdRes\n    public List<Integer> getToHide(final boolean inSingleFileFragment){\n        if(files != null && ! files.isEmpty()){\n            return filter(inSingleFileFragment);\n        }\n        return null;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getToHide(inSingleFileFragment: Bool) -> [Int]? {\n    if let files = files, !files.isEmpty {\n        return filter(inSingleFileFragment: inSingleFileFragment)\n    }\n    return nil\n}\n```"
    },
    {
        "method_name": "filter",
        "method_code": "rivate List<Integer> filter(boolean inSingleFileFragment) {\n        boolean synchronizing = anyFileSynchronizing();\n        OCCapability capability = storageManager.getCapability(user.getAccountName());\n        boolean endToEndEncryptionEnabled = capability.getEndToEndEncryption().isTrue();\n        boolean fileLockingEnabled = capability.getFilesLockingVersion() != null;\n\n        @IdRes final List<Integer> toHide = new ArrayList<>();\n\n        filterEdit(toHide, capability);\n        filterDownload(toHide, synchronizing);\n        filterExport(toHide);\n        filterRename(toHide, synchronizing);\n        filterMoveOrCopy(toHide, synchronizing);\n        filterRemove(toHide, synchronizing);\n        filterSelectAll(toHide, inSingleFileFragment);\n        filterDeselectAll(toHide, inSingleFileFragment);\n        filterOpenWith(toHide, synchronizing);\n        filterCancelSync(toHide, synchronizing);\n        filterSync(toHide, synchronizing);\n        filterShareFile(toHide, capability);\n        filterSendFiles(toHide, inSingleFileFragment);\n        filterDetails(toHide);\n        filterFavorite(toHide, synchronizing);\n        filterUnfavorite(toHide, synchronizing);\n        filterEncrypt(toHide, endToEndEncryptionEnabled);\n        filterUnsetEncrypted(toHide, endToEndEncryptionEnabled);\n        filterSetPictureAs(toHide);\n        filterStream(toHide);\n        filterLock(toHide, fileLockingEnabled);\n        filterUnlock(toHide, fileLockingEnabled);\n        filterPinToHome(toHide);\n        filterRetry(toHide);\n\n        return toHide;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled filter from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: filter\n\n        Method Code: rivate List<Integer> filter(boolean inSingleFileFragment) {\n        boolean synchronizing = anyFileSynchronizing();\n        OCCapability capability = storageManager.getCapability(user.getAccountName());\n        boolean endToEndEncryptionEnabled = capability.getEndToEndEncryption().isTrue();\n        boolean fileLockingEnabled = capability.getFilesLockingVersion() != null;\n\n        @IdRes final List<Integer> toHide = new ArrayList<>();\n\n        filterEdit(toHide, capability);\n        filterDownload(toHide, synchronizing);\n        filterExport(toHide);\n        filterRename(toHide, synchronizing);\n        filterMoveOrCopy(toHide, synchronizing);\n        filterRemove(toHide, synchronizing);\n        filterSelectAll(toHide, inSingleFileFragment);\n        filterDeselectAll(toHide, inSingleFileFragment);\n        filterOpenWith(toHide, synchronizing);\n        filterCancelSync(toHide, synchronizing);\n        filterSync(toHide, synchronizing);\n        filterShareFile(toHide, capability);\n        filterSendFiles(toHide, inSingleFileFragment);\n        filterDetails(toHide);\n        filterFavorite(toHide, synchronizing);\n        filterUnfavorite(toHide, synchronizing);\n        filterEncrypt(toHide, endToEndEncryptionEnabled);\n        filterUnsetEncrypted(toHide, endToEndEncryptionEnabled);\n        filterSetPictureAs(toHide);\n        filterStream(toHide);\n        filterLock(toHide, fileLockingEnabled);\n        filterUnlock(toHide, fileLockingEnabled);\n        filterPinToHome(toHide);\n        filterRetry(toHide);\n\n        return toHide;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func filter(inSingleFileFragment: Bool) -> [Int] {\n    let synchronizing = anyFileSynchronizing()\n    let capability = storageManager.getCapability(user.accountName)\n    let endToEndEncryptionEnabled = capability.endToEndEncryption.isTrue()\n    let fileLockingEnabled = capability.filesLockingVersion != nil\n\n    var toHide: [Int] = []\n\n    filterEdit(&toHide, capability: capability)\n    filterDownload(&toHide, synchronizing: synchronizing)\n    filterExport(&toHide)\n    filterRename(&toHide, synchronizing: synchronizing)\n    filterMoveOrCopy(&toHide, synchronizing: synchronizing)\n    filterRemove(&toHide, synchronizing: synchronizing)\n    filterSelectAll(&toHide, inSingleFileFragment: inSingleFileFragment)\n    filterDeselectAll(&toHide, inSingleFileFragment: inSingleFileFragment)\n    filterOpenWith(&toHide, synchronizing: synchronizing)\n    filterCancelSync(&toHide, synchronizing: synchronizing)\n    filterSync(&toHide, synchronizing: synchronizing)\n    filterShareFile(&toHide, capability: capability)\n    filterSendFiles(&toHide, inSingleFileFragment: inSingleFileFragment)\n    filterDetails(&toHide)\n    filterFavorite(&toHide, synchronizing: synchronizing)\n    filterUnfavorite(&toHide, synchronizing: synchronizing)\n    filterEncrypt(&toHide, endToEndEncryptionEnabled: endToEndEncryptionEnabled)\n    filterUnsetEncrypted(&toHide, endToEndEncryptionEnabled: endToEndEncryptionEnabled)\n    filterSetPictureAs(&toHide)\n    filterStream(&toHide)\n    filterLock(&toHide, fileLockingEnabled: fileLockingEnabled)\n    filterUnlock(&toHide, fileLockingEnabled: fileLockingEnabled)\n    filterPinToHome(&toHide)\n    filterRetry(&toHide)\n\n    return toHide\n}\n```"
    },
    {
        "method_name": "filterShareFile",
        "method_code": "rivate void filterShareFile(List<Integer> toHide, OCCapability capability) {\n        if (!isSingleSelection() || containsEncryptedFile() || hasEncryptedParent() ||\n            (!isShareViaLinkAllowed() && !isShareWithUsersAllowed()) ||\n            !isShareApiEnabled(capability) || !files.iterator().next().canReshare()) {\n            toHide.add(R.id.action_send_share_file);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled filterShareFile from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: filterShareFile\n\n        Method Code: rivate void filterShareFile(List<Integer> toHide, OCCapability capability) {\n        if (!isSingleSelection() || containsEncryptedFile() || hasEncryptedParent() ||\n            (!isShareViaLinkAllowed() && !isShareWithUsersAllowed()) ||\n            !isShareApiEnabled(capability) || !files.iterator().next().canReshare()) {\n            toHide.add(R.id.action_send_share_file);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func filterShareFile(toHide: inout [Int], capability: OCCapability) {\n    if !isSingleSelection() || containsEncryptedFile() || hasEncryptedParent() ||\n        (!isShareViaLinkAllowed() && !isShareWithUsersAllowed()) ||\n        !isShareApiEnabled(capability) || !(files.first?.canReshare() ?? false) {\n        toHide.append(R.id.action_send_share_file)\n    }\n}\n```"
    },
    {
        "method_name": "filterSendFiles",
        "method_code": "rivate void filterSendFiles(List<Integer> toHide, boolean inSingleFileFragment) {\n        boolean sendFilesNotSupported = context != null && !MDMConfig.INSTANCE.sendFilesSupport(context);\n        boolean hasEncryptedFile = containsEncryptedFile();\n        boolean isSingleSelection = isSingleSelection();\n        boolean allFilesNotDown = !allFileDown();\n\n        if (sendFilesNotSupported) {\n            toHide.add(R.id.action_send_file);\n            return;\n        }\n\n        if (overflowMenu || hasEncryptedFile) {\n            toHide.add(R.id.action_send_file);\n            return;\n        }\n\n        if (!inSingleFileFragment && (isSingleSelection || allFilesNotDown)) {\n            toHide.add(R.id.action_send_file);\n        } else if (!toHide.contains(R.id.action_send_share_file)) {\n            toHide.add(R.id.action_send_file);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled filterSendFiles from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: filterSendFiles\n\n        Method Code: rivate void filterSendFiles(List<Integer> toHide, boolean inSingleFileFragment) {\n        boolean sendFilesNotSupported = context != null && !MDMConfig.INSTANCE.sendFilesSupport(context);\n        boolean hasEncryptedFile = containsEncryptedFile();\n        boolean isSingleSelection = isSingleSelection();\n        boolean allFilesNotDown = !allFileDown();\n\n        if (sendFilesNotSupported) {\n            toHide.add(R.id.action_send_file);\n            return;\n        }\n\n        if (overflowMenu || hasEncryptedFile) {\n            toHide.add(R.id.action_send_file);\n            return;\n        }\n\n        if (!inSingleFileFragment && (isSingleSelection || allFilesNotDown)) {\n            toHide.add(R.id.action_send_file);\n        } else if (!toHide.contains(R.id.action_send_share_file)) {\n            toHide.add(R.id.action_send_file);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func filterSendFiles(toHide: inout [Int], inSingleFileFragment: Bool) {\n    let sendFilesNotSupported = context != nil && !MDMConfig.INSTANCE.sendFilesSupport(context)\n    let hasEncryptedFile = containsEncryptedFile()\n    let isSingleSelection = isSingleSelection()\n    let allFilesNotDown = !allFileDown()\n\n    if sendFilesNotSupported {\n        toHide.append(R.id.action_send_file)\n        return\n    }\n\n    if overflowMenu || hasEncryptedFile {\n        toHide.append(R.id.action_send_file)\n        return\n    }\n\n    if !inSingleFileFragment && (isSingleSelection || allFilesNotDown) {\n        toHide.append(R.id.action_send_file)\n    } else if !toHide.contains(R.id.action_send_share_file) {\n        toHide.append(R.id.action_send_file)\n    }\n}\n```"
    },
    {
        "method_name": "filterDetails",
        "method_code": "rivate void filterDetails(Collection<Integer> toHide) {\n        if (!isSingleSelection()) {\n            toHide.add(R.id.action_see_details);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled filterDetails from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: filterDetails\n\n        Method Code: rivate void filterDetails(Collection<Integer> toHide) {\n        if (!isSingleSelection()) {\n            toHide.add(R.id.action_see_details);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func filterDetails(toHide: inout Set<Int>) {\n    if !isSingleSelection() {\n        toHide.insert(R.id.action_see_details)\n    }\n}\n```"
    },
    {
        "method_name": "filterFavorite",
        "method_code": "rivate void filterFavorite(List<Integer> toHide, boolean synchronizing) {\n        if (files.isEmpty() || synchronizing || allFavorites()) {\n            toHide.add(R.id.action_favorite);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled filterFavorite from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: filterFavorite\n\n        Method Code: rivate void filterFavorite(List<Integer> toHide, boolean synchronizing) {\n        if (files.isEmpty() || synchronizing || allFavorites()) {\n            toHide.add(R.id.action_favorite);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func filterFavorite(toHide: inout [Int], synchronizing: Bool) {\n    if files.isEmpty || synchronizing || allFavorites() {\n        toHide.append(R.id.action_favorite)\n    }\n}\n```"
    },
    {
        "method_name": "filterUnfavorite",
        "method_code": "rivate void filterUnfavorite(List<Integer> toHide, boolean synchronizing) {\n        if (files.isEmpty() || synchronizing || allNotFavorites()) {\n            toHide.add(R.id.action_unset_favorite);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled filterUnfavorite from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: filterUnfavorite\n\n        Method Code: rivate void filterUnfavorite(List<Integer> toHide, boolean synchronizing) {\n        if (files.isEmpty() || synchronizing || allNotFavorites()) {\n            toHide.add(R.id.action_unset_favorite);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func filterUnfavorite(toHide: inout [Int], synchronizing: Bool) {\n    if files.isEmpty || synchronizing || allNotFavorites() {\n        toHide.append(R.id.action_unset_favorite)\n    }\n}\n```"
    },
    {
        "method_name": "filterLock",
        "method_code": "rivate void filterLock(List<Integer> toHide, boolean fileLockingEnabled) {\n        if (files.isEmpty() ||\n            !isSingleSelection() ||\n            !fileLockingEnabled ||\n            containsEncryptedFile() ||\n            containsEncryptedFolder()) {\n            toHide.add(R.id.action_lock_file);\n        } else {\n            OCFile file = files.iterator().next();\n            if (file.isLocked() || file.isFolder()) {\n                toHide.add(R.id.action_lock_file);\n            }\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled filterLock from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: filterLock\n\n        Method Code: rivate void filterLock(List<Integer> toHide, boolean fileLockingEnabled) {\n        if (files.isEmpty() ||\n            !isSingleSelection() ||\n            !fileLockingEnabled ||\n            containsEncryptedFile() ||\n            containsEncryptedFolder()) {\n            toHide.add(R.id.action_lock_file);\n        } else {\n            OCFile file = files.iterator().next();\n            if (file.isLocked() || file.isFolder()) {\n                toHide.add(R.id.action_lock_file);\n            }\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func filterLock(toHide: inout [Int], fileLockingEnabled: Bool) {\n    if files.isEmpty ||\n        !isSingleSelection() ||\n        !fileLockingEnabled ||\n        containsEncryptedFile() ||\n        containsEncryptedFolder() {\n        toHide.append(R.id.action_lock_file)\n    } else {\n        if let file = files.first {\n            if file.isLocked || file.isFolder {\n                toHide.append(R.id.action_lock_file)\n            }\n        }\n    }\n}\n```"
    },
    {
        "method_name": "filterUnlock",
        "method_code": "rivate void filterUnlock(List<Integer> toHide, boolean fileLockingEnabled) {\n        if (files.isEmpty() || !isSingleSelection() || !fileLockingEnabled) {\n            toHide.add(R.id.action_unlock_file);\n        } else {\n            OCFile file = files.iterator().next();\n            if (!FileLockingHelper.canUserUnlockFile(userId, file)) {\n                toHide.add(R.id.action_unlock_file);\n            }\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled filterUnlock from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: filterUnlock\n\n        Method Code: rivate void filterUnlock(List<Integer> toHide, boolean fileLockingEnabled) {\n        if (files.isEmpty() || !isSingleSelection() || !fileLockingEnabled) {\n            toHide.add(R.id.action_unlock_file);\n        } else {\n            OCFile file = files.iterator().next();\n            if (!FileLockingHelper.canUserUnlockFile(userId, file)) {\n                toHide.add(R.id.action_unlock_file);\n            }\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func filterUnlock(toHide: inout [Int], fileLockingEnabled: Bool) {\n    if files.isEmpty || !isSingleSelection() || !fileLockingEnabled {\n        toHide.append(R.id.action_unlock_file)\n    } else {\n        if let file = files.first, !FileLockingHelper.canUserUnlockFile(userId: userId, file: file) {\n            toHide.append(R.id.action_unlock_file)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "filterEncrypt",
        "method_code": "rivate void filterEncrypt(List<Integer> toHide, boolean endToEndEncryptionEnabled) {\n        if (files.isEmpty() || !isSingleSelection() || isSingleFile() || isEncryptedFolder() || isGroupFolder()\n            || !endToEndEncryptionEnabled || !isEmptyFolder() || isShared()) {\n            toHide.add(R.id.action_encrypted);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled filterEncrypt from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: filterEncrypt\n\n        Method Code: rivate void filterEncrypt(List<Integer> toHide, boolean endToEndEncryptionEnabled) {\n        if (files.isEmpty() || !isSingleSelection() || isSingleFile() || isEncryptedFolder() || isGroupFolder()\n            || !endToEndEncryptionEnabled || !isEmptyFolder() || isShared()) {\n            toHide.add(R.id.action_encrypted);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func filterEncrypt(toHide: inout [Int], endToEndEncryptionEnabled: Bool) {\n    if files.isEmpty || !isSingleSelection() || isSingleFile() || isEncryptedFolder() || isGroupFolder()\n        || !endToEndEncryptionEnabled || !isEmptyFolder() || isShared() {\n        toHide.append(R.id.action_encrypted)\n    }\n}\n```"
    },
    {
        "method_name": "filterUnsetEncrypted",
        "method_code": "rivate void filterUnsetEncrypted(List<Integer> toHide, boolean endToEndEncryptionEnabled) {\n        if (!endToEndEncryptionEnabled || files.isEmpty() || !isSingleSelection() || isSingleFile() || !isEncryptedFolder() || hasEncryptedParent()\n            || !isEmptyFolder() || !FileOperationsHelper.isEndToEndEncryptionSetup(context, user)) {\n            toHide.add(R.id.action_unset_encrypted);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled filterUnsetEncrypted from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: filterUnsetEncrypted\n\n        Method Code: rivate void filterUnsetEncrypted(List<Integer> toHide, boolean endToEndEncryptionEnabled) {\n        if (!endToEndEncryptionEnabled || files.isEmpty() || !isSingleSelection() || isSingleFile() || !isEncryptedFolder() || hasEncryptedParent()\n            || !isEmptyFolder() || !FileOperationsHelper.isEndToEndEncryptionSetup(context, user)) {\n            toHide.add(R.id.action_unset_encrypted);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func filterUnsetEncrypted(toHide: inout [Int], endToEndEncryptionEnabled: Bool) {\n    if !endToEndEncryptionEnabled || files.isEmpty || !isSingleSelection() || isSingleFile() || !isEncryptedFolder() || hasEncryptedParent()\n        || !isEmptyFolder() || !FileOperationsHelper.isEndToEndEncryptionSetup(context: context, user: user) {\n        toHide.append(R.id.action_unset_encrypted)\n    }\n}\n```"
    },
    {
        "method_name": "filterSetPictureAs",
        "method_code": "rivate void filterSetPictureAs(List<Integer> toHide) {\n        if (!isSingleImage() || MimeTypeUtil.isSVG(files.iterator().next())) {\n            toHide.add(R.id.action_set_as_wallpaper);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled filterSetPictureAs from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: filterSetPictureAs\n\n        Method Code: rivate void filterSetPictureAs(List<Integer> toHide) {\n        if (!isSingleImage() || MimeTypeUtil.isSVG(files.iterator().next())) {\n            toHide.add(R.id.action_set_as_wallpaper);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func filterSetPictureAs(toHide: inout [Int]) {\n    if !isSingleImage() || MimeTypeUtil.isSVG(files.first!) {\n        toHide.append(R.id.action_set_as_wallpaper)\n    }\n}\n```"
    },
    {
        "method_name": "filterPinToHome",
        "method_code": "rivate void filterPinToHome(List<Integer> toHide) {\n        if (!isSingleSelection() || !ShortcutManagerCompat.isRequestPinShortcutSupported(context)) {\n            toHide.add(R.id.action_pin_to_homescreen);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled filterPinToHome from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: filterPinToHome\n\n        Method Code: rivate void filterPinToHome(List<Integer> toHide) {\n        if (!isSingleSelection() || !ShortcutManagerCompat.isRequestPinShortcutSupported(context)) {\n            toHide.add(R.id.action_pin_to_homescreen);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func filterPinToHome(toHide: inout [Int]) {\n    if !isSingleSelection() || !ShortcutManagerCompat.isRequestPinShortcutSupported(context) {\n        toHide.append(R.id.action_pin_to_homescreen)\n    }\n}\n```"
    },
    {
        "method_name": "filterRetry",
        "method_code": "rivate void filterRetry(List<Integer> toHide) {\n        if (!files.iterator().next().isOfflineOperation()) {\n            toHide.add(R.id.action_retry);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled filterRetry from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: filterRetry\n\n        Method Code: rivate void filterRetry(List<Integer> toHide) {\n        if (!files.iterator().next().isOfflineOperation()) {\n            toHide.add(R.id.action_retry);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func filterRetry(toHide: inout [Int]) {\n    if !files.first!.isOfflineOperation() {\n        toHide.append(R.id.action_retry)\n    }\n}\n```"
    },
    {
        "method_name": "filterEdit",
        "method_code": "rivate void filterEdit(\n        List<Integer> toHide,\n        OCCapability capability\n                           ) {\n        if (files.iterator().next().isEncrypted()) {\n            toHide.add(R.id.action_edit);\n            return;\n        }\n\n        String mimeType = files.iterator().next().getMimeType();\n\n        if (!isRichDocumentEditingSupported(capability, mimeType) && !editorUtils.isEditorAvailable(user, mimeType) &&\n            !(isSingleImage() && EditImageActivity.Companion.canBePreviewed(files.iterator().next()))) {\n            toHide.add(R.id.action_edit);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled filterEdit from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: filterEdit\n\n        Method Code: rivate void filterEdit(\n        List<Integer> toHide,\n        OCCapability capability\n                           ) {\n        if (files.iterator().next().isEncrypted()) {\n            toHide.add(R.id.action_edit);\n            return;\n        }\n\n        String mimeType = files.iterator().next().getMimeType();\n\n        if (!isRichDocumentEditingSupported(capability, mimeType) && !editorUtils.isEditorAvailable(user, mimeType) &&\n            !(isSingleImage() && EditImageActivity.Companion.canBePreviewed(files.iterator().next()))) {\n            toHide.add(R.id.action_edit);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func filterEdit(toHide: inout [Int], capability: OCCapability) {\n    if files.first?.isEncrypted() == true {\n        toHide.append(R.id.action_edit)\n        return\n    }\n\n    let mimeType = files.first?.getMimeType() ?? \"\"\n\n    if !isRichDocumentEditingSupported(capability: capability, mimeType: mimeType) &&\n        !editorUtils.isEditorAvailable(user: user, mimeType: mimeType) &&\n        !(isSingleImage() && EditImageActivity.canBePreviewed(file: files.first!)) {\n        toHide.append(R.id.action_edit)\n    }\n}\n```"
    },
    {
        "method_name": "isRichDocumentEditingSupported",
        "method_code": "NextcloudServer(max = 18)\n    private boolean isRichDocumentEditingSupported(OCCapability capability, String mimeType) {\n        return isSingleFile() &&\n            (capability.getRichDocumentsMimeTypeList().contains(mimeType) ||\n                capability.getRichDocumentsOptionalMimeTypeList().contains(mimeType)) &&\n            capability.getRichDocumentsDirectEditing().isTrue();\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isRichDocumentEditingSupported from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: isRichDocumentEditingSupported\n\n        Method Code: NextcloudServer(max = 18)\n    private boolean isRichDocumentEditingSupported(OCCapability capability, String mimeType) {\n        return isSingleFile() &&\n            (capability.getRichDocumentsMimeTypeList().contains(mimeType) ||\n                capability.getRichDocumentsOptionalMimeTypeList().contains(mimeType)) &&\n            capability.getRichDocumentsDirectEditing().isTrue();\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func isRichDocumentEditingSupported(capability: OCCapability, mimeType: String) -> Bool {\n    return isSingleFile() &&\n        (capability.getRichDocumentsMimeTypeList().contains(mimeType) ||\n            capability.getRichDocumentsOptionalMimeTypeList().contains(mimeType)) &&\n        capability.getRichDocumentsDirectEditing().isTrue()\n}\n```"
    },
    {
        "method_name": "filterSync",
        "method_code": "rivate void filterSync(List<Integer> toHide, boolean synchronizing) {\n        if (files.isEmpty() || (!anyFileDown() && !containsFolder()) || synchronizing || containsEncryptedFile()\n            || containsEncryptedFolder()) {\n            toHide.add(R.id.action_sync_file);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled filterSync from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: filterSync\n\n        Method Code: rivate void filterSync(List<Integer> toHide, boolean synchronizing) {\n        if (files.isEmpty() || (!anyFileDown() && !containsFolder()) || synchronizing || containsEncryptedFile()\n            || containsEncryptedFolder()) {\n            toHide.add(R.id.action_sync_file);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func filterSync(toHide: inout [Int], synchronizing: Bool) {\n    if files.isEmpty || (!anyFileDown() && !containsFolder()) || synchronizing || containsEncryptedFile() || containsEncryptedFolder() {\n        toHide.append(R.id.action_sync_file)\n    }\n}\n```"
    },
    {
        "method_name": "filterCancelSync",
        "method_code": "rivate void filterCancelSync(List<Integer> toHide, boolean synchronizing) {\n        if (files.isEmpty() || !synchronizing) {\n            toHide.add(R.id.action_cancel_sync);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled filterCancelSync from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: filterCancelSync\n\n        Method Code: rivate void filterCancelSync(List<Integer> toHide, boolean synchronizing) {\n        if (files.isEmpty() || !synchronizing) {\n            toHide.add(R.id.action_cancel_sync);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func filterCancelSync(toHide: inout [Int], synchronizing: Bool) {\n    if files.isEmpty || !synchronizing {\n        toHide.append(R.id.action_cancel_sync)\n    }\n}\n```"
    },
    {
        "method_name": "filterOpenWith",
        "method_code": "rivate void filterOpenWith(Collection<Integer> toHide, boolean synchronizing) {\n        if (!isSingleFile() || !anyFileDown() || synchronizing) {\n            toHide.add(R.id.action_open_file_with);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled filterOpenWith from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: filterOpenWith\n\n        Method Code: rivate void filterOpenWith(Collection<Integer> toHide, boolean synchronizing) {\n        if (!isSingleFile() || !anyFileDown() || synchronizing) {\n            toHide.add(R.id.action_open_file_with);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func filterOpenWith(toHide: inout Set<Int>, synchronizing: Bool) {\n    if !isSingleFile() || !anyFileDown() || synchronizing {\n        toHide.insert(R.id.action_open_file_with)\n    }\n}\n```"
    },
    {
        "method_name": "filterDeselectAll",
        "method_code": "rivate void filterDeselectAll(List<Integer> toHide, boolean inSingleFileFragment) {\n        if (inSingleFileFragment) {\n            // Always hide in single file fragments\n            toHide.add(R.id.action_deselect_all_action_menu);\n        } else {\n            // Show only if at least one item is selected.\n            if (files.isEmpty() || overflowMenu) {\n                toHide.add(R.id.action_deselect_all_action_menu);\n            }\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled filterDeselectAll from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: filterDeselectAll\n\n        Method Code: rivate void filterDeselectAll(List<Integer> toHide, boolean inSingleFileFragment) {\n        if (inSingleFileFragment) {\n            // Always hide in single file fragments\n            toHide.add(R.id.action_deselect_all_action_menu);\n        } else {\n            // Show only if at least one item is selected.\n            if (files.isEmpty() || overflowMenu) {\n                toHide.add(R.id.action_deselect_all_action_menu);\n            }\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func filterDeselectAll(toHide: inout [Int], inSingleFileFragment: Bool) {\n    if inSingleFileFragment {\n        // Always hide in single file fragments\n        toHide.append(R.id.action_deselect_all_action_menu)\n    } else {\n        // Show only if at least one item is selected.\n        if files.isEmpty || overflowMenu {\n            toHide.append(R.id.action_deselect_all_action_menu)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "filterSelectAll",
        "method_code": "rivate void filterSelectAll(List<Integer> toHide, boolean inSingleFileFragment) {\n        if (!inSingleFileFragment) {\n            // Show only if at least one item isn't selected.\n            if (files.size() >= numberOfAllFiles || overflowMenu) {\n                toHide.add(R.id.action_select_all_action_menu);\n            }\n        } else {\n            // Always hide in single file fragments\n            toHide.add(R.id.action_select_all_action_menu);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled filterSelectAll from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: filterSelectAll\n\n        Method Code: rivate void filterSelectAll(List<Integer> toHide, boolean inSingleFileFragment) {\n        if (!inSingleFileFragment) {\n            // Show only if at least one item isn't selected.\n            if (files.size() >= numberOfAllFiles || overflowMenu) {\n                toHide.add(R.id.action_select_all_action_menu);\n            }\n        } else {\n            // Always hide in single file fragments\n            toHide.add(R.id.action_select_all_action_menu);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func filterSelectAll(toHide: inout [Int], inSingleFileFragment: Bool) {\n    if !inSingleFileFragment {\n        // Show only if at least one item isn't selected.\n        if files.count >= numberOfAllFiles || overflowMenu {\n            toHide.append(R.id.action_select_all_action_menu)\n        }\n    } else {\n        // Always hide in single file fragments\n        toHide.append(R.id.action_select_all_action_menu)\n    }\n}\n```"
    },
    {
        "method_name": "filterRemove",
        "method_code": "rivate void filterRemove(List<Integer> toHide, boolean synchronizing) {\n        if (files.isEmpty() || synchronizing || containsLockedFile()\n            || containsEncryptedFolder() || isFolderAndContainsEncryptedFile()) {\n            toHide.add(R.id.action_remove_file);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled filterRemove from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: filterRemove\n\n        Method Code: rivate void filterRemove(List<Integer> toHide, boolean synchronizing) {\n        if (files.isEmpty() || synchronizing || containsLockedFile()\n            || containsEncryptedFolder() || isFolderAndContainsEncryptedFile()) {\n            toHide.add(R.id.action_remove_file);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func filterRemove(toHide: inout [Int], synchronizing: Bool) {\n    if files.isEmpty || synchronizing || containsLockedFile() || containsEncryptedFolder() || isFolderAndContainsEncryptedFile() {\n        toHide.append(R.id.action_remove_file)\n    }\n}\n```"
    },
    {
        "method_name": "filterMoveOrCopy",
        "method_code": "rivate void filterMoveOrCopy(List<Integer> toHide, boolean synchronizing) {\n        if (files.isEmpty() || synchronizing || containsEncryptedFile() || containsEncryptedFolder() || containsLockedFile()) {\n            toHide.add(R.id.action_move_or_copy);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled filterMoveOrCopy from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: filterMoveOrCopy\n\n        Method Code: rivate void filterMoveOrCopy(List<Integer> toHide, boolean synchronizing) {\n        if (files.isEmpty() || synchronizing || containsEncryptedFile() || containsEncryptedFolder() || containsLockedFile()) {\n            toHide.add(R.id.action_move_or_copy);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func filterMoveOrCopy(toHide: inout [Int], synchronizing: Bool) {\n    if files.isEmpty || synchronizing || containsEncryptedFile() || containsEncryptedFolder() || containsLockedFile() {\n        toHide.append(R.id.action_move_or_copy)\n    }\n}\n```"
    },
    {
        "method_name": "filterRename",
        "method_code": "rivate void filterRename(Collection<Integer> toHide, boolean synchronizing) {\n        if (!isSingleSelection() || synchronizing || containsEncryptedFile() || containsEncryptedFolder() || containsLockedFile()) {\n            toHide.add(R.id.action_rename_file);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled filterRename from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: filterRename\n\n        Method Code: rivate void filterRename(Collection<Integer> toHide, boolean synchronizing) {\n        if (!isSingleSelection() || synchronizing || containsEncryptedFile() || containsEncryptedFolder() || containsLockedFile()) {\n            toHide.add(R.id.action_rename_file);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func filterRename(toHide: inout Set<Int>, synchronizing: Bool) {\n    if !isSingleSelection() || synchronizing || containsEncryptedFile() || containsEncryptedFolder() || containsLockedFile() {\n        toHide.insert(R.id.action_rename_file)\n    }\n}\n```"
    },
    {
        "method_name": "filterDownload",
        "method_code": "rivate void filterDownload(List<Integer> toHide, boolean synchronizing) {\n        if (files.isEmpty() || containsFolder() || anyFileDown() || synchronizing) {\n            toHide.add(R.id.action_download_file);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled filterDownload from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: filterDownload\n\n        Method Code: rivate void filterDownload(List<Integer> toHide, boolean synchronizing) {\n        if (files.isEmpty() || containsFolder() || anyFileDown() || synchronizing) {\n            toHide.add(R.id.action_download_file);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func filterDownload(toHide: inout [Int], synchronizing: Bool) {\n    if files.isEmpty || containsFolder() || anyFileDown() || synchronizing {\n        toHide.append(R.id.action_download_file)\n    }\n}\n```"
    },
    {
        "method_name": "filterExport",
        "method_code": "rivate void filterExport(List<Integer> toHide) {\n        if (files.isEmpty() || containsFolder()) {\n            toHide.add(R.id.action_export_file);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled filterExport from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: filterExport\n\n        Method Code: rivate void filterExport(List<Integer> toHide) {\n        if (files.isEmpty() || containsFolder()) {\n            toHide.add(R.id.action_export_file);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func filterExport(toHide: inout [Int]) {\n    if files.isEmpty || containsFolder() {\n        toHide.append(R.id.action_export_file)\n    }\n}\n```"
    },
    {
        "method_name": "filterStream",
        "method_code": "rivate void filterStream(List<Integer> toHide) {\n        if (files.isEmpty() || !isSingleFile() || !isSingleMedia() || containsEncryptedFile()) {\n            toHide.add(R.id.action_stream_media);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled filterStream from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: filterStream\n\n        Method Code: rivate void filterStream(List<Integer> toHide) {\n        if (files.isEmpty() || !isSingleFile() || !isSingleMedia() || containsEncryptedFile()) {\n            toHide.add(R.id.action_stream_media);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func filterStream(toHide: inout [Int]) {\n    if files.isEmpty || !isSingleFile() || !isSingleMedia() || containsEncryptedFile() {\n        toHide.append(R.id.action_stream_media)\n    }\n}\n```"
    },
    {
        "method_name": "anyFileSynchronizing",
        "method_code": "rivate boolean anyFileSynchronizing() {\n        boolean synchronizing = false;\n        if (componentsGetter != null && !files.isEmpty() && user != null) {\n            OperationsServiceBinder opsBinder = componentsGetter.getOperationsServiceBinder();\n            synchronizing = anyFileSynchronizing(opsBinder) ||      // comparing local and remote\n                anyFileDownloading() ||\n                anyFileUploading();\n        }\n        return synchronizing;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled anyFileSynchronizing from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: anyFileSynchronizing\n\n        Method Code: rivate boolean anyFileSynchronizing() {\n        boolean synchronizing = false;\n        if (componentsGetter != null && !files.isEmpty() && user != null) {\n            OperationsServiceBinder opsBinder = componentsGetter.getOperationsServiceBinder();\n            synchronizing = anyFileSynchronizing(opsBinder) ||      // comparing local and remote\n                anyFileDownloading() ||\n                anyFileUploading();\n        }\n        return synchronizing;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func anyFileSynchronizing() -> Bool {\n    var synchronizing = false\n    if let componentsGetter = componentsGetter, !files.isEmpty, user != nil {\n        if let opsBinder = componentsGetter.getOperationsServiceBinder() {\n            synchronizing = anyFileSynchronizing(opsBinder) || anyFileDownloading() || anyFileUploading()\n        }\n    }\n    return synchronizing\n}\n```"
    },
    {
        "method_name": "anyFileSynchronizing",
        "method_code": "rivate boolean anyFileSynchronizing(OperationsServiceBinder opsBinder) {\n        boolean synchronizing = false;\n        if (opsBinder != null) {\n            for (Iterator<OCFile> iterator = files.iterator(); !synchronizing && iterator.hasNext(); ) {\n                synchronizing = opsBinder.isSynchronizing(user, iterator.next());\n            }\n        }\n        return synchronizing;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled anyFileSynchronizing from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: anyFileSynchronizing\n\n        Method Code: rivate boolean anyFileSynchronizing(OperationsServiceBinder opsBinder) {\n        boolean synchronizing = false;\n        if (opsBinder != null) {\n            for (Iterator<OCFile> iterator = files.iterator(); !synchronizing && iterator.hasNext(); ) {\n                synchronizing = opsBinder.isSynchronizing(user, iterator.next());\n            }\n        }\n        return synchronizing;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func anyFileSynchronizing(opsBinder: OperationsServiceBinder?) -> Bool {\n    var synchronizing = false\n    if let opsBinder = opsBinder {\n        for file in files where !synchronizing {\n            synchronizing = opsBinder.isSynchronizing(user: user, file: file)\n        }\n    }\n    return synchronizing\n}\n```"
    },
    {
        "method_name": "anyFileDownloading",
        "method_code": "rivate boolean anyFileDownloading() {\n        final var fileDownloadHelper = FileDownloadHelper.Companion.instance();\n\n        for (OCFile file : files) {\n            if (fileDownloadHelper.isDownloading(user, file)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled anyFileDownloading from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: anyFileDownloading\n\n        Method Code: rivate boolean anyFileDownloading() {\n        final var fileDownloadHelper = FileDownloadHelper.Companion.instance();\n\n        for (OCFile file : files) {\n            if (fileDownloadHelper.isDownloading(user, file)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func anyFileDownloading() -> Bool {\n    let fileDownloadHelper = FileDownloadHelper.instance()\n\n    for file in files {\n        if fileDownloadHelper.isDownloading(user: user, file: file) {\n            return true\n        }\n    }\n\n    return false\n}\n```"
    },
    {
        "method_name": "anyFileUploading",
        "method_code": "rivate boolean anyFileUploading() {\n        for (OCFile file : files) {\n            if (FileUploadHelper.Companion.instance().isUploading(user, file)) {\n                return true;\n            }\n        }\n        return false;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled anyFileUploading from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: anyFileUploading\n\n        Method Code: rivate boolean anyFileUploading() {\n        for (OCFile file : files) {\n            if (FileUploadHelper.Companion.instance().isUploading(user, file)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func anyFileUploading() -> Bool {\n    for file in files {\n        if FileUploadHelper.instance().isUploading(user: user, file: file) {\n            return true\n        }\n    }\n    return false\n}\n```"
    },
    {
        "method_name": "isShareApiEnabled",
        "method_code": "rivate boolean isShareApiEnabled(OCCapability capability) {\n        return capability != null &&\n            (capability.getFilesSharingApiEnabled().isTrue() ||\n                capability.getFilesSharingApiEnabled().isUnknown()\n            );\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isShareApiEnabled from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: isShareApiEnabled\n\n        Method Code: rivate boolean isShareApiEnabled(OCCapability capability) {\n        return capability != null &&\n            (capability.getFilesSharingApiEnabled().isTrue() ||\n                capability.getFilesSharingApiEnabled().isUnknown()\n            );\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func isShareApiEnabled(capability: OCCapability?) -> Bool {\n    return capability != nil &&\n        (capability!.getFilesSharingApiEnabled().isTrue() ||\n         capability!.getFilesSharingApiEnabled().isUnknown())\n}\n```"
    },
    {
        "method_name": "isShareWithUsersAllowed",
        "method_code": "rivate boolean isShareWithUsersAllowed() {\n        return context != null && MDMConfig.INSTANCE.shareViaUser(context);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isShareWithUsersAllowed from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: isShareWithUsersAllowed\n\n        Method Code: rivate boolean isShareWithUsersAllowed() {\n        return context != null && MDMConfig.INSTANCE.shareViaUser(context);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func isShareWithUsersAllowed() -> Bool {\n    return context != nil && MDMConfig.INSTANCE.shareViaUser(context)\n}\n```"
    },
    {
        "method_name": "isShareViaLinkAllowed",
        "method_code": "rivate boolean isShareViaLinkAllowed() {\n        return context != null && MDMConfig.INSTANCE.shareViaLink(context);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isShareViaLinkAllowed from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: isShareViaLinkAllowed\n\n        Method Code: rivate boolean isShareViaLinkAllowed() {\n        return context != null && MDMConfig.INSTANCE.shareViaLink(context);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func isShareViaLinkAllowed() -> Bool {\n    return context != nil && MDMConfig.shared.shareViaLink(context)\n}\n```"
    },
    {
        "method_name": "isSingleSelection",
        "method_code": "rivate boolean isSingleSelection() {\n        return files.size() == SINGLE_SELECT_ITEMS;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isSingleSelection from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: isSingleSelection\n\n        Method Code: rivate boolean isSingleSelection() {\n        return files.size() == SINGLE_SELECT_ITEMS;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func isSingleSelection() -> Bool {\n    return files.count == SINGLE_SELECT_ITEMS\n}\n```"
    },
    {
        "method_name": "isSingleFile",
        "method_code": "rivate boolean isSingleFile() {\n        return isSingleSelection() && !files.iterator().next().isFolder();\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isSingleFile from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: isSingleFile\n\n        Method Code: rivate boolean isSingleFile() {\n        return isSingleSelection() && !files.iterator().next().isFolder();\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func isSingleFile() -> Bool {\n    return isSingleSelection() && !(files.makeIterator().next()?.isFolder ?? true)\n}\n```"
    },
    {
        "method_name": "isEncryptedFolder",
        "method_code": "rivate boolean isEncryptedFolder() {\n        if (isSingleSelection()) {\n            OCFile file = files.iterator().next();\n\n            return file.isFolder() && file.isEncrypted();\n        } else {\n            return false;\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isEncryptedFolder from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: isEncryptedFolder\n\n        Method Code: rivate boolean isEncryptedFolder() {\n        if (isSingleSelection()) {\n            OCFile file = files.iterator().next();\n\n            return file.isFolder() && file.isEncrypted();\n        } else {\n            return false;\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func isEncryptedFolder() -> Bool {\n    if isSingleSelection() {\n        if let file = files.first {\n            return file.isFolder && file.isEncrypted\n        }\n    }\n    return false\n}\n```"
    },
    {
        "method_name": "isEmptyFolder",
        "method_code": "rivate boolean isEmptyFolder() {\n        if (isSingleSelection()) {\n            OCFile file = files.iterator().next();\n\n            boolean noChildren = storageManager\n                .getFolderContent(file, false).size() == EMPTY_FILE_LENGTH;\n\n            return file.isFolder() && file.getFileLength() == EMPTY_FILE_LENGTH && noChildren;\n        } else {\n            return false;\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isEmptyFolder from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: isEmptyFolder\n\n        Method Code: rivate boolean isEmptyFolder() {\n        if (isSingleSelection()) {\n            OCFile file = files.iterator().next();\n\n            boolean noChildren = storageManager\n                .getFolderContent(file, false).size() == EMPTY_FILE_LENGTH;\n\n            return file.isFolder() && file.getFileLength() == EMPTY_FILE_LENGTH && noChildren;\n        } else {\n            return false;\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func isEmptyFolder() -> Bool {\n    if isSingleSelection() {\n        let file = files.makeIterator().next()!\n\n        let noChildren = storageManager.getFolderContent(file, false).count == EMPTY_FILE_LENGTH\n\n        return file.isFolder() && file.getFileLength() == EMPTY_FILE_LENGTH && noChildren\n    } else {\n        return false\n    }\n}\n```"
    },
    {
        "method_name": "isGroupFolder",
        "method_code": "rivate boolean isGroupFolder() {\n        return files.iterator().next().isGroupFolder();\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isGroupFolder from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: isGroupFolder\n\n        Method Code: rivate boolean isGroupFolder() {\n        return files.iterator().next().isGroupFolder();\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func isGroupFolder() -> Bool {\n    return files.makeIterator().next()?.isGroupFolder() ?? false\n}\n```"
    },
    {
        "method_name": "hasEncryptedParent",
        "method_code": "rivate boolean hasEncryptedParent() {\n        OCFile folder = files.iterator().next();\n        OCFile parent = storageManager.getFileById(folder.getParentId());\n\n        return parent != null && parent.isEncrypted();\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled hasEncryptedParent from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: hasEncryptedParent\n\n        Method Code: rivate boolean hasEncryptedParent() {\n        OCFile folder = files.iterator().next();\n        OCFile parent = storageManager.getFileById(folder.getParentId());\n\n        return parent != null && parent.isEncrypted();\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func hasEncryptedParent() -> Bool {\n    guard let folder = files.first else { return false }\n    if let parent = storageManager.getFileById(folder.parentId) {\n        return parent.isEncrypted\n    }\n    return false\n}\n```"
    },
    {
        "method_name": "isSingleImage",
        "method_code": "rivate boolean isSingleImage() {\n        return isSingleSelection() && MimeTypeUtil.isImage(files.iterator().next());\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isSingleImage from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: isSingleImage\n\n        Method Code: rivate boolean isSingleImage() {\n        return isSingleSelection() && MimeTypeUtil.isImage(files.iterator().next());\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func isSingleImage() -> Bool {\n    return isSingleSelection() && MimeTypeUtil.isImage(files.makeIterator().next()!)\n}\n```"
    },
    {
        "method_name": "isSingleMedia",
        "method_code": "rivate boolean isSingleMedia() {\n        OCFile file = files.iterator().next();\n        return isSingleSelection() && (MimeTypeUtil.isVideo(file) || MimeTypeUtil.isAudio(file));\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isSingleMedia from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: isSingleMedia\n\n        Method Code: rivate boolean isSingleMedia() {\n        OCFile file = files.iterator().next();\n        return isSingleSelection() && (MimeTypeUtil.isVideo(file) || MimeTypeUtil.isAudio(file));\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func isSingleMedia() -> Bool {\n    let file = files.makeIterator().next()!\n    return isSingleSelection() && (MimeTypeUtil.isVideo(file) || MimeTypeUtil.isAudio(file))\n}\n```"
    },
    {
        "method_name": "isFolderAndContainsEncryptedFile",
        "method_code": "rivate boolean isFolderAndContainsEncryptedFile() {\n        for (OCFile file : files) {\n            if (!file.isFolder()) {\n                continue;\n            }\n            if (file.isFolder()) {\n                List<OCFile> children = storageManager.getFolderContent(file, false);\n                for (OCFile child : children) {\n                    if (child.isEncrypted()) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isFolderAndContainsEncryptedFile from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: isFolderAndContainsEncryptedFile\n\n        Method Code: rivate boolean isFolderAndContainsEncryptedFile() {\n        for (OCFile file : files) {\n            if (!file.isFolder()) {\n                continue;\n            }\n            if (file.isFolder()) {\n                List<OCFile> children = storageManager.getFolderContent(file, false);\n                for (OCFile child : children) {\n                    if (child.isEncrypted()) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func isFolderAndContainsEncryptedFile() -> Bool {\n    for file in files {\n        if !file.isFolder {\n            continue\n        }\n        if file.isFolder {\n            let children = storageManager.getFolderContent(file, false)\n            for child in children {\n                if child.isEncrypted {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n```"
    },
    {
        "method_name": "containsEncryptedFile",
        "method_code": "rivate boolean containsEncryptedFile() {\n        for (OCFile file : files) {\n            if (!file.isFolder() && file.isEncrypted()) {\n                return true;\n            }\n        }\n        return false;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled containsEncryptedFile from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: containsEncryptedFile\n\n        Method Code: rivate boolean containsEncryptedFile() {\n        for (OCFile file : files) {\n            if (!file.isFolder() && file.isEncrypted()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func containsEncryptedFile() -> Bool {\n    for file in files {\n        if !file.isFolder && file.isEncrypted {\n            return true\n        }\n    }\n    return false\n}\n```"
    },
    {
        "method_name": "containsLockedFile",
        "method_code": "rivate boolean containsLockedFile() {\n        for (OCFile file : files) {\n            if (file.isLocked()) {\n                return true;\n            }\n        }\n        return false;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled containsLockedFile from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: containsLockedFile\n\n        Method Code: rivate boolean containsLockedFile() {\n        for (OCFile file : files) {\n            if (file.isLocked()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func containsLockedFile() -> Bool {\n    for file in files {\n        if file.isLocked() {\n            return true\n        }\n    }\n    return false\n}\n```"
    },
    {
        "method_name": "containsEncryptedFolder",
        "method_code": "rivate boolean containsEncryptedFolder() {\n        for (OCFile file : files) {\n            if (file.isFolder() && file.isEncrypted()) {\n                return true;\n            }\n        }\n        return false;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled containsEncryptedFolder from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: containsEncryptedFolder\n\n        Method Code: rivate boolean containsEncryptedFolder() {\n        for (OCFile file : files) {\n            if (file.isFolder() && file.isEncrypted()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func containsEncryptedFolder() -> Bool {\n    for file in files {\n        if file.isFolder && file.isEncrypted {\n            return true\n        }\n    }\n    return false\n}\n```"
    },
    {
        "method_name": "containsFolder",
        "method_code": "rivate boolean containsFolder() {\n        for (OCFile file : files) {\n            if (file.isFolder()) {\n                return true;\n            }\n        }\n        return false;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled containsFolder from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: containsFolder\n\n        Method Code: rivate boolean containsFolder() {\n        for (OCFile file : files) {\n            if (file.isFolder()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func containsFolder() -> Bool {\n    for file in files {\n        if file.isFolder() {\n            return true\n        }\n    }\n    return false\n}\n```"
    },
    {
        "method_name": "anyFileDown",
        "method_code": "rivate boolean anyFileDown() {\n        for (OCFile file : files) {\n            if (file.isDown()) {\n                return true;\n            }\n        }\n        return false;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled anyFileDown from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: anyFileDown\n\n        Method Code: rivate boolean anyFileDown() {\n        for (OCFile file : files) {\n            if (file.isDown()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func anyFileDown() -> Bool {\n    for file in files {\n        if file.isDown() {\n            return true\n        }\n    }\n    return false\n}\n```"
    },
    {
        "method_name": "allFileDown",
        "method_code": "rivate boolean allFileDown() {\n        for (OCFile file: files) {\n            if(!file.isDown()) {\n                return false;\n            }\n        }\n        return true;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled allFileDown from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: allFileDown\n\n        Method Code: rivate boolean allFileDown() {\n        for (OCFile file: files) {\n            if(!file.isDown()) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func allFileDown() -> Bool {\n    for file in files {\n        if !file.isDown() {\n            return false\n        }\n    }\n    return true\n}\n```"
    },
    {
        "method_name": "allFavorites",
        "method_code": "rivate boolean allFavorites() {\n        for (OCFile file : files) {\n            if (!file.isFavorite()) {\n                return false;\n            }\n        }\n        return true;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled allFavorites from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: allFavorites\n\n        Method Code: rivate boolean allFavorites() {\n        for (OCFile file : files) {\n            if (!file.isFavorite()) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func allFavorites() -> Bool {\n    for file in files {\n        if !file.isFavorite() {\n            return false\n        }\n    }\n    return true\n}\n```"
    },
    {
        "method_name": "allNotFavorites",
        "method_code": "rivate boolean allNotFavorites() {\n        for (OCFile file : files) {\n            if (file.isFavorite()) {\n                return false;\n            }\n        }\n        return true;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled allNotFavorites from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: allNotFavorites\n\n        Method Code: rivate boolean allNotFavorites() {\n        for (OCFile file : files) {\n            if (file.isFavorite()) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func allNotFavorites() -> Bool {\n    for file in files {\n        if file.isFavorite() {\n            return false\n        }\n    }\n    return true\n}\n```"
    },
    {
        "method_name": "isShared",
        "method_code": "rivate boolean isShared() {\n        for (OCFile file : files) {\n            if (file.isSharedWithMe() || file.isSharedViaLink() || file.isSharedWithSharee()) {\n                return true;\n            }\n        }\n        return false;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isShared from FileMenuFilter.java into Swift.\n\n        Input:\n\n        Method Name: isShared\n\n        Method Code: rivate boolean isShared() {\n        for (OCFile file : files) {\n            if (file.isSharedWithMe() || file.isSharedViaLink() || file.isSharedWithSharee()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func isShared() -> Bool {\n    for file in files {\n        if file.isSharedWithMe() || file.isSharedViaLink() || file.isSharedWithSharee() {\n            return true\n        }\n    }\n    return false\n}\n```"
    }
]