[
    {
        "method_name": "onCreate",
        "method_code": "@Override\n    protected final void onCreate(Bundle savedInstanceState) {\n        Log_OC.v(TAG, \"onCreate() start\");\n        bindView();\n        showToolbar = showToolbarByDefault();\n\n        Bundle extras = getIntent().getExtras();\n        url = getIntent().getExtras().getString(EXTRA_URL);\n        if (extras.containsKey(EXTRA_SHOW_TOOLBAR)) {\n            showToolbar = extras.getBoolean(EXTRA_SHOW_TOOLBAR);\n        }\n\n        showSidebar = extras.getBoolean(EXTRA_SHOW_SIDEBAR);\n\n        // show progress\n        Window window = getWindow();\n        if (window != null) {\n            window.requestFeature(Window.FEATURE_PROGRESS);\n        }\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(getRootView());\n\n        postOnCreate();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreate from ExternalSiteWebView.java into Swift.\n\n        Input:\n\n        Method Name: onCreate\n\n        Method Code: @Override\n    protected final void onCreate(Bundle savedInstanceState) {\n        Log_OC.v(TAG, \"onCreate() start\");\n        bindView();\n        showToolbar = showToolbarByDefault();\n\n        Bundle extras = getIntent().getExtras();\n        url = getIntent().getExtras().getString(EXTRA_URL);\n        if (extras.containsKey(EXTRA_SHOW_TOOLBAR)) {\n            showToolbar = extras.getBoolean(EXTRA_SHOW_TOOLBAR);\n        }\n\n        showSidebar = extras.getBoolean(EXTRA_SHOW_SIDEBAR);\n\n        // show progress\n        Window window = getWindow();\n        if (window != null) {\n            window.requestFeature(Window.FEATURE_PROGRESS);\n        }\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(getRootView());\n\n        postOnCreate();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    Log_OC.v(TAG, \"onCreate() start\")\n    bindView()\n    showToolbar = showToolbarByDefault()\n\n    if let extras = self.navigationController?.viewControllers.last?.extras {\n        url = extras[EXTRA_URL] as? String\n        if extras.keys.contains(EXTRA_SHOW_TOOLBAR) {\n            showToolbar = extras[EXTRA_SHOW_TOOLBAR] as? Bool ?? showToolbar\n        }\n        showSidebar = extras[EXTRA_SHOW_SIDEBAR] as? Bool ?? false\n    }\n\n    if let window = self.view.window {\n        window.makeKeyAndVisible()\n    }\n\n    setContentView(getRootView())\n\n    postOnCreate()\n}\n```"
    },
    {
        "method_name": "postOnCreate",
        "method_code": "protected void postOnCreate() {\n        final WebSettings webSettings = getWebView().getSettings();\n\n        getWebView().setFocusable(true);\n        getWebView().setFocusableInTouchMode(true);\n        getWebView().setClickable(true);\n\n        // allow debugging (when building the debug version); see details in\n        // https://developers.google.com/web/tools/chrome-devtools/remote-debugging/webviews\n        if ((getApplicationInfo().flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0 ||\n            getResources().getBoolean(R.bool.is_beta)) {\n            Log_OC.d(this, \"Enable debug for webView\");\n            WebView.setWebContentsDebuggingEnabled(true);\n        }\n\n        // setup toolbar\n        if (showToolbar) {\n            setupToolbar();\n        } else {\n            if (findViewById(R.id.appbar) != null) {\n                findViewById(R.id.appbar).setVisibility(View.GONE);\n            }\n        }\n\n        setupDrawer();\n\n        if (!showSidebar) {\n            setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED);\n        }\n\n        String title = getIntent().getExtras().getString(EXTRA_TITLE);\n        if (!TextUtils.isEmpty(title)) {\n            setupActionBar(title);\n        }\n        setupWebSettings(webSettings);\n\n        final ProgressBar progressBar = findViewById(R.id.progressBar);\n\n        if (progressBar != null) {\n            getWebView().setWebChromeClient(new WebChromeClient() {\n                public void onProgressChanged(WebView view, int progress) {\n                    progressBar.setProgress(progress * 1000);\n                }\n            });\n        }\n\n        final ExternalSiteWebView self = this;\n        getWebView().setWebViewClient(new NextcloudWebViewClient(getSupportFragmentManager()) {\n            public void onReceivedError(WebView view, WebResourceRequest request, WebResourceError error) {\n                InputStream resources = getResources().openRawResource(R.raw.custom_error);\n                String customError = DisplayUtils.getData(resources);\n\n                if (!customError.isEmpty()) {\n                    getWebView().loadData(customError, \"text/html; charset=UTF-8\", null);\n                }\n            }\n\n            @Override\n            public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {\n                if (!request.isRedirect()) {\n                    DisplayUtils.startLinkIntent(self, request.getUrl());\n                    return true;\n                }\n                return false;\n            }\n        });\n\n        new WebViewUtil(getApplicationContext()).setProxyKKPlus(getWebView());\n        getWebView().loadUrl(url);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled postOnCreate from ExternalSiteWebView.java into Swift.\n\n        Input:\n\n        Method Name: postOnCreate\n\n        Method Code: protected void postOnCreate() {\n        final WebSettings webSettings = getWebView().getSettings();\n\n        getWebView().setFocusable(true);\n        getWebView().setFocusableInTouchMode(true);\n        getWebView().setClickable(true);\n\n        // allow debugging (when building the debug version); see details in\n        // https://developers.google.com/web/tools/chrome-devtools/remote-debugging/webviews\n        if ((getApplicationInfo().flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0 ||\n            getResources().getBoolean(R.bool.is_beta)) {\n            Log_OC.d(this, \"Enable debug for webView\");\n            WebView.setWebContentsDebuggingEnabled(true);\n        }\n\n        // setup toolbar\n        if (showToolbar) {\n            setupToolbar();\n        } else {\n            if (findViewById(R.id.appbar) != null) {\n                findViewById(R.id.appbar).setVisibility(View.GONE);\n            }\n        }\n\n        setupDrawer();\n\n        if (!showSidebar) {\n            setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED);\n        }\n\n        String title = getIntent().getExtras().getString(EXTRA_TITLE);\n        if (!TextUtils.isEmpty(title)) {\n            setupActionBar(title);\n        }\n        setupWebSettings(webSettings);\n\n        final ProgressBar progressBar = findViewById(R.id.progressBar);\n\n        if (progressBar != null) {\n            getWebView().setWebChromeClient(new WebChromeClient() {\n                public void onProgressChanged(WebView view, int progress) {\n                    progressBar.setProgress(progress * 1000);\n                }\n            });\n        }\n\n        final ExternalSiteWebView self = this;\n        getWebView().setWebViewClient(new NextcloudWebViewClient(getSupportFragmentManager()) {\n            public void onReceivedError(WebView view, WebResourceRequest request, WebResourceError error) {\n                InputStream resources = getResources().openRawResource(R.raw.custom_error);\n                String customError = DisplayUtils.getData(resources);\n\n                if (!customError.isEmpty()) {\n                    getWebView().loadData(customError, \"text/html; charset=UTF-8\", null);\n                }\n            }\n\n            @Override\n            public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {\n                if (!request.isRedirect()) {\n                    DisplayUtils.startLinkIntent(self, request.getUrl());\n                    return true;\n                }\n                return false;\n            }\n        });\n\n        new WebViewUtil(getApplicationContext()).setProxyKKPlus(getWebView());\n        getWebView().loadUrl(url);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc postOnCreate() {\n    let webSettings = getWebView().configuration.preferences\n\n    getWebView().isUserInteractionEnabled = true\n    getWebView().isMultipleTouchEnabled = true\n    getWebView().isOpaque = false\n\n    if (UIApplication.shared.applicationState == .active || Bundle.main.object(forInfoDictionaryKey: \"is_beta\") as? Bool == true) {\n        print(\"Enable debug for webView\")\n        WKWebViewConfiguration().preferences.setValue(true, forKey: \"developerExtrasEnabled\")\n    }\n\n    if showToolbar {\n        setupToolbar()\n    } else {\n        if let appbar = view.viewWithTag(R.id.appbar) {\n            appbar.isHidden = true\n        }\n    }\n\n    setupDrawer()\n\n    if !showSidebar {\n        setDrawerLockMode(.lockedClosed)\n    }\n\n    if let title = getIntent().extras?[EXTRA_TITLE] as? String, !title.isEmpty {\n        setupActionBar(title)\n    }\n    setupWebSettings(webSettings)\n\n    if let progressBar = view.viewWithTag(R.id.progressBar) as? UIProgressView {\n        getWebView().navigationDelegate = WebViewNavigationDelegate(progressBar: progressBar)\n    }\n\n    let selfReference = self\n    getWebView().navigationDelegate = NextcloudWebViewClient(getSupportFragmentManager: getSupportFragmentManager()) { view, request, error in\n        if let resources = Bundle.main.url(forResource: \"custom_error\", withExtension: \"html\") {\n            if let customError = try? String(contentsOf: resources), !customError.isEmpty {\n                self.getWebView().loadHTMLString(customError, baseURL: nil)\n            }\n        }\n    }\n\n    WebViewUtil(applicationContext: UIApplication.shared).setProxyKKPlus(getWebView())\n    getWebView().load(URLRequest(url: URL(string: url)!))\n}\n\nclass WebViewNavigationDelegate: NSObject, WKNavigationDelegate {\n    var progressBar: UIProgressView\n\n    init(progressBar: UIProgressView) {\n        self.progressBar = progressBar\n    }\n\n    func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {\n        progressBar.setProgress(1.0, animated: true)\n    }\n\n    func webView(_ webView: WKWebView, didFail navigation: WKNavigation!, withError error: Error) {\n        progressBar.setProgress(0.0, animated: true)\n    }\n}\n```"
    },
    {
        "method_name": "onProgressChanged",
        "method_code": "public void onProgressChanged(WebView view, int progress) {\n                    progressBar.setProgress(progress * 1000);\n                }",
        "prompt": "\n        Please translate the following Java (Android) method titled onProgressChanged from ExternalSiteWebView.java into Swift.\n\n        Input:\n\n        Method Name: onProgressChanged\n\n        Method Code: public void onProgressChanged(WebView view, int progress) {\n                    progressBar.setProgress(progress * 1000);\n                }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onProgressChanged(view: WKWebView, progress: Int) {\n    progressBar.setProgress(Float(progress) * 1000)\n}\n```"
    },
    {
        "method_name": "onReceivedError",
        "method_code": "public void onReceivedError(WebView view, WebResourceRequest request, WebResourceError error) {\n                InputStream resources = getResources().openRawResource(R.raw.custom_error);\n                String customError = DisplayUtils.getData(resources);\n\n                if (!customError.isEmpty()) {\n                    getWebView().loadData(customError, \"text/html; charset=UTF-8\", null);\n                }\n            }",
        "prompt": "\n        Please translate the following Java (Android) method titled onReceivedError from ExternalSiteWebView.java into Swift.\n\n        Input:\n\n        Method Name: onReceivedError\n\n        Method Code: public void onReceivedError(WebView view, WebResourceRequest request, WebResourceError error) {\n                InputStream resources = getResources().openRawResource(R.raw.custom_error);\n                String customError = DisplayUtils.getData(resources);\n\n                if (!customError.isEmpty()) {\n                    getWebView().loadData(customError, \"text/html; charset=UTF-8\", null);\n                }\n            }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onReceivedError(view: WKWebView, request: URLRequest, error: Error) {\n    if let path = Bundle.main.path(forResource: \"custom_error\", ofType: \"html\"),\n       let customError = try? String(contentsOfFile: path, encoding: .utf8) {\n        if !customError.isEmpty {\n            view.loadHTMLString(customError, baseURL: nil)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "shouldOverrideUrlLoading",
        "method_code": "@Override\n            public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {\n                if (!request.isRedirect()) {\n                    DisplayUtils.startLinkIntent(self, request.getUrl());\n                    return true;\n                }\n                return false;\n            }",
        "prompt": "\n        Please translate the following Java (Android) method titled shouldOverrideUrlLoading from ExternalSiteWebView.java into Swift.\n\n        Input:\n\n        Method Name: shouldOverrideUrlLoading\n\n        Method Code: @Override\n            public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {\n                if (!request.isRedirect()) {\n                    DisplayUtils.startLinkIntent(self, request.getUrl());\n                    return true;\n                }\n                return false;\n            }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc webView(_ webView: WKWebView, decidePolicyFor navigationAction: WKNavigationAction, decisionHandler: @escaping (WKNavigationActionPolicy) -> Void) {\n    if !navigationAction.isRedirect {\n        DisplayUtils.startLinkIntent(self, url: navigationAction.request.url!)\n        decisionHandler(.cancel)\n    } else {\n        decisionHandler(.allow)\n    }\n}\n```"
    },
    {
        "method_name": "onDestroy",
        "method_code": "@Override\n    protected void onDestroy() {\n        getWebView().destroy();\n        super.onDestroy();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onDestroy from ExternalSiteWebView.java into Swift.\n\n        Input:\n\n        Method Name: onDestroy\n\n        Method Code: @Override\n    protected void onDestroy() {\n        getWebView().destroy();\n        super.onDestroy();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n    webView?.removeFromSuperview()\n    webView = nil\n}\n```"
    },
    {
        "method_name": "bindView",
        "method_code": "protected void bindView() {\n        binding = ExternalsiteWebviewBinding.inflate(getLayoutInflater());\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled bindView from ExternalSiteWebView.java into Swift.\n\n        Input:\n\n        Method Name: bindView\n\n        Method Code: protected void bindView() {\n        binding = ExternalsiteWebviewBinding.inflate(getLayoutInflater());\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func bindView() {\n    binding = ExternalsiteWebviewBinding.inflate(layoutInflater)\n}\n```"
    },
    {
        "method_name": "showToolbarByDefault",
        "method_code": "protected boolean showToolbarByDefault() {\n        return true;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showToolbarByDefault from ExternalSiteWebView.java into Swift.\n\n        Input:\n\n        Method Name: showToolbarByDefault\n\n        Method Code: protected boolean showToolbarByDefault() {\n        return true;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc showToolbarByDefault() -> Bool {\n    return true\n}\n```"
    },
    {
        "method_name": "getRootView",
        "method_code": "protected View getRootView() {\n        return binding.getRoot();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getRootView from ExternalSiteWebView.java into Swift.\n\n        Input:\n\n        Method Name: getRootView\n\n        Method Code: protected View getRootView() {\n        return binding.getRoot();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getRootView() -> UIView {\n    return binding.root\n}\n```"
    },
    {
        "method_name": "setupWebSettings",
        "method_code": "@SuppressFBWarnings(\"ANDROID_WEB_VIEW_JAVASCRIPT\")\n    @SuppressLint(\"SetJavaScriptEnabled\")\n    private void setupWebSettings(WebSettings webSettings) {\n        // enable zoom\n        webSettings.setSupportZoom(true);\n        webSettings.setBuiltInZoomControls(true);\n        webSettings.setDisplayZoomControls(false);\n\n        // Non-responsive webs are zoomed out when loaded\n        webSettings.setUseWideViewPort(true);\n        webSettings.setLoadWithOverviewMode(true);\n\n        // user agent\n        webSettings.setUserAgentString(MainApp.getUserAgent());\n\n        // do not store private data\n        webSettings.setSaveFormData(false);\n\n        // disable local file access\n        webSettings.setAllowFileAccess(false);\n\n        // enable javascript\n        webSettings.setJavaScriptEnabled(true);\n        webSettings.setDomStorageEnabled(true);\n\n        // caching disabled in debug mode\n        if ((getApplicationInfo().flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0) {\n            webSettings.setCacheMode(WebSettings.LOAD_NO_CACHE);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setupWebSettings from ExternalSiteWebView.java into Swift.\n\n        Input:\n\n        Method Name: setupWebSettings\n\n        Method Code: @SuppressFBWarnings(\"ANDROID_WEB_VIEW_JAVASCRIPT\")\n    @SuppressLint(\"SetJavaScriptEnabled\")\n    private void setupWebSettings(WebSettings webSettings) {\n        // enable zoom\n        webSettings.setSupportZoom(true);\n        webSettings.setBuiltInZoomControls(true);\n        webSettings.setDisplayZoomControls(false);\n\n        // Non-responsive webs are zoomed out when loaded\n        webSettings.setUseWideViewPort(true);\n        webSettings.setLoadWithOverviewMode(true);\n\n        // user agent\n        webSettings.setUserAgentString(MainApp.getUserAgent());\n\n        // do not store private data\n        webSettings.setSaveFormData(false);\n\n        // disable local file access\n        webSettings.setAllowFileAccess(false);\n\n        // enable javascript\n        webSettings.setJavaScriptEnabled(true);\n        webSettings.setDomStorageEnabled(true);\n\n        // caching disabled in debug mode\n        if ((getApplicationInfo().flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0) {\n            webSettings.setCacheMode(WebSettings.LOAD_NO_CACHE);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport WebKit\n\nprivate func setupWebSettings(webView: WKWebView) {\n    let webSettings = webView.configuration.preferences\n\n    // enable zoom\n    webView.scrollView.isZoomingEnabled = true\n    webView.scrollView.bouncesZoom = true\n\n    // Non-responsive webs are zoomed out when loaded\n    webView.configuration.ignoresViewportScaleLimits = true\n\n    // user agent\n    webView.customUserAgent = MainApp.getUserAgent()\n\n    // do not store private data\n    webSettings.isFormDataEnabled = false\n\n    // disable local file access\n    webView.configuration.preferences.setValue(false, forKey: \"allowFileAccessFromFileURLs\")\n\n    // enable javascript\n    webSettings.javaScriptEnabled = true\n    webView.configuration.preferences.setValue(true, forKey: \"domStorageEnabled\")\n\n    // caching disabled in debug mode\n    #if DEBUG\n    webView.configuration.websiteDataStore = WKWebsiteDataStore.nonPersistent()\n    #endif\n}\n```"
    },
    {
        "method_name": "setupActionBar",
        "method_code": "private void setupActionBar(String title) {\n        ActionBar actionBar = getSupportActionBar();\n        if (actionBar != null) {\n            viewThemeUtils.files.themeActionBar(this, actionBar, title);\n\n            if (showSidebar) {\n                actionBar.setDisplayHomeAsUpEnabled(true);\n            } else {\n                setDrawerIndicatorEnabled(false);\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setupActionBar from ExternalSiteWebView.java into Swift.\n\n        Input:\n\n        Method Name: setupActionBar\n\n        Method Code: private void setupActionBar(String title) {\n        ActionBar actionBar = getSupportActionBar();\n        if (actionBar != null) {\n            viewThemeUtils.files.themeActionBar(this, actionBar, title);\n\n            if (showSidebar) {\n                actionBar.setDisplayHomeAsUpEnabled(true);\n            } else {\n                setDrawerIndicatorEnabled(false);\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setupActionBar(title: String) {\n    if let actionBar = self.navigationController?.navigationBar {\n        viewThemeUtils.files.themeActionBar(self, actionBar, title)\n\n        if showSidebar {\n            self.navigationItem.setHidesBackButton(false, animated: true)\n        } else {\n            setDrawerIndicatorEnabled(false)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "onOptionsItemSelected",
        "method_code": "@Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        if (item.getItemId() == android.R.id.home) {\n            if (showSidebar) {\n                if (isDrawerOpen()) {\n                    closeDrawer();\n                } else {\n                    openDrawer();\n                }\n            } else {\n                finish();\n            }\n            return true;\n        } else {\n            return super.onOptionsItemSelected(item);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onOptionsItemSelected from ExternalSiteWebView.java into Swift.\n\n        Input:\n\n        Method Name: onOptionsItemSelected\n\n        Method Code: @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        if (item.getItemId() == android.R.id.home) {\n            if (showSidebar) {\n                if (isDrawerOpen()) {\n                    closeDrawer();\n                } else {\n                    openDrawer();\n                }\n            } else {\n                finish();\n            }\n            return true;\n        } else {\n            return super.onOptionsItemSelected(item);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onOptionsItemSelected(_ item: MenuItem) -> Bool {\n    if item.itemId == android.R.id.home {\n        if showSidebar {\n            if isDrawerOpen() {\n                closeDrawer()\n            } else {\n                openDrawer()\n            }\n        } else {\n            finish()\n        }\n        return true\n    } else {\n        return super.onOptionsItemSelected(item)\n    }\n}\n```"
    },
    {
        "method_name": "getWebView",
        "method_code": "protected WebView getWebView() {\n        return binding.webView;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getWebView from ExternalSiteWebView.java into Swift.\n\n        Input:\n\n        Method Name: getWebView\n\n        Method Code: protected WebView getWebView() {\n        return binding.webView;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getWebView() -> WKWebView {\n    return binding.webView\n}\n```"
    }
]