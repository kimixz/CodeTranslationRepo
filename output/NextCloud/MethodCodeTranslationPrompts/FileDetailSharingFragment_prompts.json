[
    {
        "method_name": "newInstance",
        "method_code": "public static FileDetailSharingFragment newInstance(OCFile file, User user) {\n        FileDetailSharingFragment fragment = new FileDetailSharingFragment();\n        Bundle args = new Bundle();\n        args.putParcelable(ARG_FILE, file);\n        args.putParcelable(ARG_USER, user);\n        fragment.setArguments(args);\n        return fragment;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled newInstance from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: newInstance\n\n        Method Code: public static FileDetailSharingFragment newInstance(OCFile file, User user) {\n        FileDetailSharingFragment fragment = new FileDetailSharingFragment();\n        Bundle args = new Bundle();\n        args.putParcelable(ARG_FILE, file);\n        args.putParcelable(ARG_USER, user);\n        fragment.setArguments(args);\n        return fragment;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func newInstance(file: OCFile, user: User) -> FileDetailSharingFragment {\n    let fragment = FileDetailSharingFragment()\n    let args = Bundle()\n    args.putParcelable(ARG_FILE, file)\n    args.putParcelable(ARG_USER, user)\n    fragment.setArguments(args)\n    return fragment\n}\n```"
    },
    {
        "method_name": "onCreate",
        "method_code": "@Override\n    public void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        if (savedInstanceState != null) {\n            file = BundleExtensionsKt.getParcelableArgument(savedInstanceState, ARG_FILE, OCFile.class);\n            user = BundleExtensionsKt.getParcelableArgument(savedInstanceState, ARG_USER, User.class);\n        } else {\n            Bundle arguments = getArguments();\n\n            if (arguments != null) {\n                file = BundleExtensionsKt.getParcelableArgument(arguments, ARG_FILE, OCFile.class);\n                user = BundleExtensionsKt.getParcelableArgument(arguments, ARG_USER, User.class);\n            }\n        }\n\n        if (file == null) {\n            throw new IllegalArgumentException(\"File may not be null\");\n        }\n\n        if (user == null) {\n            throw new IllegalArgumentException(\"Account may not be null\");\n        }\n\n        fileActivity = (FileActivity) getActivity();\n\n        if (fileActivity == null) {\n            throw new IllegalArgumentException(\"FileActivity may not be null\");\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreate from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: onCreate\n\n        Method Code: @Override\n    public void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        if (savedInstanceState != null) {\n            file = BundleExtensionsKt.getParcelableArgument(savedInstanceState, ARG_FILE, OCFile.class);\n            user = BundleExtensionsKt.getParcelableArgument(savedInstanceState, ARG_USER, User.class);\n        } else {\n            Bundle arguments = getArguments();\n\n            if (arguments != null) {\n                file = BundleExtensionsKt.getParcelableArgument(arguments, ARG_FILE, OCFile.class);\n                user = BundleExtensionsKt.getParcelableArgument(arguments, ARG_USER, User.class);\n            }\n        }\n\n        if (file == null) {\n            throw new IllegalArgumentException(\"File may not be null\");\n        }\n\n        if (user == null) {\n            throw new IllegalArgumentException(\"Account may not be null\");\n        }\n\n        fileActivity = (FileActivity) getActivity();\n\n        if (fileActivity == null) {\n            throw new IllegalArgumentException(\"FileActivity may not be null\");\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n\n    if let savedInstanceState = savedInstanceState {\n        file = savedInstanceState.getParcelableArgument(ARG_FILE, OCFile.self)\n        user = savedInstanceState.getParcelableArgument(ARG_USER, User.self)\n    } else {\n        if let arguments = self.arguments {\n            file = arguments.getParcelableArgument(ARG_FILE, OCFile.self)\n            user = arguments.getParcelableArgument(ARG_USER, User.self)\n        }\n    }\n\n    guard let file = file else {\n        fatalError(\"File may not be null\")\n    }\n\n    guard let user = user else {\n        fatalError(\"Account may not be null\")\n    }\n\n    guard let fileActivity = self.activity as? FileActivity else {\n        fatalError(\"FileActivity may not be null\")\n    }\n}\n```"
    },
    {
        "method_name": "onActivityCreated",
        "method_code": "@Override\n    public void onActivityCreated(Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n\n        refreshCapabilitiesFromDB();\n        refreshSharesFromDB();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onActivityCreated from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: onActivityCreated\n\n        Method Code: @Override\n    public void onActivityCreated(Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n\n        refreshCapabilitiesFromDB();\n        refreshSharesFromDB();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n\n    refreshCapabilitiesFromDB()\n    refreshSharesFromDB()\n}\n```"
    },
    {
        "method_name": "onCreateView",
        "method_code": "@Override\n    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        binding = FileDetailsSharingFragmentBinding.inflate(inflater, container, false);\n\n        fileOperationsHelper = fileActivity.getFileOperationsHelper();\n        fileDataStorageManager = fileActivity.getStorageManager();\n\n        AccountManager accountManager = AccountManager.get(requireContext());\n        String userId = accountManager.getUserData(user.toPlatformAccount(),\n                                                   com.owncloud.android.lib.common.accounts.AccountUtils.Constants.KEY_USER_ID);\n\n        binding.sharesList.setAdapter(new ShareeListAdapter(fileActivity,\n                                                            new ArrayList<>(),\n                                                            this,\n                                                            userId,\n                                                            user,\n                                                            viewThemeUtils,\n                                                            file.isEncrypted()));\n\n        binding.sharesList.setLayoutManager(new LinearLayoutManager(requireContext()));\n\n        binding.pickContactEmailBtn.setOnClickListener(v -> checkContactPermission());\n\n        setupView();\n\n        return binding.getRoot();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreateView from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: onCreateView\n\n        Method Code: @Override\n    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        binding = FileDetailsSharingFragmentBinding.inflate(inflater, container, false);\n\n        fileOperationsHelper = fileActivity.getFileOperationsHelper();\n        fileDataStorageManager = fileActivity.getStorageManager();\n\n        AccountManager accountManager = AccountManager.get(requireContext());\n        String userId = accountManager.getUserData(user.toPlatformAccount(),\n                                                   com.owncloud.android.lib.common.accounts.AccountUtils.Constants.KEY_USER_ID);\n\n        binding.sharesList.setAdapter(new ShareeListAdapter(fileActivity,\n                                                            new ArrayList<>(),\n                                                            this,\n                                                            userId,\n                                                            user,\n                                                            viewThemeUtils,\n                                                            file.isEncrypted()));\n\n        binding.sharesList.setLayoutManager(new LinearLayoutManager(requireContext()));\n\n        binding.pickContactEmailBtn.setOnClickListener(v -> checkContactPermission());\n\n        setupView();\n\n        return binding.getRoot();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    \n    binding = FileDetailsSharingFragmentBinding.inflate(inflater, container: container, savedInstanceState: savedInstanceState)\n    \n    fileOperationsHelper = fileActivity.fileOperationsHelper\n    fileDataStorageManager = fileActivity.storageManager\n    \n    let accountManager = AccountManager(context: requireContext())\n    let userId = accountManager.userData(for: user.toPlatformAccount(), key: com.owncloud.android.lib.common.accounts.AccountUtils.Constants.KEY_USER_ID)\n    \n    binding.sharesList.adapter = ShareeListAdapter(fileActivity: fileActivity, sharees: [], fragment: self, userId: userId, user: user, viewThemeUtils: viewThemeUtils, isEncrypted: file.isEncrypted())\n    \n    binding.sharesList.layoutManager = LinearLayoutManager(context: requireContext())\n    \n    binding.pickContactEmailBtn.addTarget(self, action: #selector(checkContactPermission), for: .touchUpInside)\n    \n    setupView()\n}\n\n@objc func checkContactPermission() {\n    // Implementation for checking contact permission\n}\n```"
    },
    {
        "method_name": "onDestroyView",
        "method_code": "@Override\n    public void onDestroyView() {\n        super.onDestroyView();\n        binding = null;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onDestroyView from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: onDestroyView\n\n        Method Code: @Override\n    public void onDestroyView() {\n        super.onDestroyView();\n        binding = null;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n    binding = nil\n}\n```"
    },
    {
        "method_name": "onAttach",
        "method_code": "@Override\n    public void onAttach(@NonNull Context context) {\n        super.onAttach(context);\n        if (!(getActivity() instanceof FileActivity)) {\n            throw new IllegalArgumentException(\"Calling activity must be of type FileActivity\");\n        }\n        try {\n            onEditShareListener = (OnEditShareListener) context;\n        } catch (Exception ignored) {\n            throw new IllegalArgumentException(\"Calling activity must implement the interface\", ignored);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onAttach from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: onAttach\n\n        Method Code: @Override\n    public void onAttach(@NonNull Context context) {\n        super.onAttach(context);\n        if (!(getActivity() instanceof FileActivity)) {\n            throw new IllegalArgumentException(\"Calling activity must be of type FileActivity\");\n        }\n        try {\n            onEditShareListener = (OnEditShareListener) context;\n        } catch (Exception ignored) {\n            throw new IllegalArgumentException(\"Calling activity must implement the interface\", ignored);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func didMove(toParent parent: UIViewController?) {\n    super.didMove(toParent: parent)\n    guard let fileActivity = parent as? FileActivity else {\n        fatalError(\"Calling activity must be of type FileActivity\")\n    }\n    guard let context = parent as? OnEditShareListener else {\n        fatalError(\"Calling activity must implement the interface\")\n    }\n    onEditShareListener = context\n}\n```"
    },
    {
        "method_name": "onStart",
        "method_code": "@Override\n    public void onStart() {\n        super.onStart();\n        searchConfig.setSearchOnlyUsers(file.isEncrypted());\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onStart from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: onStart\n\n        Method Code: @Override\n    public void onStart() {\n        super.onStart();\n        searchConfig.setSearchOnlyUsers(file.isEncrypted());\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n    searchConfig.setSearchOnlyUsers(file.isEncrypted())\n}\n```"
    },
    {
        "method_name": "onStop",
        "method_code": "@Override\n    public void onStop() {\n        super.onStop();\n        searchConfig.reset();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onStop from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: onStop\n\n        Method Code: @Override\n    public void onStop() {\n        super.onStop();\n        searchConfig.reset();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n    searchConfig.reset()\n}\n```"
    },
    {
        "method_name": "setupView",
        "method_code": "private void setupView() {\n        setShareWithYou();\n\n        OCFile parentFile = fileDataStorageManager.getFileById(file.getParentId());\n\n        FileDetailSharingFragmentHelper.setupSearchView(\n            (SearchManager) fileActivity.getSystemService(Context.SEARCH_SERVICE),\n            binding.searchView,\n            fileActivity.getComponentName());\n        viewThemeUtils.androidx.themeToolbarSearchView(binding.searchView);\n\n\n        if (file.canReshare()) {\n            if (file.isEncrypted() || (parentFile != null && parentFile.isEncrypted())) {\n                if (file.getE2eCounter() == -1) {\n                    // V1 cannot share\n                    binding.searchContainer.setVisibility(View.GONE);\n                } else {\n                    binding.searchView.setQueryHint(getResources().getString(R.string.secure_share_search));\n\n                    if (file.isSharedViaLink()) {\n                        binding.searchView.setQueryHint(getResources().getString(R.string.share_not_allowed_when_file_drop));\n                        binding.searchView.setInputType(InputType.TYPE_NULL);\n                        disableSearchView(binding.searchView);\n                    }\n                }\n            } else {\n                binding.searchView.setQueryHint(getResources().getString(R.string.share_search));\n            }\n        } else {\n            binding.searchView.setQueryHint(getResources().getString(R.string.resharing_is_not_allowed));\n            binding.searchView.setInputType(InputType.TYPE_NULL);\n            binding.pickContactEmailBtn.setVisibility(View.GONE);\n            disableSearchView(binding.searchView);\n        }\n\n        checkShareViaUser();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setupView from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: setupView\n\n        Method Code: private void setupView() {\n        setShareWithYou();\n\n        OCFile parentFile = fileDataStorageManager.getFileById(file.getParentId());\n\n        FileDetailSharingFragmentHelper.setupSearchView(\n            (SearchManager) fileActivity.getSystemService(Context.SEARCH_SERVICE),\n            binding.searchView,\n            fileActivity.getComponentName());\n        viewThemeUtils.androidx.themeToolbarSearchView(binding.searchView);\n\n\n        if (file.canReshare()) {\n            if (file.isEncrypted() || (parentFile != null && parentFile.isEncrypted())) {\n                if (file.getE2eCounter() == -1) {\n                    // V1 cannot share\n                    binding.searchContainer.setVisibility(View.GONE);\n                } else {\n                    binding.searchView.setQueryHint(getResources().getString(R.string.secure_share_search));\n\n                    if (file.isSharedViaLink()) {\n                        binding.searchView.setQueryHint(getResources().getString(R.string.share_not_allowed_when_file_drop));\n                        binding.searchView.setInputType(InputType.TYPE_NULL);\n                        disableSearchView(binding.searchView);\n                    }\n                }\n            } else {\n                binding.searchView.setQueryHint(getResources().getString(R.string.share_search));\n            }\n        } else {\n            binding.searchView.setQueryHint(getResources().getString(R.string.resharing_is_not_allowed));\n            binding.searchView.setInputType(InputType.TYPE_NULL);\n            binding.pickContactEmailBtn.setVisibility(View.GONE);\n            disableSearchView(binding.searchView);\n        }\n\n        checkShareViaUser();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setupView() {\n    setShareWithYou()\n\n    let parentFile = fileDataStorageManager.getFileById(file.parentId)\n\n    FileDetailSharingFragmentHelper.setupSearchView(\n        fileActivity.getSystemService(Context.searchService) as! SearchManager,\n        binding.searchView,\n        fileActivity.componentName)\n    viewThemeUtils.androidx.themeToolbarSearchView(binding.searchView)\n\n    if file.canReshare() {\n        if file.isEncrypted() || (parentFile != nil && parentFile!.isEncrypted()) {\n            if file.e2eCounter == -1 {\n                // V1 cannot share\n                binding.searchContainer.isHidden = true\n            } else {\n                binding.searchView.placeholder = NSLocalizedString(\"secure_share_search\", comment: \"\")\n\n                if file.isSharedViaLink() {\n                    binding.searchView.placeholder = NSLocalizedString(\"share_not_allowed_when_file_drop\", comment: \"\")\n                    binding.searchView.keyboardType = .default\n                    disableSearchView(binding.searchView)\n                }\n            }\n        } else {\n            binding.searchView.placeholder = NSLocalizedString(\"share_search\", comment: \"\")\n        }\n    } else {\n        binding.searchView.placeholder = NSLocalizedString(\"resharing_is_not_allowed\", comment: \"\")\n        binding.searchView.keyboardType = .default\n        binding.pickContactEmailBtn.isHidden = true\n        disableSearchView(binding.searchView)\n    }\n\n    checkShareViaUser()\n}\n```"
    },
    {
        "method_name": "checkShareViaUser",
        "method_code": "private void checkShareViaUser() {\n        if (!MDMConfig.INSTANCE.shareViaUser(requireContext())) {\n            binding.searchContainer.setVisibility(View.GONE);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled checkShareViaUser from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: checkShareViaUser\n\n        Method Code: private void checkShareViaUser() {\n        if (!MDMConfig.INSTANCE.shareViaUser(requireContext())) {\n            binding.searchContainer.setVisibility(View.GONE);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func checkShareViaUser() {\n    if !MDMConfig.INSTANCE.shareViaUser(requireContext()) {\n        binding.searchContainer.isHidden = true\n    }\n}\n```"
    },
    {
        "method_name": "disableSearchView",
        "method_code": "private void disableSearchView(View view) {\n        view.setEnabled(false);\n\n        if (view instanceof ViewGroup viewGroup) {\n            for (int i = 0; i < viewGroup.getChildCount(); i++) {\n                disableSearchView(viewGroup.getChildAt(i));\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled disableSearchView from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: disableSearchView\n\n        Method Code: private void disableSearchView(View view) {\n        view.setEnabled(false);\n\n        if (view instanceof ViewGroup viewGroup) {\n            for (int i = 0; i < viewGroup.getChildCount(); i++) {\n                disableSearchView(viewGroup.getChildAt(i));\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func disableSearchView(_ view: UIView) {\n    view.isUserInteractionEnabled = false\n\n    if let viewGroup = view as? UIView {\n        for subview in viewGroup.subviews {\n            disableSearchView(subview)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "setShareWithYou",
        "method_code": "private void setShareWithYou() {\n        if (accountManager.userOwnsFile(file, user)) {\n            binding.sharedWithYouContainer.setVisibility(View.GONE);\n        } else {\n            binding.sharedWithYouUsername.setText(\n                String.format(getString(R.string.shared_with_you_by), file.getOwnerDisplayName()));\n            DisplayUtils.setAvatar(user,\n                                   file.getOwnerId(),\n                                   this,\n                                   getResources().getDimension(\n                                       R.dimen.file_list_item_avatar_icon_radius),\n                                   getResources(),\n                                   binding.sharedWithYouAvatar,\n                                   getContext());\n            binding.sharedWithYouAvatar.setVisibility(View.VISIBLE);\n\n            String note = file.getNote();\n\n            if (!TextUtils.isEmpty(note)) {\n                binding.sharedWithYouNote.setText(file.getNote());\n                binding.sharedWithYouNoteContainer.setVisibility(View.VISIBLE);\n            } else {\n                binding.sharedWithYouNoteContainer.setVisibility(View.GONE);\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setShareWithYou from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: setShareWithYou\n\n        Method Code: private void setShareWithYou() {\n        if (accountManager.userOwnsFile(file, user)) {\n            binding.sharedWithYouContainer.setVisibility(View.GONE);\n        } else {\n            binding.sharedWithYouUsername.setText(\n                String.format(getString(R.string.shared_with_you_by), file.getOwnerDisplayName()));\n            DisplayUtils.setAvatar(user,\n                                   file.getOwnerId(),\n                                   this,\n                                   getResources().getDimension(\n                                       R.dimen.file_list_item_avatar_icon_radius),\n                                   getResources(),\n                                   binding.sharedWithYouAvatar,\n                                   getContext());\n            binding.sharedWithYouAvatar.setVisibility(View.VISIBLE);\n\n            String note = file.getNote();\n\n            if (!TextUtils.isEmpty(note)) {\n                binding.sharedWithYouNote.setText(file.getNote());\n                binding.sharedWithYouNoteContainer.setVisibility(View.VISIBLE);\n            } else {\n                binding.sharedWithYouNoteContainer.setVisibility(View.GONE);\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setShareWithYou() {\n    if accountManager.userOwnsFile(file, user: user) {\n        binding.sharedWithYouContainer.isHidden = true\n    } else {\n        binding.sharedWithYouUsername.text = String(format: NSLocalizedString(\"shared_with_you_by\", comment: \"\"), file.ownerDisplayName)\n        DisplayUtils.setAvatar(user: user,\n                               ownerId: file.ownerId,\n                               viewController: self,\n                               radius: getResources().getDimension(R.dimen.file_list_item_avatar_icon_radius),\n                               resources: getResources(),\n                               imageView: binding.sharedWithYouAvatar,\n                               context: getContext())\n        binding.sharedWithYouAvatar.isHidden = false\n\n        let note = file.note\n\n        if !note.isEmpty {\n            binding.sharedWithYouNote.text = file.note\n            binding.sharedWithYouNoteContainer.isHidden = false\n        } else {\n            binding.sharedWithYouNoteContainer.isHidden = true\n        }\n    }\n}\n```"
    },
    {
        "method_name": "copyInternalLink",
        "method_code": "@Override\n    public void copyInternalLink() {\n        OwnCloudAccount account = accountManager.getCurrentOwnCloudAccount();\n\n        if (account == null) {\n            DisplayUtils.showSnackMessage(getView(), getString(R.string.could_not_retrieve_url));\n            return;\n        }\n\n        FileDisplayActivity.showShareLinkDialog(fileActivity, file, createInternalLink(account, file));\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled copyInternalLink from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: copyInternalLink\n\n        Method Code: @Override\n    public void copyInternalLink() {\n        OwnCloudAccount account = accountManager.getCurrentOwnCloudAccount();\n\n        if (account == null) {\n            DisplayUtils.showSnackMessage(getView(), getString(R.string.could_not_retrieve_url));\n            return;\n        }\n\n        FileDisplayActivity.showShareLinkDialog(fileActivity, file, createInternalLink(account, file));\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func copyInternalLink() {\n    guard let account = accountManager.getCurrentOwnCloudAccount() else {\n        DisplayUtils.showSnackMessage(view: self.view, message: getString(R.string.could_not_retrieve_url))\n        return\n    }\n    \n    FileDisplayActivity.showShareLinkDialog(fileActivity: fileActivity, file: file, link: createInternalLink(account: account, file: file))\n}\n```"
    },
    {
        "method_name": "createInternalLink",
        "method_code": "private String createInternalLink(OwnCloudAccount account, OCFile file) {\n        return account.getBaseUri() + \"/index.php/f/\" + file.getLocalId();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled createInternalLink from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: createInternalLink\n\n        Method Code: private String createInternalLink(OwnCloudAccount account, OCFile file) {\n        return account.getBaseUri() + \"/index.php/f/\" + file.getLocalId();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func createInternalLink(account: OwnCloudAccount, file: OCFile) -> String {\n    return account.baseUri + \"/index.php/f/\" + String(file.localId)\n}\n```"
    },
    {
        "method_name": "createPublicShareLink",
        "method_code": "@Override\n    public void createPublicShareLink() {\n        if (capabilities != null && (capabilities.getFilesSharingPublicPasswordEnforced().isTrue() ||\n            capabilities.getFilesSharingPublicAskForOptionalPassword().isTrue())) {\n            // password enforced by server, request to the user before trying to create\n            requestPasswordForShareViaLink(true,\n                                           capabilities.getFilesSharingPublicAskForOptionalPassword().isTrue());\n\n        } else {\n            // create without password if not enforced by server or we don't know if enforced;\n            fileOperationsHelper.shareFileViaPublicShare(file, null);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled createPublicShareLink from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: createPublicShareLink\n\n        Method Code: @Override\n    public void createPublicShareLink() {\n        if (capabilities != null && (capabilities.getFilesSharingPublicPasswordEnforced().isTrue() ||\n            capabilities.getFilesSharingPublicAskForOptionalPassword().isTrue())) {\n            // password enforced by server, request to the user before trying to create\n            requestPasswordForShareViaLink(true,\n                                           capabilities.getFilesSharingPublicAskForOptionalPassword().isTrue());\n\n        } else {\n            // create without password if not enforced by server or we don't know if enforced;\n            fileOperationsHelper.shareFileViaPublicShare(file, null);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func createPublicShareLink() {\n    if let capabilities = capabilities, \n       capabilities.getFilesSharingPublicPasswordEnforced().isTrue() || \n       capabilities.getFilesSharingPublicAskForOptionalPassword().isTrue() {\n        // password enforced by server, request to the user before trying to create\n        requestPasswordForShareViaLink(true, \n                                       capabilities.getFilesSharingPublicAskForOptionalPassword().isTrue())\n    } else {\n        // create without password if not enforced by server or we don't know if enforced;\n        fileOperationsHelper.shareFileViaPublicShare(file, nil)\n    }\n}\n```"
    },
    {
        "method_name": "createSecureFileDrop",
        "method_code": "@Override\n    public void createSecureFileDrop() {\n        fileOperationsHelper.shareFolderViaSecureFileDrop(file);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled createSecureFileDrop from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: createSecureFileDrop\n\n        Method Code: @Override\n    public void createSecureFileDrop() {\n        fileOperationsHelper.shareFolderViaSecureFileDrop(file);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func createSecureFileDrop() {\n    fileOperationsHelper.shareFolderViaSecureFileDrop(file)\n}\n```"
    },
    {
        "method_name": "showSendLinkTo",
        "method_code": "private void showSendLinkTo(OCShare publicShare) {\n        if (file.isSharedViaLink()) {\n            if (TextUtils.isEmpty(publicShare.getShareLink())) {\n                fileOperationsHelper.getFileWithLink(file, viewThemeUtils);\n            } else {\n                FileDisplayActivity.showShareLinkDialog(fileActivity, file, publicShare.getShareLink());\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showSendLinkTo from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: showSendLinkTo\n\n        Method Code: private void showSendLinkTo(OCShare publicShare) {\n        if (file.isSharedViaLink()) {\n            if (TextUtils.isEmpty(publicShare.getShareLink())) {\n                fileOperationsHelper.getFileWithLink(file, viewThemeUtils);\n            } else {\n                FileDisplayActivity.showShareLinkDialog(fileActivity, file, publicShare.getShareLink());\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func showSendLinkTo(publicShare: OCShare) {\n    if file.isSharedViaLink() {\n        if publicShare.shareLink.isEmpty {\n            fileOperationsHelper.getFileWithLink(file: file, viewThemeUtils: viewThemeUtils)\n        } else {\n            FileDisplayActivity.showShareLinkDialog(fileActivity: fileActivity, file: file, shareLink: publicShare.shareLink)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "copyLink",
        "method_code": "public void copyLink(OCShare share) {\n        if (file.isSharedViaLink()) {\n            if (TextUtils.isEmpty(share.getShareLink())) {\n                fileOperationsHelper.getFileWithLink(file, viewThemeUtils);\n            } else {\n                ClipboardUtil.copyToClipboard(requireActivity(), share.getShareLink());\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled copyLink from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: copyLink\n\n        Method Code: public void copyLink(OCShare share) {\n        if (file.isSharedViaLink()) {\n            if (TextUtils.isEmpty(share.getShareLink())) {\n                fileOperationsHelper.getFileWithLink(file, viewThemeUtils);\n            } else {\n                ClipboardUtil.copyToClipboard(requireActivity(), share.getShareLink());\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc copyLink(share: OCShare) {\n    if file.isSharedViaLink() {\n        if share.getShareLink().isEmpty {\n            fileOperationsHelper.getFileWithLink(file: file, viewThemeUtils: viewThemeUtils)\n        } else {\n            ClipboardUtil.copyToClipboard(activity: requireActivity(), text: share.getShareLink())\n        }\n    }\n}\n```"
    },
    {
        "method_name": "showSharingMenuActionSheet",
        "method_code": "@Override\n    @VisibleForTesting\n    public void showSharingMenuActionSheet(OCShare share) {\n        if (fileActivity != null && !fileActivity.isFinishing()) {\n            new FileDetailSharingMenuBottomSheetDialog(fileActivity, this, share, viewThemeUtils).show();\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showSharingMenuActionSheet from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: showSharingMenuActionSheet\n\n        Method Code: @Override\n    @VisibleForTesting\n    public void showSharingMenuActionSheet(OCShare share) {\n        if (fileActivity != null && !fileActivity.isFinishing()) {\n            new FileDetailSharingMenuBottomSheetDialog(fileActivity, this, share, viewThemeUtils).show();\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc showSharingMenuActionSheet(share: OCShare) {\n    if let fileActivity = fileActivity, !fileActivity.isFinishing {\n        FileDetailSharingMenuBottomSheetDialog(fileActivity: fileActivity, fragment: self, share: share, viewThemeUtils: viewThemeUtils).show()\n    }\n}\n```"
    },
    {
        "method_name": "showPermissionsDialog",
        "method_code": "@Override\n    public void showPermissionsDialog(OCShare share) {\n        new QuickSharingPermissionsBottomSheetDialog(fileActivity, this, share, viewThemeUtils).show();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showPermissionsDialog from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: showPermissionsDialog\n\n        Method Code: @Override\n    public void showPermissionsDialog(OCShare share) {\n        new QuickSharingPermissionsBottomSheetDialog(fileActivity, this, share, viewThemeUtils).show();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func showPermissionsDialog(share: OCShare) {\n    QuickSharingPermissionsBottomSheetDialog(fileActivity: fileActivity, fragment: self, share: share, viewThemeUtils: viewThemeUtils).show()\n}\n```"
    },
    {
        "method_name": "onUpdateShareInformation",
        "method_code": "public void onUpdateShareInformation(RemoteOperationResult result, OCFile file) {\n        this.file = file;\n\n        onUpdateShareInformation(result);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onUpdateShareInformation from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: onUpdateShareInformation\n\n        Method Code: public void onUpdateShareInformation(RemoteOperationResult result, OCFile file) {\n        this.file = file;\n\n        onUpdateShareInformation(result);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onUpdateShareInformation(result: RemoteOperationResult, file: OCFile) {\n    self.file = file\n\n    onUpdateShareInformation(result: result)\n}\n```"
    },
    {
        "method_name": "onUpdateShareInformation",
        "method_code": "public void onUpdateShareInformation(RemoteOperationResult result) {\n        if (result.isSuccess()) {\n            refreshUiFromDB();\n        } else {\n            setupView();\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onUpdateShareInformation from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: onUpdateShareInformation\n\n        Method Code: public void onUpdateShareInformation(RemoteOperationResult result) {\n        if (result.isSuccess()) {\n            refreshUiFromDB();\n        } else {\n            setupView();\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onUpdateShareInformation(result: RemoteOperationResult) {\n    if result.isSuccess() {\n        refreshUiFromDB()\n    } else {\n        setupView()\n    }\n}\n```"
    },
    {
        "method_name": "refreshUiFromDB",
        "method_code": "private void refreshUiFromDB() {\n        refreshSharesFromDB();\n        // Updates UI with new state\n        setupView();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled refreshUiFromDB from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: refreshUiFromDB\n\n        Method Code: private void refreshUiFromDB() {\n        refreshSharesFromDB();\n        // Updates UI with new state\n        setupView();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func refreshUiFromDB() {\n    refreshSharesFromDB()\n    // Updates UI with new state\n    setupView()\n}\n```"
    },
    {
        "method_name": "unshareWith",
        "method_code": "private void unshareWith(OCShare share) {\n        fileOperationsHelper.unshareShare(file, share);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled unshareWith from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: unshareWith\n\n        Method Code: private void unshareWith(OCShare share) {\n        fileOperationsHelper.unshareShare(file, share);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func unshareWith(share: OCShare) {\n    fileOperationsHelper.unshareShare(file, share)\n}\n```"
    },
    {
        "method_name": "requestPasswordForShareViaLink",
        "method_code": "public void requestPasswordForShareViaLink(boolean createShare, boolean askForPassword) {\n        SharePasswordDialogFragment dialog = SharePasswordDialogFragment.newInstance(file,\n                                                                                     createShare,\n                                                                                     askForPassword);\n        dialog.show(getChildFragmentManager(), SharePasswordDialogFragment.PASSWORD_FRAGMENT);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled requestPasswordForShareViaLink from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: requestPasswordForShareViaLink\n\n        Method Code: public void requestPasswordForShareViaLink(boolean createShare, boolean askForPassword) {\n        SharePasswordDialogFragment dialog = SharePasswordDialogFragment.newInstance(file,\n                                                                                     createShare,\n                                                                                     askForPassword);\n        dialog.show(getChildFragmentManager(), SharePasswordDialogFragment.PASSWORD_FRAGMENT);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc requestPasswordForShareViaLink(createShare: Bool, askForPassword: Bool) {\n    let dialog = SharePasswordDialogFragment.newInstance(file: file, createShare: createShare, askForPassword: askForPassword)\n    dialog.show(getChildFragmentManager(), SharePasswordDialogFragment.PASSWORD_FRAGMENT)\n}\n```"
    },
    {
        "method_name": "requestPasswordForShare",
        "method_code": "@Override\n    public void requestPasswordForShare(OCShare share, boolean askForPassword) {\n        SharePasswordDialogFragment dialog = SharePasswordDialogFragment.newInstance(share, askForPassword);\n        dialog.show(getChildFragmentManager(), SharePasswordDialogFragment.PASSWORD_FRAGMENT);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled requestPasswordForShare from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: requestPasswordForShare\n\n        Method Code: @Override\n    public void requestPasswordForShare(OCShare share, boolean askForPassword) {\n        SharePasswordDialogFragment dialog = SharePasswordDialogFragment.newInstance(share, askForPassword);\n        dialog.show(getChildFragmentManager(), SharePasswordDialogFragment.PASSWORD_FRAGMENT);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func requestPasswordForShare(share: OCShare, askForPassword: Bool) {\n    let dialog = SharePasswordDialogFragment.newInstance(share: share, askForPassword: askForPassword)\n    dialog.show(parent: self, tag: SharePasswordDialogFragment.PASSWORD_FRAGMENT)\n}\n```"
    },
    {
        "method_name": "showProfileBottomSheet",
        "method_code": "@Override\n    public void showProfileBottomSheet(User user, String shareWith) {\n        if (user.getServer().getVersion().isNewerOrEqual(NextcloudVersion.nextcloud_23)) {\n            new RetrieveHoverCardAsyncTask(user,\n                                           shareWith,\n                                           fileActivity,\n                                           clientFactory,\n                                           viewThemeUtils).execute();\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showProfileBottomSheet from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: showProfileBottomSheet\n\n        Method Code: @Override\n    public void showProfileBottomSheet(User user, String shareWith) {\n        if (user.getServer().getVersion().isNewerOrEqual(NextcloudVersion.nextcloud_23)) {\n            new RetrieveHoverCardAsyncTask(user,\n                                           shareWith,\n                                           fileActivity,\n                                           clientFactory,\n                                           viewThemeUtils).execute();\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func showProfileBottomSheet(user: User, shareWith: String) {\n    if user.server.version.isNewerOrEqual(to: NextcloudVersion.nextcloud_23) {\n        RetrieveHoverCardAsyncTask(user: user,\n                                   shareWith: shareWith,\n                                   fileActivity: fileActivity,\n                                   clientFactory: clientFactory,\n                                   viewThemeUtils: viewThemeUtils).execute()\n    }\n}\n```"
    },
    {
        "method_name": "refreshCapabilitiesFromDB",
        "method_code": "public void refreshCapabilitiesFromDB() {\n        capabilities = fileDataStorageManager.getCapability(user.getAccountName());\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled refreshCapabilitiesFromDB from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: refreshCapabilitiesFromDB\n\n        Method Code: public void refreshCapabilitiesFromDB() {\n        capabilities = fileDataStorageManager.getCapability(user.getAccountName());\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc refreshCapabilitiesFromDB() {\n    capabilities = fileDataStorageManager.getCapability(user.accountName)\n}\n```"
    },
    {
        "method_name": "refreshSharesFromDB",
        "method_code": "public void refreshSharesFromDB() {\n        OCFile newFile = fileDataStorageManager.getFileById(file.getFileId());\n        if (newFile != null) {\n            file = newFile;\n        }\n\n        ShareeListAdapter adapter = (ShareeListAdapter) binding.sharesList.getAdapter();\n\n        if (adapter == null) {\n            DisplayUtils.showSnackMessage(getView(), getString(R.string.could_not_retrieve_shares));\n            return;\n        }\n        adapter.getShares().clear();\n\n        // to show share with users/groups info\n        List<OCShare> shares = fileDataStorageManager.getSharesWithForAFile(file.getRemotePath(),\n                                                                            user.getAccountName());\n\n        adapter.addShares(shares);\n\n        if (FileDetailSharingFragmentHelper.isPublicShareDisabled(capabilities) || !file.canReshare()) {\n            return;\n        }\n\n        // Get public share\n        List<OCShare> publicShares = fileDataStorageManager.getSharesByPathAndType(file.getRemotePath(),\n                                                                                   ShareType.PUBLIC_LINK,\n                                                                                   \"\");\n\n        if (publicShares.isEmpty() && containsNoNewPublicShare(adapter.getShares()) &&\n            (!file.isEncrypted() || capabilities.getEndToEndEncryption().isTrue())) {\n            final OCShare ocShare = new OCShare();\n            ocShare.setShareType(ShareType.NEW_PUBLIC_LINK);\n            publicShares.add(ocShare);\n        } else {\n            adapter.removeNewPublicShare();\n        }\n\n        adapter.addShares(publicShares);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled refreshSharesFromDB from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: refreshSharesFromDB\n\n        Method Code: public void refreshSharesFromDB() {\n        OCFile newFile = fileDataStorageManager.getFileById(file.getFileId());\n        if (newFile != null) {\n            file = newFile;\n        }\n\n        ShareeListAdapter adapter = (ShareeListAdapter) binding.sharesList.getAdapter();\n\n        if (adapter == null) {\n            DisplayUtils.showSnackMessage(getView(), getString(R.string.could_not_retrieve_shares));\n            return;\n        }\n        adapter.getShares().clear();\n\n        // to show share with users/groups info\n        List<OCShare> shares = fileDataStorageManager.getSharesWithForAFile(file.getRemotePath(),\n                                                                            user.getAccountName());\n\n        adapter.addShares(shares);\n\n        if (FileDetailSharingFragmentHelper.isPublicShareDisabled(capabilities) || !file.canReshare()) {\n            return;\n        }\n\n        // Get public share\n        List<OCShare> publicShares = fileDataStorageManager.getSharesByPathAndType(file.getRemotePath(),\n                                                                                   ShareType.PUBLIC_LINK,\n                                                                                   \"\");\n\n        if (publicShares.isEmpty() && containsNoNewPublicShare(adapter.getShares()) &&\n            (!file.isEncrypted() || capabilities.getEndToEndEncryption().isTrue())) {\n            final OCShare ocShare = new OCShare();\n            ocShare.setShareType(ShareType.NEW_PUBLIC_LINK);\n            publicShares.add(ocShare);\n        } else {\n            adapter.removeNewPublicShare();\n        }\n\n        adapter.addShares(publicShares);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc refreshSharesFromDB() {\n    if let newFile = fileDataStorageManager.getFileById(file.fileId) {\n        file = newFile\n    }\n\n    guard let adapter = binding.sharesList.adapter as? ShareeListAdapter else {\n        DisplayUtils.showSnackMessage(view: getView(), message: getString(R.string.could_not_retrieve_shares))\n        return\n    }\n    adapter.getShares().removeAll()\n\n    // to show share with users/groups info\n    let shares = fileDataStorageManager.getSharesWithForAFile(file.remotePath, user.accountName)\n    adapter.addShares(shares)\n\n    if FileDetailSharingFragmentHelper.isPublicShareDisabled(capabilities) || !file.canReshare() {\n        return\n    }\n\n    // Get public share\n    var publicShares = fileDataStorageManager.getSharesByPathAndType(file.remotePath, ShareType.PUBLIC_LINK, \"\")\n\n    if publicShares.isEmpty && containsNoNewPublicShare(adapter.getShares()) &&\n        (!file.isEncrypted || capabilities.getEndToEndEncryption().isTrue()) {\n        let ocShare = OCShare()\n        ocShare.setShareType(.NEW_PUBLIC_LINK)\n        publicShares.append(ocShare)\n    } else {\n        adapter.removeNewPublicShare()\n    }\n\n    adapter.addShares(publicShares)\n}\n```"
    },
    {
        "method_name": "checkContactPermission",
        "method_code": "private void checkContactPermission() {\n        if (PermissionUtil.checkSelfPermission(requireActivity(), Manifest.permission.READ_CONTACTS)) {\n            pickContactEmail();\n        } else {\n            requestContactPermissionLauncher.launch(Manifest.permission.READ_CONTACTS);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled checkContactPermission from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: checkContactPermission\n\n        Method Code: private void checkContactPermission() {\n        if (PermissionUtil.checkSelfPermission(requireActivity(), Manifest.permission.READ_CONTACTS)) {\n            pickContactEmail();\n        } else {\n            requestContactPermissionLauncher.launch(Manifest.permission.READ_CONTACTS);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func checkContactPermission() {\n    if PermissionUtil.checkSelfPermission(requireActivity(), permission: .readContacts) {\n        pickContactEmail()\n    } else {\n        requestContactPermissionLauncher.launch(.readContacts)\n    }\n}\n```"
    },
    {
        "method_name": "pickContactEmail",
        "method_code": "private void pickContactEmail() {\n        Intent intent = new Intent(Intent.ACTION_PICK, ContactsContract.CommonDataKinds.Email.CONTENT_URI);\n\n        if (intent.resolveActivity(requireContext().getPackageManager()) != null) {\n            onContactSelectionResultLauncher.launch(intent);\n        } else {\n            DisplayUtils.showSnackMessage(requireActivity(), getString(R.string.file_detail_sharing_fragment_no_contact_app_message));\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled pickContactEmail from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: pickContactEmail\n\n        Method Code: private void pickContactEmail() {\n        Intent intent = new Intent(Intent.ACTION_PICK, ContactsContract.CommonDataKinds.Email.CONTENT_URI);\n\n        if (intent.resolveActivity(requireContext().getPackageManager()) != null) {\n            onContactSelectionResultLauncher.launch(intent);\n        } else {\n            DisplayUtils.showSnackMessage(requireActivity(), getString(R.string.file_detail_sharing_fragment_no_contact_app_message));\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func pickContactEmail() {\n    let intent = CNContactPickerViewController()\n    intent.delegate = self\n\n    if UIApplication.shared.canOpenURL(URL(string: \"mailto:\")!) {\n        present(intent, animated: true, completion: nil)\n    } else {\n        DisplayUtils.showSnackMessage(requireActivity(), getString(R.string.file_detail_sharing_fragment_no_contact_app_message))\n    }\n}\n```"
    },
    {
        "method_name": "handleContactResult",
        "method_code": "private void handleContactResult(@NonNull Uri contactUri) {\n        // Define the projection to get all email addresses.\n        String[] projection = {ContactsContract.CommonDataKinds.Email.ADDRESS};\n\n        Cursor cursor = fileActivity.getContentResolver().query(contactUri, projection, null, null, null);\n\n        if (cursor != null) {\n            if (cursor.moveToFirst()) {\n                // The contact has only one email address, use it.\n                int columnIndex = cursor.getColumnIndex(ContactsContract.CommonDataKinds.Email.ADDRESS);\n                if (columnIndex != -1) {\n                    // Use the email address as needed.\n                    // email variable contains the selected contact's email address.\n                    String email = cursor.getString(columnIndex);\n                    binding.searchView.post(() -> {\n                        binding.searchView.setQuery(email, false);\n                        binding.searchView.requestFocus();\n                    });\n                } else {\n                    DisplayUtils.showSnackMessage(binding.getRoot(), R.string.email_pick_failed);\n                    Log_OC.e(FileDetailSharingFragment.class.getSimpleName(), \"Failed to pick email address.\");\n                }\n            } else {\n                DisplayUtils.showSnackMessage(binding.getRoot(), R.string.email_pick_failed);\n                Log_OC.e(FileDetailSharingFragment.class.getSimpleName(), \"Failed to pick email address as no Email found.\");\n            }\n            cursor.close();\n        } else {\n            DisplayUtils.showSnackMessage(binding.getRoot(), R.string.email_pick_failed);\n            Log_OC.e(FileDetailSharingFragment.class.getSimpleName(), \"Failed to pick email address as Cursor is null.\");\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled handleContactResult from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: handleContactResult\n\n        Method Code: private void handleContactResult(@NonNull Uri contactUri) {\n        // Define the projection to get all email addresses.\n        String[] projection = {ContactsContract.CommonDataKinds.Email.ADDRESS};\n\n        Cursor cursor = fileActivity.getContentResolver().query(contactUri, projection, null, null, null);\n\n        if (cursor != null) {\n            if (cursor.moveToFirst()) {\n                // The contact has only one email address, use it.\n                int columnIndex = cursor.getColumnIndex(ContactsContract.CommonDataKinds.Email.ADDRESS);\n                if (columnIndex != -1) {\n                    // Use the email address as needed.\n                    // email variable contains the selected contact's email address.\n                    String email = cursor.getString(columnIndex);\n                    binding.searchView.post(() -> {\n                        binding.searchView.setQuery(email, false);\n                        binding.searchView.requestFocus();\n                    });\n                } else {\n                    DisplayUtils.showSnackMessage(binding.getRoot(), R.string.email_pick_failed);\n                    Log_OC.e(FileDetailSharingFragment.class.getSimpleName(), \"Failed to pick email address.\");\n                }\n            } else {\n                DisplayUtils.showSnackMessage(binding.getRoot(), R.string.email_pick_failed);\n                Log_OC.e(FileDetailSharingFragment.class.getSimpleName(), \"Failed to pick email address as no Email found.\");\n            }\n            cursor.close();\n        } else {\n            DisplayUtils.showSnackMessage(binding.getRoot(), R.string.email_pick_failed);\n            Log_OC.e(FileDetailSharingFragment.class.getSimpleName(), \"Failed to pick email address as Cursor is null.\");\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func handleContactResult(contactUri: URL) {\n    let projection = [CNContactEmailAddressesKey as NSString]\n    \n    let contactStore = CNContactStore()\n    let keysToFetch = [CNContactEmailAddressesKey as CNKeyDescriptor]\n    \n    do {\n        let contact = try contactStore.unifiedContact(withIdentifier: contactUri.absoluteString, keysToFetch: keysToFetch)\n        \n        if let email = contact.emailAddresses.first?.value as String? {\n            DispatchQueue.main.async {\n                self.binding.searchView.setQuery(email, submit: false)\n                self.binding.searchView.becomeFirstResponder()\n            }\n        } else {\n            DisplayUtils.showSnackMessage(view: self.binding.root, message: R.string.email_pick_failed)\n            Log_OC.e(FileDetailSharingFragment.self, \"Failed to pick email address.\")\n        }\n    } catch {\n        DisplayUtils.showSnackMessage(view: self.binding.root, message: R.string.email_pick_failed)\n        Log_OC.e(FileDetailSharingFragment.self, \"Failed to pick email address as no Email found.\")\n    }\n}\n```"
    },
    {
        "method_name": "containsNoNewPublicShare",
        "method_code": "private boolean containsNoNewPublicShare(List<OCShare> shares) {\n        for (OCShare share : shares) {\n            if (share.getShareType() == ShareType.NEW_PUBLIC_LINK) {\n                return false;\n            }\n        }\n\n        return true;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled containsNoNewPublicShare from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: containsNoNewPublicShare\n\n        Method Code: private boolean containsNoNewPublicShare(List<OCShare> shares) {\n        for (OCShare share : shares) {\n            if (share.getShareType() == ShareType.NEW_PUBLIC_LINK) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func containsNoNewPublicShare(shares: [OCShare]) -> Bool {\n    for share in shares {\n        if share.shareType == .newPublicLink {\n            return false\n        }\n    }\n    return true\n}\n```"
    },
    {
        "method_name": "onSaveInstanceState",
        "method_code": "@Override\n    public void onSaveInstanceState(@NonNull Bundle outState) {\n        super.onSaveInstanceState(outState);\n        FileExtensionsKt.logFileSize(file, TAG);\n        outState.putParcelable(ARG_FILE, file);\n        outState.putParcelable(ARG_USER, user);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onSaveInstanceState from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: onSaveInstanceState\n\n        Method Code: @Override\n    public void onSaveInstanceState(@NonNull Bundle outState) {\n        super.onSaveInstanceState(outState);\n        FileExtensionsKt.logFileSize(file, TAG);\n        outState.putParcelable(ARG_FILE, file);\n        outState.putParcelable(ARG_USER, user);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func encodeRestorableState(with coder: NSCoder) {\n    super.encodeRestorableState(with: coder)\n    logFileSize(file: file, tag: TAG)\n    coder.encode(file, forKey: ARG_FILE)\n    coder.encode(user, forKey: ARG_USER)\n}\n```"
    },
    {
        "method_name": "avatarGenerated",
        "method_code": "@Override\n    public void avatarGenerated(Drawable avatarDrawable, Object callContext) {\n        binding.sharedWithYouAvatar.setImageDrawable(avatarDrawable);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled avatarGenerated from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: avatarGenerated\n\n        Method Code: @Override\n    public void avatarGenerated(Drawable avatarDrawable, Object callContext) {\n        binding.sharedWithYouAvatar.setImageDrawable(avatarDrawable);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func avatarGenerated(avatarDrawable: Drawable, callContext: Any) {\n    binding.sharedWithYouAvatar.image = avatarDrawable\n}\n```"
    },
    {
        "method_name": "shouldCallGeneratedCallback",
        "method_code": "@Override\n    public boolean shouldCallGeneratedCallback(String tag, Object callContext) {\n        return false;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled shouldCallGeneratedCallback from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: shouldCallGeneratedCallback\n\n        Method Code: @Override\n    public boolean shouldCallGeneratedCallback(String tag, Object callContext) {\n        return false;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func shouldCallGeneratedCallback(tag: String, callContext: Any) -> Bool {\n    return false\n}\n```"
    },
    {
        "method_name": "isReshareForbidden",
        "method_code": "private boolean isReshareForbidden(OCShare share) {\n        return ShareType.FEDERATED == share.getShareType() ||\n            capabilities != null && capabilities.getFilesSharingResharing().isFalse();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled isReshareForbidden from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: isReshareForbidden\n\n        Method Code: private boolean isReshareForbidden(OCShare share) {\n        return ShareType.FEDERATED == share.getShareType() ||\n            capabilities != null && capabilities.getFilesSharingResharing().isFalse();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func isReshareForbidden(share: OCShare) -> Bool {\n    return share.getShareType() == .FEDERATED || (capabilities != nil && capabilities!.getFilesSharingResharing().isFalse())\n}\n```"
    },
    {
        "method_name": "search",
        "method_code": "@VisibleForTesting\n    public void search(String query) {\n        SearchView searchView = requireView().findViewById(R.id.searchView);\n        searchView.setQuery(query, true);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled search from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: search\n\n        Method Code: @VisibleForTesting\n    public void search(String query) {\n        SearchView searchView = requireView().findViewById(R.id.searchView);\n        searchView.setQuery(query, true);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc search(query: String) {\n    if let searchView = view?.viewWithTag(R.id.searchView) as? UISearchBar {\n        searchView.text = query\n        searchView.delegate?.searchBarSearchButtonClicked?(searchView)\n    }\n}\n```"
    },
    {
        "method_name": "advancedPermissions",
        "method_code": "@Override\n    public void advancedPermissions(OCShare share) {\n        modifyExistingShare(share, FileDetailsSharingProcessFragment.SCREEN_TYPE_PERMISSION);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled advancedPermissions from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: advancedPermissions\n\n        Method Code: @Override\n    public void advancedPermissions(OCShare share) {\n        modifyExistingShare(share, FileDetailsSharingProcessFragment.SCREEN_TYPE_PERMISSION);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func advancedPermissions(share: OCShare) {\n    modifyExistingShare(share, screenType: FileDetailsSharingProcessFragment.SCREEN_TYPE_PERMISSION)\n}\n```"
    },
    {
        "method_name": "sendNewEmail",
        "method_code": "@Override\n    public void sendNewEmail(OCShare share) {\n        modifyExistingShare(share, FileDetailsSharingProcessFragment.SCREEN_TYPE_NOTE);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled sendNewEmail from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: sendNewEmail\n\n        Method Code: @Override\n    public void sendNewEmail(OCShare share) {\n        modifyExistingShare(share, FileDetailsSharingProcessFragment.SCREEN_TYPE_NOTE);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func sendNewEmail(_ share: OCShare) {\n    modifyExistingShare(share, screenType: FileDetailsSharingProcessFragment.SCREEN_TYPE_NOTE)\n}\n```"
    },
    {
        "method_name": "unShare",
        "method_code": "@Override\n    public void unShare(OCShare share) {\n        unshareWith(share);\n        ShareeListAdapter adapter = (ShareeListAdapter) binding.sharesList.getAdapter();\n        if (adapter == null) {\n            DisplayUtils.showSnackMessage(getView(), getString(R.string.failed_update_ui));\n            return;\n        }\n        adapter.remove(share);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled unShare from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: unShare\n\n        Method Code: @Override\n    public void unShare(OCShare share) {\n        unshareWith(share);\n        ShareeListAdapter adapter = (ShareeListAdapter) binding.sharesList.getAdapter();\n        if (adapter == null) {\n            DisplayUtils.showSnackMessage(getView(), getString(R.string.failed_update_ui));\n            return;\n        }\n        adapter.remove(share);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func unShare(_ share: OCShare) {\n    unshareWith(share)\n    guard let adapter = binding.sharesList.adapter as? ShareeListAdapter else {\n        DisplayUtils.showSnackMessage(view, getString(R.string.failed_update_ui))\n        return\n    }\n    adapter.remove(share)\n}\n```"
    },
    {
        "method_name": "sendLink",
        "method_code": "@Override\n    public void sendLink(OCShare share) {\n        if (file.isSharedViaLink() && !TextUtils.isEmpty(share.getShareLink())) {\n            FileDisplayActivity.showShareLinkDialog(fileActivity, file, share.getShareLink());\n        } else {\n            showSendLinkTo(share);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled sendLink from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: sendLink\n\n        Method Code: @Override\n    public void sendLink(OCShare share) {\n        if (file.isSharedViaLink() && !TextUtils.isEmpty(share.getShareLink())) {\n            FileDisplayActivity.showShareLinkDialog(fileActivity, file, share.getShareLink());\n        } else {\n            showSendLinkTo(share);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func sendLink(_ share: OCShare) {\n    if file.isSharedViaLink() && !share.shareLink.isEmpty {\n        FileDisplayActivity.showShareLinkDialog(fileActivity, file: file, shareLink: share.shareLink)\n    } else {\n        showSendLinkTo(share)\n    }\n}\n```"
    },
    {
        "method_name": "addAnotherLink",
        "method_code": "@Override\n    public void addAnotherLink(OCShare share) {\n        createPublicShareLink();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled addAnotherLink from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: addAnotherLink\n\n        Method Code: @Override\n    public void addAnotherLink(OCShare share) {\n        createPublicShareLink();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func addAnotherLink(share: OCShare) {\n    createPublicShareLink()\n}\n```"
    },
    {
        "method_name": "modifyExistingShare",
        "method_code": "private void modifyExistingShare(OCShare share, int screenTypePermission) {\n        onEditShareListener.editExistingShare(share, screenTypePermission, !isReshareForbidden(share),\n                                              capabilities.getVersion().isNewerOrEqual(OwnCloudVersion.nextcloud_18));\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled modifyExistingShare from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: modifyExistingShare\n\n        Method Code: private void modifyExistingShare(OCShare share, int screenTypePermission) {\n        onEditShareListener.editExistingShare(share, screenTypePermission, !isReshareForbidden(share),\n                                              capabilities.getVersion().isNewerOrEqual(OwnCloudVersion.nextcloud_18));\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func modifyExistingShare(share: OCShare, screenTypePermission: Int) {\n    onEditShareListener.editExistingShare(share: share, screenTypePermission: screenTypePermission, !isReshareForbidden(share: share), capabilities.getVersion().isNewerOrEqual(OwnCloudVersion.nextcloud_18))\n}\n```"
    },
    {
        "method_name": "onQuickPermissionChanged",
        "method_code": "@Override\n    public void onQuickPermissionChanged(OCShare share, int permission) {\n        fileOperationsHelper.setPermissionsToShare(share, permission);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onQuickPermissionChanged from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: onQuickPermissionChanged\n\n        Method Code: @Override\n    public void onQuickPermissionChanged(OCShare share, int permission) {\n        fileOperationsHelper.setPermissionsToShare(share, permission);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onQuickPermissionChanged(share: OCShare, permission: Int) {\n    fileOperationsHelper.setPermissionsToShare(share, permission: permission)\n}\n```"
    },
    {
        "method_name": "editExistingShare",
        "method_code": "void editExistingShare(OCShare share, int screenTypePermission, boolean isReshareShown,\n                               boolean isExpiryDateShown);",
        "prompt": "\n        Please translate the following Java (Android) method titled editExistingShare from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: editExistingShare\n\n        Method Code: void editExistingShare(OCShare share, int screenTypePermission, boolean isReshareShown,\n                               boolean isExpiryDateShown);\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc editExistingShare(share: OCShare, screenTypePermission: Int, isReshareShown: Bool, isExpiryDateShown: Bool) {\n    // Method implementation goes here\n}\n```"
    },
    {
        "method_name": "onShareProcessClosed",
        "method_code": "void onShareProcessClosed();",
        "prompt": "\n        Please translate the following Java (Android) method titled onShareProcessClosed from FileDetailSharingFragment.java into Swift.\n\n        Input:\n\n        Method Name: onShareProcessClosed\n\n        Method Code: void onShareProcessClosed();\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onShareProcessClosed() {\n    // Implementation goes here\n}\n```"
    }
]