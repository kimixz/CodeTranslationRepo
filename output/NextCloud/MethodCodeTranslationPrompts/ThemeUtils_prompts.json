[
    {
        "method_name": "themingEnabled",
        "method_code": "public boolean themingEnabled(Context context) {\n        OCCapability capability = CapabilityUtils.getCapability(context);\n\n        return capability.getServerColor() != null\n            && !capability.getServerColor().isEmpty();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled themingEnabled from ThemeUtils.java into Swift.\n\n        Input:\n\n        Method Name: themingEnabled\n\n        Method Code: public boolean themingEnabled(Context context) {\n        OCCapability capability = CapabilityUtils.getCapability(context);\n\n        return capability.getServerColor() != null\n            && !capability.getServerColor().isEmpty();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc themingEnabled(context: Context) -> Bool {\n    let capability = CapabilityUtils.getCapability(context: context)\n    return capability.getServerColor() != nil && !capability.getServerColor()!.isEmpty\n}\n```"
    },
    {
        "method_name": "getDefaultDisplayNameForRootFolder",
        "method_code": "public String getDefaultDisplayNameForRootFolder(Context context) {\n        OCCapability capability = CapabilityUtils.getCapability(context);\n\n        if (MainApp.isOnlyOnDevice()) {\n            return MainApp.string(R.string.drawer_item_on_device);\n        } else {\n            if (capability.getServerName() == null || capability.getServerName().isEmpty()) {\n                return MainApp.getAppContext().getResources().getString(R.string.default_display_name_for_root_folder);\n            } else {\n                return capability.getServerName();\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getDefaultDisplayNameForRootFolder from ThemeUtils.java into Swift.\n\n        Input:\n\n        Method Name: getDefaultDisplayNameForRootFolder\n\n        Method Code: public String getDefaultDisplayNameForRootFolder(Context context) {\n        OCCapability capability = CapabilityUtils.getCapability(context);\n\n        if (MainApp.isOnlyOnDevice()) {\n            return MainApp.string(R.string.drawer_item_on_device);\n        } else {\n            if (capability.getServerName() == null || capability.getServerName().isEmpty()) {\n                return MainApp.getAppContext().getResources().getString(R.string.default_display_name_for_root_folder);\n            } else {\n                return capability.getServerName();\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getDefaultDisplayNameForRootFolder(context: Context) -> String {\n    let capability = CapabilityUtils.getCapability(context: context)\n\n    if MainApp.isOnlyOnDevice() {\n        return MainApp.string(R.string.drawer_item_on_device)\n    } else {\n        if capability.getServerName() == nil || capability.getServerName().isEmpty {\n            return MainApp.getAppContext().resources.getString(R.string.default_display_name_for_root_folder)\n        } else {\n            return capability.getServerName()!\n        }\n    }\n}\n```"
    }
]