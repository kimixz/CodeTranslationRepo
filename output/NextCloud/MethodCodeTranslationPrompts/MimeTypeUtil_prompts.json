[
    {
        "method_name": "getFileTypeIcon",
        "method_code": "ublic static Drawable getFileTypeIcon(String mimetype,\n                                           String filename,\n                                           Context context,\n                                           ViewThemeUtils viewThemeUtils) {\n        if (context != null) {\n            int iconId = MimeTypeUtil.getFileTypeIconId(mimetype, filename);\n            Drawable icon = ContextCompat.getDrawable(context, iconId);\n            if (icon == null) {\n                return null;\n            }\n\n            if (R.drawable.file_zip == iconId) {\n                viewThemeUtils.platform.tintDrawable(context, icon, ColorRole.PRIMARY);\n            }\n\n            return icon;\n        } else {\n            return null;\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getFileTypeIcon from MimeTypeUtil.java into Swift.\n\n        Input:\n\n        Method Name: getFileTypeIcon\n\n        Method Code: ublic static Drawable getFileTypeIcon(String mimetype,\n                                           String filename,\n                                           Context context,\n                                           ViewThemeUtils viewThemeUtils) {\n        if (context != null) {\n            int iconId = MimeTypeUtil.getFileTypeIconId(mimetype, filename);\n            Drawable icon = ContextCompat.getDrawable(context, iconId);\n            if (icon == null) {\n                return null;\n            }\n\n            if (R.drawable.file_zip == iconId) {\n                viewThemeUtils.platform.tintDrawable(context, icon, ColorRole.PRIMARY);\n            }\n\n            return icon;\n        } else {\n            return null;\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport UIKit\n\nfunc getFileTypeIcon(mimetype: String, filename: String, context: UIViewController?, viewThemeUtils: ViewThemeUtils) -> UIImage? {\n    guard let context = context else {\n        return nil\n    }\n    \n    let iconId = MimeTypeUtil.getFileTypeIconId(mimetype: mimetype, filename: filename)\n    let icon = UIImage(named: iconId)\n    \n    if icon == nil {\n        return nil\n    }\n    \n    if iconId == \"file_zip\" {\n        viewThemeUtils.platform.tintDrawable(context: context, icon: icon!, colorRole: .primary)\n    }\n    \n    return icon\n}\n```"
    },
    {
        "method_name": "getIcon",
        "method_code": "ublic static Drawable getIcon(String localPath, Context context, ViewThemeUtils viewThemeUtils) {\n        if (context == null) return null;\n\n        String mimeType = getMimeTypeFromPath(localPath);\n        List<String> possibleMimeTypes = Collections.singletonList(mimeType);\n        int iconId = determineIconIdByMimeTypeList(possibleMimeTypes);\n\n        Drawable result = ContextCompat.getDrawable(context, iconId);\n        if (result == null) return null;\n\n        if (R.drawable.file_zip == iconId) {\n            viewThemeUtils.platform.tintDrawable(context, result, ColorRole.PRIMARY);\n        }\n\n        return result;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getIcon from MimeTypeUtil.java into Swift.\n\n        Input:\n\n        Method Name: getIcon\n\n        Method Code: ublic static Drawable getIcon(String localPath, Context context, ViewThemeUtils viewThemeUtils) {\n        if (context == null) return null;\n\n        String mimeType = getMimeTypeFromPath(localPath);\n        List<String> possibleMimeTypes = Collections.singletonList(mimeType);\n        int iconId = determineIconIdByMimeTypeList(possibleMimeTypes);\n\n        Drawable result = ContextCompat.getDrawable(context, iconId);\n        if (result == null) return null;\n\n        if (R.drawable.file_zip == iconId) {\n            viewThemeUtils.platform.tintDrawable(context, result, ColorRole.PRIMARY);\n        }\n\n        return result;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport UIKit\n\nfunc getIcon(localPath: String, context: UIViewController?, viewThemeUtils: ViewThemeUtils) -> UIImage? {\n    guard let context = context else { return nil }\n\n    let mimeType = getMimeTypeFromPath(localPath: localPath)\n    let possibleMimeTypes = [mimeType]\n    let iconId = determineIconIdByMimeTypeList(possibleMimeTypes: possibleMimeTypes)\n\n    guard let result = UIImage(named: iconId) else { return nil }\n\n    if iconId == R.drawable.file_zip {\n        viewThemeUtils.platform.tintDrawable(context: context, drawable: result, colorRole: .primary)\n    }\n\n    return result\n}\n```"
    },
    {
        "method_name": "getFileTypeIconId",
        "method_code": "ublic static int getFileTypeIconId(String mimetype, String filename) {\n        List<String> possibleMimeTypes;\n        if (mimetype == null) {\n            possibleMimeTypes = determineMimeTypesByFilename(filename);\n        } else {\n            possibleMimeTypes = Collections.singletonList(mimetype);\n        }\n\n        return determineIconIdByMimeTypeList(possibleMimeTypes);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getFileTypeIconId from MimeTypeUtil.java into Swift.\n\n        Input:\n\n        Method Name: getFileTypeIconId\n\n        Method Code: ublic static int getFileTypeIconId(String mimetype, String filename) {\n        List<String> possibleMimeTypes;\n        if (mimetype == null) {\n            possibleMimeTypes = determineMimeTypesByFilename(filename);\n        } else {\n            possibleMimeTypes = Collections.singletonList(mimetype);\n        }\n\n        return determineIconIdByMimeTypeList(possibleMimeTypes);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getFileTypeIconId(mimetype: String?, filename: String) -> Int {\n    let possibleMimeTypes: [String]\n    if let mimetype = mimetype {\n        possibleMimeTypes = [mimetype]\n    } else {\n        possibleMimeTypes = determineMimeTypesByFilename(filename: filename)\n    }\n    \n    return determineIconIdByMimeTypeList(possibleMimeTypes: possibleMimeTypes)\n}\n```"
    },
    {
        "method_name": "getOCFileIcon",
        "method_code": "ublic static Drawable getOCFileIcon(OCFile file, Context context, ViewThemeUtils viewThemeUtils, boolean isAutoUpload, boolean isDarkModeActive) {\n        if (file.isFolder()) {\n            Integer overlayIconId = file.getFileOverlayIconId(isAutoUpload);\n            return MimeTypeUtil.getFolderIcon(isDarkModeActive, overlayIconId, context, viewThemeUtils);\n        }\n\n        if (!(MimeTypeUtil.isImage(file) || MimeTypeUtil.isVideo(file)) || file.getRemoteId() == null) {\n            return MimeTypeUtil.getFileTypeIcon(file.getMimeType(), file.getFileName(), context, viewThemeUtils);\n        }\n\n        Bitmap thumbnail = ThumbnailsCacheManager.getBitmapFromDiskCache(ThumbnailsCacheManager.PREFIX_THUMBNAIL + file.getRemoteId());\n        if (thumbnail == null || file.isUpdateThumbnailNeeded()) {\n            return MimeTypeUtil.getFileTypeIcon(file.getMimeType(), file.getFileName(), context, viewThemeUtils);\n        }\n\n        Drawable background = new BitmapDrawable(context.getResources(), thumbnail);\n        if (!MimeTypeUtil.isVideo(file)) {\n            return background;\n        }\n\n        Drawable videoOverlay = ContextCompat.getDrawable(context, R.drawable.video_white);\n        if (videoOverlay == null) {\n            return background;\n        }\n\n        return DrawableUtil.INSTANCE.addDrawableAsOverlay(background, videoOverlay);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getOCFileIcon from MimeTypeUtil.java into Swift.\n\n        Input:\n\n        Method Name: getOCFileIcon\n\n        Method Code: ublic static Drawable getOCFileIcon(OCFile file, Context context, ViewThemeUtils viewThemeUtils, boolean isAutoUpload, boolean isDarkModeActive) {\n        if (file.isFolder()) {\n            Integer overlayIconId = file.getFileOverlayIconId(isAutoUpload);\n            return MimeTypeUtil.getFolderIcon(isDarkModeActive, overlayIconId, context, viewThemeUtils);\n        }\n\n        if (!(MimeTypeUtil.isImage(file) || MimeTypeUtil.isVideo(file)) || file.getRemoteId() == null) {\n            return MimeTypeUtil.getFileTypeIcon(file.getMimeType(), file.getFileName(), context, viewThemeUtils);\n        }\n\n        Bitmap thumbnail = ThumbnailsCacheManager.getBitmapFromDiskCache(ThumbnailsCacheManager.PREFIX_THUMBNAIL + file.getRemoteId());\n        if (thumbnail == null || file.isUpdateThumbnailNeeded()) {\n            return MimeTypeUtil.getFileTypeIcon(file.getMimeType(), file.getFileName(), context, viewThemeUtils);\n        }\n\n        Drawable background = new BitmapDrawable(context.getResources(), thumbnail);\n        if (!MimeTypeUtil.isVideo(file)) {\n            return background;\n        }\n\n        Drawable videoOverlay = ContextCompat.getDrawable(context, R.drawable.video_white);\n        if (videoOverlay == null) {\n            return background;\n        }\n\n        return DrawableUtil.INSTANCE.addDrawableAsOverlay(background, videoOverlay);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport UIKit\n\nfunc getOCFileIcon(file: OCFile, context: Context, viewThemeUtils: ViewThemeUtils, isAutoUpload: Bool, isDarkModeActive: Bool) -> UIImage? {\n    if file.isFolder() {\n        let overlayIconId = file.getFileOverlayIconId(isAutoUpload: isAutoUpload)\n        return MimeTypeUtil.getFolderIcon(isDarkModeActive: isDarkModeActive, overlayIconId: overlayIconId, context: context, viewThemeUtils: viewThemeUtils)\n    }\n\n    if !(MimeTypeUtil.isImage(file: file) || MimeTypeUtil.isVideo(file: file)) || file.getRemoteId() == nil {\n        return MimeTypeUtil.getFileTypeIcon(mimeType: file.getMimeType(), fileName: file.getFileName(), context: context, viewThemeUtils: viewThemeUtils)\n    }\n\n    let thumbnail = ThumbnailsCacheManager.getBitmapFromDiskCache(key: ThumbnailsCacheManager.PREFIX_THUMBNAIL + file.getRemoteId()!)\n    if thumbnail == nil || file.isUpdateThumbnailNeeded() {\n        return MimeTypeUtil.getFileTypeIcon(mimeType: file.getMimeType(), fileName: file.getFileName(), context: context, viewThemeUtils: viewThemeUtils)\n    }\n\n    let background = UIImage(cgImage: thumbnail!.cgImage!)\n    if !MimeTypeUtil.isVideo(file: file) {\n        return background\n    }\n\n    guard let videoOverlay = UIImage(named: \"video_white\") else {\n        return background\n    }\n\n    return DrawableUtil.shared.addDrawableAsOverlay(background: background, overlay: videoOverlay)\n}\n```"
    },
    {
        "method_name": "getDefaultFolderIcon",
        "method_code": "ublic static Drawable getDefaultFolderIcon(Context context, ViewThemeUtils viewThemeUtils) {\n        Drawable drawable = ContextCompat.getDrawable(context, R.drawable.folder);\n        assert(drawable != null);\n\n        viewThemeUtils.platform.tintDrawable(context, drawable, ColorRole.PRIMARY);\n        return drawable;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getDefaultFolderIcon from MimeTypeUtil.java into Swift.\n\n        Input:\n\n        Method Name: getDefaultFolderIcon\n\n        Method Code: ublic static Drawable getDefaultFolderIcon(Context context, ViewThemeUtils viewThemeUtils) {\n        Drawable drawable = ContextCompat.getDrawable(context, R.drawable.folder);\n        assert(drawable != null);\n\n        viewThemeUtils.platform.tintDrawable(context, drawable, ColorRole.PRIMARY);\n        return drawable;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getDefaultFolderIcon(context: Context, viewThemeUtils: ViewThemeUtils) -> Drawable? {\n    guard let drawable = ContextCompat.getDrawable(context, R.drawable.folder) else {\n        return nil\n    }\n    \n    viewThemeUtils.platform.tintDrawable(context, drawable, ColorRole.PRIMARY)\n    return drawable\n}\n```"
    },
    {
        "method_name": "getFolderIcon",
        "method_code": "ublic static LayerDrawable getFolderIcon(boolean isDarkModeActive, Integer overlayIconId, Context context, ViewThemeUtils viewThemeUtils) {\n        Drawable folderDrawable = getDefaultFolderIcon(context, viewThemeUtils);\n        assert(folderDrawable != null);\n\n        LayerDrawable folderLayerDrawable = new LayerDrawable(new Drawable[] { folderDrawable } );\n\n        if (overlayIconId == null) {\n            return folderLayerDrawable;\n        }\n\n        Drawable overlayDrawable = ContextCompat.getDrawable(context, overlayIconId);\n        assert(overlayDrawable != null);\n\n        if (isDarkModeActive) {\n            overlayDrawable = DrawableUtil.INSTANCE.changeColor(overlayDrawable, R.color.dark);\n        }\n\n        return DrawableUtil.INSTANCE.addDrawableAsOverlay(folderDrawable, overlayDrawable);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getFolderIcon from MimeTypeUtil.java into Swift.\n\n        Input:\n\n        Method Name: getFolderIcon\n\n        Method Code: ublic static LayerDrawable getFolderIcon(boolean isDarkModeActive, Integer overlayIconId, Context context, ViewThemeUtils viewThemeUtils) {\n        Drawable folderDrawable = getDefaultFolderIcon(context, viewThemeUtils);\n        assert(folderDrawable != null);\n\n        LayerDrawable folderLayerDrawable = new LayerDrawable(new Drawable[] { folderDrawable } );\n\n        if (overlayIconId == null) {\n            return folderLayerDrawable;\n        }\n\n        Drawable overlayDrawable = ContextCompat.getDrawable(context, overlayIconId);\n        assert(overlayDrawable != null);\n\n        if (isDarkModeActive) {\n            overlayDrawable = DrawableUtil.INSTANCE.changeColor(overlayDrawable, R.color.dark);\n        }\n\n        return DrawableUtil.INSTANCE.addDrawableAsOverlay(folderDrawable, overlayDrawable);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport UIKit\n\nfunc getFolderIcon(isDarkModeActive: Bool, overlayIconId: Int?, context: UIViewController, viewThemeUtils: ViewThemeUtils) -> CALayer? {\n    guard let folderDrawable = getDefaultFolderIcon(context: context, viewThemeUtils: viewThemeUtils) else {\n        return nil\n    }\n\n    let folderLayer = CALayer()\n    folderLayer.contents = folderDrawable.cgImage\n\n    guard let overlayIconId = overlayIconId else {\n        return folderLayer\n    }\n\n    guard let overlayDrawable = UIImage(named: \"\\(overlayIconId)\") else {\n        return nil\n    }\n\n    var overlayImage = overlayDrawable\n    if isDarkModeActive {\n        overlayImage = DrawableUtil.shared.changeColor(image: overlayDrawable, color: UIColor(named: \"dark\")!)\n    }\n\n    return DrawableUtil.shared.addDrawableAsOverlay(baseImage: folderDrawable, overlayImage: overlayImage)\n}\n```"
    },
    {
        "method_name": "getBestMimeTypeByFilename",
        "method_code": "ublic static String getBestMimeTypeByFilename(String filename) {\n        return getMimeTypeFromCandidates(determineMimeTypesByFilename(filename));\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getBestMimeTypeByFilename from MimeTypeUtil.java into Swift.\n\n        Input:\n\n        Method Name: getBestMimeTypeByFilename\n\n        Method Code: ublic static String getBestMimeTypeByFilename(String filename) {\n        return getMimeTypeFromCandidates(determineMimeTypesByFilename(filename));\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func getBestMimeTypeByFilename(_ filename: String) -> String {\n    return getMimeTypeFromCandidates(determineMimeTypesByFilename(filename))\n}\n```"
    },
    {
        "method_name": "getMimeTypeFromCandidates",
        "method_code": "rivate static String getMimeTypeFromCandidates(List<String> candidates) {\n        if (candidates == null || candidates.size() < 1) {\n            return \"application/octet-stream\";\n        }\n        return candidates.get(0);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getMimeTypeFromCandidates from MimeTypeUtil.java into Swift.\n\n        Input:\n\n        Method Name: getMimeTypeFromCandidates\n\n        Method Code: rivate static String getMimeTypeFromCandidates(List<String> candidates) {\n        if (candidates == null || candidates.size() < 1) {\n            return \"application/octet-stream\";\n        }\n        return candidates.get(0);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate static func getMimeTypeFromCandidates(_ candidates: [String]?) -> String {\n    if candidates == nil || candidates!.isEmpty {\n        return \"application/octet-stream\"\n    }\n    return candidates![0]\n}\n```"
    },
    {
        "method_name": "isMedia",
        "method_code": "ublic static boolean isMedia(String mimeType) {\n        return isImage(mimeType) || isVideo(mimeType) || isAudio(mimeType);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isMedia from MimeTypeUtil.java into Swift.\n\n        Input:\n\n        Method Name: isMedia\n\n        Method Code: ublic static boolean isMedia(String mimeType) {\n        return isImage(mimeType) || isVideo(mimeType) || isAudio(mimeType);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc isMedia(mimeType: String) -> Bool {\n    return isImage(mimeType: mimeType) || isVideo(mimeType: mimeType) || isAudio(mimeType: mimeType)\n}\n```"
    },
    {
        "method_name": "isImageOrVideo",
        "method_code": "ublic static boolean isImageOrVideo(String mimeType) {\n        return isImage(mimeType) || isVideo(mimeType);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isImageOrVideo from MimeTypeUtil.java into Swift.\n\n        Input:\n\n        Method Name: isImageOrVideo\n\n        Method Code: ublic static boolean isImageOrVideo(String mimeType) {\n        return isImage(mimeType) || isVideo(mimeType);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc isImageOrVideo(mimeType: String) -> Bool {\n    return isImage(mimeType: mimeType) || isVideo(mimeType: mimeType)\n}\n```"
    },
    {
        "method_name": "isImageOrVideo",
        "method_code": "ublic static boolean isImageOrVideo(File file) {\n        return isImage(file) || isVideo(file);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isImageOrVideo from MimeTypeUtil.java into Swift.\n\n        Input:\n\n        Method Name: isImageOrVideo\n\n        Method Code: ublic static boolean isImageOrVideo(File file) {\n        return isImage(file) || isVideo(file);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc isImageOrVideo(file: File) -> Bool {\n    return isImage(file: file) || isVideo(file: file)\n}\n```"
    },
    {
        "method_name": "isImageOrVideo",
        "method_code": "ublic static boolean isImageOrVideo(ServerFileInterface file) {\n        return isImage(file) || isVideo(file);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isImageOrVideo from MimeTypeUtil.java into Swift.\n\n        Input:\n\n        Method Name: isImageOrVideo\n\n        Method Code: ublic static boolean isImageOrVideo(ServerFileInterface file) {\n        return isImage(file) || isVideo(file);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc isImageOrVideo(file: ServerFileInterface) -> Bool {\n    return isImage(file: file) || isVideo(file: file)\n}\n```"
    },
    {
        "method_name": "isImage",
        "method_code": "ublic static boolean isImage(String mimeType) {\n        return mimeType != null && mimeType.toLowerCase(Locale.ROOT).startsWith(\"image/\") &&\n            !mimeType.toLowerCase(Locale.ROOT).contains(\"djvu\");\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isImage from MimeTypeUtil.java into Swift.\n\n        Input:\n\n        Method Name: isImage\n\n        Method Code: ublic static boolean isImage(String mimeType) {\n        return mimeType != null && mimeType.toLowerCase(Locale.ROOT).startsWith(\"image/\") &&\n            !mimeType.toLowerCase(Locale.ROOT).contains(\"djvu\");\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc isImage(mimeType: String?) -> Bool {\n    guard let mimeType = mimeType else { return false }\n    return mimeType.lowercased().hasPrefix(\"image/\") && !mimeType.lowercased().contains(\"djvu\")\n}\n```"
    },
    {
        "method_name": "isVideo",
        "method_code": "ublic static boolean isVideo(String mimeType) {\n        return mimeType != null && mimeType.toLowerCase(Locale.ROOT).startsWith(\"video/\");\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isVideo from MimeTypeUtil.java into Swift.\n\n        Input:\n\n        Method Name: isVideo\n\n        Method Code: ublic static boolean isVideo(String mimeType) {\n        return mimeType != null && mimeType.toLowerCase(Locale.ROOT).startsWith(\"video/\");\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc isVideo(mimeType: String?) -> Bool {\n    return mimeType?.lowercased().hasPrefix(\"video/\") ?? false\n}\n```"
    },
    {
        "method_name": "isAudio",
        "method_code": "ublic static boolean isAudio(String mimeType) {\n        return mimeType != null && mimeType.toLowerCase(Locale.ROOT).startsWith(\"audio/\");\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isAudio from MimeTypeUtil.java into Swift.\n\n        Input:\n\n        Method Name: isAudio\n\n        Method Code: ublic static boolean isAudio(String mimeType) {\n        return mimeType != null && mimeType.toLowerCase(Locale.ROOT).startsWith(\"audio/\");\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc isAudio(mimeType: String?) -> Bool {\n    return mimeType?.lowercased().hasPrefix(\"audio/\") ?? false\n}\n```"
    },
    {
        "method_name": "isText",
        "method_code": "rivate static boolean isText(String mimeType) {\n        return mimeType != null && mimeType.toLowerCase(Locale.ROOT).startsWith(\"text/\");\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isText from MimeTypeUtil.java into Swift.\n\n        Input:\n\n        Method Name: isText\n\n        Method Code: rivate static boolean isText(String mimeType) {\n        return mimeType != null && mimeType.toLowerCase(Locale.ROOT).startsWith(\"text/\");\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate static func isText(mimeType: String?) -> Bool {\n    return mimeType?.lowercased().hasPrefix(\"text/\") ?? false\n}\n```"
    },
    {
        "method_name": "isVCard",
        "method_code": "ublic static boolean isVCard(String mimeType) {\n        return \"text/vcard\".equalsIgnoreCase(mimeType);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isVCard from MimeTypeUtil.java into Swift.\n\n        Input:\n\n        Method Name: isVCard\n\n        Method Code: ublic static boolean isVCard(String mimeType) {\n        return \"text/vcard\".equalsIgnoreCase(mimeType);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc isVCard(mimeType: String) -> Bool {\n    return mimeType.caseInsensitiveCompare(\"text/vcard\") == .orderedSame\n}\n```"
    },
    {
        "method_name": "isVideo",
        "method_code": "ublic static boolean isVideo(File file) {\n        return isVideo(extractMimeType(file));\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isVideo from MimeTypeUtil.java into Swift.\n\n        Input:\n\n        Method Name: isVideo\n\n        Method Code: ublic static boolean isVideo(File file) {\n        return isVideo(extractMimeType(file));\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func isVideo(file: File) -> Bool {\n    return isVideo(extractMimeType(file: file))\n}\n```"
    },
    {
        "method_name": "isImage",
        "method_code": "ublic static boolean isImage(File file) {\n        return isImage(extractMimeType(file));\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isImage from MimeTypeUtil.java into Swift.\n\n        Input:\n\n        Method Name: isImage\n\n        Method Code: ublic static boolean isImage(File file) {\n        return isImage(extractMimeType(file));\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func isImage(file: File) -> Bool {\n    return isImage(extractMimeType(file: file))\n}\n```"
    },
    {
        "method_name": "isSVG",
        "method_code": "ublic static boolean isSVG(OCFile file) {\n        return \"image/svg+xml\".equalsIgnoreCase(file.getMimeType());\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isSVG from MimeTypeUtil.java into Swift.\n\n        Input:\n\n        Method Name: isSVG\n\n        Method Code: ublic static boolean isSVG(OCFile file) {\n        return \"image/svg+xml\".equalsIgnoreCase(file.getMimeType());\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\npublic static func isSVG(file: OCFile) -> Bool {\n    return file.getMimeType().caseInsensitiveCompare(\"image/svg+xml\") == .orderedSame\n}\n```"
    },
    {
        "method_name": "isAudio",
        "method_code": "ublic static boolean isAudio(OCFile file) {\n        return MimeTypeUtil.isAudio(file.getMimeType());\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isAudio from MimeTypeUtil.java into Swift.\n\n        Input:\n\n        Method Name: isAudio\n\n        Method Code: ublic static boolean isAudio(OCFile file) {\n        return MimeTypeUtil.isAudio(file.getMimeType());\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func isAudio(file: OCFile) -> Bool {\n    return MimeTypeUtil.isAudio(file.getMimeType())\n}\n```"
    },
    {
        "method_name": "isVideo",
        "method_code": "ublic static boolean isVideo(ServerFileInterface file) {\n        return MimeTypeUtil.isVideo(file.getMimeType());\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isVideo from MimeTypeUtil.java into Swift.\n\n        Input:\n\n        Method Name: isVideo\n\n        Method Code: ublic static boolean isVideo(ServerFileInterface file) {\n        return MimeTypeUtil.isVideo(file.getMimeType());\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func isVideo(file: ServerFileInterface) -> Bool {\n    return MimeTypeUtil.isVideo(file.getMimeType())\n}\n```"
    },
    {
        "method_name": "isImage",
        "method_code": "ublic static boolean isImage(ServerFileInterface file) {\n        return MimeTypeUtil.isImage(file.getMimeType())\n            || MimeTypeUtil.isImage(getMimeTypeFromPath(file.getRemotePath()));\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isImage from MimeTypeUtil.java into Swift.\n\n        Input:\n\n        Method Name: isImage\n\n        Method Code: ublic static boolean isImage(ServerFileInterface file) {\n        return MimeTypeUtil.isImage(file.getMimeType())\n            || MimeTypeUtil.isImage(getMimeTypeFromPath(file.getRemotePath()));\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\npublic static func isImage(file: ServerFileInterface) -> Bool {\n    return MimeTypeUtil.isImage(file.getMimeType()) || MimeTypeUtil.isImage(getMimeTypeFromPath(file.getRemotePath()))\n}\n```"
    },
    {
        "method_name": "isText",
        "method_code": "ublic static boolean isText(OCFile file) {\n        return MimeTypeUtil.isText(file.getMimeType())\n            || MimeTypeUtil.isText(getMimeTypeFromPath(file.getRemotePath()));\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isText from MimeTypeUtil.java into Swift.\n\n        Input:\n\n        Method Name: isText\n\n        Method Code: ublic static boolean isText(OCFile file) {\n        return MimeTypeUtil.isText(file.getMimeType())\n            || MimeTypeUtil.isText(getMimeTypeFromPath(file.getRemotePath()));\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\npublic static func isText(file: OCFile) -> Bool {\n    return MimeTypeUtil.isText(file.getMimeType()) || MimeTypeUtil.isText(getMimeTypeFromPath(file.getRemotePath()))\n}\n```"
    },
    {
        "method_name": "isVCard",
        "method_code": "ublic static boolean isVCard(OCFile file) {\n        return isVCard(file.getMimeType()) || isVCard(getMimeTypeFromPath(file.getRemotePath()));\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isVCard from MimeTypeUtil.java into Swift.\n\n        Input:\n\n        Method Name: isVCard\n\n        Method Code: ublic static boolean isVCard(OCFile file) {\n        return isVCard(file.getMimeType()) || isVCard(getMimeTypeFromPath(file.getRemotePath()));\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func isVCard(file: OCFile) -> Bool {\n    return isVCard(mimeType: file.getMimeType()) || isVCard(mimeType: getMimeTypeFromPath(path: file.getRemotePath()))\n}\n```"
    },
    {
        "method_name": "isCalendar",
        "method_code": "ublic static boolean isCalendar(OCFile file) {\n        return isCalendar(file.getMimeType()) || isCalendar(getMimeTypeFromPath(file.getRemotePath()));\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isCalendar from MimeTypeUtil.java into Swift.\n\n        Input:\n\n        Method Name: isCalendar\n\n        Method Code: ublic static boolean isCalendar(OCFile file) {\n        return isCalendar(file.getMimeType()) || isCalendar(getMimeTypeFromPath(file.getRemotePath()));\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\npublic static func isCalendar(file: OCFile) -> Bool {\n    return isCalendar(file.getMimeType()) || isCalendar(getMimeTypeFromPath(file.getRemotePath()))\n}\n```"
    },
    {
        "method_name": "isCalendar",
        "method_code": "ublic static boolean isCalendar(String mimeType) {\n        return \"text/calendar\".equalsIgnoreCase(mimeType);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isCalendar from MimeTypeUtil.java into Swift.\n\n        Input:\n\n        Method Name: isCalendar\n\n        Method Code: ublic static boolean isCalendar(String mimeType) {\n        return \"text/calendar\".equalsIgnoreCase(mimeType);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc isCalendar(mimeType: String) -> Bool {\n    return mimeType.caseInsensitiveCompare(\"text/calendar\") == .orderedSame\n}\n```"
    },
    {
        "method_name": "isFolder",
        "method_code": "ublic static boolean isFolder(String mimeType) {\n        return MimeType.DIRECTORY.equalsIgnoreCase(mimeType);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isFolder from MimeTypeUtil.java into Swift.\n\n        Input:\n\n        Method Name: isFolder\n\n        Method Code: ublic static boolean isFolder(String mimeType) {\n        return MimeType.DIRECTORY.equalsIgnoreCase(mimeType);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func isFolder(mimeType: String) -> Bool {\n    return mimeType.caseInsensitiveCompare(MimeType.DIRECTORY) == .orderedSame\n}\n```"
    },
    {
        "method_name": "isPDF",
        "method_code": "ublic static boolean isPDF(String mimeType) {\n        return MimeType.PDF.equalsIgnoreCase(mimeType);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isPDF from MimeTypeUtil.java into Swift.\n\n        Input:\n\n        Method Name: isPDF\n\n        Method Code: ublic static boolean isPDF(String mimeType) {\n        return MimeType.PDF.equalsIgnoreCase(mimeType);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func isPDF(mimeType: String) -> Bool {\n    return mimeType.caseInsensitiveCompare(MimeType.PDF) == .orderedSame\n}\n```"
    },
    {
        "method_name": "isPDF",
        "method_code": "ublic static boolean isPDF(OCFile file) {\n        return isPDF(file.getMimeType()) || isPDF(getMimeTypeFromPath(file.getRemotePath()));\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isPDF from MimeTypeUtil.java into Swift.\n\n        Input:\n\n        Method Name: isPDF\n\n        Method Code: ublic static boolean isPDF(OCFile file) {\n        return isPDF(file.getMimeType()) || isPDF(getMimeTypeFromPath(file.getRemotePath()));\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func isPDF(file: OCFile) -> Bool {\n    return isPDF(mimeType: file.getMimeType()) || isPDF(mimeType: getMimeTypeFromPath(file.getRemotePath()))\n}\n```"
    },
    {
        "method_name": "extractMimeType",
        "method_code": "rivate static String extractMimeType(File file) {\n        Uri selectedUri = Uri.fromFile(file);\n        String fileExtension = MimeTypeMap.getFileExtensionFromUrl(selectedUri.toString().toLowerCase(Locale.ROOT));\n        return MimeTypeMap.getSingleton().getMimeTypeFromExtension(fileExtension);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled extractMimeType from MimeTypeUtil.java into Swift.\n\n        Input:\n\n        Method Name: extractMimeType\n\n        Method Code: rivate static String extractMimeType(File file) {\n        Uri selectedUri = Uri.fromFile(file);\n        String fileExtension = MimeTypeMap.getFileExtensionFromUrl(selectedUri.toString().toLowerCase(Locale.ROOT));\n        return MimeTypeMap.getSingleton().getMimeTypeFromExtension(fileExtension);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func extractMimeType(file: URL) -> String? {\n    let fileExtension = file.pathExtension.lowercased()\n    return UTTypeCreatePreferredIdentifierForTag(kUTTagClassFilenameExtension, fileExtension as CFString, nil)?.takeRetainedValue() as String?\n}\n```"
    },
    {
        "method_name": "determineIconIdByMimeTypeList",
        "method_code": "rivate static int determineIconIdByMimeTypeList(List<String> mimetypes) {\n        // no mime type leads to file\n        if (mimetypes == null || mimetypes.size() < 1) {\n            return R.drawable.file;\n        } else {\n\n            // search for full mime type mapping\n            for (String mimetype : mimetypes) {\n                Integer iconId = MIMETYPE_TO_ICON_MAPPING.get(mimetype);\n\n                if (iconId != null) {\n                    return iconId;\n                }\n            }\n\n            // fallback to main mime type part mapping\n            for (String mimetype : mimetypes) {\n                String mainMimetypePart = mimetype.split(\"/\")[0];\n\n                Integer iconId = MAIN_MIMETYPE_TO_ICON_MAPPING.get(mainMimetypePart);\n                if (iconId != null) {\n                    return iconId;\n                }\n            }\n        }\n\n        // no match found at all, falling back to file\n        return R.drawable.file;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled determineIconIdByMimeTypeList from MimeTypeUtil.java into Swift.\n\n        Input:\n\n        Method Name: determineIconIdByMimeTypeList\n\n        Method Code: rivate static int determineIconIdByMimeTypeList(List<String> mimetypes) {\n        // no mime type leads to file\n        if (mimetypes == null || mimetypes.size() < 1) {\n            return R.drawable.file;\n        } else {\n\n            // search for full mime type mapping\n            for (String mimetype : mimetypes) {\n                Integer iconId = MIMETYPE_TO_ICON_MAPPING.get(mimetype);\n\n                if (iconId != null) {\n                    return iconId;\n                }\n            }\n\n            // fallback to main mime type part mapping\n            for (String mimetype : mimetypes) {\n                String mainMimetypePart = mimetype.split(\"/\")[0];\n\n                Integer iconId = MAIN_MIMETYPE_TO_ICON_MAPPING.get(mainMimetypePart);\n                if (iconId != null) {\n                    return iconId;\n                }\n            }\n        }\n\n        // no match found at all, falling back to file\n        return R.drawable.file;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate static func determineIconIdByMimeTypeList(_ mimetypes: [String]?) -> Int {\n    // no mime type leads to file\n    if mimetypes == nil || mimetypes!.isEmpty {\n        return R.drawable.file\n    } else {\n        // search for full mime type mapping\n        for mimetype in mimetypes! {\n            if let iconId = MIMETYPE_TO_ICON_MAPPING[mimetype] {\n                return iconId\n            }\n        }\n\n        // fallback to main mime type part mapping\n        for mimetype in mimetypes! {\n            let mainMimetypePart = mimetype.split(separator: \"/\")[0]\n\n            if let iconId = MAIN_MIMETYPE_TO_ICON_MAPPING[String(mainMimetypePart)] {\n                return iconId\n            }\n        }\n    }\n\n    // no match found at all, falling back to file\n    return R.drawable.file\n}\n```"
    },
    {
        "method_name": "determineMimeTypesByFilename",
        "method_code": "rivate static List<String> determineMimeTypesByFilename(String filename) {\n        return determineMimeTypesByExtension(getExtension(filename));\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled determineMimeTypesByFilename from MimeTypeUtil.java into Swift.\n\n        Input:\n\n        Method Name: determineMimeTypesByFilename\n\n        Method Code: rivate static List<String> determineMimeTypesByFilename(String filename) {\n        return determineMimeTypesByExtension(getExtension(filename));\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate static func determineMimeTypesByFilename(_ filename: String) -> [String] {\n    return determineMimeTypesByExtension(getExtension(filename))\n}\n```"
    },
    {
        "method_name": "determineMimeTypesByExtension",
        "method_code": "rivate static List<String> determineMimeTypesByExtension(String extension) {\n        // try detecting the mimetype based on the web app logic equivalent\n        List<String> mimeTypeList = FILE_EXTENSION_TO_MIMETYPE_MAPPING.get(extension);\n        if (mimeTypeList != null && mimeTypeList.size() > 0) {\n            return mimeTypeList;\n        } else {\n            // try detecting the mime type via android itself\n            String mimeType = MimeTypeMap.getSingleton().getMimeTypeFromExtension(extension);\n            if (mimeType != null) {\n                return Collections.singletonList(mimeType);\n            } else {\n                return new ArrayList<>();\n            }\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled determineMimeTypesByExtension from MimeTypeUtil.java into Swift.\n\n        Input:\n\n        Method Name: determineMimeTypesByExtension\n\n        Method Code: rivate static List<String> determineMimeTypesByExtension(String extension) {\n        // try detecting the mimetype based on the web app logic equivalent\n        List<String> mimeTypeList = FILE_EXTENSION_TO_MIMETYPE_MAPPING.get(extension);\n        if (mimeTypeList != null && mimeTypeList.size() > 0) {\n            return mimeTypeList;\n        } else {\n            // try detecting the mime type via android itself\n            String mimeType = MimeTypeMap.getSingleton().getMimeTypeFromExtension(extension);\n            if (mimeType != null) {\n                return Collections.singletonList(mimeType);\n            } else {\n                return new ArrayList<>();\n            }\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate static func determineMimeTypesByExtension(_ extension: String) -> [String] {\n    if let mimeTypeList = FILE_EXTENSION_TO_MIMETYPE_MAPPING[extension], !mimeTypeList.isEmpty {\n        return mimeTypeList\n    } else {\n        if let mimeType = UTTypeCreatePreferredIdentifierForTag(kUTTagClassFilenameExtension, extension as CFString, nil)?.takeRetainedValue() as String? {\n            return [mimeType]\n        } else {\n            return []\n        }\n    }\n}\n```"
    },
    {
        "method_name": "getMimeTypeFromPath",
        "method_code": "ublic static String getMimeTypeFromPath(String path) {\n        String extension = \"\";\n        int pos = path.lastIndexOf('.');\n        if (pos >= 0) {\n            extension = path.substring(pos + 1).toLowerCase(Locale.ROOT);\n        }\n\n        // Ask OS for mimetype\n        String result = MimeTypeMap.getSingleton().getMimeTypeFromExtension(extension);\n\n        // fallback to Nc mimetype mapping\n        if (result == null) {\n            result = getMimeTypeFromCandidates(determineMimeTypesByExtension(extension));\n        }\n\n        return (result != null) ? result : \"\";\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getMimeTypeFromPath from MimeTypeUtil.java into Swift.\n\n        Input:\n\n        Method Name: getMimeTypeFromPath\n\n        Method Code: ublic static String getMimeTypeFromPath(String path) {\n        String extension = \"\";\n        int pos = path.lastIndexOf('.');\n        if (pos >= 0) {\n            extension = path.substring(pos + 1).toLowerCase(Locale.ROOT);\n        }\n\n        // Ask OS for mimetype\n        String result = MimeTypeMap.getSingleton().getMimeTypeFromExtension(extension);\n\n        // fallback to Nc mimetype mapping\n        if (result == null) {\n            result = getMimeTypeFromCandidates(determineMimeTypesByExtension(extension));\n        }\n\n        return (result != null) ? result : \"\";\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport Foundation\nimport MobileCoreServices\n\nfunc getMimeTypeFromPath(_ path: String) -> String {\n    var extension = \"\"\n    if let pos = path.lastIndex(of: \".\") {\n        extension = String(path[path.index(after: pos)...]).lowercased()\n    }\n\n    // Ask OS for mimetype\n    var result: String? = nil\n    if let uti = UTTypeCreatePreferredIdentifierForTag(kUTTagClassFilenameExtension, extension as CFString, nil)?.takeRetainedValue() {\n        result = UTTypeCopyPreferredTagWithClass(uti, kUTTagClassMIMEType)?.takeRetainedValue() as String?\n    }\n\n    // fallback to Nc mimetype mapping\n    if result == nil {\n        result = getMimeTypeFromCandidates(determineMimeTypesByExtension(extension))\n    }\n\n    return result ?? \"\"\n}\n```"
    },
    {
        "method_name": "getExtension",
        "method_code": "rivate static String getExtension(String filename) {\n        return filename.substring(filename.lastIndexOf('.') + 1).toLowerCase(Locale.ROOT);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getExtension from MimeTypeUtil.java into Swift.\n\n        Input:\n\n        Method Name: getExtension\n\n        Method Code: rivate static String getExtension(String filename) {\n        return filename.substring(filename.lastIndexOf('.') + 1).toLowerCase(Locale.ROOT);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate static func getExtension(filename: String) -> String {\n    return filename.split(separator: \".\").last?.lowercased() ?? \"\"\n}\n```"
    },
    {
        "method_name": "populateMimeTypeIconMapping",
        "method_code": "rivate static void populateMimeTypeIconMapping() {\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/coreldraw\", R.drawable.file_image);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/epub+zip\", R.drawable.file_text);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/font-sfnt\", R.drawable.file_image);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/font-woff\", R.drawable.file_image);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/gpx+xml\", R.drawable.file_location);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/illustrator\", R.drawable.file_image);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/internet-shortcut\", R.drawable.file_link);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/java\", R.drawable.file_application);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/javascript\", R.drawable.file_code);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/json\", R.drawable.file_code);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/msaccess\", R.drawable.file);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/msexcel\", R.drawable.file_xls);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/msonenote\", R.drawable.file_doc);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/mspowerpoint\", R.drawable.file_ppt);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/msword\", R.drawable.file_doc);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/octet-stream\", R.drawable.file);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/postscript\", R.drawable.file_image);\n        MIMETYPE_TO_ICON_MAPPING.put(MimeType.PDF, R.drawable.file_pdf);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/rss+xml\", R.drawable.file_code);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/rtf\", R.drawable.file);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.android.package-archive\", R.drawable.file_zip);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.garmin.tcx+xml\", R.drawable.file_location);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.google-earth.kml+xml\", R.drawable.file_location);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.google-earth.kmz\", R.drawable.file_location);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.lotus-wordpro\", R.drawable.file_doc);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-excel\", R.drawable.file_xls);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-excel.addin.macroEnabled.12\", R.drawable.file_xls);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-excel.sheet.binary.macroEnabled.12\", R.drawable.file_xls);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-excel.sheet.macroEnabled.12\", R.drawable.file_xls);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-excel.template.macroEnabled.12\", R.drawable.file_xls);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-fontobject\", R.drawable.file_image);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-powerpoint\", R.drawable.file_ppt);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-powerpoint.addin.macroEnabled.12\", R.drawable.file_ppt);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-powerpoint.presentation.macroEnabled.12\", R.drawable.file_ppt);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-powerpoint.slideshow.macroEnabled.12\", R.drawable.file_ppt);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-powerpoint.template.macroEnabled.12\", R.drawable.file_ppt);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-visio.drawing.macroEnabled.12\", R.drawable.file_doc);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-visio.drawing\", R.drawable.file_doc);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-visio.stencil.macroEnabled.12\", R.drawable.file_doc);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-visio.stencil\", R.drawable.file_doc);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-visio.template.macroEnabled.12\", R.drawable.file_doc);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-visio.template\", R.drawable.file_doc);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-word.document.macroEnabled.12\", R.drawable.file_doc);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-word.template.macroEnabled.12\", R.drawable.file_doc);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.oasis.opendocument.formula\", R.drawable.file_analytics);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.oasis.opendocument.formula-template\", R.drawable.file_analytics);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.oasis.opendocument.graphics\", R.drawable.file_analytics);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.oasis.opendocument.graphics-template\", R.drawable.file_analytics);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.oasis.opendocument.presentation\", R.drawable.file_ppt);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.oasis.opendocument.presentation-template\", R.drawable.file_ppt);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.oasis.opendocument.spreadsheet\", R.drawable.file_xls);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.oasis.opendocument.spreadsheet-template\", R.drawable.file_xls);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.oasis.opendocument.text\", R.drawable.file_doc);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.oasis.opendocument.text-master\", R.drawable.file_doc);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.oasis.opendocument.text-template\", R.drawable.file_doc);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.oasis.opendocument.text-web\", R.drawable.file_doc);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.openxmlformats-officedocument.presentationml.presentation\", R.drawable.file_ppt);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.openxmlformats-officedocument.presentationml.slideshow\", R.drawable.file_ppt);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.openxmlformats-officedocument.presentationml.template\", R.drawable.file_ppt);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\", R.drawable.file_xls);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.openxmlformats-officedocument.spreadsheetml.template\", R.drawable.file_xls);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\", R.drawable.file_doc);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.openxmlformats-officedocument.wordprocessingml.template\", R.drawable.file_doc);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.visio\", R.drawable.file_doc);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.wordperfect\", R.drawable.file_doc);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-7z-compressed\", R.drawable.file_zip);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-bin\", R.drawable.file_application);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-bzip2\", R.drawable.file_zip);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-cbr\", R.drawable.file_text);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-compressed\", R.drawable.file_zip);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-dcraw\", R.drawable.file_image);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-deb\", R.drawable.file_zip);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-fictionbook+xml\", R.drawable.file_text);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-font\", R.drawable.file_image);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-gimp\", R.drawable.file_image);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-gzip\", R.drawable.file_zip);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-love-game\", R.drawable.file);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-mobipocket-ebook\", R.drawable.file_text);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-ms-dos-executable\", R.drawable.file_application);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-msdos-program\", R.drawable.file_application);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-msi\", R.drawable.file_application);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-iwork-numbers-sffnumbers\", R.drawable.file_xls);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-iwork-keynote-sffkey\", R.drawable.file_ppt);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-iwork-pages-sffpages\", R.drawable.file_doc);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-perl\", R.drawable.file_code);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-photoshop\", R.drawable.file_image);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-php\", R.drawable.file_code);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-rar-compressed\", R.drawable.file_zip);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-shockwave-flash\", R.drawable.file_application);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-tar\", R.drawable.file_zip);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-tex\", R.drawable.file_text);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/xml\", R.drawable.file_text);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/yaml\", R.drawable.file_code);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/zip\", R.drawable.file_zip);\n        MIMETYPE_TO_ICON_MAPPING.put(\"database\", R.drawable.file);\n        MIMETYPE_TO_ICON_MAPPING.put(\"httpd/unix-directory\", R.drawable.folder);\n        MIMETYPE_TO_ICON_MAPPING.put(\"image/svg+xml\", R.drawable.file_image);\n        MIMETYPE_TO_ICON_MAPPING.put(\"image/vector\", R.drawable.file_image);\n        MIMETYPE_TO_ICON_MAPPING.put(\"text/calendar\", R.drawable.file_calendar);\n        MIMETYPE_TO_ICON_MAPPING.put(\"text/css\", R.drawable.file_code);\n        MIMETYPE_TO_ICON_MAPPING.put(\"text/csv\", R.drawable.file_xls);\n        MIMETYPE_TO_ICON_MAPPING.put(\"text/html\", R.drawable.file_code);\n        MIMETYPE_TO_ICON_MAPPING.put(\"text/vcard\", R.drawable.file_vcard);\n        MIMETYPE_TO_ICON_MAPPING.put(\"text/x-c\", R.drawable.file_code);\n        MIMETYPE_TO_ICON_MAPPING.put(\"text/x-c++src\", R.drawable.file_code);\n        MIMETYPE_TO_ICON_MAPPING.put(\"text/x-h\", R.drawable.file_code);\n        MIMETYPE_TO_ICON_MAPPING.put(\"text/x-java-source\", R.drawable.file_code);\n        MIMETYPE_TO_ICON_MAPPING.put(\"text/x-ldif\", R.drawable.file_code);\n        MIMETYPE_TO_ICON_MAPPING.put(\"text/x-python\", R.drawable.file_code);\n        MIMETYPE_TO_ICON_MAPPING.put(\"text/x-shellscript\", R.drawable.file_code);\n        MIMETYPE_TO_ICON_MAPPING.put(\"web\", R.drawable.file_code);\n        MIMETYPE_TO_ICON_MAPPING.put(MimeType.DIRECTORY, R.drawable.folder);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled populateMimeTypeIconMapping from MimeTypeUtil.java into Swift.\n\n        Input:\n\n        Method Name: populateMimeTypeIconMapping\n\n        Method Code: rivate static void populateMimeTypeIconMapping() {\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/coreldraw\", R.drawable.file_image);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/epub+zip\", R.drawable.file_text);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/font-sfnt\", R.drawable.file_image);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/font-woff\", R.drawable.file_image);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/gpx+xml\", R.drawable.file_location);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/illustrator\", R.drawable.file_image);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/internet-shortcut\", R.drawable.file_link);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/java\", R.drawable.file_application);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/javascript\", R.drawable.file_code);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/json\", R.drawable.file_code);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/msaccess\", R.drawable.file);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/msexcel\", R.drawable.file_xls);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/msonenote\", R.drawable.file_doc);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/mspowerpoint\", R.drawable.file_ppt);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/msword\", R.drawable.file_doc);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/octet-stream\", R.drawable.file);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/postscript\", R.drawable.file_image);\n        MIMETYPE_TO_ICON_MAPPING.put(MimeType.PDF, R.drawable.file_pdf);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/rss+xml\", R.drawable.file_code);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/rtf\", R.drawable.file);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.android.package-archive\", R.drawable.file_zip);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.garmin.tcx+xml\", R.drawable.file_location);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.google-earth.kml+xml\", R.drawable.file_location);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.google-earth.kmz\", R.drawable.file_location);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.lotus-wordpro\", R.drawable.file_doc);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-excel\", R.drawable.file_xls);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-excel.addin.macroEnabled.12\", R.drawable.file_xls);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-excel.sheet.binary.macroEnabled.12\", R.drawable.file_xls);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-excel.sheet.macroEnabled.12\", R.drawable.file_xls);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-excel.template.macroEnabled.12\", R.drawable.file_xls);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-fontobject\", R.drawable.file_image);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-powerpoint\", R.drawable.file_ppt);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-powerpoint.addin.macroEnabled.12\", R.drawable.file_ppt);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-powerpoint.presentation.macroEnabled.12\", R.drawable.file_ppt);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-powerpoint.slideshow.macroEnabled.12\", R.drawable.file_ppt);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-powerpoint.template.macroEnabled.12\", R.drawable.file_ppt);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-visio.drawing.macroEnabled.12\", R.drawable.file_doc);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-visio.drawing\", R.drawable.file_doc);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-visio.stencil.macroEnabled.12\", R.drawable.file_doc);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-visio.stencil\", R.drawable.file_doc);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-visio.template.macroEnabled.12\", R.drawable.file_doc);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-visio.template\", R.drawable.file_doc);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-word.document.macroEnabled.12\", R.drawable.file_doc);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-word.template.macroEnabled.12\", R.drawable.file_doc);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.oasis.opendocument.formula\", R.drawable.file_analytics);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.oasis.opendocument.formula-template\", R.drawable.file_analytics);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.oasis.opendocument.graphics\", R.drawable.file_analytics);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.oasis.opendocument.graphics-template\", R.drawable.file_analytics);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.oasis.opendocument.presentation\", R.drawable.file_ppt);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.oasis.opendocument.presentation-template\", R.drawable.file_ppt);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.oasis.opendocument.spreadsheet\", R.drawable.file_xls);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.oasis.opendocument.spreadsheet-template\", R.drawable.file_xls);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.oasis.opendocument.text\", R.drawable.file_doc);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.oasis.opendocument.text-master\", R.drawable.file_doc);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.oasis.opendocument.text-template\", R.drawable.file_doc);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.oasis.opendocument.text-web\", R.drawable.file_doc);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.openxmlformats-officedocument.presentationml.presentation\", R.drawable.file_ppt);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.openxmlformats-officedocument.presentationml.slideshow\", R.drawable.file_ppt);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.openxmlformats-officedocument.presentationml.template\", R.drawable.file_ppt);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\", R.drawable.file_xls);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.openxmlformats-officedocument.spreadsheetml.template\", R.drawable.file_xls);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\", R.drawable.file_doc);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.openxmlformats-officedocument.wordprocessingml.template\", R.drawable.file_doc);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.visio\", R.drawable.file_doc);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.wordperfect\", R.drawable.file_doc);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-7z-compressed\", R.drawable.file_zip);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-bin\", R.drawable.file_application);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-bzip2\", R.drawable.file_zip);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-cbr\", R.drawable.file_text);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-compressed\", R.drawable.file_zip);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-dcraw\", R.drawable.file_image);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-deb\", R.drawable.file_zip);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-fictionbook+xml\", R.drawable.file_text);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-font\", R.drawable.file_image);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-gimp\", R.drawable.file_image);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-gzip\", R.drawable.file_zip);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-love-game\", R.drawable.file);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-mobipocket-ebook\", R.drawable.file_text);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-ms-dos-executable\", R.drawable.file_application);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-msdos-program\", R.drawable.file_application);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-msi\", R.drawable.file_application);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-iwork-numbers-sffnumbers\", R.drawable.file_xls);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-iwork-keynote-sffkey\", R.drawable.file_ppt);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-iwork-pages-sffpages\", R.drawable.file_doc);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-perl\", R.drawable.file_code);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-photoshop\", R.drawable.file_image);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-php\", R.drawable.file_code);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-rar-compressed\", R.drawable.file_zip);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-shockwave-flash\", R.drawable.file_application);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-tar\", R.drawable.file_zip);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/x-tex\", R.drawable.file_text);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/xml\", R.drawable.file_text);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/yaml\", R.drawable.file_code);\n        MIMETYPE_TO_ICON_MAPPING.put(\"application/zip\", R.drawable.file_zip);\n        MIMETYPE_TO_ICON_MAPPING.put(\"database\", R.drawable.file);\n        MIMETYPE_TO_ICON_MAPPING.put(\"httpd/unix-directory\", R.drawable.folder);\n        MIMETYPE_TO_ICON_MAPPING.put(\"image/svg+xml\", R.drawable.file_image);\n        MIMETYPE_TO_ICON_MAPPING.put(\"image/vector\", R.drawable.file_image);\n        MIMETYPE_TO_ICON_MAPPING.put(\"text/calendar\", R.drawable.file_calendar);\n        MIMETYPE_TO_ICON_MAPPING.put(\"text/css\", R.drawable.file_code);\n        MIMETYPE_TO_ICON_MAPPING.put(\"text/csv\", R.drawable.file_xls);\n        MIMETYPE_TO_ICON_MAPPING.put(\"text/html\", R.drawable.file_code);\n        MIMETYPE_TO_ICON_MAPPING.put(\"text/vcard\", R.drawable.file_vcard);\n        MIMETYPE_TO_ICON_MAPPING.put(\"text/x-c\", R.drawable.file_code);\n        MIMETYPE_TO_ICON_MAPPING.put(\"text/x-c++src\", R.drawable.file_code);\n        MIMETYPE_TO_ICON_MAPPING.put(\"text/x-h\", R.drawable.file_code);\n        MIMETYPE_TO_ICON_MAPPING.put(\"text/x-java-source\", R.drawable.file_code);\n        MIMETYPE_TO_ICON_MAPPING.put(\"text/x-ldif\", R.drawable.file_code);\n        MIMETYPE_TO_ICON_MAPPING.put(\"text/x-python\", R.drawable.file_code);\n        MIMETYPE_TO_ICON_MAPPING.put(\"text/x-shellscript\", R.drawable.file_code);\n        MIMETYPE_TO_ICON_MAPPING.put(\"web\", R.drawable.file_code);\n        MIMETYPE_TO_ICON_MAPPING.put(MimeType.DIRECTORY, R.drawable.folder);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate static func populateMimeTypeIconMapping() {\n    MIMETYPE_TO_ICON_MAPPING[\"application/coreldraw\"] = R.drawable.file_image\n    MIMETYPE_TO_ICON_MAPPING[\"application/epub+zip\"] = R.drawable.file_text\n    MIMETYPE_TO_ICON_MAPPING[\"application/font-sfnt\"] = R.drawable.file_image\n    MIMETYPE_TO_ICON_MAPPING[\"application/font-woff\"] = R.drawable.file_image\n    MIMETYPE_TO_ICON_MAPPING[\"application/gpx+xml\"] = R.drawable.file_location\n    MIMETYPE_TO_ICON_MAPPING[\"application/illustrator\"] = R.drawable.file_image\n    MIMETYPE_TO_ICON_MAPPING[\"application/internet-shortcut\"] = R.drawable.file_link\n    MIMETYPE_TO_ICON_MAPPING[\"application/java\"] = R.drawable.file_application\n    MIMETYPE_TO_ICON_MAPPING[\"application/javascript\"] = R.drawable.file_code\n    MIMETYPE_TO_ICON_MAPPING[\"application/json\"] = R.drawable.file_code\n    MIMETYPE_TO_ICON_MAPPING[\"application/msaccess\"] = R.drawable.file\n    MIMETYPE_TO_ICON_MAPPING[\"application/msexcel\"] = R.drawable.file_xls\n    MIMETYPE_TO_ICON_MAPPING[\"application/msonenote\"] = R.drawable.file_doc\n    MIMETYPE_TO_ICON_MAPPING[\"application/mspowerpoint\"] = R.drawable.file_ppt\n    MIMETYPE_TO_ICON_MAPPING[\"application/msword\"] = R.drawable.file_doc\n    MIMETYPE_TO_ICON_MAPPING[\"application/octet-stream\"] = R.drawable.file\n    MIMETYPE_TO_ICON_MAPPING[\"application/postscript\"] = R.drawable.file_image\n    MIMETYPE_TO_ICON_MAPPING[MimeType.PDF] = R.drawable.file_pdf\n    MIMETYPE_TO_ICON_MAPPING[\"application/rss+xml\"] = R.drawable.file_code\n    MIMETYPE_TO_ICON_MAPPING[\"application/rtf\"] = R.drawable.file\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.android.package-archive\"] = R.drawable.file_zip\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.garmin.tcx+xml\"] = R.drawable.file_location\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.google-earth.kml+xml\"] = R.drawable.file_location\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.google-earth.kmz\"] = R.drawable.file_location\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.lotus-wordpro\"] = R.drawable.file_doc\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.ms-excel\"] = R.drawable.file_xls\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.ms-excel.addin.macroEnabled.12\"] = R.drawable.file_xls\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.ms-excel.sheet.binary.macroEnabled.12\"] = R.drawable.file_xls\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.ms-excel.sheet.macroEnabled.12\"] = R.drawable.file_xls\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.ms-excel.template.macroEnabled.12\"] = R.drawable.file_xls\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.ms-fontobject\"] = R.drawable.file_image\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.ms-powerpoint\"] = R.drawable.file_ppt\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.ms-powerpoint.addin.macroEnabled.12\"] = R.drawable.file_ppt\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.ms-powerpoint.presentation.macroEnabled.12\"] = R.drawable.file_ppt\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.ms-powerpoint.slideshow.macroEnabled.12\"] = R.drawable.file_ppt\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.ms-powerpoint.template.macroEnabled.12\"] = R.drawable.file_ppt\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.ms-visio.drawing.macroEnabled.12\"] = R.drawable.file_doc\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.ms-visio.drawing\"] = R.drawable.file_doc\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.ms-visio.stencil.macroEnabled.12\"] = R.drawable.file_doc\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.ms-visio.stencil\"] = R.drawable.file_doc\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.ms-visio.template.macroEnabled.12\"] = R.drawable.file_doc\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.ms-visio.template\"] = R.drawable.file_doc\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.ms-word.document.macroEnabled.12\"] = R.drawable.file_doc\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.ms-word.template.macroEnabled.12\"] = R.drawable.file_doc\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.oasis.opendocument.formula\"] = R.drawable.file_analytics\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.oasis.opendocument.formula-template\"] = R.drawable.file_analytics\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.oasis.opendocument.graphics\"] = R.drawable.file_analytics\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.oasis.opendocument.graphics-template\"] = R.drawable.file_analytics\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.oasis.opendocument.presentation\"] = R.drawable.file_ppt\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.oasis.opendocument.presentation-template\"] = R.drawable.file_ppt\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.oasis.opendocument.spreadsheet\"] = R.drawable.file_xls\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.oasis.opendocument.spreadsheet-template\"] = R.drawable.file_xls\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.oasis.opendocument.text\"] = R.drawable.file_doc\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.oasis.opendocument.text-master\"] = R.drawable.file_doc\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.oasis.opendocument.text-template\"] = R.drawable.file_doc\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.oasis.opendocument.text-web\"] = R.drawable.file_doc\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.openxmlformats-officedocument.presentationml.presentation\"] = R.drawable.file_ppt\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.openxmlformats-officedocument.presentationml.slideshow\"] = R.drawable.file_ppt\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.openxmlformats-officedocument.presentationml.template\"] = R.drawable.file_ppt\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"] = R.drawable.file_xls\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.openxmlformats-officedocument.spreadsheetml.template\"] = R.drawable.file_xls\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"] = R.drawable.file_doc\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.openxmlformats-officedocument.wordprocessingml.template\"] = R.drawable.file_doc\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.visio\"] = R.drawable.file_doc\n    MIMETYPE_TO_ICON_MAPPING[\"application/vnd.wordperfect\"] = R.drawable.file_doc\n    MIMETYPE_TO_ICON_MAPPING[\"application/x-7z-compressed\"] = R.drawable.file_zip\n    MIMETYPE_TO_ICON_MAPPING[\"application/x-bin\"] = R.drawable.file_application\n    MIMETYPE_TO_ICON_MAPPING[\"application/x-bzip2\"] = R.drawable.file_zip\n    MIMETYPE_TO_ICON_MAPPING[\"application/x-cbr\"] = R.drawable.file_text\n    MIMETYPE_TO_ICON_MAPPING[\"application/x-compressed\"] = R.drawable.file_zip\n    MIMETYPE_TO_ICON_MAPPING[\"application/x-dcraw\"] = R.drawable.file_image\n    MIMETYPE_TO_ICON_MAPPING[\"application/x-deb\"] = R.drawable.file_zip\n    MIMETYPE_TO_ICON_MAPPING[\"application/x-fictionbook+xml\"] = R.drawable.file_text\n    MIMETYPE_TO_ICON_MAPPING[\"application/x-font\"] = R.drawable.file_image\n    MIMETYPE_TO_ICON_MAPPING[\"application/x-gimp\"] = R.drawable.file_image\n    MIMETYPE_TO_ICON_MAPPING[\"application/x-gzip\"] = R.drawable.file_zip\n    MIMETYPE_TO_ICON_MAPPING[\"application/x-love-game\"] = R.drawable.file\n    MIMETYPE_TO_ICON_MAPPING[\"application/x-mobipocket-ebook\"] = R.drawable.file_text\n    MIMETYPE_TO_ICON_MAPPING[\"application/x-ms-dos-executable\"] = R.drawable.file_application\n    MIMETYPE_TO_ICON_MAPPING[\"application/x-msdos-program\"] = R.drawable.file_application\n    MIMETYPE_TO_ICON_MAPPING[\"application/x-msi\"] = R.drawable.file_application\n    MIMETYPE_TO_ICON_MAPPING[\"application/x-iwork-numbers-sffnumbers\"] = R.drawable.file_xls\n    MIMETYPE_TO_ICON_MAPPING[\"application/x-iwork-keynote-sffkey\"] = R.drawable.file_ppt\n    MIMETYPE_TO_ICON_MAPPING[\"application/x-iwork-pages-sffpages\"] = R.drawable.file_doc\n    MIMETYPE_TO_ICON_MAPPING[\"application/x-perl\"] = R.drawable.file_code\n    MIMETYPE_TO_ICON_MAPPING[\"application/x-photoshop\"] = R.drawable.file_image\n    MIMETYPE_TO_ICON_MAPPING[\"application/x-php\"] = R.drawable.file_code\n    MIMETYPE_TO_ICON_MAPPING[\"application/x-rar-compressed\"] = R.drawable.file_zip\n    MIMETYPE_TO_ICON_MAPPING[\"application/x-shockwave-flash\"] = R.drawable.file_application\n    MIMETYPE_TO_ICON_MAPPING[\"application/x-tar\"] = R.drawable.file_zip\n    MIMETYPE_TO_ICON_MAPPING[\"application/x-tex\"] = R.drawable.file_text\n    MIMETYPE_TO_ICON_MAPPING[\"application/xml\"] = R.drawable.file_text\n    MIMETYPE_TO_ICON_MAPPING[\"application/yaml\"] = R.drawable.file_code\n    MIMETYPE_TO_ICON_MAPPING[\"application/zip\"] = R.drawable.file_zip\n    MIMETYPE_TO_ICON_MAPPING[\"database\"] = R.drawable.file\n    MIMETYPE_TO_ICON_MAPPING[\"httpd/unix-directory\"] = R.drawable.folder\n    MIMETYPE_TO_ICON_MAPPING[\"image/svg+xml\"] = R.drawable.file_image\n    MIMETYPE_TO_ICON_MAPPING[\"image/vector\"] = R.drawable.file_image\n    MIMETYPE_TO_ICON_MAPPING[\"text/calendar\"] = R.drawable.file_calendar\n    MIMETYPE_TO_ICON_MAPPING[\"text/css\"] = R.drawable.file_code\n    MIMETYPE_TO_ICON_MAPPING[\"text/csv\"] = R.drawable.file_xls\n    MIMETYPE_TO_ICON_MAPPING[\"text/html\"] = R.drawable.file_code\n    MIMETYPE_TO_ICON_MAPPING[\"text/vcard\"] = R.drawable.file_vcard\n    MIMETYPE_TO_ICON_MAPPING[\"text/x-c\"] = R.drawable.file_code\n    MIMETYPE_TO_ICON_MAPPING[\"text/x-c++src\"] = R.drawable.file_code\n    MIMETYPE_TO_ICON_MAPPING[\"text/x-h\"] = R.drawable.file_code\n    MIMETYPE_TO_ICON_MAPPING[\"text/x-java-source\"] = R.drawable.file_code\n    MIMETYPE_TO_ICON_MAPPING[\"text/x-ldif\"] = R.drawable.file_code\n    MIMETYPE_TO_ICON_MAPPING[\"text/x-python\"] = R.drawable.file_code\n    MIMETYPE_TO_ICON_MAPPING[\"text/x-shellscript\"] = R.drawable.file_code\n    MIMETYPE_TO_ICON_MAPPING[\"web\"] = R.drawable.file_code\n    MIMETYPE_TO_ICON_MAPPING[MimeType.DIRECTORY] = R.drawable.folder\n}\n```"
    },
    {
        "method_name": "populateMainMimeTypeMapping",
        "method_code": "rivate static void populateMainMimeTypeMapping() {\n        MAIN_MIMETYPE_TO_ICON_MAPPING.put(\"audio\", R.drawable.file_sound);\n        MAIN_MIMETYPE_TO_ICON_MAPPING.put(\"database\", R.drawable.file);\n        MAIN_MIMETYPE_TO_ICON_MAPPING.put(\"httpd\", R.drawable.file_zip);\n        MAIN_MIMETYPE_TO_ICON_MAPPING.put(\"image\", R.drawable.file_image);\n        MAIN_MIMETYPE_TO_ICON_MAPPING.put(\"text\", R.drawable.file_text);\n        MAIN_MIMETYPE_TO_ICON_MAPPING.put(\"video\", R.drawable.file_movie);\n        MAIN_MIMETYPE_TO_ICON_MAPPING.put(\"web\", R.drawable.file_code);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled populateMainMimeTypeMapping from MimeTypeUtil.java into Swift.\n\n        Input:\n\n        Method Name: populateMainMimeTypeMapping\n\n        Method Code: rivate static void populateMainMimeTypeMapping() {\n        MAIN_MIMETYPE_TO_ICON_MAPPING.put(\"audio\", R.drawable.file_sound);\n        MAIN_MIMETYPE_TO_ICON_MAPPING.put(\"database\", R.drawable.file);\n        MAIN_MIMETYPE_TO_ICON_MAPPING.put(\"httpd\", R.drawable.file_zip);\n        MAIN_MIMETYPE_TO_ICON_MAPPING.put(\"image\", R.drawable.file_image);\n        MAIN_MIMETYPE_TO_ICON_MAPPING.put(\"text\", R.drawable.file_text);\n        MAIN_MIMETYPE_TO_ICON_MAPPING.put(\"video\", R.drawable.file_movie);\n        MAIN_MIMETYPE_TO_ICON_MAPPING.put(\"web\", R.drawable.file_code);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate static func populateMainMimeTypeMapping() {\n    MAIN_MIMETYPE_TO_ICON_MAPPING[\"audio\"] = R.drawable.file_sound\n    MAIN_MIMETYPE_TO_ICON_MAPPING[\"database\"] = R.drawable.file\n    MAIN_MIMETYPE_TO_ICON_MAPPING[\"httpd\"] = R.drawable.file_zip\n    MAIN_MIMETYPE_TO_ICON_MAPPING[\"image\"] = R.drawable.file_image\n    MAIN_MIMETYPE_TO_ICON_MAPPING[\"text\"] = R.drawable.file_text\n    MAIN_MIMETYPE_TO_ICON_MAPPING[\"video\"] = R.drawable.file_movie\n    MAIN_MIMETYPE_TO_ICON_MAPPING[\"web\"] = R.drawable.file_code\n}\n```"
    },
    {
        "method_name": "populateFileExtensionMimeTypeMapping",
        "method_code": "rivate static void populateFileExtensionMimeTypeMapping() {\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"3gp\", Collections.singletonList(\"video/3gpp\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"7z\", Collections.singletonList(\"application/x-7z-compressed\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"accdb\", Collections.singletonList(\"application/msaccess\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"ai\", Collections.singletonList(\"application/illustrator\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"apk\", Collections.singletonList(\"application/vnd.android.package-archive\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"arw\", Collections.singletonList(\"image/x-dcraw\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"avi\", Collections.singletonList(\"video/x-msvideo\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"bash\", Collections.singletonList(\"text/x-shellscript\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"bat\", Collections.singletonList(\"application/x-msdos-program\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"blend\", Collections.singletonList(\"application/x-blender\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"bin\", Collections.singletonList(\"application/x-bin\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"bmp\", Collections.singletonList(\"image/bmp\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"bpg\", Collections.singletonList(\"image/bpg\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"bz2\", Collections.singletonList(\"application/x-bzip2\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"cb7\", Collections.singletonList(\"application/x-cbr\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"cba\", Collections.singletonList(\"application/x-cbr\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"cbr\", Collections.singletonList(\"application/x-cbr\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"cbt\", Collections.singletonList(\"application/x-cbr\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"cbtc\", Collections.singletonList(\"application/x-cbr\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"cbz\", Collections.singletonList(\"application/x-cbr\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"cc\", Collections.singletonList(\"text/x-c\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"cdr\", Collections.singletonList(\"application/coreldraw\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"class\", Collections.singletonList(\"application/java\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"cnf\", Collections.singletonList(\"text/plain\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"conf\", Collections.singletonList(\"text/plain\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"cpp\", Collections.singletonList(\"text/x-c++src\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"cr2\", Collections.singletonList(\"image/x-dcraw\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"css\", Collections.singletonList(\"text/css\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"csv\", Collections.singletonList(\"text/csv\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"cvbdl\", Collections.singletonList(\"application/x-cbr\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"c\", Collections.singletonList(\"text/x-c\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"c++\", Collections.singletonList(\"text/x-c++src\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"dcr\", Collections.singletonList(\"image/x-dcraw\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"deb\", Collections.singletonList(\"application/x-deb\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"dng\", Collections.singletonList(\"image/x-dcraw\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"doc\", Collections.singletonList(\"application/msword\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"docm\", Collections.singletonList(\"application/vnd.ms-word.document.macroEnabled.12\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"docx\", Collections.singletonList(\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"dot\", Collections.singletonList(\"application/msword\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"dotx\", Collections.singletonList(\"application/vnd.openxmlformats-officedocument.wordprocessingml.template\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"dv\", Collections.singletonList(\"video/dv\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"eot\", Collections.singletonList(\"application/vnd.ms-fontobject\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"epub\", Collections.singletonList(\"application/epub+zip\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"eps\", Collections.singletonList(\"application/postscript\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"erf\", Collections.singletonList(\"image/x-dcraw\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"exe\", Collections.singletonList(\"application/x-ms-dos-executable\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"eml\", Collections.singletonList(\"message/rfc822\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"fb2\", Arrays.asList(\"application/x-fictionbook+xml\", \"text/plain\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"flac\", Collections.singletonList(\"audio/flac\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"flv\", Collections.singletonList(\"video/x-flv\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"gif\", Collections.singletonList(\"image/gif\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"gpx\", Collections.singletonList(\"application/gpx+xml\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"gz\", Collections.singletonList(\"application/gzip\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"gzip\", Collections.singletonList(\"application/gzip\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"h\", Collections.singletonList(\"text/x-h\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"heic\", Collections.singletonList(\"image/heic\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"heif\", Collections.singletonList(\"image/heif\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"hh\", Collections.singletonList(\"text/x-h\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"hpp\", Collections.singletonList(\"text/x-h\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"htaccess\", Collections.singletonList(\"text/plain\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"html\", Arrays.asList(\"text/html\", \"text/plain\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"htm\", Arrays.asList(\"text/html\", \"text/plain\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"ical\", Collections.singletonList(\"text/calendar\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"ics\", Collections.singletonList(\"text/calendar\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"iiq\", Collections.singletonList(\"image/x-dcraw\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"impress\", Collections.singletonList(\"text/impress\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"java\", Collections.singletonList(\"text/x-java-source\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"jp2\", Collections.singletonList(\"image/jp2\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"jpeg\", Collections.singletonList(\"image/jpeg\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"jpg\", Collections.singletonList(\"image/jpeg\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"jps\", Collections.singletonList(\"image/jpeg\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"js\", Arrays.asList(\"application/javascript\", \"text/plain\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"json\", Arrays.asList(\"application/json\", \"text/plain\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"k25\", Collections.singletonList(\"image/x-dcraw\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"kdc\", Collections.singletonList(\"image/x-dcraw\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"key\", Collections.singletonList(\"application/x-iwork-keynote-sffkey\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"keynote\", Collections.singletonList(\"application/x-iwork-keynote-sffkey\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"kml\", Collections.singletonList(\"application/vnd.google-earth.kml+xml\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"kmz\", Collections.singletonList(\"application/vnd.google-earth.kmz\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"kra\", Collections.singletonList(\"application/x-krita\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"ldif\", Collections.singletonList(\"text/x-ldif\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"love\", Collections.singletonList(\"application/x-love-game\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"lwp\", Collections.singletonList(\"application/vnd.lotus-wordpro\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"m\", Arrays.asList(\"text/x-matlab\", \"text/plain\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"m2t\", Collections.singletonList(\"video/mp2t\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"m3u\", Collections.singletonList(\"audio/mpegurl\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"m3u8\", Collections.singletonList(\"audio/mpegurl\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"m4a\", Collections.singletonList(\"audio/mp4\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"m4b\", Collections.singletonList(\"audio/m4b\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"m4v\", Collections.singletonList(\"video/mp4\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"markdown\", Collections.singletonList(MIMETYPE_TEXT_MARKDOWN));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"mdown\", Collections.singletonList(MIMETYPE_TEXT_MARKDOWN));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"md\", Collections.singletonList(MIMETYPE_TEXT_MARKDOWN));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"mdb\", Collections.singletonList(\"application/msaccess\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"mdwn\", Collections.singletonList(MIMETYPE_TEXT_MARKDOWN));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"mkd\", Collections.singletonList(MIMETYPE_TEXT_MARKDOWN));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"mef\", Collections.singletonList(\"image/x-dcraw\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"mkv\", Collections.singletonList(\"video/x-matroska\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"mobi\", Collections.singletonList(\"application/x-mobipocket-ebook\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"mov\", Collections.singletonList(\"video/quicktime\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"mp3\", Collections.singletonList(\"audio/mpeg\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"mp4\", Collections.singletonList(\"video/mp4\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"mpeg\", Collections.singletonList(\"video/mpeg\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"mpg\", Collections.singletonList(\"video/mpeg\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"mpo\", Collections.singletonList(\"image/jpeg\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"msi\", Collections.singletonList(\"application/x-msi\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"mts\", Collections.singletonList(\"video/MP2T\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"mt2s\", Collections.singletonList(\"video/MP2T\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"nef\", Collections.singletonList(\"image/x-dcraw\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"numbers\", Collections.singletonList(\"application/x-iwork-numbers-sffnumbers\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"odf\", Collections.singletonList(\"application/vnd.oasis.opendocument.formula\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"odg\", Collections.singletonList(\"application/vnd.oasis.opendocument.graphics\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"odp\", Collections.singletonList(\"application/vnd.oasis.opendocument.presentation\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"ods\", Collections.singletonList(\"application/vnd.oasis.opendocument.spreadsheet\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"odt\", Collections.singletonList(\"application/vnd.oasis.opendocument.text\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"oga\", Collections.singletonList(\"audio/ogg\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"ogg\", Collections.singletonList(\"audio/ogg\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"ogv\", Collections.singletonList(\"video/ogg\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"one\", Collections.singletonList(\"application/msonenote\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"opus\", Collections.singletonList(\"audio/ogg\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"orf\", Collections.singletonList(\"image/x-dcraw\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"otf\", Collections.singletonList(\"application/font-sfnt\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"pages\", Collections.singletonList(\"application/x-iwork-pages-sffpages\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"pdf\", Collections.singletonList(MimeType.PDF));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"pfb\", Collections.singletonList(\"application/x-font\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"pef\", Collections.singletonList(\"image/x-dcraw\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"php\", Collections.singletonList(\"application/x-php\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"pl\", Collections.singletonList(\"application/x-perl\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"pls\", Collections.singletonList(\"audio/x-scpls\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"png\", Collections.singletonList(\"image/png\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"pot\", Collections.singletonList(\"application/vnd.ms-powerpoint\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"potm\", Collections.singletonList(\"application/vnd.ms-powerpoint.template.macroEnabled.12\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"potx\", Collections.singletonList(\"application/vnd.openxmlformats-officedocument.presentationml.template\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"ppa\", Collections.singletonList(\"application/vnd.ms-powerpoint\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"ppam\", Collections.singletonList(\"application/vnd.ms-powerpoint.addin.macroEnabled.12\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"pps\", Collections.singletonList(\"application/vnd.ms-powerpoint\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"ppsm\", Collections.singletonList(\"application/vnd.ms-powerpoint.slideshow.macroEnabled.12\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"ppsx\", Collections.singletonList(\"application/vnd.openxmlformats-officedocument.presentationml.slideshow\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"ppt\", Collections.singletonList(\"application/vnd.ms-powerpoint\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"pptm\", Collections.singletonList(\"application/vnd.ms-powerpoint.presentation.macroEnabled.12\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"pptx\", Collections.singletonList(\"application/vnd.openxmlformats-officedocument.presentationml.presentation\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"ps\", Collections.singletonList(\"application/postscript\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"psd\", Collections.singletonList(\"application/x-photoshop\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"py\", Collections.singletonList(\"text/x-python\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"raf\", Collections.singletonList(\"image/x-dcraw\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"rar\", Collections.singletonList(\"application/x-rar-compressed\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"reveal\", Collections.singletonList(\"text/reveal\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"rss\", Collections.singletonList(\"application/rss+xml\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"rtf\", Collections.singletonList(\"application/rtf\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"rw2\", Collections.singletonList(\"image/x-dcraw\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"schema\", Collections.singletonList(\"text/plain\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"sgf\", Collections.singletonList(\"application/sgf\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"sh-lib\", Collections.singletonList(\"text/x-shellscript\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"sh\", Collections.singletonList(\"text/x-shellscript\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"srf\", Collections.singletonList(\"image/x-dcraw\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"sr2\", Collections.singletonList(\"image/x-dcraw\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"svg\", Arrays.asList(\"image/svg+xml\", \"text/plain\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"swf\", Arrays.asList(\"application/x-shockwave-flash\", \"application/octet-stream\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"tar\", Collections.singletonList(\"application/x-tar\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"tar.bz2\", Collections.singletonList(\"application/x-bzip2\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"tar.gz\", Collections.singletonList(\"application/x-compressed\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"tbz2\", Collections.singletonList(\"application/x-bzip2\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"tcx\", Collections.singletonList(\"application/vnd.garmin.tcx+xml\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"tex\", Collections.singletonList(\"application/x-tex\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"tgz\", Collections.singletonList(\"application/x-compressed\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"tiff\", Collections.singletonList(\"image/tiff\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"tif\", Collections.singletonList(\"image/tiff\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"ttf\", Collections.singletonList(\"application/font-sfnt\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"txt\", Collections.singletonList(\"text/plain\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"vcard\", Collections.singletonList(\"text/vcard\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"vcf\", Collections.singletonList(\"text/vcard\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"vob\", Collections.singletonList(\"video/dvd\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"vsd\", Collections.singletonList(\"application/vnd.visio\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"vsdm\", Collections.singletonList(\"application/vnd.ms-visio.drawing.macroEnabled.12\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"vsdx\", Collections.singletonList(\"application/vnd.ms-visio.drawing\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"vssm\", Collections.singletonList(\"application/vnd.ms-visio.stencil.macroEnabled.12\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"vssx\", Collections.singletonList(\"application/vnd.ms-visio.stencil\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"vstm\", Collections.singletonList(\"application/vnd.ms-visio.template.macroEnabled.12\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"vstx\", Collections.singletonList(\"application/vnd.ms-visio.template\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"wav\", Collections.singletonList(\"audio/wav\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"webm\", Collections.singletonList(\"video/webm\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"woff\", Collections.singletonList(\"application/font-woff\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"wpd\", Collections.singletonList(\"application/vnd.wordperfect\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"wmv\", Collections.singletonList(\"video/x-ms-wmv\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"xcf\", Collections.singletonList(\"application/x-gimp\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"xla\", Collections.singletonList(\"application/vnd.ms-excel\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"xlam\", Collections.singletonList(\"application/vnd.ms-excel.addin.macroEnabled.12\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"xls\", Collections.singletonList(\"application/vnd.ms-excel\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"xlsb\", Collections.singletonList(\"application/vnd.ms-excel.sheet.binary.macroEnabled.12\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"xlsm\", Collections.singletonList(\"application/vnd.ms-excel.sheet.macroEnabled.12\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"xlsx\", Collections.singletonList(\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"xlt\", Collections.singletonList(\"application/vnd.ms-excel\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"xltm\", Collections.singletonList(\"application/vnd.ms-excel.template.macroEnabled.12\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"xltx\", Collections.singletonList(\"application/vnd.openxmlformats-officedocument.spreadsheetml.template\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"xml\", Arrays.asList(\"application/xml\", \"text/plain\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"xrf\", Collections.singletonList(\"image/x-dcraw\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"yaml\", Arrays.asList(\"application/yaml\", \"text/plain\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"yml\", Arrays.asList(\"application/yaml\", \"text/plain\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"zip\", Collections.singletonList(\"application/zip\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"url\", Collections.singletonList(\"application/internet-shortcut\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"webloc\", Collections.singletonList(\"application/internet-shortcut\"));\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled populateFileExtensionMimeTypeMapping from MimeTypeUtil.java into Swift.\n\n        Input:\n\n        Method Name: populateFileExtensionMimeTypeMapping\n\n        Method Code: rivate static void populateFileExtensionMimeTypeMapping() {\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"3gp\", Collections.singletonList(\"video/3gpp\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"7z\", Collections.singletonList(\"application/x-7z-compressed\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"accdb\", Collections.singletonList(\"application/msaccess\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"ai\", Collections.singletonList(\"application/illustrator\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"apk\", Collections.singletonList(\"application/vnd.android.package-archive\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"arw\", Collections.singletonList(\"image/x-dcraw\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"avi\", Collections.singletonList(\"video/x-msvideo\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"bash\", Collections.singletonList(\"text/x-shellscript\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"bat\", Collections.singletonList(\"application/x-msdos-program\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"blend\", Collections.singletonList(\"application/x-blender\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"bin\", Collections.singletonList(\"application/x-bin\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"bmp\", Collections.singletonList(\"image/bmp\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"bpg\", Collections.singletonList(\"image/bpg\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"bz2\", Collections.singletonList(\"application/x-bzip2\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"cb7\", Collections.singletonList(\"application/x-cbr\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"cba\", Collections.singletonList(\"application/x-cbr\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"cbr\", Collections.singletonList(\"application/x-cbr\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"cbt\", Collections.singletonList(\"application/x-cbr\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"cbtc\", Collections.singletonList(\"application/x-cbr\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"cbz\", Collections.singletonList(\"application/x-cbr\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"cc\", Collections.singletonList(\"text/x-c\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"cdr\", Collections.singletonList(\"application/coreldraw\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"class\", Collections.singletonList(\"application/java\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"cnf\", Collections.singletonList(\"text/plain\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"conf\", Collections.singletonList(\"text/plain\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"cpp\", Collections.singletonList(\"text/x-c++src\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"cr2\", Collections.singletonList(\"image/x-dcraw\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"css\", Collections.singletonList(\"text/css\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"csv\", Collections.singletonList(\"text/csv\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"cvbdl\", Collections.singletonList(\"application/x-cbr\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"c\", Collections.singletonList(\"text/x-c\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"c++\", Collections.singletonList(\"text/x-c++src\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"dcr\", Collections.singletonList(\"image/x-dcraw\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"deb\", Collections.singletonList(\"application/x-deb\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"dng\", Collections.singletonList(\"image/x-dcraw\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"doc\", Collections.singletonList(\"application/msword\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"docm\", Collections.singletonList(\"application/vnd.ms-word.document.macroEnabled.12\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"docx\", Collections.singletonList(\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"dot\", Collections.singletonList(\"application/msword\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"dotx\", Collections.singletonList(\"application/vnd.openxmlformats-officedocument.wordprocessingml.template\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"dv\", Collections.singletonList(\"video/dv\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"eot\", Collections.singletonList(\"application/vnd.ms-fontobject\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"epub\", Collections.singletonList(\"application/epub+zip\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"eps\", Collections.singletonList(\"application/postscript\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"erf\", Collections.singletonList(\"image/x-dcraw\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"exe\", Collections.singletonList(\"application/x-ms-dos-executable\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"eml\", Collections.singletonList(\"message/rfc822\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"fb2\", Arrays.asList(\"application/x-fictionbook+xml\", \"text/plain\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"flac\", Collections.singletonList(\"audio/flac\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"flv\", Collections.singletonList(\"video/x-flv\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"gif\", Collections.singletonList(\"image/gif\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"gpx\", Collections.singletonList(\"application/gpx+xml\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"gz\", Collections.singletonList(\"application/gzip\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"gzip\", Collections.singletonList(\"application/gzip\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"h\", Collections.singletonList(\"text/x-h\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"heic\", Collections.singletonList(\"image/heic\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"heif\", Collections.singletonList(\"image/heif\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"hh\", Collections.singletonList(\"text/x-h\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"hpp\", Collections.singletonList(\"text/x-h\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"htaccess\", Collections.singletonList(\"text/plain\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"html\", Arrays.asList(\"text/html\", \"text/plain\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"htm\", Arrays.asList(\"text/html\", \"text/plain\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"ical\", Collections.singletonList(\"text/calendar\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"ics\", Collections.singletonList(\"text/calendar\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"iiq\", Collections.singletonList(\"image/x-dcraw\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"impress\", Collections.singletonList(\"text/impress\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"java\", Collections.singletonList(\"text/x-java-source\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"jp2\", Collections.singletonList(\"image/jp2\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"jpeg\", Collections.singletonList(\"image/jpeg\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"jpg\", Collections.singletonList(\"image/jpeg\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"jps\", Collections.singletonList(\"image/jpeg\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"js\", Arrays.asList(\"application/javascript\", \"text/plain\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"json\", Arrays.asList(\"application/json\", \"text/plain\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"k25\", Collections.singletonList(\"image/x-dcraw\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"kdc\", Collections.singletonList(\"image/x-dcraw\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"key\", Collections.singletonList(\"application/x-iwork-keynote-sffkey\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"keynote\", Collections.singletonList(\"application/x-iwork-keynote-sffkey\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"kml\", Collections.singletonList(\"application/vnd.google-earth.kml+xml\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"kmz\", Collections.singletonList(\"application/vnd.google-earth.kmz\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"kra\", Collections.singletonList(\"application/x-krita\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"ldif\", Collections.singletonList(\"text/x-ldif\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"love\", Collections.singletonList(\"application/x-love-game\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"lwp\", Collections.singletonList(\"application/vnd.lotus-wordpro\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"m\", Arrays.asList(\"text/x-matlab\", \"text/plain\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"m2t\", Collections.singletonList(\"video/mp2t\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"m3u\", Collections.singletonList(\"audio/mpegurl\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"m3u8\", Collections.singletonList(\"audio/mpegurl\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"m4a\", Collections.singletonList(\"audio/mp4\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"m4b\", Collections.singletonList(\"audio/m4b\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"m4v\", Collections.singletonList(\"video/mp4\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"markdown\", Collections.singletonList(MIMETYPE_TEXT_MARKDOWN));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"mdown\", Collections.singletonList(MIMETYPE_TEXT_MARKDOWN));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"md\", Collections.singletonList(MIMETYPE_TEXT_MARKDOWN));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"mdb\", Collections.singletonList(\"application/msaccess\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"mdwn\", Collections.singletonList(MIMETYPE_TEXT_MARKDOWN));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"mkd\", Collections.singletonList(MIMETYPE_TEXT_MARKDOWN));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"mef\", Collections.singletonList(\"image/x-dcraw\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"mkv\", Collections.singletonList(\"video/x-matroska\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"mobi\", Collections.singletonList(\"application/x-mobipocket-ebook\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"mov\", Collections.singletonList(\"video/quicktime\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"mp3\", Collections.singletonList(\"audio/mpeg\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"mp4\", Collections.singletonList(\"video/mp4\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"mpeg\", Collections.singletonList(\"video/mpeg\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"mpg\", Collections.singletonList(\"video/mpeg\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"mpo\", Collections.singletonList(\"image/jpeg\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"msi\", Collections.singletonList(\"application/x-msi\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"mts\", Collections.singletonList(\"video/MP2T\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"mt2s\", Collections.singletonList(\"video/MP2T\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"nef\", Collections.singletonList(\"image/x-dcraw\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"numbers\", Collections.singletonList(\"application/x-iwork-numbers-sffnumbers\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"odf\", Collections.singletonList(\"application/vnd.oasis.opendocument.formula\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"odg\", Collections.singletonList(\"application/vnd.oasis.opendocument.graphics\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"odp\", Collections.singletonList(\"application/vnd.oasis.opendocument.presentation\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"ods\", Collections.singletonList(\"application/vnd.oasis.opendocument.spreadsheet\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"odt\", Collections.singletonList(\"application/vnd.oasis.opendocument.text\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"oga\", Collections.singletonList(\"audio/ogg\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"ogg\", Collections.singletonList(\"audio/ogg\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"ogv\", Collections.singletonList(\"video/ogg\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"one\", Collections.singletonList(\"application/msonenote\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"opus\", Collections.singletonList(\"audio/ogg\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"orf\", Collections.singletonList(\"image/x-dcraw\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"otf\", Collections.singletonList(\"application/font-sfnt\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"pages\", Collections.singletonList(\"application/x-iwork-pages-sffpages\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"pdf\", Collections.singletonList(MimeType.PDF));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"pfb\", Collections.singletonList(\"application/x-font\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"pef\", Collections.singletonList(\"image/x-dcraw\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"php\", Collections.singletonList(\"application/x-php\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"pl\", Collections.singletonList(\"application/x-perl\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"pls\", Collections.singletonList(\"audio/x-scpls\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"png\", Collections.singletonList(\"image/png\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"pot\", Collections.singletonList(\"application/vnd.ms-powerpoint\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"potm\", Collections.singletonList(\"application/vnd.ms-powerpoint.template.macroEnabled.12\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"potx\", Collections.singletonList(\"application/vnd.openxmlformats-officedocument.presentationml.template\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"ppa\", Collections.singletonList(\"application/vnd.ms-powerpoint\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"ppam\", Collections.singletonList(\"application/vnd.ms-powerpoint.addin.macroEnabled.12\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"pps\", Collections.singletonList(\"application/vnd.ms-powerpoint\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"ppsm\", Collections.singletonList(\"application/vnd.ms-powerpoint.slideshow.macroEnabled.12\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"ppsx\", Collections.singletonList(\"application/vnd.openxmlformats-officedocument.presentationml.slideshow\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"ppt\", Collections.singletonList(\"application/vnd.ms-powerpoint\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"pptm\", Collections.singletonList(\"application/vnd.ms-powerpoint.presentation.macroEnabled.12\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"pptx\", Collections.singletonList(\"application/vnd.openxmlformats-officedocument.presentationml.presentation\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"ps\", Collections.singletonList(\"application/postscript\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"psd\", Collections.singletonList(\"application/x-photoshop\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"py\", Collections.singletonList(\"text/x-python\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"raf\", Collections.singletonList(\"image/x-dcraw\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"rar\", Collections.singletonList(\"application/x-rar-compressed\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"reveal\", Collections.singletonList(\"text/reveal\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"rss\", Collections.singletonList(\"application/rss+xml\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"rtf\", Collections.singletonList(\"application/rtf\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"rw2\", Collections.singletonList(\"image/x-dcraw\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"schema\", Collections.singletonList(\"text/plain\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"sgf\", Collections.singletonList(\"application/sgf\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"sh-lib\", Collections.singletonList(\"text/x-shellscript\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"sh\", Collections.singletonList(\"text/x-shellscript\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"srf\", Collections.singletonList(\"image/x-dcraw\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"sr2\", Collections.singletonList(\"image/x-dcraw\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"svg\", Arrays.asList(\"image/svg+xml\", \"text/plain\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"swf\", Arrays.asList(\"application/x-shockwave-flash\", \"application/octet-stream\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"tar\", Collections.singletonList(\"application/x-tar\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"tar.bz2\", Collections.singletonList(\"application/x-bzip2\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"tar.gz\", Collections.singletonList(\"application/x-compressed\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"tbz2\", Collections.singletonList(\"application/x-bzip2\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"tcx\", Collections.singletonList(\"application/vnd.garmin.tcx+xml\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"tex\", Collections.singletonList(\"application/x-tex\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"tgz\", Collections.singletonList(\"application/x-compressed\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"tiff\", Collections.singletonList(\"image/tiff\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"tif\", Collections.singletonList(\"image/tiff\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"ttf\", Collections.singletonList(\"application/font-sfnt\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"txt\", Collections.singletonList(\"text/plain\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"vcard\", Collections.singletonList(\"text/vcard\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"vcf\", Collections.singletonList(\"text/vcard\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"vob\", Collections.singletonList(\"video/dvd\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"vsd\", Collections.singletonList(\"application/vnd.visio\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"vsdm\", Collections.singletonList(\"application/vnd.ms-visio.drawing.macroEnabled.12\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"vsdx\", Collections.singletonList(\"application/vnd.ms-visio.drawing\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"vssm\", Collections.singletonList(\"application/vnd.ms-visio.stencil.macroEnabled.12\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"vssx\", Collections.singletonList(\"application/vnd.ms-visio.stencil\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"vstm\", Collections.singletonList(\"application/vnd.ms-visio.template.macroEnabled.12\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"vstx\", Collections.singletonList(\"application/vnd.ms-visio.template\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"wav\", Collections.singletonList(\"audio/wav\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"webm\", Collections.singletonList(\"video/webm\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"woff\", Collections.singletonList(\"application/font-woff\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"wpd\", Collections.singletonList(\"application/vnd.wordperfect\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"wmv\", Collections.singletonList(\"video/x-ms-wmv\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"xcf\", Collections.singletonList(\"application/x-gimp\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"xla\", Collections.singletonList(\"application/vnd.ms-excel\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"xlam\", Collections.singletonList(\"application/vnd.ms-excel.addin.macroEnabled.12\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"xls\", Collections.singletonList(\"application/vnd.ms-excel\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"xlsb\", Collections.singletonList(\"application/vnd.ms-excel.sheet.binary.macroEnabled.12\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"xlsm\", Collections.singletonList(\"application/vnd.ms-excel.sheet.macroEnabled.12\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"xlsx\", Collections.singletonList(\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"xlt\", Collections.singletonList(\"application/vnd.ms-excel\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"xltm\", Collections.singletonList(\"application/vnd.ms-excel.template.macroEnabled.12\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"xltx\", Collections.singletonList(\"application/vnd.openxmlformats-officedocument.spreadsheetml.template\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"xml\", Arrays.asList(\"application/xml\", \"text/plain\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"xrf\", Collections.singletonList(\"image/x-dcraw\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"yaml\", Arrays.asList(\"application/yaml\", \"text/plain\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"yml\", Arrays.asList(\"application/yaml\", \"text/plain\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"zip\", Collections.singletonList(\"application/zip\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"url\", Collections.singletonList(\"application/internet-shortcut\"));\n        FILE_EXTENSION_TO_MIMETYPE_MAPPING.put(\"webloc\", Collections.singletonList(\"application/internet-shortcut\"));\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate static func populateFileExtensionMimeTypeMapping() {\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"3gp\"] = [\"video/3gpp\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"7z\"] = [\"application/x-7z-compressed\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"accdb\"] = [\"application/msaccess\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"ai\"] = [\"application/illustrator\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"apk\"] = [\"application/vnd.android.package-archive\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"arw\"] = [\"image/x-dcraw\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"avi\"] = [\"video/x-msvideo\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"bash\"] = [\"text/x-shellscript\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"bat\"] = [\"application/x-msdos-program\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"blend\"] = [\"application/x-blender\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"bin\"] = [\"application/x-bin\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"bmp\"] = [\"image/bmp\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"bpg\"] = [\"image/bpg\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"bz2\"] = [\"application/x-bzip2\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"cb7\"] = [\"application/x-cbr\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"cba\"] = [\"application/x-cbr\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"cbr\"] = [\"application/x-cbr\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"cbt\"] = [\"application/x-cbr\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"cbtc\"] = [\"application/x-cbr\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"cbz\"] = [\"application/x-cbr\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"cc\"] = [\"text/x-c\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"cdr\"] = [\"application/coreldraw\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"class\"] = [\"application/java\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"cnf\"] = [\"text/plain\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"conf\"] = [\"text/plain\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"cpp\"] = [\"text/x-c++src\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"cr2\"] = [\"image/x-dcraw\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"css\"] = [\"text/css\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"csv\"] = [\"text/csv\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"cvbdl\"] = [\"application/x-cbr\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"c\"] = [\"text/x-c\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"c++\"] = [\"text/x-c++src\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"dcr\"] = [\"image/x-dcraw\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"deb\"] = [\"application/x-deb\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"dng\"] = [\"image/x-dcraw\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"doc\"] = [\"application/msword\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"docm\"] = [\"application/vnd.ms-word.document.macroEnabled.12\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"docx\"] = [\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"dot\"] = [\"application/msword\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"dotx\"] = [\"application/vnd.openxmlformats-officedocument.wordprocessingml.template\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"dv\"] = [\"video/dv\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"eot\"] = [\"application/vnd.ms-fontobject\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"epub\"] = [\"application/epub+zip\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"eps\"] = [\"application/postscript\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"erf\"] = [\"image/x-dcraw\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"exe\"] = [\"application/x-ms-dos-executable\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"eml\"] = [\"message/rfc822\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"fb2\"] = [\"application/x-fictionbook+xml\", \"text/plain\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"flac\"] = [\"audio/flac\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"flv\"] = [\"video/x-flv\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"gif\"] = [\"image/gif\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"gpx\"] = [\"application/gpx+xml\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"gz\"] = [\"application/gzip\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"gzip\"] = [\"application/gzip\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"h\"] = [\"text/x-h\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"heic\"] = [\"image/heic\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"heif\"] = [\"image/heif\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"hh\"] = [\"text/x-h\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"hpp\"] = [\"text/x-h\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"htaccess\"] = [\"text/plain\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"html\"] = [\"text/html\", \"text/plain\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"htm\"] = [\"text/html\", \"text/plain\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"ical\"] = [\"text/calendar\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"ics\"] = [\"text/calendar\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"iiq\"] = [\"image/x-dcraw\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"impress\"] = [\"text/impress\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"java\"] = [\"text/x-java-source\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"jp2\"] = [\"image/jp2\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"jpeg\"] = [\"image/jpeg\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"jpg\"] = [\"image/jpeg\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"jps\"] = [\"image/jpeg\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"js\"] = [\"application/javascript\", \"text/plain\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"json\"] = [\"application/json\", \"text/plain\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"k25\"] = [\"image/x-dcraw\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"kdc\"] = [\"image/x-dcraw\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"key\"] = [\"application/x-iwork-keynote-sffkey\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"keynote\"] = [\"application/x-iwork-keynote-sffkey\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"kml\"] = [\"application/vnd.google-earth.kml+xml\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"kmz\"] = [\"application/vnd.google-earth.kmz\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"kra\"] = [\"application/x-krita\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"ldif\"] = [\"text/x-ldif\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"love\"] = [\"application/x-love-game\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"lwp\"] = [\"application/vnd.lotus-wordpro\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"m\"] = [\"text/x-matlab\", \"text/plain\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"m2t\"] = [\"video/mp2t\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"m3u\"] = [\"audio/mpegurl\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"m3u8\"] = [\"audio/mpegurl\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"m4a\"] = [\"audio/mp4\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"m4b\"] = [\"audio/m4b\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"m4v\"] = [\"video/mp4\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"markdown\"] = [MIMETYPE_TEXT_MARKDOWN]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"mdown\"] = [MIMETYPE_TEXT_MARKDOWN]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"md\"] = [MIMETYPE_TEXT_MARKDOWN]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"mdb\"] = [\"application/msaccess\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"mdwn\"] = [MIMETYPE_TEXT_MARKDOWN]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"mkd\"] = [MIMETYPE_TEXT_MARKDOWN]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"mef\"] = [\"image/x-dcraw\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"mkv\"] = [\"video/x-matroska\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"mobi\"] = [\"application/x-mobipocket-ebook\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"mov\"] = [\"video/quicktime\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"mp3\"] = [\"audio/mpeg\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"mp4\"] = [\"video/mp4\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"mpeg\"] = [\"video/mpeg\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"mpg\"] = [\"video/mpeg\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"mpo\"] = [\"image/jpeg\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"msi\"] = [\"application/x-msi\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"mts\"] = [\"video/MP2T\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"mt2s\"] = [\"video/MP2T\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"nef\"] = [\"image/x-dcraw\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"numbers\"] = [\"application/x-iwork-numbers-sffnumbers\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"odf\"] = [\"application/vnd.oasis.opendocument.formula\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"odg\"] = [\"application/vnd.oasis.opendocument.graphics\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"odp\"] = [\"application/vnd.oasis.opendocument.presentation\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"ods\"] = [\"application/vnd.oasis.opendocument.spreadsheet\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"odt\"] = [\"application/vnd.oasis.opendocument.text\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"oga\"] = [\"audio/ogg\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"ogg\"] = [\"audio/ogg\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"ogv\"] = [\"video/ogg\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"one\"] = [\"application/msonenote\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"opus\"] = [\"audio/ogg\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"orf\"] = [\"image/x-dcraw\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"otf\"] = [\"application/font-sfnt\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"pages\"] = [\"application/x-iwork-pages-sffpages\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"pdf\"] = [MimeType.PDF]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"pfb\"] = [\"application/x-font\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"pef\"] = [\"image/x-dcraw\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"php\"] = [\"application/x-php\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"pl\"] = [\"application/x-perl\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"pls\"] = [\"audio/x-scpls\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"png\"] = [\"image/png\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"pot\"] = [\"application/vnd.ms-powerpoint\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"potm\"] = [\"application/vnd.ms-powerpoint.template.macroEnabled.12\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"potx\"] = [\"application/vnd.openxmlformats-officedocument.presentationml.template\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"ppa\"] = [\"application/vnd.ms-powerpoint\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"ppam\"] = [\"application/vnd.ms-powerpoint.addin.macroEnabled.12\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"pps\"] = [\"application/vnd.ms-powerpoint\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"ppsm\"] = [\"application/vnd.ms-powerpoint.slideshow.macroEnabled.12\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"ppsx\"] = [\"application/vnd.openxmlformats-officedocument.presentationml.slideshow\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"ppt\"] = [\"application/vnd.ms-powerpoint\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"pptm\"] = [\"application/vnd.ms-powerpoint.presentation.macroEnabled.12\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"pptx\"] = [\"application/vnd.openxmlformats-officedocument.presentationml.presentation\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"ps\"] = [\"application/postscript\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"psd\"] = [\"application/x-photoshop\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"py\"] = [\"text/x-python\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"raf\"] = [\"image/x-dcraw\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"rar\"] = [\"application/x-rar-compressed\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"reveal\"] = [\"text/reveal\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"rss\"] = [\"application/rss+xml\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"rtf\"] = [\"application/rtf\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"rw2\"] = [\"image/x-dcraw\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"schema\"] = [\"text/plain\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"sgf\"] = [\"application/sgf\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"sh-lib\"] = [\"text/x-shellscript\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"sh\"] = [\"text/x-shellscript\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"srf\"] = [\"image/x-dcraw\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"sr2\"] = [\"image/x-dcraw\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"svg\"] = [\"image/svg+xml\", \"text/plain\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"swf\"] = [\"application/x-shockwave-flash\", \"application/octet-stream\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"tar\"] = [\"application/x-tar\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"tar.bz2\"] = [\"application/x-bzip2\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"tar.gz\"] = [\"application/x-compressed\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"tbz2\"] = [\"application/x-bzip2\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"tcx\"] = [\"application/vnd.garmin.tcx+xml\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"tex\"] = [\"application/x-tex\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"tgz\"] = [\"application/x-compressed\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"tiff\"] = [\"image/tiff\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"tif\"] = [\"image/tiff\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"ttf\"] = [\"application/font-sfnt\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"txt\"] = [\"text/plain\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"vcard\"] = [\"text/vcard\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"vcf\"] = [\"text/vcard\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"vob\"] = [\"video/dvd\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"vsd\"] = [\"application/vnd.visio\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"vsdm\"] = [\"application/vnd.ms-visio.drawing.macroEnabled.12\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"vsdx\"] = [\"application/vnd.ms-visio.drawing\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"vssm\"] = [\"application/vnd.ms-visio.stencil.macroEnabled.12\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"vssx\"] = [\"application/vnd.ms-visio.stencil\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"vstm\"] = [\"application/vnd.ms-visio.template.macroEnabled.12\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"vstx\"] = [\"application/vnd.ms-visio.template\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"wav\"] = [\"audio/wav\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"webm\"] = [\"video/webm\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"woff\"] = [\"application/font-woff\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"wpd\"] = [\"application/vnd.wordperfect\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"wmv\"] = [\"video/x-ms-wmv\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"xcf\"] = [\"application/x-gimp\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"xla\"] = [\"application/vnd.ms-excel\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"xlam\"] = [\"application/vnd.ms-excel.addin.macroEnabled.12\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"xls\"] = [\"application/vnd.ms-excel\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"xlsb\"] = [\"application/vnd.ms-excel.sheet.binary.macroEnabled.12\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"xlsm\"] = [\"application/vnd.ms-excel.sheet.macroEnabled.12\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"xlsx\"] = [\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"xlt\"] = [\"application/vnd.ms-excel\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"xltm\"] = [\"application/vnd.ms-excel.template.macroEnabled.12\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"xltx\"] = [\"application/vnd.openxmlformats-officedocument.spreadsheetml.template\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"xml\"] = [\"application/xml\", \"text/plain\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"xrf\"] = [\"image/x-dcraw\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"yaml\"] = [\"application/yaml\", \"text/plain\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"yml\"] = [\"application/yaml\", \"text/plain\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"zip\"] = [\"application/zip\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"url\"] = [\"application/internet-shortcut\"]\n    FILE_EXTENSION_TO_MIMETYPE_MAPPING[\"webloc\"] = [\"application/internet-shortcut\"]\n}\n```"
    }
]