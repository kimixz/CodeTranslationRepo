[
    {
        "method_name": "beforeScreenshot",
        "method_code": "@BeforeClass\n    public static void beforeScreenshot() {\n        Screengrab.setDefaultScreenshotStrategy(new UiAutomatorScreenshotStrategy());\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled beforeScreenshot from ScreenshotsIT.java into Swift.\n\n        Input:\n\n        Method Name: beforeScreenshot\n\n        Method Code: @BeforeClass\n    public static void beforeScreenshot() {\n        Screengrab.setDefaultScreenshotStrategy(new UiAutomatorScreenshotStrategy());\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport XCTest\n\nclass ScreenshotsIT: XCTestCase {\n    override class func setUp() {\n        super.setUp()\n        Screengrab.setDefaultScreenshotStrategy(UiAutomatorScreenshotStrategy())\n    }\n}\n```"
    },
    {
        "method_name": "gridViewScreenshot",
        "method_code": "@Test\n    public void gridViewScreenshot() {\n        ActivityScenario.launch(FileDisplayActivity.class);\n\n        onView(anyOf(withText(R.string.action_switch_grid_view), withId(R.id.switch_grid_view_button))).perform(click());\n\n        shortSleep();\n\n        Screengrab.screenshot(\"01_gridView\");\n\n        onView(anyOf(withText(R.string.action_switch_list_view), withId(R.id.switch_grid_view_button))).perform(click());\n\n        Assert.assertTrue(true); // if we reach this, everything is ok\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled gridViewScreenshot from ScreenshotsIT.java into Swift.\n\n        Input:\n\n        Method Name: gridViewScreenshot\n\n        Method Code: @Test\n    public void gridViewScreenshot() {\n        ActivityScenario.launch(FileDisplayActivity.class);\n\n        onView(anyOf(withText(R.string.action_switch_grid_view), withId(R.id.switch_grid_view_button))).perform(click());\n\n        shortSleep();\n\n        Screengrab.screenshot(\"01_gridView\");\n\n        onView(anyOf(withText(R.string.action_switch_list_view), withId(R.id.switch_grid_view_button))).perform(click());\n\n        Assert.assertTrue(true); // if we reach this, everything is ok\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc gridViewScreenshot() {\n    let app = XCUIApplication()\n    app.launch()\n\n    let gridViewButton = app.buttons.matching(NSPredicate(format: \"label == %@ OR identifier == %@\", \"Switch to Grid View\", \"switch_grid_view_button\")).firstMatch\n    gridViewButton.tap()\n\n    sleep(1)\n\n    let screenshot = XCUIScreen.main.screenshot()\n    let attachment = XCTAttachment(screenshot: screenshot)\n    attachment.name = \"01_gridView\"\n    attachment.lifetime = .keepAlways\n    add(attachment)\n\n    let listViewButton = app.buttons.matching(NSPredicate(format: \"label == %@ OR identifier == %@\", \"Switch to List View\", \"switch_grid_view_button\")).firstMatch\n    listViewButton.tap()\n\n    XCTAssertTrue(true) // if we reach this, everything is ok\n}\n```"
    },
    {
        "method_name": "listViewScreenshot",
        "method_code": "@Test\n    public void listViewScreenshot() {\n        String path = \"/Camera/\";\n\n        // folder does not exist yet\n        if (getStorageManager().getFileByEncryptedRemotePath(path) == null) {\n            SyncOperation syncOp = new CreateFolderOperation(path, user, targetContext, getStorageManager());\n            RemoteOperationResult result = syncOp.execute(client);\n\n            assertTrue(result.isSuccess());\n        }\n\n        ActivityScenario.launch(FileDisplayActivity.class);\n\n        // go into work folder\n        onView(withId(R.id.list_root)).perform(RecyclerViewActions.actionOnItemAtPosition(0, click()));\n\n        Screengrab.screenshot(\"02_listView\");\n\n        Assert.assertTrue(true); // if we reach this, everything is ok\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled listViewScreenshot from ScreenshotsIT.java into Swift.\n\n        Input:\n\n        Method Name: listViewScreenshot\n\n        Method Code: @Test\n    public void listViewScreenshot() {\n        String path = \"/Camera/\";\n\n        // folder does not exist yet\n        if (getStorageManager().getFileByEncryptedRemotePath(path) == null) {\n            SyncOperation syncOp = new CreateFolderOperation(path, user, targetContext, getStorageManager());\n            RemoteOperationResult result = syncOp.execute(client);\n\n            assertTrue(result.isSuccess());\n        }\n\n        ActivityScenario.launch(FileDisplayActivity.class);\n\n        // go into work folder\n        onView(withId(R.id.list_root)).perform(RecyclerViewActions.actionOnItemAtPosition(0, click()));\n\n        Screengrab.screenshot(\"02_listView\");\n\n        Assert.assertTrue(true); // if we reach this, everything is ok\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc listViewScreenshot() {\n    let path = \"/Camera/\"\n\n    // folder does not exist yet\n    if getStorageManager().getFileByEncryptedRemotePath(path) == nil {\n        let syncOp = CreateFolderOperation(path: path, user: user, targetContext: targetContext, storageManager: getStorageManager())\n        let result = syncOp.execute(client: client)\n\n        XCTAssertTrue(result.isSuccess)\n    }\n\n    let scenario = FileDisplayActivity.launch()\n\n    // go into work folder\n    onView(withId: R.id.list_root).perform(RecyclerViewActions.actionOnItemAtPosition(0, click()))\n\n    Screengrab.screenshot(\"02_listView\")\n\n    XCTAssertTrue(true) // if we reach this, everything is ok\n}\n```"
    },
    {
        "method_name": "drawerScreenshot",
        "method_code": "@Test\n    public void drawerScreenshot() {\n        ActivityScenario.launch(FileDisplayActivity.class);\n\n        onView(withId(R.id.drawer_layout)).perform(DrawerActions.open());\n\n        Screengrab.screenshot(\"03_drawer\");\n\n        onView(withId(R.id.drawer_layout)).perform(DrawerActions.close());\n\n        Assert.assertTrue(true); // if we reach this, everything is ok\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled drawerScreenshot from ScreenshotsIT.java into Swift.\n\n        Input:\n\n        Method Name: drawerScreenshot\n\n        Method Code: @Test\n    public void drawerScreenshot() {\n        ActivityScenario.launch(FileDisplayActivity.class);\n\n        onView(withId(R.id.drawer_layout)).perform(DrawerActions.open());\n\n        Screengrab.screenshot(\"03_drawer\");\n\n        onView(withId(R.id.drawer_layout)).perform(DrawerActions.close());\n\n        Assert.assertTrue(true); // if we reach this, everything is ok\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc drawerScreenshot() {\n    let app = XCUIApplication()\n    app.launch()\n\n    let drawer = app.otherElements[\"drawer_layout\"]\n    drawer.swipeRight()\n\n    let screenshot = XCUIScreen.main.screenshot()\n    let attachment = XCTAttachment(screenshot: screenshot)\n    attachment.name = \"03_drawer\"\n    attachment.lifetime = .keepAlways\n    add(attachment)\n\n    drawer.swipeLeft()\n\n    XCTAssertTrue(true) // if we reach this, everything is ok\n}\n```"
    },
    {
        "method_name": "multipleAccountsScreenshot",
        "method_code": "@Test\n    public void multipleAccountsScreenshot() {\n        ActivityScenario.launch(FileDisplayActivity.class);\n\n        onView(withId(R.id.switch_account_button)).perform(click());\n\n        Screengrab.screenshot(\"04_accounts\");\n\n        pressBack();\n\n        Assert.assertTrue(true); // if we reach this, everything is ok\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled multipleAccountsScreenshot from ScreenshotsIT.java into Swift.\n\n        Input:\n\n        Method Name: multipleAccountsScreenshot\n\n        Method Code: @Test\n    public void multipleAccountsScreenshot() {\n        ActivityScenario.launch(FileDisplayActivity.class);\n\n        onView(withId(R.id.switch_account_button)).perform(click());\n\n        Screengrab.screenshot(\"04_accounts\");\n\n        pressBack();\n\n        Assert.assertTrue(true); // if we reach this, everything is ok\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc multipleAccountsScreenshot() {\n    let app = XCUIApplication()\n    app.launch()\n\n    app.buttons[\"switch_account_button\"].tap()\n\n    let screenshot = XCUIScreen.main.screenshot()\n    let attachment = XCTAttachment(screenshot: screenshot)\n    attachment.name = \"04_accounts\"\n    attachment.lifetime = .keepAlways\n    add(attachment)\n\n    app.navigationBars.buttons.element(boundBy: 0).tap()\n\n    XCTAssertTrue(true) // if we reach this, everything is ok\n}\n```"
    },
    {
        "method_name": "autoUploadScreenshot",
        "method_code": "@Test\n    public void autoUploadScreenshot() {\n        ActivityScenario.launch(SyncedFoldersActivity.class);\n\n        Screengrab.screenshot(\"05_autoUpload\");\n\n        Assert.assertTrue(true); // if we reach this, everything is ok\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled autoUploadScreenshot from ScreenshotsIT.java into Swift.\n\n        Input:\n\n        Method Name: autoUploadScreenshot\n\n        Method Code: @Test\n    public void autoUploadScreenshot() {\n        ActivityScenario.launch(SyncedFoldersActivity.class);\n\n        Screengrab.screenshot(\"05_autoUpload\");\n\n        Assert.assertTrue(true); // if we reach this, everything is ok\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc testAutoUploadScreenshot() {\n    let app = XCUIApplication()\n    app.launch()\n\n    let screenshot = XCUIScreen.main.screenshot()\n    let attachment = XCTAttachment(screenshot: screenshot)\n    attachment.name = \"05_autoUpload\"\n    attachment.lifetime = .keepAlways\n    add(attachment)\n\n    XCTAssertTrue(true) // if we reach this, everything is ok\n}\n```"
    },
    {
        "method_name": "davdroidScreenshot",
        "method_code": "@Test\n    public void davdroidScreenshot() {\n        ActivityScenario.launch(SettingsActivity.class);\n\n        onData(PreferenceMatchers.withTitle(R.string.prefs_category_more)).perform(ViewActions.scrollTo());\n\n        shortSleep();\n\n        Screengrab.screenshot(\"06_davdroid\");\n\n        Assert.assertTrue(true); // if we reach this, everything is ok\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled davdroidScreenshot from ScreenshotsIT.java into Swift.\n\n        Input:\n\n        Method Name: davdroidScreenshot\n\n        Method Code: @Test\n    public void davdroidScreenshot() {\n        ActivityScenario.launch(SettingsActivity.class);\n\n        onData(PreferenceMatchers.withTitle(R.string.prefs_category_more)).perform(ViewActions.scrollTo());\n\n        shortSleep();\n\n        Screengrab.screenshot(\"06_davdroid\");\n\n        Assert.assertTrue(true); // if we reach this, everything is ok\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc davdroidScreenshot() {\n    let app = XCUIApplication()\n    app.launch()\n\n    let moreCell = app.tables.staticTexts[\"More\"]\n    moreCell.scrollToElement()\n\n    shortSleep()\n\n    let screenshot = XCUIScreen.main.screenshot()\n    let attachment = XCTAttachment(screenshot: screenshot)\n    attachment.name = \"06_davdroid\"\n    attachment.lifetime = .keepAlways\n    add(attachment)\n\n    XCTAssertTrue(true) // if we reach this, everything is ok\n}\n```"
    }
]