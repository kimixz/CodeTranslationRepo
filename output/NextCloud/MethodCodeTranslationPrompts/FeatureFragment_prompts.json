[
    {
        "method_name": "newInstance",
        "method_code": "static public FeatureFragment newInstance(FeatureItem item) {\n        FeatureFragment f = new FeatureFragment();\n        Bundle args = new Bundle();\n        args.putParcelable(\"feature\", item);\n        f.setArguments(args);\n        return f;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled newInstance from FeatureFragment.java into Swift.\n\n        Input:\n\n        Method Name: newInstance\n\n        Method Code: static public FeatureFragment newInstance(FeatureItem item) {\n        FeatureFragment f = new FeatureFragment();\n        Bundle args = new Bundle();\n        args.putParcelable(\"feature\", item);\n        f.setArguments(args);\n        return f;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func newInstance(item: FeatureItem) -> FeatureFragment {\n    let f = FeatureFragment()\n    let args = Bundle()\n    args.putParcelable(\"feature\", item)\n    f.setArguments(args)\n    return f\n}\n```"
    },
    {
        "method_name": "onCreate",
        "method_code": "@Override\n    public void onCreate(@Nullable Bundle savedInstanceState) {\n        viewThemeUtils = viewThemeUtilsFactory.withPrimaryAsBackground();\n        super.onCreate(savedInstanceState);\n\n        Bundle bundle = getArguments();\n        if (bundle != null) {\n            item = BundleExtensionsKt.getParcelableArgument(bundle, \"feature\", FeatureItem.class);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreate from FeatureFragment.java into Swift.\n\n        Input:\n\n        Method Name: onCreate\n\n        Method Code: @Override\n    public void onCreate(@Nullable Bundle savedInstanceState) {\n        viewThemeUtils = viewThemeUtilsFactory.withPrimaryAsBackground();\n        super.onCreate(savedInstanceState);\n\n        Bundle bundle = getArguments();\n        if (bundle != null) {\n            item = BundleExtensionsKt.getParcelableArgument(bundle, \"feature\", FeatureItem.class);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    \n    viewThemeUtils = viewThemeUtilsFactory.withPrimaryAsBackground()\n    \n    if let bundle = self.arguments {\n        item = bundle.getParcelableArgument(key: \"feature\", type: FeatureItem.self)\n    }\n}\n```"
    },
    {
        "method_name": "onCreateView",
        "method_code": "@Nullable\n    @Override\n    public View onCreateView(@NonNull LayoutInflater inflater,\n                             @Nullable ViewGroup container,\n                             @Nullable Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.whats_new_element, container, false);\n\n        ImageView whatsNewImage = view.findViewById(R.id.whatsNewImage);\n        if (item.shouldShowImage()) {\n            final Drawable image = ResourcesCompat.getDrawable(getResources(), item.getImage(), null);\n            if (image != null) {\n                whatsNewImage.setImageDrawable(viewThemeUtils.platform.tintDrawable(requireContext(), image, ColorRole.ON_PRIMARY));\n            }\n        }\n\n        TextView whatsNewTitle = view.findViewById(R.id.whatsNewTitle);\n        if (item.shouldShowTitleText()) {\n            whatsNewTitle.setText(item.getTitleText());\n            viewThemeUtils.platform.colorTextView(whatsNewTitle, ColorRole.ON_PRIMARY);\n            whatsNewTitle.setVisibility(View.VISIBLE);\n        } else {\n            whatsNewTitle.setVisibility(View.GONE);\n        }\n\n        LinearLayout linearLayout = view.findViewById(R.id.whatsNewTextLayout);\n        if (item.shouldShowContentText()) {\n            if (item.shouldShowBulletPointList()) {\n                String[] texts = getText(item.getContentText()).toString().split(\"\\n\");\n\n                for (String text : texts) {\n                    TextView textView = generateTextView(text, requireContext(),\n                                                         item.shouldContentCentered(), true);\n\n                    linearLayout.addView(textView);\n                }\n            } else {\n                TextView textView = generateTextView(getText(item.getContentText()).toString(),\n                                                     requireContext(), item.shouldContentCentered(), false);\n\n                linearLayout.addView(textView);\n            }\n        } else {\n            linearLayout.setVisibility(View.GONE);\n        }\n\n        return view;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreateView from FeatureFragment.java into Swift.\n\n        Input:\n\n        Method Name: onCreateView\n\n        Method Code: @Nullable\n    @Override\n    public View onCreateView(@NonNull LayoutInflater inflater,\n                             @Nullable ViewGroup container,\n                             @Nullable Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.whats_new_element, container, false);\n\n        ImageView whatsNewImage = view.findViewById(R.id.whatsNewImage);\n        if (item.shouldShowImage()) {\n            final Drawable image = ResourcesCompat.getDrawable(getResources(), item.getImage(), null);\n            if (image != null) {\n                whatsNewImage.setImageDrawable(viewThemeUtils.platform.tintDrawable(requireContext(), image, ColorRole.ON_PRIMARY));\n            }\n        }\n\n        TextView whatsNewTitle = view.findViewById(R.id.whatsNewTitle);\n        if (item.shouldShowTitleText()) {\n            whatsNewTitle.setText(item.getTitleText());\n            viewThemeUtils.platform.colorTextView(whatsNewTitle, ColorRole.ON_PRIMARY);\n            whatsNewTitle.setVisibility(View.VISIBLE);\n        } else {\n            whatsNewTitle.setVisibility(View.GONE);\n        }\n\n        LinearLayout linearLayout = view.findViewById(R.id.whatsNewTextLayout);\n        if (item.shouldShowContentText()) {\n            if (item.shouldShowBulletPointList()) {\n                String[] texts = getText(item.getContentText()).toString().split(\"\\n\");\n\n                for (String text : texts) {\n                    TextView textView = generateTextView(text, requireContext(),\n                                                         item.shouldContentCentered(), true);\n\n                    linearLayout.addView(textView);\n                }\n            } else {\n                TextView textView = generateTextView(getText(item.getContentText()).toString(),\n                                                     requireContext(), item.shouldContentCentered(), false);\n\n                linearLayout.addView(textView);\n            }\n        } else {\n            linearLayout.setVisibility(View.GONE);\n        }\n\n        return view;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    \n    let view = inflater.inflate(R.layout.whats_new_element, container, false)\n    \n    if let whatsNewImage = view.findViewById(R.id.whatsNewImage) as? UIImageView {\n        if item.shouldShowImage() {\n            if let image = ResourcesCompat.getDrawable(getResources(), item.getImage(), nil) {\n                whatsNewImage.image = viewThemeUtils.platform.tintDrawable(requireContext(), image, ColorRole.ON_PRIMARY)\n            }\n        }\n    }\n    \n    if let whatsNewTitle = view.findViewById(R.id.whatsNewTitle) as? UILabel {\n        if item.shouldShowTitleText() {\n            whatsNewTitle.text = item.getTitleText()\n            viewThemeUtils.platform.colorTextView(whatsNewTitle, ColorRole.ON_PRIMARY)\n            whatsNewTitle.isHidden = false\n        } else {\n            whatsNewTitle.isHidden = true\n        }\n    }\n    \n    if let linearLayout = view.findViewById(R.id.whatsNewTextLayout) as? UIStackView {\n        if item.shouldShowContentText() {\n            if item.shouldShowBulletPointList() {\n                let texts = getText(item.getContentText()).toString().split(separator: \"\\n\")\n                \n                for text in texts {\n                    let textView = generateTextView(String(text), requireContext(), item.shouldContentCentered(), true)\n                    linearLayout.addArrangedSubview(textView)\n                }\n            } else {\n                let textView = generateTextView(getText(item.getContentText()).toString(), requireContext(), item.shouldContentCentered(), false)\n                linearLayout.addArrangedSubview(textView)\n            }\n        } else {\n            linearLayout.isHidden = true\n        }\n    }\n}\n```"
    },
    {
        "method_name": "generateTextView",
        "method_code": "private TextView generateTextView(String text, Context context,\n                                      boolean shouldContentCentered,\n                                      boolean showBulletPoints) {\n        int standardMargin = context.getResources().getDimensionPixelSize(R.dimen.standard_margin);\n        int doubleMargin = context.getResources()\n            .getDimensionPixelSize(R.dimen.standard_double_margin);\n        int zeroMargin = context.getResources().getDimensionPixelSize(R.dimen.zero);\n\n        TextView textView = new TextView(context);\n        LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(\n            ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\n        layoutParams.setMargins(doubleMargin, standardMargin, doubleMargin, zeroMargin);\n        textView.setTextAppearance(context, R.style.NextcloudTextAppearanceMedium);\n        textView.setLayoutParams(layoutParams);\n\n        if (showBulletPoints) {\n            BulletSpan bulletSpan = new BulletSpan(standardMargin);\n            SpannableString spannableString = new SpannableString(text);\n            spannableString.setSpan(bulletSpan, 0, spannableString.length(),\n                                    Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n            textView.setText(spannableString);\n        } else {\n            textView.setText(text);\n        }\n        viewThemeUtils.platform.colorTextView(textView, ColorRole.ON_PRIMARY);\n\n        if (!shouldContentCentered) {\n            textView.setGravity(Gravity.START);\n        } else {\n            textView.setGravity(Gravity.CENTER_HORIZONTAL);\n        }\n\n        return textView;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled generateTextView from FeatureFragment.java into Swift.\n\n        Input:\n\n        Method Name: generateTextView\n\n        Method Code: private TextView generateTextView(String text, Context context,\n                                      boolean shouldContentCentered,\n                                      boolean showBulletPoints) {\n        int standardMargin = context.getResources().getDimensionPixelSize(R.dimen.standard_margin);\n        int doubleMargin = context.getResources()\n            .getDimensionPixelSize(R.dimen.standard_double_margin);\n        int zeroMargin = context.getResources().getDimensionPixelSize(R.dimen.zero);\n\n        TextView textView = new TextView(context);\n        LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(\n            ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\n        layoutParams.setMargins(doubleMargin, standardMargin, doubleMargin, zeroMargin);\n        textView.setTextAppearance(context, R.style.NextcloudTextAppearanceMedium);\n        textView.setLayoutParams(layoutParams);\n\n        if (showBulletPoints) {\n            BulletSpan bulletSpan = new BulletSpan(standardMargin);\n            SpannableString spannableString = new SpannableString(text);\n            spannableString.setSpan(bulletSpan, 0, spannableString.length(),\n                                    Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n            textView.setText(spannableString);\n        } else {\n            textView.setText(text);\n        }\n        viewThemeUtils.platform.colorTextView(textView, ColorRole.ON_PRIMARY);\n\n        if (!shouldContentCentered) {\n            textView.setGravity(Gravity.START);\n        } else {\n            textView.setGravity(Gravity.CENTER_HORIZONTAL);\n        }\n\n        return textView;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func generateTextView(text: String, context: Context, shouldContentCentered: Bool, showBulletPoints: Bool) -> TextView {\n    let standardMargin = context.resources.getDimensionPixelSize(R.dimen.standard_margin)\n    let doubleMargin = context.resources.getDimensionPixelSize(R.dimen.standard_double_margin)\n    let zeroMargin = context.resources.getDimensionPixelSize(R.dimen.zero)\n\n    let textView = TextView(context)\n    let layoutParams = LinearLayout.LayoutParams(width: ViewGroup.LayoutParams.MATCH_PARENT, height: ViewGroup.LayoutParams.WRAP_CONTENT)\n    layoutParams.setMargins(left: doubleMargin, top: standardMargin, right: doubleMargin, bottom: zeroMargin)\n    textView.setTextAppearance(context, R.style.NextcloudTextAppearanceMedium)\n    textView.layoutParams = layoutParams\n\n    if showBulletPoints {\n        let bulletSpan = BulletSpan(standardMargin)\n        let spannableString = SpannableString(text)\n        spannableString.setSpan(bulletSpan, start: 0, end: spannableString.length, flags: Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)\n        textView.text = spannableString\n    } else {\n        textView.text = text\n    }\n    viewThemeUtils.platform.colorTextView(textView, ColorRole.ON_PRIMARY)\n\n    if !shouldContentCentered {\n        textView.gravity = Gravity.START\n    } else {\n        textView.gravity = Gravity.CENTER_HORIZONTAL\n    }\n\n    return textView\n}\n```"
    }
]