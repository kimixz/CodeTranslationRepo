[
    {
        "method_name": "searchAndColor",
        "method_code": "public static @NonNull\n    String searchAndColor(@Nullable String text, @Nullable String searchText,\n                          @ColorInt int color) {\n\n        if (text != null) {\n\n            if (text.isEmpty() || searchText == null || searchText.isEmpty()) {\n                return text;\n            }\n\n            Matcher matcher = Pattern.compile(searchText,\n                                              Pattern.CASE_INSENSITIVE | Pattern.LITERAL).matcher(text);\n\n            StringBuffer stringBuffer = new StringBuffer();\n\n            while (matcher.find()) {\n                String replacement = matcher.group().replace(\n                    matcher.group(),\n                    String.format(Locale.getDefault(), \"<font color='%d'><b>%s</b></font>\", color,\n                                  matcher.group())\n                                                            );\n                matcher.appendReplacement(stringBuffer, Matcher.quoteReplacement(replacement));\n            }\n            matcher.appendTail(stringBuffer);\n\n            return stringBuffer.toString();\n        } else {\n            return \"\";\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled searchAndColor from StringUtils.java into Swift.\n\n        Input:\n\n        Method Name: searchAndColor\n\n        Method Code: public static @NonNull\n    String searchAndColor(@Nullable String text, @Nullable String searchText,\n                          @ColorInt int color) {\n\n        if (text != null) {\n\n            if (text.isEmpty() || searchText == null || searchText.isEmpty()) {\n                return text;\n            }\n\n            Matcher matcher = Pattern.compile(searchText,\n                                              Pattern.CASE_INSENSITIVE | Pattern.LITERAL).matcher(text);\n\n            StringBuffer stringBuffer = new StringBuffer();\n\n            while (matcher.find()) {\n                String replacement = matcher.group().replace(\n                    matcher.group(),\n                    String.format(Locale.getDefault(), \"<font color='%d'><b>%s</b></font>\", color,\n                                  matcher.group())\n                                                            );\n                matcher.appendReplacement(stringBuffer, Matcher.quoteReplacement(replacement));\n            }\n            matcher.appendTail(stringBuffer);\n\n            return stringBuffer.toString();\n        } else {\n            return \"\";\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport Foundation\n\nfunc searchAndColor(text: String?, searchText: String?, color: Int) -> String {\n    guard let text = text else {\n        return \"\"\n    }\n\n    if text.isEmpty || searchText == nil || searchText!.isEmpty {\n        return text\n    }\n\n    let pattern = try! NSRegularExpression(pattern: NSRegularExpression.escapedPattern(for: searchText!), options: [.caseInsensitive])\n    let range = NSRange(location: 0, length: text.utf16.count)\n    let mutableString = NSMutableString(string: text)\n\n    pattern.enumerateMatches(in: text, options: [], range: range) { match, _, _ in\n        if let matchRange = match?.range {\n            let matchedString = (text as NSString).substring(with: matchRange)\n            let replacement = String(format: \"<font color='%d'><b>%@</b></font>\", color, matchedString)\n            mutableString.replaceCharacters(in: matchRange, with: replacement)\n        }\n    }\n\n    return mutableString as String\n}\n```"
    },
    {
        "method_name": "removePrefix",
        "method_code": "public static\n    @NonNull\n    String removePrefix(@NonNull String s, @NonNull String prefix) {\n        if (s.startsWith(prefix)) {\n            return s.substring(prefix.length());\n        }\n        return s;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled removePrefix from StringUtils.java into Swift.\n\n        Input:\n\n        Method Name: removePrefix\n\n        Method Code: public static\n    @NonNull\n    String removePrefix(@NonNull String s, @NonNull String prefix) {\n        if (s.startsWith(prefix)) {\n            return s.substring(prefix.length());\n        }\n        return s;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc removePrefix(_ s: String, _ prefix: String) -> String {\n    if s.hasPrefix(prefix) {\n        return String(s.dropFirst(prefix.count))\n    }\n    return s\n}\n```"
    }
]