[
    {
        "method_name": "onStorageMigrationFinished",
        "method_code": "void onStorageMigrationFinished(String storagePath, boolean succeed);",
        "prompt": "\n        Please translate the following Java (Android) method titled onStorageMigrationFinished from StorageMigration.java into Swift.\n\n        Input:\n\n        Method Name: onStorageMigrationFinished\n\n        Method Code: void onStorageMigrationFinished(String storagePath, boolean succeed);\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onStorageMigrationFinished(storagePath: String, succeed: Bool) {\n    // Method implementation goes here\n}\n```"
    },
    {
        "method_name": "onCancelMigration",
        "method_code": "void onCancelMigration();",
        "prompt": "\n        Please translate the following Java (Android) method titled onCancelMigration from StorageMigration.java into Swift.\n\n        Input:\n\n        Method Name: onCancelMigration\n\n        Method Code: void onCancelMigration();\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onCancelMigration() {\n    // Implementation goes here\n}\n```"
    },
    {
        "method_name": "setStorageMigrationProgressListener",
        "method_code": "public void setStorageMigrationProgressListener(StorageMigrationProgressListener listener) {\n        mListener = listener;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setStorageMigrationProgressListener from StorageMigration.java into Swift.\n\n        Input:\n\n        Method Name: setStorageMigrationProgressListener\n\n        Method Code: public void setStorageMigrationProgressListener(StorageMigrationProgressListener listener) {\n        mListener = listener;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setStorageMigrationProgressListener(listener: StorageMigrationProgressListener?) {\n    mListener = listener\n}\n```"
    },
    {
        "method_name": "migrate",
        "method_code": "public void migrate() {\n        if (storageFolderAlreadyExists()) {\n            askToOverride();\n        } else {\n            ProgressDialog progressDialog = createMigrationProgressDialog();\n            progressDialog.show();\n            new FileMigrationTask(\n                    mContext,\n                    user,\n                    mSourceStoragePath,\n                    mTargetStoragePath,\n                    progressDialog,\n                    mListener,\n                    viewThemeUtils).execute();\n\n            progressDialog.getButton(ProgressDialog.BUTTON_POSITIVE).setVisibility(View.GONE);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled migrate from StorageMigration.java into Swift.\n\n        Input:\n\n        Method Name: migrate\n\n        Method Code: public void migrate() {\n        if (storageFolderAlreadyExists()) {\n            askToOverride();\n        } else {\n            ProgressDialog progressDialog = createMigrationProgressDialog();\n            progressDialog.show();\n            new FileMigrationTask(\n                    mContext,\n                    user,\n                    mSourceStoragePath,\n                    mTargetStoragePath,\n                    progressDialog,\n                    mListener,\n                    viewThemeUtils).execute();\n\n            progressDialog.getButton(ProgressDialog.BUTTON_POSITIVE).setVisibility(View.GONE);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc migrate() {\n    if storageFolderAlreadyExists() {\n        askToOverride()\n    } else {\n        let progressDialog = createMigrationProgressDialog()\n        progressDialog.show()\n        let fileMigrationTask = FileMigrationTask(\n            context: mContext,\n            user: user,\n            sourceStoragePath: mSourceStoragePath,\n            targetStoragePath: mTargetStoragePath,\n            progressDialog: progressDialog,\n            listener: mListener,\n            viewThemeUtils: viewThemeUtils)\n        fileMigrationTask.execute()\n\n        progressDialog.button(for: .positive)?.isHidden = true\n    }\n}\n```"
    },
    {
        "method_name": "storageFolderAlreadyExists",
        "method_code": "private boolean storageFolderAlreadyExists() {\n        File f = new File(mTargetStoragePath, MainApp.getDataFolder());\n        return f.exists() && f.isDirectory();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled storageFolderAlreadyExists from StorageMigration.java into Swift.\n\n        Input:\n\n        Method Name: storageFolderAlreadyExists\n\n        Method Code: private boolean storageFolderAlreadyExists() {\n        File f = new File(mTargetStoragePath, MainApp.getDataFolder());\n        return f.exists() && f.isDirectory();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func storageFolderAlreadyExists() -> Bool {\n    let fileManager = FileManager.default\n    let folderPath = mTargetStoragePath.appendingPathComponent(MainApp.getDataFolder())\n    var isDirectory: ObjCBool = false\n    return fileManager.fileExists(atPath: folderPath.path, isDirectory: &isDirectory) && isDirectory.boolValue\n}\n```"
    },
    {
        "method_name": "a",
        "method_code": "public static void a(ViewThemeUtils viewThemeUtils, Context context) {\n        final MaterialAlertDialogBuilder builder = new MaterialAlertDialogBuilder(context)\n            .setMessage(R.string.file_migration_directory_already_exists)\n            .setCancelable(true)\n            .setOnCancelListener(dialogInterface -> {\n\n            })\n            .setNegativeButton(R.string.common_cancel, (dialogInterface, i) -> {\n\n            })\n            .setNeutralButton(R.string.file_migration_use_data_folder, (dialogInterface, i) -> {\n\n            })\n            .setPositiveButton(R.string.file_migration_override_data_folder, (dialogInterface, i) -> {\n\n            });\n\n        viewThemeUtils.dialog.colorMaterialAlertDialogBackground(context, builder);\n\n        AlertDialog alertDialog = builder.create();\n\n        alertDialog.show();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled a from StorageMigration.java into Swift.\n\n        Input:\n\n        Method Name: a\n\n        Method Code: public static void a(ViewThemeUtils viewThemeUtils, Context context) {\n        final MaterialAlertDialogBuilder builder = new MaterialAlertDialogBuilder(context)\n            .setMessage(R.string.file_migration_directory_already_exists)\n            .setCancelable(true)\n            .setOnCancelListener(dialogInterface -> {\n\n            })\n            .setNegativeButton(R.string.common_cancel, (dialogInterface, i) -> {\n\n            })\n            .setNeutralButton(R.string.file_migration_use_data_folder, (dialogInterface, i) -> {\n\n            })\n            .setPositiveButton(R.string.file_migration_override_data_folder, (dialogInterface, i) -> {\n\n            });\n\n        viewThemeUtils.dialog.colorMaterialAlertDialogBackground(context, builder);\n\n        AlertDialog alertDialog = builder.create();\n\n        alertDialog.show();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport UIKit\n\nfunc a(viewThemeUtils: ViewThemeUtils, context: UIViewController) {\n    let alertController = UIAlertController(\n        title: nil,\n        message: NSLocalizedString(\"file_migration_directory_already_exists\", comment: \"\"),\n        preferredStyle: .alert\n    )\n\n    let cancelAction = UIAlertAction(\n        title: NSLocalizedString(\"common_cancel\", comment: \"\"),\n        style: .cancel,\n        handler: nil\n    )\n\n    let useDataFolderAction = UIAlertAction(\n        title: NSLocalizedString(\"file_migration_use_data_folder\", comment: \"\"),\n        style: .default,\n        handler: nil\n    )\n\n    let overrideDataFolderAction = UIAlertAction(\n        title: NSLocalizedString(\"file_migration_override_data_folder\", comment: \"\"),\n        style: .default,\n        handler: nil\n    )\n\n    alertController.addAction(cancelAction)\n    alertController.addAction(useDataFolderAction)\n    alertController.addAction(overrideDataFolderAction)\n\n    viewThemeUtils.dialog.colorMaterialAlertDialogBackground(context: context, alertController: alertController)\n\n    context.present(alertController, animated: true, completion: nil)\n}\n```"
    },
    {
        "method_name": "askToOverride",
        "method_code": "private void askToOverride() {\n        final MaterialAlertDialogBuilder builder = new MaterialAlertDialogBuilder(mContext)\n                .setMessage(R.string.file_migration_directory_already_exists)\n                .setCancelable(true)\n                .setOnCancelListener(dialogInterface -> {\n                    if (mListener != null) {\n                        mListener.onCancelMigration();\n                    }\n                })\n                .setNegativeButton(R.string.common_cancel, (dialogInterface, i) -> {\n                    if (mListener != null) {\n                        mListener.onCancelMigration();\n                    }\n                })\n                .setNeutralButton(R.string.file_migration_use_data_folder, (dialogInterface, i) -> {\n                    ProgressDialog progressDialog = createMigrationProgressDialog();\n                    progressDialog.show();\n                    new StoragePathSwitchTask(\n                            mContext,\n                            user,\n                            mSourceStoragePath,\n                            mTargetStoragePath,\n                            progressDialog,\n                            mListener,\n                            viewThemeUtils).execute();\n\n                    progressDialog.getButton(ProgressDialog.BUTTON_POSITIVE).setVisibility(View.GONE);\n\n                })\n                .setPositiveButton(R.string.file_migration_override_data_folder, (dialogInterface, i) -> {\n                    ProgressDialog progressDialog = createMigrationProgressDialog();\n                    progressDialog.show();\n                    new FileMigrationTask(\n                            mContext,\n                            user,\n                            mSourceStoragePath,\n                            mTargetStoragePath,\n                            progressDialog,\n                            mListener,\n                            viewThemeUtils).execute();\n\n                    progressDialog.getButton(ProgressDialog.BUTTON_POSITIVE).setVisibility(View.GONE);\n                });\n\n        viewThemeUtils.dialog.colorMaterialAlertDialogBackground(mContext, builder);\n        builder.create().show();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled askToOverride from StorageMigration.java into Swift.\n\n        Input:\n\n        Method Name: askToOverride\n\n        Method Code: private void askToOverride() {\n        final MaterialAlertDialogBuilder builder = new MaterialAlertDialogBuilder(mContext)\n                .setMessage(R.string.file_migration_directory_already_exists)\n                .setCancelable(true)\n                .setOnCancelListener(dialogInterface -> {\n                    if (mListener != null) {\n                        mListener.onCancelMigration();\n                    }\n                })\n                .setNegativeButton(R.string.common_cancel, (dialogInterface, i) -> {\n                    if (mListener != null) {\n                        mListener.onCancelMigration();\n                    }\n                })\n                .setNeutralButton(R.string.file_migration_use_data_folder, (dialogInterface, i) -> {\n                    ProgressDialog progressDialog = createMigrationProgressDialog();\n                    progressDialog.show();\n                    new StoragePathSwitchTask(\n                            mContext,\n                            user,\n                            mSourceStoragePath,\n                            mTargetStoragePath,\n                            progressDialog,\n                            mListener,\n                            viewThemeUtils).execute();\n\n                    progressDialog.getButton(ProgressDialog.BUTTON_POSITIVE).setVisibility(View.GONE);\n\n                })\n                .setPositiveButton(R.string.file_migration_override_data_folder, (dialogInterface, i) -> {\n                    ProgressDialog progressDialog = createMigrationProgressDialog();\n                    progressDialog.show();\n                    new FileMigrationTask(\n                            mContext,\n                            user,\n                            mSourceStoragePath,\n                            mTargetStoragePath,\n                            progressDialog,\n                            mListener,\n                            viewThemeUtils).execute();\n\n                    progressDialog.getButton(ProgressDialog.BUTTON_POSITIVE).setVisibility(View.GONE);\n                });\n\n        viewThemeUtils.dialog.colorMaterialAlertDialogBackground(mContext, builder);\n        builder.create().show();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func askToOverride() {\n    let builder = UIAlertController(title: nil, message: NSLocalizedString(\"file_migration_directory_already_exists\", comment: \"\"), preferredStyle: .alert)\n    \n    let cancelAction = UIAlertAction(title: NSLocalizedString(\"common_cancel\", comment: \"\"), style: .cancel) { _ in\n        self.mListener?.onCancelMigration()\n    }\n    \n    let neutralAction = UIAlertAction(title: NSLocalizedString(\"file_migration_use_data_folder\", comment: \"\"), style: .default) { _ in\n        let progressDialog = self.createMigrationProgressDialog()\n        progressDialog.show()\n        let task = StoragePathSwitchTask(\n            context: self.mContext,\n            user: self.user,\n            sourceStoragePath: self.mSourceStoragePath,\n            targetStoragePath: self.mTargetStoragePath,\n            progressDialog: progressDialog,\n            listener: self.mListener,\n            viewThemeUtils: self.viewThemeUtils)\n        task.execute()\n        \n        progressDialog.button(for: .positive)?.isHidden = true\n    }\n    \n    let positiveAction = UIAlertAction(title: NSLocalizedString(\"file_migration_override_data_folder\", comment: \"\"), style: .default) { _ in\n        let progressDialog = self.createMigrationProgressDialog()\n        progressDialog.show()\n        let task = FileMigrationTask(\n            context: self.mContext,\n            user: self.user,\n            sourceStoragePath: self.mSourceStoragePath,\n            targetStoragePath: self.mTargetStoragePath,\n            progressDialog: progressDialog,\n            listener: self.mListener,\n            viewThemeUtils: self.viewThemeUtils)\n        task.execute()\n        \n        progressDialog.button(for: .positive)?.isHidden = true\n    }\n    \n    builder.addAction(cancelAction)\n    builder.addAction(neutralAction)\n    builder.addAction(positiveAction)\n    \n    viewThemeUtils.dialog.colorMaterialAlertDialogBackground(context: mContext, builder: builder)\n    mContext.present(builder, animated: true, completion: nil)\n}\n```"
    },
    {
        "method_name": "createMigrationProgressDialog",
        "method_code": "private ProgressDialog createMigrationProgressDialog() {\n        ProgressDialog progressDialog = new ProgressDialog(mContext);\n        progressDialog.setCancelable(false);\n        progressDialog.setTitle(R.string.file_migration_dialog_title);\n        progressDialog.setMessage(mContext.getString(R.string.file_migration_preparing));\n        progressDialog.setButton(\n                ProgressDialog.BUTTON_POSITIVE,\n                mContext.getString(R.string.drawer_close),\n                new OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialogInterface, int i) {\n                        dialogInterface.dismiss();\n                    }\n                });\n        return progressDialog;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled createMigrationProgressDialog from StorageMigration.java into Swift.\n\n        Input:\n\n        Method Name: createMigrationProgressDialog\n\n        Method Code: private ProgressDialog createMigrationProgressDialog() {\n        ProgressDialog progressDialog = new ProgressDialog(mContext);\n        progressDialog.setCancelable(false);\n        progressDialog.setTitle(R.string.file_migration_dialog_title);\n        progressDialog.setMessage(mContext.getString(R.string.file_migration_preparing));\n        progressDialog.setButton(\n                ProgressDialog.BUTTON_POSITIVE,\n                mContext.getString(R.string.drawer_close),\n                new OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialogInterface, int i) {\n                        dialogInterface.dismiss();\n                    }\n                });\n        return progressDialog;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func createMigrationProgressDialog() -> UIAlertController {\n    let alertController = UIAlertController(title: NSLocalizedString(\"file_migration_dialog_title\", comment: \"\"), message: NSLocalizedString(\"file_migration_preparing\", comment: \"\"), preferredStyle: .alert)\n    let closeAction = UIAlertAction(title: NSLocalizedString(\"drawer_close\", comment: \"\"), style: .default) { _ in\n        alertController.dismiss(animated: true, completion: nil)\n    }\n    alertController.addAction(closeAction)\n    return alertController\n}\n```"
    },
    {
        "method_name": "onClick",
        "method_code": "@Override\n                    public void onClick(DialogInterface dialogInterface, int i) {\n                        dialogInterface.dismiss();\n                    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onClick from StorageMigration.java into Swift.\n\n        Input:\n\n        Method Name: onClick\n\n        Method Code: @Override\n                    public void onClick(DialogInterface dialogInterface, int i) {\n                        dialogInterface.dismiss();\n                    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onClick(dialogInterface: DialogInterface, i: Int) {\n    dialogInterface.dismiss()\n}\n```"
    },
    {
        "method_name": "onProgressUpdate",
        "method_code": "@Override\n        protected void onProgressUpdate(Integer... progress) {\n            if (progress.length > 1 && progress[0] != 0) {\n                mProgressDialog.setMessage(mContext.getString(progress[0]));\n            }\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled onProgressUpdate from StorageMigration.java into Swift.\n\n        Input:\n\n        Method Name: onProgressUpdate\n\n        Method Code: @Override\n        protected void onProgressUpdate(Integer... progress) {\n            if (progress.length > 1 && progress[0] != 0) {\n                mProgressDialog.setMessage(mContext.getString(progress[0]));\n            }\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onProgressUpdate(_ progress: Int...) {\n    if progress.count > 1 && progress[0] != 0 {\n        mProgressDialog.message = mContext.getString(progress[0])\n    }\n}\n```"
    },
    {
        "method_name": "onPostExecute",
        "method_code": "@Override\n        protected void onPostExecute(Integer code) {\n            if (code != 0) {\n                mProgressDialog.setMessage(mContext.getString(code));\n            } else {\n                mProgressDialog.setMessage(mContext.getString(R.string.file_migration_ok_finished));\n            }\n\n            boolean succeed = code == 0;\n            if (succeed) {\n                mProgressDialog.hide();\n            } else {\n\n                if (code == R.string.file_migration_failed_not_readable) {\n                    mProgressDialog.hide();\n                    askToStillMove();\n                } else {\n                    mProgressDialog.getButton(ProgressDialog.BUTTON_POSITIVE).setVisibility(View.VISIBLE);\n                    mProgressDialog.setIndeterminateDrawable(ResourcesCompat.getDrawable(mContext.getResources(),\n                                                                                         R.drawable.image_fail,\n                                                                                         null));\n                }\n            }\n\n            if (mListener != null) {\n                mListener.onStorageMigrationFinished(succeed ? mStorageTarget : mStorageSource, succeed);\n            }\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled onPostExecute from StorageMigration.java into Swift.\n\n        Input:\n\n        Method Name: onPostExecute\n\n        Method Code: @Override\n        protected void onPostExecute(Integer code) {\n            if (code != 0) {\n                mProgressDialog.setMessage(mContext.getString(code));\n            } else {\n                mProgressDialog.setMessage(mContext.getString(R.string.file_migration_ok_finished));\n            }\n\n            boolean succeed = code == 0;\n            if (succeed) {\n                mProgressDialog.hide();\n            } else {\n\n                if (code == R.string.file_migration_failed_not_readable) {\n                    mProgressDialog.hide();\n                    askToStillMove();\n                } else {\n                    mProgressDialog.getButton(ProgressDialog.BUTTON_POSITIVE).setVisibility(View.VISIBLE);\n                    mProgressDialog.setIndeterminateDrawable(ResourcesCompat.getDrawable(mContext.getResources(),\n                                                                                         R.drawable.image_fail,\n                                                                                         null));\n                }\n            }\n\n            if (mListener != null) {\n                mListener.onStorageMigrationFinished(succeed ? mStorageTarget : mStorageSource, succeed);\n            }\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onPostExecute(_ code: Int) {\n    if code != 0 {\n        mProgressDialog.message = mContext.getString(code)\n    } else {\n        mProgressDialog.message = mContext.getString(R.string.file_migration_ok_finished)\n    }\n\n    let succeed = code == 0\n    if succeed {\n        mProgressDialog.hide()\n    } else {\n        if code == R.string.file_migration_failed_not_readable {\n            mProgressDialog.hide()\n            askToStillMove()\n        } else {\n            mProgressDialog.button(for: .positive)?.isHidden = false\n            mProgressDialog.indeterminateDrawable = ResourcesCompat.getDrawable(mContext.resources, R.drawable.image_fail, nil)\n        }\n    }\n\n    if let listener = mListener {\n        listener.onStorageMigrationFinished(succeed ? mStorageTarget : mStorageSource, succeed)\n    }\n}\n```"
    },
    {
        "method_name": "askToStillMove",
        "method_code": "private void askToStillMove() {\n            final MaterialAlertDialogBuilder builder = new MaterialAlertDialogBuilder(mContext)\n                    .setTitle(R.string.file_migration_source_not_readable_title)\n                    .setMessage(mContext.getString(R.string.file_migration_source_not_readable, mStorageTarget))\n                    .setNegativeButton(R.string.common_no, (dialogInterface, i) -> dialogInterface.dismiss())\n                    .setPositiveButton(R.string.common_yes, (dialogInterface, i) -> {\n                        if (mListener != null) {\n                            mListener.onStorageMigrationFinished(mStorageTarget, true);\n                        }\n                    });\n\n            viewThemeUtils.dialog.colorMaterialAlertDialogBackground(mContext, builder);\n            builder.create().show();\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled askToStillMove from StorageMigration.java into Swift.\n\n        Input:\n\n        Method Name: askToStillMove\n\n        Method Code: private void askToStillMove() {\n            final MaterialAlertDialogBuilder builder = new MaterialAlertDialogBuilder(mContext)\n                    .setTitle(R.string.file_migration_source_not_readable_title)\n                    .setMessage(mContext.getString(R.string.file_migration_source_not_readable, mStorageTarget))\n                    .setNegativeButton(R.string.common_no, (dialogInterface, i) -> dialogInterface.dismiss())\n                    .setPositiveButton(R.string.common_yes, (dialogInterface, i) -> {\n                        if (mListener != null) {\n                            mListener.onStorageMigrationFinished(mStorageTarget, true);\n                        }\n                    });\n\n            viewThemeUtils.dialog.colorMaterialAlertDialogBackground(mContext, builder);\n            builder.create().show();\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func askToStillMove() {\n    let alertController = UIAlertController(\n        title: NSLocalizedString(\"file_migration_source_not_readable_title\", comment: \"\"),\n        message: String(format: NSLocalizedString(\"file_migration_source_not_readable\", comment: \"\"), mStorageTarget),\n        preferredStyle: .alert\n    )\n    \n    let noAction = UIAlertAction(\n        title: NSLocalizedString(\"common_no\", comment: \"\"),\n        style: .cancel,\n        handler: { _ in\n            alertController.dismiss(animated: true, completion: nil)\n        }\n    )\n    \n    let yesAction = UIAlertAction(\n        title: NSLocalizedString(\"common_yes\", comment: \"\"),\n        style: .default,\n        handler: { _ in\n            if let listener = self.mListener {\n                listener.onStorageMigrationFinished(mStorageTarget, true)\n            }\n        }\n    )\n    \n    alertController.addAction(noAction)\n    alertController.addAction(yesAction)\n    \n    viewThemeUtils.dialog.colorMaterialAlertDialogBackground(mContext, alertController)\n    mContext.present(alertController, animated: true, completion: nil)\n}\n```"
    },
    {
        "method_name": "saveAccountsSyncStatus",
        "method_code": "protected boolean[] saveAccountsSyncStatus() {\n            boolean[] syncs = new boolean[mOcAccounts.length];\n            for (int i = 0; i < mOcAccounts.length; ++i) {\n                syncs[i] = ContentResolver.getSyncAutomatically(mOcAccounts[i], mAuthority);\n            }\n            return syncs;\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled saveAccountsSyncStatus from StorageMigration.java into Swift.\n\n        Input:\n\n        Method Name: saveAccountsSyncStatus\n\n        Method Code: protected boolean[] saveAccountsSyncStatus() {\n            boolean[] syncs = new boolean[mOcAccounts.length];\n            for (int i = 0; i < mOcAccounts.length; ++i) {\n                syncs[i] = ContentResolver.getSyncAutomatically(mOcAccounts[i], mAuthority);\n            }\n            return syncs;\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc saveAccountsSyncStatus() -> [Bool] {\n    var syncs = [Bool](repeating: false, count: mOcAccounts.count)\n    for i in 0..<mOcAccounts.count {\n        syncs[i] = ContentResolver.getSyncAutomatically(mOcAccounts[i], mAuthority)\n    }\n    return syncs\n}\n```"
    },
    {
        "method_name": "stopAccountsSyncing",
        "method_code": "protected void stopAccountsSyncing() {\n            for (Account ocAccount : mOcAccounts) {\n                ContentResolver.setSyncAutomatically(ocAccount, mAuthority, false);\n            }\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled stopAccountsSyncing from StorageMigration.java into Swift.\n\n        Input:\n\n        Method Name: stopAccountsSyncing\n\n        Method Code: protected void stopAccountsSyncing() {\n            for (Account ocAccount : mOcAccounts) {\n                ContentResolver.setSyncAutomatically(ocAccount, mAuthority, false);\n            }\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc stopAccountsSyncing() {\n    for ocAccount in mOcAccounts {\n        ContentResolver.setSyncAutomatically(account: ocAccount, authority: mAuthority, sync: false)\n    }\n}\n```"
    },
    {
        "method_name": "waitForUnfinishedSynchronizations",
        "method_code": "protected void waitForUnfinishedSynchronizations() {\n            for (Account ocAccount : mOcAccounts) {\n                while (ContentResolver.isSyncActive(ocAccount, mAuthority)) {\n                    try {\n                        Thread.sleep(1000);\n                    } catch (InterruptedException e) {\n                        Log_OC.w(TAG, \"Thread interrupted while waiting for account to end syncing\");\n                        Thread.currentThread().interrupt();\n                    }\n                }\n            }\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled waitForUnfinishedSynchronizations from StorageMigration.java into Swift.\n\n        Input:\n\n        Method Name: waitForUnfinishedSynchronizations\n\n        Method Code: protected void waitForUnfinishedSynchronizations() {\n            for (Account ocAccount : mOcAccounts) {\n                while (ContentResolver.isSyncActive(ocAccount, mAuthority)) {\n                    try {\n                        Thread.sleep(1000);\n                    } catch (InterruptedException e) {\n                        Log_OC.w(TAG, \"Thread interrupted while waiting for account to end syncing\");\n                        Thread.currentThread().interrupt();\n                    }\n                }\n            }\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc waitForUnfinishedSynchronizations() {\n    for ocAccount in mOcAccounts {\n        while ContentResolver.isSyncActive(ocAccount, mAuthority) {\n            do {\n                try Thread.sleep(forTimeInterval: 1.0)\n            } catch {\n                print(\"Thread interrupted while waiting for account to end syncing\")\n                Thread.current.cancel()\n            }\n        }\n    }\n}\n```"
    },
    {
        "method_name": "restoreAccountsSyncStatus",
        "method_code": "protected void restoreAccountsSyncStatus(boolean... oldSync) {\n            // If we don't have the old sync statuses, then\n            // probably migration failed even before saving states,\n            // which is weird and should be investigated.\n            // But its better than crashing on ArrayOutOfBounds.\n            if (oldSync == null) {\n                return;\n            }\n            for (int i = 0; i < mOcAccounts.length; ++i) {\n                ContentResolver.setSyncAutomatically(mOcAccounts[i], mAuthority, oldSync[i]);\n            }\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled restoreAccountsSyncStatus from StorageMigration.java into Swift.\n\n        Input:\n\n        Method Name: restoreAccountsSyncStatus\n\n        Method Code: protected void restoreAccountsSyncStatus(boolean... oldSync) {\n            // If we don't have the old sync statuses, then\n            // probably migration failed even before saving states,\n            // which is weird and should be investigated.\n            // But its better than crashing on ArrayOutOfBounds.\n            if (oldSync == null) {\n                return;\n            }\n            for (int i = 0; i < mOcAccounts.length; ++i) {\n                ContentResolver.setSyncAutomatically(mOcAccounts[i], mAuthority, oldSync[i]);\n            }\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc restoreAccountsSyncStatus(_ oldSync: Bool?...) {\n    // If we don't have the old sync statuses, then\n    // probably migration failed even before saving states,\n    // which is weird and should be investigated.\n    // But its better than crashing on ArrayOutOfBounds.\n    guard let oldSync = oldSync else {\n        return\n    }\n    for i in 0..<mOcAccounts.count {\n        ContentResolver.setSyncAutomatically(account: mOcAccounts[i], authority: mAuthority, sync: oldSync[i])\n    }\n}\n```"
    },
    {
        "method_name": "doInBackground",
        "method_code": "@Override\n        protected Integer doInBackground(Void... voids) {\n            publishProgress(R.string.file_migration_preparing);\n\n            boolean[] syncStates = null;\n            try {\n                publishProgress(R.string.file_migration_saving_accounts_configuration);\n                syncStates = saveAccountsSyncStatus();\n\n                publishProgress(R.string.file_migration_waiting_for_unfinished_sync);\n                stopAccountsSyncing();\n                waitForUnfinishedSynchronizations();\n            } finally {\n                publishProgress(R.string.file_migration_restoring_accounts_configuration);\n                restoreAccountsSyncStatus(syncStates);\n            }\n\n            return 0;\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled doInBackground from StorageMigration.java into Swift.\n\n        Input:\n\n        Method Name: doInBackground\n\n        Method Code: @Override\n        protected Integer doInBackground(Void... voids) {\n            publishProgress(R.string.file_migration_preparing);\n\n            boolean[] syncStates = null;\n            try {\n                publishProgress(R.string.file_migration_saving_accounts_configuration);\n                syncStates = saveAccountsSyncStatus();\n\n                publishProgress(R.string.file_migration_waiting_for_unfinished_sync);\n                stopAccountsSyncing();\n                waitForUnfinishedSynchronizations();\n            } finally {\n                publishProgress(R.string.file_migration_restoring_accounts_configuration);\n                restoreAccountsSyncStatus(syncStates);\n            }\n\n            return 0;\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func doInBackground(_ voids: Void...) -> Int {\n    publishProgress(R.string.file_migration_preparing)\n\n    var syncStates: [Bool]? = nil\n    do {\n        publishProgress(R.string.file_migration_saving_accounts_configuration)\n        syncStates = saveAccountsSyncStatus()\n\n        publishProgress(R.string.file_migration_waiting_for_unfinished_sync)\n        stopAccountsSyncing()\n        waitForUnfinishedSynchronizations()\n    } finally {\n        publishProgress(R.string.file_migration_restoring_accounts_configuration)\n        restoreAccountsSyncStatus(syncStates)\n    }\n\n    return 0\n}\n```"
    },
    {
        "method_name": "getResId",
        "method_code": "private int getResId() { return mResId; }",
        "prompt": "\n        Please translate the following Java (Android) method titled getResId from StorageMigration.java into Swift.\n\n        Input:\n\n        Method Name: getResId\n\n        Method Code: private int getResId() { return mResId; }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getResId() -> Int { return mResId }\n```"
    },
    {
        "method_name": "doInBackground",
        "method_code": "@Override\n        protected Integer doInBackground(Void... args) {\n            publishProgress(R.string.file_migration_preparing);\n\n            boolean[] syncState = null;\n\n            try {\n                File dstFile = new File(mStorageTarget + File.separator + MainApp.getDataFolder());\n                deleteRecursive(dstFile);\n                dstFile.delete();\n\n                File srcFile = new File(mStorageSource + File.separator + MainApp.getDataFolder());\n                srcFile.mkdirs();\n\n                publishProgress(R.string.file_migration_checking_destination);\n\n                checkDestinationAvailability();\n\n                publishProgress(R.string.file_migration_saving_accounts_configuration);\n                syncState = saveAccountsSyncStatus();\n\n                publishProgress(R.string.file_migration_waiting_for_unfinished_sync);\n                stopAccountsSyncing();\n                waitForUnfinishedSynchronizations();\n\n                publishProgress(R.string.file_migration_migrating);\n                copyFiles();\n\n                publishProgress(R.string.file_migration_updating_index);\n                updateIndex(mContext);\n\n                publishProgress(R.string.file_migration_cleaning);\n                cleanup();\n\n            } catch (MigrationException e) {\n                rollback();\n                return e.getResId();\n            } finally {\n                publishProgress(R.string.file_migration_restoring_accounts_configuration);\n                restoreAccountsSyncStatus(syncState);\n            }\n\n            publishProgress(R.string.file_migration_ok_finished);\n\n            return 0;\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled doInBackground from StorageMigration.java into Swift.\n\n        Input:\n\n        Method Name: doInBackground\n\n        Method Code: @Override\n        protected Integer doInBackground(Void... args) {\n            publishProgress(R.string.file_migration_preparing);\n\n            boolean[] syncState = null;\n\n            try {\n                File dstFile = new File(mStorageTarget + File.separator + MainApp.getDataFolder());\n                deleteRecursive(dstFile);\n                dstFile.delete();\n\n                File srcFile = new File(mStorageSource + File.separator + MainApp.getDataFolder());\n                srcFile.mkdirs();\n\n                publishProgress(R.string.file_migration_checking_destination);\n\n                checkDestinationAvailability();\n\n                publishProgress(R.string.file_migration_saving_accounts_configuration);\n                syncState = saveAccountsSyncStatus();\n\n                publishProgress(R.string.file_migration_waiting_for_unfinished_sync);\n                stopAccountsSyncing();\n                waitForUnfinishedSynchronizations();\n\n                publishProgress(R.string.file_migration_migrating);\n                copyFiles();\n\n                publishProgress(R.string.file_migration_updating_index);\n                updateIndex(mContext);\n\n                publishProgress(R.string.file_migration_cleaning);\n                cleanup();\n\n            } catch (MigrationException e) {\n                rollback();\n                return e.getResId();\n            } finally {\n                publishProgress(R.string.file_migration_restoring_accounts_configuration);\n                restoreAccountsSyncStatus(syncState);\n            }\n\n            publishProgress(R.string.file_migration_ok_finished);\n\n            return 0;\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func doInBackground(_ args: Void...) -> Int {\n    publishProgress(R.string.file_migration_preparing)\n\n    var syncState: [Bool]? = nil\n\n    do {\n        let dstFile = File(mStorageTarget + File.separator + MainApp.getDataFolder())\n        deleteRecursive(dstFile)\n        dstFile.delete()\n\n        let srcFile = File(mStorageSource + File.separator + MainApp.getDataFolder())\n        srcFile.mkdirs()\n\n        publishProgress(R.string.file_migration_checking_destination)\n\n        try checkDestinationAvailability()\n\n        publishProgress(R.string.file_migration_saving_accounts_configuration)\n        syncState = saveAccountsSyncStatus()\n\n        publishProgress(R.string.file_migration_waiting_for_unfinished_sync)\n        stopAccountsSyncing()\n        waitForUnfinishedSynchronizations()\n\n        publishProgress(R.string.file_migration_migrating)\n        try copyFiles()\n\n        publishProgress(R.string.file_migration_updating_index)\n        updateIndex(mContext)\n\n        publishProgress(R.string.file_migration_cleaning)\n        cleanup()\n\n    } catch let e as MigrationException {\n        rollback()\n        return e.getResId()\n    } finally {\n        publishProgress(R.string.file_migration_restoring_accounts_configuration)\n        restoreAccountsSyncStatus(syncState)\n    }\n\n    publishProgress(R.string.file_migration_ok_finished)\n\n    return 0\n}\n```"
    },
    {
        "method_name": "checkDestinationAvailability",
        "method_code": "private void checkDestinationAvailability() throws MigrationException {\n            File srcFile = new File(mStorageSource);\n            File dstFile = new File(mStorageTarget);\n\n            if (!dstFile.canRead() || !srcFile.canRead()) {\n                throw new MigrationException(R.string.file_migration_failed_not_readable);\n            }\n\n            if (!dstFile.canWrite() || !srcFile.canWrite()) {\n                throw new MigrationException(R.string.file_migration_failed_not_writable);\n            }\n\n            if (new File(dstFile, MainApp.getDataFolder()).exists()) {\n                throw new MigrationException(R.string.file_migration_failed_dir_already_exists);\n            }\n\n            try {\n                if (dstFile.getFreeSpace() < FileStorageUtils.getFolderSize(new File(srcFile, MainApp.getDataFolder()))) {\n                    throw new MigrationException(R.string.file_migration_failed_not_enough_space);\n                }\n            } catch (MigrationException e) {\n                throw new RuntimeException(e);\n            }\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled checkDestinationAvailability from StorageMigration.java into Swift.\n\n        Input:\n\n        Method Name: checkDestinationAvailability\n\n        Method Code: private void checkDestinationAvailability() throws MigrationException {\n            File srcFile = new File(mStorageSource);\n            File dstFile = new File(mStorageTarget);\n\n            if (!dstFile.canRead() || !srcFile.canRead()) {\n                throw new MigrationException(R.string.file_migration_failed_not_readable);\n            }\n\n            if (!dstFile.canWrite() || !srcFile.canWrite()) {\n                throw new MigrationException(R.string.file_migration_failed_not_writable);\n            }\n\n            if (new File(dstFile, MainApp.getDataFolder()).exists()) {\n                throw new MigrationException(R.string.file_migration_failed_dir_already_exists);\n            }\n\n            try {\n                if (dstFile.getFreeSpace() < FileStorageUtils.getFolderSize(new File(srcFile, MainApp.getDataFolder()))) {\n                    throw new MigrationException(R.string.file_migration_failed_not_enough_space);\n                }\n            } catch (MigrationException e) {\n                throw new RuntimeException(e);\n            }\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func checkDestinationAvailability() throws {\n    let srcFile = URL(fileURLWithPath: mStorageSource)\n    let dstFile = URL(fileURLWithPath: mStorageTarget)\n\n    guard FileManager.default.isReadableFile(atPath: dstFile.path) && FileManager.default.isReadableFile(atPath: srcFile.path) else {\n        throw MigrationException(R.string.file_migration_failed_not_readable)\n    }\n\n    guard FileManager.default.isWritableFile(atPath: dstFile.path) && FileManager.default.isWritableFile(atPath: srcFile.path) else {\n        throw MigrationException(R.string.file_migration_failed_not_writable)\n    }\n\n    if FileManager.default.fileExists(atPath: dstFile.appendingPathComponent(MainApp.getDataFolder()).path) {\n        throw MigrationException(R.string.file_migration_failed_dir_already_exists)\n    }\n\n    do {\n        let srcFolderSize = try FileStorageUtils.getFolderSize(srcFile.appendingPathComponent(MainApp.getDataFolder()))\n        if try dstFile.resourceValues(forKeys: [.volumeAvailableCapacityKey]).volumeAvailableCapacity ?? 0 < srcFolderSize {\n            throw MigrationException(R.string.file_migration_failed_not_enough_space)\n        }\n    } catch {\n        throw RuntimeException(error)\n    }\n}\n```"
    },
    {
        "method_name": "copyFiles",
        "method_code": "private void copyFiles() throws MigrationException {\n            File srcFile = new File(mStorageSource + File.separator + MainApp.getDataFolder());\n            File dstFile = new File(mStorageTarget + File.separator + MainApp.getDataFolder());\n\n            copyDirs(srcFile, dstFile);\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled copyFiles from StorageMigration.java into Swift.\n\n        Input:\n\n        Method Name: copyFiles\n\n        Method Code: private void copyFiles() throws MigrationException {\n            File srcFile = new File(mStorageSource + File.separator + MainApp.getDataFolder());\n            File dstFile = new File(mStorageTarget + File.separator + MainApp.getDataFolder());\n\n            copyDirs(srcFile, dstFile);\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func copyFiles() throws {\n    let srcFile = URL(fileURLWithPath: mStorageSource).appendingPathComponent(MainApp.getDataFolder())\n    let dstFile = URL(fileURLWithPath: mStorageTarget).appendingPathComponent(MainApp.getDataFolder())\n\n    try copyDirs(srcFile, dstFile)\n}\n```"
    },
    {
        "method_name": "copyDirs",
        "method_code": "private void copyDirs(File src, File dst) throws MigrationException {\n            if (!dst.mkdirs()) {\n                throw new MigrationException(R.string.file_migration_failed_while_coping);\n            }\n\n            for (File f : src.listFiles()) {\n                if (f.isDirectory()) {\n                    copyDirs(f, new File(dst, f.getName()));\n                } else if (!FileStorageUtils.copyFile(f, new File(dst, f.getName()))) {\n                    throw new MigrationException(R.string.file_migration_failed_while_coping);\n                }\n            }\n\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled copyDirs from StorageMigration.java into Swift.\n\n        Input:\n\n        Method Name: copyDirs\n\n        Method Code: private void copyDirs(File src, File dst) throws MigrationException {\n            if (!dst.mkdirs()) {\n                throw new MigrationException(R.string.file_migration_failed_while_coping);\n            }\n\n            for (File f : src.listFiles()) {\n                if (f.isDirectory()) {\n                    copyDirs(f, new File(dst, f.getName()));\n                } else if (!FileStorageUtils.copyFile(f, new File(dst, f.getName()))) {\n                    throw new MigrationException(R.string.file_migration_failed_while_coping);\n                }\n            }\n\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func copyDirs(src: URL, dst: URL) throws {\n    do {\n        try FileManager.default.createDirectory(at: dst, withIntermediateDirectories: true, attributes: nil)\n    } catch {\n        throw MigrationException(\"file_migration_failed_while_coping\")\n    }\n\n    guard let files = try? FileManager.default.contentsOfDirectory(at: src, includingPropertiesForKeys: nil, options: []) else {\n        throw MigrationException(\"file_migration_failed_while_coping\")\n    }\n\n    for file in files {\n        let destination = dst.appendingPathComponent(file.lastPathComponent)\n        if file.hasDirectoryPath {\n            try copyDirs(src: file, dst: destination)\n        } else {\n            do {\n                try FileManager.default.copyItem(at: file, to: destination)\n            } catch {\n                throw MigrationException(\"file_migration_failed_while_coping\")\n            }\n        }\n    }\n}\n```"
    },
    {
        "method_name": "updateIndex",
        "method_code": "private void updateIndex(Context context) throws MigrationException {\n            FileDataStorageManager manager = new FileDataStorageManager(user, context.getContentResolver());\n\n            try {\n                manager.migrateStoredFiles(mStorageSource, mStorageTarget);\n            } catch (Exception e) {\n                Log_OC.e(TAG,e.getMessage(),e);\n                throw new MigrationException(R.string.file_migration_failed_while_updating_index, e);\n            }\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled updateIndex from StorageMigration.java into Swift.\n\n        Input:\n\n        Method Name: updateIndex\n\n        Method Code: private void updateIndex(Context context) throws MigrationException {\n            FileDataStorageManager manager = new FileDataStorageManager(user, context.getContentResolver());\n\n            try {\n                manager.migrateStoredFiles(mStorageSource, mStorageTarget);\n            } catch (Exception e) {\n                Log_OC.e(TAG,e.getMessage(),e);\n                throw new MigrationException(R.string.file_migration_failed_while_updating_index, e);\n            }\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func updateIndex(context: Context) throws {\n    let manager = FileDataStorageManager(user: user, contentResolver: context.contentResolver)\n\n    do {\n        try manager.migrateStoredFiles(from: mStorageSource, to: mStorageTarget)\n    } catch {\n        Log_OC.e(TAG, error.localizedDescription, error)\n        throw MigrationException(R.string.file_migration_failed_while_updating_index, error)\n    }\n}\n```"
    },
    {
        "method_name": "cleanup",
        "method_code": "private void cleanup() {\n            File srcFile = new File(mStorageSource + File.separator + MainApp.getDataFolder());\n            if (!deleteRecursive(srcFile)) {\n                Log_OC.w(TAG, \"Migration cleanup step failed\");\n            }\n            srcFile.delete();\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled cleanup from StorageMigration.java into Swift.\n\n        Input:\n\n        Method Name: cleanup\n\n        Method Code: private void cleanup() {\n            File srcFile = new File(mStorageSource + File.separator + MainApp.getDataFolder());\n            if (!deleteRecursive(srcFile)) {\n                Log_OC.w(TAG, \"Migration cleanup step failed\");\n            }\n            srcFile.delete();\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func cleanup() {\n    let srcFile = URL(fileURLWithPath: mStorageSource).appendingPathComponent(MainApp.getDataFolder())\n    if !deleteRecursive(srcFile) {\n        Log_OC.w(TAG, \"Migration cleanup step failed\")\n    }\n    try? FileManager.default.removeItem(at: srcFile)\n}\n```"
    },
    {
        "method_name": "deleteRecursive",
        "method_code": "private boolean deleteRecursive(File f) {\n            boolean res = true;\n            if (f.isDirectory()) {\n                for (File c : f.listFiles()) {\n                    res = deleteRecursive(c) && res;\n                }\n            }\n            return f.delete() && res;\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled deleteRecursive from StorageMigration.java into Swift.\n\n        Input:\n\n        Method Name: deleteRecursive\n\n        Method Code: private boolean deleteRecursive(File f) {\n            boolean res = true;\n            if (f.isDirectory()) {\n                for (File c : f.listFiles()) {\n                    res = deleteRecursive(c) && res;\n                }\n            }\n            return f.delete() && res;\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func deleteRecursive(_ file: URL) -> Bool {\n    var result = true\n    if let directoryContents = try? FileManager.default.contentsOfDirectory(at: file, includingPropertiesForKeys: nil, options: []) {\n        for content in directoryContents {\n            result = deleteRecursive(content) && result\n        }\n    }\n    do {\n        try FileManager.default.removeItem(at: file)\n    } catch {\n        result = false\n    }\n    return result\n}\n```"
    },
    {
        "method_name": "rollback",
        "method_code": "private void rollback() {\n            File dstFile = new File(mStorageTarget + File.separator + MainApp.getDataFolder());\n            if (dstFile.exists() && !dstFile.delete()) {\n                Log_OC.w(TAG, \"Rollback step failed\");\n            }\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled rollback from StorageMigration.java into Swift.\n\n        Input:\n\n        Method Name: rollback\n\n        Method Code: private void rollback() {\n            File dstFile = new File(mStorageTarget + File.separator + MainApp.getDataFolder());\n            if (dstFile.exists() && !dstFile.delete()) {\n                Log_OC.w(TAG, \"Rollback step failed\");\n            }\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func rollback() {\n    let dstFile = FileManager.default.temporaryDirectory.appendingPathComponent(mStorageTarget).appendingPathComponent(MainApp.getDataFolder())\n    if FileManager.default.fileExists(atPath: dstFile.path) {\n        do {\n            try FileManager.default.removeItem(at: dstFile)\n        } catch {\n            NSLog(\"Rollback step failed\")\n        }\n    }\n}\n```"
    }
]