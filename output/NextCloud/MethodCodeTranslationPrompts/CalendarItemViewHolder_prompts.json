[
    {
        "method_name": "setCalendars",
        "method_code": "public void setCalendars(ArrayList<AndroidCalendar> calendars) {\n        adapter.clear();\n        adapter.addAll(calendars);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setCalendars from CalendarItemViewHolder.java into Swift.\n\n        Input:\n\n        Method Name: setCalendars\n\n        Method Code: public void setCalendars(ArrayList<AndroidCalendar> calendars) {\n        adapter.clear();\n        adapter.addAll(calendars);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setCalendars(calendars: [AndroidCalendar]) {\n    adapter.clear()\n    adapter.addAll(calendars)\n}\n```"
    },
    {
        "method_name": "setListener",
        "method_code": "public void setListener(View.OnClickListener onClickListener) {\n        itemView.setOnClickListener(onClickListener);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setListener from CalendarItemViewHolder.java into Swift.\n\n        Input:\n\n        Method Name: setListener\n\n        Method Code: public void setListener(View.OnClickListener onClickListener) {\n        itemView.setOnClickListener(onClickListener);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setListener(onClickListener: @escaping (UIView) -> Void) {\n    let tapGesture = UITapGestureRecognizer(target: self, action: #selector(handleTap))\n    itemView.addGestureRecognizer(tapGesture)\n    objc_setAssociatedObject(itemView, &AssociatedKeys.onClickListener, onClickListener, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)\n}\n\n@objc private func handleTap(sender: UITapGestureRecognizer) {\n    if let onClickListener = objc_getAssociatedObject(itemView, &AssociatedKeys.onClickListener) as? (UIView) -> Void {\n        onClickListener(itemView)\n    }\n}\n\nprivate struct AssociatedKeys {\n    static var onClickListener = \"onClickListener\"\n}\n```"
    },
    {
        "method_name": "showCalendars",
        "method_code": "public void showCalendars(boolean show) {\n        if (show) {\n            if (adapter.isEmpty()) {\n                Toast.makeText(context,\n                               context.getResources().getString(R.string.no_calendar_exists),\n                               Toast.LENGTH_LONG)\n                    .show();\n            } else {\n                binding.spinner.setVisibility(View.VISIBLE);\n            }\n        } else {\n            binding.spinner.setVisibility(View.GONE);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showCalendars from CalendarItemViewHolder.java into Swift.\n\n        Input:\n\n        Method Name: showCalendars\n\n        Method Code: public void showCalendars(boolean show) {\n        if (show) {\n            if (adapter.isEmpty()) {\n                Toast.makeText(context,\n                               context.getResources().getString(R.string.no_calendar_exists),\n                               Toast.LENGTH_LONG)\n                    .show();\n            } else {\n                binding.spinner.setVisibility(View.VISIBLE);\n            }\n        } else {\n            binding.spinner.setVisibility(View.GONE);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc showCalendars(_ show: Bool) {\n    if show {\n        if adapter.isEmpty {\n            let toast = Toast.makeText(context, context.resources.getString(R.string.no_calendar_exists), Toast.LENGTH_LONG)\n            toast.show()\n        } else {\n            binding.spinner.isHidden = false\n        }\n    } else {\n        binding.spinner.isHidden = true\n    }\n}\n```"
    }
]