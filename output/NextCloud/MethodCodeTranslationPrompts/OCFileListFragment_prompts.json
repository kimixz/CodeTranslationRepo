[
    {
        "method_name": "onCreate",
        "method_code": "Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setHasOptionsMenu(true);\n        mMultiChoiceModeListener = new MultiChoiceModeListener();\n\n        if (savedInstanceState != null) {\n            currentSearchType = BundleExtensionsKt.getParcelableArgument(savedInstanceState, KEY_CURRENT_SEARCH_TYPE, SearchType.class);\n            searchEvent = BundleExtensionsKt.getParcelableArgument(savedInstanceState, SEARCH_EVENT, SearchEvent.class);\n            mFile = BundleExtensionsKt.getParcelableArgument(savedInstanceState, KEY_FILE, OCFile.class);\n        }\n\n        searchFragment = currentSearchType != null && isSearchEventSet(searchEvent);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreate from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onCreate\n\n        Method Code: Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setHasOptionsMenu(true);\n        mMultiChoiceModeListener = new MultiChoiceModeListener();\n\n        if (savedInstanceState != null) {\n            currentSearchType = BundleExtensionsKt.getParcelableArgument(savedInstanceState, KEY_CURRENT_SEARCH_TYPE, SearchType.class);\n            searchEvent = BundleExtensionsKt.getParcelableArgument(savedInstanceState, SEARCH_EVENT, SearchEvent.class);\n            mFile = BundleExtensionsKt.getParcelableArgument(savedInstanceState, KEY_FILE, OCFile.class);\n        }\n\n        searchFragment = currentSearchType != null && isSearchEventSet(searchEvent);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    self.navigationItem.rightBarButtonItem = self.editButtonItem\n    mMultiChoiceModeListener = MultiChoiceModeListener()\n\n    if let savedInstanceState = savedInstanceState {\n        currentSearchType = savedInstanceState.getParcelableArgument(key: KEY_CURRENT_SEARCH_TYPE, type: SearchType.self)\n        searchEvent = savedInstanceState.getParcelableArgument(key: SEARCH_EVENT, type: SearchEvent.self)\n        mFile = savedInstanceState.getParcelableArgument(key: KEY_FILE, type: OCFile.self)\n    }\n\n    searchFragment = currentSearchType != nil && isSearchEventSet(searchEvent)\n}\n```"
    },
    {
        "method_name": "onResume",
        "method_code": "Override\n    public void onResume() {\n        if (getActivity() == null) {\n            return;\n        }\n\n        Intent intent = getActivity().getIntent();\n\n        if (IntentExtensionsKt.getParcelableArgument(intent, SEARCH_EVENT, SearchEvent.class) != null) {\n            searchEvent = IntentExtensionsKt.getParcelableArgument(intent, SEARCH_EVENT, SearchEvent.class);\n        }\n\n        if (isSearchEventSet(searchEvent)) {\n            handleSearchEvent(searchEvent);\n        }\n\n        super.onResume();\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onResume from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onResume\n\n        Method Code: Override\n    public void onResume() {\n        if (getActivity() == null) {\n            return;\n        }\n\n        Intent intent = getActivity().getIntent();\n\n        if (IntentExtensionsKt.getParcelableArgument(intent, SEARCH_EVENT, SearchEvent.class) != null) {\n            searchEvent = IntentExtensionsKt.getParcelableArgument(intent, SEARCH_EVENT, SearchEvent.class);\n        }\n\n        if (isSearchEventSet(searchEvent)) {\n            handleSearchEvent(searchEvent);\n        }\n\n        super.onResume();\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n    \n    guard let activity = self.activity else {\n        return\n    }\n    \n    let intent = activity.intent\n    \n    if let searchEvent = intent.getParcelableArgument(forKey: SEARCH_EVENT, type: SearchEvent.self) {\n        self.searchEvent = searchEvent\n    }\n    \n    if isSearchEventSet(searchEvent) {\n        handleSearchEvent(searchEvent)\n    }\n}\n```"
    },
    {
        "method_name": "onAttach",
        "method_code": "Override\n    public void onAttach(@NonNull Context context) {\n        super.onAttach(context);\n        Log_OC.i(TAG, \"onAttach\");\n        try {\n            mContainerActivity = (FileFragment.ContainerActivity) context;\n            setTitle();\n\n        } catch (ClassCastException e) {\n            throw new IllegalArgumentException(context.toString() + \" must implement \" +\n                                                   FileFragment.ContainerActivity.class.getSimpleName(), e);\n        }\n        try {\n            setOnRefreshListener((OnEnforceableRefreshListener) context);\n\n        } catch (ClassCastException e) {\n            throw new IllegalArgumentException(context.toString() + \" must implement \" +\n                                                   OnEnforceableRefreshListener.class.getSimpleName(), e);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onAttach from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onAttach\n\n        Method Code: Override\n    public void onAttach(@NonNull Context context) {\n        super.onAttach(context);\n        Log_OC.i(TAG, \"onAttach\");\n        try {\n            mContainerActivity = (FileFragment.ContainerActivity) context;\n            setTitle();\n\n        } catch (ClassCastException e) {\n            throw new IllegalArgumentException(context.toString() + \" must implement \" +\n                                                   FileFragment.ContainerActivity.class.getSimpleName(), e);\n        }\n        try {\n            setOnRefreshListener((OnEnforceableRefreshListener) context);\n\n        } catch (ClassCastException e) {\n            throw new IllegalArgumentException(context.toString() + \" must implement \" +\n                                                   OnEnforceableRefreshListener.class.getSimpleName(), e);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func didMove(toParent parent: UIViewController?) {\n    super.didMove(toParent: parent)\n    Log_OC.i(TAG, \"didMove\")\n    guard let context = parent as? FileFragment.ContainerActivity else {\n        fatalError(\"\\(String(describing: parent)) must implement \\(FileFragment.ContainerActivity.self)\")\n    }\n    mContainerActivity = context\n    setTitle()\n    \n    guard let refreshListener = parent as? OnEnforceableRefreshListener else {\n        fatalError(\"\\(String(describing: parent)) must implement \\(OnEnforceableRefreshListener.self)\")\n    }\n    setOnRefreshListener(refreshListener)\n}\n```"
    },
    {
        "method_name": "onCreateView",
        "method_code": "Override\n    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        Log_OC.i(TAG, \"onCreateView() start\");\n        View v = super.onCreateView(inflater, container, savedInstanceState);\n\n\n        if (savedInstanceState != null &&\n            BundleExtensionsKt.getParcelableArgument(savedInstanceState, KEY_CURRENT_SEARCH_TYPE, SearchType.class) != null &&\n            BundleExtensionsKt.getParcelableArgument(savedInstanceState, SEARCH_EVENT, SearchEvent.class) != null) {\n            searchFragment = true;\n            currentSearchType = BundleExtensionsKt.getParcelableArgument(savedInstanceState, KEY_CURRENT_SEARCH_TYPE, SearchType.class);\n            searchEvent = BundleExtensionsKt.getParcelableArgument(savedInstanceState, SEARCH_EVENT, SearchEvent.class);\n        } else {\n            currentSearchType = NO_SEARCH;\n        }\n\n        Bundle args = getArguments();\n        boolean allowContextualActions = args != null && args.getBoolean(ARG_ALLOW_CONTEXTUAL_ACTIONS, false);\n        if (allowContextualActions) {\n            setChoiceModeAsMultipleModal(savedInstanceState);\n        }\n\n        mFabMain = requireActivity().findViewById(R.id.fab_main);\n\n        if (mFabMain != null) {\n            // is not available in FolderPickerActivity\n            viewThemeUtils.material.themeFAB(mFabMain);\n        }\n\n        Log_OC.i(TAG, \"onCreateView() end\");\n        return v;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreateView from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onCreateView\n\n        Method Code: Override\n    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        Log_OC.i(TAG, \"onCreateView() start\");\n        View v = super.onCreateView(inflater, container, savedInstanceState);\n\n\n        if (savedInstanceState != null &&\n            BundleExtensionsKt.getParcelableArgument(savedInstanceState, KEY_CURRENT_SEARCH_TYPE, SearchType.class) != null &&\n            BundleExtensionsKt.getParcelableArgument(savedInstanceState, SEARCH_EVENT, SearchEvent.class) != null) {\n            searchFragment = true;\n            currentSearchType = BundleExtensionsKt.getParcelableArgument(savedInstanceState, KEY_CURRENT_SEARCH_TYPE, SearchType.class);\n            searchEvent = BundleExtensionsKt.getParcelableArgument(savedInstanceState, SEARCH_EVENT, SearchEvent.class);\n        } else {\n            currentSearchType = NO_SEARCH;\n        }\n\n        Bundle args = getArguments();\n        boolean allowContextualActions = args != null && args.getBoolean(ARG_ALLOW_CONTEXTUAL_ACTIONS, false);\n        if (allowContextualActions) {\n            setChoiceModeAsMultipleModal(savedInstanceState);\n        }\n\n        mFabMain = requireActivity().findViewById(R.id.fab_main);\n\n        if (mFabMain != null) {\n            // is not available in FolderPickerActivity\n            viewThemeUtils.material.themeFAB(mFabMain);\n        }\n\n        Log_OC.i(TAG, \"onCreateView() end\");\n        return v;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    Log_OC.i(TAG, \"onCreateView() start\")\n    \n    if let savedInstanceState = savedInstanceState,\n       let currentSearchType = savedInstanceState.getParcelableArgument(key: KEY_CURRENT_SEARCH_TYPE, type: SearchType.self),\n       let searchEvent = savedInstanceState.getParcelableArgument(key: SEARCH_EVENT, type: SearchEvent.self) {\n        searchFragment = true\n        self.currentSearchType = currentSearchType\n        self.searchEvent = searchEvent\n    } else {\n        currentSearchType = NO_SEARCH\n    }\n    \n    if let args = self.arguments {\n        let allowContextualActions = args.getBoolean(key: ARG_ALLOW_CONTEXTUAL_ACTIONS, defaultValue: false)\n        if allowContextualActions {\n            setChoiceModeAsMultipleModal(savedInstanceState: savedInstanceState)\n        }\n    }\n    \n    mFabMain = self.view?.viewWithTag(R.id.fab_main)\n    \n    if let mFabMain = mFabMain {\n        viewThemeUtils.material.themeFAB(mFabMain)\n    }\n    \n    Log_OC.i(TAG, \"onCreateView() end\")\n}\n```"
    },
    {
        "method_name": "onDetach",
        "method_code": "Override\n    public void onDetach() {\n        setOnRefreshListener(null);\n        mContainerActivity = null;\n\n        if (remoteOperationAsyncTask != null) {\n            remoteOperationAsyncTask.cancel(true);\n        }\n        super.onDetach();\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onDetach from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onDetach\n\n        Method Code: Override\n    public void onDetach() {\n        setOnRefreshListener(null);\n        mContainerActivity = null;\n\n        if (remoteOperationAsyncTask != null) {\n            remoteOperationAsyncTask.cancel(true);\n        }\n        super.onDetach();\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onDetach() {\n    setOnRefreshListener(nil)\n    mContainerActivity = nil\n\n    if let task = remoteOperationAsyncTask {\n        task.cancel(true)\n    }\n    super.onDetach()\n}\n```"
    },
    {
        "method_name": "onPause",
        "method_code": "Override\n    public void onPause() {\n        super.onPause();\n        if (mAdapter != null) {\n            mAdapter.cancelAllPendingTasks();\n        }\n\n        if (getActivity() != null) {\n            getActivity().getIntent().removeExtra(OCFileListFragment.SEARCH_EVENT);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onPause from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onPause\n\n        Method Code: Override\n    public void onPause() {\n        super.onPause();\n        if (mAdapter != null) {\n            mAdapter.cancelAllPendingTasks();\n        }\n\n        if (getActivity() != null) {\n            getActivity().getIntent().removeExtra(OCFileListFragment.SEARCH_EVENT);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n    mAdapter?.cancelAllPendingTasks()\n    \n    if let activity = self.activity {\n        activity.intent.removeExtra(forKey: OCFileListFragment.SEARCH_EVENT)\n    }\n}\n```"
    },
    {
        "method_name": "onActivityCreated",
        "method_code": "Override\n    public void onActivityCreated(Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n        Log_OC.i(TAG, \"onActivityCreated() start\");\n\n        if (savedInstanceState != null) {\n            mFile = BundleExtensionsKt.getParcelableArgument(savedInstanceState, KEY_FILE, OCFile.class);\n        }\n\n        Bundle args = getArguments();\n        mOnlyFoldersClickable = args != null && args.getBoolean(ARG_ONLY_FOLDERS_CLICKABLE, false);\n        mFileSelectable = args != null && args.getBoolean(ARG_FILE_SELECTABLE, false);\n        mLimitToMimeType = args != null ? args.getString(ARG_MIMETYPE, \"\") : \"\";\n\n        setAdapter(args);\n\n        mHideFab = args != null && args.getBoolean(ARG_HIDE_FAB, false);\n\n        if (mHideFab) {\n            setFabVisible(false);\n        } else {\n            setFabVisible(true);\n            registerFabListener();\n        }\n\n        if (!searchFragment) {\n            // do not touch search event if previously searched\n            if (getArguments() == null) {\n                searchEvent = null;\n            } else {\n                searchEvent = BundleExtensionsKt.getParcelableArgument(getArguments(), SEARCH_EVENT, SearchEvent.class);\n            }\n        }\n        prepareCurrentSearch(searchEvent);\n        setEmptyView(searchEvent);\n\n        if (mSortButton != null) {\n            mSortButton.setOnClickListener(v -> openSortingOrderDialogFragment(requireFragmentManager(),\n                                                                               preferences.getSortOrderByFolder(mFile)));\n        }\n\n        if (mSwitchGridViewButton != null) {\n            mSwitchGridViewButton.setOnClickListener(v -> {\n                if (isGridEnabled()) {\n                    setListAsPreferred();\n                } else {\n                    setGridAsPreferred();\n                }\n                setGridSwitchButton();\n            });\n        }\n\n        setTitle();\n\n        FragmentActivity fragmentActivity;\n        if ((fragmentActivity = getActivity()) != null && fragmentActivity instanceof FileDisplayActivity) {\n            FileDisplayActivity fileDisplayActivity = (FileDisplayActivity) fragmentActivity;\n            fileDisplayActivity.updateActionBarTitleAndHomeButton(fileDisplayActivity.getCurrentDir());\n        }\n        listDirectory(MainApp.isOnlyOnDevice(), false);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onActivityCreated from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onActivityCreated\n\n        Method Code: Override\n    public void onActivityCreated(Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n        Log_OC.i(TAG, \"onActivityCreated() start\");\n\n        if (savedInstanceState != null) {\n            mFile = BundleExtensionsKt.getParcelableArgument(savedInstanceState, KEY_FILE, OCFile.class);\n        }\n\n        Bundle args = getArguments();\n        mOnlyFoldersClickable = args != null && args.getBoolean(ARG_ONLY_FOLDERS_CLICKABLE, false);\n        mFileSelectable = args != null && args.getBoolean(ARG_FILE_SELECTABLE, false);\n        mLimitToMimeType = args != null ? args.getString(ARG_MIMETYPE, \"\") : \"\";\n\n        setAdapter(args);\n\n        mHideFab = args != null && args.getBoolean(ARG_HIDE_FAB, false);\n\n        if (mHideFab) {\n            setFabVisible(false);\n        } else {\n            setFabVisible(true);\n            registerFabListener();\n        }\n\n        if (!searchFragment) {\n            // do not touch search event if previously searched\n            if (getArguments() == null) {\n                searchEvent = null;\n            } else {\n                searchEvent = BundleExtensionsKt.getParcelableArgument(getArguments(), SEARCH_EVENT, SearchEvent.class);\n            }\n        }\n        prepareCurrentSearch(searchEvent);\n        setEmptyView(searchEvent);\n\n        if (mSortButton != null) {\n            mSortButton.setOnClickListener(v -> openSortingOrderDialogFragment(requireFragmentManager(),\n                                                                               preferences.getSortOrderByFolder(mFile)));\n        }\n\n        if (mSwitchGridViewButton != null) {\n            mSwitchGridViewButton.setOnClickListener(v -> {\n                if (isGridEnabled()) {\n                    setListAsPreferred();\n                } else {\n                    setGridAsPreferred();\n                }\n                setGridSwitchButton();\n            });\n        }\n\n        setTitle();\n\n        FragmentActivity fragmentActivity;\n        if ((fragmentActivity = getActivity()) != null && fragmentActivity instanceof FileDisplayActivity) {\n            FileDisplayActivity fileDisplayActivity = (FileDisplayActivity) fragmentActivity;\n            fileDisplayActivity.updateActionBarTitleAndHomeButton(fileDisplayActivity.getCurrentDir());\n        }\n        listDirectory(MainApp.isOnlyOnDevice(), false);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onActivityCreated(_ savedInstanceState: Bundle?) {\n    super.onActivityCreated(savedInstanceState)\n    Log_OC.i(TAG, \"onActivityCreated() start\")\n\n    if let savedInstanceState = savedInstanceState {\n        mFile = savedInstanceState.getParcelableArgument(key: KEY_FILE, type: OCFile.self)\n    }\n\n    let args = arguments\n    mOnlyFoldersClickable = args?.getBoolean(ARG_ONLY_FOLDERS_CLICKABLE, defaultValue: false) ?? false\n    mFileSelectable = args?.getBoolean(ARG_FILE_SELECTABLE, defaultValue: false) ?? false\n    mLimitToMimeType = args?.getString(ARG_MIMETYPE, defaultValue: \"\") ?? \"\"\n\n    setAdapter(args)\n\n    mHideFab = args?.getBoolean(ARG_HIDE_FAB, defaultValue: false) ?? false\n\n    if mHideFab {\n        setFabVisible(false)\n    } else {\n        setFabVisible(true)\n        registerFabListener()\n    }\n\n    if !searchFragment {\n        if arguments == nil {\n            searchEvent = nil\n        } else {\n            searchEvent = arguments?.getParcelableArgument(key: SEARCH_EVENT, type: SearchEvent.self)\n        }\n    }\n    prepareCurrentSearch(searchEvent)\n    setEmptyView(searchEvent)\n\n    mSortButton?.setOnClickListener { [weak self] _ in\n        guard let self = self else { return }\n        self.openSortingOrderDialogFragment(self.requireFragmentManager(), preferences.getSortOrderByFolder(mFile))\n    }\n\n    mSwitchGridViewButton?.setOnClickListener { [weak self] _ in\n        guard let self = self else { return }\n        if self.isGridEnabled() {\n            self.setListAsPreferred()\n        } else {\n            self.setGridAsPreferred()\n        }\n        self.setGridSwitchButton()\n    }\n\n    setTitle()\n\n    if let fragmentActivity = activity as? FileDisplayActivity {\n        fragmentActivity.updateActionBarTitleAndHomeButton(fragmentActivity.getCurrentDir())\n    }\n    listDirectory(MainApp.isOnlyOnDevice(), false)\n}\n```"
    },
    {
        "method_name": "setAdapter",
        "method_code": "rotected void setAdapter(Bundle args) {\n        boolean hideItemOptions = args != null && args.getBoolean(ARG_HIDE_ITEM_OPTIONS, false);\n\n        mAdapter = new OCFileListAdapter(\n            getActivity(),\n            accountManager.getUser(),\n            preferences,\n            syncedFolderProvider,\n            mContainerActivity,\n            this,\n            hideItemOptions,\n            isGridViewPreferred(mFile),\n            viewThemeUtils\n        );\n\n        setRecyclerViewAdapter(mAdapter);\n\n        fastScrollUtils.applyFastScroll(getRecyclerView());\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setAdapter from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: setAdapter\n\n        Method Code: rotected void setAdapter(Bundle args) {\n        boolean hideItemOptions = args != null && args.getBoolean(ARG_HIDE_ITEM_OPTIONS, false);\n\n        mAdapter = new OCFileListAdapter(\n            getActivity(),\n            accountManager.getUser(),\n            preferences,\n            syncedFolderProvider,\n            mContainerActivity,\n            this,\n            hideItemOptions,\n            isGridViewPreferred(mFile),\n            viewThemeUtils\n        );\n\n        setRecyclerViewAdapter(mAdapter);\n\n        fastScrollUtils.applyFastScroll(getRecyclerView());\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setAdapter(args: Bundle?) {\n    let hideItemOptions = args?.bool(forKey: ARG_HIDE_ITEM_OPTIONS) ?? false\n\n    mAdapter = OCFileListAdapter(\n        activity: getActivity(),\n        user: accountManager.getUser(),\n        preferences: preferences,\n        syncedFolderProvider: syncedFolderProvider,\n        containerActivity: mContainerActivity,\n        delegate: self,\n        hideItemOptions: hideItemOptions,\n        isGridViewPreferred: isGridViewPreferred(mFile),\n        viewThemeUtils: viewThemeUtils\n    )\n\n    setRecyclerViewAdapter(mAdapter)\n\n    fastScrollUtils.applyFastScroll(to: getRecyclerView())\n}\n```"
    },
    {
        "method_name": "prepareCurrentSearch",
        "method_code": "rotected void prepareCurrentSearch(SearchEvent event) {\n        if (isSearchEventSet(event)) {\n\n            switch (event.getSearchType()) {\n                case FILE_SEARCH:\n                    currentSearchType = FILE_SEARCH;\n                    break;\n\n                case FAVORITE_SEARCH:\n                    currentSearchType = FAVORITE_SEARCH;\n                    break;\n\n                case RECENTLY_MODIFIED_SEARCH:\n                    currentSearchType = RECENTLY_MODIFIED_SEARCH;\n                    break;\n\n                case SHARED_FILTER:\n                    currentSearchType = SHARED_FILTER;\n                    break;\n\n                default:\n                    // do nothing\n                    break;\n            }\n\n            prepareActionBarItems(event);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled prepareCurrentSearch from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: prepareCurrentSearch\n\n        Method Code: rotected void prepareCurrentSearch(SearchEvent event) {\n        if (isSearchEventSet(event)) {\n\n            switch (event.getSearchType()) {\n                case FILE_SEARCH:\n                    currentSearchType = FILE_SEARCH;\n                    break;\n\n                case FAVORITE_SEARCH:\n                    currentSearchType = FAVORITE_SEARCH;\n                    break;\n\n                case RECENTLY_MODIFIED_SEARCH:\n                    currentSearchType = RECENTLY_MODIFIED_SEARCH;\n                    break;\n\n                case SHARED_FILTER:\n                    currentSearchType = SHARED_FILTER;\n                    break;\n\n                default:\n                    // do nothing\n                    break;\n            }\n\n            prepareActionBarItems(event);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc prepareCurrentSearch(event: SearchEvent) {\n    if isSearchEventSet(event: event) {\n        switch event.searchType {\n        case .fileSearch:\n            currentSearchType = .fileSearch\n\n        case .favoriteSearch:\n            currentSearchType = .favoriteSearch\n\n        case .recentlyModifiedSearch:\n            currentSearchType = .recentlyModifiedSearch\n\n        case .sharedFilter:\n            currentSearchType = .sharedFilter\n\n        default:\n            // do nothing\n            break\n        }\n\n        prepareActionBarItems(event: event)\n    }\n}\n```"
    },
    {
        "method_name": "registerFabListener",
        "method_code": "ublic void registerFabListener() {\n        FileActivity activity = (FileActivity) getActivity();\n\n        if (mFabMain != null) {\n            // is not available in FolderPickerActivity\n            viewThemeUtils.material.themeFAB(mFabMain);\n            mFabMain.setOnClickListener(v -> {\n                final OCFileListBottomSheetDialog dialog =\n                    new OCFileListBottomSheetDialog(activity,\n                                                    this,\n                                                    deviceInfo,\n                                                    accountManager.getUser(),\n                                                    getCurrentFile(),\n                                                    themeUtils,\n                                                    viewThemeUtils,\n                                                    editorUtils,\n                                                    appScanOptionalFeature);\n\n                dialog.getBehavior().setState(BottomSheetBehavior.STATE_EXPANDED);\n                dialog.getBehavior().setSkipCollapsed(true);\n                dialog.show();\n            });\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled registerFabListener from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: registerFabListener\n\n        Method Code: ublic void registerFabListener() {\n        FileActivity activity = (FileActivity) getActivity();\n\n        if (mFabMain != null) {\n            // is not available in FolderPickerActivity\n            viewThemeUtils.material.themeFAB(mFabMain);\n            mFabMain.setOnClickListener(v -> {\n                final OCFileListBottomSheetDialog dialog =\n                    new OCFileListBottomSheetDialog(activity,\n                                                    this,\n                                                    deviceInfo,\n                                                    accountManager.getUser(),\n                                                    getCurrentFile(),\n                                                    themeUtils,\n                                                    viewThemeUtils,\n                                                    editorUtils,\n                                                    appScanOptionalFeature);\n\n                dialog.getBehavior().setState(BottomSheetBehavior.STATE_EXPANDED);\n                dialog.getBehavior().setSkipCollapsed(true);\n                dialog.show();\n            });\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc registerFabListener() {\n    guard let activity = self.activity as? FileActivity else { return }\n\n    if let mFabMain = mFabMain {\n        viewThemeUtils.material.themeFAB(mFabMain)\n        mFabMain.addTarget(self, action: #selector(fabMainClicked), for: .touchUpInside)\n    }\n}\n\n@objc func fabMainClicked() {\n    guard let activity = self.activity as? FileActivity else { return }\n\n    let dialog = OCFileListBottomSheetDialog(activity: activity,\n                                             fragment: self,\n                                             deviceInfo: deviceInfo,\n                                             user: accountManager.getUser(),\n                                             currentFile: getCurrentFile(),\n                                             themeUtils: themeUtils,\n                                             viewThemeUtils: viewThemeUtils,\n                                             editorUtils: editorUtils,\n                                             appScanOptionalFeature: appScanOptionalFeature)\n\n    dialog.behavior.state = .expanded\n    dialog.behavior.isSkipCollapsed = true\n    dialog.show()\n}\n```"
    },
    {
        "method_name": "createFolder",
        "method_code": "Override\n    public void createFolder() {\n        CreateFolderDialogFragment.newInstance(mFile)\n            .show(getActivity().getSupportFragmentManager(), DIALOG_CREATE_FOLDER);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled createFolder from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: createFolder\n\n        Method Code: Override\n    public void createFolder() {\n        CreateFolderDialogFragment.newInstance(mFile)\n            .show(getActivity().getSupportFragmentManager(), DIALOG_CREATE_FOLDER);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func createFolder() {\n    let createFolderDialog = CreateFolderDialogFragment.newInstance(mFile)\n    createFolderDialog.show(self.activity?.supportFragmentManager, DIALOG_CREATE_FOLDER)\n}\n```"
    },
    {
        "method_name": "uploadFromApp",
        "method_code": "Override\n    public void uploadFromApp() {\n        Intent action = new Intent(Intent.ACTION_GET_CONTENT);\n        action = action.setType(\"*/*\").addCategory(Intent.CATEGORY_OPENABLE);\n        action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true);\n\n        getActivity().startActivityForResult(\n            Intent.createChooser(action, getString(R.string.upload_chooser_title)),\n            FileDisplayActivity.REQUEST_CODE__SELECT_CONTENT_FROM_APPS\n                                            );\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled uploadFromApp from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: uploadFromApp\n\n        Method Code: Override\n    public void uploadFromApp() {\n        Intent action = new Intent(Intent.ACTION_GET_CONTENT);\n        action = action.setType(\"*/*\").addCategory(Intent.CATEGORY_OPENABLE);\n        action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true);\n\n        getActivity().startActivityForResult(\n            Intent.createChooser(action, getString(R.string.upload_chooser_title)),\n            FileDisplayActivity.REQUEST_CODE__SELECT_CONTENT_FROM_APPS\n                                            );\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func uploadFromApp() {\n    let documentPicker = UIDocumentPickerViewController(documentTypes: [\"public.item\"], in: .import)\n    documentPicker.allowsMultipleSelection = true\n    documentPicker.delegate = self\n    present(documentPicker, animated: true, completion: nil)\n}\n```"
    },
    {
        "method_name": "directCameraUpload",
        "method_code": "Override\n    public void directCameraUpload() {\n        FileDisplayActivity fileDisplayActivity = (FileDisplayActivity) getActivity();\n\n        if (fileDisplayActivity == null) {\n            DisplayUtils.showSnackMessage(getView(), getString(R.string.error_starting_direct_camera_upload));\n            return;\n        }\n\n        if (!PermissionUtil.checkSelfPermission(fileDisplayActivity, Manifest.permission.CAMERA)) {\n            PermissionUtil.requestCameraPermission(fileDisplayActivity, PermissionUtil.PERMISSIONS_CAMERA);\n            return;\n        }\n\n        showDirectCameraUploadAlertDialog(fileDisplayActivity);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled directCameraUpload from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: directCameraUpload\n\n        Method Code: Override\n    public void directCameraUpload() {\n        FileDisplayActivity fileDisplayActivity = (FileDisplayActivity) getActivity();\n\n        if (fileDisplayActivity == null) {\n            DisplayUtils.showSnackMessage(getView(), getString(R.string.error_starting_direct_camera_upload));\n            return;\n        }\n\n        if (!PermissionUtil.checkSelfPermission(fileDisplayActivity, Manifest.permission.CAMERA)) {\n            PermissionUtil.requestCameraPermission(fileDisplayActivity, PermissionUtil.PERMISSIONS_CAMERA);\n            return;\n        }\n\n        showDirectCameraUploadAlertDialog(fileDisplayActivity);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func directCameraUpload() {\n    guard let fileDisplayActivity = self.activity as? FileDisplayActivity else {\n        DisplayUtils.showSnackMessage(view: self.view, message: NSLocalizedString(\"error_starting_direct_camera_upload\", comment: \"\"))\n        return\n    }\n\n    if !PermissionUtil.checkSelfPermission(fileDisplayActivity, permission: .camera) {\n        PermissionUtil.requestCameraPermission(fileDisplayActivity, permission: .camera)\n        return\n    }\n\n    showDirectCameraUploadAlertDialog(fileDisplayActivity)\n}\n```"
    },
    {
        "method_name": "showDirectCameraUploadAlertDialog",
        "method_code": "rivate void showDirectCameraUploadAlertDialog(FileDisplayActivity fileDisplayActivity) {\n        final MaterialAlertDialogBuilder builder = new MaterialAlertDialogBuilder(fileDisplayActivity)\n            .setTitle(R.string.upload_direct_camera_promt)\n            .setIcon(R.mipmap.ic_launcher)\n            .setPositiveButton(R.string.upload_direct_camera_video, (dialog, which) -> fileDisplayActivity.getFileOperationsHelper().uploadFromCamera(fileDisplayActivity, FileDisplayActivity.REQUEST_CODE__UPLOAD_FROM_VIDEO_CAMERA, true))\n            .setNegativeButton(R.string.upload_direct_camera_photo, (dialog, which) -> fileDisplayActivity.getFileOperationsHelper().uploadFromCamera(fileDisplayActivity, FileDisplayActivity.REQUEST_CODE__UPLOAD_FROM_CAMERA, false));\n\n        viewThemeUtils.dialog.colorMaterialAlertDialogBackground(fileDisplayActivity, builder);\n\n        builder.create();\n        builder.show();\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled showDirectCameraUploadAlertDialog from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: showDirectCameraUploadAlertDialog\n\n        Method Code: rivate void showDirectCameraUploadAlertDialog(FileDisplayActivity fileDisplayActivity) {\n        final MaterialAlertDialogBuilder builder = new MaterialAlertDialogBuilder(fileDisplayActivity)\n            .setTitle(R.string.upload_direct_camera_promt)\n            .setIcon(R.mipmap.ic_launcher)\n            .setPositiveButton(R.string.upload_direct_camera_video, (dialog, which) -> fileDisplayActivity.getFileOperationsHelper().uploadFromCamera(fileDisplayActivity, FileDisplayActivity.REQUEST_CODE__UPLOAD_FROM_VIDEO_CAMERA, true))\n            .setNegativeButton(R.string.upload_direct_camera_photo, (dialog, which) -> fileDisplayActivity.getFileOperationsHelper().uploadFromCamera(fileDisplayActivity, FileDisplayActivity.REQUEST_CODE__UPLOAD_FROM_CAMERA, false));\n\n        viewThemeUtils.dialog.colorMaterialAlertDialogBackground(fileDisplayActivity, builder);\n\n        builder.create();\n        builder.show();\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func showDirectCameraUploadAlertDialog(fileDisplayActivity: FileDisplayActivity) {\n    let alertController = UIAlertController(title: NSLocalizedString(\"upload_direct_camera_promt\", comment: \"\"), message: nil, preferredStyle: .alert)\n    \n    let videoAction = UIAlertAction(title: NSLocalizedString(\"upload_direct_camera_video\", comment: \"\"), style: .default) { _ in\n        fileDisplayActivity.getFileOperationsHelper().uploadFromCamera(fileDisplayActivity: fileDisplayActivity, requestCode: FileDisplayActivity.REQUEST_CODE__UPLOAD_FROM_VIDEO_CAMERA, isVideo: true)\n    }\n    \n    let photoAction = UIAlertAction(title: NSLocalizedString(\"upload_direct_camera_photo\", comment: \"\"), style: .default) { _ in\n        fileDisplayActivity.getFileOperationsHelper().uploadFromCamera(fileDisplayActivity: fileDisplayActivity, requestCode: FileDisplayActivity.REQUEST_CODE__UPLOAD_FROM_CAMERA, isVideo: false)\n    }\n    \n    alertController.addAction(videoAction)\n    alertController.addAction(photoAction)\n    \n    fileDisplayActivity.present(alertController, animated: true, completion: nil)\n}\n```"
    },
    {
        "method_name": "scanDocUpload",
        "method_code": "Override\n    public void scanDocUpload() {\n        FileDisplayActivity fileDisplayActivity = (FileDisplayActivity) getActivity();\n\n        final OCFile currentFile = getCurrentFile();\n        if (fileDisplayActivity != null && currentFile != null && currentFile.isFolder()) {\n\n            Intent intent = new Intent(requireContext(), DocumentScanActivity.class);\n            intent.putExtra(DocumentScanActivity.EXTRA_FOLDER, currentFile.getRemotePath());\n            startActivity(intent);\n        } else {\n            Log.w(TAG, \"scanDocUpload: Failed to start doc scanning, fileDisplayActivity=\" + fileDisplayActivity +\n                \", currentFile=\" + currentFile);\n            Toast.makeText(getContext(),\n                           getString(R.string.error_starting_doc_scan),\n                           Toast.LENGTH_SHORT)\n                .show();\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled scanDocUpload from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: scanDocUpload\n\n        Method Code: Override\n    public void scanDocUpload() {\n        FileDisplayActivity fileDisplayActivity = (FileDisplayActivity) getActivity();\n\n        final OCFile currentFile = getCurrentFile();\n        if (fileDisplayActivity != null && currentFile != null && currentFile.isFolder()) {\n\n            Intent intent = new Intent(requireContext(), DocumentScanActivity.class);\n            intent.putExtra(DocumentScanActivity.EXTRA_FOLDER, currentFile.getRemotePath());\n            startActivity(intent);\n        } else {\n            Log.w(TAG, \"scanDocUpload: Failed to start doc scanning, fileDisplayActivity=\" + fileDisplayActivity +\n                \", currentFile=\" + currentFile);\n            Toast.makeText(getContext(),\n                           getString(R.string.error_starting_doc_scan),\n                           Toast.LENGTH_SHORT)\n                .show();\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func scanDocUpload() {\n    guard let fileDisplayActivity = self.activity as? FileDisplayActivity,\n          let currentFile = getCurrentFile(),\n          currentFile.isFolder() else {\n        print(\"scanDocUpload: Failed to start doc scanning, fileDisplayActivity=\\(String(describing: self.activity)), currentFile=\\(String(describing: getCurrentFile()))\")\n        let toast = Toast(text: NSLocalizedString(\"error_starting_doc_scan\", comment: \"\"), duration: .short)\n        toast.show()\n        return\n    }\n\n    let intent = Intent(context: requireContext(), DocumentScanActivity.self)\n    intent.putExtra(DocumentScanActivity.EXTRA_FOLDER, currentFile.getRemotePath())\n    startActivity(intent)\n}\n```"
    },
    {
        "method_name": "uploadFiles",
        "method_code": "Override\n    public void uploadFiles() {\n        UploadFilesActivity.startUploadActivityForResult(\n            getActivity(),\n            ((FileActivity) getActivity()).getUser().orElseThrow(RuntimeException::new),\n            FileDisplayActivity.REQUEST_CODE__SELECT_FILES_FROM_FILE_SYSTEM,\n            getCurrentFile().isEncrypted());\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled uploadFiles from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: uploadFiles\n\n        Method Code: Override\n    public void uploadFiles() {\n        UploadFilesActivity.startUploadActivityForResult(\n            getActivity(),\n            ((FileActivity) getActivity()).getUser().orElseThrow(RuntimeException::new),\n            FileDisplayActivity.REQUEST_CODE__SELECT_FILES_FROM_FILE_SYSTEM,\n            getCurrentFile().isEncrypted());\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func uploadFiles() {\n    guard let activity = self.activity as? FileActivity,\n          let user = activity.getUser() else {\n        fatalError(\"User not found\")\n    }\n    UploadFilesActivity.startUploadActivityForResult(\n        activity: self.activity,\n        user: user,\n        requestCode: FileDisplayActivity.REQUEST_CODE__SELECT_FILES_FROM_FILE_SYSTEM,\n        isEncrypted: getCurrentFile().isEncrypted()\n    )\n}\n```"
    },
    {
        "method_name": "createRichWorkspace",
        "method_code": "Override\n    public void createRichWorkspace() {\n        new Thread(() -> {\n            RemoteOperationResult result = new RichWorkspaceDirectEditingRemoteOperation(mFile.getRemotePath())\n                .execute(accountManager.getUser(), requireContext());\n\n            if (result.isSuccess()) {\n                String url = (String) result.getSingleData();\n                mContainerActivity.getFileOperationsHelper().openRichWorkspaceWithTextEditor(mFile,\n                                                                                             url,\n                                                                                             requireContext());\n            } else {\n                DisplayUtils.showSnackMessage(getView(), R.string.failed_to_start_editor);\n            }\n        }).start();\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled createRichWorkspace from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: createRichWorkspace\n\n        Method Code: Override\n    public void createRichWorkspace() {\n        new Thread(() -> {\n            RemoteOperationResult result = new RichWorkspaceDirectEditingRemoteOperation(mFile.getRemotePath())\n                .execute(accountManager.getUser(), requireContext());\n\n            if (result.isSuccess()) {\n                String url = (String) result.getSingleData();\n                mContainerActivity.getFileOperationsHelper().openRichWorkspaceWithTextEditor(mFile,\n                                                                                             url,\n                                                                                             requireContext());\n            } else {\n                DisplayUtils.showSnackMessage(getView(), R.string.failed_to_start_editor);\n            }\n        }).start();\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func createRichWorkspace() {\n    DispatchQueue.global().async {\n        let result = RichWorkspaceDirectEditingRemoteOperation(mFile.remotePath)\n            .execute(accountManager.getUser(), context: self.requireContext())\n\n        DispatchQueue.main.async {\n            if result.isSuccess {\n                if let url = result.getSingleData() as? String {\n                    self.mContainerActivity.getFileOperationsHelper().openRichWorkspaceWithTextEditor(mFile, url: url, context: self.requireContext())\n                }\n            } else {\n                DisplayUtils.showSnackMessage(self.view, message: R.string.failed_to_start_editor)\n            }\n        }\n    }\n}\n```"
    },
    {
        "method_name": "onShareIconClick",
        "method_code": "Override\n    public void onShareIconClick(OCFile file) {\n        if (file.isFolder()) {\n            mContainerActivity.showDetails(file, 1);\n        } else {\n            throttler.run(\"shareIconClick\", () -> {\n                mContainerActivity.getFileOperationsHelper().sendShareFile(file);\n            });\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onShareIconClick from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onShareIconClick\n\n        Method Code: Override\n    public void onShareIconClick(OCFile file) {\n        if (file.isFolder()) {\n            mContainerActivity.showDetails(file, 1);\n        } else {\n            throttler.run(\"shareIconClick\", () -> {\n                mContainerActivity.getFileOperationsHelper().sendShareFile(file);\n            });\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onShareIconClick(file: OCFile) {\n    if file.isFolder() {\n        mContainerActivity.showDetails(file: file, index: 1)\n    } else {\n        throttler.run(key: \"shareIconClick\") {\n            mContainerActivity.getFileOperationsHelper().sendShareFile(file: file)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "showShareDetailView",
        "method_code": "Override\n    public void showShareDetailView(OCFile file) {\n        mContainerActivity.showDetails(file, 1);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled showShareDetailView from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: showShareDetailView\n\n        Method Code: Override\n    public void showShareDetailView(OCFile file) {\n        mContainerActivity.showDetails(file, 1);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func showShareDetailView(file: OCFile) {\n    mContainerActivity.showDetails(file, 1)\n}\n```"
    },
    {
        "method_name": "showActivityDetailView",
        "method_code": "Override\n    public void showActivityDetailView(OCFile file) {\n        mContainerActivity.showDetails(file, 0);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled showActivityDetailView from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: showActivityDetailView\n\n        Method Code: Override\n    public void showActivityDetailView(OCFile file) {\n        mContainerActivity.showDetails(file, 0);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func showActivityDetailView(file: OCFile) {\n    mContainerActivity.showDetails(file, 0)\n}\n```"
    },
    {
        "method_name": "onOverflowIconClicked",
        "method_code": "Override\n    public void onOverflowIconClicked(OCFile file, View view) {\n        final Set<OCFile> checkedFiles = new HashSet<>();\n        checkedFiles.add(file);\n        openActionsMenu(1, checkedFiles, true);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onOverflowIconClicked from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onOverflowIconClicked\n\n        Method Code: Override\n    public void onOverflowIconClicked(OCFile file, View view) {\n        final Set<OCFile> checkedFiles = new HashSet<>();\n        checkedFiles.add(file);\n        openActionsMenu(1, checkedFiles, true);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onOverflowIconClicked(file: OCFile, view: UIView) {\n    var checkedFiles = Set<OCFile>()\n    checkedFiles.insert(file)\n    openActionsMenu(1, checkedFiles: checkedFiles, true)\n}\n```"
    },
    {
        "method_name": "openActionsMenu",
        "method_code": "ublic void openActionsMenu(final int filesCount, final Set<OCFile> checkedFiles, final boolean isOverflow) {\n        throttler.run(\"overflowClick\", () -> {\n            List<Integer> toHide = new ArrayList<>();\n\n            for (OCFile file : checkedFiles) {\n                if (file.isOfflineOperation()) {\n                    toHide = new ArrayList<>(\n                        Arrays.asList(R.id.action_favorite,\n                                      R.id.action_move_or_copy,\n                                      R.id.action_sync_file,\n                                      R.id.action_encrypted,\n                                      R.id.action_unset_encrypted,\n                                      R.id.action_edit,\n                                      R.id.action_download_file,\n                                      R.id.action_export_file,\n                                      R.id.action_set_as_wallpaper\n                                     )\n                    );\n                    break;\n                }\n            }\n\n            if (isAPKorAAB(checkedFiles)) {\n                toHide.add(R.id.action_send_share_file);\n                toHide.add(R.id.action_export_file);\n                toHide.add(R.id.action_sync_file);\n                toHide.add(R.id.action_download_file);\n            }\n\n            final FragmentManager childFragmentManager = getChildFragmentManager();\n            FileActionsBottomSheet.newInstance(filesCount, checkedFiles, isOverflow, toHide)\n                .setResultListener(childFragmentManager, this, (id) -> onFileActionChosen(id, checkedFiles))\n                .show(childFragmentManager, \"actions\");\n        });\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled openActionsMenu from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: openActionsMenu\n\n        Method Code: ublic void openActionsMenu(final int filesCount, final Set<OCFile> checkedFiles, final boolean isOverflow) {\n        throttler.run(\"overflowClick\", () -> {\n            List<Integer> toHide = new ArrayList<>();\n\n            for (OCFile file : checkedFiles) {\n                if (file.isOfflineOperation()) {\n                    toHide = new ArrayList<>(\n                        Arrays.asList(R.id.action_favorite,\n                                      R.id.action_move_or_copy,\n                                      R.id.action_sync_file,\n                                      R.id.action_encrypted,\n                                      R.id.action_unset_encrypted,\n                                      R.id.action_edit,\n                                      R.id.action_download_file,\n                                      R.id.action_export_file,\n                                      R.id.action_set_as_wallpaper\n                                     )\n                    );\n                    break;\n                }\n            }\n\n            if (isAPKorAAB(checkedFiles)) {\n                toHide.add(R.id.action_send_share_file);\n                toHide.add(R.id.action_export_file);\n                toHide.add(R.id.action_sync_file);\n                toHide.add(R.id.action_download_file);\n            }\n\n            final FragmentManager childFragmentManager = getChildFragmentManager();\n            FileActionsBottomSheet.newInstance(filesCount, checkedFiles, isOverflow, toHide)\n                .setResultListener(childFragmentManager, this, (id) -> onFileActionChosen(id, checkedFiles))\n                .show(childFragmentManager, \"actions\");\n        });\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc openActionsMenu(filesCount: Int, checkedFiles: Set<OCFile>, isOverflow: Bool) {\n    throttler.run(\"overflowClick\") {\n        var toHide: [Int] = []\n\n        for file in checkedFiles {\n            if file.isOfflineOperation() {\n                toHide = [\n                    R.id.action_favorite,\n                    R.id.action_move_or_copy,\n                    R.id.action_sync_file,\n                    R.id.action_encrypted,\n                    R.id.action_unset_encrypted,\n                    R.id.action_edit,\n                    R.id.action_download_file,\n                    R.id.action_export_file,\n                    R.id.action_set_as_wallpaper\n                ]\n                break\n            }\n        }\n\n        if isAPKorAAB(checkedFiles) {\n            toHide.append(contentsOf: [\n                R.id.action_send_share_file,\n                R.id.action_export_file,\n                R.id.action_sync_file,\n                R.id.action_download_file\n            ])\n        }\n\n        let childFragmentManager = self.childFragmentManager\n        FileActionsBottomSheet.newInstance(filesCount: filesCount, checkedFiles: checkedFiles, isOverflow: isOverflow, toHide: toHide)\n            .setResultListener(childFragmentManager: childFragmentManager, self, { id in\n                self.onFileActionChosen(id: id, checkedFiles: checkedFiles)\n            })\n            .show(childFragmentManager, \"actions\")\n    }\n}\n```"
    },
    {
        "method_name": "newDocument",
        "method_code": "Override\n    public void newDocument() {\n        ChooseRichDocumentsTemplateDialogFragment.newInstance(mFile,\n                                                              ChooseRichDocumentsTemplateDialogFragment.Type.DOCUMENT)\n            .show(requireActivity().getSupportFragmentManager(), DIALOG_CREATE_DOCUMENT);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled newDocument from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: newDocument\n\n        Method Code: Override\n    public void newDocument() {\n        ChooseRichDocumentsTemplateDialogFragment.newInstance(mFile,\n                                                              ChooseRichDocumentsTemplateDialogFragment.Type.DOCUMENT)\n            .show(requireActivity().getSupportFragmentManager(), DIALOG_CREATE_DOCUMENT);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func newDocument() {\n    ChooseRichDocumentsTemplateDialogFragment.newInstance(mFile, type: .document)\n        .show(requireActivity().supportFragmentManager, tag: DIALOG_CREATE_DOCUMENT)\n}\n```"
    },
    {
        "method_name": "newSpreadsheet",
        "method_code": "Override\n    public void newSpreadsheet() {\n        ChooseRichDocumentsTemplateDialogFragment.newInstance(mFile,\n                                                              ChooseRichDocumentsTemplateDialogFragment.Type.SPREADSHEET)\n            .show(requireActivity().getSupportFragmentManager(), DIALOG_CREATE_DOCUMENT);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled newSpreadsheet from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: newSpreadsheet\n\n        Method Code: Override\n    public void newSpreadsheet() {\n        ChooseRichDocumentsTemplateDialogFragment.newInstance(mFile,\n                                                              ChooseRichDocumentsTemplateDialogFragment.Type.SPREADSHEET)\n            .show(requireActivity().getSupportFragmentManager(), DIALOG_CREATE_DOCUMENT);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func newSpreadsheet() {\n    ChooseRichDocumentsTemplateDialogFragment.newInstance(mFile, type: .spreadsheet)\n        .show(requireActivity().supportFragmentManager, tag: DIALOG_CREATE_DOCUMENT)\n}\n```"
    },
    {
        "method_name": "newPresentation",
        "method_code": "Override\n    public void newPresentation() {\n        ChooseRichDocumentsTemplateDialogFragment.newInstance(mFile,\n                                                              ChooseRichDocumentsTemplateDialogFragment.Type.PRESENTATION)\n            .show(requireActivity().getSupportFragmentManager(), DIALOG_CREATE_DOCUMENT);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled newPresentation from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: newPresentation\n\n        Method Code: Override\n    public void newPresentation() {\n        ChooseRichDocumentsTemplateDialogFragment.newInstance(mFile,\n                                                              ChooseRichDocumentsTemplateDialogFragment.Type.PRESENTATION)\n            .show(requireActivity().getSupportFragmentManager(), DIALOG_CREATE_DOCUMENT);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func newPresentation() {\n    ChooseRichDocumentsTemplateDialogFragment.newInstance(mFile, type: .presentation)\n        .show(requireActivity().supportFragmentManager, DIALOG_CREATE_DOCUMENT)\n}\n```"
    },
    {
        "method_name": "onHeaderClicked",
        "method_code": "Override\n    public void onHeaderClicked() {\n        if (getAdapter() != null && !getAdapter().isMultiSelect() && mContainerActivity instanceof FileDisplayActivity) {\n            ((FileDisplayActivity) mContainerActivity).startRichWorkspacePreview(getCurrentFile());\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onHeaderClicked from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onHeaderClicked\n\n        Method Code: Override\n    public void onHeaderClicked() {\n        if (getAdapter() != null && !getAdapter().isMultiSelect() && mContainerActivity instanceof FileDisplayActivity) {\n            ((FileDisplayActivity) mContainerActivity).startRichWorkspacePreview(getCurrentFile());\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onHeaderClicked() {\n    if let adapter = getAdapter(), !adapter.isMultiSelect(), let containerActivity = mContainerActivity as? FileDisplayActivity {\n        containerActivity.startRichWorkspacePreview(getCurrentFile())\n    }\n}\n```"
    },
    {
        "method_name": "showTemplate",
        "method_code": "Override\n    public void showTemplate(@NonNull Creator creator, @NonNull String headline) {\n        ChooseTemplateDialogFragment.newInstance(mFile, creator, headline).show(requireActivity().getSupportFragmentManager(),\n                                                                                DIALOG_CREATE_DOCUMENT);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled showTemplate from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: showTemplate\n\n        Method Code: Override\n    public void showTemplate(@NonNull Creator creator, @NonNull String headline) {\n        ChooseTemplateDialogFragment.newInstance(mFile, creator, headline).show(requireActivity().getSupportFragmentManager(),\n                                                                                DIALOG_CREATE_DOCUMENT);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func showTemplate(creator: Creator, headline: String) {\n    ChooseTemplateDialogFragment.newInstance(mFile, creator: creator, headline: headline).show(requireActivity().supportFragmentManager, DIALOG_CREATE_DOCUMENT)\n}\n```"
    },
    {
        "method_name": "onDrawerSlide",
        "method_code": "Override\n        public void onDrawerSlide(@NonNull View drawerView, float slideOffset) {\n            // nothing to do\n        }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onDrawerSlide from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onDrawerSlide\n\n        Method Code: Override\n        public void onDrawerSlide(@NonNull View drawerView, float slideOffset) {\n            // nothing to do\n        }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onDrawerSlide(_ drawerView: UIView, slideOffset: CGFloat) {\n    // nothing to do\n}\n```"
    },
    {
        "method_name": "onDrawerOpened",
        "method_code": "Override\n        public void onDrawerOpened(@NonNull View drawerView) {\n            // nothing to do\n        }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onDrawerOpened from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onDrawerOpened\n\n        Method Code: Override\n        public void onDrawerOpened(@NonNull View drawerView) {\n            // nothing to do\n        }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onDrawerOpened(_ drawerView: UIView) {\n    // nothing to do\n}\n```"
    },
    {
        "method_name": "onDrawerClosed",
        "method_code": "Override\n        public void onDrawerClosed(@NonNull View drawerView) {\n            if (mActionModeClosedByDrawer && mSelectionWhenActionModeClosedByDrawer.size() > 0) {\n                FragmentActivity actionBarActivity = getActivity();\n                actionBarActivity.startActionMode(mMultiChoiceModeListener);\n\n                getAdapter().setCheckedItem(mSelectionWhenActionModeClosedByDrawer);\n\n                mActiveActionMode.invalidate();\n\n                mSelectionWhenActionModeClosedByDrawer.clear();\n            }\n        }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onDrawerClosed from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onDrawerClosed\n\n        Method Code: Override\n        public void onDrawerClosed(@NonNull View drawerView) {\n            if (mActionModeClosedByDrawer && mSelectionWhenActionModeClosedByDrawer.size() > 0) {\n                FragmentActivity actionBarActivity = getActivity();\n                actionBarActivity.startActionMode(mMultiChoiceModeListener);\n\n                getAdapter().setCheckedItem(mSelectionWhenActionModeClosedByDrawer);\n\n                mActiveActionMode.invalidate();\n\n                mSelectionWhenActionModeClosedByDrawer.clear();\n            }\n        }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onDrawerClosed(_ drawerView: UIView) {\n    if mActionModeClosedByDrawer && !mSelectionWhenActionModeClosedByDrawer.isEmpty {\n        let actionBarActivity = self.activity\n        actionBarActivity?.startActionMode(mMultiChoiceModeListener)\n\n        getAdapter().setCheckedItem(mSelectionWhenActionModeClosedByDrawer)\n\n        mActiveActionMode?.invalidate()\n\n        mSelectionWhenActionModeClosedByDrawer.removeAll()\n    }\n}\n```"
    },
    {
        "method_name": "onDrawerStateChanged",
        "method_code": "Override\n        public void onDrawerStateChanged(int newState) {\n            if (DrawerLayout.STATE_DRAGGING == newState && mActiveActionMode != null) {\n                mSelectionWhenActionModeClosedByDrawer.addAll(((OCFileListAdapter) getRecyclerView().getAdapter())\n                                                                  .getCheckedItems());\n                mActiveActionMode.finish();\n                mActionModeClosedByDrawer = true;\n            }\n        }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onDrawerStateChanged from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onDrawerStateChanged\n\n        Method Code: Override\n        public void onDrawerStateChanged(int newState) {\n            if (DrawerLayout.STATE_DRAGGING == newState && mActiveActionMode != null) {\n                mSelectionWhenActionModeClosedByDrawer.addAll(((OCFileListAdapter) getRecyclerView().getAdapter())\n                                                                  .getCheckedItems());\n                mActiveActionMode.finish();\n                mActionModeClosedByDrawer = true;\n            }\n        }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onDrawerStateChanged(newState: Int) {\n    if DrawerLayout.STATE_DRAGGING == newState && mActiveActionMode != nil {\n        if let adapter = getRecyclerView().adapter as? OCFileListAdapter {\n            mSelectionWhenActionModeClosedByDrawer.formUnion(adapter.getCheckedItems())\n        }\n        mActiveActionMode?.finish()\n        mActionModeClosedByDrawer = true\n    }\n}\n```"
    },
    {
        "method_name": "onItemCheckedStateChanged",
        "method_code": "Override\n        public void onItemCheckedStateChanged(ActionMode mode, int position, long id, boolean checked) {\n            // nothing to do here\n        }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onItemCheckedStateChanged from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onItemCheckedStateChanged\n\n        Method Code: Override\n        public void onItemCheckedStateChanged(ActionMode mode, int position, long id, boolean checked) {\n            // nothing to do here\n        }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onItemCheckedStateChanged(mode: UIActionMode, position: Int, id: Int64, checked: Bool) {\n    // nothing to do here\n}\n```"
    },
    {
        "method_name": "onCreateActionMode",
        "method_code": "Override\n        public boolean onCreateActionMode(ActionMode mode, Menu menu) {\n            mActiveActionMode = mode;\n            // Determine if actionMode is \"new\" or not (already affected by item-selection)\n            mIsActionModeNew = true;\n\n            // fake menu to be able to use bottom sheet instead\n            MenuInflater inflater = getActivity().getMenuInflater();\n            inflater.inflate(R.menu.custom_menu_placeholder, menu);\n            final MenuItem item = menu.findItem(R.id.custom_menu_placeholder_item);\n            item.setIcon(viewThemeUtils.platform.colorDrawable(item.getIcon(), ContextCompat.getColor(requireContext(), R.color.white)));\n            mode.invalidate();\n\n            //set actionMode color\n            viewThemeUtils.platform.colorStatusBar(\n                getActivity(),\n                ContextCompat.getColor(getContext(), R.color.action_mode_background));\n\n            // hide FAB in multi selection mode\n            setFabVisible(false);\n\n            getCommonAdapter().setMultiSelect(true);\n            return true;\n        }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreateActionMode from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onCreateActionMode\n\n        Method Code: Override\n        public boolean onCreateActionMode(ActionMode mode, Menu menu) {\n            mActiveActionMode = mode;\n            // Determine if actionMode is \"new\" or not (already affected by item-selection)\n            mIsActionModeNew = true;\n\n            // fake menu to be able to use bottom sheet instead\n            MenuInflater inflater = getActivity().getMenuInflater();\n            inflater.inflate(R.menu.custom_menu_placeholder, menu);\n            final MenuItem item = menu.findItem(R.id.custom_menu_placeholder_item);\n            item.setIcon(viewThemeUtils.platform.colorDrawable(item.getIcon(), ContextCompat.getColor(requireContext(), R.color.white)));\n            mode.invalidate();\n\n            //set actionMode color\n            viewThemeUtils.platform.colorStatusBar(\n                getActivity(),\n                ContextCompat.getColor(getContext(), R.color.action_mode_background));\n\n            // hide FAB in multi selection mode\n            setFabVisible(false);\n\n            getCommonAdapter().setMultiSelect(true);\n            return true;\n        }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onCreateActionMode(_ mode: UIActionMode, menu: UIMenu) -> Bool {\n    mActiveActionMode = mode\n    mIsActionModeNew = true\n\n    let inflater = activity?.menuInflater\n    inflater?.inflate(R.menu.custom_menu_placeholder, menu)\n    if let item = menu.findItem(withIdentifier: R.id.custom_menu_placeholder_item) {\n        item.icon = viewThemeUtils.platform.colorDrawable(item.icon, color: UIColor.white)\n    }\n    mode.invalidate()\n\n    viewThemeUtils.platform.colorStatusBar(activity, color: UIColor(named: \"action_mode_background\") ?? UIColor.clear)\n\n    setFabVisible(false)\n\n    getCommonAdapter().setMultiSelect(true)\n    return true\n}\n```"
    },
    {
        "method_name": "onPrepareActionMode",
        "method_code": "Override\n        public boolean onPrepareActionMode(ActionMode mode, Menu menu) {\n            Set<OCFile> checkedFiles = getCommonAdapter().getCheckedItems();\n            final int checkedCount = checkedFiles.size();\n            String title = getResources().getQuantityString(R.plurals.items_selected_count, checkedCount, checkedCount);\n            mode.setTitle(title);\n\n            // Determine if we need to finish the action mode because there are no items selected\n            if (checkedCount == 0 && !mIsActionModeNew) {\n                exitSelectionMode();\n            }\n\n            return true;\n        }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onPrepareActionMode from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onPrepareActionMode\n\n        Method Code: Override\n        public boolean onPrepareActionMode(ActionMode mode, Menu menu) {\n            Set<OCFile> checkedFiles = getCommonAdapter().getCheckedItems();\n            final int checkedCount = checkedFiles.size();\n            String title = getResources().getQuantityString(R.plurals.items_selected_count, checkedCount, checkedCount);\n            mode.setTitle(title);\n\n            // Determine if we need to finish the action mode because there are no items selected\n            if (checkedCount == 0 && !mIsActionModeNew) {\n                exitSelectionMode();\n            }\n\n            return true;\n        }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onPrepareActionMode(mode: UIActionMode, menu: UIMenu) -> Bool {\n    let checkedFiles = getCommonAdapter().getCheckedItems()\n    let checkedCount = checkedFiles.count\n    let title = String.localizedStringWithFormat(NSLocalizedString(\"%d items selected\", comment: \"\"), checkedCount)\n    mode.title = title\n\n    if checkedCount == 0 && !mIsActionModeNew {\n        exitSelectionMode()\n    }\n\n    return true\n}\n```"
    },
    {
        "method_name": "onActionItemClicked",
        "method_code": "Override\n        public boolean onActionItemClicked(ActionMode mode, MenuItem item) {\n            final Set<OCFile> checkedFiles = getCommonAdapter().getCheckedItems();\n            if (item.getItemId() == R.id.custom_menu_placeholder_item) {\n                openActionsMenu(getCommonAdapter().getFilesCount(), checkedFiles, false);\n            }\n            return true;\n        }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onActionItemClicked from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onActionItemClicked\n\n        Method Code: Override\n        public boolean onActionItemClicked(ActionMode mode, MenuItem item) {\n            final Set<OCFile> checkedFiles = getCommonAdapter().getCheckedItems();\n            if (item.getItemId() == R.id.custom_menu_placeholder_item) {\n                openActionsMenu(getCommonAdapter().getFilesCount(), checkedFiles, false);\n            }\n            return true;\n        }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onActionItemClicked(mode: UIActionMode, item: UIMenuItem) -> Bool {\n    let checkedFiles = getCommonAdapter().getCheckedItems()\n    if item.itemId == R.id.custom_menu_placeholder_item {\n        openActionsMenu(getCommonAdapter().getFilesCount(), checkedFiles: checkedFiles, false)\n    }\n    return true\n}\n```"
    },
    {
        "method_name": "onDestroyActionMode",
        "method_code": "Override\n        public void onDestroyActionMode(ActionMode mode) {\n            mActiveActionMode = null;\n\n            // show FAB on multi selection mode exit\n            if (!mHideFab && !searchFragment) {\n                setFabVisible(true);\n            }\n\n            Activity activity = getActivity();\n            if (activity != null) {\n                viewThemeUtils.platform.resetStatusBar(activity);\n            }\n\n            getCommonAdapter().setMultiSelect(false);\n            getCommonAdapter().clearCheckedItems();\n        }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onDestroyActionMode from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onDestroyActionMode\n\n        Method Code: Override\n        public void onDestroyActionMode(ActionMode mode) {\n            mActiveActionMode = null;\n\n            // show FAB on multi selection mode exit\n            if (!mHideFab && !searchFragment) {\n                setFabVisible(true);\n            }\n\n            Activity activity = getActivity();\n            if (activity != null) {\n                viewThemeUtils.platform.resetStatusBar(activity);\n            }\n\n            getCommonAdapter().setMultiSelect(false);\n            getCommonAdapter().clearCheckedItems();\n        }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onDestroyActionMode(_ mode: UIActionMode) {\n    mActiveActionMode = nil\n\n    // show FAB on multi selection mode exit\n    if !mHideFab && !searchFragment {\n        setFabVisible(true)\n    }\n\n    if let activity = getActivity() {\n        viewThemeUtils.platform.resetStatusBar(activity)\n    }\n\n    getCommonAdapter().setMultiSelect(false)\n    getCommonAdapter().clearCheckedItems()\n}\n```"
    },
    {
        "method_name": "storeStateIn",
        "method_code": "ublic void storeStateIn(Bundle outState) {\n            outState.putBoolean(KEY_ACTION_MODE_CLOSED_BY_DRAWER, mActionModeClosedByDrawer);\n        }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled storeStateIn from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: storeStateIn\n\n        Method Code: ublic void storeStateIn(Bundle outState) {\n            outState.putBoolean(KEY_ACTION_MODE_CLOSED_BY_DRAWER, mActionModeClosedByDrawer);\n        }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc storeStateIn(_ outState: inout [String: Any]) {\n    outState[\"KEY_ACTION_MODE_CLOSED_BY_DRAWER\"] = mActionModeClosedByDrawer\n}\n```"
    },
    {
        "method_name": "loadStateFrom",
        "method_code": "ublic void loadStateFrom(Bundle savedInstanceState) {\n            mActionModeClosedByDrawer = savedInstanceState.getBoolean(KEY_ACTION_MODE_CLOSED_BY_DRAWER,\n                                                                      mActionModeClosedByDrawer);\n        }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled loadStateFrom from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: loadStateFrom\n\n        Method Code: ublic void loadStateFrom(Bundle savedInstanceState) {\n            mActionModeClosedByDrawer = savedInstanceState.getBoolean(KEY_ACTION_MODE_CLOSED_BY_DRAWER,\n                                                                      mActionModeClosedByDrawer);\n        }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc loadStateFrom(savedInstanceState: Bundle) {\n    mActionModeClosedByDrawer = savedInstanceState.bool(forKey: KEY_ACTION_MODE_CLOSED_BY_DRAWER) ?? mActionModeClosedByDrawer\n}\n```"
    },
    {
        "method_name": "setChoiceModeAsMultipleModal",
        "method_code": "rotected void setChoiceModeAsMultipleModal(Bundle savedInstanceState) {\n        if (savedInstanceState != null) {\n            mMultiChoiceModeListener.loadStateFrom(savedInstanceState);\n        }\n        ((FileActivity) getActivity()).addDrawerListener(mMultiChoiceModeListener);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setChoiceModeAsMultipleModal from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: setChoiceModeAsMultipleModal\n\n        Method Code: rotected void setChoiceModeAsMultipleModal(Bundle savedInstanceState) {\n        if (savedInstanceState != null) {\n            mMultiChoiceModeListener.loadStateFrom(savedInstanceState);\n        }\n        ((FileActivity) getActivity()).addDrawerListener(mMultiChoiceModeListener);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setChoiceModeAsMultipleModal(savedInstanceState: Bundle?) {\n    if let savedInstanceState = savedInstanceState {\n        mMultiChoiceModeListener.loadStateFrom(savedInstanceState)\n    }\n    (activity as? FileActivity)?.addDrawerListener(mMultiChoiceModeListener)\n}\n```"
    },
    {
        "method_name": "onSaveInstanceState",
        "method_code": "Override\n    public void onSaveInstanceState(@NonNull Bundle outState) {\n        super.onSaveInstanceState(outState);\n        FileExtensionsKt.logFileSize(mFile, TAG);\n        outState.putParcelable(KEY_FILE, mFile);\n        if (searchFragment) {\n            outState.putParcelable(KEY_CURRENT_SEARCH_TYPE, currentSearchType);\n            if (isSearchEventSet(searchEvent)) {\n                outState.putParcelable(OCFileListFragment.SEARCH_EVENT, searchEvent);\n            }\n        }\n        mMultiChoiceModeListener.storeStateIn(outState);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onSaveInstanceState from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onSaveInstanceState\n\n        Method Code: Override\n    public void onSaveInstanceState(@NonNull Bundle outState) {\n        super.onSaveInstanceState(outState);\n        FileExtensionsKt.logFileSize(mFile, TAG);\n        outState.putParcelable(KEY_FILE, mFile);\n        if (searchFragment) {\n            outState.putParcelable(KEY_CURRENT_SEARCH_TYPE, currentSearchType);\n            if (isSearchEventSet(searchEvent)) {\n                outState.putParcelable(OCFileListFragment.SEARCH_EVENT, searchEvent);\n            }\n        }\n        mMultiChoiceModeListener.storeStateIn(outState);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func encodeRestorableState(with coder: NSCoder) {\n    super.encodeRestorableState(with: coder)\n    logFileSize(mFile, TAG)\n    coder.encode(mFile, forKey: KEY_FILE)\n    if searchFragment {\n        coder.encode(currentSearchType, forKey: KEY_CURRENT_SEARCH_TYPE)\n        if isSearchEventSet(searchEvent) {\n            coder.encode(searchEvent, forKey: OCFileListFragment.SEARCH_EVENT)\n        }\n    }\n    mMultiChoiceModeListener.storeState(in: coder)\n}\n```"
    },
    {
        "method_name": "onPrepareOptionsMenu",
        "method_code": "Override\n    public void onPrepareOptionsMenu(@NonNull Menu menu) {\n        if (mOriginalMenuItems.isEmpty()) {\n            mOriginalMenuItems.add(menu.findItem(R.id.action_search));\n        }\n\n        if (menuItemAddRemoveValue == MenuItemAddRemove.REMOVE_GRID_AND_SORT) {\n            menu.removeItem(R.id.action_search);\n        }\n\n        updateSortAndGridMenuItems();\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onPrepareOptionsMenu from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onPrepareOptionsMenu\n\n        Method Code: Override\n    public void onPrepareOptionsMenu(@NonNull Menu menu) {\n        if (mOriginalMenuItems.isEmpty()) {\n            mOriginalMenuItems.add(menu.findItem(R.id.action_search));\n        }\n\n        if (menuItemAddRemoveValue == MenuItemAddRemove.REMOVE_GRID_AND_SORT) {\n            menu.removeItem(R.id.action_search);\n        }\n\n        updateSortAndGridMenuItems();\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n    if mOriginalMenuItems.isEmpty {\n        if let searchItem = menu.findItem(withIdentifier: R.id.action_search) {\n            mOriginalMenuItems.append(searchItem)\n        }\n    }\n\n    if menuItemAddRemoveValue == .removeGridAndSort {\n        menu.removeItem(withIdentifier: R.id.action_search)\n    }\n\n    updateSortAndGridMenuItems()\n}\n```"
    },
    {
        "method_name": "updateSortAndGridMenuItems",
        "method_code": "rivate void updateSortAndGridMenuItems() {\n        switch (menuItemAddRemoveValue) {\n            case ADD_GRID_AND_SORT_WITH_SEARCH:\n                mSwitchGridViewButton.setVisibility(View.VISIBLE);\n                mSortButton.setVisibility(View.VISIBLE);\n                break;\n\n            case REMOVE_SORT:\n                mSortButton.setVisibility(View.GONE);\n                break;\n\n            case REMOVE_GRID_AND_SORT:\n                mSortButton.setVisibility(View.GONE);\n                mSwitchGridViewButton.setVisibility(View.GONE);\n                break;\n\n            case DO_NOTHING:\n            default:\n                Log_OC.v(TAG, \"Kept the options menu default structure\");\n                break;\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled updateSortAndGridMenuItems from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: updateSortAndGridMenuItems\n\n        Method Code: rivate void updateSortAndGridMenuItems() {\n        switch (menuItemAddRemoveValue) {\n            case ADD_GRID_AND_SORT_WITH_SEARCH:\n                mSwitchGridViewButton.setVisibility(View.VISIBLE);\n                mSortButton.setVisibility(View.VISIBLE);\n                break;\n\n            case REMOVE_SORT:\n                mSortButton.setVisibility(View.GONE);\n                break;\n\n            case REMOVE_GRID_AND_SORT:\n                mSortButton.setVisibility(View.GONE);\n                mSwitchGridViewButton.setVisibility(View.GONE);\n                break;\n\n            case DO_NOTHING:\n            default:\n                Log_OC.v(TAG, \"Kept the options menu default structure\");\n                break;\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func updateSortAndGridMenuItems() {\n    switch menuItemAddRemoveValue {\n    case .addGridAndSortWithSearch:\n        mSwitchGridViewButton.isHidden = false\n        mSortButton.isHidden = false\n\n    case .removeSort:\n        mSortButton.isHidden = true\n\n    case .removeGridAndSort:\n        mSortButton.isHidden = true\n        mSwitchGridViewButton.isHidden = true\n\n    case .doNothing:\n        fallthrough\n    default:\n        Log_OC.v(TAG, \"Kept the options menu default structure\")\n    }\n}\n```"
    },
    {
        "method_name": "shouldNavigateWithoutFilter",
        "method_code": "rivate boolean shouldNavigateWithoutFilter(OCFile topParent) {\n        int menuItemId = DrawerActivity.menuItemId;\n        return (menuItemId != R.id.nav_shared && menuItemId != R.id.nav_favorites) ||\n            (menuItemId == R.id.nav_shared && topParent != null && topParent.isShared()) ||\n            (menuItemId == R.id.nav_favorites && topParent != null && topParent.isFavorite());\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled shouldNavigateWithoutFilter from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: shouldNavigateWithoutFilter\n\n        Method Code: rivate boolean shouldNavigateWithoutFilter(OCFile topParent) {\n        int menuItemId = DrawerActivity.menuItemId;\n        return (menuItemId != R.id.nav_shared && menuItemId != R.id.nav_favorites) ||\n            (menuItemId == R.id.nav_shared && topParent != null && topParent.isShared()) ||\n            (menuItemId == R.id.nav_favorites && topParent != null && topParent.isFavorite());\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func shouldNavigateWithoutFilter(topParent: OCFile?) -> Bool {\n    let menuItemId = DrawerActivity.menuItemId\n    return (menuItemId != R.id.nav_shared && menuItemId != R.id.nav_favorites) ||\n        (menuItemId == R.id.nav_shared && topParent != nil && topParent!.isShared()) ||\n        (menuItemId == R.id.nav_favorites && topParent != nil && topParent!.isFavorite())\n}\n```"
    },
    {
        "method_name": "shouldNavigateWithFilter",
        "method_code": "rivate boolean shouldNavigateWithFilter() {\n        int menuItemId = DrawerActivity.menuItemId;\n        return menuItemId == R.id.nav_shared || menuItemId == R.id.nav_favorites;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled shouldNavigateWithFilter from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: shouldNavigateWithFilter\n\n        Method Code: rivate boolean shouldNavigateWithFilter() {\n        int menuItemId = DrawerActivity.menuItemId;\n        return menuItemId == R.id.nav_shared || menuItemId == R.id.nav_favorites;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func shouldNavigateWithFilter() -> Bool {\n    let menuItemId = DrawerActivity.menuItemId\n    return menuItemId == R.id.nav_shared || menuItemId == R.id.nav_favorites\n}\n```"
    },
    {
        "method_name": "getPreviousFileWithoutFilter",
        "method_code": "rivate Pair<Integer, OCFile> getPreviousFileWithoutFilter(FileDataStorageManager storageManager) {\n        int moveCount = 0;\n        OCFile parentDir = null;\n        String parentPath = null;\n\n        if (mFile.getParentId() != FileDataStorageManager.ROOT_PARENT_ID) {\n            parentPath = new File(mFile.getRemotePath()).getParent();\n\n            if (parentPath != null) {\n                parentPath = parentPath.endsWith(OCFile.PATH_SEPARATOR) ? parentPath : parentPath + OCFile.PATH_SEPARATOR;\n                parentDir = storageManager.getFileByPath(parentPath);\n                moveCount++;\n            }\n        } else {\n            parentDir = storageManager.getFileByPath(ROOT_PATH);\n        }\n\n        while (parentDir == null) {\n            parentPath = new File(parentPath).getParent();\n\n            if (parentPath != null) {\n                parentPath = parentPath.endsWith(OCFile.PATH_SEPARATOR) ? parentPath :\n                    parentPath + OCFile.PATH_SEPARATOR;\n                parentDir = storageManager.getFileByPath(parentPath);\n                moveCount++;\n            }\n        }\n\n        return new Pair<>(moveCount, parentDir);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getPreviousFileWithoutFilter from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: getPreviousFileWithoutFilter\n\n        Method Code: rivate Pair<Integer, OCFile> getPreviousFileWithoutFilter(FileDataStorageManager storageManager) {\n        int moveCount = 0;\n        OCFile parentDir = null;\n        String parentPath = null;\n\n        if (mFile.getParentId() != FileDataStorageManager.ROOT_PARENT_ID) {\n            parentPath = new File(mFile.getRemotePath()).getParent();\n\n            if (parentPath != null) {\n                parentPath = parentPath.endsWith(OCFile.PATH_SEPARATOR) ? parentPath : parentPath + OCFile.PATH_SEPARATOR;\n                parentDir = storageManager.getFileByPath(parentPath);\n                moveCount++;\n            }\n        } else {\n            parentDir = storageManager.getFileByPath(ROOT_PATH);\n        }\n\n        while (parentDir == null) {\n            parentPath = new File(parentPath).getParent();\n\n            if (parentPath != null) {\n                parentPath = parentPath.endsWith(OCFile.PATH_SEPARATOR) ? parentPath :\n                    parentPath + OCFile.PATH_SEPARATOR;\n                parentDir = storageManager.getFileByPath(parentPath);\n                moveCount++;\n            }\n        }\n\n        return new Pair<>(moveCount, parentDir);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getPreviousFileWithoutFilter(storageManager: FileDataStorageManager) -> (Int, OCFile?) {\n    var moveCount = 0\n    var parentDir: OCFile? = nil\n    var parentPath: String? = nil\n\n    if mFile.getParentId() != FileDataStorageManager.ROOT_PARENT_ID {\n        parentPath = (mFile.getRemotePath() as NSString).deletingLastPathComponent\n\n        if parentPath != nil {\n            parentPath = parentPath!.hasSuffix(OCFile.PATH_SEPARATOR) ? parentPath : parentPath! + OCFile.PATH_SEPARATOR\n            parentDir = storageManager.getFileByPath(parentPath!)\n            moveCount += 1\n        }\n    } else {\n        parentDir = storageManager.getFileByPath(ROOT_PATH)\n    }\n\n    while parentDir == nil {\n        parentPath = (parentPath! as NSString).deletingLastPathComponent\n\n        if parentPath != nil {\n            parentPath = parentPath!.hasSuffix(OCFile.PATH_SEPARATOR) ? parentPath : parentPath! + OCFile.PATH_SEPARATOR\n            parentDir = storageManager.getFileByPath(parentPath!)\n            moveCount += 1\n        }\n    }\n\n    return (moveCount, parentDir)\n}\n```"
    },
    {
        "method_name": "getPreviousFileWithFilter",
        "method_code": "rivate OCFile getPreviousFileWithFilter(FileDataStorageManager storageManager, OCFile currentFile) {\n        while (true) {\n            OCFile parent = storageManager.getFileById(currentFile.getParentId());\n            if (parent == null) {\n                return currentFile;\n            }\n\n            if (parent.isRootDirectory()) {\n                return parent;\n            }\n\n            if ((DrawerActivity.menuItemId == R.id.nav_shared && parent.isShared()) ||\n                (DrawerActivity.menuItemId == R.id.nav_favorites && parent.isFavorite())) {\n                return parent;\n            }\n\n            currentFile = parent;\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getPreviousFileWithFilter from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: getPreviousFileWithFilter\n\n        Method Code: rivate OCFile getPreviousFileWithFilter(FileDataStorageManager storageManager, OCFile currentFile) {\n        while (true) {\n            OCFile parent = storageManager.getFileById(currentFile.getParentId());\n            if (parent == null) {\n                return currentFile;\n            }\n\n            if (parent.isRootDirectory()) {\n                return parent;\n            }\n\n            if ((DrawerActivity.menuItemId == R.id.nav_shared && parent.isShared()) ||\n                (DrawerActivity.menuItemId == R.id.nav_favorites && parent.isFavorite())) {\n                return parent;\n            }\n\n            currentFile = parent;\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getPreviousFileWithFilter(storageManager: FileDataStorageManager, currentFile: OCFile) -> OCFile {\n    var currentFile = currentFile\n    while true {\n        guard let parent = storageManager.getFileById(currentFile.getParentId()) else {\n            return currentFile\n        }\n\n        if parent.isRootDirectory() {\n            return parent\n        }\n\n        if (DrawerActivity.menuItemId == R.id.nav_shared && parent.isShared()) ||\n            (DrawerActivity.menuItemId == R.id.nav_favorites && parent.isFavorite()) {\n            return parent\n        }\n\n        currentFile = parent\n    }\n}\n```"
    },
    {
        "method_name": "getPreviousFile",
        "method_code": "rivate Future<Pair<Integer, OCFile>> getPreviousFile() {\n        CompletableFuture<Pair<Integer, OCFile>> completableFuture = new CompletableFuture<>();\n\n        Executors.newCachedThreadPool().submit(() -> {\n            var result = new Pair<Integer, OCFile>(null, null);\n\n            FileDataStorageManager storageManager = mContainerActivity.getStorageManager();\n            OCFile currentFile = getCurrentFile();\n            OCFile topParent = storageManager.getTopParent(currentFile);\n\n            if (shouldNavigateWithoutFilter(topParent)) {\n                result = getPreviousFileWithoutFilter(storageManager);\n            } else if (shouldNavigateWithFilter()) {\n                OCFile previousFileWithFilter = getPreviousFileWithFilter(storageManager, currentFile);\n                result = new Pair<>(0, previousFileWithFilter);\n            }\n\n            completableFuture.complete(result);\n\n            return null;\n        });\n\n        return completableFuture;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getPreviousFile from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: getPreviousFile\n\n        Method Code: rivate Future<Pair<Integer, OCFile>> getPreviousFile() {\n        CompletableFuture<Pair<Integer, OCFile>> completableFuture = new CompletableFuture<>();\n\n        Executors.newCachedThreadPool().submit(() -> {\n            var result = new Pair<Integer, OCFile>(null, null);\n\n            FileDataStorageManager storageManager = mContainerActivity.getStorageManager();\n            OCFile currentFile = getCurrentFile();\n            OCFile topParent = storageManager.getTopParent(currentFile);\n\n            if (shouldNavigateWithoutFilter(topParent)) {\n                result = getPreviousFileWithoutFilter(storageManager);\n            } else if (shouldNavigateWithFilter()) {\n                OCFile previousFileWithFilter = getPreviousFileWithFilter(storageManager, currentFile);\n                result = new Pair<>(0, previousFileWithFilter);\n            }\n\n            completableFuture.complete(result);\n\n            return null;\n        });\n\n        return completableFuture;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getPreviousFile() -> Future<(Int?, OCFile?)> {\n    let promise = Promise<(Int?, OCFile?)>()\n    \n    DispatchQueue.global().async {\n        var result: (Int?, OCFile?) = (nil, nil)\n        \n        let storageManager = self.mContainerActivity.getStorageManager()\n        let currentFile = self.getCurrentFile()\n        let topParent = storageManager.getTopParent(currentFile)\n        \n        if self.shouldNavigateWithoutFilter(topParent) {\n            result = self.getPreviousFileWithoutFilter(storageManager)\n        } else if self.shouldNavigateWithFilter() {\n            let previousFileWithFilter = self.getPreviousFileWithFilter(storageManager, currentFile)\n            result = (0, previousFileWithFilter)\n        }\n        \n        promise.fulfill(result)\n    }\n    \n    return promise.future\n}\n```"
    },
    {
        "method_name": "onBrowseUp",
        "method_code": "ublic int onBrowseUp() {\n        if (mFile == null) {\n            return 0;\n        }\n\n        try {\n            Future<Pair<Integer, OCFile>> futureResult = getPreviousFile();\n            Pair<Integer, OCFile> result = futureResult.get();\n            mFile = result.second;\n            updateFileList();\n            return result.first;\n        } catch (Exception e) {\n            Log_OC.e(TAG,\"Error caught in onBrowseUp \" + e + \" getPreviousFileWithoutFilter() used: \");\n\n            FileDataStorageManager storageManager = mContainerActivity.getStorageManager();\n            var result = getPreviousFileWithoutFilter(storageManager);\n            mFile = result.second;\n            updateFileList();\n            return result.first;\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onBrowseUp from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onBrowseUp\n\n        Method Code: ublic int onBrowseUp() {\n        if (mFile == null) {\n            return 0;\n        }\n\n        try {\n            Future<Pair<Integer, OCFile>> futureResult = getPreviousFile();\n            Pair<Integer, OCFile> result = futureResult.get();\n            mFile = result.second;\n            updateFileList();\n            return result.first;\n        } catch (Exception e) {\n            Log_OC.e(TAG,\"Error caught in onBrowseUp \" + e + \" getPreviousFileWithoutFilter() used: \");\n\n            FileDataStorageManager storageManager = mContainerActivity.getStorageManager();\n            var result = getPreviousFileWithoutFilter(storageManager);\n            mFile = result.second;\n            updateFileList();\n            return result.first;\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onBrowseUp() -> Int {\n    guard let currentFile = mFile else {\n        return 0\n    }\n\n    do {\n        let futureResult = try getPreviousFile()\n        let result = try futureResult.get()\n        mFile = result.second\n        updateFileList()\n        return result.first\n    } catch {\n        Log_OC.e(TAG, \"Error caught in onBrowseUp \\(error) getPreviousFileWithoutFilter() used: \")\n\n        let storageManager = mContainerActivity.getStorageManager()\n        let result = getPreviousFileWithoutFilter(storageManager: storageManager)\n        mFile = result.second\n        updateFileList()\n        return result.first\n    }\n}\n```"
    },
    {
        "method_name": "updateFileList",
        "method_code": "rivate void updateFileList() {\n        listDirectory(mFile, MainApp.isOnlyOnDevice(), false);\n        onRefresh(false);\n        restoreIndexAndTopPosition();\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled updateFileList from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: updateFileList\n\n        Method Code: rivate void updateFileList() {\n        listDirectory(mFile, MainApp.isOnlyOnDevice(), false);\n        onRefresh(false);\n        restoreIndexAndTopPosition();\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func updateFileList() {\n    listDirectory(file: mFile, onlyOnDevice: MainApp.isOnlyOnDevice(), refresh: false)\n    onRefresh(refresh: false)\n    restoreIndexAndTopPosition()\n}\n```"
    },
    {
        "method_name": "toggleItemToCheckedList",
        "method_code": "rivate void toggleItemToCheckedList(OCFile file) {\n        if (getCommonAdapter().isCheckedFile(file)) {\n            getCommonAdapter().removeCheckedFile(file);\n        } else {\n            getCommonAdapter().addCheckedFile(file);\n        }\n        updateActionModeFile(file);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled toggleItemToCheckedList from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: toggleItemToCheckedList\n\n        Method Code: rivate void toggleItemToCheckedList(OCFile file) {\n        if (getCommonAdapter().isCheckedFile(file)) {\n            getCommonAdapter().removeCheckedFile(file);\n        } else {\n            getCommonAdapter().addCheckedFile(file);\n        }\n        updateActionModeFile(file);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func toggleItemToCheckedList(file: OCFile) {\n    if getCommonAdapter().isCheckedFile(file) {\n        getCommonAdapter().removeCheckedFile(file)\n    } else {\n        getCommonAdapter().addCheckedFile(file)\n    }\n    updateActionModeFile(file)\n}\n```"
    },
    {
        "method_name": "updateActionModeFile",
        "method_code": "rivate void updateActionModeFile(OCFile file) {\n        mIsActionModeNew = false;\n        if (mActiveActionMode != null) {\n            mActiveActionMode.invalidate();\n            getCommonAdapter().notifyItemChanged(file);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled updateActionModeFile from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: updateActionModeFile\n\n        Method Code: rivate void updateActionModeFile(OCFile file) {\n        mIsActionModeNew = false;\n        if (mActiveActionMode != null) {\n            mActiveActionMode.invalidate();\n            getCommonAdapter().notifyItemChanged(file);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func updateActionModeFile(_ file: OCFile) {\n    mIsActionModeNew = false\n    if mActiveActionMode != nil {\n        mActiveActionMode?.invalidate()\n        getCommonAdapter().notifyItemChanged(file)\n    }\n}\n```"
    },
    {
        "method_name": "onLongItemClicked",
        "method_code": "Override\n    public boolean onLongItemClicked(OCFile file) {\n        FragmentActivity actionBarActivity = getActivity();\n        if (actionBarActivity != null) {\n            // Create only once instance of action mode\n            if (mActiveActionMode != null) {\n                toggleItemToCheckedList(file);\n            } else {\n                actionBarActivity.startActionMode(mMultiChoiceModeListener);\n                getCommonAdapter().addCheckedFile(file);\n            }\n            updateActionModeFile(file);\n        }\n\n        return true;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onLongItemClicked from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onLongItemClicked\n\n        Method Code: Override\n    public boolean onLongItemClicked(OCFile file) {\n        FragmentActivity actionBarActivity = getActivity();\n        if (actionBarActivity != null) {\n            // Create only once instance of action mode\n            if (mActiveActionMode != null) {\n                toggleItemToCheckedList(file);\n            } else {\n                actionBarActivity.startActionMode(mMultiChoiceModeListener);\n                getCommonAdapter().addCheckedFile(file);\n            }\n            updateActionModeFile(file);\n        }\n\n        return true;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onLongItemClicked(file: OCFile) -> Bool {\n    if let actionBarActivity = self.activity {\n        if mActiveActionMode != nil {\n            toggleItemToCheckedList(file: file)\n        } else {\n            actionBarActivity.startActionMode(mMultiChoiceModeListener)\n            getCommonAdapter().addCheckedFile(file: file)\n        }\n        updateActionModeFile(file: file)\n    }\n    return true\n}\n```"
    },
    {
        "method_name": "folderOnItemClick",
        "method_code": "rivate void folderOnItemClick(OCFile file, int position) {\n        if (requireActivity() instanceof FolderPickerActivity) {\n            String filenameErrorMessage = FileNameValidator.INSTANCE.checkFileName(file.getFileName(), getCapabilities(), requireContext(), null);\n            if (filenameErrorMessage != null) {\n                DisplayUtils.showSnackMessage(requireActivity(), filenameErrorMessage);\n                return;\n            }\n        }\n\n        if (file.isEncrypted()) {\n            User user = ((FileActivity) mContainerActivity).getUser().orElseThrow(RuntimeException::new);\n\n            // check if e2e app is enabled\n            OCCapability ocCapability = mContainerActivity.getStorageManager()\n                .getCapability(user.getAccountName());\n\n            if (ocCapability.getEndToEndEncryption().isFalse() ||\n                ocCapability.getEndToEndEncryption().isUnknown()) {\n                Snackbar.make(getRecyclerView(), R.string.end_to_end_encryption_not_enabled,\n                              Snackbar.LENGTH_LONG).show();\n                return;\n            }\n            // check if keys are stored\n            if (FileOperationsHelper.isEndToEndEncryptionSetup(requireContext(), user)) {\n                // update state and view of this fragment\n                searchFragment = false;\n                mHideFab = false;\n\n                if (mContainerActivity instanceof FolderPickerActivity &&\n                    ((FolderPickerActivity) mContainerActivity)\n                        .isDoNotEnterEncryptedFolder()) {\n                    Snackbar.make(getRecyclerView(),\n                                  R.string.copy_move_to_encrypted_folder_not_supported,\n                                  Snackbar.LENGTH_LONG).show();\n                } else {\n                    browseToFolder(file, position);\n                }\n            } else {\n                Log_OC.d(TAG, \"no public key for \" + user.getAccountName());\n\n                FragmentManager fragmentManager = getParentFragmentManager();\n                if (fragmentManager.findFragmentByTag(SETUP_ENCRYPTION_DIALOG_TAG) == null && requireActivity() instanceof FileActivity fileActivity) {\n                    fileActivity.connectivityService.isNetworkAndServerAvailable(result -> {\n                        if (result) {\n                            SetupEncryptionDialogFragment dialog = SetupEncryptionDialogFragment.newInstance(user, position);\n                            dialog.setTargetFragment(this, SETUP_ENCRYPTION_REQUEST_CODE);\n                            dialog.show(fragmentManager, SETUP_ENCRYPTION_DIALOG_TAG);\n                        } else {\n                            DisplayUtils.showSnackMessage(fileActivity, R.string.internet_connection_required_for_encrypted_folder_setup);\n                        }\n                    });\n                }\n            }\n        } else {\n            // update state and view of this fragment\n            searchFragment = false;\n            setEmptyListLoadingMessage();\n            browseToFolder(file, position);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled folderOnItemClick from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: folderOnItemClick\n\n        Method Code: rivate void folderOnItemClick(OCFile file, int position) {\n        if (requireActivity() instanceof FolderPickerActivity) {\n            String filenameErrorMessage = FileNameValidator.INSTANCE.checkFileName(file.getFileName(), getCapabilities(), requireContext(), null);\n            if (filenameErrorMessage != null) {\n                DisplayUtils.showSnackMessage(requireActivity(), filenameErrorMessage);\n                return;\n            }\n        }\n\n        if (file.isEncrypted()) {\n            User user = ((FileActivity) mContainerActivity).getUser().orElseThrow(RuntimeException::new);\n\n            // check if e2e app is enabled\n            OCCapability ocCapability = mContainerActivity.getStorageManager()\n                .getCapability(user.getAccountName());\n\n            if (ocCapability.getEndToEndEncryption().isFalse() ||\n                ocCapability.getEndToEndEncryption().isUnknown()) {\n                Snackbar.make(getRecyclerView(), R.string.end_to_end_encryption_not_enabled,\n                              Snackbar.LENGTH_LONG).show();\n                return;\n            }\n            // check if keys are stored\n            if (FileOperationsHelper.isEndToEndEncryptionSetup(requireContext(), user)) {\n                // update state and view of this fragment\n                searchFragment = false;\n                mHideFab = false;\n\n                if (mContainerActivity instanceof FolderPickerActivity &&\n                    ((FolderPickerActivity) mContainerActivity)\n                        .isDoNotEnterEncryptedFolder()) {\n                    Snackbar.make(getRecyclerView(),\n                                  R.string.copy_move_to_encrypted_folder_not_supported,\n                                  Snackbar.LENGTH_LONG).show();\n                } else {\n                    browseToFolder(file, position);\n                }\n            } else {\n                Log_OC.d(TAG, \"no public key for \" + user.getAccountName());\n\n                FragmentManager fragmentManager = getParentFragmentManager();\n                if (fragmentManager.findFragmentByTag(SETUP_ENCRYPTION_DIALOG_TAG) == null && requireActivity() instanceof FileActivity fileActivity) {\n                    fileActivity.connectivityService.isNetworkAndServerAvailable(result -> {\n                        if (result) {\n                            SetupEncryptionDialogFragment dialog = SetupEncryptionDialogFragment.newInstance(user, position);\n                            dialog.setTargetFragment(this, SETUP_ENCRYPTION_REQUEST_CODE);\n                            dialog.show(fragmentManager, SETUP_ENCRYPTION_DIALOG_TAG);\n                        } else {\n                            DisplayUtils.showSnackMessage(fileActivity, R.string.internet_connection_required_for_encrypted_folder_setup);\n                        }\n                    });\n                }\n            }\n        } else {\n            // update state and view of this fragment\n            searchFragment = false;\n            setEmptyListLoadingMessage();\n            browseToFolder(file, position);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func folderOnItemClick(file: OCFile, position: Int) {\n    if let activity = requireActivity() as? FolderPickerActivity {\n        let filenameErrorMessage = FileNameValidator.instance.checkFileName(file.getFileName(), getCapabilities(), requireContext(), nil)\n        if let errorMessage = filenameErrorMessage {\n            DisplayUtils.showSnackMessage(requireActivity(), errorMessage)\n            return\n        }\n    }\n\n    if file.isEncrypted() {\n        guard let user = (mContainerActivity as? FileActivity)?.getUser().orElseThrow({ RuntimeException() }) else { return }\n\n        let ocCapability = mContainerActivity.getStorageManager().getCapability(user.getAccountName())\n\n        if ocCapability.getEndToEndEncryption().isFalse() || ocCapability.getEndToEndEncryption().isUnknown() {\n            Snackbar.make(getRecyclerView(), R.string.end_to_end_encryption_not_enabled, Snackbar.LENGTH_LONG).show()\n            return\n        }\n\n        if FileOperationsHelper.isEndToEndEncryptionSetup(requireContext(), user) {\n            searchFragment = false\n            mHideFab = false\n\n            if let folderPickerActivity = mContainerActivity as? FolderPickerActivity, folderPickerActivity.isDoNotEnterEncryptedFolder() {\n                Snackbar.make(getRecyclerView(), R.string.copy_move_to_encrypted_folder_not_supported, Snackbar.LENGTH_LONG).show()\n            } else {\n                browseToFolder(file, position)\n            }\n        } else {\n            Log_OC.d(TAG, \"no public key for \\(user.getAccountName())\")\n\n            let fragmentManager = getParentFragmentManager()\n            if fragmentManager.findFragment(byTag: SETUP_ENCRYPTION_DIALOG_TAG) == nil, let fileActivity = requireActivity() as? FileActivity {\n                fileActivity.connectivityService.isNetworkAndServerAvailable { result in\n                    if result {\n                        let dialog = SetupEncryptionDialogFragment.newInstance(user, position)\n                        dialog.setTargetFragment(self, SETUP_ENCRYPTION_REQUEST_CODE)\n                        dialog.show(fragmentManager, SETUP_ENCRYPTION_DIALOG_TAG)\n                    } else {\n                        DisplayUtils.showSnackMessage(fileActivity, R.string.internet_connection_required_for_encrypted_folder_setup)\n                    }\n                }\n            }\n        }\n    } else {\n        searchFragment = false\n        setEmptyListLoadingMessage()\n        browseToFolder(file, position)\n    }\n}\n```"
    },
    {
        "method_name": "checkFileBeforeOpen",
        "method_code": "rivate Integer checkFileBeforeOpen(OCFile file) {\n        if (isAPKorAAB(Set.of(file))) {\n            return R.string.gplay_restriction;\n        } else if (file.isOfflineOperation()) {\n            return R.string.offline_operations_file_does_not_exists_yet;\n        } else {\n            return null;\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled checkFileBeforeOpen from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: checkFileBeforeOpen\n\n        Method Code: rivate Integer checkFileBeforeOpen(OCFile file) {\n        if (isAPKorAAB(Set.of(file))) {\n            return R.string.gplay_restriction;\n        } else if (file.isOfflineOperation()) {\n            return R.string.offline_operations_file_does_not_exists_yet;\n        } else {\n            return null;\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func checkFileBeforeOpen(file: OCFile) -> Int? {\n    if isAPKorAAB(Set([file])) {\n        return R.string.gplay_restriction\n    } else if file.isOfflineOperation() {\n        return R.string.offline_operations_file_does_not_exists_yet\n    } else {\n        return nil\n    }\n}\n```"
    },
    {
        "method_name": "fileOnItemClick",
        "method_code": "rivate void fileOnItemClick(OCFile file) {\n        Integer errorMessageId = checkFileBeforeOpen(file);\n        if (errorMessageId != null) {\n            Snackbar.make(getRecyclerView(),\n                          errorMessageId,\n                          Snackbar.LENGTH_LONG).show();\n            return;\n        }\n\n        if (PreviewImageFragment.canBePreviewed(file)) {\n            // preview image - it handles the download, if needed\n            if (searchFragment) {\n                VirtualFolderType type = switch (currentSearchType) {\n                    case FAVORITE_SEARCH -> VirtualFolderType.FAVORITE;\n                    case GALLERY_SEARCH -> VirtualFolderType.GALLERY;\n                    default -> VirtualFolderType.NONE;\n                };\n                ((FileDisplayActivity) mContainerActivity).startImagePreview(file, type, !file.isDown());\n            } else {\n                ((FileDisplayActivity) mContainerActivity).startImagePreview(file, !file.isDown());\n            }\n        } else if (file.isDown() && MimeTypeUtil.isVCard(file)) {\n            ((FileDisplayActivity) mContainerActivity).startContactListFragment(file);\n        } else if (file.isDown() && MimeTypeUtil.isPDF(file)) {\n            ((FileDisplayActivity) mContainerActivity).startPdfPreview(file);\n        } else if (PreviewTextFileFragment.canBePreviewed(file)) {\n            setFabVisible(false);\n            ((FileDisplayActivity) mContainerActivity).startTextPreview(file, false);\n        } else if (file.isDown()) {\n            if (PreviewMediaActivity.Companion.canBePreviewed(file)) {\n                setFabVisible(false);\n                ((FileDisplayActivity) mContainerActivity).startMediaPreview(file, 0, true, true, false, true);\n            } else {\n                mContainerActivity.getFileOperationsHelper().openFile(file);\n            }\n        } else {\n            User account = accountManager.getUser();\n            OCCapability capability = mContainerActivity.getStorageManager().getCapability(account.getAccountName());\n\n            if (PreviewMediaActivity.Companion.canBePreviewed(file) && !file.isEncrypted()) {\n                setFabVisible(false);\n                ((FileDisplayActivity) mContainerActivity).startMediaPreview(file, 0, true, true, true, true);\n            } else if (editorUtils.isEditorAvailable(accountManager.getUser(), file.getMimeType()) && !file.isEncrypted()) {\n                mContainerActivity.getFileOperationsHelper().openFileWithTextEditor(file, getContext());\n            } else if (capability.getRichDocumentsMimeTypeList().contains(file.getMimeType()) &&\n                capability.getRichDocumentsDirectEditing().isTrue() && !file.isEncrypted()) {\n                mContainerActivity.getFileOperationsHelper().openFileAsRichDocument(file, getContext());\n            } else if (mContainerActivity instanceof FileDisplayActivity fileDisplayActivity) {\n                fileDisplayActivity.startDownloadForPreview(file, mFile);\n            }\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled fileOnItemClick from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: fileOnItemClick\n\n        Method Code: rivate void fileOnItemClick(OCFile file) {\n        Integer errorMessageId = checkFileBeforeOpen(file);\n        if (errorMessageId != null) {\n            Snackbar.make(getRecyclerView(),\n                          errorMessageId,\n                          Snackbar.LENGTH_LONG).show();\n            return;\n        }\n\n        if (PreviewImageFragment.canBePreviewed(file)) {\n            // preview image - it handles the download, if needed\n            if (searchFragment) {\n                VirtualFolderType type = switch (currentSearchType) {\n                    case FAVORITE_SEARCH -> VirtualFolderType.FAVORITE;\n                    case GALLERY_SEARCH -> VirtualFolderType.GALLERY;\n                    default -> VirtualFolderType.NONE;\n                };\n                ((FileDisplayActivity) mContainerActivity).startImagePreview(file, type, !file.isDown());\n            } else {\n                ((FileDisplayActivity) mContainerActivity).startImagePreview(file, !file.isDown());\n            }\n        } else if (file.isDown() && MimeTypeUtil.isVCard(file)) {\n            ((FileDisplayActivity) mContainerActivity).startContactListFragment(file);\n        } else if (file.isDown() && MimeTypeUtil.isPDF(file)) {\n            ((FileDisplayActivity) mContainerActivity).startPdfPreview(file);\n        } else if (PreviewTextFileFragment.canBePreviewed(file)) {\n            setFabVisible(false);\n            ((FileDisplayActivity) mContainerActivity).startTextPreview(file, false);\n        } else if (file.isDown()) {\n            if (PreviewMediaActivity.Companion.canBePreviewed(file)) {\n                setFabVisible(false);\n                ((FileDisplayActivity) mContainerActivity).startMediaPreview(file, 0, true, true, false, true);\n            } else {\n                mContainerActivity.getFileOperationsHelper().openFile(file);\n            }\n        } else {\n            User account = accountManager.getUser();\n            OCCapability capability = mContainerActivity.getStorageManager().getCapability(account.getAccountName());\n\n            if (PreviewMediaActivity.Companion.canBePreviewed(file) && !file.isEncrypted()) {\n                setFabVisible(false);\n                ((FileDisplayActivity) mContainerActivity).startMediaPreview(file, 0, true, true, true, true);\n            } else if (editorUtils.isEditorAvailable(accountManager.getUser(), file.getMimeType()) && !file.isEncrypted()) {\n                mContainerActivity.getFileOperationsHelper().openFileWithTextEditor(file, getContext());\n            } else if (capability.getRichDocumentsMimeTypeList().contains(file.getMimeType()) &&\n                capability.getRichDocumentsDirectEditing().isTrue() && !file.isEncrypted()) {\n                mContainerActivity.getFileOperationsHelper().openFileAsRichDocument(file, getContext());\n            } else if (mContainerActivity instanceof FileDisplayActivity fileDisplayActivity) {\n                fileDisplayActivity.startDownloadForPreview(file, mFile);\n            }\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func fileOnItemClick(file: OCFile) {\n    let errorMessageId = checkFileBeforeOpen(file: file)\n    if let errorMessageId = errorMessageId {\n        Snackbar.make(getRecyclerView(), errorMessageId, Snackbar.LENGTH_LONG).show()\n        return\n    }\n\n    if PreviewImageFragment.canBePreviewed(file: file) {\n        if searchFragment {\n            let type: VirtualFolderType\n            switch currentSearchType {\n            case .FAVORITE_SEARCH:\n                type = .FAVORITE\n            case .GALLERY_SEARCH:\n                type = .GALLERY\n            default:\n                type = .NONE\n            }\n            (mContainerActivity as? FileDisplayActivity)?.startImagePreview(file: file, type: type, !file.isDown())\n        } else {\n            (mContainerActivity as? FileDisplayActivity)?.startImagePreview(file: file, !file.isDown())\n        }\n    } else if file.isDown() && MimeTypeUtil.isVCard(file: file) {\n        (mContainerActivity as? FileDisplayActivity)?.startContactListFragment(file: file)\n    } else if file.isDown() && MimeTypeUtil.isPDF(file: file) {\n        (mContainerActivity as? FileDisplayActivity)?.startPdfPreview(file: file)\n    } else if PreviewTextFileFragment.canBePreviewed(file: file) {\n        setFabVisible(false)\n        (mContainerActivity as? FileDisplayActivity)?.startTextPreview(file: file, false)\n    } else if file.isDown() {\n        if PreviewMediaActivity.canBePreviewed(file: file) {\n            setFabVisible(false)\n            (mContainerActivity as? FileDisplayActivity)?.startMediaPreview(file: file, 0, true, true, false, true)\n        } else {\n            mContainerActivity.getFileOperationsHelper().openFile(file: file)\n        }\n    } else {\n        let account = accountManager.getUser()\n        let capability = mContainerActivity.getStorageManager().getCapability(account.getAccountName())\n\n        if PreviewMediaActivity.canBePreviewed(file: file) && !file.isEncrypted() {\n            setFabVisible(false)\n            (mContainerActivity as? FileDisplayActivity)?.startMediaPreview(file: file, 0, true, true, true, true)\n        } else if editorUtils.isEditorAvailable(accountManager.getUser(), file.getMimeType()) && !file.isEncrypted() {\n            mContainerActivity.getFileOperationsHelper().openFileWithTextEditor(file: file, getContext())\n        } else if capability.getRichDocumentsMimeTypeList().contains(file.getMimeType()) &&\n                  capability.getRichDocumentsDirectEditing().isTrue() && !file.isEncrypted() {\n            mContainerActivity.getFileOperationsHelper().openFileAsRichDocument(file: file, getContext())\n        } else if let fileDisplayActivity = mContainerActivity as? FileDisplayActivity {\n            fileDisplayActivity.startDownloadForPreview(file: file, mFile)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "onItemClicked",
        "method_code": "Override\n    @OptIn(markerClass = UnstableApi.class)\n    public void onItemClicked(OCFile file) {\n        if (getCommonAdapter() != null && getCommonAdapter().isMultiSelect()) {\n            toggleItemToCheckedList(file);\n        } else {\n            if (file == null) {\n                Log_OC.d(TAG, \"Null object in ListAdapter!\");\n                return;\n            }\n\n            if (getCommonAdapter() != null && file.isFolder()) {\n                int position = getCommonAdapter().getItemPosition(file);\n                folderOnItemClick(file, position);\n            } else if (mFileSelectable) {\n                Intent intent = new Intent();\n                intent.putExtra(FolderPickerActivity.EXTRA_FILES, file);\n                requireActivity().setResult(Activity.RESULT_OK, intent);\n                requireActivity().finish();\n            } else if (!mOnlyFoldersClickable) {\n                fileOnItemClick(file);\n            }\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onItemClicked from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onItemClicked\n\n        Method Code: Override\n    @OptIn(markerClass = UnstableApi.class)\n    public void onItemClicked(OCFile file) {\n        if (getCommonAdapter() != null && getCommonAdapter().isMultiSelect()) {\n            toggleItemToCheckedList(file);\n        } else {\n            if (file == null) {\n                Log_OC.d(TAG, \"Null object in ListAdapter!\");\n                return;\n            }\n\n            if (getCommonAdapter() != null && file.isFolder()) {\n                int position = getCommonAdapter().getItemPosition(file);\n                folderOnItemClick(file, position);\n            } else if (mFileSelectable) {\n                Intent intent = new Intent();\n                intent.putExtra(FolderPickerActivity.EXTRA_FILES, file);\n                requireActivity().setResult(Activity.RESULT_OK, intent);\n                requireActivity().finish();\n            } else if (!mOnlyFoldersClickable) {\n                fileOnItemClick(file);\n            }\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\n@available(iOS 13.0, *)\nfunc onItemClicked(file: OCFile?) {\n    if let adapter = getCommonAdapter(), adapter.isMultiSelect() {\n        toggleItemToCheckedList(file: file)\n    } else {\n        guard let file = file else {\n            print(\"Null object in ListAdapter!\")\n            return\n        }\n\n        if let adapter = getCommonAdapter(), file.isFolder() {\n            if let position = adapter.getItemPosition(file: file) {\n                folderOnItemClick(file: file, position: position)\n            }\n        } else if mFileSelectable {\n            let intent = Intent()\n            intent.putExtra(name: FolderPickerActivity.EXTRA_FILES, value: file)\n            requireActivity().setResult(resultCode: .ok, data: intent)\n            requireActivity().finish()\n        } else if !mOnlyFoldersClickable {\n            fileOnItemClick(file: file)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "browseToFolder",
        "method_code": "rivate void browseToFolder(OCFile file, int position) {\n        resetSearchIfBrowsingFromFavorites();\n        listDirectory(file, MainApp.isOnlyOnDevice(), false);\n        // then, notify parent activity to let it update its state and view\n        mContainerActivity.onBrowsedDownTo(file);\n        // save index and top position\n        saveIndexAndTopPosition(position);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled browseToFolder from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: browseToFolder\n\n        Method Code: rivate void browseToFolder(OCFile file, int position) {\n        resetSearchIfBrowsingFromFavorites();\n        listDirectory(file, MainApp.isOnlyOnDevice(), false);\n        // then, notify parent activity to let it update its state and view\n        mContainerActivity.onBrowsedDownTo(file);\n        // save index and top position\n        saveIndexAndTopPosition(position);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func browseToFolder(file: OCFile, position: Int) {\n    resetSearchIfBrowsingFromFavorites()\n    listDirectory(file: file, onlyOnDevice: MainApp.isOnlyOnDevice(), someFlag: false)\n    mContainerActivity.onBrowsedDownTo(file: file)\n    saveIndexAndTopPosition(position: position)\n}\n```"
    },
    {
        "method_name": "resetSearchIfBrowsingFromFavorites",
        "method_code": "rivate void resetSearchIfBrowsingFromFavorites() {\n        if (currentSearchType == FAVORITE_SEARCH) {\n            resetSearchAttributes();\n            resetMenuItems();\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled resetSearchIfBrowsingFromFavorites from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: resetSearchIfBrowsingFromFavorites\n\n        Method Code: rivate void resetSearchIfBrowsingFromFavorites() {\n        if (currentSearchType == FAVORITE_SEARCH) {\n            resetSearchAttributes();\n            resetMenuItems();\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func resetSearchIfBrowsingFromFavorites() {\n    if currentSearchType == FAVORITE_SEARCH {\n        resetSearchAttributes()\n        resetMenuItems()\n    }\n}\n```"
    },
    {
        "method_name": "onActivityResult",
        "method_code": "Override\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\n        if (requestCode == SETUP_ENCRYPTION_REQUEST_CODE &&\n            resultCode == SetupEncryptionDialogFragment.SETUP_ENCRYPTION_RESULT_CODE &&\n            data.getBooleanExtra(SetupEncryptionDialogFragment.SUCCESS, false)) {\n\n            int position = data.getIntExtra(SetupEncryptionDialogFragment.ARG_POSITION, -1);\n            OCFile file = mAdapter.getItem(position);\n\n            if (file != null) {\n                mContainerActivity.getFileOperationsHelper().toggleEncryption(file, true);\n                mAdapter.setEncryptionAttributeForItemID(file.getRemoteId(), true);\n            }\n\n            // update state and view of this fragment\n            searchFragment = false;\n            listDirectory(file, MainApp.isOnlyOnDevice(), false);\n            // then, notify parent activity to let it update its state and view\n            mContainerActivity.onBrowsedDownTo(file);\n            // save index and top position\n            saveIndexAndTopPosition(position);\n        } else {\n            super.onActivityResult(requestCode, resultCode, data);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onActivityResult from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onActivityResult\n\n        Method Code: Override\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\n        if (requestCode == SETUP_ENCRYPTION_REQUEST_CODE &&\n            resultCode == SetupEncryptionDialogFragment.SETUP_ENCRYPTION_RESULT_CODE &&\n            data.getBooleanExtra(SetupEncryptionDialogFragment.SUCCESS, false)) {\n\n            int position = data.getIntExtra(SetupEncryptionDialogFragment.ARG_POSITION, -1);\n            OCFile file = mAdapter.getItem(position);\n\n            if (file != null) {\n                mContainerActivity.getFileOperationsHelper().toggleEncryption(file, true);\n                mAdapter.setEncryptionAttributeForItemID(file.getRemoteId(), true);\n            }\n\n            // update state and view of this fragment\n            searchFragment = false;\n            listDirectory(file, MainApp.isOnlyOnDevice(), false);\n            // then, notify parent activity to let it update its state and view\n            mContainerActivity.onBrowsedDownTo(file);\n            // save index and top position\n            saveIndexAndTopPosition(position);\n        } else {\n            super.onActivityResult(requestCode, resultCode, data);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n    if requestCode == SETUP_ENCRYPTION_REQUEST_CODE &&\n        resultCode == SetupEncryptionDialogFragment.SETUP_ENCRYPTION_RESULT_CODE &&\n        data?.getBooleanExtra(SetupEncryptionDialogFragment.SUCCESS, false) == true {\n\n        let position = data?.getIntExtra(SetupEncryptionDialogFragment.ARG_POSITION, -1) ?? -1\n        if let file = mAdapter.getItem(position) {\n            mContainerActivity.getFileOperationsHelper().toggleEncryption(file, true)\n            mAdapter.setEncryptionAttributeForItemID(file.getRemoteId(), true)\n        }\n\n        // update state and view of this fragment\n        searchFragment = false\n        listDirectory(file, MainApp.isOnlyOnDevice(), false)\n        // then, notify parent activity to let it update its state and view\n        mContainerActivity.onBrowsedDownTo(file)\n        // save index and top position\n        saveIndexAndTopPosition(position)\n    } else {\n        super.onActivityResult(requestCode, resultCode, data)\n    }\n}\n```"
    },
    {
        "method_name": "onFileActionChosen",
        "method_code": "ublic boolean onFileActionChosen(@IdRes final int itemId, Set<OCFile> checkedFiles) {\n        if (checkedFiles.isEmpty()) {\n            return false;\n        }\n\n        if (checkedFiles.size() == SINGLE_SELECTION) {\n            /// action only possible on a single file\n            OCFile singleFile = checkedFiles.iterator().next();\n\n            if (itemId == R.id.action_send_share_file) {\n                mContainerActivity.getFileOperationsHelper().sendShareFile(singleFile);\n                return true;\n            } else if (itemId == R.id.action_open_file_with) {\n                mContainerActivity.getFileOperationsHelper().openFile(singleFile);\n                return true;\n            } else if (itemId == R.id.action_stream_media) {\n                mContainerActivity.getFileOperationsHelper().streamMediaFile(singleFile);\n                return true;\n            } else if (itemId == R.id.action_edit) {\n                // should not be necessary, as menu item is filtered, but better play safe\n                if (editorUtils.isEditorAvailable(accountManager.getUser(),\n                                                  singleFile.getMimeType())) {\n                    mContainerActivity.getFileOperationsHelper().openFileWithTextEditor(singleFile, getContext());\n                } else if (EditImageActivity.Companion.canBePreviewed(singleFile)) {\n                    ((FileDisplayActivity) mContainerActivity).startImageEditor(singleFile);\n                } else {\n                    mContainerActivity.getFileOperationsHelper().openFileAsRichDocument(singleFile, getContext());\n                }\n\n                return true;\n            } else if (itemId == R.id.action_rename_file) {\n                RenameFileDialogFragment dialog = RenameFileDialogFragment.newInstance(singleFile, mFile);\n                dialog.show(getFragmentManager(), FileDetailFragment.FTAG_RENAME_FILE);\n                return true;\n            } else if (itemId == R.id.action_see_details) {\n                if (mActiveActionMode != null) {\n                    mActiveActionMode.finish();\n                }\n\n                mContainerActivity.showDetails(singleFile);\n                mContainerActivity.showSortListGroup(false);\n                return true;\n            } else if (itemId == R.id.action_set_as_wallpaper) {\n                mContainerActivity.getFileOperationsHelper().setPictureAs(singleFile, getView());\n                return true;\n            } else if (itemId == R.id.action_encrypted) {\n                mContainerActivity.getFileOperationsHelper().toggleEncryption(singleFile, true);\n                return true;\n            } else if (itemId == R.id.action_unset_encrypted) {\n                mContainerActivity.getFileOperationsHelper().toggleEncryption(singleFile, false);\n                return true;\n            } else if (itemId == R.id.action_lock_file) {\n                mContainerActivity.getFileOperationsHelper().toggleFileLock(singleFile, true);\n            } else if (itemId == R.id.action_unlock_file) {\n                mContainerActivity.getFileOperationsHelper().toggleFileLock(singleFile, false);\n            } else if (itemId == R.id.action_pin_to_homescreen) {\n                shortcutUtil.addShortcutToHomescreen(singleFile, viewThemeUtils, accountManager.getUser(), syncedFolderProvider);\n                return true;\n            } else if (itemId == R.id.action_retry) {\n                backgroundJobManager.startOfflineOperations();\n                return true;\n            }\n        }\n\n        /// actions possible on a batch of files\n        if (itemId == R.id.action_remove_file) {\n            RemoveFilesDialogFragment dialog =\n                RemoveFilesDialogFragment.newInstance(new ArrayList<>(checkedFiles), mActiveActionMode);\n            dialog.show(getFragmentManager(), ConfirmationDialogFragment.FTAG_CONFIRMATION);\n            return true;\n        } else if (itemId == R.id.action_download_file || itemId == R.id.action_sync_file) {\n            syncAndCheckFiles(checkedFiles);\n            exitSelectionMode();\n            return true;\n        } else if (itemId == R.id.action_export_file) {\n            mContainerActivity.getFileOperationsHelper().exportFiles(checkedFiles,\n                                                                     getContext(),\n                                                                     getView(),\n                                                                     backgroundJobManager);\n            exitSelectionMode();\n            return true;\n        } else if (itemId == R.id.action_cancel_sync) {\n            ((FileDisplayActivity) mContainerActivity).cancelTransference(checkedFiles);\n            return true;\n        } else if (itemId == R.id.action_favorite) {\n            mContainerActivity.getFileOperationsHelper().toggleFavoriteFiles(checkedFiles, true);\n            return true;\n        } else if (itemId == R.id.action_unset_favorite) {\n            mContainerActivity.getFileOperationsHelper().toggleFavoriteFiles(checkedFiles, false);\n            return true;\n        } else if (itemId == R.id.action_move_or_copy) {\n            String invalidFilename = checkInvalidFilenames(checkedFiles);\n\n            if (invalidFilename != null) {\n                DisplayUtils.showSnackMessage(requireActivity(), getString(R.string.file_name_validator_rename_before_move_or_copy, invalidFilename));\n                return false;\n            }\n\n            if (!FileNameValidator.INSTANCE.checkParentRemotePaths(new ArrayList<>(checkedFiles), getCapabilities(), requireContext())) {\n                browseToRoot();\n                DisplayUtils.showSnackMessage(requireActivity(), R.string.file_name_validator_current_path_is_invalid);\n                return false;\n            }\n\n            pickFolderForMoveOrCopy(checkedFiles);\n            return true;\n        } else if (itemId == R.id.action_select_all_action_menu) {\n            selectAllFiles(true);\n            return true;\n        } else if (itemId == R.id.action_deselect_all_action_menu) {\n            selectAllFiles(false);\n            return true;\n        } else if (itemId == R.id.action_send_file) {\n            mContainerActivity.getFileOperationsHelper().sendFiles(checkedFiles);\n            return true;\n        } else if (itemId == R.id.action_lock_file) {\n            // TODO call lock API\n        }\n\n        return false;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onFileActionChosen from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onFileActionChosen\n\n        Method Code: ublic boolean onFileActionChosen(@IdRes final int itemId, Set<OCFile> checkedFiles) {\n        if (checkedFiles.isEmpty()) {\n            return false;\n        }\n\n        if (checkedFiles.size() == SINGLE_SELECTION) {\n            /// action only possible on a single file\n            OCFile singleFile = checkedFiles.iterator().next();\n\n            if (itemId == R.id.action_send_share_file) {\n                mContainerActivity.getFileOperationsHelper().sendShareFile(singleFile);\n                return true;\n            } else if (itemId == R.id.action_open_file_with) {\n                mContainerActivity.getFileOperationsHelper().openFile(singleFile);\n                return true;\n            } else if (itemId == R.id.action_stream_media) {\n                mContainerActivity.getFileOperationsHelper().streamMediaFile(singleFile);\n                return true;\n            } else if (itemId == R.id.action_edit) {\n                // should not be necessary, as menu item is filtered, but better play safe\n                if (editorUtils.isEditorAvailable(accountManager.getUser(),\n                                                  singleFile.getMimeType())) {\n                    mContainerActivity.getFileOperationsHelper().openFileWithTextEditor(singleFile, getContext());\n                } else if (EditImageActivity.Companion.canBePreviewed(singleFile)) {\n                    ((FileDisplayActivity) mContainerActivity).startImageEditor(singleFile);\n                } else {\n                    mContainerActivity.getFileOperationsHelper().openFileAsRichDocument(singleFile, getContext());\n                }\n\n                return true;\n            } else if (itemId == R.id.action_rename_file) {\n                RenameFileDialogFragment dialog = RenameFileDialogFragment.newInstance(singleFile, mFile);\n                dialog.show(getFragmentManager(), FileDetailFragment.FTAG_RENAME_FILE);\n                return true;\n            } else if (itemId == R.id.action_see_details) {\n                if (mActiveActionMode != null) {\n                    mActiveActionMode.finish();\n                }\n\n                mContainerActivity.showDetails(singleFile);\n                mContainerActivity.showSortListGroup(false);\n                return true;\n            } else if (itemId == R.id.action_set_as_wallpaper) {\n                mContainerActivity.getFileOperationsHelper().setPictureAs(singleFile, getView());\n                return true;\n            } else if (itemId == R.id.action_encrypted) {\n                mContainerActivity.getFileOperationsHelper().toggleEncryption(singleFile, true);\n                return true;\n            } else if (itemId == R.id.action_unset_encrypted) {\n                mContainerActivity.getFileOperationsHelper().toggleEncryption(singleFile, false);\n                return true;\n            } else if (itemId == R.id.action_lock_file) {\n                mContainerActivity.getFileOperationsHelper().toggleFileLock(singleFile, true);\n            } else if (itemId == R.id.action_unlock_file) {\n                mContainerActivity.getFileOperationsHelper().toggleFileLock(singleFile, false);\n            } else if (itemId == R.id.action_pin_to_homescreen) {\n                shortcutUtil.addShortcutToHomescreen(singleFile, viewThemeUtils, accountManager.getUser(), syncedFolderProvider);\n                return true;\n            } else if (itemId == R.id.action_retry) {\n                backgroundJobManager.startOfflineOperations();\n                return true;\n            }\n        }\n\n        /// actions possible on a batch of files\n        if (itemId == R.id.action_remove_file) {\n            RemoveFilesDialogFragment dialog =\n                RemoveFilesDialogFragment.newInstance(new ArrayList<>(checkedFiles), mActiveActionMode);\n            dialog.show(getFragmentManager(), ConfirmationDialogFragment.FTAG_CONFIRMATION);\n            return true;\n        } else if (itemId == R.id.action_download_file || itemId == R.id.action_sync_file) {\n            syncAndCheckFiles(checkedFiles);\n            exitSelectionMode();\n            return true;\n        } else if (itemId == R.id.action_export_file) {\n            mContainerActivity.getFileOperationsHelper().exportFiles(checkedFiles,\n                                                                     getContext(),\n                                                                     getView(),\n                                                                     backgroundJobManager);\n            exitSelectionMode();\n            return true;\n        } else if (itemId == R.id.action_cancel_sync) {\n            ((FileDisplayActivity) mContainerActivity).cancelTransference(checkedFiles);\n            return true;\n        } else if (itemId == R.id.action_favorite) {\n            mContainerActivity.getFileOperationsHelper().toggleFavoriteFiles(checkedFiles, true);\n            return true;\n        } else if (itemId == R.id.action_unset_favorite) {\n            mContainerActivity.getFileOperationsHelper().toggleFavoriteFiles(checkedFiles, false);\n            return true;\n        } else if (itemId == R.id.action_move_or_copy) {\n            String invalidFilename = checkInvalidFilenames(checkedFiles);\n\n            if (invalidFilename != null) {\n                DisplayUtils.showSnackMessage(requireActivity(), getString(R.string.file_name_validator_rename_before_move_or_copy, invalidFilename));\n                return false;\n            }\n\n            if (!FileNameValidator.INSTANCE.checkParentRemotePaths(new ArrayList<>(checkedFiles), getCapabilities(), requireContext())) {\n                browseToRoot();\n                DisplayUtils.showSnackMessage(requireActivity(), R.string.file_name_validator_current_path_is_invalid);\n                return false;\n            }\n\n            pickFolderForMoveOrCopy(checkedFiles);\n            return true;\n        } else if (itemId == R.id.action_select_all_action_menu) {\n            selectAllFiles(true);\n            return true;\n        } else if (itemId == R.id.action_deselect_all_action_menu) {\n            selectAllFiles(false);\n            return true;\n        } else if (itemId == R.id.action_send_file) {\n            mContainerActivity.getFileOperationsHelper().sendFiles(checkedFiles);\n            return true;\n        } else if (itemId == R.id.action_lock_file) {\n            // TODO call lock API\n        }\n\n        return false;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onFileActionChosen(itemId: Int, checkedFiles: Set<OCFile>) -> Bool {\n    if checkedFiles.isEmpty {\n        return false\n    }\n\n    if checkedFiles.count == SINGLE_SELECTION {\n        let singleFile = checkedFiles.first!\n\n        switch itemId {\n        case R.id.action_send_share_file:\n            mContainerActivity.getFileOperationsHelper().sendShareFile(singleFile)\n            return true\n        case R.id.action_open_file_with:\n            mContainerActivity.getFileOperationsHelper().openFile(singleFile)\n            return true\n        case R.id.action_stream_media:\n            mContainerActivity.getFileOperationsHelper().streamMediaFile(singleFile)\n            return true\n        case R.id.action_edit:\n            if editorUtils.isEditorAvailable(accountManager.getUser(), singleFile.getMimeType()) {\n                mContainerActivity.getFileOperationsHelper().openFileWithTextEditor(singleFile, context: getContext())\n            } else if EditImageActivity.canBePreviewed(singleFile) {\n                (mContainerActivity as! FileDisplayActivity).startImageEditor(singleFile)\n            } else {\n                mContainerActivity.getFileOperationsHelper().openFileAsRichDocument(singleFile, context: getContext())\n            }\n            return true\n        case R.id.action_rename_file:\n            let dialog = RenameFileDialogFragment.newInstance(singleFile, mFile)\n            dialog.show(getFragmentManager(), FileDetailFragment.FTAG_RENAME_FILE)\n            return true\n        case R.id.action_see_details:\n            mActiveActionMode?.finish()\n            mContainerActivity.showDetails(singleFile)\n            mContainerActivity.showSortListGroup(false)\n            return true\n        case R.id.action_set_as_wallpaper:\n            mContainerActivity.getFileOperationsHelper().setPictureAs(singleFile, view: getView())\n            return true\n        case R.id.action_encrypted:\n            mContainerActivity.getFileOperationsHelper().toggleEncryption(singleFile, true)\n            return true\n        case R.id.action_unset_encrypted:\n            mContainerActivity.getFileOperationsHelper().toggleEncryption(singleFile, false)\n            return true\n        case R.id.action_lock_file:\n            mContainerActivity.getFileOperationsHelper().toggleFileLock(singleFile, true)\n        case R.id.action_unlock_file:\n            mContainerActivity.getFileOperationsHelper().toggleFileLock(singleFile, false)\n        case R.id.action_pin_to_homescreen:\n            shortcutUtil.addShortcutToHomescreen(singleFile, viewThemeUtils: viewThemeUtils, user: accountManager.getUser(), syncedFolderProvider: syncedFolderProvider)\n            return true\n        case R.id.action_retry:\n            backgroundJobManager.startOfflineOperations()\n            return true\n        default:\n            break\n        }\n    }\n\n    switch itemId {\n    case R.id.action_remove_file:\n        let dialog = RemoveFilesDialogFragment.newInstance(Array(checkedFiles), mActiveActionMode)\n        dialog.show(getFragmentManager(), ConfirmationDialogFragment.FTAG_CONFIRMATION)\n        return true\n    case R.id.action_download_file, R.id.action_sync_file:\n        syncAndCheckFiles(checkedFiles)\n        exitSelectionMode()\n        return true\n    case R.id.action_export_file:\n        mContainerActivity.getFileOperationsHelper().exportFiles(checkedFiles, context: getContext(), view: getView(), backgroundJobManager: backgroundJobManager)\n        exitSelectionMode()\n        return true\n    case R.id.action_cancel_sync:\n        (mContainerActivity as! FileDisplayActivity).cancelTransference(checkedFiles)\n        return true\n    case R.id.action_favorite:\n        mContainerActivity.getFileOperationsHelper().toggleFavoriteFiles(checkedFiles, true)\n        return true\n    case R.id.action_unset_favorite:\n        mContainerActivity.getFileOperationsHelper().toggleFavoriteFiles(checkedFiles, false)\n        return true\n    case R.id.action_move_or_copy:\n        if let invalidFilename = checkInvalidFilenames(checkedFiles) {\n            DisplayUtils.showSnackMessage(requireActivity(), getString(R.string.file_name_validator_rename_before_move_or_copy, invalidFilename))\n            return false\n        }\n\n        if !FileNameValidator.checkParentRemotePaths(Array(checkedFiles), getCapabilities(), requireContext()) {\n            browseToRoot()\n            DisplayUtils.showSnackMessage(requireActivity(), R.string.file_name_validator_current_path_is_invalid)\n            return false\n        }\n\n        pickFolderForMoveOrCopy(checkedFiles)\n        return true\n    case R.id.action_select_all_action_menu:\n        selectAllFiles(true)\n        return true\n    case R.id.action_deselect_all_action_menu:\n        selectAllFiles(false)\n        return true\n    case R.id.action_send_file:\n        mContainerActivity.getFileOperationsHelper().sendFiles(checkedFiles)\n        return true\n    case R.id.action_lock_file:\n        // TODO call lock API\n        break\n    default:\n        break\n    }\n\n    return false\n}\n```"
    },
    {
        "method_name": "browseToRoot",
        "method_code": "rivate void browseToRoot() {\n        OCFile root = mContainerActivity.getStorageManager().getFileByEncryptedRemotePath(ROOT_PATH);\n        browseToFolder(root,0);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled browseToRoot from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: browseToRoot\n\n        Method Code: rivate void browseToRoot() {\n        OCFile root = mContainerActivity.getStorageManager().getFileByEncryptedRemotePath(ROOT_PATH);\n        browseToFolder(root,0);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func browseToRoot() {\n    if let root = mContainerActivity.getStorageManager().getFileByEncryptedRemotePath(ROOT_PATH) {\n        browseToFolder(root, 0)\n    }\n}\n```"
    },
    {
        "method_name": "getCapabilities",
        "method_code": "rivate OCCapability getCapabilities() {\n        final User currentUser = accountManager.getUser();\n        return mContainerActivity.getStorageManager().getCapability(currentUser.getAccountName());\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getCapabilities from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: getCapabilities\n\n        Method Code: rivate OCCapability getCapabilities() {\n        final User currentUser = accountManager.getUser();\n        return mContainerActivity.getStorageManager().getCapability(currentUser.getAccountName());\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getCapabilities() -> OCCapability? {\n    let currentUser = accountManager.getUser()\n    return mContainerActivity.getStorageManager().getCapability(accountName: currentUser.getAccountName())\n}\n```"
    },
    {
        "method_name": "checkInvalidFilenames",
        "method_code": "rivate String checkInvalidFilenames(Set<OCFile> checkedFiles) {\n        for (OCFile file : checkedFiles) {\n            String errorMessage = FileNameValidator.INSTANCE.checkFileName(file.getFileName(), getCapabilities(), requireContext(), null);\n            if (errorMessage != null) {\n                return errorMessage;\n            }\n        }\n\n        return null;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled checkInvalidFilenames from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: checkInvalidFilenames\n\n        Method Code: rivate String checkInvalidFilenames(Set<OCFile> checkedFiles) {\n        for (OCFile file : checkedFiles) {\n            String errorMessage = FileNameValidator.INSTANCE.checkFileName(file.getFileName(), getCapabilities(), requireContext(), null);\n            if (errorMessage != null) {\n                return errorMessage;\n            }\n        }\n\n        return null;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func checkInvalidFilenames(checkedFiles: Set<OCFile>) -> String? {\n    for file in checkedFiles {\n        if let errorMessage = FileNameValidator.instance.checkFileName(file.getFileName(), getCapabilities(), requireContext(), nil) {\n            return errorMessage\n        }\n    }\n    return nil\n}\n```"
    },
    {
        "method_name": "pickFolderForMoveOrCopy",
        "method_code": "rivate void pickFolderForMoveOrCopy(final Set<OCFile> checkedFiles) {\n        int requestCode = FileDisplayActivity.REQUEST_CODE__MOVE_OR_COPY_FILES;\n        String extraAction = FolderPickerActivity.MOVE_OR_COPY;\n\n        final Intent action = new Intent(getActivity(), FolderPickerActivity.class);\n        final ArrayList<String> paths = new ArrayList<>(checkedFiles.size());\n        for (OCFile file : checkedFiles) {\n            paths.add(file.getRemotePath());\n        }\n        action.putStringArrayListExtra(FolderPickerActivity.EXTRA_FILE_PATHS, paths);\n        action.putExtra(FolderPickerActivity.EXTRA_ACTION, extraAction);\n        getActivity().startActivityForResult(action, requestCode);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled pickFolderForMoveOrCopy from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: pickFolderForMoveOrCopy\n\n        Method Code: rivate void pickFolderForMoveOrCopy(final Set<OCFile> checkedFiles) {\n        int requestCode = FileDisplayActivity.REQUEST_CODE__MOVE_OR_COPY_FILES;\n        String extraAction = FolderPickerActivity.MOVE_OR_COPY;\n\n        final Intent action = new Intent(getActivity(), FolderPickerActivity.class);\n        final ArrayList<String> paths = new ArrayList<>(checkedFiles.size());\n        for (OCFile file : checkedFiles) {\n            paths.add(file.getRemotePath());\n        }\n        action.putStringArrayListExtra(FolderPickerActivity.EXTRA_FILE_PATHS, paths);\n        action.putExtra(FolderPickerActivity.EXTRA_ACTION, extraAction);\n        getActivity().startActivityForResult(action, requestCode);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func pickFolderForMoveOrCopy(checkedFiles: Set<OCFile>) {\n    let requestCode = FileDisplayActivity.REQUEST_CODE__MOVE_OR_COPY_FILES\n    let extraAction = FolderPickerActivity.MOVE_OR_COPY\n\n    let action = Intent(activity: getActivity(), FolderPickerActivity.self)\n    var paths = [String]()\n    for file in checkedFiles {\n        paths.append(file.getRemotePath())\n    }\n    action.putStringArrayListExtra(FolderPickerActivity.EXTRA_FILE_PATHS, paths)\n    action.putExtra(FolderPickerActivity.EXTRA_ACTION, extraAction)\n    getActivity().startActivityForResult(action, requestCode)\n}\n```"
    },
    {
        "method_name": "getCurrentFile",
        "method_code": "ublic OCFile getCurrentFile() {\n        return mFile;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getCurrentFile from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: getCurrentFile\n\n        Method Code: ublic OCFile getCurrentFile() {\n        return mFile;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getCurrentFile() -> OCFile? {\n    return mFile\n}\n```"
    },
    {
        "method_name": "listDirectory",
        "method_code": "ublic void listDirectory(boolean onlyOnDevice, boolean fromSearch) {\n        listDirectory(null, onlyOnDevice, fromSearch);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled listDirectory from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: listDirectory\n\n        Method Code: ublic void listDirectory(boolean onlyOnDevice, boolean fromSearch) {\n        listDirectory(null, onlyOnDevice, fromSearch);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc listDirectory(onlyOnDevice: Bool, fromSearch: Bool) {\n    listDirectory(nil, onlyOnDevice: onlyOnDevice, fromSearch: fromSearch)\n}\n```"
    },
    {
        "method_name": "refreshDirectory",
        "method_code": "ublic void refreshDirectory() {\n        searchFragment = false;\n\n        setFabVisible(true);\n        listDirectory(getCurrentFile(), MainApp.isOnlyOnDevice(), false);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled refreshDirectory from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: refreshDirectory\n\n        Method Code: ublic void refreshDirectory() {\n        searchFragment = false;\n\n        setFabVisible(true);\n        listDirectory(getCurrentFile(), MainApp.isOnlyOnDevice(), false);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc refreshDirectory() {\n    searchFragment = false\n\n    setFabVisible(true)\n    listDirectory(getCurrentFile(), MainApp.isOnlyOnDevice(), false)\n}\n```"
    },
    {
        "method_name": "listDirectory",
        "method_code": "ublic void listDirectory(OCFile directory, boolean onlyOnDevice, boolean fromSearch) {\n        listDirectory(directory, null, onlyOnDevice, fromSearch);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled listDirectory from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: listDirectory\n\n        Method Code: ublic void listDirectory(OCFile directory, boolean onlyOnDevice, boolean fromSearch) {\n        listDirectory(directory, null, onlyOnDevice, fromSearch);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc listDirectory(directory: OCFile, onlyOnDevice: Bool, fromSearch: Bool) {\n    listDirectory(directory: directory, nil, onlyOnDevice: onlyOnDevice, fromSearch: fromSearch)\n}\n```"
    },
    {
        "method_name": "getDirectoryForListDirectory",
        "method_code": "rivate OCFile getDirectoryForListDirectory(OCFile directory, FileDataStorageManager storageManager) {\n        if (directory == null) {\n            if (mFile != null) {\n                directory = mFile;\n            } else {\n                directory = storageManager.getFileByPath(ROOT_PATH);\n            }\n        }\n\n        // If that's not a directory -> List its parent\n        if (!directory.isFolder()) {\n            Log_OC.w(TAG, \"You see, that is not a directory -> \" + directory);\n            directory = storageManager.getFileById(directory.getParentId());\n        }\n\n        return directory;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getDirectoryForListDirectory from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: getDirectoryForListDirectory\n\n        Method Code: rivate OCFile getDirectoryForListDirectory(OCFile directory, FileDataStorageManager storageManager) {\n        if (directory == null) {\n            if (mFile != null) {\n                directory = mFile;\n            } else {\n                directory = storageManager.getFileByPath(ROOT_PATH);\n            }\n        }\n\n        // If that's not a directory -> List its parent\n        if (!directory.isFolder()) {\n            Log_OC.w(TAG, \"You see, that is not a directory -> \" + directory);\n            directory = storageManager.getFileById(directory.getParentId());\n        }\n\n        return directory;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getDirectoryForListDirectory(directory: OCFile?, storageManager: FileDataStorageManager) -> OCFile {\n    var directory = directory\n    if directory == nil {\n        if let mFile = mFile {\n            directory = mFile\n        } else {\n            directory = storageManager.getFileByPath(ROOT_PATH)\n        }\n    }\n\n    // If that's not a directory -> List its parent\n    if !(directory?.isFolder() ?? false) {\n        Log_OC.w(TAG, \"You see, that is not a directory -> \\(String(describing: directory))\")\n        directory = storageManager.getFileById(directory?.getParentId() ?? 0)\n    }\n\n    return directory!\n}\n```"
    },
    {
        "method_name": "listDirectory",
        "method_code": "ublic void listDirectory(OCFile directory, OCFile file, boolean onlyOnDevice, boolean fromSearch) {\n        if (!searchFragment) {\n            FileDataStorageManager storageManager = mContainerActivity.getStorageManager();\n            if (storageManager == null) {\n                Log_OC.d(TAG, \"fileDataStorageManager is null\");\n                return;\n            }\n\n            directory = getDirectoryForListDirectory(directory, storageManager);\n            if (directory == null) {\n                Log_OC.d(TAG, \"directory is null, no files, wait for sync\");\n                return;\n            }\n\n            if (mLimitToMimeType == null) {\n                Log_OC.d(TAG, \"mLimitToMimeType is null\");\n                return;\n            }\n\n            if (mAdapter == null) {\n                Log_OC.d(TAG, \"mAdapter is null\");\n                return;\n            }\n\n            mAdapter.swapDirectory(\n                accountManager.getUser(),\n                directory,\n                storageManager,\n                onlyOnDevice,\n                mLimitToMimeType);\n\n            OCFile previousDirectory = mFile;\n            mFile = directory;\n\n            updateLayout();\n\n            if (file != null) {\n                mAdapter.setHighlightedItem(file);\n                int position = mAdapter.getItemPosition(file);\n                if (position != -1) {\n                    getRecyclerView().scrollToPosition(position);\n                }\n            } else if (previousDirectory == null || !previousDirectory.equals(directory)) {\n                getRecyclerView().scrollToPosition(0);\n            }\n        } else if (isSearchEventSet(searchEvent)) {\n            handleSearchEvent(searchEvent);\n            mRefreshListLayout.setRefreshing(false);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled listDirectory from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: listDirectory\n\n        Method Code: ublic void listDirectory(OCFile directory, OCFile file, boolean onlyOnDevice, boolean fromSearch) {\n        if (!searchFragment) {\n            FileDataStorageManager storageManager = mContainerActivity.getStorageManager();\n            if (storageManager == null) {\n                Log_OC.d(TAG, \"fileDataStorageManager is null\");\n                return;\n            }\n\n            directory = getDirectoryForListDirectory(directory, storageManager);\n            if (directory == null) {\n                Log_OC.d(TAG, \"directory is null, no files, wait for sync\");\n                return;\n            }\n\n            if (mLimitToMimeType == null) {\n                Log_OC.d(TAG, \"mLimitToMimeType is null\");\n                return;\n            }\n\n            if (mAdapter == null) {\n                Log_OC.d(TAG, \"mAdapter is null\");\n                return;\n            }\n\n            mAdapter.swapDirectory(\n                accountManager.getUser(),\n                directory,\n                storageManager,\n                onlyOnDevice,\n                mLimitToMimeType);\n\n            OCFile previousDirectory = mFile;\n            mFile = directory;\n\n            updateLayout();\n\n            if (file != null) {\n                mAdapter.setHighlightedItem(file);\n                int position = mAdapter.getItemPosition(file);\n                if (position != -1) {\n                    getRecyclerView().scrollToPosition(position);\n                }\n            } else if (previousDirectory == null || !previousDirectory.equals(directory)) {\n                getRecyclerView().scrollToPosition(0);\n            }\n        } else if (isSearchEventSet(searchEvent)) {\n            handleSearchEvent(searchEvent);\n            mRefreshListLayout.setRefreshing(false);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc listDirectory(directory: OCFile?, file: OCFile?, onlyOnDevice: Bool, fromSearch: Bool) {\n    if !searchFragment {\n        guard let storageManager = mContainerActivity?.storageManager else {\n            Log_OC.d(TAG, \"fileDataStorageManager is null\")\n            return\n        }\n\n        var directory = getDirectoryForListDirectory(directory, storageManager: storageManager)\n        if directory == nil {\n            Log_OC.d(TAG, \"directory is null, no files, wait for sync\")\n            return\n        }\n\n        guard let mLimitToMimeType = mLimitToMimeType else {\n            Log_OC.d(TAG, \"mLimitToMimeType is null\")\n            return\n        }\n\n        guard let mAdapter = mAdapter else {\n            Log_OC.d(TAG, \"mAdapter is null\")\n            return\n        }\n\n        mAdapter.swapDirectory(\n            accountManager.user,\n            directory: directory!,\n            storageManager: storageManager,\n            onlyOnDevice: onlyOnDevice,\n            mLimitToMimeType: mLimitToMimeType\n        )\n\n        let previousDirectory = mFile\n        mFile = directory\n\n        updateLayout()\n\n        if let file = file {\n            mAdapter.setHighlightedItem(file)\n            let position = mAdapter.getItemPosition(file)\n            if position != -1 {\n                getRecyclerView().scrollToPosition(position)\n            }\n        } else if previousDirectory == nil || previousDirectory != directory {\n            getRecyclerView().scrollToPosition(0)\n        }\n    } else if isSearchEventSet(searchEvent) {\n        handleSearchEvent(searchEvent)\n        mRefreshListLayout.setRefreshing(false)\n    }\n}\n```"
    },
    {
        "method_name": "getAdapterFiles",
        "method_code": "ublic List<OCFile> getAdapterFiles() {\n        return mAdapter.getFiles();\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getAdapterFiles from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: getAdapterFiles\n\n        Method Code: ublic List<OCFile> getAdapterFiles() {\n        return mAdapter.getFiles();\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getAdapterFiles() -> [OCFile] {\n    return mAdapter.getFiles()\n}\n```"
    },
    {
        "method_name": "updateOCFile",
        "method_code": "ublic void updateOCFile(@NonNull OCFile file) {\n        List<OCFile> mFiles = mAdapter.getFiles();\n        int index = mFiles.indexOf(file);\n        if (index == -1) {\n            Log_OC.d(TAG, \"File cannot be found in adapter's files\");\n            return;\n        }\n\n        mFiles.set(index, file);\n        mAdapter.notifyItemChanged(file);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled updateOCFile from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: updateOCFile\n\n        Method Code: ublic void updateOCFile(@NonNull OCFile file) {\n        List<OCFile> mFiles = mAdapter.getFiles();\n        int index = mFiles.indexOf(file);\n        if (index == -1) {\n            Log_OC.d(TAG, \"File cannot be found in adapter's files\");\n            return;\n        }\n\n        mFiles.set(index, file);\n        mAdapter.notifyItemChanged(file);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc updateOCFile(_ file: OCFile) {\n    guard let index = mAdapter.getFiles().firstIndex(of: file) else {\n        print(\"File cannot be found in adapter's files\")\n        return\n    }\n\n    mAdapter.getFiles()[index] = file\n    mAdapter.notifyItemChanged(file)\n}\n```"
    },
    {
        "method_name": "updateLayout",
        "method_code": "rivate void updateLayout() {\n        // decide grid vs list view\n        if (isGridViewPreferred(mFile)) {\n            switchToGridView();\n        } else {\n            switchToListView();\n        }\n\n        if (mSortButton != null) {\n            mSortButton.setText(DisplayUtils.getSortOrderStringId(preferences.getSortOrderByFolder(mFile)));\n        }\n        if (mSwitchGridViewButton != null) {\n            setGridSwitchButton();\n        }\n\n        if (mHideFab) {\n            setFabVisible(false);\n        } else {\n            setFabVisible(true);\n            // registerFabListener();\n        }\n\n        // FAB\n        setFabEnabled(mFile != null && (mFile.canWrite() || mFile.isOfflineOperation()));\n\n        invalidateActionMode();\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled updateLayout from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: updateLayout\n\n        Method Code: rivate void updateLayout() {\n        // decide grid vs list view\n        if (isGridViewPreferred(mFile)) {\n            switchToGridView();\n        } else {\n            switchToListView();\n        }\n\n        if (mSortButton != null) {\n            mSortButton.setText(DisplayUtils.getSortOrderStringId(preferences.getSortOrderByFolder(mFile)));\n        }\n        if (mSwitchGridViewButton != null) {\n            setGridSwitchButton();\n        }\n\n        if (mHideFab) {\n            setFabVisible(false);\n        } else {\n            setFabVisible(true);\n            // registerFabListener();\n        }\n\n        // FAB\n        setFabEnabled(mFile != null && (mFile.canWrite() || mFile.isOfflineOperation()));\n\n        invalidateActionMode();\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func updateLayout() {\n    // decide grid vs list view\n    if isGridViewPreferred(mFile) {\n        switchToGridView()\n    } else {\n        switchToListView()\n    }\n\n    if let sortButton = mSortButton {\n        sortButton.setTitle(DisplayUtils.getSortOrderStringId(preferences.getSortOrderByFolder(mFile)), for: .normal)\n    }\n    if mSwitchGridViewButton != nil {\n        setGridSwitchButton()\n    }\n\n    if mHideFab {\n        setFabVisible(false)\n    } else {\n        setFabVisible(true)\n        // registerFabListener()\n    }\n\n    // FAB\n    setFabEnabled(mFile != nil && (mFile.canWrite() || mFile.isOfflineOperation()))\n\n    invalidateActionMode()\n}\n```"
    },
    {
        "method_name": "invalidateActionMode",
        "method_code": "rivate void invalidateActionMode() {\n        if (mActiveActionMode != null) {\n            mActiveActionMode.invalidate();\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled invalidateActionMode from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: invalidateActionMode\n\n        Method Code: rivate void invalidateActionMode() {\n        if (mActiveActionMode != null) {\n            mActiveActionMode.invalidate();\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func invalidateActionMode() {\n    if mActiveActionMode != nil {\n        mActiveActionMode?.invalidate()\n    }\n}\n```"
    },
    {
        "method_name": "sortFiles",
        "method_code": "ublic void sortFiles(FileSortOrder sortOrder) {\n        mSortButton.setText(DisplayUtils.getSortOrderStringId(sortOrder));\n        mAdapter.setSortOrder(mFile, sortOrder);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled sortFiles from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: sortFiles\n\n        Method Code: ublic void sortFiles(FileSortOrder sortOrder) {\n        mSortButton.setText(DisplayUtils.getSortOrderStringId(sortOrder));\n        mAdapter.setSortOrder(mFile, sortOrder);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc sortFiles(sortOrder: FileSortOrder) {\n    mSortButton.setTitle(DisplayUtils.getSortOrderStringId(sortOrder), for: .normal)\n    mAdapter.setSortOrder(mFile, sortOrder: sortOrder)\n}\n```"
    },
    {
        "method_name": "isGridViewPreferred",
        "method_code": "ublic boolean isGridViewPreferred(@Nullable OCFile folder) {\n        return FOLDER_LAYOUT_GRID.equals(preferences.getFolderLayout(folder));\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isGridViewPreferred from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: isGridViewPreferred\n\n        Method Code: ublic boolean isGridViewPreferred(@Nullable OCFile folder) {\n        return FOLDER_LAYOUT_GRID.equals(preferences.getFolderLayout(folder));\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc isGridViewPreferred(folder: OCFile?) -> Bool {\n    return preferences.getFolderLayout(folder) == FOLDER_LAYOUT_GRID\n}\n```"
    },
    {
        "method_name": "setListAsPreferred",
        "method_code": "ublic void setListAsPreferred() {\n        preferences.setFolderLayout(mFile, FOLDER_LAYOUT_LIST);\n        switchToListView();\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setListAsPreferred from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: setListAsPreferred\n\n        Method Code: ublic void setListAsPreferred() {\n        preferences.setFolderLayout(mFile, FOLDER_LAYOUT_LIST);\n        switchToListView();\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setListAsPreferred() {\n    preferences.setFolderLayout(mFile, layout: FOLDER_LAYOUT_LIST)\n    switchToListView()\n}\n```"
    },
    {
        "method_name": "switchToListView",
        "method_code": "ublic void switchToListView() {\n        if (isGridEnabled()) {\n            switchLayoutManager(false);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled switchToListView from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: switchToListView\n\n        Method Code: ublic void switchToListView() {\n        if (isGridEnabled()) {\n            switchLayoutManager(false);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc switchToListView() {\n    if isGridEnabled() {\n        switchLayoutManager(false)\n    }\n}\n```"
    },
    {
        "method_name": "setGridAsPreferred",
        "method_code": "ublic void setGridAsPreferred() {\n        preferences.setFolderLayout(mFile, FOLDER_LAYOUT_GRID);\n        switchToGridView();\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setGridAsPreferred from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: setGridAsPreferred\n\n        Method Code: ublic void setGridAsPreferred() {\n        preferences.setFolderLayout(mFile, FOLDER_LAYOUT_GRID);\n        switchToGridView();\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setGridAsPreferred() {\n    preferences.setFolderLayout(mFile, layout: FOLDER_LAYOUT_GRID)\n    switchToGridView()\n}\n```"
    },
    {
        "method_name": "switchToGridView",
        "method_code": "ublic void switchToGridView() {\n        if (!isGridEnabled()) {\n            switchLayoutManager(true);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled switchToGridView from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: switchToGridView\n\n        Method Code: ublic void switchToGridView() {\n        if (!isGridEnabled()) {\n            switchLayoutManager(true);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc switchToGridView() {\n    if !isGridEnabled() {\n        switchLayoutManager(true)\n    }\n}\n```"
    },
    {
        "method_name": "switchLayoutManager",
        "method_code": "ublic void switchLayoutManager(boolean grid) {\n        int position = 0;\n\n        if (getRecyclerView().getLayoutManager() != null) {\n            position = ((LinearLayoutManager) getRecyclerView().getLayoutManager())\n                .findFirstCompletelyVisibleItemPosition();\n        }\n\n        RecyclerView.LayoutManager layoutManager;\n        if (grid) {\n            layoutManager = new GridLayoutManager(getContext(), getColumnsCount());\n            ((GridLayoutManager) layoutManager).setSpanSizeLookup(new GridLayoutManager.SpanSizeLookup() {\n                @Override\n                public int getSpanSize(int position) {\n                    if (position == getAdapter().getItemCount() - 1 ||\n                        position == 0 && getAdapter().shouldShowHeader()) {\n                        return ((GridLayoutManager) layoutManager).getSpanCount();\n                    } else {\n                        return 1;\n                    }\n                }\n            });\n\n        } else {\n            layoutManager = new LinearLayoutManager(getContext());\n        }\n\n        getRecyclerView().setLayoutManager(layoutManager);\n        getRecyclerView().scrollToPosition(position);\n        getAdapter().setGridView(grid);\n        getRecyclerView().setAdapter(getAdapter());\n        getAdapter().notifyDataSetChanged();\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled switchLayoutManager from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: switchLayoutManager\n\n        Method Code: ublic void switchLayoutManager(boolean grid) {\n        int position = 0;\n\n        if (getRecyclerView().getLayoutManager() != null) {\n            position = ((LinearLayoutManager) getRecyclerView().getLayoutManager())\n                .findFirstCompletelyVisibleItemPosition();\n        }\n\n        RecyclerView.LayoutManager layoutManager;\n        if (grid) {\n            layoutManager = new GridLayoutManager(getContext(), getColumnsCount());\n            ((GridLayoutManager) layoutManager).setSpanSizeLookup(new GridLayoutManager.SpanSizeLookup() {\n                @Override\n                public int getSpanSize(int position) {\n                    if (position == getAdapter().getItemCount() - 1 ||\n                        position == 0 && getAdapter().shouldShowHeader()) {\n                        return ((GridLayoutManager) layoutManager).getSpanCount();\n                    } else {\n                        return 1;\n                    }\n                }\n            });\n\n        } else {\n            layoutManager = new LinearLayoutManager(getContext());\n        }\n\n        getRecyclerView().setLayoutManager(layoutManager);\n        getRecyclerView().scrollToPosition(position);\n        getAdapter().setGridView(grid);\n        getRecyclerView().setAdapter(getAdapter());\n        getAdapter().notifyDataSetChanged();\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc switchLayoutManager(grid: Bool) {\n    var position = 0\n\n    if let layoutManager = getRecyclerView().collectionViewLayout as? UICollectionViewFlowLayout {\n        position = getRecyclerView().indexPathsForVisibleItems.first?.item ?? 0\n    }\n\n    let layout: UICollectionViewLayout\n    if grid {\n        let gridLayout = UICollectionViewFlowLayout()\n        gridLayout.itemSize = CGSize(width: getItemWidth(), height: getItemHeight())\n        gridLayout.minimumInteritemSpacing = 0\n        gridLayout.minimumLineSpacing = 0\n        layout = gridLayout\n    } else {\n        let linearLayout = UICollectionViewFlowLayout()\n        linearLayout.scrollDirection = .vertical\n        layout = linearLayout\n    }\n\n    getRecyclerView().setCollectionViewLayout(layout, animated: false)\n    getRecyclerView().scrollToItem(at: IndexPath(item: position, section: 0), at: .top, animated: false)\n    getAdapter().setGridView(grid: grid)\n    getRecyclerView().reloadData()\n}\n```"
    },
    {
        "method_name": "getSpanSize",
        "method_code": "Override\n                public int getSpanSize(int position) {\n                    if (position == getAdapter().getItemCount() - 1 ||\n                        position == 0 && getAdapter().shouldShowHeader()) {\n                        return ((GridLayoutManager) layoutManager).getSpanCount();\n                    } else {\n                        return 1;\n                    }\n                }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getSpanSize from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: getSpanSize\n\n        Method Code: Override\n                public int getSpanSize(int position) {\n                    if (position == getAdapter().getItemCount() - 1 ||\n                        position == 0 && getAdapter().shouldShowHeader()) {\n                        return ((GridLayoutManager) layoutManager).getSpanCount();\n                    } else {\n                        return 1;\n                    }\n                }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func getSpanSize(for position: Int) -> Int {\n    if position == adapter.itemCount - 1 || (position == 0 && adapter.shouldShowHeader()) {\n        return (layoutManager as! GridLayoutManager).spanCount\n    } else {\n        return 1\n    }\n}\n```"
    },
    {
        "method_name": "getCommonAdapter",
        "method_code": "ublic CommonOCFileListAdapterInterface getCommonAdapter() {\n        return mAdapter;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getCommonAdapter from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: getCommonAdapter\n\n        Method Code: ublic CommonOCFileListAdapterInterface getCommonAdapter() {\n        return mAdapter;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getCommonAdapter() -> CommonOCFileListAdapterInterface? {\n    return mAdapter\n}\n```"
    },
    {
        "method_name": "getAdapter",
        "method_code": "ublic OCFileListAdapter getAdapter() {\n        return mAdapter;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getAdapter from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: getAdapter\n\n        Method Code: ublic OCFileListAdapter getAdapter() {\n        return mAdapter;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getAdapter() -> OCFileListAdapter {\n    return mAdapter\n}\n```"
    },
    {
        "method_name": "setTitle",
        "method_code": "rotected void setTitle() {\n        // set title\n\n        if (getActivity() instanceof FileDisplayActivity && currentSearchType != null) {\n            switch (currentSearchType) {\n                case FAVORITE_SEARCH:\n                    setTitle(R.string.drawer_item_favorites);\n                    break;\n                case GALLERY_SEARCH:\n                    setTitle(R.string.drawer_item_gallery);\n                    break;\n                case RECENTLY_MODIFIED_SEARCH:\n                    setTitle(R.string.drawer_item_recently_modified);\n                    break;\n                case SHARED_FILTER:\n                    setTitle(R.string.drawer_item_shared);\n                    break;\n                default:\n                    setTitle(themeUtils.getDefaultDisplayNameForRootFolder(getContext()), false);\n                    break;\n            }\n        }\n\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setTitle from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: setTitle\n\n        Method Code: rotected void setTitle() {\n        // set title\n\n        if (getActivity() instanceof FileDisplayActivity && currentSearchType != null) {\n            switch (currentSearchType) {\n                case FAVORITE_SEARCH:\n                    setTitle(R.string.drawer_item_favorites);\n                    break;\n                case GALLERY_SEARCH:\n                    setTitle(R.string.drawer_item_gallery);\n                    break;\n                case RECENTLY_MODIFIED_SEARCH:\n                    setTitle(R.string.drawer_item_recently_modified);\n                    break;\n                case SHARED_FILTER:\n                    setTitle(R.string.drawer_item_shared);\n                    break;\n                default:\n                    setTitle(themeUtils.getDefaultDisplayNameForRootFolder(getContext()), false);\n                    break;\n            }\n        }\n\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setTitle() {\n    // set title\n\n    if let activity = getActivity() as? FileDisplayActivity, let currentSearchType = currentSearchType {\n        switch currentSearchType {\n        case .FAVORITE_SEARCH:\n            setTitle(R.string.drawer_item_favorites)\n        case .GALLERY_SEARCH:\n            setTitle(R.string.drawer_item_gallery)\n        case .RECENTLY_MODIFIED_SEARCH:\n            setTitle(R.string.drawer_item_recently_modified)\n        case .SHARED_FILTER:\n            setTitle(R.string.drawer_item_shared)\n        default:\n            setTitle(themeUtils.getDefaultDisplayNameForRootFolder(context: getContext()), false)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "prepareActionBarItems",
        "method_code": "rotected void prepareActionBarItems(SearchEvent event) {\n        if (event != null) {\n            switch (event.getSearchType()) {\n                case FAVORITE_SEARCH:\n                case RECENTLY_MODIFIED_SEARCH:\n                    menuItemAddRemoveValue = MenuItemAddRemove.REMOVE_SORT;\n                    break;\n\n                default:\n                    // do nothing\n                    break;\n            }\n        }\n\n        if (FILE_SEARCH != currentSearchType && getActivity() != null) {\n            getActivity().invalidateOptionsMenu();\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled prepareActionBarItems from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: prepareActionBarItems\n\n        Method Code: rotected void prepareActionBarItems(SearchEvent event) {\n        if (event != null) {\n            switch (event.getSearchType()) {\n                case FAVORITE_SEARCH:\n                case RECENTLY_MODIFIED_SEARCH:\n                    menuItemAddRemoveValue = MenuItemAddRemove.REMOVE_SORT;\n                    break;\n\n                default:\n                    // do nothing\n                    break;\n            }\n        }\n\n        if (FILE_SEARCH != currentSearchType && getActivity() != null) {\n            getActivity().invalidateOptionsMenu();\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc prepareActionBarItems(event: SearchEvent?) {\n    if let event = event {\n        switch event.searchType {\n        case .favoriteSearch, .recentlyModifiedSearch:\n            menuItemAddRemoveValue = .removeSort\n        default:\n            break\n        }\n    }\n\n    if currentSearchType != .fileSearch, let activity = getActivity() {\n        activity.invalidateOptionsMenu()\n    }\n}\n```"
    },
    {
        "method_name": "setEmptyView",
        "method_code": "rotected void setEmptyView(SearchEvent event) {\n        if (event != null) {\n            switch (event.getSearchType()) {\n                case FILE_SEARCH:\n                    setEmptyListMessage(FILE_SEARCH);\n                    break;\n\n                case FAVORITE_SEARCH:\n                    setEmptyListMessage(FAVORITE_SEARCH);\n                    break;\n\n                case RECENTLY_MODIFIED_SEARCH:\n                    setEmptyListMessage(RECENTLY_MODIFIED_SEARCH);\n                    break;\n\n                case SHARED_FILTER:\n                    setEmptyListMessage(SHARED_FILTER);\n                    break;\n\n                default:\n                    setEmptyListMessage(NO_SEARCH);\n                    break;\n            }\n        } else {\n            setEmptyListMessage(NO_SEARCH);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setEmptyView from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: setEmptyView\n\n        Method Code: rotected void setEmptyView(SearchEvent event) {\n        if (event != null) {\n            switch (event.getSearchType()) {\n                case FILE_SEARCH:\n                    setEmptyListMessage(FILE_SEARCH);\n                    break;\n\n                case FAVORITE_SEARCH:\n                    setEmptyListMessage(FAVORITE_SEARCH);\n                    break;\n\n                case RECENTLY_MODIFIED_SEARCH:\n                    setEmptyListMessage(RECENTLY_MODIFIED_SEARCH);\n                    break;\n\n                case SHARED_FILTER:\n                    setEmptyListMessage(SHARED_FILTER);\n                    break;\n\n                default:\n                    setEmptyListMessage(NO_SEARCH);\n                    break;\n            }\n        } else {\n            setEmptyListMessage(NO_SEARCH);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setEmptyView(event: SearchEvent?) {\n    if let event = event {\n        switch event.searchType {\n        case .fileSearch:\n            setEmptyListMessage(type: .fileSearch)\n        case .favoriteSearch:\n            setEmptyListMessage(type: .favoriteSearch)\n        case .recentlyModifiedSearch:\n            setEmptyListMessage(type: .recentlyModifiedSearch)\n        case .sharedFilter:\n            setEmptyListMessage(type: .sharedFilter)\n        default:\n            setEmptyListMessage(type: .noSearch)\n        }\n    } else {\n        setEmptyListMessage(type: .noSearch)\n    }\n}\n```"
    },
    {
        "method_name": "onMessageEvent",
        "method_code": "Subscribe(threadMode = ThreadMode.MAIN)\n    public void onMessageEvent(ChangeMenuEvent changeMenuEvent) {\n        resetSearchAttributes();\n\n        resetMenuItems();\n        Activity activity = getActivity();\n        if (activity != null) {\n            activity.invalidateOptionsMenu();\n\n            if (activity instanceof FileDisplayActivity) {\n                ((FileDisplayActivity) activity).initSyncBroadcastReceiver();\n            }\n\n            setTitle(themeUtils.getDefaultDisplayNameForRootFolder(getContext()), false);\n            activity.getIntent().removeExtra(OCFileListFragment.SEARCH_EVENT);\n        }\n\n        Bundle arguments = getArguments();\n        if (arguments != null) {\n            arguments.putParcelable(OCFileListFragment.SEARCH_EVENT, null);\n        }\n\n        setFabVisible(true);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onMessageEvent from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onMessageEvent\n\n        Method Code: Subscribe(threadMode = ThreadMode.MAIN)\n    public void onMessageEvent(ChangeMenuEvent changeMenuEvent) {\n        resetSearchAttributes();\n\n        resetMenuItems();\n        Activity activity = getActivity();\n        if (activity != null) {\n            activity.invalidateOptionsMenu();\n\n            if (activity instanceof FileDisplayActivity) {\n                ((FileDisplayActivity) activity).initSyncBroadcastReceiver();\n            }\n\n            setTitle(themeUtils.getDefaultDisplayNameForRootFolder(getContext()), false);\n            activity.getIntent().removeExtra(OCFileListFragment.SEARCH_EVENT);\n        }\n\n        Bundle arguments = getArguments();\n        if (arguments != null) {\n            arguments.putParcelable(OCFileListFragment.SEARCH_EVENT, null);\n        }\n\n        setFabVisible(true);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\n@objc func onMessageEvent(_ changeMenuEvent: ChangeMenuEvent) {\n    resetSearchAttributes()\n\n    resetMenuItems()\n    if let activity = self.activity {\n        activity.invalidateOptionsMenu()\n\n        if let fileDisplayActivity = activity as? FileDisplayActivity {\n            fileDisplayActivity.initSyncBroadcastReceiver()\n        }\n\n        setTitle(themeUtils.getDefaultDisplayNameForRootFolder(context: self.context), false)\n        activity.intent.removeExtra(OCFileListFragment.SEARCH_EVENT)\n    }\n\n    if var arguments = self.arguments {\n        arguments.putParcelable(OCFileListFragment.SEARCH_EVENT, nil)\n    }\n\n    setFabVisible(true)\n}\n```"
    },
    {
        "method_name": "resetMenuItems",
        "method_code": "rivate void resetMenuItems() {\n        menuItemAddRemoveValue = MenuItemAddRemove.ADD_GRID_AND_SORT_WITH_SEARCH;\n        updateSortAndGridMenuItems();\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled resetMenuItems from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: resetMenuItems\n\n        Method Code: rivate void resetMenuItems() {\n        menuItemAddRemoveValue = MenuItemAddRemove.ADD_GRID_AND_SORT_WITH_SEARCH;\n        updateSortAndGridMenuItems();\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func resetMenuItems() {\n    menuItemAddRemoveValue = .addGridAndSortWithSearch\n    updateSortAndGridMenuItems()\n}\n```"
    },
    {
        "method_name": "resetSearchAttributes",
        "method_code": "rivate void resetSearchAttributes() {\n        searchFragment = false;\n        searchEvent = null;\n        currentSearchType = NO_SEARCH;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled resetSearchAttributes from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: resetSearchAttributes\n\n        Method Code: rivate void resetSearchAttributes() {\n        searchFragment = false;\n        searchEvent = null;\n        currentSearchType = NO_SEARCH;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func resetSearchAttributes() {\n    searchFragment = false\n    searchEvent = nil\n    currentSearchType = NO_SEARCH\n}\n```"
    },
    {
        "method_name": "onMessageEvent",
        "method_code": "Subscribe(threadMode = ThreadMode.BACKGROUND)\n    public void onMessageEvent(CommentsEvent event) {\n        mAdapter.refreshCommentsCount(event.getRemoteId());\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onMessageEvent from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onMessageEvent\n\n        Method Code: Subscribe(threadMode = ThreadMode.BACKGROUND)\n    public void onMessageEvent(CommentsEvent event) {\n        mAdapter.refreshCommentsCount(event.getRemoteId());\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\n@objc func onMessageEvent(_ event: CommentsEvent) {\n    mAdapter.refreshCommentsCount(event.remoteId)\n}\n```"
    },
    {
        "method_name": "onMessageEvent",
        "method_code": "Subscribe(threadMode = ThreadMode.BACKGROUND)\n    public void onMessageEvent(FavoriteEvent event) {\n        try {\n            User user = accountManager.getUser();\n            OwnCloudClient client = clientFactory.create(user);\n\n            ToggleFavoriteRemoteOperation toggleFavoriteOperation = new ToggleFavoriteRemoteOperation(\n                event.getShouldFavorite(), event.getRemotePath());\n            RemoteOperationResult remoteOperationResult = toggleFavoriteOperation.execute(client);\n\n            if (remoteOperationResult.isSuccess()) {\n                boolean removeFromList = currentSearchType == FAVORITE_SEARCH && !event.getShouldFavorite();\n                setEmptyListMessage(FAVORITE_SEARCH);\n                mAdapter.setFavoriteAttributeForItemID(event.getRemotePath(), event.getShouldFavorite(), removeFromList);\n            }\n\n        } catch (ClientFactory.CreationException e) {\n            Log_OC.e(TAG, \"Error processing event\", e);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onMessageEvent from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onMessageEvent\n\n        Method Code: Subscribe(threadMode = ThreadMode.BACKGROUND)\n    public void onMessageEvent(FavoriteEvent event) {\n        try {\n            User user = accountManager.getUser();\n            OwnCloudClient client = clientFactory.create(user);\n\n            ToggleFavoriteRemoteOperation toggleFavoriteOperation = new ToggleFavoriteRemoteOperation(\n                event.getShouldFavorite(), event.getRemotePath());\n            RemoteOperationResult remoteOperationResult = toggleFavoriteOperation.execute(client);\n\n            if (remoteOperationResult.isSuccess()) {\n                boolean removeFromList = currentSearchType == FAVORITE_SEARCH && !event.getShouldFavorite();\n                setEmptyListMessage(FAVORITE_SEARCH);\n                mAdapter.setFavoriteAttributeForItemID(event.getRemotePath(), event.getShouldFavorite(), removeFromList);\n            }\n\n        } catch (ClientFactory.CreationException e) {\n            Log_OC.e(TAG, \"Error processing event\", e);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\n@objc func onMessageEvent(_ event: FavoriteEvent) {\n    do {\n        let user = try accountManager.getUser()\n        let client = try clientFactory.create(user: user)\n\n        let toggleFavoriteOperation = ToggleFavoriteRemoteOperation(\n            shouldFavorite: event.shouldFavorite, remotePath: event.remotePath)\n        let remoteOperationResult = toggleFavoriteOperation.execute(client: client)\n\n        if remoteOperationResult.isSuccess {\n            let removeFromList = currentSearchType == FAVORITE_SEARCH && !event.shouldFavorite\n            setEmptyListMessage(FAVORITE_SEARCH)\n            mAdapter.setFavoriteAttributeForItemID(event.remotePath, event.shouldFavorite, removeFromList)\n        }\n\n    } catch let error as ClientFactory.CreationException {\n        Log_OC.e(TAG, \"Error processing event\", error)\n    } catch {\n        Log_OC.e(TAG, \"Unexpected error\", error)\n    }\n}\n```"
    },
    {
        "method_name": "onViewStateRestored",
        "method_code": "Override\n    public void onViewStateRestored(@Nullable Bundle savedInstanceState) {\n        super.onViewStateRestored(savedInstanceState);\n\n        if (savedInstanceState != null) {\n            searchEvent = BundleExtensionsKt.getParcelableArgument(savedInstanceState, SEARCH_EVENT, SearchEvent.class);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onViewStateRestored from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onViewStateRestored\n\n        Method Code: Override\n    public void onViewStateRestored(@Nullable Bundle savedInstanceState) {\n        super.onViewStateRestored(savedInstanceState);\n\n        if (savedInstanceState != null) {\n            searchEvent = BundleExtensionsKt.getParcelableArgument(savedInstanceState, SEARCH_EVENT, SearchEvent.class);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n\n    if let savedInstanceState = savedInstanceState {\n        searchEvent = savedInstanceState.getParcelableArgument(forKey: SEARCH_EVENT) as? SearchEvent\n    }\n}\n```"
    },
    {
        "method_name": "onMessageEvent",
        "method_code": "Subscribe(threadMode = ThreadMode.BACKGROUND)\n    public void onMessageEvent(final SearchEvent event) {\n        handleSearchEvent(event);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onMessageEvent from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onMessageEvent\n\n        Method Code: Subscribe(threadMode = ThreadMode.BACKGROUND)\n    public void onMessageEvent(final SearchEvent event) {\n        handleSearchEvent(event);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\n@objc func onMessageEvent(_ event: SearchEvent) {\n    handleSearchEvent(event)\n}\n```"
    },
    {
        "method_name": "handleSearchEvent",
        "method_code": "rotected void handleSearchEvent(SearchEvent event) {\n        if (SearchRemoteOperation.SearchType.PHOTO_SEARCH == event.getSearchType()) {\n            return;\n        }\n\n        // avoid calling api multiple times if async task is already executing\n        if (remoteOperationAsyncTask != null && remoteOperationAsyncTask.getStatus() != AsyncTask.Status.FINISHED) {\n            Log_OC.d(TAG, \"OCFileListSearchAsyncTask already running skipping new api call for search event: \" + searchEvent.getSearchType());\n            return;\n        }\n\n        prepareCurrentSearch(event);\n        searchFragment = true;\n        setEmptyListLoadingMessage();\n        mAdapter.setData(new ArrayList<>(),\n                         NO_SEARCH,\n                         mContainerActivity.getStorageManager(),\n                         mFile,\n                         true);\n\n        setFabVisible(false);\n\n        Runnable switchViewsRunnable = () -> {\n            if (isGridViewPreferred(mFile) && !isGridEnabled()) {\n                switchToGridView();\n            } else if (!isGridViewPreferred(mFile) && isGridEnabled()) {\n                switchToListView();\n            }\n        };\n\n        new Handler(Looper.getMainLooper()).post(switchViewsRunnable);\n\n        final User currentUser = accountManager.getUser();\n\n        final RemoteOperation remoteOperation = getSearchRemoteOperation(currentUser, event);\n\n        remoteOperationAsyncTask = new OCFileListSearchAsyncTask(mContainerActivity, this, remoteOperation, currentUser, event);\n\n        remoteOperationAsyncTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled handleSearchEvent from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: handleSearchEvent\n\n        Method Code: rotected void handleSearchEvent(SearchEvent event) {\n        if (SearchRemoteOperation.SearchType.PHOTO_SEARCH == event.getSearchType()) {\n            return;\n        }\n\n        // avoid calling api multiple times if async task is already executing\n        if (remoteOperationAsyncTask != null && remoteOperationAsyncTask.getStatus() != AsyncTask.Status.FINISHED) {\n            Log_OC.d(TAG, \"OCFileListSearchAsyncTask already running skipping new api call for search event: \" + searchEvent.getSearchType());\n            return;\n        }\n\n        prepareCurrentSearch(event);\n        searchFragment = true;\n        setEmptyListLoadingMessage();\n        mAdapter.setData(new ArrayList<>(),\n                         NO_SEARCH,\n                         mContainerActivity.getStorageManager(),\n                         mFile,\n                         true);\n\n        setFabVisible(false);\n\n        Runnable switchViewsRunnable = () -> {\n            if (isGridViewPreferred(mFile) && !isGridEnabled()) {\n                switchToGridView();\n            } else if (!isGridViewPreferred(mFile) && isGridEnabled()) {\n                switchToListView();\n            }\n        };\n\n        new Handler(Looper.getMainLooper()).post(switchViewsRunnable);\n\n        final User currentUser = accountManager.getUser();\n\n        final RemoteOperation remoteOperation = getSearchRemoteOperation(currentUser, event);\n\n        remoteOperationAsyncTask = new OCFileListSearchAsyncTask(mContainerActivity, this, remoteOperation, currentUser, event);\n\n        remoteOperationAsyncTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc handleSearchEvent(_ event: SearchEvent) {\n    if event.searchType == .photoSearch {\n        return\n    }\n\n    if let task = remoteOperationAsyncTask, task.status != .finished {\n        Log_OC.d(TAG, \"OCFileListSearchAsyncTask already running skipping new api call for search event: \\(event.searchType)\")\n        return\n    }\n\n    prepareCurrentSearch(event)\n    searchFragment = true\n    setEmptyListLoadingMessage()\n    mAdapter.setData([], NO_SEARCH, mContainerActivity.storageManager, mFile, true)\n\n    setFabVisible(false)\n\n    let switchViewsRunnable = {\n        if self.isGridViewPreferred(self.mFile) && !self.isGridEnabled() {\n            self.switchToGridView()\n        } else if !self.isGridViewPreferred(self.mFile) && self.isGridEnabled() {\n            self.switchToListView()\n        }\n    }\n\n    DispatchQueue.main.async(execute: switchViewsRunnable)\n\n    let currentUser = accountManager.user\n\n    let remoteOperation = getSearchRemoteOperation(currentUser, event)\n\n    remoteOperationAsyncTask = OCFileListSearchAsyncTask(mContainerActivity, self, remoteOperation, currentUser, event)\n\n    remoteOperationAsyncTask?.execute(on: .global(qos: .background))\n}\n```"
    },
    {
        "method_name": "getSearchRemoteOperation",
        "method_code": "rotected RemoteOperation getSearchRemoteOperation(final User currentUser, final SearchEvent event) {\n        boolean searchOnlyFolders = false;\n        if (getArguments() != null && getArguments().getBoolean(ARG_SEARCH_ONLY_FOLDER, false)) {\n            searchOnlyFolders = true;\n        }\n\n        OCCapability ocCapability = mContainerActivity.getStorageManager()\n            .getCapability(currentUser.getAccountName());\n\n        return new SearchRemoteOperation(event.getSearchQuery(),\n                                         event.getSearchType(),\n                                         searchOnlyFolders,\n                                         ocCapability);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getSearchRemoteOperation from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: getSearchRemoteOperation\n\n        Method Code: rotected RemoteOperation getSearchRemoteOperation(final User currentUser, final SearchEvent event) {\n        boolean searchOnlyFolders = false;\n        if (getArguments() != null && getArguments().getBoolean(ARG_SEARCH_ONLY_FOLDER, false)) {\n            searchOnlyFolders = true;\n        }\n\n        OCCapability ocCapability = mContainerActivity.getStorageManager()\n            .getCapability(currentUser.getAccountName());\n\n        return new SearchRemoteOperation(event.getSearchQuery(),\n                                         event.getSearchType(),\n                                         searchOnlyFolders,\n                                         ocCapability);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getSearchRemoteOperation(currentUser: User, event: SearchEvent) -> RemoteOperation {\n    var searchOnlyFolders = false\n    if let arguments = getArguments(), arguments.bool(forKey: ARG_SEARCH_ONLY_FOLDER) {\n        searchOnlyFolders = true\n    }\n\n    let ocCapability = mContainerActivity.getStorageManager().getCapability(currentUser.accountName)\n\n    return SearchRemoteOperation(searchQuery: event.searchQuery,\n                                 searchType: event.searchType,\n                                 searchOnlyFolders: searchOnlyFolders,\n                                 ocCapability: ocCapability)\n}\n```"
    },
    {
        "method_name": "onMessageEvent",
        "method_code": "Subscribe(threadMode = ThreadMode.BACKGROUND)\n    public void onMessageEvent(EncryptionEvent event) {\n        final User user = accountManager.getUser();\n\n        // check if keys are stored\n        String publicKey = arbitraryDataProvider.getValue(user, EncryptionUtils.PUBLIC_KEY);\n        String privateKey = arbitraryDataProvider.getValue(user, EncryptionUtils.PRIVATE_KEY);\n\n        FileDataStorageManager storageManager = mContainerActivity.getStorageManager();\n        OCFile file = storageManager.getFileByRemoteId(event.getRemoteId());\n\n        if (publicKey.isEmpty() || privateKey.isEmpty()) {\n            Log_OC.d(TAG, \"no public key for \" + user.getAccountName());\n\n            int position = -1;\n            if (file != null) {\n                position = mAdapter.getItemPosition(file);\n            }\n            SetupEncryptionDialogFragment dialog = SetupEncryptionDialogFragment.newInstance(user, position);\n            dialog.setTargetFragment(this, SETUP_ENCRYPTION_REQUEST_CODE);\n            dialog.show(getParentFragmentManager(), SETUP_ENCRYPTION_DIALOG_TAG);\n        } else {\n            // TODO E2E: if encryption fails, to not set it as encrypted!\n            encryptFolder(file,\n                          event.getLocalId(),\n                          event.getRemoteId(),\n                          event.getRemotePath(),\n                          event.getShouldBeEncrypted(),\n                          publicKey,\n                          privateKey,\n                          storageManager);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onMessageEvent from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onMessageEvent\n\n        Method Code: Subscribe(threadMode = ThreadMode.BACKGROUND)\n    public void onMessageEvent(EncryptionEvent event) {\n        final User user = accountManager.getUser();\n\n        // check if keys are stored\n        String publicKey = arbitraryDataProvider.getValue(user, EncryptionUtils.PUBLIC_KEY);\n        String privateKey = arbitraryDataProvider.getValue(user, EncryptionUtils.PRIVATE_KEY);\n\n        FileDataStorageManager storageManager = mContainerActivity.getStorageManager();\n        OCFile file = storageManager.getFileByRemoteId(event.getRemoteId());\n\n        if (publicKey.isEmpty() || privateKey.isEmpty()) {\n            Log_OC.d(TAG, \"no public key for \" + user.getAccountName());\n\n            int position = -1;\n            if (file != null) {\n                position = mAdapter.getItemPosition(file);\n            }\n            SetupEncryptionDialogFragment dialog = SetupEncryptionDialogFragment.newInstance(user, position);\n            dialog.setTargetFragment(this, SETUP_ENCRYPTION_REQUEST_CODE);\n            dialog.show(getParentFragmentManager(), SETUP_ENCRYPTION_DIALOG_TAG);\n        } else {\n            // TODO E2E: if encryption fails, to not set it as encrypted!\n            encryptFolder(file,\n                          event.getLocalId(),\n                          event.getRemoteId(),\n                          event.getRemotePath(),\n                          event.getShouldBeEncrypted(),\n                          publicKey,\n                          privateKey,\n                          storageManager);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\n@objc func onMessageEvent(_ event: EncryptionEvent) {\n    let user = accountManager.getUser()\n\n    // check if keys are stored\n    let publicKey = arbitraryDataProvider.getValue(user, forKey: EncryptionUtils.PUBLIC_KEY)\n    let privateKey = arbitraryDataProvider.getValue(user, forKey: EncryptionUtils.PRIVATE_KEY)\n\n    let storageManager = mContainerActivity.getStorageManager()\n    let file = storageManager.getFileByRemoteId(event.remoteId)\n\n    if publicKey.isEmpty || privateKey.isEmpty {\n        Log_OC.d(TAG, \"no public key for \\(user.accountName)\")\n\n        var position = -1\n        if let file = file {\n            position = mAdapter.getItemPosition(file)\n        }\n        let dialog = SetupEncryptionDialogFragment.newInstance(user, position: position)\n        dialog.setTargetFragment(self, requestCode: SETUP_ENCRYPTION_REQUEST_CODE)\n        dialog.show(parentFragmentManager, tag: SETUP_ENCRYPTION_DIALOG_TAG)\n    } else {\n        // TODO E2E: if encryption fails, to not set it as encrypted!\n        encryptFolder(file: file,\n                      localId: event.localId,\n                      remoteId: event.remoteId,\n                      remotePath: event.remotePath,\n                      shouldBeEncrypted: event.shouldBeEncrypted,\n                      publicKey: publicKey,\n                      privateKey: privateKey,\n                      storageManager: storageManager)\n    }\n}\n```"
    },
    {
        "method_name": "encryptFolder",
        "method_code": "rivate void encryptFolder(OCFile folder,\n                               long localId,\n                               String remoteId,\n                               String remotePath,\n                               boolean shouldBeEncrypted,\n                               String publicKeyString,\n                               String privateKeyString,\n                               FileDataStorageManager storageManager) {\n        try {\n            Log_OC.d(TAG, \"encrypt folder \" + folder.getRemoteId());\n            User user = accountManager.getUser();\n            OwnCloudClient client = clientFactory.create(user);\n            RemoteOperationResult remoteOperationResult = new ToggleEncryptionRemoteOperation(localId,\n                                                                                              remotePath,\n                                                                                              shouldBeEncrypted)\n                .execute(client);\n\n            if (remoteOperationResult.isSuccess()) {\n                // lock folder\n                String token = EncryptionUtils.lockFolder(folder, client);\n\n                OCCapability ocCapability = mContainerActivity.getStorageManager().getCapability(user.getAccountName());\n\n                if (ocCapability.getEndToEndEncryptionApiVersion() == E2EVersion.V2_0) {\n                    // Update metadata\n                    Pair<Boolean, DecryptedFolderMetadataFile> metadataPair = EncryptionUtils.retrieveMetadata(folder,\n                                                                                                               client,\n                                                                                                               privateKeyString,\n                                                                                                               publicKeyString,\n                                                                                                               storageManager,\n                                                                                                               user,\n                                                                                                               requireContext(),\n                                                                                                               arbitraryDataProvider);\n\n                    boolean metadataExists = metadataPair.first;\n                    DecryptedFolderMetadataFile metadata = metadataPair.second;\n\n                    new EncryptionUtilsV2().serializeAndUploadMetadata(folder,\n                                                                       metadata,\n                                                                       token,\n                                                                       client,\n                                                                       metadataExists,\n                                                                       requireContext(),\n                                                                       user,\n                                                                       storageManager);\n\n                    // unlock folder\n                    EncryptionUtils.unlockFolder(folder, client, token);\n\n                } else if (ocCapability.getEndToEndEncryptionApiVersion() == E2EVersion.V1_0 ||\n                    ocCapability.getEndToEndEncryptionApiVersion() == E2EVersion.V1_1 ||\n                    ocCapability.getEndToEndEncryptionApiVersion() == E2EVersion.V1_2\n                ) {\n                    // unlock folder\n                    EncryptionUtils.unlockFolderV1(folder, client, token);\n                } else if (ocCapability.getEndToEndEncryptionApiVersion() == E2EVersion.UNKNOWN) {\n                    throw new IllegalArgumentException(\"Unknown E2E version\");\n                }\n\n                mAdapter.setEncryptionAttributeForItemID(remoteId, shouldBeEncrypted);\n            } else if (remoteOperationResult.getHttpCode() == HttpStatus.SC_FORBIDDEN) {\n                Snackbar.make(getRecyclerView(),\n                              R.string.end_to_end_encryption_folder_not_empty,\n                              Snackbar.LENGTH_LONG).show();\n            } else {\n                Snackbar.make(getRecyclerView(),\n                              R.string.common_error_unknown,\n                              Snackbar.LENGTH_LONG).show();\n            }\n\n        } catch (Throwable e) {\n            Log_OC.e(TAG, \"Error creating encrypted folder\", e);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled encryptFolder from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: encryptFolder\n\n        Method Code: rivate void encryptFolder(OCFile folder,\n                               long localId,\n                               String remoteId,\n                               String remotePath,\n                               boolean shouldBeEncrypted,\n                               String publicKeyString,\n                               String privateKeyString,\n                               FileDataStorageManager storageManager) {\n        try {\n            Log_OC.d(TAG, \"encrypt folder \" + folder.getRemoteId());\n            User user = accountManager.getUser();\n            OwnCloudClient client = clientFactory.create(user);\n            RemoteOperationResult remoteOperationResult = new ToggleEncryptionRemoteOperation(localId,\n                                                                                              remotePath,\n                                                                                              shouldBeEncrypted)\n                .execute(client);\n\n            if (remoteOperationResult.isSuccess()) {\n                // lock folder\n                String token = EncryptionUtils.lockFolder(folder, client);\n\n                OCCapability ocCapability = mContainerActivity.getStorageManager().getCapability(user.getAccountName());\n\n                if (ocCapability.getEndToEndEncryptionApiVersion() == E2EVersion.V2_0) {\n                    // Update metadata\n                    Pair<Boolean, DecryptedFolderMetadataFile> metadataPair = EncryptionUtils.retrieveMetadata(folder,\n                                                                                                               client,\n                                                                                                               privateKeyString,\n                                                                                                               publicKeyString,\n                                                                                                               storageManager,\n                                                                                                               user,\n                                                                                                               requireContext(),\n                                                                                                               arbitraryDataProvider);\n\n                    boolean metadataExists = metadataPair.first;\n                    DecryptedFolderMetadataFile metadata = metadataPair.second;\n\n                    new EncryptionUtilsV2().serializeAndUploadMetadata(folder,\n                                                                       metadata,\n                                                                       token,\n                                                                       client,\n                                                                       metadataExists,\n                                                                       requireContext(),\n                                                                       user,\n                                                                       storageManager);\n\n                    // unlock folder\n                    EncryptionUtils.unlockFolder(folder, client, token);\n\n                } else if (ocCapability.getEndToEndEncryptionApiVersion() == E2EVersion.V1_0 ||\n                    ocCapability.getEndToEndEncryptionApiVersion() == E2EVersion.V1_1 ||\n                    ocCapability.getEndToEndEncryptionApiVersion() == E2EVersion.V1_2\n                ) {\n                    // unlock folder\n                    EncryptionUtils.unlockFolderV1(folder, client, token);\n                } else if (ocCapability.getEndToEndEncryptionApiVersion() == E2EVersion.UNKNOWN) {\n                    throw new IllegalArgumentException(\"Unknown E2E version\");\n                }\n\n                mAdapter.setEncryptionAttributeForItemID(remoteId, shouldBeEncrypted);\n            } else if (remoteOperationResult.getHttpCode() == HttpStatus.SC_FORBIDDEN) {\n                Snackbar.make(getRecyclerView(),\n                              R.string.end_to_end_encryption_folder_not_empty,\n                              Snackbar.LENGTH_LONG).show();\n            } else {\n                Snackbar.make(getRecyclerView(),\n                              R.string.common_error_unknown,\n                              Snackbar.LENGTH_LONG).show();\n            }\n\n        } catch (Throwable e) {\n            Log_OC.e(TAG, \"Error creating encrypted folder\", e);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func encryptFolder(folder: OCFile, localId: Int64, remoteId: String, remotePath: String, shouldBeEncrypted: Bool, publicKeyString: String, privateKeyString: String, storageManager: FileDataStorageManager) {\n    do {\n        Log_OC.d(TAG, \"encrypt folder \\(folder.remoteId)\")\n        let user = accountManager.getUser()\n        let client = clientFactory.create(user)\n        let remoteOperationResult = ToggleEncryptionRemoteOperation(localId: localId, remotePath: remotePath, shouldBeEncrypted: shouldBeEncrypted).execute(client: client)\n\n        if remoteOperationResult.isSuccess {\n            // lock folder\n            let token = EncryptionUtils.lockFolder(folder: folder, client: client)\n\n            let ocCapability = mContainerActivity.getStorageManager().getCapability(user.getAccountName())\n\n            if ocCapability.getEndToEndEncryptionApiVersion() == .V2_0 {\n                // Update metadata\n                let metadataPair = EncryptionUtils.retrieveMetadata(folder: folder, client: client, privateKeyString: privateKeyString, publicKeyString: publicKeyString, storageManager: storageManager, user: user, context: requireContext(), arbitraryDataProvider: arbitraryDataProvider)\n\n                let metadataExists = metadataPair.first\n                let metadata = metadataPair.second\n\n                EncryptionUtilsV2().serializeAndUploadMetadata(folder: folder, metadata: metadata, token: token, client: client, metadataExists: metadataExists, context: requireContext(), user: user, storageManager: storageManager)\n\n                // unlock folder\n                EncryptionUtils.unlockFolder(folder: folder, client: client, token: token)\n\n            } else if ocCapability.getEndToEndEncryptionApiVersion() == .V1_0 || ocCapability.getEndToEndEncryptionApiVersion() == .V1_1 || ocCapability.getEndToEndEncryptionApiVersion() == .V1_2 {\n                // unlock folder\n                EncryptionUtils.unlockFolderV1(folder: folder, client: client, token: token)\n            } else if ocCapability.getEndToEndEncryptionApiVersion() == .UNKNOWN {\n                throw IllegalArgumentException(\"Unknown E2E version\")\n            }\n\n            mAdapter.setEncryptionAttributeForItemID(remoteId: remoteId, shouldBeEncrypted: shouldBeEncrypted)\n        } else if remoteOperationResult.getHttpCode() == HttpStatus.SC_FORBIDDEN {\n            Snackbar.make(getRecyclerView(), R.string.end_to_end_encryption_folder_not_empty, Snackbar.LENGTH_LONG).show()\n        } else {\n            Snackbar.make(getRecyclerView(), R.string.common_error_unknown, Snackbar.LENGTH_LONG).show()\n        }\n\n    } catch {\n        Log_OC.e(TAG, \"Error creating encrypted folder\", error)\n    }\n}\n```"
    },
    {
        "method_name": "onMessageEvent",
        "method_code": "Subscribe(threadMode = ThreadMode.BACKGROUND)\n    public void onMessageEvent(FileLockEvent event) {\n        final User user = accountManager.getUser();\n\n        try {\n            new Handler(Looper.getMainLooper()).post(() -> setLoading(true));\n            NextcloudClient client = clientFactory.createNextcloudClient(user);\n            ToggleFileLockRemoteOperation operation = new ToggleFileLockRemoteOperation(event.getShouldLock(), event.getFilePath());\n            RemoteOperationResult<Void> result = operation.execute(client);\n\n            if (result.isSuccess()) {\n                // TODO only refresh the modified file?\n                new Handler(Looper.getMainLooper()).post(this::onRefresh);\n            } else {\n                Snackbar.make(getRecyclerView(),\n                              R.string.error_file_lock,\n                              Snackbar.LENGTH_LONG).show();\n            }\n\n        } catch (ClientFactory.CreationException e) {\n            Log_OC.e(TAG, \"Cannot create client\", e);\n            Snackbar.make(getRecyclerView(),\n                          R.string.error_file_lock,\n                          Snackbar.LENGTH_LONG).show();\n        } finally {\n            new Handler(Looper.getMainLooper()).post(() -> setLoading(false));\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onMessageEvent from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onMessageEvent\n\n        Method Code: Subscribe(threadMode = ThreadMode.BACKGROUND)\n    public void onMessageEvent(FileLockEvent event) {\n        final User user = accountManager.getUser();\n\n        try {\n            new Handler(Looper.getMainLooper()).post(() -> setLoading(true));\n            NextcloudClient client = clientFactory.createNextcloudClient(user);\n            ToggleFileLockRemoteOperation operation = new ToggleFileLockRemoteOperation(event.getShouldLock(), event.getFilePath());\n            RemoteOperationResult<Void> result = operation.execute(client);\n\n            if (result.isSuccess()) {\n                // TODO only refresh the modified file?\n                new Handler(Looper.getMainLooper()).post(this::onRefresh);\n            } else {\n                Snackbar.make(getRecyclerView(),\n                              R.string.error_file_lock,\n                              Snackbar.LENGTH_LONG).show();\n            }\n\n        } catch (ClientFactory.CreationException e) {\n            Log_OC.e(TAG, \"Cannot create client\", e);\n            Snackbar.make(getRecyclerView(),\n                          R.string.error_file_lock,\n                          Snackbar.LENGTH_LONG).show();\n        } finally {\n            new Handler(Looper.getMainLooper()).post(() -> setLoading(false));\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\n@objc func onMessageEvent(_ event: FileLockEvent) {\n    let user = accountManager.getUser()\n\n    DispatchQueue.global(qos: .background).async {\n        DispatchQueue.main.async {\n            self.setLoading(true)\n        }\n        \n        do {\n            let client = try clientFactory.createNextcloudClient(user: user)\n            let operation = ToggleFileLockRemoteOperation(shouldLock: event.shouldLock, filePath: event.filePath)\n            let result = operation.execute(client: client)\n            \n            if result.isSuccess {\n                DispatchQueue.main.async {\n                    self.onRefresh()\n                }\n            } else {\n                DispatchQueue.main.async {\n                    Snackbar.make(self.getRecyclerView(), R.string.error_file_lock, Snackbar.LENGTH_LONG).show()\n                }\n            }\n        } catch {\n            Log_OC.e(TAG, \"Cannot create client\", error)\n            DispatchQueue.main.async {\n                Snackbar.make(self.getRecyclerView(), R.string.error_file_lock, Snackbar.LENGTH_LONG).show()\n            }\n        } finally {\n            DispatchQueue.main.async {\n                self.setLoading(false)\n            }\n        }\n    }\n}\n```"
    },
    {
        "method_name": "setTitle",
        "method_code": "rotected void setTitle(@StringRes final int title) {\n        setTitle(requireContext().getString(title), true);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setTitle from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: setTitle\n\n        Method Code: rotected void setTitle(@StringRes final int title) {\n        setTitle(requireContext().getString(title), true);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setTitle(_ title: Int) {\n    setTitle(NSLocalizedString(String(title), comment: \"\"), true)\n}\n```"
    },
    {
        "method_name": "setTitle",
        "method_code": "rotected void setTitle(final String title, Boolean showBackAsMenu) {\n        requireActivity().runOnUiThread(() -> {\n            if (getActivity() != null) {\n                final ActionBar actionBar = ((FileDisplayActivity) getActivity()).getSupportActionBar();\n                final Context context = getContext();\n\n                if (actionBar != null && context != null) {\n                    viewThemeUtils.files.themeActionBar(context, actionBar, title, showBackAsMenu);\n                }\n            }\n        });\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setTitle from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: setTitle\n\n        Method Code: rotected void setTitle(final String title, Boolean showBackAsMenu) {\n        requireActivity().runOnUiThread(() -> {\n            if (getActivity() != null) {\n                final ActionBar actionBar = ((FileDisplayActivity) getActivity()).getSupportActionBar();\n                final Context context = getContext();\n\n                if (actionBar != null && context != null) {\n                    viewThemeUtils.files.themeActionBar(context, actionBar, title, showBackAsMenu);\n                }\n            }\n        });\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setTitle(_ title: String, showBackAsMenu: Bool) {\n    DispatchQueue.main.async {\n        if let activity = self.activity as? FileDisplayActivity {\n            let actionBar = activity.supportActionBar\n            let context = self.context\n\n            if let actionBar = actionBar, let context = context {\n                viewThemeUtils.files.themeActionBar(context: context, actionBar: actionBar, title: title, showBackAsMenu: showBackAsMenu)\n            }\n        }\n    }\n}\n```"
    },
    {
        "method_name": "onStart",
        "method_code": "Override\n    public void onStart() {\n        super.onStart();\n        EventBus.getDefault().register(this);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onStart from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onStart\n\n        Method Code: Override\n    public void onStart() {\n        super.onStart();\n        EventBus.getDefault().register(this);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n    EventBus.default.register(self)\n}\n```"
    },
    {
        "method_name": "onStop",
        "method_code": "Override\n    public void onStop() {\n        EventBus.getDefault().unregister(this);\n        super.onStop();\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onStop from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onStop\n\n        Method Code: Override\n    public void onStop() {\n        EventBus.getDefault().unregister(this);\n        super.onStop();\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n    NotificationCenter.default.removeObserver(self)\n}\n```"
    },
    {
        "method_name": "onRefresh",
        "method_code": "Override\n    public void onRefresh() {\n        if (searchFragment && isSearchEventSet(searchEvent)) {\n            handleSearchEvent(searchEvent);\n\n            mRefreshListLayout.setRefreshing(false);\n        } else {\n            searchFragment = false;\n            super.onRefresh();\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onRefresh from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onRefresh\n\n        Method Code: Override\n    public void onRefresh() {\n        if (searchFragment && isSearchEventSet(searchEvent)) {\n            handleSearchEvent(searchEvent);\n\n            mRefreshListLayout.setRefreshing(false);\n        } else {\n            searchFragment = false;\n            super.onRefresh();\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onRefresh() {\n    if searchFragment && isSearchEventSet(searchEvent) {\n        handleSearchEvent(searchEvent)\n        \n        mRefreshListLayout.isRefreshing = false\n    } else {\n        searchFragment = false\n        super.onRefresh()\n    }\n}\n```"
    },
    {
        "method_name": "setSearchFragment",
        "method_code": "ublic void setSearchFragment(boolean searchFragment) {\n        this.searchFragment = searchFragment;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setSearchFragment from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: setSearchFragment\n\n        Method Code: ublic void setSearchFragment(boolean searchFragment) {\n        this.searchFragment = searchFragment;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setSearchFragment(_ searchFragment: Bool) {\n    self.searchFragment = searchFragment\n}\n```"
    },
    {
        "method_name": "isSearchFragment",
        "method_code": "ublic boolean isSearchFragment() {\n        return searchFragment;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isSearchFragment from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: isSearchFragment\n\n        Method Code: ublic boolean isSearchFragment() {\n        return searchFragment;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc isSearchFragment() -> Bool {\n    return searchFragment\n}\n```"
    },
    {
        "method_name": "selectAllFiles",
        "method_code": "ublic void selectAllFiles(boolean select) {\n        OCFileListAdapter ocFileListAdapter = (OCFileListAdapter) getRecyclerView().getAdapter();\n        if (ocFileListAdapter == null) {\n            return;\n        }\n\n        if (select) {\n            ocFileListAdapter.addAllFilesToCheckedFiles();\n        } else {\n            ocFileListAdapter.clearCheckedItems();\n        }\n\n        for (int i = 0; i < mAdapter.getItemCount(); i++) {\n            mAdapter.notifyItemChanged(i);\n        }\n\n        mActiveActionMode.invalidate();\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled selectAllFiles from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: selectAllFiles\n\n        Method Code: ublic void selectAllFiles(boolean select) {\n        OCFileListAdapter ocFileListAdapter = (OCFileListAdapter) getRecyclerView().getAdapter();\n        if (ocFileListAdapter == null) {\n            return;\n        }\n\n        if (select) {\n            ocFileListAdapter.addAllFilesToCheckedFiles();\n        } else {\n            ocFileListAdapter.clearCheckedItems();\n        }\n\n        for (int i = 0; i < mAdapter.getItemCount(); i++) {\n            mAdapter.notifyItemChanged(i);\n        }\n\n        mActiveActionMode.invalidate();\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc selectAllFiles(select: Bool) {\n    guard let ocFileListAdapter = getRecyclerView().adapter as? OCFileListAdapter else {\n        return\n    }\n\n    if select {\n        ocFileListAdapter.addAllFilesToCheckedFiles()\n    } else {\n        ocFileListAdapter.clearCheckedItems()\n    }\n\n    for i in 0..<mAdapter.itemCount {\n        mAdapter.notifyItemChanged(i)\n    }\n\n    mActiveActionMode.invalidate()\n}\n```"
    },
    {
        "method_name": "exitSelectionMode",
        "method_code": "ublic void exitSelectionMode() {\n        if (mActiveActionMode != null) {\n            mActiveActionMode.finish();\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled exitSelectionMode from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: exitSelectionMode\n\n        Method Code: ublic void exitSelectionMode() {\n        if (mActiveActionMode != null) {\n            mActiveActionMode.finish();\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc exitSelectionMode() {\n    if let activeActionMode = mActiveActionMode {\n        activeActionMode.finish()\n    }\n}\n```"
    },
    {
        "method_name": "isSearchEventSet",
        "method_code": "rivate boolean isSearchEventSet(SearchEvent event) {\n        if (event == null) {\n            return false;\n        }\n        SearchRemoteOperation.SearchType searchType = event.getSearchType();\n        return !TextUtils.isEmpty(event.getSearchQuery()) ||\n            searchType == SearchRemoteOperation.SearchType.SHARED_FILTER ||\n            searchType == SearchRemoteOperation.SearchType.FAVORITE_SEARCH ||\n            searchType == SearchRemoteOperation.SearchType.RECENTLY_MODIFIED_SEARCH;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isSearchEventSet from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: isSearchEventSet\n\n        Method Code: rivate boolean isSearchEventSet(SearchEvent event) {\n        if (event == null) {\n            return false;\n        }\n        SearchRemoteOperation.SearchType searchType = event.getSearchType();\n        return !TextUtils.isEmpty(event.getSearchQuery()) ||\n            searchType == SearchRemoteOperation.SearchType.SHARED_FILTER ||\n            searchType == SearchRemoteOperation.SearchType.FAVORITE_SEARCH ||\n            searchType == SearchRemoteOperation.SearchType.RECENTLY_MODIFIED_SEARCH;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func isSearchEventSet(_ event: SearchEvent?) -> Bool {\n    guard let event = event else {\n        return false\n    }\n    let searchType = event.getSearchType()\n    return !event.getSearchQuery().isEmpty ||\n        searchType == .sharedFilter ||\n        searchType == .favoriteSearch ||\n        searchType == .recentlyModifiedSearch\n}\n```"
    },
    {
        "method_name": "syncAndCheckFiles",
        "method_code": "rivate void syncAndCheckFiles(Collection<OCFile> files) {\n        for (OCFile file : files) {\n            // Get the remaining space on device\n            long availableSpaceOnDevice = FileOperationsHelper.getAvailableSpaceOnDevice();\n\n            if (FileStorageUtils.checkIfEnoughSpace(file)) {\n                mContainerActivity.getFileOperationsHelper().syncFile(file);\n            } else {\n                showSpaceErrorDialog(file, availableSpaceOnDevice);\n            }\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled syncAndCheckFiles from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: syncAndCheckFiles\n\n        Method Code: rivate void syncAndCheckFiles(Collection<OCFile> files) {\n        for (OCFile file : files) {\n            // Get the remaining space on device\n            long availableSpaceOnDevice = FileOperationsHelper.getAvailableSpaceOnDevice();\n\n            if (FileStorageUtils.checkIfEnoughSpace(file)) {\n                mContainerActivity.getFileOperationsHelper().syncFile(file);\n            } else {\n                showSpaceErrorDialog(file, availableSpaceOnDevice);\n            }\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func syncAndCheckFiles(files: [OCFile]) {\n    for file in files {\n        let availableSpaceOnDevice = FileOperationsHelper.getAvailableSpaceOnDevice()\n        \n        if FileStorageUtils.checkIfEnoughSpace(file) {\n            mContainerActivity.getFileOperationsHelper().syncFile(file)\n        } else {\n            showSpaceErrorDialog(file: file, availableSpaceOnDevice: availableSpaceOnDevice)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "showSpaceErrorDialog",
        "method_code": "rivate void showSpaceErrorDialog(OCFile file, long availableSpaceOnDevice) {\n        SyncFileNotEnoughSpaceDialogFragment dialog =\n            SyncFileNotEnoughSpaceDialogFragment.newInstance(file, availableSpaceOnDevice);\n        dialog.setTargetFragment(this, NOT_ENOUGH_SPACE_FRAG_REQUEST_CODE);\n\n        if (getFragmentManager() != null) {\n            dialog.show(getFragmentManager(), ConfirmationDialogFragment.FTAG_CONFIRMATION);\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled showSpaceErrorDialog from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: showSpaceErrorDialog\n\n        Method Code: rivate void showSpaceErrorDialog(OCFile file, long availableSpaceOnDevice) {\n        SyncFileNotEnoughSpaceDialogFragment dialog =\n            SyncFileNotEnoughSpaceDialogFragment.newInstance(file, availableSpaceOnDevice);\n        dialog.setTargetFragment(this, NOT_ENOUGH_SPACE_FRAG_REQUEST_CODE);\n\n        if (getFragmentManager() != null) {\n            dialog.show(getFragmentManager(), ConfirmationDialogFragment.FTAG_CONFIRMATION);\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func showSpaceErrorDialog(file: OCFile, availableSpaceOnDevice: Int64) {\n    let dialog = SyncFileNotEnoughSpaceDialogFragment.newInstance(file: file, availableSpaceOnDevice: availableSpaceOnDevice)\n    dialog.setTargetFragment(self, requestCode: NOT_ENOUGH_SPACE_FRAG_REQUEST_CODE)\n\n    if let fragmentManager = self.fragmentManager {\n        dialog.show(fragmentManager, tag: ConfirmationDialogFragment.FTAG_CONFIRMATION)\n    }\n}\n```"
    },
    {
        "method_name": "isLoading",
        "method_code": "Override\n    public boolean isLoading() {\n        return false;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isLoading from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: isLoading\n\n        Method Code: Override\n    public boolean isLoading() {\n        return false;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func isLoading() -> Bool {\n    return false\n}\n```"
    },
    {
        "method_name": "setFabVisible",
        "method_code": "ublic void setFabVisible(final boolean visible) {\n        if (mFabMain == null) {\n            // is not available in FolderPickerActivity\n            return;\n        }\n\n        if (getActivity() != null) {\n            getActivity().runOnUiThread(() -> {\n                if (visible) {\n                    mFabMain.show();\n                    viewThemeUtils.material.themeFAB(mFabMain);\n                } else {\n                    mFabMain.hide();\n                }\n\n                showFabWithBehavior(visible);\n            });\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setFabVisible from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: setFabVisible\n\n        Method Code: ublic void setFabVisible(final boolean visible) {\n        if (mFabMain == null) {\n            // is not available in FolderPickerActivity\n            return;\n        }\n\n        if (getActivity() != null) {\n            getActivity().runOnUiThread(() -> {\n                if (visible) {\n                    mFabMain.show();\n                    viewThemeUtils.material.themeFAB(mFabMain);\n                } else {\n                    mFabMain.hide();\n                }\n\n                showFabWithBehavior(visible);\n            });\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setFabVisible(_ visible: Bool) {\n    guard let mFabMain = mFabMain else {\n        // is not available in FolderPickerActivity\n        return\n    }\n\n    DispatchQueue.main.async {\n        if visible {\n            mFabMain.show()\n            viewThemeUtils.material.themeFAB(mFabMain)\n        } else {\n            mFabMain.hide()\n        }\n\n        showFabWithBehavior(visible)\n    }\n}\n```"
    },
    {
        "method_name": "showFabWithBehavior",
        "method_code": "rivate void showFabWithBehavior(boolean visible) {\n        ViewGroup.LayoutParams layoutParams = mFabMain.getLayoutParams();\n        if (layoutParams instanceof CoordinatorLayout.LayoutParams) {\n            CoordinatorLayout.Behavior coordinatorLayoutBehavior =\n                ((CoordinatorLayout.LayoutParams) layoutParams).getBehavior();\n            if (coordinatorLayoutBehavior instanceof HideBottomViewOnScrollBehavior) {\n                @SuppressWarnings(\"unchecked\")\n                HideBottomViewOnScrollBehavior<FloatingActionButton> behavior =\n                    (HideBottomViewOnScrollBehavior<FloatingActionButton>) coordinatorLayoutBehavior;\n                if (visible) {\n                    behavior.slideUp(mFabMain);\n                } else {\n                    behavior.slideDown(mFabMain);\n                }\n            }\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled showFabWithBehavior from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: showFabWithBehavior\n\n        Method Code: rivate void showFabWithBehavior(boolean visible) {\n        ViewGroup.LayoutParams layoutParams = mFabMain.getLayoutParams();\n        if (layoutParams instanceof CoordinatorLayout.LayoutParams) {\n            CoordinatorLayout.Behavior coordinatorLayoutBehavior =\n                ((CoordinatorLayout.LayoutParams) layoutParams).getBehavior();\n            if (coordinatorLayoutBehavior instanceof HideBottomViewOnScrollBehavior) {\n                @SuppressWarnings(\"unchecked\")\n                HideBottomViewOnScrollBehavior<FloatingActionButton> behavior =\n                    (HideBottomViewOnScrollBehavior<FloatingActionButton>) coordinatorLayoutBehavior;\n                if (visible) {\n                    behavior.slideUp(mFabMain);\n                } else {\n                    behavior.slideDown(mFabMain);\n                }\n            }\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func showFabWithBehavior(visible: Bool) {\n    if let layoutParams = mFabMain.layoutParams as? CoordinatorLayout.LayoutParams {\n        if let coordinatorLayoutBehavior = layoutParams.behavior as? HideBottomViewOnScrollBehavior<FloatingActionButton> {\n            if visible {\n                coordinatorLayoutBehavior.slideUp(mFabMain)\n            } else {\n                coordinatorLayoutBehavior.slideDown(mFabMain)\n            }\n        }\n    }\n}\n```"
    },
    {
        "method_name": "setFabEnabled",
        "method_code": "ublic void setFabEnabled(final boolean enabled) {\n        if (mFabMain == null) {\n            // is not available in FolderPickerActivity\n            return;\n        }\n\n        if (getActivity() != null) {\n            getActivity().runOnUiThread(() -> {\n                if (enabled) {\n                    mFabMain.setEnabled(true);\n                    viewThemeUtils.material.themeFAB(mFabMain);\n                } else {\n                    mFabMain.setEnabled(false);\n                    viewThemeUtils.material.themeFAB(mFabMain);\n                }\n            });\n        }\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setFabEnabled from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: setFabEnabled\n\n        Method Code: ublic void setFabEnabled(final boolean enabled) {\n        if (mFabMain == null) {\n            // is not available in FolderPickerActivity\n            return;\n        }\n\n        if (getActivity() != null) {\n            getActivity().runOnUiThread(() -> {\n                if (enabled) {\n                    mFabMain.setEnabled(true);\n                    viewThemeUtils.material.themeFAB(mFabMain);\n                } else {\n                    mFabMain.setEnabled(false);\n                    viewThemeUtils.material.themeFAB(mFabMain);\n                }\n            });\n        }\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setFabEnabled(_ enabled: Bool) {\n    guard let mFabMain = mFabMain else {\n        // is not available in FolderPickerActivity\n        return\n    }\n\n    DispatchQueue.main.async {\n        if enabled {\n            mFabMain.isEnabled = true\n            viewThemeUtils.material.themeFAB(mFabMain)\n        } else {\n            mFabMain.isEnabled = false\n            viewThemeUtils.material.themeFAB(mFabMain)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "isEmpty",
        "method_code": "ublic boolean isEmpty() {\n        return mAdapter == null || mAdapter.isEmpty();\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isEmpty from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: isEmpty\n\n        Method Code: ublic boolean isEmpty() {\n        return mAdapter == null || mAdapter.isEmpty();\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc isEmpty() -> Bool {\n    return mAdapter == nil || mAdapter!.isEmpty\n}\n```"
    },
    {
        "method_name": "isAPKorAAB",
        "method_code": "rivate boolean isAPKorAAB(Set<OCFile> files) {\n        for (OCFile file : files) {\n            if (file.isAPKorAAB()) {\n                return true;\n            }\n        }\n        return false;\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isAPKorAAB from OCFileListFragment.java into Swift.\n\n        Input:\n\n        Method Name: isAPKorAAB\n\n        Method Code: rivate boolean isAPKorAAB(Set<OCFile> files) {\n        for (OCFile file : files) {\n            if (file.isAPKorAAB()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func isAPKorAAB(files: Set<OCFile>) -> Bool {\n    for file in files {\n        if file.isAPKorAAB() {\n            return true\n        }\n    }\n    return false\n}\n```"
    }
]