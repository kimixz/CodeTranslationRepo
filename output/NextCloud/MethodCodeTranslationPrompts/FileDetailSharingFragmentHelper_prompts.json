[
    {
        "method_name": "setupSearchView",
        "method_code": "public static void setupSearchView(@Nullable SearchManager searchManager, SearchView searchView,\n                                       ComponentName componentName) {\n        if (searchManager == null) {\n            searchView.setVisibility(View.GONE);\n            return;\n        }\n\n        // assumes parent activity is the searchable activity\n        searchView.setSearchableInfo(searchManager.getSearchableInfo(componentName));\n\n        // do not iconify the widget; expand it by default\n        searchView.setIconifiedByDefault(false);\n\n        // avoid fullscreen with softkeyboard\n        searchView.setImeOptions(EditorInfo.IME_FLAG_NO_EXTRACT_UI);\n\n        searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\n            @Override\n            public boolean onQueryTextSubmit(String query) {\n                // return true to prevent the query from being processed;\n                return true;\n            }\n\n            @Override\n            public boolean onQueryTextChange(String newText) {\n                // leave it for the parent listener in the hierarchy / default behaviour\n                return false;\n            }\n        });\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setupSearchView from FileDetailSharingFragmentHelper.java into Swift.\n\n        Input:\n\n        Method Name: setupSearchView\n\n        Method Code: public static void setupSearchView(@Nullable SearchManager searchManager, SearchView searchView,\n                                       ComponentName componentName) {\n        if (searchManager == null) {\n            searchView.setVisibility(View.GONE);\n            return;\n        }\n\n        // assumes parent activity is the searchable activity\n        searchView.setSearchableInfo(searchManager.getSearchableInfo(componentName));\n\n        // do not iconify the widget; expand it by default\n        searchView.setIconifiedByDefault(false);\n\n        // avoid fullscreen with softkeyboard\n        searchView.setImeOptions(EditorInfo.IME_FLAG_NO_EXTRACT_UI);\n\n        searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\n            @Override\n            public boolean onQueryTextSubmit(String query) {\n                // return true to prevent the query from being processed;\n                return true;\n            }\n\n            @Override\n            public boolean onQueryTextChange(String newText) {\n                // leave it for the parent listener in the hierarchy / default behaviour\n                return false;\n            }\n        });\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport UIKit\n\nclass FileDetailSharingFragmentHelper {\n    static func setupSearchView(searchManager: UISearchController?, searchView: UISearchBar, componentName: String) {\n        guard let searchManager = searchManager else {\n            searchView.isHidden = true\n            return\n        }\n\n        // assumes parent activity is the searchable activity\n        // Note: In Swift, you would typically set up the search controller with a search results updater\n        // searchView.searchableInfo = searchManager.getSearchableInfo(componentName)\n\n        // do not iconify the widget; expand it by default\n        searchView.showsCancelButton = false\n\n        // avoid fullscreen with softkeyboard\n        searchView.inputAccessoryView = nil\n\n        searchView.delegate = SearchViewDelegate()\n    }\n}\n\nclass SearchViewDelegate: NSObject, UISearchBarDelegate {\n    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {\n        // return true to prevent the query from being processed;\n        searchBar.resignFirstResponder()\n    }\n\n    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) -> Bool {\n        // leave it for the parent listener in the hierarchy / default behaviour\n        return false\n    }\n}\n```"
    },
    {
        "method_name": "onQueryTextSubmit",
        "method_code": "@Override\n            public boolean onQueryTextSubmit(String query) {\n                // return true to prevent the query from being processed;\n                return true;\n            }",
        "prompt": "\n        Please translate the following Java (Android) method titled onQueryTextSubmit from FileDetailSharingFragmentHelper.java into Swift.\n\n        Input:\n\n        Method Name: onQueryTextSubmit\n\n        Method Code: @Override\n            public boolean onQueryTextSubmit(String query) {\n                // return true to prevent the query from being processed;\n                return true;\n            }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onQueryTextSubmit(_ query: String) -> Bool {\n    // return true to prevent the query from being processed;\n    return true\n}\n```"
    },
    {
        "method_name": "onQueryTextChange",
        "method_code": "@Override\n            public boolean onQueryTextChange(String newText) {\n                // leave it for the parent listener in the hierarchy / default behaviour\n                return false;\n            }",
        "prompt": "\n        Please translate the following Java (Android) method titled onQueryTextChange from FileDetailSharingFragmentHelper.java into Swift.\n\n        Input:\n\n        Method Name: onQueryTextChange\n\n        Method Code: @Override\n            public boolean onQueryTextChange(String newText) {\n                // leave it for the parent listener in the hierarchy / default behaviour\n                return false;\n            }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onQueryTextChange(_ newText: String) -> Bool {\n    // leave it for the parent listener in the hierarchy / default behaviour\n    return false\n}\n```"
    },
    {
        "method_name": "isPublicShareDisabled",
        "method_code": "public static boolean isPublicShareDisabled(OCCapability capabilities) {\n        return capabilities != null && capabilities.getFilesSharingPublicEnabled().isFalse();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled isPublicShareDisabled from FileDetailSharingFragmentHelper.java into Swift.\n\n        Input:\n\n        Method Name: isPublicShareDisabled\n\n        Method Code: public static boolean isPublicShareDisabled(OCCapability capabilities) {\n        return capabilities != null && capabilities.getFilesSharingPublicEnabled().isFalse();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func isPublicShareDisabled(capabilities: OCCapability?) -> Bool {\n    return capabilities != nil && capabilities!.getFilesSharingPublicEnabled().isFalse()\n}\n```"
    }
]