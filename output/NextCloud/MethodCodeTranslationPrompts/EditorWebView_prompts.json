[
    {
        "method_name": "loadUrl",
        "method_code": "protected void loadUrl(String url) {\n        onUrlLoaded(url);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled loadUrl from EditorWebView.java into Swift.\n\n        Input:\n\n        Method Name: loadUrl\n\n        Method Code: protected void loadUrl(String url) {\n        onUrlLoaded(url);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc loadUrl(_ url: String) {\n    onUrlLoaded(url)\n}\n```"
    },
    {
        "method_name": "hideLoading",
        "method_code": "protected void hideLoading() {\n        binding.thumbnail.setVisibility(View.GONE);\n        binding.filename.setVisibility(View.GONE);\n        binding.progressBar2.setVisibility(View.GONE);\n        getWebView().setVisibility(View.VISIBLE);\n\n        if (loadingSnackbar != null) {\n            loadingSnackbar.dismiss();\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled hideLoading from EditorWebView.java into Swift.\n\n        Input:\n\n        Method Name: hideLoading\n\n        Method Code: protected void hideLoading() {\n        binding.thumbnail.setVisibility(View.GONE);\n        binding.filename.setVisibility(View.GONE);\n        binding.progressBar2.setVisibility(View.GONE);\n        getWebView().setVisibility(View.VISIBLE);\n\n        if (loadingSnackbar != null) {\n            loadingSnackbar.dismiss();\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc hideLoading() {\n    binding.thumbnail.isHidden = true\n    binding.filename.isHidden = true\n    binding.progressBar2.isHidden = true\n    getWebView().isHidden = false\n\n    loadingSnackbar?.dismiss()\n}\n```"
    },
    {
        "method_name": "onUrlLoaded",
        "method_code": "public void onUrlLoaded(String loadedUrl) {\n        this.url = loadedUrl;\n\n        if (!url.isEmpty()) {\n            new WebViewUtil(getApplicationContext()).setProxyKKPlus(this.getWebView());\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n            }\n            this.getWebView().loadUrl(url);\n\n            new Handler().postDelayed(() -> {\n                if (this.getWebView().getVisibility() != View.VISIBLE) {\n                    Snackbar snackbar = DisplayUtils.createSnackbar(findViewById(android.R.id.content),\n                                                                    R.string.timeout_richDocuments, Snackbar.LENGTH_INDEFINITE)\n                        .setAction(R.string.common_cancel, v -> closeView());\n\n                    viewThemeUtils.material.themeSnackbar(snackbar);\n                    setLoadingSnackbar(snackbar);\n                    snackbar.show();\n                }\n            }, 10 * 1000);\n        } else {\n            Toast.makeText(getApplicationContext(),\n                           R.string.richdocuments_failed_to_load_document, Toast.LENGTH_LONG).show();\n            finish();\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onUrlLoaded from EditorWebView.java into Swift.\n\n        Input:\n\n        Method Name: onUrlLoaded\n\n        Method Code: public void onUrlLoaded(String loadedUrl) {\n        this.url = loadedUrl;\n\n        if (!url.isEmpty()) {\n            new WebViewUtil(getApplicationContext()).setProxyKKPlus(this.getWebView());\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n            }\n            this.getWebView().loadUrl(url);\n\n            new Handler().postDelayed(() -> {\n                if (this.getWebView().getVisibility() != View.VISIBLE) {\n                    Snackbar snackbar = DisplayUtils.createSnackbar(findViewById(android.R.id.content),\n                                                                    R.string.timeout_richDocuments, Snackbar.LENGTH_INDEFINITE)\n                        .setAction(R.string.common_cancel, v -> closeView());\n\n                    viewThemeUtils.material.themeSnackbar(snackbar);\n                    setLoadingSnackbar(snackbar);\n                    snackbar.show();\n                }\n            }, 10 * 1000);\n        } else {\n            Toast.makeText(getApplicationContext(),\n                           R.string.richdocuments_failed_to_load_document, Toast.LENGTH_LONG).show();\n            finish();\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onUrlLoaded(loadedUrl: String) {\n    self.url = loadedUrl\n\n    if !url.isEmpty {\n        WebViewUtil(applicationContext: getApplicationContext()).setProxyKKPlus(webView: self.getWebView())\n        Thread.sleep(forTimeInterval: 1.0)\n        self.getWebView().load(URLRequest(url: URL(string: url)!))\n\n        DispatchQueue.main.asyncAfter(deadline: .now() + 10.0) {\n            if self.getWebView().isHidden {\n                let snackbar = DisplayUtils.createSnackbar(view: self.view, message: R.string.timeout_richDocuments, duration: .indefinite)\n                snackbar.setAction(R.string.common_cancel) { _ in\n                    self.closeView()\n                }\n                viewThemeUtils.material.themeSnackbar(snackbar: snackbar)\n                self.setLoadingSnackbar(snackbar: snackbar)\n                snackbar.show()\n            }\n        }\n    } else {\n        Toast.makeText(getApplicationContext(), R.string.richdocuments_failed_to_load_document, Toast.LENGTH_LONG).show()\n        finish()\n    }\n}\n```"
    },
    {
        "method_name": "closeView",
        "method_code": "public void closeView() {\n        getWebView().destroy();\n        finish();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled closeView from EditorWebView.java into Swift.\n\n        Input:\n\n        Method Name: closeView\n\n        Method Code: public void closeView() {\n        getWebView().destroy();\n        finish();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc closeView() {\n    getWebView().destroy()\n    finish()\n}\n```"
    },
    {
        "method_name": "reload",
        "method_code": "public void reload() {\n        if (getWebView().getVisibility() != View.VISIBLE) {\n            return;\n        }\n\n        Optional<User> user = getUser();\n        if (!user.isPresent()) {\n            return;\n        }\n\n        OCFile file = getFile();\n        if (file != null) {\n            TextEditorLoadUrlTask task = new TextEditorLoadUrlTask(this, user.get(), file, editorUtils);\n            task.execute();\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled reload from EditorWebView.java into Swift.\n\n        Input:\n\n        Method Name: reload\n\n        Method Code: public void reload() {\n        if (getWebView().getVisibility() != View.VISIBLE) {\n            return;\n        }\n\n        Optional<User> user = getUser();\n        if (!user.isPresent()) {\n            return;\n        }\n\n        OCFile file = getFile();\n        if (file != null) {\n            TextEditorLoadUrlTask task = new TextEditorLoadUrlTask(this, user.get(), file, editorUtils);\n            task.execute();\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc reload() {\n    guard getWebView().visibility == .visible else {\n        return\n    }\n\n    guard let user = getUser() else {\n        return\n    }\n\n    if let file = getFile() {\n        let task = TextEditorLoadUrlTask(editorWebView: self, user: user, file: file, editorUtils: editorUtils)\n        task.execute()\n    }\n}\n```"
    },
    {
        "method_name": "bindView",
        "method_code": "@Override\n    protected void bindView() {\n        binding = RichdocumentsWebviewBinding.inflate(getLayoutInflater());\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled bindView from EditorWebView.java into Swift.\n\n        Input:\n\n        Method Name: bindView\n\n        Method Code: @Override\n    protected void bindView() {\n        binding = RichdocumentsWebviewBinding.inflate(getLayoutInflater());\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func bindView() {\n    binding = RichdocumentsWebviewBinding.inflate(getLayoutInflater())\n}\n```"
    },
    {
        "method_name": "postOnCreate",
        "method_code": "@Override\n    protected void postOnCreate() {\n        super.postOnCreate();\n\n        getWebView().setWebChromeClient(new WebChromeClient() {\n            final EditorWebView activity = EditorWebView.this;\n\n            @Override\n            public boolean onShowFileChooser(WebView webView, ValueCallback<Uri[]> filePathCallback,\n                                             FileChooserParams fileChooserParams) {\n                if (uploadMessage != null) {\n                    uploadMessage.onReceiveValue(null);\n                    uploadMessage = null;\n                }\n\n                activity.uploadMessage = filePathCallback;\n\n                Intent intent = fileChooserParams.createIntent();\n                intent.setType(\"image/*\");\n                intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);\n                try {\n                    activity.startActivityForResult(intent, REQUEST_LOCAL_FILE);\n                } catch (ActivityNotFoundException e) {\n                    uploadMessage = null;\n                    Toast.makeText(getBaseContext(), \"Cannot open file chooser\", Toast.LENGTH_LONG).show();\n                    return false;\n                }\n\n                return true;\n            }\n        });\n\n        setFile(IntentExtensionsKt.getParcelableArgument(getIntent(), ExternalSiteWebView.EXTRA_FILE, OCFile.class));\n\n        if (getFile() == null) {\n            Toast.makeText(getApplicationContext(),\n                           R.string.richdocuments_failed_to_load_document, Toast.LENGTH_LONG).show();\n            finish();\n        }\n\n        if (getFile() != null) {\n            fileName = getFile().getFileName();\n        }\n\n        Optional<User> user = getUser();\n        if (!user.isPresent()) {\n            finish();\n            return;\n        }\n        initLoadingScreen(user.get());\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled postOnCreate from EditorWebView.java into Swift.\n\n        Input:\n\n        Method Name: postOnCreate\n\n        Method Code: @Override\n    protected void postOnCreate() {\n        super.postOnCreate();\n\n        getWebView().setWebChromeClient(new WebChromeClient() {\n            final EditorWebView activity = EditorWebView.this;\n\n            @Override\n            public boolean onShowFileChooser(WebView webView, ValueCallback<Uri[]> filePathCallback,\n                                             FileChooserParams fileChooserParams) {\n                if (uploadMessage != null) {\n                    uploadMessage.onReceiveValue(null);\n                    uploadMessage = null;\n                }\n\n                activity.uploadMessage = filePathCallback;\n\n                Intent intent = fileChooserParams.createIntent();\n                intent.setType(\"image/*\");\n                intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);\n                try {\n                    activity.startActivityForResult(intent, REQUEST_LOCAL_FILE);\n                } catch (ActivityNotFoundException e) {\n                    uploadMessage = null;\n                    Toast.makeText(getBaseContext(), \"Cannot open file chooser\", Toast.LENGTH_LONG).show();\n                    return false;\n                }\n\n                return true;\n            }\n        });\n\n        setFile(IntentExtensionsKt.getParcelableArgument(getIntent(), ExternalSiteWebView.EXTRA_FILE, OCFile.class));\n\n        if (getFile() == null) {\n            Toast.makeText(getApplicationContext(),\n                           R.string.richdocuments_failed_to_load_document, Toast.LENGTH_LONG).show();\n            finish();\n        }\n\n        if (getFile() != null) {\n            fileName = getFile().getFileName();\n        }\n\n        Optional<User> user = getUser();\n        if (!user.isPresent()) {\n            finish();\n            return;\n        }\n        initLoadingScreen(user.get());\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func postOnCreate() {\n    super.postOnCreate()\n\n    webView?.webChromeClient = WebChromeClientWrapper(activity: self)\n\n    if let file = getIntent().getParcelableExtra(ExternalSiteWebView.EXTRA_FILE) as? OCFile {\n        setFile(file)\n    }\n\n    if getFile() == nil {\n        Toast.makeText(applicationContext, R.string.richdocuments_failed_to_load_document, Toast.LENGTH_LONG).show()\n        finish()\n    }\n\n    if let file = getFile() {\n        fileName = file.fileName\n    }\n\n    guard let user = getUser() else {\n        finish()\n        return\n    }\n    initLoadingScreen(user)\n}\n\nclass WebChromeClientWrapper: NSObject, WebChromeClient {\n    weak var activity: EditorWebView?\n\n    init(activity: EditorWebView) {\n        self.activity = activity\n    }\n\n    func onShowFileChooser(_ webView: WebView, filePathCallback: ValueCallback<[Uri]>, fileChooserParams: FileChooserParams) -> Bool {\n        if let uploadMessage = activity?.uploadMessage {\n            uploadMessage.onReceiveValue(nil)\n            activity?.uploadMessage = nil\n        }\n\n        activity?.uploadMessage = filePathCallback\n\n        let intent = fileChooserParams.createIntent()\n        intent.type = \"image/*\"\n        intent.addFlags([.clearTop, .singleTop])\n        do {\n            try activity?.startActivityForResult(intent, REQUEST_LOCAL_FILE)\n        } catch {\n            activity?.uploadMessage = nil\n            Toast.makeText(activity?.baseContext, \"Cannot open file chooser\", Toast.LENGTH_LONG).show()\n            return false\n        }\n\n        return true\n    }\n}\n```"
    },
    {
        "method_name": "onShowFileChooser",
        "method_code": "@Override\n            public boolean onShowFileChooser(WebView webView, ValueCallback<Uri[]> filePathCallback,\n                                             FileChooserParams fileChooserParams) {\n                if (uploadMessage != null) {\n                    uploadMessage.onReceiveValue(null);\n                    uploadMessage = null;\n                }\n\n                activity.uploadMessage = filePathCallback;\n\n                Intent intent = fileChooserParams.createIntent();\n                intent.setType(\"image/*\");\n                intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);\n                try {\n                    activity.startActivityForResult(intent, REQUEST_LOCAL_FILE);\n                } catch (ActivityNotFoundException e) {\n                    uploadMessage = null;\n                    Toast.makeText(getBaseContext(), \"Cannot open file chooser\", Toast.LENGTH_LONG).show();\n                    return false;\n                }\n\n                return true;\n            }",
        "prompt": "\n        Please translate the following Java (Android) method titled onShowFileChooser from EditorWebView.java into Swift.\n\n        Input:\n\n        Method Name: onShowFileChooser\n\n        Method Code: @Override\n            public boolean onShowFileChooser(WebView webView, ValueCallback<Uri[]> filePathCallback,\n                                             FileChooserParams fileChooserParams) {\n                if (uploadMessage != null) {\n                    uploadMessage.onReceiveValue(null);\n                    uploadMessage = null;\n                }\n\n                activity.uploadMessage = filePathCallback;\n\n                Intent intent = fileChooserParams.createIntent();\n                intent.setType(\"image/*\");\n                intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);\n                try {\n                    activity.startActivityForResult(intent, REQUEST_LOCAL_FILE);\n                } catch (ActivityNotFoundException e) {\n                    uploadMessage = null;\n                    Toast.makeText(getBaseContext(), \"Cannot open file chooser\", Toast.LENGTH_LONG).show();\n                    return false;\n                }\n\n                return true;\n            }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onShowFileChooser(webView: WKWebView, filePathCallback: @escaping ([URL]?) -> Void, fileChooserParams: UIDocumentPickerViewController) -> Bool {\n    if uploadMessage != nil {\n        uploadMessage?(nil)\n        uploadMessage = nil\n    }\n\n    activity.uploadMessage = filePathCallback\n\n    let documentPicker = UIDocumentPickerViewController(documentTypes: [\"public.image\"], in: .import)\n    documentPicker.delegate = activity\n    documentPicker.modalPresentationStyle = .formSheet\n\n    do {\n        activity.present(documentPicker, animated: true, completion: nil)\n    } catch {\n        uploadMessage = nil\n        let alert = UIAlertController(title: \"Error\", message: \"Cannot open file chooser\", preferredStyle: .alert)\n        alert.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))\n        activity.present(alert, animated: true, completion: nil)\n        return false\n    }\n\n    return true\n}\n```"
    },
    {
        "method_name": "onActivityResult",
        "method_code": "@Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        if (RESULT_OK != resultCode) {\n            if (requestCode == REQUEST_LOCAL_FILE) {\n                this.uploadMessage.onReceiveValue(null);\n                this.uploadMessage = null;\n            }\n            return;\n        }\n\n        handleActivityResult(requestCode, resultCode, data);\n\n        super.onActivityResult(requestCode, resultCode, data);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onActivityResult from EditorWebView.java into Swift.\n\n        Input:\n\n        Method Name: onActivityResult\n\n        Method Code: @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        if (RESULT_OK != resultCode) {\n            if (requestCode == REQUEST_LOCAL_FILE) {\n                this.uploadMessage.onReceiveValue(null);\n                this.uploadMessage = null;\n            }\n            return;\n        }\n\n        handleActivityResult(requestCode, resultCode, data);\n\n        super.onActivityResult(requestCode, resultCode, data);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n}\n\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n}\n\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n}\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n}\n\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n}\n\noverride func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n}\n\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n}\n\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews"
    },
    {
        "method_name": "handleActivityResult",
        "method_code": "protected void handleActivityResult(int requestCode, int resultCode, Intent data) {\n        if (requestCode == REQUEST_LOCAL_FILE) {\n            handleLocalFile(data, resultCode);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled handleActivityResult from EditorWebView.java into Swift.\n\n        Input:\n\n        Method Name: handleActivityResult\n\n        Method Code: protected void handleActivityResult(int requestCode, int resultCode, Intent data) {\n        if (requestCode == REQUEST_LOCAL_FILE) {\n            handleLocalFile(data, resultCode);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc handleActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n    if requestCode == REQUEST_LOCAL_FILE {\n        handleLocalFile(data: data, resultCode: resultCode)\n    }\n}\n```"
    },
    {
        "method_name": "handleLocalFile",
        "method_code": "protected void handleLocalFile(Intent data, int resultCode) {\n        if (uploadMessage == null) {\n            return;\n        }\n\n        if (data.getClipData() == null) {\n            // one file\n            uploadMessage.onReceiveValue(WebChromeClient.FileChooserParams.parseResult(resultCode, data));    \n        } else {\n            ArrayList<Uri> uris = new ArrayList<>();\n            // multiple files\n            for (int i = 0; i < data.getClipData().getItemCount(); i++) {\n                ClipData.Item item = data.getClipData().getItemAt(i);\n                uris.add(item.getUri());\n            }\n            \n            uploadMessage.onReceiveValue(uris.toArray(new Uri[0]));\n        }\n\n        uploadMessage = null;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled handleLocalFile from EditorWebView.java into Swift.\n\n        Input:\n\n        Method Name: handleLocalFile\n\n        Method Code: protected void handleLocalFile(Intent data, int resultCode) {\n        if (uploadMessage == null) {\n            return;\n        }\n\n        if (data.getClipData() == null) {\n            // one file\n            uploadMessage.onReceiveValue(WebChromeClient.FileChooserParams.parseResult(resultCode, data));    \n        } else {\n            ArrayList<Uri> uris = new ArrayList<>();\n            // multiple files\n            for (int i = 0; i < data.getClipData().getItemCount(); i++) {\n                ClipData.Item item = data.getClipData().getItemAt(i);\n                uris.add(item.getUri());\n            }\n            \n            uploadMessage.onReceiveValue(uris.toArray(new Uri[0]));\n        }\n\n        uploadMessage = null;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc handleLocalFile(data: Intent?, resultCode: Int) {\n    guard let uploadMessage = uploadMessage else {\n        return\n    }\n\n    if data?.clipData == nil {\n        // one file\n        uploadMessage.onReceiveValue(WebChromeClient.FileChooserParams.parseResult(resultCode, data))\n    } else {\n        var uris: [URL] = []\n        // multiple files\n        if let clipData = data?.clipData {\n            for i in 0..<clipData.itemCount {\n                let item = clipData.item(at: i)\n                if let uri = item?.uri {\n                    uris.append(uri)\n                }\n            }\n        }\n        \n        uploadMessage.onReceiveValue(uris)\n    }\n\n    self.uploadMessage = nil\n}\n```"
    },
    {
        "method_name": "getWebView",
        "method_code": "protected WebView getWebView() {\n        return binding.webView;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getWebView from EditorWebView.java into Swift.\n\n        Input:\n\n        Method Name: getWebView\n\n        Method Code: protected WebView getWebView() {\n        return binding.webView;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getWebView() -> WKWebView {\n    return binding.webView\n}\n```"
    },
    {
        "method_name": "getRootView",
        "method_code": "protected View getRootView() {\n        return binding.getRoot();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getRootView from EditorWebView.java into Swift.\n\n        Input:\n\n        Method Name: getRootView\n\n        Method Code: protected View getRootView() {\n        return binding.getRoot();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getRootView() -> UIView {\n    return binding.root\n}\n```"
    },
    {
        "method_name": "showToolbarByDefault",
        "method_code": "protected boolean showToolbarByDefault() {\n        return false;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showToolbarByDefault from EditorWebView.java into Swift.\n\n        Input:\n\n        Method Name: showToolbarByDefault\n\n        Method Code: protected boolean showToolbarByDefault() {\n        return false;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc showToolbarByDefault() -> Bool {\n    return false\n}\n```"
    },
    {
        "method_name": "initLoadingScreen",
        "method_code": "protected void initLoadingScreen(final User user) {\n        setThumbnailView(user);\n        binding.filename.setText(fileName);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled initLoadingScreen from EditorWebView.java into Swift.\n\n        Input:\n\n        Method Name: initLoadingScreen\n\n        Method Code: protected void initLoadingScreen(final User user) {\n        setThumbnailView(user);\n        binding.filename.setText(fileName);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc initLoadingScreen(user: User) {\n    setThumbnailView(user: user)\n    binding.filename.text = fileName\n}\n```"
    },
    {
        "method_name": "openShareDialog",
        "method_code": "private void openShareDialog() {\n        Intent intent = new Intent(this, ShareActivity.class);\n        intent.putExtra(FileActivity.EXTRA_FILE, getFile());\n        intent.putExtra(FileActivity.EXTRA_USER, getUser().orElseThrow(RuntimeException::new));\n        startActivity(intent);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled openShareDialog from EditorWebView.java into Swift.\n\n        Input:\n\n        Method Name: openShareDialog\n\n        Method Code: private void openShareDialog() {\n        Intent intent = new Intent(this, ShareActivity.class);\n        intent.putExtra(FileActivity.EXTRA_FILE, getFile());\n        intent.putExtra(FileActivity.EXTRA_USER, getUser().orElseThrow(RuntimeException::new));\n        startActivity(intent);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func openShareDialog() {\n    let intent = Intent(context: self, activity: ShareActivity.self)\n    intent.putExtra(name: FileActivity.EXTRA_FILE, value: getFile())\n    intent.putExtra(name: FileActivity.EXTRA_USER, value: getUser() ?? { fatalError() }())\n    startActivity(intent)\n}\n```"
    },
    {
        "method_name": "setThumbnailView",
        "method_code": "protected void setThumbnailView(final User user) {\n        // Todo minimize: only icon by mimetype\n        OCFile file = getFile();\n        if (file.isFolder()) {\n            boolean isAutoUploadFolder = SyncedFolderProvider.isAutoUploadFolder(syncedFolderProvider, file, user);\n\n            Integer overlayIconId = file.getFileOverlayIconId(isAutoUploadFolder);\n            LayerDrawable drawable = MimeTypeUtil.getFolderIcon(preferences.isDarkModeEnabled(), overlayIconId, this, viewThemeUtils);\n            binding.thumbnail.setImageDrawable(drawable);\n        } else {\n            if ((MimeTypeUtil.isImage(file) || MimeTypeUtil.isVideo(file)) && file.getRemoteId() != null) {\n                // Thumbnail in cache?\n                Bitmap thumbnail = ThumbnailsCacheManager.getBitmapFromDiskCache(\n                    ThumbnailsCacheManager.PREFIX_THUMBNAIL + file.getRemoteId());\n\n                if (thumbnail != null && !file.isUpdateThumbnailNeeded()) {\n                    if (MimeTypeUtil.isVideo(file)) {\n                        Bitmap withOverlay = ThumbnailsCacheManager.addVideoOverlay(thumbnail, this);\n                        binding.thumbnail.setImageBitmap(withOverlay);\n                    } else {\n                        binding.thumbnail.setImageBitmap(thumbnail);\n                    }\n                }\n\n                if (\"image/png\".equalsIgnoreCase(file.getMimeType())) {\n                    binding.thumbnail.setBackgroundColor(getResources().getColor(R.color.bg_default, getTheme()));\n                }\n            } else {\n                Drawable icon = MimeTypeUtil.getFileTypeIcon(file.getMimeType(),\n                                                             file.getFileName(),\n                                                             getApplicationContext(),\n                                                             viewThemeUtils);\n                binding.thumbnail.setImageDrawable(icon);\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setThumbnailView from EditorWebView.java into Swift.\n\n        Input:\n\n        Method Name: setThumbnailView\n\n        Method Code: protected void setThumbnailView(final User user) {\n        // Todo minimize: only icon by mimetype\n        OCFile file = getFile();\n        if (file.isFolder()) {\n            boolean isAutoUploadFolder = SyncedFolderProvider.isAutoUploadFolder(syncedFolderProvider, file, user);\n\n            Integer overlayIconId = file.getFileOverlayIconId(isAutoUploadFolder);\n            LayerDrawable drawable = MimeTypeUtil.getFolderIcon(preferences.isDarkModeEnabled(), overlayIconId, this, viewThemeUtils);\n            binding.thumbnail.setImageDrawable(drawable);\n        } else {\n            if ((MimeTypeUtil.isImage(file) || MimeTypeUtil.isVideo(file)) && file.getRemoteId() != null) {\n                // Thumbnail in cache?\n                Bitmap thumbnail = ThumbnailsCacheManager.getBitmapFromDiskCache(\n                    ThumbnailsCacheManager.PREFIX_THUMBNAIL + file.getRemoteId());\n\n                if (thumbnail != null && !file.isUpdateThumbnailNeeded()) {\n                    if (MimeTypeUtil.isVideo(file)) {\n                        Bitmap withOverlay = ThumbnailsCacheManager.addVideoOverlay(thumbnail, this);\n                        binding.thumbnail.setImageBitmap(withOverlay);\n                    } else {\n                        binding.thumbnail.setImageBitmap(thumbnail);\n                    }\n                }\n\n                if (\"image/png\".equalsIgnoreCase(file.getMimeType())) {\n                    binding.thumbnail.setBackgroundColor(getResources().getColor(R.color.bg_default, getTheme()));\n                }\n            } else {\n                Drawable icon = MimeTypeUtil.getFileTypeIcon(file.getMimeType(),\n                                                             file.getFileName(),\n                                                             getApplicationContext(),\n                                                             viewThemeUtils);\n                binding.thumbnail.setImageDrawable(icon);\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setThumbnailView(user: User) {\n    // Todo minimize: only icon by mimetype\n    let file = getFile()\n    if file.isFolder() {\n        let isAutoUploadFolder = SyncedFolderProvider.isAutoUploadFolder(syncedFolderProvider: syncedFolderProvider, file: file, user: user)\n        \n        let overlayIconId = file.getFileOverlayIconId(isAutoUploadFolder: isAutoUploadFolder)\n        let drawable = MimeTypeUtil.getFolderIcon(isDarkModeEnabled: preferences.isDarkModeEnabled(), overlayIconId: overlayIconId, context: self, viewThemeUtils: viewThemeUtils)\n        binding.thumbnail.image = drawable\n    } else {\n        if (MimeTypeUtil.isImage(file: file) || MimeTypeUtil.isVideo(file: file)), let remoteId = file.getRemoteId() {\n            // Thumbnail in cache?\n            if let thumbnail = ThumbnailsCacheManager.getBitmapFromDiskCache(key: ThumbnailsCacheManager.PREFIX_THUMBNAIL + remoteId) {\n                if !file.isUpdateThumbnailNeeded() {\n                    if MimeTypeUtil.isVideo(file: file) {\n                        let withOverlay = ThumbnailsCacheManager.addVideoOverlay(thumbnail: thumbnail, context: self)\n                        binding.thumbnail.image = withOverlay\n                    } else {\n                        binding.thumbnail.image = thumbnail\n                    }\n                }\n            }\n            \n            if file.getMimeType().caseInsensitiveCompare(\"image/png\") == .orderedSame {\n                binding.thumbnail.backgroundColor = UIColor(named: \"bg_default\") ?? UIColor.clear\n            }\n        } else {\n            let icon = MimeTypeUtil.getFileTypeIcon(mimeType: file.getMimeType(), fileName: file.getFileName(), context: getApplicationContext(), viewThemeUtils: viewThemeUtils)\n            binding.thumbnail.image = icon\n        }\n    }\n}\n```"
    },
    {
        "method_name": "downloadFile",
        "method_code": "protected void downloadFile(Uri url) {\n        DownloadManager downloadmanager = (DownloadManager) getSystemService(Context.DOWNLOAD_SERVICE);\n\n        if (downloadmanager == null) {\n            DisplayUtils.showSnackMessage(getWebView(), getString(R.string.failed_to_download));\n            return;\n        }\n\n        DownloadManager.Request request = new DownloadManager.Request(url);\n        request.allowScanningByMediaScanner();\n        request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);\n\n        downloadmanager.enqueue(request);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled downloadFile from EditorWebView.java into Swift.\n\n        Input:\n\n        Method Name: downloadFile\n\n        Method Code: protected void downloadFile(Uri url) {\n        DownloadManager downloadmanager = (DownloadManager) getSystemService(Context.DOWNLOAD_SERVICE);\n\n        if (downloadmanager == null) {\n            DisplayUtils.showSnackMessage(getWebView(), getString(R.string.failed_to_download));\n            return;\n        }\n\n        DownloadManager.Request request = new DownloadManager.Request(url);\n        request.allowScanningByMediaScanner();\n        request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);\n\n        downloadmanager.enqueue(request);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport UIKit\n\nfunc downloadFile(url: URL) {\n    guard let downloadManager = UIApplication.shared.delegate as? AppDelegate else {\n        DisplayUtils.showSnackMessage(webView: getWebView(), message: NSLocalizedString(\"failed_to_download\", comment: \"\"))\n        return\n    }\n\n    let request = URLRequest(url: url)\n    request.allowsCellularAccess = true\n    request.networkServiceType = .default\n\n    downloadManager.enqueue(request)\n}\n```"
    },
    {
        "method_name": "setLoadingSnackbar",
        "method_code": "public void setLoadingSnackbar(Snackbar loadingSnackbar) {\n        this.loadingSnackbar = loadingSnackbar;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setLoadingSnackbar from EditorWebView.java into Swift.\n\n        Input:\n\n        Method Name: setLoadingSnackbar\n\n        Method Code: public void setLoadingSnackbar(Snackbar loadingSnackbar) {\n        this.loadingSnackbar = loadingSnackbar;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setLoadingSnackbar(_ loadingSnackbar: Snackbar) {\n    self.loadingSnackbar = loadingSnackbar\n}\n```"
    },
    {
        "method_name": "close",
        "method_code": "@JavascriptInterface\n        public void close() {\n            runOnUiThread(EditorWebView.this::closeView);\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled close from EditorWebView.java into Swift.\n\n        Input:\n\n        Method Name: close\n\n        Method Code: @JavascriptInterface\n        public void close() {\n            runOnUiThread(EditorWebView.this::closeView);\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\n@objc func close() {\n    DispatchQueue.main.async {\n        self.closeView()\n    }\n}\n```"
    },
    {
        "method_name": "share",
        "method_code": "@JavascriptInterface\n        public void share() {\n            openShareDialog();\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled share from EditorWebView.java into Swift.\n\n        Input:\n\n        Method Name: share\n\n        Method Code: @JavascriptInterface\n        public void share() {\n            openShareDialog();\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc share() {\n    openShareDialog()\n}\n```"
    },
    {
        "method_name": "loaded",
        "method_code": "@JavascriptInterface\n        public void loaded() {\n            runOnUiThread(EditorWebView.this::hideLoading);\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled loaded from EditorWebView.java into Swift.\n\n        Input:\n\n        Method Name: loaded\n\n        Method Code: @JavascriptInterface\n        public void loaded() {\n            runOnUiThread(EditorWebView.this::hideLoading);\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\n@objc func loaded() {\n    DispatchQueue.main.async {\n        self.hideLoading()\n    }\n}\n```"
    },
    {
        "method_name": "reload",
        "method_code": "@JavascriptInterface\n        public void reload() {\n            EditorWebView.this.reload();\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled reload from EditorWebView.java into Swift.\n\n        Input:\n\n        Method Name: reload\n\n        Method Code: @JavascriptInterface\n        public void reload() {\n            EditorWebView.this.reload();\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\n@objc func reload() {\n    self.reload()\n}\n```"
    }
]