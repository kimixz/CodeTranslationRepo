[
    {
        "method_name": "noScheme",
        "method_code": "@Test\n        public void noScheme() {\n            // GIVEN\n            //      input URL has no scheme\n            String url = \"host.net/index.php/apps/ABC/def/?\";\n\n            // WHEN\n            //      scheme is normalized\n            String normalized = AuthenticatorUrlUtils.INSTANCE.normalizeScheme(url);\n\n            // THEN\n            //      input is returned unchanged\n            Assert.assertSame(url, normalized);\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled noScheme from AuthenticatorUrlUtilsTest.java into Swift.\n\n        Input:\n\n        Method Name: noScheme\n\n        Method Code: @Test\n        public void noScheme() {\n            // GIVEN\n            //      input URL has no scheme\n            String url = \"host.net/index.php/apps/ABC/def/?\";\n\n            // WHEN\n            //      scheme is normalized\n            String normalized = AuthenticatorUrlUtils.INSTANCE.normalizeScheme(url);\n\n            // THEN\n            //      input is returned unchanged\n            Assert.assertSame(url, normalized);\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc testNoScheme() {\n    // GIVEN\n    //      input URL has no scheme\n    let url = \"host.net/index.php/apps/ABC/def/?\"\n\n    // WHEN\n    //      scheme is normalized\n    let normalized = AuthenticatorUrlUtils.shared.normalizeScheme(url)\n\n    // THEN\n    //      input is returned unchanged\n    XCTAssertEqual(url, normalized)\n}\n```"
    },
    {
        "method_name": "lowercaseScheme",
        "method_code": "@Test\n        public void lowercaseScheme() {\n            // GIVEN\n            //      input URL has scheme\n            //      scheme is lowercase\n            String url = \"https://host.net/index.php/ABC/def/?\";\n\n            // WHEN\n            //      scheme is normalized\n            String normalized = AuthenticatorUrlUtils.INSTANCE.normalizeScheme(url);\n\n            // THEN\n            //      output is equal\n            Assert.assertEquals(url, normalized);\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled lowercaseScheme from AuthenticatorUrlUtilsTest.java into Swift.\n\n        Input:\n\n        Method Name: lowercaseScheme\n\n        Method Code: @Test\n        public void lowercaseScheme() {\n            // GIVEN\n            //      input URL has scheme\n            //      scheme is lowercase\n            String url = \"https://host.net/index.php/ABC/def/?\";\n\n            // WHEN\n            //      scheme is normalized\n            String normalized = AuthenticatorUrlUtils.INSTANCE.normalizeScheme(url);\n\n            // THEN\n            //      output is equal\n            Assert.assertEquals(url, normalized);\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport XCTest\n\nclass AuthenticatorUrlUtilsTest: XCTestCase {\n\n    func testLowercaseScheme() {\n        // GIVEN\n        //      input URL has scheme\n        //      scheme is lowercase\n        let url = \"https://host.net/index.php/ABC/def/?\"\n\n        // WHEN\n        //      scheme is normalized\n        let normalized = AuthenticatorUrlUtils.shared.normalizeScheme(url)\n\n        // THEN\n        //      output is equal\n        XCTAssertEqual(url, normalized)\n    }\n}\n```"
    },
    {
        "method_name": "uppercaseScheme",
        "method_code": "@Test\n        public void uppercaseScheme() {\n            // GIVEN\n            //      input URL has scheme\n            //      scheme has uppercase characters\n            String mixedCaseUrl = \"HTtps://host.net/index.php/ABC/def/?\";\n\n            // WHEN\n            //      scheme is normalized\n            String normalized = AuthenticatorUrlUtils.INSTANCE.normalizeScheme(mixedCaseUrl);\n\n            // THEN\n            //      scheme has been lower-cased\n            //      remaining URL part is left unchanged\n            String expectedUrl = \"https://host.net/index.php/ABC/def/?\";\n            Assert.assertEquals(expectedUrl, normalized);\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled uppercaseScheme from AuthenticatorUrlUtilsTest.java into Swift.\n\n        Input:\n\n        Method Name: uppercaseScheme\n\n        Method Code: @Test\n        public void uppercaseScheme() {\n            // GIVEN\n            //      input URL has scheme\n            //      scheme has uppercase characters\n            String mixedCaseUrl = \"HTtps://host.net/index.php/ABC/def/?\";\n\n            // WHEN\n            //      scheme is normalized\n            String normalized = AuthenticatorUrlUtils.INSTANCE.normalizeScheme(mixedCaseUrl);\n\n            // THEN\n            //      scheme has been lower-cased\n            //      remaining URL part is left unchanged\n            String expectedUrl = \"https://host.net/index.php/ABC/def/?\";\n            Assert.assertEquals(expectedUrl, normalized);\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport XCTest\n\nclass AuthenticatorUrlUtilsTest: XCTestCase {\n\n    func testUppercaseScheme() {\n        // GIVEN\n        //      input URL has scheme\n        //      scheme has uppercase characters\n        let mixedCaseUrl = \"HTtps://host.net/index.php/ABC/def/?\"\n\n        // WHEN\n        //      scheme is normalized\n        let normalized = AuthenticatorUrlUtils.instance.normalizeScheme(mixedCaseUrl)\n\n        // THEN\n        //      scheme has been lower-cased\n        //      remaining URL part is left unchanged\n        let expectedUrl = \"https://host.net/index.php/ABC/def/?\"\n        XCTAssertEqual(expectedUrl, normalized)\n    }\n}\n```"
    },
    {
        "method_name": "emptyInput",
        "method_code": "@Test\n        public void emptyInput() {\n            // GIVEN\n            //      input URL is empty\n            String emptyUrl = \"\";\n\n            // WHEN\n            //      scheme is normalized\n            String normalized = AuthenticatorUrlUtils.INSTANCE.normalizeScheme(emptyUrl);\n\n            // THEN\n            //      output is empty\n            Assert.assertEquals(\"\", normalized);\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled emptyInput from AuthenticatorUrlUtilsTest.java into Swift.\n\n        Input:\n\n        Method Name: emptyInput\n\n        Method Code: @Test\n        public void emptyInput() {\n            // GIVEN\n            //      input URL is empty\n            String emptyUrl = \"\";\n\n            // WHEN\n            //      scheme is normalized\n            String normalized = AuthenticatorUrlUtils.INSTANCE.normalizeScheme(emptyUrl);\n\n            // THEN\n            //      output is empty\n            Assert.assertEquals(\"\", normalized);\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc testEmptyInput() {\n    // GIVEN\n    //      input URL is empty\n    let emptyUrl = \"\"\n\n    // WHEN\n    //      scheme is normalized\n    let normalized = AuthenticatorUrlUtils.instance.normalizeScheme(emptyUrl)\n\n    // THEN\n    //      output is empty\n    XCTAssertEqual(\"\", normalized)\n}\n```"
    },
    {
        "method_name": "ipAddress",
        "method_code": "@Test\n        public void ipAddress() {\n            // GIVEN\n            //      input URL is an IP address\n            String url = \"127.0.0.1\";\n\n            // WHEN\n            //      scheme is normalized\n            String normalized = AuthenticatorUrlUtils.INSTANCE.normalizeScheme(url);\n\n            // THEN\n            //      output is equal\n            Assert.assertEquals(url, normalized);\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled ipAddress from AuthenticatorUrlUtilsTest.java into Swift.\n\n        Input:\n\n        Method Name: ipAddress\n\n        Method Code: @Test\n        public void ipAddress() {\n            // GIVEN\n            //      input URL is an IP address\n            String url = \"127.0.0.1\";\n\n            // WHEN\n            //      scheme is normalized\n            String normalized = AuthenticatorUrlUtils.INSTANCE.normalizeScheme(url);\n\n            // THEN\n            //      output is equal\n            Assert.assertEquals(url, normalized);\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc testIpAddress() {\n    // GIVEN\n    //      input URL is an IP address\n    let url = \"127.0.0.1\"\n\n    // WHEN\n    //      scheme is normalized\n    let normalized = AuthenticatorUrlUtils.instance.normalizeScheme(url)\n\n    // THEN\n    //      output is equal\n    XCTAssertEqual(url, normalized)\n}\n```"
    },
    {
        "method_name": "withPort",
        "method_code": "@Test\n        public void withPort() {\n            // GIVEN\n            //      input URL has a port\n            String url = \"host.net:8080/index.php/apps/ABC/def/?\";\n\n            // WHEN\n            //      scheme is normalized\n            String normalized = AuthenticatorUrlUtils.INSTANCE.normalizeScheme(url);\n\n            // THEN\n            //      output is equal\n            Assert.assertEquals(url, normalized);\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled withPort from AuthenticatorUrlUtilsTest.java into Swift.\n\n        Input:\n\n        Method Name: withPort\n\n        Method Code: @Test\n        public void withPort() {\n            // GIVEN\n            //      input URL has a port\n            String url = \"host.net:8080/index.php/apps/ABC/def/?\";\n\n            // WHEN\n            //      scheme is normalized\n            String normalized = AuthenticatorUrlUtils.INSTANCE.normalizeScheme(url);\n\n            // THEN\n            //      output is equal\n            Assert.assertEquals(url, normalized);\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport XCTest\n\nclass AuthenticatorUrlUtilsTest: XCTestCase {\n\n    func testWithPort() {\n        // GIVEN\n        //      input URL has a port\n        let url = \"host.net:8080/index.php/apps/ABC/def/?\"\n\n        // WHEN\n        //      scheme is normalized\n        let normalized = AuthenticatorUrlUtils.shared.normalizeScheme(url)\n\n        // THEN\n        //      output is equal\n        XCTAssertEqual(url, normalized)\n    }\n}\n```"
    },
    {
        "method_name": "ipAddressWithPort",
        "method_code": "@Test\n        public void ipAddressWithPort() {\n            // GIVEN\n            //      input URL is an IP address\n            //      input URL has a port\n            String url = \"127.0.0.1:8080/index.php/apps/ABC/def/?\";\n\n            // WHEN\n            //      scheme is normalized\n            String normalized = AuthenticatorUrlUtils.INSTANCE.normalizeScheme(url);\n\n            // THEN\n            //      output is equal\n            Assert.assertEquals(url, normalized);\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled ipAddressWithPort from AuthenticatorUrlUtilsTest.java into Swift.\n\n        Input:\n\n        Method Name: ipAddressWithPort\n\n        Method Code: @Test\n        public void ipAddressWithPort() {\n            // GIVEN\n            //      input URL is an IP address\n            //      input URL has a port\n            String url = \"127.0.0.1:8080/index.php/apps/ABC/def/?\";\n\n            // WHEN\n            //      scheme is normalized\n            String normalized = AuthenticatorUrlUtils.INSTANCE.normalizeScheme(url);\n\n            // THEN\n            //      output is equal\n            Assert.assertEquals(url, normalized);\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc testIpAddressWithPort() {\n    // GIVEN\n    //      input URL is an IP address\n    //      input URL has a port\n    let url = \"127.0.0.1:8080/index.php/apps/ABC/def/?\"\n\n    // WHEN\n    //      scheme is normalized\n    let normalized = AuthenticatorUrlUtils.instance.normalizeScheme(url)\n\n    // THEN\n    //      output is equal\n    XCTAssertEqual(url, normalized)\n}\n```"
    }
]