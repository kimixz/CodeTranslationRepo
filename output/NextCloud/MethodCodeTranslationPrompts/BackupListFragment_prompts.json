[
    {
        "method_name": "newInstance",
        "method_code": "public static BackupListFragment newInstance(OCFile file, User user) {\n        BackupListFragment frag = new BackupListFragment();\n        Bundle arguments = new Bundle();\n        arguments.putParcelable(FILE_NAME, file);\n        arguments.putParcelable(USER, user);\n        frag.setArguments(arguments);\n\n        return frag;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled newInstance from BackupListFragment.java into Swift.\n\n        Input:\n\n        Method Name: newInstance\n\n        Method Code: public static BackupListFragment newInstance(OCFile file, User user) {\n        BackupListFragment frag = new BackupListFragment();\n        Bundle arguments = new Bundle();\n        arguments.putParcelable(FILE_NAME, file);\n        arguments.putParcelable(USER, user);\n        frag.setArguments(arguments);\n\n        return frag;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func newInstance(file: OCFile, user: User) -> BackupListFragment {\n    let frag = BackupListFragment()\n    let arguments = Bundle()\n    arguments.setValue(file, forKey: FILE_NAME)\n    arguments.setValue(user, forKey: USER)\n    frag.setArguments(arguments)\n    \n    return frag\n}\n```"
    },
    {
        "method_name": "newInstance",
        "method_code": "public static BackupListFragment newInstance(OCFile[] files, User user) {\n        BackupListFragment frag = new BackupListFragment();\n        Bundle arguments = new Bundle();\n        arguments.putParcelableArray(FILE_NAMES, files);\n        arguments.putParcelable(USER, user);\n        frag.setArguments(arguments);\n\n        return frag;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled newInstance from BackupListFragment.java into Swift.\n\n        Input:\n\n        Method Name: newInstance\n\n        Method Code: public static BackupListFragment newInstance(OCFile[] files, User user) {\n        BackupListFragment frag = new BackupListFragment();\n        Bundle arguments = new Bundle();\n        arguments.putParcelableArray(FILE_NAMES, files);\n        arguments.putParcelable(USER, user);\n        frag.setArguments(arguments);\n\n        return frag;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func newInstance(files: [OCFile], user: User) -> BackupListFragment {\n    let frag = BackupListFragment()\n    let arguments = Bundle()\n    arguments.setValue(files, forKey: FILE_NAMES)\n    arguments.setValue(user, forKey: USER)\n    frag.setArguments(arguments)\n    \n    return frag\n}\n```"
    },
    {
        "method_name": "onCreateOptionsMenu",
        "method_code": "@Override\n    public void onCreateOptionsMenu(@NonNull Menu menu, @NonNull MenuInflater inflater) {\n        super.onCreateOptionsMenu(menu, inflater);\n        inflater.inflate(R.menu.fragment_contact_list, menu);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreateOptionsMenu from BackupListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onCreateOptionsMenu\n\n        Method Code: @Override\n    public void onCreateOptionsMenu(@NonNull Menu menu, @NonNull MenuInflater inflater) {\n        super.onCreateOptionsMenu(menu, inflater);\n        inflater.inflate(R.menu.fragment_contact_list, menu);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    let menu = UIMenu(title: \"\", children: [])\n    let menuItem = UIAction(title: \"Menu Item\", handler: { _ in })\n    menu.children.append(menuItem)\n    navigationItem.rightBarButtonItem = UIBarButtonItem(title: \"Menu\", menu: menu)\n}\n```"
    },
    {
        "method_name": "onCreateView",
        "method_code": "@Override\n    public View onCreateView(@NonNull final LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n\n        binding = BackuplistFragmentBinding.inflate(inflater, container, false);\n        View view = binding.getRoot();\n\n        setHasOptionsMenu(true);\n\n        ContactsPreferenceActivity contactsPreferenceActivity = (ContactsPreferenceActivity) getActivity();\n\n        if (contactsPreferenceActivity != null) {\n            ActionBar actionBar = contactsPreferenceActivity.getSupportActionBar();\n            if (actionBar != null) {\n                viewThemeUtils.files.themeActionBar(requireContext(), actionBar, R.string.actionbar_calendar_contacts_restore);\n                actionBar.setDisplayHomeAsUpEnabled(true);\n            }\n            contactsPreferenceActivity.setDrawerIndicatorEnabled(false);\n        }\n\n        if (savedInstanceState == null) {\n            listAdapter = new BackupListAdapter(accountManager,\n                                                clientFactory,\n                                                new HashSet<>(),\n                                                new HashMap<>(),\n                                                this,\n                                                requireContext(),\n                                                viewThemeUtils);\n        } else {\n            HashMap<String, Integer> checkedCalendarItems = new HashMap<>();\n            String[] checkedCalendarItemsArray = savedInstanceState.getStringArray(CHECKED_CALENDAR_ITEMS_ARRAY_KEY);\n            if (checkedCalendarItemsArray != null) {\n                for (String checkedItem : checkedCalendarItemsArray) {\n                    checkedCalendarItems.put(checkedItem, -1);\n                }\n            }\n            if (checkedCalendarItems.size() > 0) {\n                showRestoreButton(true);\n            }\n\n            HashSet<Integer> checkedContactsItems = new HashSet<>();\n            int[] checkedContactsItemsArray = savedInstanceState.getIntArray(CHECKED_CONTACTS_ITEMS_ARRAY_KEY);\n            if (checkedContactsItemsArray != null) {\n                for (int checkedItem : checkedContactsItemsArray) {\n                    checkedContactsItems.add(checkedItem);\n                }\n            }\n            if (checkedContactsItems.size() > 0) {\n                showRestoreButton(true);\n            }\n\n            listAdapter = new BackupListAdapter(accountManager,\n                                                clientFactory,\n                                                checkedContactsItems,\n                                                checkedCalendarItems,\n                                                this,\n                                                requireContext(),\n                                                viewThemeUtils);\n        }\n\n        binding.list.setAdapter(listAdapter);\n        binding.list.setLayoutManager(new LinearLayoutManager(getContext()));\n\n        Bundle arguments = getArguments();\n        if (arguments == null) {\n            return view;\n        }\n\n        if (BundleExtensionsKt.getParcelableArgument(arguments, FILE_NAME, OCFile.class) != null) {\n            ocFiles.add(BundleExtensionsKt.getParcelableArgument(arguments, FILE_NAME, OCFile.class));\n        } else if (arguments.getParcelableArray(FILE_NAMES) != null) {\n            for (Parcelable file : arguments.getParcelableArray(FILE_NAMES)) {\n                ocFiles.add((OCFile) file);\n            }\n        } else {\n            return view;\n        }\n\n        User user = BundleExtensionsKt.getParcelableArgument(getArguments(), USER, User.class);\n        fileDownloader = new TransferManagerConnection(getActivity(), user);\n        fileDownloader.registerTransferListener(this::onDownloadUpdate);\n        fileDownloader.bind();\n\n        for (OCFile file : ocFiles) {\n            if (!file.isDown()) {\n                Request request = new DownloadRequest(user, file);\n                fileDownloader.enqueue(request);\n            }\n\n            if (MimeTypeUtil.isVCard(file) && file.isDown()) {\n                setFile(file);\n                loadContactsTask = new LoadContactsTask(this, file);\n                loadContactsTask.execute();\n            }\n\n            if (MimeTypeUtil.isCalendar(file) && file.isDown()) {\n                showLoadingMessage(false);\n                listAdapter.addCalendar(file);\n            }\n        }\n\n        binding.restoreSelected.setOnClickListener(v -> {\n            if (checkAndAskForCalendarWritePermission()) {\n                importCalendar();\n            }\n\n            if (listAdapter.getCheckedContactsIntArray().length > 0 && checkAndAskForContactsWritePermission()) {\n                importContacts(selectedAccount);\n                return;\n            }\n\n            Snackbar\n                .make(\n                    binding.list,\n                    R.string.contacts_preferences_import_scheduled,\n                    Snackbar.LENGTH_LONG\n                     )\n                .show();\n\n            closeFragment();\n        });\n\n        viewThemeUtils.material.colorMaterialButtonPrimaryBorderless(binding.restoreSelected);\n\n        return view;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreateView from BackupListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onCreateView\n\n        Method Code: @Override\n    public View onCreateView(@NonNull final LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n\n        binding = BackuplistFragmentBinding.inflate(inflater, container, false);\n        View view = binding.getRoot();\n\n        setHasOptionsMenu(true);\n\n        ContactsPreferenceActivity contactsPreferenceActivity = (ContactsPreferenceActivity) getActivity();\n\n        if (contactsPreferenceActivity != null) {\n            ActionBar actionBar = contactsPreferenceActivity.getSupportActionBar();\n            if (actionBar != null) {\n                viewThemeUtils.files.themeActionBar(requireContext(), actionBar, R.string.actionbar_calendar_contacts_restore);\n                actionBar.setDisplayHomeAsUpEnabled(true);\n            }\n            contactsPreferenceActivity.setDrawerIndicatorEnabled(false);\n        }\n\n        if (savedInstanceState == null) {\n            listAdapter = new BackupListAdapter(accountManager,\n                                                clientFactory,\n                                                new HashSet<>(),\n                                                new HashMap<>(),\n                                                this,\n                                                requireContext(),\n                                                viewThemeUtils);\n        } else {\n            HashMap<String, Integer> checkedCalendarItems = new HashMap<>();\n            String[] checkedCalendarItemsArray = savedInstanceState.getStringArray(CHECKED_CALENDAR_ITEMS_ARRAY_KEY);\n            if (checkedCalendarItemsArray != null) {\n                for (String checkedItem : checkedCalendarItemsArray) {\n                    checkedCalendarItems.put(checkedItem, -1);\n                }\n            }\n            if (checkedCalendarItems.size() > 0) {\n                showRestoreButton(true);\n            }\n\n            HashSet<Integer> checkedContactsItems = new HashSet<>();\n            int[] checkedContactsItemsArray = savedInstanceState.getIntArray(CHECKED_CONTACTS_ITEMS_ARRAY_KEY);\n            if (checkedContactsItemsArray != null) {\n                for (int checkedItem : checkedContactsItemsArray) {\n                    checkedContactsItems.add(checkedItem);\n                }\n            }\n            if (checkedContactsItems.size() > 0) {\n                showRestoreButton(true);\n            }\n\n            listAdapter = new BackupListAdapter(accountManager,\n                                                clientFactory,\n                                                checkedContactsItems,\n                                                checkedCalendarItems,\n                                                this,\n                                                requireContext(),\n                                                viewThemeUtils);\n        }\n\n        binding.list.setAdapter(listAdapter);\n        binding.list.setLayoutManager(new LinearLayoutManager(getContext()));\n\n        Bundle arguments = getArguments();\n        if (arguments == null) {\n            return view;\n        }\n\n        if (BundleExtensionsKt.getParcelableArgument(arguments, FILE_NAME, OCFile.class) != null) {\n            ocFiles.add(BundleExtensionsKt.getParcelableArgument(arguments, FILE_NAME, OCFile.class));\n        } else if (arguments.getParcelableArray(FILE_NAMES) != null) {\n            for (Parcelable file : arguments.getParcelableArray(FILE_NAMES)) {\n                ocFiles.add((OCFile) file);\n            }\n        } else {\n            return view;\n        }\n\n        User user = BundleExtensionsKt.getParcelableArgument(getArguments(), USER, User.class);\n        fileDownloader = new TransferManagerConnection(getActivity(), user);\n        fileDownloader.registerTransferListener(this::onDownloadUpdate);\n        fileDownloader.bind();\n\n        for (OCFile file : ocFiles) {\n            if (!file.isDown()) {\n                Request request = new DownloadRequest(user, file);\n                fileDownloader.enqueue(request);\n            }\n\n            if (MimeTypeUtil.isVCard(file) && file.isDown()) {\n                setFile(file);\n                loadContactsTask = new LoadContactsTask(this, file);\n                loadContactsTask.execute();\n            }\n\n            if (MimeTypeUtil.isCalendar(file) && file.isDown()) {\n                showLoadingMessage(false);\n                listAdapter.addCalendar(file);\n            }\n        }\n\n        binding.restoreSelected.setOnClickListener(v -> {\n            if (checkAndAskForCalendarWritePermission()) {\n                importCalendar();\n            }\n\n            if (listAdapter.getCheckedContactsIntArray().length > 0 && checkAndAskForContactsWritePermission()) {\n                importContacts(selectedAccount);\n                return;\n            }\n\n            Snackbar\n                .make(\n                    binding.list,\n                    R.string.contacts_preferences_import_scheduled,\n                    Snackbar.LENGTH_LONG\n                     )\n                .show();\n\n            closeFragment();\n        });\n\n        viewThemeUtils.material.colorMaterialButtonPrimaryBorderless(binding.restoreSelected);\n\n        return view;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n\n    binding = BackuplistFragmentBinding.inflate(inflater, container: container, savedInstanceState: savedInstanceState)\n    let view = binding.root\n\n    setHasOptionsMenu(true)\n\n    if let contactsPreferenceActivity = activity as? ContactsPreferenceActivity {\n        if let actionBar = contactsPreferenceActivity.supportActionBar {\n            viewThemeUtils.files.themeActionBar(context: requireContext(), actionBar: actionBar, titleRes: R.string.actionbar_calendar_contacts_restore)\n            actionBar.setDisplayHomeAsUpEnabled(true)\n        }\n        contactsPreferenceActivity.setDrawerIndicatorEnabled(false)\n    }\n\n    if savedInstanceState == nil {\n        listAdapter = BackupListAdapter(accountManager: accountManager,\n                                        clientFactory: clientFactory,\n                                        checkedContactsItems: Set(),\n                                        checkedCalendarItems: [String: Int](),\n                                        fragment: self,\n                                        context: requireContext(),\n                                        viewThemeUtils: viewThemeUtils)\n    } else {\n        var checkedCalendarItems = [String: Int]()\n        if let checkedCalendarItemsArray = savedInstanceState?.stringArray(forKey: CHECKED_CALENDAR_ITEMS_ARRAY_KEY) {\n            for checkedItem in checkedCalendarItemsArray {\n                checkedCalendarItems[checkedItem] = -1\n            }\n        }\n        if !checkedCalendarItems.isEmpty {\n            showRestoreButton(true)\n        }\n\n        var checkedContactsItems = Set<Int>()\n        if let checkedContactsItemsArray = savedInstanceState?.intArray(forKey: CHECKED_CONTACTS_ITEMS_ARRAY_KEY) {\n            for checkedItem in checkedContactsItemsArray {\n                checkedContactsItems.insert(checkedItem)\n            }\n        }\n        if !checkedContactsItems.isEmpty {\n            showRestoreButton(true)\n        }\n\n        listAdapter = BackupListAdapter(accountManager: accountManager,\n                                        clientFactory: clientFactory,\n                                        checkedContactsItems: checkedContactsItems,\n                                        checkedCalendarItems: checkedCalendarItems,\n                                        fragment: self,\n                                        context: requireContext(),\n                                        viewThemeUtils: viewThemeUtils)\n    }\n\n    binding.list.adapter = listAdapter\n    binding.list.layoutManager = LinearLayoutManager(context: getContext())\n\n    guard let arguments = getArguments() else {\n        return view\n    }\n\n    if let file = arguments.getParcelableArgument(key: FILE_NAME, type: OCFile.self) {\n        ocFiles.append(file)\n    } else if let files = arguments.getParcelableArray(forKey: FILE_NAMES) as? [OCFile] {\n        ocFiles.append(contentsOf: files)\n    } else {\n        return view\n    }\n\n    if let user = arguments.getParcelableArgument(key: USER, type: User.self) {\n        fileDownloader = TransferManagerConnection(activity: getActivity(), user: user)\n        fileDownloader?.registerTransferListener { [weak self] in\n            self?.onDownloadUpdate()\n        }\n        fileDownloader?.bind()\n    }\n\n    for file in ocFiles {\n        if !file.isDown {\n            let request = DownloadRequest(user: user, file: file)\n            fileDownloader?.enqueue(request)\n        }\n\n        if MimeTypeUtil.isVCard(file) && file.isDown {\n            setFile(file)\n            loadContactsTask = LoadContactsTask(fragment: self, file: file)\n            loadContactsTask?.execute()\n        }\n\n        if MimeTypeUtil.isCalendar(file) && file.isDown {\n            showLoadingMessage(false)\n            listAdapter?.addCalendar(file)\n        }\n    }\n\n    binding.restoreSelected.setOnClickListener { [weak self] _ in\n        guard let self = self else { return }\n        if self.checkAndAskForCalendarWritePermission() {\n            self.importCalendar()\n        }\n\n        if self.listAdapter?.getCheckedContactsIntArray().count ?? 0 > 0 && self.checkAndAskForContactsWritePermission() {\n            self.importContacts(selectedAccount: self.selectedAccount)\n            return\n        }\n\n        Snackbar.make(self.binding.list, R.string.contacts_preferences_import_scheduled, duration: .long).show()\n\n        self.closeFragment()\n    }\n\n    viewThemeUtils.material.colorMaterialButtonPrimaryBorderless(button: binding.restoreSelected)\n\n    return view\n}\n```"
    },
    {
        "method_name": "onDetach",
        "method_code": "@Override\n    public void onDetach() {\n        super.onDetach();\n        if (fileDownloader != null) {\n            fileDownloader.unbind();\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onDetach from BackupListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onDetach\n\n        Method Code: @Override\n    public void onDetach() {\n        super.onDetach();\n        if (fileDownloader != null) {\n            fileDownloader.unbind();\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n    fileDownloader?.unbind()\n}\n```"
    },
    {
        "method_name": "onSaveInstanceState",
        "method_code": "@Override\n    public void onSaveInstanceState(@NonNull Bundle outState) {\n        super.onSaveInstanceState(outState);\n        outState.putStringArray(CHECKED_CALENDAR_ITEMS_ARRAY_KEY, listAdapter.getCheckedCalendarStringArray());\n        outState.putIntArray(CHECKED_CONTACTS_ITEMS_ARRAY_KEY, listAdapter.getCheckedContactsIntArray());\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onSaveInstanceState from BackupListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onSaveInstanceState\n\n        Method Code: @Override\n    public void onSaveInstanceState(@NonNull Bundle outState) {\n        super.onSaveInstanceState(outState);\n        outState.putStringArray(CHECKED_CALENDAR_ITEMS_ARRAY_KEY, listAdapter.getCheckedCalendarStringArray());\n        outState.putIntArray(CHECKED_CONTACTS_ITEMS_ARRAY_KEY, listAdapter.getCheckedContactsIntArray());\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func encodeRestorableState(with coder: NSCoder) {\n    super.encodeRestorableState(with: coder)\n    coder.encode(listAdapter.getCheckedCalendarStringArray(), forKey: CHECKED_CALENDAR_ITEMS_ARRAY_KEY)\n    coder.encode(listAdapter.getCheckedContactsIntArray(), forKey: CHECKED_CONTACTS_ITEMS_ARRAY_KEY)\n}\n```"
    },
    {
        "method_name": "onMessageEvent",
        "method_code": "@Subscribe(threadMode = ThreadMode.MAIN)\n    public void onMessageEvent(VCardToggleEvent event) {\n        if (event.getShowRestoreButton()) {\n            binding.contactlistRestoreSelectedContainer.setVisibility(View.VISIBLE);\n        } else {\n            binding.contactlistRestoreSelectedContainer.setVisibility(View.GONE);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onMessageEvent from BackupListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onMessageEvent\n\n        Method Code: @Subscribe(threadMode = ThreadMode.MAIN)\n    public void onMessageEvent(VCardToggleEvent event) {\n        if (event.getShowRestoreButton()) {\n            binding.contactlistRestoreSelectedContainer.setVisibility(View.VISIBLE);\n        } else {\n            binding.contactlistRestoreSelectedContainer.setVisibility(View.GONE);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\n@objc func onMessageEvent(_ event: VCardToggleEvent) {\n    if event.getShowRestoreButton() {\n        binding.contactlistRestoreSelectedContainer.isHidden = false\n    } else {\n        binding.contactlistRestoreSelectedContainer.isHidden = true\n    }\n}\n```"
    },
    {
        "method_name": "showRestoreButton",
        "method_code": "public void showRestoreButton(boolean show) {\n        binding.contactlistRestoreSelectedContainer.setVisibility(show ? View.VISIBLE : View.GONE);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showRestoreButton from BackupListFragment.java into Swift.\n\n        Input:\n\n        Method Name: showRestoreButton\n\n        Method Code: public void showRestoreButton(boolean show) {\n        binding.contactlistRestoreSelectedContainer.setVisibility(show ? View.VISIBLE : View.GONE);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc showRestoreButton(show: Bool) {\n    binding.contactlistRestoreSelectedContainer.isHidden = !show\n}\n```"
    },
    {
        "method_name": "onDestroy",
        "method_code": "@Override\n    public void onDestroy() {\n        super.onDestroy();\n        ContactsPreferenceActivity contactsPreferenceActivity = (ContactsPreferenceActivity) getActivity();\n        contactsPreferenceActivity.setDrawerIndicatorEnabled(true);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onDestroy from BackupListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onDestroy\n\n        Method Code: @Override\n    public void onDestroy() {\n        super.onDestroy();\n        ContactsPreferenceActivity contactsPreferenceActivity = (ContactsPreferenceActivity) getActivity();\n        contactsPreferenceActivity.setDrawerIndicatorEnabled(true);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n    if let contactsPreferenceActivity = self.navigationController?.topViewController as? ContactsPreferenceActivity {\n        contactsPreferenceActivity.setDrawerIndicatorEnabled(true)\n    }\n}\n```"
    },
    {
        "method_name": "onDestroyView",
        "method_code": "@Override\n    public void onDestroyView() {\n        super.onDestroyView();\n        binding = null;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onDestroyView from BackupListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onDestroyView\n\n        Method Code: @Override\n    public void onDestroyView() {\n        super.onDestroyView();\n        binding = null;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n    binding = nil\n}\n```"
    },
    {
        "method_name": "onResume",
        "method_code": "public void onResume() {\n        super.onResume();\n        ContactsPreferenceActivity contactsPreferenceActivity = (ContactsPreferenceActivity) getActivity();\n        contactsPreferenceActivity.setDrawerIndicatorEnabled(false);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onResume from BackupListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onResume\n\n        Method Code: public void onResume() {\n        super.onResume();\n        ContactsPreferenceActivity contactsPreferenceActivity = (ContactsPreferenceActivity) getActivity();\n        contactsPreferenceActivity.setDrawerIndicatorEnabled(false);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n    if let contactsPreferenceActivity = self.activity as? ContactsPreferenceActivity {\n        contactsPreferenceActivity.setDrawerIndicatorEnabled(false)\n    }\n}\n```"
    },
    {
        "method_name": "onStart",
        "method_code": "@Override\n    public void onStart() {\n        super.onStart();\n        EventBus.getDefault().register(this);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onStart from BackupListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onStart\n\n        Method Code: @Override\n    public void onStart() {\n        super.onStart();\n        EventBus.getDefault().register(this);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n    EventBus.default.register(self)\n}\n```"
    },
    {
        "method_name": "onStop",
        "method_code": "@Override\n    public void onStop() {\n        EventBus.getDefault().unregister(this);\n        if (loadContactsTask != null) {\n            loadContactsTask.cancel(true);\n        }\n        super.onStop();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onStop from BackupListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onStop\n\n        Method Code: @Override\n    public void onStop() {\n        EventBus.getDefault().unregister(this);\n        if (loadContactsTask != null) {\n            loadContactsTask.cancel(true);\n        }\n        super.onStop();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n    NotificationCenter.default.removeObserver(self)\n    loadContactsTask?.cancel()\n}\n```"
    },
    {
        "method_name": "onOptionsItemSelected",
        "method_code": "@Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        boolean retval;\n        int itemId = item.getItemId();\n\n        if (itemId == android.R.id.home) {\n            closeFragment();\n            retval = true;\n        } else if (itemId == R.id.action_select_all) {\n            item.setChecked(!item.isChecked());\n            setSelectAllMenuItem(item, item.isChecked());\n            listAdapter.selectAll(item.isChecked());\n            retval = true;\n        } else {\n            retval = super.onOptionsItemSelected(item);\n        }\n\n        return retval;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onOptionsItemSelected from BackupListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onOptionsItemSelected\n\n        Method Code: @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        boolean retval;\n        int itemId = item.getItemId();\n\n        if (itemId == android.R.id.home) {\n            closeFragment();\n            retval = true;\n        } else if (itemId == R.id.action_select_all) {\n            item.setChecked(!item.isChecked());\n            setSelectAllMenuItem(item, item.isChecked());\n            listAdapter.selectAll(item.isChecked());\n            retval = true;\n        } else {\n            retval = super.onOptionsItemSelected(item);\n        }\n\n        return retval;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onOptionsItemSelected(_ item: MenuItem) -> Bool {\n    var retval: Bool\n    let itemId = item.itemId\n\n    if itemId == android.R.id.home {\n        closeFragment()\n        retval = true\n    } else if itemId == R.id.action_select_all {\n        item.isChecked = !item.isChecked\n        setSelectAllMenuItem(item, item.isChecked)\n        listAdapter.selectAll(item.isChecked)\n        retval = true\n    } else {\n        retval = super.onOptionsItemSelected(item)\n    }\n\n    return retval\n}\n```"
    },
    {
        "method_name": "showLoadingMessage",
        "method_code": "public void showLoadingMessage(boolean showIt) {\n        binding.loadingListContainer.setVisibility(showIt ? View.VISIBLE : View.GONE);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled showLoadingMessage from BackupListFragment.java into Swift.\n\n        Input:\n\n        Method Name: showLoadingMessage\n\n        Method Code: public void showLoadingMessage(boolean showIt) {\n        binding.loadingListContainer.setVisibility(showIt ? View.VISIBLE : View.GONE);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc showLoadingMessage(_ showIt: Bool) {\n    binding.loadingListContainer.isHidden = !showIt\n}\n```"
    },
    {
        "method_name": "setSelectAllMenuItem",
        "method_code": "private void setSelectAllMenuItem(MenuItem selectAll, boolean checked) {\n        selectAll.setChecked(checked);\n        if (checked) {\n            selectAll.setIcon(R.drawable.ic_select_none);\n        } else {\n            selectAll.setIcon(R.drawable.ic_select_all);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setSelectAllMenuItem from BackupListFragment.java into Swift.\n\n        Input:\n\n        Method Name: setSelectAllMenuItem\n\n        Method Code: private void setSelectAllMenuItem(MenuItem selectAll, boolean checked) {\n        selectAll.setChecked(checked);\n        if (checked) {\n            selectAll.setIcon(R.drawable.ic_select_none);\n        } else {\n            selectAll.setIcon(R.drawable.ic_select_all);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setSelectAllMenuItem(selectAll: MenuItem, checked: Bool) {\n    selectAll.isChecked = checked\n    if checked {\n        selectAll.icon = UIImage(named: \"ic_select_none\")\n    } else {\n        selectAll.icon = UIImage(named: \"ic_select_all\")\n    }\n}\n```"
    },
    {
        "method_name": "importContacts",
        "method_code": "private void importContacts(ContactsAccount account) {\n        backgroundJobManager.startImmediateContactsImport(account.getName(),\n                                                          account.getType(),\n                                                          getFile().getStoragePath(),\n                                                          listAdapter.getCheckedContactsIntArray());\n\n        Snackbar\n            .make(\n                binding.list,\n                R.string.contacts_preferences_import_scheduled,\n                Snackbar.LENGTH_LONG\n                 )\n            .show();\n\n        closeFragment();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled importContacts from BackupListFragment.java into Swift.\n\n        Input:\n\n        Method Name: importContacts\n\n        Method Code: private void importContacts(ContactsAccount account) {\n        backgroundJobManager.startImmediateContactsImport(account.getName(),\n                                                          account.getType(),\n                                                          getFile().getStoragePath(),\n                                                          listAdapter.getCheckedContactsIntArray());\n\n        Snackbar\n            .make(\n                binding.list,\n                R.string.contacts_preferences_import_scheduled,\n                Snackbar.LENGTH_LONG\n                 )\n            .show();\n\n        closeFragment();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func importContacts(account: ContactsAccount) {\n    backgroundJobManager.startImmediateContactsImport(account.getName(),\n                                                      account.getType(),\n                                                      getFile().getStoragePath(),\n                                                      listAdapter.getCheckedContactsIntArray())\n\n    Snackbar\n        .make(\n            binding.list,\n            R.string.contacts_preferences_import_scheduled,\n            Snackbar.LENGTH_LONG\n        )\n        .show()\n\n    closeFragment()\n}\n```"
    },
    {
        "method_name": "importCalendar",
        "method_code": "private void importCalendar() {\n        backgroundJobManager.startImmediateCalendarImport(listAdapter.getCheckedCalendarPathsArray());\n\n        Snackbar\n            .make(\n                binding.list,\n                R.string.contacts_preferences_import_scheduled,\n                Snackbar.LENGTH_LONG\n                 )\n            .show();\n\n        closeFragment();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled importCalendar from BackupListFragment.java into Swift.\n\n        Input:\n\n        Method Name: importCalendar\n\n        Method Code: private void importCalendar() {\n        backgroundJobManager.startImmediateCalendarImport(listAdapter.getCheckedCalendarPathsArray());\n\n        Snackbar\n            .make(\n                binding.list,\n                R.string.contacts_preferences_import_scheduled,\n                Snackbar.LENGTH_LONG\n                 )\n            .show();\n\n        closeFragment();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func importCalendar() {\n    backgroundJobManager.startImmediateCalendarImport(listAdapter.getCheckedCalendarPathsArray())\n\n    let snackbar = Snackbar.make(\n        view: binding.list,\n        text: R.string.contacts_preferences_import_scheduled,\n        duration: Snackbar.LENGTH_LONG\n    )\n    snackbar.show()\n\n    closeFragment()\n}\n```"
    },
    {
        "method_name": "closeFragment",
        "method_code": "private void closeFragment() {\n        ContactsPreferenceActivity contactsPreferenceActivity = (ContactsPreferenceActivity) getActivity();\n        if (contactsPreferenceActivity != null) {\n            contactsPreferenceActivity.onBackPressed();\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled closeFragment from BackupListFragment.java into Swift.\n\n        Input:\n\n        Method Name: closeFragment\n\n        Method Code: private void closeFragment() {\n        ContactsPreferenceActivity contactsPreferenceActivity = (ContactsPreferenceActivity) getActivity();\n        if (contactsPreferenceActivity != null) {\n            contactsPreferenceActivity.onBackPressed();\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func closeFragment() {\n    if let contactsPreferenceActivity = self.activity as? ContactsPreferenceActivity {\n        contactsPreferenceActivity.onBackPressed()\n    }\n}\n```"
    },
    {
        "method_name": "checkAndAskForContactsWritePermission",
        "method_code": "private boolean checkAndAskForContactsWritePermission() {\n        // check permissions\n        if (!PermissionUtil.checkSelfPermission(getContext(), Manifest.permission.WRITE_CONTACTS)) {\n            requestPermissions(new String[]{Manifest.permission.WRITE_CONTACTS},\n                               PermissionUtil.PERMISSIONS_WRITE_CONTACTS);\n            return false;\n        } else {\n            return true;\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled checkAndAskForContactsWritePermission from BackupListFragment.java into Swift.\n\n        Input:\n\n        Method Name: checkAndAskForContactsWritePermission\n\n        Method Code: private boolean checkAndAskForContactsWritePermission() {\n        // check permissions\n        if (!PermissionUtil.checkSelfPermission(getContext(), Manifest.permission.WRITE_CONTACTS)) {\n            requestPermissions(new String[]{Manifest.permission.WRITE_CONTACTS},\n                               PermissionUtil.PERMISSIONS_WRITE_CONTACTS);\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func checkAndAskForContactsWritePermission() -> Bool {\n    if !PermissionUtil.checkSelfPermission(context: self.view?.window?.rootViewController, permission: .writeContacts) {\n        requestPermissions([.writeContacts], PermissionUtil.PERMISSIONS_WRITE_CONTACTS)\n        return false\n    } else {\n        return true\n    }\n}\n```"
    },
    {
        "method_name": "checkAndAskForCalendarWritePermission",
        "method_code": "private boolean checkAndAskForCalendarWritePermission() {\n        // check permissions\n        if (!PermissionUtil.checkSelfPermission(getContext(), Manifest.permission.WRITE_CALENDAR)) {\n            requestPermissions(new String[]{Manifest.permission.WRITE_CALENDAR},\n                               PermissionUtil.PERMISSIONS_WRITE_CALENDAR);\n            return false;\n        } else {\n            return true;\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled checkAndAskForCalendarWritePermission from BackupListFragment.java into Swift.\n\n        Input:\n\n        Method Name: checkAndAskForCalendarWritePermission\n\n        Method Code: private boolean checkAndAskForCalendarWritePermission() {\n        // check permissions\n        if (!PermissionUtil.checkSelfPermission(getContext(), Manifest.permission.WRITE_CALENDAR)) {\n            requestPermissions(new String[]{Manifest.permission.WRITE_CALENDAR},\n                               PermissionUtil.PERMISSIONS_WRITE_CALENDAR);\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func checkAndAskForCalendarWritePermission() -> Bool {\n    if !PermissionUtil.checkSelfPermission(context: self.context, permission: .writeCalendar) {\n        requestPermissions([.writeCalendar], PermissionUtil.PERMISSIONS_WRITE_CALENDAR)\n        return false\n    } else {\n        return true\n    }\n}\n```"
    },
    {
        "method_name": "onRequestPermissionsResult",
        "method_code": "@Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n\n        if (requestCode == PermissionUtil.PERMISSIONS_WRITE_CONTACTS) {\n            for (int index = 0; index < permissions.length; index++) {\n                if (Manifest.permission.WRITE_CONTACTS.equalsIgnoreCase(permissions[index])) {\n                    if (grantResults[index] >= 0) {\n                        importContacts(selectedAccount);\n                    } else {\n                        if (getView() != null) {\n                            Snackbar.make(getView(), R.string.contactlist_no_permission, Snackbar.LENGTH_LONG)\n                                .show();\n                        } else {\n                            Toast.makeText(getContext(), R.string.contactlist_no_permission, Toast.LENGTH_LONG).show();\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n\n        if (requestCode == PermissionUtil.PERMISSIONS_WRITE_CALENDAR) {\n            for (int index = 0; index < permissions.length; index++) {\n                if (Manifest.permission.WRITE_CALENDAR.equalsIgnoreCase(permissions[index])) {\n                    if (grantResults[index] >= 0) {\n                        importContacts(selectedAccount);\n                    } else {\n                        if (getView() != null) {\n                            Snackbar.make(getView(), R.string.contactlist_no_permission, Snackbar.LENGTH_LONG)\n                                .show();\n                        } else {\n                            Toast.makeText(getContext(), R.string.contactlist_no_permission, Toast.LENGTH_LONG).show();\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onRequestPermissionsResult from BackupListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onRequestPermissionsResult\n\n        Method Code: @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n\n        if (requestCode == PermissionUtil.PERMISSIONS_WRITE_CONTACTS) {\n            for (int index = 0; index < permissions.length; index++) {\n                if (Manifest.permission.WRITE_CONTACTS.equalsIgnoreCase(permissions[index])) {\n                    if (grantResults[index] >= 0) {\n                        importContacts(selectedAccount);\n                    } else {\n                        if (getView() != null) {\n                            Snackbar.make(getView(), R.string.contactlist_no_permission, Snackbar.LENGTH_LONG)\n                                .show();\n                        } else {\n                            Toast.makeText(getContext(), R.string.contactlist_no_permission, Toast.LENGTH_LONG).show();\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n\n        if (requestCode == PermissionUtil.PERMISSIONS_WRITE_CALENDAR) {\n            for (int index = 0; index < permissions.length; index++) {\n                if (Manifest.permission.WRITE_CALENDAR.equalsIgnoreCase(permissions[index])) {\n                    if (grantResults[index] >= 0) {\n                        importContacts(selectedAccount);\n                    } else {\n                        if (getView() != null) {\n                            Snackbar.make(getView(), R.string.contactlist_no_permission, Snackbar.LENGTH_LONG)\n                                .show();\n                        } else {\n                            Toast.makeText(getContext(), R.string.contactlist_no_permission, Toast.LENGTH_LONG).show();\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onRequestPermissionsResult(_ requestCode: Int, _ permissions: [String], _ grantResults: [Int]) {\n    super.onRequestPermissionsResult(requestCode, permissions, grantResults)\n\n    if requestCode == PermissionUtil.PERMISSIONS_WRITE_CONTACTS {\n        for (index, permission) in permissions.enumerated() {\n            if permission.caseInsensitiveCompare(Manifest.permission.WRITE_CONTACTS) == .orderedSame {\n                if grantResults[index] >= 0 {\n                    importContacts(selectedAccount)\n                } else {\n                    if let view = self.view {\n                        Snackbar.make(view, R.string.contactlist_no_permission, Snackbar.LENGTH_LONG).show()\n                    } else {\n                        Toast.makeText(self.context, R.string.contactlist_no_permission, Toast.LENGTH_LONG).show()\n                    }\n                }\n                break\n            }\n        }\n    }\n\n    if requestCode == PermissionUtil.PERMISSIONS_WRITE_CALENDAR {\n        for (index, permission) in permissions.enumerated() {\n            if permission.caseInsensitiveCompare(Manifest.permission.WRITE_CALENDAR) == .orderedSame {\n                if grantResults[index] >= 0 {\n                    importContacts(selectedAccount)\n                } else {\n                    if let view = self.view {\n                        Snackbar.make(view, R.string.contactlist_no_permission, Snackbar.LENGTH_LONG).show()\n                    } else {\n                        Toast.makeText(self.context, R.string.contactlist_no_permission, Toast.LENGTH_LONG).show()\n                    }\n                }\n                break\n            }\n        }\n    }\n}\n```"
    },
    {
        "method_name": "onDownloadUpdate",
        "method_code": "private Unit onDownloadUpdate(Transfer download) {\n        final Activity activity = getActivity();\n        if (download.getState() == TransferState.COMPLETED && activity != null) {\n            OCFile ocFile = download.getFile();\n\n            if (MimeTypeUtil.isVCard(ocFile)) {\n                setFile(ocFile);\n                loadContactsTask = new LoadContactsTask(this, ocFile);\n                loadContactsTask.execute();\n            }\n        }\n        return Unit.INSTANCE;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onDownloadUpdate from BackupListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onDownloadUpdate\n\n        Method Code: private Unit onDownloadUpdate(Transfer download) {\n        final Activity activity = getActivity();\n        if (download.getState() == TransferState.COMPLETED && activity != null) {\n            OCFile ocFile = download.getFile();\n\n            if (MimeTypeUtil.isVCard(ocFile)) {\n                setFile(ocFile);\n                loadContactsTask = new LoadContactsTask(this, ocFile);\n                loadContactsTask.execute();\n            }\n        }\n        return Unit.INSTANCE;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func onDownloadUpdate(download: Transfer) {\n    if let activity = self.activity, download.state == .completed {\n        let ocFile = download.file\n\n        if MimeTypeUtil.isVCard(ocFile) {\n            setFile(ocFile)\n            loadContactsTask = LoadContactsTask(fragment: self, file: ocFile)\n            loadContactsTask?.execute()\n        }\n    }\n}\n```"
    },
    {
        "method_name": "loadVCards",
        "method_code": "public void loadVCards(List<VCard> cards) {\n        showLoadingMessage(false);\n        vCards.clear();\n        vCards.addAll(cards);\n        listAdapter.replaceVcards(vCards);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled loadVCards from BackupListFragment.java into Swift.\n\n        Input:\n\n        Method Name: loadVCards\n\n        Method Code: public void loadVCards(List<VCard> cards) {\n        showLoadingMessage(false);\n        vCards.clear();\n        vCards.addAll(cards);\n        listAdapter.replaceVcards(vCards);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc loadVCards(cards: [VCard]) {\n    showLoadingMessage(false)\n    vCards.removeAll()\n    vCards.append(contentsOf: cards)\n    listAdapter.replaceVcards(vCards)\n}\n```"
    },
    {
        "method_name": "getDisplayName",
        "method_code": "public static String getDisplayName(VCard vCard) {\n        if (vCard.getFormattedName() != null) {\n            return vCard.getFormattedName().getValue();\n        } else if (vCard.getTelephoneNumbers() != null && vCard.getTelephoneNumbers().size() > 0) {\n            return vCard.getTelephoneNumbers().get(0).getText();\n        } else if (vCard.getEmails() != null && vCard.getEmails().size() > 0) {\n            return vCard.getEmails().get(0).getValue();\n        }\n\n        return \"\";\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getDisplayName from BackupListFragment.java into Swift.\n\n        Input:\n\n        Method Name: getDisplayName\n\n        Method Code: public static String getDisplayName(VCard vCard) {\n        if (vCard.getFormattedName() != null) {\n            return vCard.getFormattedName().getValue();\n        } else if (vCard.getTelephoneNumbers() != null && vCard.getTelephoneNumbers().size() > 0) {\n            return vCard.getTelephoneNumbers().get(0).getText();\n        } else if (vCard.getEmails() != null && vCard.getEmails().size() > 0) {\n            return vCard.getEmails().get(0).getValue();\n        }\n\n        return \"\";\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func getDisplayName(vCard: VCard) -> String {\n    if let formattedName = vCard.getFormattedName() {\n        return formattedName.getValue()\n    } else if let telephoneNumbers = vCard.getTelephoneNumbers(), !telephoneNumbers.isEmpty {\n        return telephoneNumbers[0].getText()\n    } else if let emails = vCard.getEmails(), !emails.isEmpty {\n        return emails[0].getValue()\n    }\n    \n    return \"\"\n}\n```"
    },
    {
        "method_name": "hasCalendarEntry",
        "method_code": "public boolean hasCalendarEntry() {\n        return listAdapter.hasCalendarEntry();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled hasCalendarEntry from BackupListFragment.java into Swift.\n\n        Input:\n\n        Method Name: hasCalendarEntry\n\n        Method Code: public boolean hasCalendarEntry() {\n        return listAdapter.hasCalendarEntry();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc hasCalendarEntry() -> Bool {\n    return listAdapter.hasCalendarEntry()\n}\n```"
    },
    {
        "method_name": "setSelectedAccount",
        "method_code": "public void setSelectedAccount(ContactsAccount account) {\n        selectedAccount = account;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setSelectedAccount from BackupListFragment.java into Swift.\n\n        Input:\n\n        Method Name: setSelectedAccount\n\n        Method Code: public void setSelectedAccount(ContactsAccount account) {\n        selectedAccount = account;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setSelectedAccount(_ account: ContactsAccount) {\n    selectedAccount = account\n}\n```"
    }
]