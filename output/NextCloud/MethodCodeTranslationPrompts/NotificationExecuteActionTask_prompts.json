[
    {
        "method_name": "doInBackground",
        "method_code": "@Override\n    protected Boolean doInBackground(Action... actions) {\n        OkHttpMethodBase method;\n        Action action = actions[0];\n\n        if (action.type == null || action.link == null) {\n            return Boolean.FALSE;\n        }\n\n        switch (action.type) {\n            case \"GET\" -> method = new GetMethod(action.link, true);\n            case \"POST\" -> method = new PostMethod(action.link, true, RequestBody.create(\"\", null));\n            case \"DELETE\" -> method = new DeleteMethod(action.link, true);\n            case \"PUT\" -> method = new PutMethod(action.link, true, null);\n            default -> {\n                // do nothing\n                return Boolean.FALSE;\n            }\n        }\n\n        method.addRequestHeader(RemoteOperation.OCS_API_HEADER, RemoteOperation.OCS_API_HEADER_VALUE);\n\n        int status;\n        try {\n            status = client.execute(method);\n        } catch (IOException e) {\n            Log_OC.e(this, \"Execution of notification action failed: \" + e);\n            return Boolean.FALSE;\n        } finally {\n            method.releaseConnection();\n        }\n\n        return status == HttpStatus.SC_OK || status == HttpStatus.SC_ACCEPTED;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled doInBackground from NotificationExecuteActionTask.java into Swift.\n\n        Input:\n\n        Method Name: doInBackground\n\n        Method Code: @Override\n    protected Boolean doInBackground(Action... actions) {\n        OkHttpMethodBase method;\n        Action action = actions[0];\n\n        if (action.type == null || action.link == null) {\n            return Boolean.FALSE;\n        }\n\n        switch (action.type) {\n            case \"GET\" -> method = new GetMethod(action.link, true);\n            case \"POST\" -> method = new PostMethod(action.link, true, RequestBody.create(\"\", null));\n            case \"DELETE\" -> method = new DeleteMethod(action.link, true);\n            case \"PUT\" -> method = new PutMethod(action.link, true, null);\n            default -> {\n                // do nothing\n                return Boolean.FALSE;\n            }\n        }\n\n        method.addRequestHeader(RemoteOperation.OCS_API_HEADER, RemoteOperation.OCS_API_HEADER_VALUE);\n\n        int status;\n        try {\n            status = client.execute(method);\n        } catch (IOException e) {\n            Log_OC.e(this, \"Execution of notification action failed: \" + e);\n            return Boolean.FALSE;\n        } finally {\n            method.releaseConnection();\n        }\n\n        return status == HttpStatus.SC_OK || status == HttpStatus.SC_ACCEPTED;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc doInBackground(actions: Action...) -> Bool {\n    var method: OkHttpMethodBase\n    let action = actions[0]\n\n    guard let actionType = action.type, let actionLink = action.link else {\n        return false\n    }\n\n    switch actionType {\n    case \"GET\":\n        method = GetMethod(actionLink, true)\n    case \"POST\":\n        method = PostMethod(actionLink, true, RequestBody.create(\"\", nil))\n    case \"DELETE\":\n        method = DeleteMethod(actionLink, true)\n    case \"PUT\":\n        method = PutMethod(actionLink, true, nil)\n    default:\n        return false\n    }\n\n    method.addRequestHeader(RemoteOperation.OCS_API_HEADER, RemoteOperation.OCS_API_HEADER_VALUE)\n\n    var status: Int\n    do {\n        status = try client.execute(method)\n    } catch {\n        Log_OC.e(self, \"Execution of notification action failed: \\(error)\")\n        return false\n    } finally {\n        method.releaseConnection()\n    }\n\n    return status == HttpStatus.SC_OK || status == HttpStatus.SC_ACCEPTED\n}\n```"
    },
    {
        "method_name": "onPostExecute",
        "method_code": "@Override\n    protected void onPostExecute(Boolean isSuccess) {\n        notificationsActivity.onActionCallback(isSuccess, notification, holder);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onPostExecute from NotificationExecuteActionTask.java into Swift.\n\n        Input:\n\n        Method Name: onPostExecute\n\n        Method Code: @Override\n    protected void onPostExecute(Boolean isSuccess) {\n        notificationsActivity.onActionCallback(isSuccess, notification, holder);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onPostExecute(_ isSuccess: Bool) {\n    notificationsActivity.onActionCallback(isSuccess, notification: notification, holder: holder)\n}\n```"
    }
]