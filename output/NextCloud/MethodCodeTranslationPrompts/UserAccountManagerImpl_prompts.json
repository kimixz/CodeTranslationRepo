[
    {
        "method_name": "fromContext",
        "method_code": "public static UserAccountManagerImpl fromContext(Context context) {\n        AccountManager am = (AccountManager) context.getSystemService(Context.ACCOUNT_SERVICE);\n        return new UserAccountManagerImpl(context, am);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled fromContext from UserAccountManagerImpl.java into Swift.\n\n        Input:\n\n        Method Name: fromContext\n\n        Method Code: public static UserAccountManagerImpl fromContext(Context context) {\n        AccountManager am = (AccountManager) context.getSystemService(Context.ACCOUNT_SERVICE);\n        return new UserAccountManagerImpl(context, am);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nstatic func fromContext(context: Context) -> UserAccountManagerImpl {\n    let am = context.getSystemService(Context.ACCOUNT_SERVICE) as! AccountManager\n    return UserAccountManagerImpl(context: context, am: am)\n}\n```"
    },
    {
        "method_name": "removeAllAccounts",
        "method_code": "@Override\n    public void removeAllAccounts() {\n        for (Account account : getAccounts()) {\n            accountManager.removeAccount(account, null, null);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled removeAllAccounts from UserAccountManagerImpl.java into Swift.\n\n        Input:\n\n        Method Name: removeAllAccounts\n\n        Method Code: @Override\n    public void removeAllAccounts() {\n        for (Account account : getAccounts()) {\n            accountManager.removeAccount(account, null, null);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc removeAllAccounts() {\n    for account in getAccounts() {\n        accountManager.removeAccount(account, completion: nil)\n    }\n}\n```"
    },
    {
        "method_name": "removeUser",
        "method_code": "@Override\n    public boolean removeUser(User user) {\n        try {\n            AccountManagerFuture<Boolean> result = accountManager.removeAccount(user.toPlatformAccount(),\n                                                                                null,\n                                                                                null);\n            return result.getResult();\n        } catch (OperationCanceledException| AuthenticatorException| IOException ex) {\n            return false;\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled removeUser from UserAccountManagerImpl.java into Swift.\n\n        Input:\n\n        Method Name: removeUser\n\n        Method Code: @Override\n    public boolean removeUser(User user) {\n        try {\n            AccountManagerFuture<Boolean> result = accountManager.removeAccount(user.toPlatformAccount(),\n                                                                                null,\n                                                                                null);\n            return result.getResult();\n        } catch (OperationCanceledException| AuthenticatorException| IOException ex) {\n            return false;\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc removeUser(user: User) -> Bool {\n    do {\n        let result = try accountManager.removeAccount(user.toPlatformAccount(), null, null)\n        return result.getResult()\n    } catch {\n        return false\n    }\n}\n```"
    },
    {
        "method_name": "getAccounts",
        "method_code": "@Override\n    @NonNull\n    public Account[] getAccounts() {\n        return accountManager.getAccountsByType(getAccountType());\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getAccounts from UserAccountManagerImpl.java into Swift.\n\n        Input:\n\n        Method Name: getAccounts\n\n        Method Code: @Override\n    @NonNull\n    public Account[] getAccounts() {\n        return accountManager.getAccountsByType(getAccountType());\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getAccounts() -> [Account] {\n    return accountManager.getAccountsByType(getAccountType())\n}\n```"
    },
    {
        "method_name": "getAllUsers",
        "method_code": "@Override\n    @NonNull\n    public List<User> getAllUsers() {\n        Account[] accounts = getAccounts();\n        List<User> users = new ArrayList<>(accounts.length);\n        for (Account account : accounts) {\n            User user = createUserFromAccount(account);\n            if (user != null) {\n                users.add(user);\n            }\n        }\n        return users;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getAllUsers from UserAccountManagerImpl.java into Swift.\n\n        Input:\n\n        Method Name: getAllUsers\n\n        Method Code: @Override\n    @NonNull\n    public List<User> getAllUsers() {\n        Account[] accounts = getAccounts();\n        List<User> users = new ArrayList<>(accounts.length);\n        for (Account account : accounts) {\n            User user = createUserFromAccount(account);\n            if (user != null) {\n                users.add(user);\n            }\n        }\n        return users;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getAllUsers() -> [User] {\n    let accounts = getAccounts()\n    var users: [User] = []\n    for account in accounts {\n        if let user = createUserFromAccount(account) {\n            users.append(user)\n        }\n    }\n    return users\n}\n```"
    },
    {
        "method_name": "exists",
        "method_code": "@Override\n    public boolean exists(Account account) {\n        Account[] nextcloudAccounts = getAccounts();\n\n        if (account != null && account.name != null) {\n            int lastAtPos = account.name.lastIndexOf('@');\n            String hostAndPort = account.name.substring(lastAtPos + 1);\n            String username = account.name.substring(0, lastAtPos);\n            String otherHostAndPort;\n            String otherUsername;\n            for (Account otherAccount : nextcloudAccounts) {\n                lastAtPos = otherAccount.name.lastIndexOf('@');\n                otherHostAndPort = otherAccount.name.substring(lastAtPos + 1);\n                otherUsername = otherAccount.name.substring(0, lastAtPos);\n                if (otherHostAndPort.equals(hostAndPort) &&\n                    otherUsername.equalsIgnoreCase(username)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled exists from UserAccountManagerImpl.java into Swift.\n\n        Input:\n\n        Method Name: exists\n\n        Method Code: @Override\n    public boolean exists(Account account) {\n        Account[] nextcloudAccounts = getAccounts();\n\n        if (account != null && account.name != null) {\n            int lastAtPos = account.name.lastIndexOf('@');\n            String hostAndPort = account.name.substring(lastAtPos + 1);\n            String username = account.name.substring(0, lastAtPos);\n            String otherHostAndPort;\n            String otherUsername;\n            for (Account otherAccount : nextcloudAccounts) {\n                lastAtPos = otherAccount.name.lastIndexOf('@');\n                otherHostAndPort = otherAccount.name.substring(lastAtPos + 1);\n                otherUsername = otherAccount.name.substring(0, lastAtPos);\n                if (otherHostAndPort.equals(hostAndPort) &&\n                    otherUsername.equalsIgnoreCase(username)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc exists(account: Account?) -> Bool {\n    let nextcloudAccounts = getAccounts()\n\n    if let account = account, let accountName = account.name {\n        let lastAtPos = accountName.lastIndex(of: \"@\") ?? accountName.endIndex\n        let hostAndPort = String(accountName[accountName.index(after: lastAtPos)...])\n        let username = String(accountName[..<lastAtPos])\n        \n        for otherAccount in nextcloudAccounts {\n            if let otherAccountName = otherAccount.name {\n                let otherLastAtPos = otherAccountName.lastIndex(of: \"@\") ?? otherAccountName.endIndex\n                let otherHostAndPort = String(otherAccountName[otherAccountName.index(after: otherLastAtPos)...])\n                let otherUsername = String(otherAccountName[..<otherLastAtPos])\n                \n                if otherHostAndPort == hostAndPort && otherUsername.caseInsensitiveCompare(username) == .orderedSame {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n```"
    },
    {
        "method_name": "getCurrentAccount",
        "method_code": "@Override\n    @NonNull\n    public Account getCurrentAccount() {\n        Account[] ocAccounts = getAccounts();\n\n        ArbitraryDataProvider arbitraryDataProvider = new ArbitraryDataProviderImpl(context);\n        SharedPreferences appPreferences = PreferenceManager.getDefaultSharedPreferences(context);\n        String accountName = appPreferences.getString(PREF_SELECT_OC_ACCOUNT, null);\n\n        Account defaultAccount = Arrays.stream(ocAccounts)\n            .filter(account -> account.name.equals(accountName))\n            .findFirst()\n            .orElse(null);\n\n        // take first which is not pending for removal account as fallback\n        if (defaultAccount == null) {\n            defaultAccount = Arrays.stream(ocAccounts)\n                .filter(account -> !arbitraryDataProvider.getBooleanValue(account.name, PENDING_FOR_REMOVAL))\n                .findFirst()\n                .orElse(null);\n        }\n\n        if (defaultAccount == null) {\n            if (ocAccounts.length > 0) {\n                defaultAccount = ocAccounts[0];\n            } else {\n                defaultAccount = getAnonymousAccount();\n            }\n        }\n\n        return defaultAccount;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getCurrentAccount from UserAccountManagerImpl.java into Swift.\n\n        Input:\n\n        Method Name: getCurrentAccount\n\n        Method Code: @Override\n    @NonNull\n    public Account getCurrentAccount() {\n        Account[] ocAccounts = getAccounts();\n\n        ArbitraryDataProvider arbitraryDataProvider = new ArbitraryDataProviderImpl(context);\n        SharedPreferences appPreferences = PreferenceManager.getDefaultSharedPreferences(context);\n        String accountName = appPreferences.getString(PREF_SELECT_OC_ACCOUNT, null);\n\n        Account defaultAccount = Arrays.stream(ocAccounts)\n            .filter(account -> account.name.equals(accountName))\n            .findFirst()\n            .orElse(null);\n\n        // take first which is not pending for removal account as fallback\n        if (defaultAccount == null) {\n            defaultAccount = Arrays.stream(ocAccounts)\n                .filter(account -> !arbitraryDataProvider.getBooleanValue(account.name, PENDING_FOR_REMOVAL))\n                .findFirst()\n                .orElse(null);\n        }\n\n        if (defaultAccount == null) {\n            if (ocAccounts.length > 0) {\n                defaultAccount = ocAccounts[0];\n            } else {\n                defaultAccount = getAnonymousAccount();\n            }\n        }\n\n        return defaultAccount;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getCurrentAccount() -> Account {\n    let ocAccounts = getAccounts()\n    \n    let arbitraryDataProvider = ArbitraryDataProviderImpl(context: context)\n    let appPreferences = UserDefaults.standard\n    let accountName = appPreferences.string(forKey: PREF_SELECT_OC_ACCOUNT)\n    \n    var defaultAccount = ocAccounts.first { $0.name == accountName }\n    \n    if defaultAccount == nil {\n        defaultAccount = ocAccounts.first { !arbitraryDataProvider.getBooleanValue(forKey: $0.name, PENDING_FOR_REMOVAL) }\n    }\n    \n    if defaultAccount == nil {\n        if !ocAccounts.isEmpty {\n            defaultAccount = ocAccounts[0]\n        } else {\n            defaultAccount = getAnonymousAccount()\n        }\n    }\n    \n    return defaultAccount!\n}\n```"
    },
    {
        "method_name": "getAnonymousAccount",
        "method_code": "private Account getAnonymousAccount() {\n        return new Account(\"Anonymous\", context.getString(R.string.anonymous_account_type));\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getAnonymousAccount from UserAccountManagerImpl.java into Swift.\n\n        Input:\n\n        Method Name: getAnonymousAccount\n\n        Method Code: private Account getAnonymousAccount() {\n        return new Account(\"Anonymous\", context.getString(R.string.anonymous_account_type));\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getAnonymousAccount() -> Account {\n    return Account(name: \"Anonymous\", type: context.getString(R.string.anonymous_account_type))\n}\n```"
    },
    {
        "method_name": "createUserFromAccount",
        "method_code": "@Nullable\n    private User createUserFromAccount(@NonNull Account account) {\n        Context safeContext = context != null ? context : MainApp.getAppContext();\n        if (safeContext == null) {\n            Log_OC.e(TAG, \"Unable to obtain a valid context\");\n            return null;\n        }\n\n        if (AccountExtensionsKt.isAnonymous(account, safeContext)) {\n            return null;\n        }\n\n        OwnCloudAccount ownCloudAccount;\n        try {\n            ownCloudAccount = new OwnCloudAccount(account, safeContext);\n        } catch (Exception ex) {\n            return null;\n        }\n\n        /*\n         * Server version\n         */\n        String serverVersionStr = accountManager.getUserData(account, AccountUtils.Constants.KEY_OC_VERSION);\n        OwnCloudVersion serverVersion;\n        if (serverVersionStr != null) {\n            serverVersion = new OwnCloudVersion(serverVersionStr);\n        } else {\n            serverVersion = MainApp.MINIMUM_SUPPORTED_SERVER_VERSION;\n        }\n\n        /*\n         * Server address\n         */\n        String serverAddressStr = accountManager.getUserData(account, AccountUtils.Constants.KEY_OC_BASE_URL);\n        if (serverAddressStr == null || serverAddressStr.isEmpty()) {\n            return AnonymousUser.fromContext(safeContext);\n        }\n        URI serverUri = URI.create(serverAddressStr); // TODO: validate\n\n        return new RegisteredUser(\n            account,\n            ownCloudAccount,\n            new Server(serverUri, serverVersion)\n        );\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled createUserFromAccount from UserAccountManagerImpl.java into Swift.\n\n        Input:\n\n        Method Name: createUserFromAccount\n\n        Method Code: @Nullable\n    private User createUserFromAccount(@NonNull Account account) {\n        Context safeContext = context != null ? context : MainApp.getAppContext();\n        if (safeContext == null) {\n            Log_OC.e(TAG, \"Unable to obtain a valid context\");\n            return null;\n        }\n\n        if (AccountExtensionsKt.isAnonymous(account, safeContext)) {\n            return null;\n        }\n\n        OwnCloudAccount ownCloudAccount;\n        try {\n            ownCloudAccount = new OwnCloudAccount(account, safeContext);\n        } catch (Exception ex) {\n            return null;\n        }\n\n        /*\n         * Server version\n         */\n        String serverVersionStr = accountManager.getUserData(account, AccountUtils.Constants.KEY_OC_VERSION);\n        OwnCloudVersion serverVersion;\n        if (serverVersionStr != null) {\n            serverVersion = new OwnCloudVersion(serverVersionStr);\n        } else {\n            serverVersion = MainApp.MINIMUM_SUPPORTED_SERVER_VERSION;\n        }\n\n        /*\n         * Server address\n         */\n        String serverAddressStr = accountManager.getUserData(account, AccountUtils.Constants.KEY_OC_BASE_URL);\n        if (serverAddressStr == null || serverAddressStr.isEmpty()) {\n            return AnonymousUser.fromContext(safeContext);\n        }\n        URI serverUri = URI.create(serverAddressStr); // TODO: validate\n\n        return new RegisteredUser(\n            account,\n            ownCloudAccount,\n            new Server(serverUri, serverVersion)\n        );\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func createUserFromAccount(account: Account) -> User? {\n    let safeContext = context ?? MainApp.getAppContext()\n    if safeContext == nil {\n        Log_OC.e(TAG, \"Unable to obtain a valid context\")\n        return nil\n    }\n\n    if AccountExtensionsKt.isAnonymous(account, safeContext) {\n        return nil\n    }\n\n    var ownCloudAccount: OwnCloudAccount\n    do {\n        ownCloudAccount = try OwnCloudAccount(account: account, context: safeContext)\n    } catch {\n        return nil\n    }\n\n    /*\n     * Server version\n     */\n    let serverVersionStr = accountManager.getUserData(account, forKey: AccountUtils.Constants.KEY_OC_VERSION)\n    let serverVersion: OwnCloudVersion\n    if let serverVersionStr = serverVersionStr {\n        serverVersion = OwnCloudVersion(versionString: serverVersionStr)\n    } else {\n        serverVersion = MainApp.MINIMUM_SUPPORTED_SERVER_VERSION\n    }\n\n    /*\n     * Server address\n     */\n    let serverAddressStr = accountManager.getUserData(account, forKey: AccountUtils.Constants.KEY_OC_BASE_URL)\n    if serverAddressStr == nil || serverAddressStr!.isEmpty {\n        return AnonymousUser.fromContext(safeContext)\n    }\n    let serverUri = URI(string: serverAddressStr!) // TODO: validate\n\n    return RegisteredUser(\n        account: account,\n        ownCloudAccount: ownCloudAccount,\n        server: Server(uri: serverUri, version: serverVersion)\n    )\n}\n```"
    },
    {
        "method_name": "getUser",
        "method_code": "@NonNull\n    @Override\n    public User getUser() {\n        Account account = getCurrentAccount();\n        User user = createUserFromAccount(account);\n        return user != null ? user : AnonymousUser.fromContext(context);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getUser from UserAccountManagerImpl.java into Swift.\n\n        Input:\n\n        Method Name: getUser\n\n        Method Code: @NonNull\n    @Override\n    public User getUser() {\n        Account account = getCurrentAccount();\n        User user = createUserFromAccount(account);\n        return user != null ? user : AnonymousUser.fromContext(context);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getUser() -> User {\n    let account = getCurrentAccount()\n    if let user = createUserFromAccount(account) {\n        return user\n    } else {\n        return AnonymousUser.fromContext(context)\n    }\n}\n```"
    },
    {
        "method_name": "getUser",
        "method_code": "@Override\n    @NonNull\n    public Optional<User> getUser(CharSequence accountName) {\n        Account account = getAccountByName(accountName.toString());\n        User user = createUserFromAccount(account);\n        return Optional.ofNullable(user);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getUser from UserAccountManagerImpl.java into Swift.\n\n        Input:\n\n        Method Name: getUser\n\n        Method Code: @Override\n    @NonNull\n    public Optional<User> getUser(CharSequence accountName) {\n        Account account = getAccountByName(accountName.toString());\n        User user = createUserFromAccount(account);\n        return Optional.ofNullable(user);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getUser(accountName: String) -> User? {\n    let account = getAccountByName(accountName)\n    let user = createUserFromAccount(account)\n    return user\n}\n```"
    },
    {
        "method_name": "getAnonymousUser",
        "method_code": "@Override\n    public User getAnonymousUser() {\n        return AnonymousUser.fromContext(context);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getAnonymousUser from UserAccountManagerImpl.java into Swift.\n\n        Input:\n\n        Method Name: getAnonymousUser\n\n        Method Code: @Override\n    public User getAnonymousUser() {\n        return AnonymousUser.fromContext(context);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getAnonymousUser() -> User {\n    return AnonymousUser.fromContext(context)\n}\n```"
    },
    {
        "method_name": "getCurrentOwnCloudAccount",
        "method_code": "@Override\n    @Nullable\n    public OwnCloudAccount getCurrentOwnCloudAccount() {\n        try {\n            Account currentPlatformAccount = getCurrentAccount();\n            return new OwnCloudAccount(currentPlatformAccount, context);\n        } catch (AccountUtils.AccountNotFoundException | IllegalArgumentException ex) {\n            return null;\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getCurrentOwnCloudAccount from UserAccountManagerImpl.java into Swift.\n\n        Input:\n\n        Method Name: getCurrentOwnCloudAccount\n\n        Method Code: @Override\n    @Nullable\n    public OwnCloudAccount getCurrentOwnCloudAccount() {\n        try {\n            Account currentPlatformAccount = getCurrentAccount();\n            return new OwnCloudAccount(currentPlatformAccount, context);\n        } catch (AccountUtils.AccountNotFoundException | IllegalArgumentException ex) {\n            return null;\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getCurrentOwnCloudAccount() -> OwnCloudAccount? {\n    do {\n        let currentPlatformAccount = try getCurrentAccount()\n        return OwnCloudAccount(account: currentPlatformAccount, context: context)\n    } catch {\n        return nil\n    }\n}\n```"
    },
    {
        "method_name": "getAccountByName",
        "method_code": "@Override\n    @NonNull\n    public Account getAccountByName(String name) {\n        for (Account account : getAccounts()) {\n            if (account.name.equals(name)) {\n                return account;\n            }\n        }\n\n        return getAnonymousAccount();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getAccountByName from UserAccountManagerImpl.java into Swift.\n\n        Input:\n\n        Method Name: getAccountByName\n\n        Method Code: @Override\n    @NonNull\n    public Account getAccountByName(String name) {\n        for (Account account : getAccounts()) {\n            if (account.name.equals(name)) {\n                return account;\n            }\n        }\n\n        return getAnonymousAccount();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getAccountByName(name: String) -> Account {\n    for account in getAccounts() {\n        if account.name == name {\n            return account\n        }\n    }\n    return getAnonymousAccount()\n}\n```"
    },
    {
        "method_name": "setCurrentOwnCloudAccount",
        "method_code": "@Override\n    public boolean setCurrentOwnCloudAccount(String accountName) {\n        boolean result = false;\n        if (accountName != null) {\n            for (final Account account : getAccounts()) {\n                if (accountName.equals(account.name)) {\n                    SharedPreferences.Editor appPrefs = PreferenceManager.getDefaultSharedPreferences(context).edit();\n                    appPrefs.putString(PREF_SELECT_OC_ACCOUNT, accountName);\n                    appPrefs.apply();\n                    result = true;\n                    break;\n                }\n            }\n        }\n        return result;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setCurrentOwnCloudAccount from UserAccountManagerImpl.java into Swift.\n\n        Input:\n\n        Method Name: setCurrentOwnCloudAccount\n\n        Method Code: @Override\n    public boolean setCurrentOwnCloudAccount(String accountName) {\n        boolean result = false;\n        if (accountName != null) {\n            for (final Account account : getAccounts()) {\n                if (accountName.equals(account.name)) {\n                    SharedPreferences.Editor appPrefs = PreferenceManager.getDefaultSharedPreferences(context).edit();\n                    appPrefs.putString(PREF_SELECT_OC_ACCOUNT, accountName);\n                    appPrefs.apply();\n                    result = true;\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setCurrentOwnCloudAccount(accountName: String?) -> Bool {\n    var result = false\n    if let accountName = accountName {\n        for account in getAccounts() {\n            if accountName == account.name {\n                let appPrefs = UserDefaults.standard\n                appPrefs.set(accountName, forKey: PREF_SELECT_OC_ACCOUNT)\n                result = true\n                break\n            }\n        }\n    }\n    return result\n}\n```"
    },
    {
        "method_name": "setCurrentOwnCloudAccount",
        "method_code": "@Override\n    public boolean setCurrentOwnCloudAccount(int hashCode) {\n        boolean result = false;\n        if (hashCode != 0) {\n            for (final User user : getAllUsers()) {\n                if (hashCode == user.hashCode()) {\n                    SharedPreferences.Editor appPrefs = PreferenceManager.getDefaultSharedPreferences(context).edit();\n                    appPrefs.putString(PREF_SELECT_OC_ACCOUNT, user.getAccountName());\n                    appPrefs.apply();\n                    result = true;\n                    break;\n                }\n            }\n        }\n        return result;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setCurrentOwnCloudAccount from UserAccountManagerImpl.java into Swift.\n\n        Input:\n\n        Method Name: setCurrentOwnCloudAccount\n\n        Method Code: @Override\n    public boolean setCurrentOwnCloudAccount(int hashCode) {\n        boolean result = false;\n        if (hashCode != 0) {\n            for (final User user : getAllUsers()) {\n                if (hashCode == user.hashCode()) {\n                    SharedPreferences.Editor appPrefs = PreferenceManager.getDefaultSharedPreferences(context).edit();\n                    appPrefs.putString(PREF_SELECT_OC_ACCOUNT, user.getAccountName());\n                    appPrefs.apply();\n                    result = true;\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setCurrentOwnCloudAccount(hashCode: Int) -> Bool {\n    var result = false\n    if hashCode != 0 {\n        for user in getAllUsers() {\n            if hashCode == user.hashValue {\n                let appPrefs = UserDefaults.standard\n                appPrefs.set(user.getAccountName(), forKey: PREF_SELECT_OC_ACCOUNT)\n                result = true\n                break\n            }\n        }\n    }\n    return result\n}\n```"
    },
    {
        "method_name": "getServerVersion",
        "method_code": "@Deprecated\n    @Override\n    @NonNull\n    public OwnCloudVersion getServerVersion(Account account) {\n        OwnCloudVersion serverVersion = MainApp.MINIMUM_SUPPORTED_SERVER_VERSION;\n\n        if (account != null) {\n            AccountManager accountMgr = AccountManager.get(MainApp.getAppContext());\n            String serverVersionStr = accountMgr.getUserData(account, com.owncloud.android.lib.common.accounts.AccountUtils.Constants.KEY_OC_VERSION);\n\n            if (serverVersionStr != null) {\n                serverVersion = new OwnCloudVersion(serverVersionStr);\n            }\n        }\n\n        return serverVersion;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getServerVersion from UserAccountManagerImpl.java into Swift.\n\n        Input:\n\n        Method Name: getServerVersion\n\n        Method Code: @Deprecated\n    @Override\n    @NonNull\n    public OwnCloudVersion getServerVersion(Account account) {\n        OwnCloudVersion serverVersion = MainApp.MINIMUM_SUPPORTED_SERVER_VERSION;\n\n        if (account != null) {\n            AccountManager accountMgr = AccountManager.get(MainApp.getAppContext());\n            String serverVersionStr = accountMgr.getUserData(account, com.owncloud.android.lib.common.accounts.AccountUtils.Constants.KEY_OC_VERSION);\n\n            if (serverVersionStr != null) {\n                serverVersion = new OwnCloudVersion(serverVersionStr);\n            }\n        }\n\n        return serverVersion;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\n@available(*, deprecated)\nfunc getServerVersion(account: Account?) -> OwnCloudVersion {\n    var serverVersion = MainApp.minimumSupportedServerVersion\n\n    if let account = account {\n        let accountMgr = AccountManager(mainAppContext: MainApp.getAppContext())\n        if let serverVersionStr = accountMgr.getUserData(account: account, key: com.owncloud.android.lib.common.accounts.AccountUtils.Constants.KEY_OC_VERSION) {\n            serverVersion = OwnCloudVersion(versionString: serverVersionStr)\n        }\n    }\n\n    return serverVersion\n}\n```"
    },
    {
        "method_name": "resetOwnCloudAccount",
        "method_code": "@Override\n    public void resetOwnCloudAccount() {\n        SharedPreferences.Editor appPrefs = PreferenceManager.getDefaultSharedPreferences(context).edit();\n        appPrefs.putString(PREF_SELECT_OC_ACCOUNT, null);\n        appPrefs.apply();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled resetOwnCloudAccount from UserAccountManagerImpl.java into Swift.\n\n        Input:\n\n        Method Name: resetOwnCloudAccount\n\n        Method Code: @Override\n    public void resetOwnCloudAccount() {\n        SharedPreferences.Editor appPrefs = PreferenceManager.getDefaultSharedPreferences(context).edit();\n        appPrefs.putString(PREF_SELECT_OC_ACCOUNT, null);\n        appPrefs.apply();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc resetOwnCloudAccount() {\n    let appPrefs = UserDefaults.standard\n    appPrefs.set(nil, forKey: \"PREF_SELECT_OC_ACCOUNT\")\n}\n```"
    },
    {
        "method_name": "accountOwnsFile",
        "method_code": "@Override\n    public  boolean accountOwnsFile(OCFile file, Account account) {\n        final String ownerId = file.getOwnerId();\n        return TextUtils.isEmpty(ownerId) || account.name.split(\"@\")[0].equalsIgnoreCase(ownerId);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled accountOwnsFile from UserAccountManagerImpl.java into Swift.\n\n        Input:\n\n        Method Name: accountOwnsFile\n\n        Method Code: @Override\n    public  boolean accountOwnsFile(OCFile file, Account account) {\n        final String ownerId = file.getOwnerId();\n        return TextUtils.isEmpty(ownerId) || account.name.split(\"@\")[0].equalsIgnoreCase(ownerId);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc accountOwnsFile(file: OCFile, account: Account) -> Bool {\n    let ownerId = file.getOwnerId()\n    return ownerId.isEmpty || account.name.split(separator: \"@\")[0].caseInsensitiveCompare(ownerId) == .orderedSame\n}\n```"
    },
    {
        "method_name": "userOwnsFile",
        "method_code": "@Override\n    public boolean userOwnsFile(OCFile file, User user) {\n        return accountOwnsFile(file, user.toPlatformAccount());\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled userOwnsFile from UserAccountManagerImpl.java into Swift.\n\n        Input:\n\n        Method Name: userOwnsFile\n\n        Method Code: @Override\n    public boolean userOwnsFile(OCFile file, User user) {\n        return accountOwnsFile(file, user.toPlatformAccount());\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func userOwnsFile(file: OCFile, user: User) -> Bool {\n    return accountOwnsFile(file: file, account: user.toPlatformAccount())\n}\n```"
    },
    {
        "method_name": "migrateUserId",
        "method_code": "public boolean migrateUserId() {\n        Account[] ocAccounts = accountManager.getAccountsByType(MainApp.getAccountType(context));\n        String userId;\n        String displayName;\n        GetUserInfoRemoteOperation remoteUserNameOperation = new GetUserInfoRemoteOperation();\n        int failed = 0;\n        for (Account account : ocAccounts) {\n            String storedUserId = accountManager.getUserData(account, com.owncloud.android.lib.common.accounts.AccountUtils.Constants.KEY_USER_ID);\n\n            if (!TextUtils.isEmpty(storedUserId)) {\n                continue;\n            }\n\n            // add userId\n            try {\n                OwnCloudAccount ocAccount = new OwnCloudAccount(account, context);\n                NextcloudClient nextcloudClient = OwnCloudClientManagerFactory\n                    .getDefaultSingleton()\n                    .getNextcloudClientFor(ocAccount, context);\n\n                RemoteOperationResult<UserInfo> result = remoteUserNameOperation.execute(nextcloudClient);\n\n                if (result.isSuccess()) {\n                    UserInfo userInfo = result.getResultData();\n                    userId = userInfo.getId();\n                    displayName = userInfo.getDisplayName();\n                } else {\n                    // skip account, try it next time\n                    Log_OC.e(TAG, \"Error while getting username for account: \" + account.name);\n                    failed++;\n                    continue;\n                }\n            } catch (Exception e) {\n                Log_OC.e(TAG, \"Error while getting username: \" + e.getMessage());\n                failed++;\n                continue;\n            }\n\n            accountManager.setUserData(account,\n                                       com.owncloud.android.lib.common.accounts.AccountUtils.Constants.KEY_DISPLAY_NAME,\n                                       displayName);\n            accountManager.setUserData(account,\n                                       com.owncloud.android.lib.common.accounts.AccountUtils.Constants.KEY_USER_ID,\n                                       userId);\n        }\n\n        return failed == 0;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled migrateUserId from UserAccountManagerImpl.java into Swift.\n\n        Input:\n\n        Method Name: migrateUserId\n\n        Method Code: public boolean migrateUserId() {\n        Account[] ocAccounts = accountManager.getAccountsByType(MainApp.getAccountType(context));\n        String userId;\n        String displayName;\n        GetUserInfoRemoteOperation remoteUserNameOperation = new GetUserInfoRemoteOperation();\n        int failed = 0;\n        for (Account account : ocAccounts) {\n            String storedUserId = accountManager.getUserData(account, com.owncloud.android.lib.common.accounts.AccountUtils.Constants.KEY_USER_ID);\n\n            if (!TextUtils.isEmpty(storedUserId)) {\n                continue;\n            }\n\n            // add userId\n            try {\n                OwnCloudAccount ocAccount = new OwnCloudAccount(account, context);\n                NextcloudClient nextcloudClient = OwnCloudClientManagerFactory\n                    .getDefaultSingleton()\n                    .getNextcloudClientFor(ocAccount, context);\n\n                RemoteOperationResult<UserInfo> result = remoteUserNameOperation.execute(nextcloudClient);\n\n                if (result.isSuccess()) {\n                    UserInfo userInfo = result.getResultData();\n                    userId = userInfo.getId();\n                    displayName = userInfo.getDisplayName();\n                } else {\n                    // skip account, try it next time\n                    Log_OC.e(TAG, \"Error while getting username for account: \" + account.name);\n                    failed++;\n                    continue;\n                }\n            } catch (Exception e) {\n                Log_OC.e(TAG, \"Error while getting username: \" + e.getMessage());\n                failed++;\n                continue;\n            }\n\n            accountManager.setUserData(account,\n                                       com.owncloud.android.lib.common.accounts.AccountUtils.Constants.KEY_DISPLAY_NAME,\n                                       displayName);\n            accountManager.setUserData(account,\n                                       com.owncloud.android.lib.common.accounts.AccountUtils.Constants.KEY_USER_ID,\n                                       userId);\n        }\n\n        return failed == 0;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc migrateUserId() -> Bool {\n    let ocAccounts = accountManager.accounts(withAccountType: MainApp.getAccountType(context))\n    var failed = 0\n    let remoteUserNameOperation = GetUserInfoRemoteOperation()\n\n    for account in ocAccounts {\n        let storedUserId = accountManager.userData(for: account, key: com.owncloud.android.lib.common.accounts.AccountUtils.Constants.KEY_USER_ID)\n\n        if !storedUserId.isEmpty {\n            continue\n        }\n\n        do {\n            let ocAccount = try OwnCloudAccount(account: account, context: context)\n            let nextcloudClient = OwnCloudClientManagerFactory.getDefaultSingleton().getNextcloudClient(for: ocAccount, context: context)\n\n            let result = remoteUserNameOperation.execute(nextcloudClient)\n\n            if result.isSuccess {\n                let userInfo = result.resultData\n                let userId = userInfo.id\n                let displayName = userInfo.displayName\n\n                accountManager.setUserData(for: account, key: com.owncloud.android.lib.common.accounts.AccountUtils.Constants.KEY_DISPLAY_NAME, value: displayName)\n                accountManager.setUserData(for: account, key: com.owncloud.android.lib.common.accounts.AccountUtils.Constants.KEY_USER_ID, value: userId)\n            } else {\n                print(\"Error while getting username for account: \\(account.name)\")\n                failed += 1\n                continue\n            }\n        } catch {\n            print(\"Error while getting username: \\(error.localizedDescription)\")\n            failed += 1\n            continue\n        }\n    }\n\n    return failed == 0\n}\n```"
    },
    {
        "method_name": "getAccountType",
        "method_code": "private String getAccountType() {\n        return context.getString(R.string.account_type);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getAccountType from UserAccountManagerImpl.java into Swift.\n\n        Input:\n\n        Method Name: getAccountType\n\n        Method Code: private String getAccountType() {\n        return context.getString(R.string.account_type);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getAccountType() -> String {\n    return NSLocalizedString(\"account_type\", comment: \"\")\n}\n```"
    },
    {
        "method_name": "startAccountCreation",
        "method_code": "@Override\n    public void startAccountCreation(final Activity activity) {\n\n        // skipping AuthenticatorActivity redirection when user is on Launcher or FirstRun Activity\n        if (activity instanceof LauncherActivity || activity instanceof FirstRunActivity) return;\n\n        Intent intent = new Intent(context, AuthenticatorActivity.class);\n\n        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n        context.startActivity(intent);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled startAccountCreation from UserAccountManagerImpl.java into Swift.\n\n        Input:\n\n        Method Name: startAccountCreation\n\n        Method Code: @Override\n    public void startAccountCreation(final Activity activity) {\n\n        // skipping AuthenticatorActivity redirection when user is on Launcher or FirstRun Activity\n        if (activity instanceof LauncherActivity || activity instanceof FirstRunActivity) return;\n\n        Intent intent = new Intent(context, AuthenticatorActivity.class);\n\n        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n        context.startActivity(intent);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc startAccountCreation(activity: Activity) {\n    if activity is LauncherActivity || activity is FirstRunActivity {\n        return\n    }\n    \n    let intent = Intent(context: context, AuthenticatorActivity.self)\n    intent.flags = .newTask\n    context.startActivity(intent)\n}\n```"
    }
]