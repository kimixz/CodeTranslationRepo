[
    {
        "method_name": "bind",
        "method_code": "public void bind(OCShare share,\n                     ShareeListAdapterListener listener,\n                     DisplayUtils.AvatarGenerationListener avatarListener,\n                     String userId,\n                     float avatarRadiusDimension) {\n        this.avatarRadiusDimension = avatarRadiusDimension;\n        String name = share.getSharedWithDisplayName();\n        binding.icon.setTag(null);\n\n        switch (share.getShareType()) {\n            case GROUP:\n                name = context.getString(R.string.share_group_clarification, name);\n                viewThemeUtils.files.createAvatar(share.getShareType(), binding.icon, context);\n                break;\n            case ROOM:\n                name = context.getString(R.string.share_room_clarification, name);\n                viewThemeUtils.files.createAvatar(share.getShareType(), binding.icon, context);\n                break;\n            case CIRCLE:\n                viewThemeUtils.files.createAvatar(share.getShareType(), binding.icon, context);\n                break;\n            case FEDERATED:\n                name = context.getString(R.string.share_remote_clarification, name);\n                setImage(binding.icon, share.getSharedWithDisplayName(), R.drawable.ic_user);\n                break;\n            case USER:\n                binding.icon.setTag(share.getShareWith());\n                float avatarRadius = context.getResources().getDimension(R.dimen.list_item_avatar_icon_radius);\n                DisplayUtils.setAvatar(user,\n                                       share.getShareWith(),\n                                       share.getSharedWithDisplayName(),\n                                       avatarListener,\n                                       avatarRadius,\n                                       context.getResources(),\n                                       binding.icon,\n                                       context);\n\n                binding.icon.setOnClickListener(v -> listener.showProfileBottomSheet(user, share.getShareWith()));\n            default:\n                setImage(binding.icon, name, R.drawable.ic_user);\n                break;\n        }\n\n        binding.name.setText(name);\n\n        if (share.getShareWith().equalsIgnoreCase(userId) || share.getUserId().equalsIgnoreCase(userId)) {\n            binding.overflowMenu.setVisibility(View.VISIBLE);\n\n            String permissionName = SharingMenuHelper.getPermissionName(context, share);\n            setPermissionName(permissionName);\n\n            // bind listener to edit privileges\n            binding.overflowMenu.setOnClickListener(v -> listener.showSharingMenuActionSheet(share));\n            binding.shareNameLayout.setOnClickListener(v -> listener.showPermissionsDialog(share));\n        } else {\n            binding.overflowMenu.setVisibility(View.GONE);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled bind from ShareViewHolder.java into Swift.\n\n        Input:\n\n        Method Name: bind\n\n        Method Code: public void bind(OCShare share,\n                     ShareeListAdapterListener listener,\n                     DisplayUtils.AvatarGenerationListener avatarListener,\n                     String userId,\n                     float avatarRadiusDimension) {\n        this.avatarRadiusDimension = avatarRadiusDimension;\n        String name = share.getSharedWithDisplayName();\n        binding.icon.setTag(null);\n\n        switch (share.getShareType()) {\n            case GROUP:\n                name = context.getString(R.string.share_group_clarification, name);\n                viewThemeUtils.files.createAvatar(share.getShareType(), binding.icon, context);\n                break;\n            case ROOM:\n                name = context.getString(R.string.share_room_clarification, name);\n                viewThemeUtils.files.createAvatar(share.getShareType(), binding.icon, context);\n                break;\n            case CIRCLE:\n                viewThemeUtils.files.createAvatar(share.getShareType(), binding.icon, context);\n                break;\n            case FEDERATED:\n                name = context.getString(R.string.share_remote_clarification, name);\n                setImage(binding.icon, share.getSharedWithDisplayName(), R.drawable.ic_user);\n                break;\n            case USER:\n                binding.icon.setTag(share.getShareWith());\n                float avatarRadius = context.getResources().getDimension(R.dimen.list_item_avatar_icon_radius);\n                DisplayUtils.setAvatar(user,\n                                       share.getShareWith(),\n                                       share.getSharedWithDisplayName(),\n                                       avatarListener,\n                                       avatarRadius,\n                                       context.getResources(),\n                                       binding.icon,\n                                       context);\n\n                binding.icon.setOnClickListener(v -> listener.showProfileBottomSheet(user, share.getShareWith()));\n            default:\n                setImage(binding.icon, name, R.drawable.ic_user);\n                break;\n        }\n\n        binding.name.setText(name);\n\n        if (share.getShareWith().equalsIgnoreCase(userId) || share.getUserId().equalsIgnoreCase(userId)) {\n            binding.overflowMenu.setVisibility(View.VISIBLE);\n\n            String permissionName = SharingMenuHelper.getPermissionName(context, share);\n            setPermissionName(permissionName);\n\n            // bind listener to edit privileges\n            binding.overflowMenu.setOnClickListener(v -> listener.showSharingMenuActionSheet(share));\n            binding.shareNameLayout.setOnClickListener(v -> listener.showPermissionsDialog(share));\n        } else {\n            binding.overflowMenu.setVisibility(View.GONE);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc bind(share: OCShare, listener: ShareeListAdapterListener, avatarListener: DisplayUtils.AvatarGenerationListener, userId: String, avatarRadiusDimension: Float) {\n    self.avatarRadiusDimension = avatarRadiusDimension\n    var name = share.getSharedWithDisplayName()\n    binding.icon.tag = nil\n\n    switch share.getShareType() {\n    case .GROUP:\n        name = context.getString(R.string.share_group_clarification, name)\n        viewThemeUtils.files.createAvatar(share.getShareType(), binding.icon, context)\n    case .ROOM:\n        name = context.getString(R.string.share_room_clarification, name)\n        viewThemeUtils.files.createAvatar(share.getShareType(), binding.icon, context)\n    case .CIRCLE:\n        viewThemeUtils.files.createAvatar(share.getShareType(), binding.icon, context)\n    case .FEDERATED:\n        name = context.getString(R.string.share_remote_clarification, name)\n        setImage(binding.icon, share.getSharedWithDisplayName(), R.drawable.ic_user)\n    case .USER:\n        binding.icon.tag = share.getShareWith()\n        let avatarRadius = context.resources.getDimension(R.dimen.list_item_avatar_icon_radius)\n        DisplayUtils.setAvatar(user: user, shareWith: share.getShareWith(), sharedWithDisplayName: share.getSharedWithDisplayName(), avatarListener: avatarListener, avatarRadius: avatarRadius, resources: context.resources, imageView: binding.icon, context: context)\n\n        binding.icon.setOnClickListener { _ in\n            listener.showProfileBottomSheet(user: user, shareWith: share.getShareWith())\n        }\n    default:\n        setImage(binding.icon, name, R.drawable.ic_user)\n    }\n\n    binding.name.text = name\n\n    if share.getShareWith().equalsIgnoreCase(userId) || share.getUserId().equalsIgnoreCase(userId) {\n        binding.overflowMenu.visibility = .visible\n\n        let permissionName = SharingMenuHelper.getPermissionName(context: context, share: share)\n        setPermissionName(permissionName)\n\n        binding.overflowMenu.setOnClickListener { _ in\n            listener.showSharingMenuActionSheet(share: share)\n        }\n        binding.shareNameLayout.setOnClickListener { _ in\n            listener.showPermissionsDialog(share: share)\n        }\n    } else {\n        binding.overflowMenu.visibility = .gone\n    }\n}\n```"
    },
    {
        "method_name": "setPermissionName",
        "method_code": "private void setPermissionName(String permissionName) {\n        if (!TextUtils.isEmpty(permissionName)) {\n            binding.permissionName.setText(permissionName);\n            binding.permissionName.setVisibility(View.VISIBLE);\n        } else {\n            binding.permissionName.setVisibility(View.GONE);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setPermissionName from ShareViewHolder.java into Swift.\n\n        Input:\n\n        Method Name: setPermissionName\n\n        Method Code: private void setPermissionName(String permissionName) {\n        if (!TextUtils.isEmpty(permissionName)) {\n            binding.permissionName.setText(permissionName);\n            binding.permissionName.setVisibility(View.VISIBLE);\n        } else {\n            binding.permissionName.setVisibility(View.GONE);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setPermissionName(_ permissionName: String?) {\n    if let permissionName = permissionName, !permissionName.isEmpty {\n        binding.permissionName.text = permissionName\n        binding.permissionName.isHidden = false\n    } else {\n        binding.permissionName.isHidden = true\n    }\n}\n```"
    },
    {
        "method_name": "setImage",
        "method_code": "private void setImage(ImageView avatar, String name, @DrawableRes int fallback) {\n        try {\n            avatar.setImageDrawable(TextDrawable.createNamedAvatar(name, avatarRadiusDimension));\n        } catch (StringIndexOutOfBoundsException e) {\n            avatar.setImageResource(fallback);\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setImage from ShareViewHolder.java into Swift.\n\n        Input:\n\n        Method Name: setImage\n\n        Method Code: private void setImage(ImageView avatar, String name, @DrawableRes int fallback) {\n        try {\n            avatar.setImageDrawable(TextDrawable.createNamedAvatar(name, avatarRadiusDimension));\n        } catch (StringIndexOutOfBoundsException e) {\n            avatar.setImageResource(fallback);\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setImage(avatar: UIImageView, name: String, fallback: Int) {\n    do {\n        avatar.image = try TextDrawable.createNamedAvatar(name: name, radius: avatarRadiusDimension)\n    } catch {\n        avatar.image = UIImage(named: \"\\(fallback)\")\n    }\n}\n```"
    }
]