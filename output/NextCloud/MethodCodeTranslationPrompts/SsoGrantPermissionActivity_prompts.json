[
    {
        "method_name": "getBinding",
        "method_code": "public DialogSsoGrantPermissionBinding getBinding() {\n        return binding;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getBinding from SsoGrantPermissionActivity.java into Swift.\n\n        Input:\n\n        Method Name: getBinding\n\n        Method Code: public DialogSsoGrantPermissionBinding getBinding() {\n        return binding;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getBinding() -> DialogSsoGrantPermissionBinding {\n    return binding\n}\n```"
    },
    {
        "method_name": "onCreate",
        "method_code": "@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        viewThemeUtils = themeUtilsFactory.withDefaultSchemes();\n\n        binding = DialogSsoGrantPermissionBinding.inflate(getLayoutInflater());\n\n        ComponentName callingActivity = getCallingActivity();\n\n        if (callingActivity != null) {\n            packageName = callingActivity.getPackageName();\n            final String appName = getAppNameForPackage(packageName);\n            account = IntentExtensionsKt.getParcelableArgument(getIntent(), NEXTCLOUD_FILES_ACCOUNT, Account.class);\n\n            if (account != null) {\n                final SpannableStringBuilder dialogText = makeSpecialPartsBold(\n                    getString(R.string.single_sign_on_request_token, appName, account.name),\n                    appName,\n                    account.name);\n                binding.permissionText.setText(dialogText);\n            }\n\n            try {\n                if (packageName != null) {\n                    Drawable appIcon = getPackageManager().getApplicationIcon(packageName);\n                    binding.appIcon.setImageDrawable(appIcon);\n                }\n            } catch (PackageManager.NameNotFoundException e) {\n                Log_OC.e(TAG, \"Error retrieving app icon\", e);\n            }\n\n            MaterialAlertDialogBuilder builder = getMaterialAlertDialogBuilder();\n\n            builder\n                .setView(binding.getRoot())\n                .setCancelable(false)\n                .setPositiveButton(R.string.permission_allow, (dialog, which) -> grantPermission())\n                .setNegativeButton(R.string.permission_deny, (dialog, which) -> exitFailed());\n\n            viewThemeUtils.dialog.colorMaterialAlertDialogBackground(this, builder);\n\n            dialog = builder.create();\n            dialog.show();\n\n            Log_OC.v(TAG, \"TOKEN-REQUEST: Calling Package: \" + packageName);\n            Log_OC.v(TAG, \"TOKEN-REQUEST: App Name: \" + appName);\n        } else {\n            // Activity was not started using startActivityForResult!\n            Log_OC.e(TAG, \"Calling Package is null\");\n            setResultAndExit(\"Request was not executed properly. Use startActivityForResult()\");\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreate from SsoGrantPermissionActivity.java into Swift.\n\n        Input:\n\n        Method Name: onCreate\n\n        Method Code: @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        viewThemeUtils = themeUtilsFactory.withDefaultSchemes();\n\n        binding = DialogSsoGrantPermissionBinding.inflate(getLayoutInflater());\n\n        ComponentName callingActivity = getCallingActivity();\n\n        if (callingActivity != null) {\n            packageName = callingActivity.getPackageName();\n            final String appName = getAppNameForPackage(packageName);\n            account = IntentExtensionsKt.getParcelableArgument(getIntent(), NEXTCLOUD_FILES_ACCOUNT, Account.class);\n\n            if (account != null) {\n                final SpannableStringBuilder dialogText = makeSpecialPartsBold(\n                    getString(R.string.single_sign_on_request_token, appName, account.name),\n                    appName,\n                    account.name);\n                binding.permissionText.setText(dialogText);\n            }\n\n            try {\n                if (packageName != null) {\n                    Drawable appIcon = getPackageManager().getApplicationIcon(packageName);\n                    binding.appIcon.setImageDrawable(appIcon);\n                }\n            } catch (PackageManager.NameNotFoundException e) {\n                Log_OC.e(TAG, \"Error retrieving app icon\", e);\n            }\n\n            MaterialAlertDialogBuilder builder = getMaterialAlertDialogBuilder();\n\n            builder\n                .setView(binding.getRoot())\n                .setCancelable(false)\n                .setPositiveButton(R.string.permission_allow, (dialog, which) -> grantPermission())\n                .setNegativeButton(R.string.permission_deny, (dialog, which) -> exitFailed());\n\n            viewThemeUtils.dialog.colorMaterialAlertDialogBackground(this, builder);\n\n            dialog = builder.create();\n            dialog.show();\n\n            Log_OC.v(TAG, \"TOKEN-REQUEST: Calling Package: \" + packageName);\n            Log_OC.v(TAG, \"TOKEN-REQUEST: App Name: \" + appName);\n        } else {\n            // Activity was not started using startActivityForResult!\n            Log_OC.e(TAG, \"Calling Package is null\");\n            setResultAndExit(\"Request was not executed properly. Use startActivityForResult()\");\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n\n    viewThemeUtils = themeUtilsFactory.withDefaultSchemes()\n\n    binding = DialogSsoGrantPermissionBinding.inflate(getLayoutInflater())\n\n    if let callingActivity = getCallingActivity() {\n        packageName = callingActivity.packageName\n        let appName = getAppNameForPackage(packageName)\n        account = getIntent().getParcelableArgument(NEXTCLOUD_FILES_ACCOUNT, Account.self)\n\n        if let account = account {\n            let dialogText = makeSpecialPartsBold(\n                getString(R.string.single_sign_on_request_token, appName, account.name),\n                appName,\n                account.name)\n            binding.permissionText.text = dialogText\n        }\n\n        do {\n            if let packageName = packageName {\n                let appIcon = try getPackageManager().getApplicationIcon(packageName)\n                binding.appIcon.image = appIcon\n            }\n        } catch {\n            Log_OC.e(TAG, \"Error retrieving app icon\", error)\n        }\n\n        let builder = getMaterialAlertDialogBuilder()\n\n        builder\n            .setView(binding.root)\n            .setCancelable(false)\n            .setPositiveButton(R.string.permission_allow) { dialog, which in\n                self.grantPermission()\n            }\n            .setNegativeButton(R.string.permission_deny) { dialog, which in\n                self.exitFailed()\n            }\n\n        viewThemeUtils.dialog.colorMaterialAlertDialogBackground(self, builder)\n\n        dialog = builder.create()\n        dialog.show()\n\n        Log_OC.v(TAG, \"TOKEN-REQUEST: Calling Package: \\(packageName)\")\n        Log_OC.v(TAG, \"TOKEN-REQUEST: App Name: \\(appName)\")\n    } else {\n        Log_OC.e(TAG, \"Calling Package is null\")\n        setResultAndExit(\"Request was not executed properly. Use startActivityForResult()\")\n    }\n}\n```"
    },
    {
        "method_name": "getMaterialAlertDialogBuilder",
        "method_code": "public MaterialAlertDialogBuilder getMaterialAlertDialogBuilder() {\n        return new MaterialAlertDialogBuilder(this);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getMaterialAlertDialogBuilder from SsoGrantPermissionActivity.java into Swift.\n\n        Input:\n\n        Method Name: getMaterialAlertDialogBuilder\n\n        Method Code: public MaterialAlertDialogBuilder getMaterialAlertDialogBuilder() {\n        return new MaterialAlertDialogBuilder(this);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getMaterialAlertDialogBuilder() -> MaterialAlertDialogBuilder {\n    return MaterialAlertDialogBuilder(context: self)\n}\n```"
    },
    {
        "method_name": "onStart",
        "method_code": "@Override\n    protected void onStart() {\n        super.onStart();\n        viewThemeUtils.platform.colorTextButtons(dialog.getButton(AlertDialog.BUTTON_POSITIVE),\n                                                 dialog.getButton(AlertDialog.BUTTON_NEGATIVE));\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled onStart from SsoGrantPermissionActivity.java into Swift.\n\n        Input:\n\n        Method Name: onStart\n\n        Method Code: @Override\n    protected void onStart() {\n        super.onStart();\n        viewThemeUtils.platform.colorTextButtons(dialog.getButton(AlertDialog.BUTTON_POSITIVE),\n                                                 dialog.getButton(AlertDialog.BUTTON_NEGATIVE));\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n    viewThemeUtils.platform.colorTextButtons(dialog.button(for: .positive), dialog.button(for: .negative))\n}\n```"
    },
    {
        "method_name": "makeSpecialPartsBold",
        "method_code": "private SpannableStringBuilder makeSpecialPartsBold(String text, String... toBeStyledText) {\n        SpannableStringBuilder ssb = new SpannableStringBuilder(text);\n        for (String textBlock : toBeStyledText) {\n            int start = text.indexOf(textBlock);\n            int end = start + textBlock.length();\n            ssb.setSpan(new StyleSpan(Typeface.BOLD), start, end, 0);\n            ssb.setSpan(new ForegroundColorSpan(getResources().getColor(R.color.text_color)), start, end,\n                        Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\n        }\n\n        return ssb;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled makeSpecialPartsBold from SsoGrantPermissionActivity.java into Swift.\n\n        Input:\n\n        Method Name: makeSpecialPartsBold\n\n        Method Code: private SpannableStringBuilder makeSpecialPartsBold(String text, String... toBeStyledText) {\n        SpannableStringBuilder ssb = new SpannableStringBuilder(text);\n        for (String textBlock : toBeStyledText) {\n            int start = text.indexOf(textBlock);\n            int end = start + textBlock.length();\n            ssb.setSpan(new StyleSpan(Typeface.BOLD), start, end, 0);\n            ssb.setSpan(new ForegroundColorSpan(getResources().getColor(R.color.text_color)), start, end,\n                        Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\n        }\n\n        return ssb;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func makeSpecialPartsBold(text: String, toBeStyledText: String...) -> NSMutableAttributedString {\n    let attributedString = NSMutableAttributedString(string: text)\n    for textBlock in toBeStyledText {\n        if let range = text.range(of: textBlock) {\n            let nsRange = NSRange(range, in: text)\n            attributedString.addAttribute(.font, value: UIFont.boldSystemFont(ofSize: UIFont.systemFontSize), range: nsRange)\n            attributedString.addAttribute(.foregroundColor, value: UIColor(named: \"text_color\") ?? UIColor.black, range: nsRange)\n        }\n    }\n    return attributedString\n}\n```"
    },
    {
        "method_name": "setResultAndExit",
        "method_code": "private void setResultAndExit(String exception) {\n        Intent data = new Intent();\n        data.putExtra(NEXTCLOUD_SSO_EXCEPTION, exception);\n        setResult(RESULT_CANCELED, data);\n        finish();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled setResultAndExit from SsoGrantPermissionActivity.java into Swift.\n\n        Input:\n\n        Method Name: setResultAndExit\n\n        Method Code: private void setResultAndExit(String exception) {\n        Intent data = new Intent();\n        data.putExtra(NEXTCLOUD_SSO_EXCEPTION, exception);\n        setResult(RESULT_CANCELED, data);\n        finish();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func setResultAndExit(exception: String) {\n    let data = Intent()\n    data.putExtra(name: NEXTCLOUD_SSO_EXCEPTION, value: exception)\n    setResult(RESULT_CANCELED, data)\n    finish()\n}\n```"
    },
    {
        "method_name": "getAppNameForPackage",
        "method_code": "private String getAppNameForPackage(String pkg) {\n        final PackageManager pm = getApplicationContext().getPackageManager();\n        ApplicationInfo ai = null;\n        try {\n            ai = pm.getApplicationInfo(pkg, 0);\n        } catch (final PackageManager.NameNotFoundException e) {\n            Log_OC.e(TAG, \"Error fetching app name for package\", e);\n        }\n        return (String) (ai != null ? pm.getApplicationLabel(ai) : \"(unknown)\");\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getAppNameForPackage from SsoGrantPermissionActivity.java into Swift.\n\n        Input:\n\n        Method Name: getAppNameForPackage\n\n        Method Code: private String getAppNameForPackage(String pkg) {\n        final PackageManager pm = getApplicationContext().getPackageManager();\n        ApplicationInfo ai = null;\n        try {\n            ai = pm.getApplicationInfo(pkg, 0);\n        } catch (final PackageManager.NameNotFoundException e) {\n            Log_OC.e(TAG, \"Error fetching app name for package\", e);\n        }\n        return (String) (ai != null ? pm.getApplicationLabel(ai) : \"(unknown)\");\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func getAppNameForPackage(_ pkg: String) -> String {\n    let pm = UIApplication.shared.delegate?.applicationContext?.packageManager\n    var ai: ApplicationInfo? = nil\n    do {\n        ai = try pm?.getApplicationInfo(pkg, 0)\n    } catch {\n        print(\"Error fetching app name for package: \\(error)\")\n    }\n    return ai != nil ? pm?.getApplicationLabel(ai!) ?? \"(unknown)\" : \"(unknown)\"\n}\n```"
    },
    {
        "method_name": "exitFailed",
        "method_code": "private void exitFailed() {\n        setResultAndExit(EXCEPTION_ACCOUNT_ACCESS_DECLINED);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled exitFailed from SsoGrantPermissionActivity.java into Swift.\n\n        Input:\n\n        Method Name: exitFailed\n\n        Method Code: private void exitFailed() {\n        setResultAndExit(EXCEPTION_ACCOUNT_ACCESS_DECLINED);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func exitFailed() {\n    setResultAndExit(resultCode: EXCEPTION_ACCOUNT_ACCESS_DECLINED)\n}\n```"
    },
    {
        "method_name": "grantPermission",
        "method_code": "private void grantPermission() {\n        // create token\n        SharedPreferences sharedPreferences = getSharedPreferences(SSO_SHARED_PREFERENCE, Context.MODE_PRIVATE);\n        String token = UUID.randomUUID().toString().replaceAll(\"-\", \"\");\n\n        String hashedTokenWithSalt = EncryptionUtils.generateSHA512(token);\n\n        SharedPreferences.Editor editor = sharedPreferences.edit();\n        editor.putString(packageName + DELIMITER + account.name, hashedTokenWithSalt);\n        editor.apply();\n\n        String serverUrl;\n        String userId;\n        try {\n            OwnCloudAccount ocAccount = new OwnCloudAccount(account, this);\n            serverUrl = ocAccount.getBaseUri().toString();\n            AccountManager accountManager = AccountManager.get(this);\n            userId = accountManager.getUserData(account,\n                    com.owncloud.android.lib.common.accounts.AccountUtils.Constants.KEY_USER_ID);\n        } catch (AccountUtils.AccountNotFoundException e) {\n            Log_OC.e(TAG, \"Account not found\");\n            setResultAndExit(EXCEPTION_ACCOUNT_NOT_FOUND);\n            return;\n        }\n\n        final Bundle result = new Bundle();\n        result.putString(AccountManager.KEY_ACCOUNT_NAME, account.name);\n        result.putString(AccountManager.KEY_ACCOUNT_TYPE, MainApp.getAccountType(this));\n        result.putString(AccountManager.KEY_AUTHTOKEN, NEXTCLOUD_SSO);\n        result.putString(Constants.SSO_USER_ID, userId);\n        result.putString(Constants.SSO_TOKEN, token);\n        result.putString(Constants.SSO_SERVER_URL, serverUrl);\n\n        Intent data = new Intent();\n        data.putExtra(NEXTCLOUD_SSO, result);\n        setResult(RESULT_OK, data);\n        finish();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled grantPermission from SsoGrantPermissionActivity.java into Swift.\n\n        Input:\n\n        Method Name: grantPermission\n\n        Method Code: private void grantPermission() {\n        // create token\n        SharedPreferences sharedPreferences = getSharedPreferences(SSO_SHARED_PREFERENCE, Context.MODE_PRIVATE);\n        String token = UUID.randomUUID().toString().replaceAll(\"-\", \"\");\n\n        String hashedTokenWithSalt = EncryptionUtils.generateSHA512(token);\n\n        SharedPreferences.Editor editor = sharedPreferences.edit();\n        editor.putString(packageName + DELIMITER + account.name, hashedTokenWithSalt);\n        editor.apply();\n\n        String serverUrl;\n        String userId;\n        try {\n            OwnCloudAccount ocAccount = new OwnCloudAccount(account, this);\n            serverUrl = ocAccount.getBaseUri().toString();\n            AccountManager accountManager = AccountManager.get(this);\n            userId = accountManager.getUserData(account,\n                    com.owncloud.android.lib.common.accounts.AccountUtils.Constants.KEY_USER_ID);\n        } catch (AccountUtils.AccountNotFoundException e) {\n            Log_OC.e(TAG, \"Account not found\");\n            setResultAndExit(EXCEPTION_ACCOUNT_NOT_FOUND);\n            return;\n        }\n\n        final Bundle result = new Bundle();\n        result.putString(AccountManager.KEY_ACCOUNT_NAME, account.name);\n        result.putString(AccountManager.KEY_ACCOUNT_TYPE, MainApp.getAccountType(this));\n        result.putString(AccountManager.KEY_AUTHTOKEN, NEXTCLOUD_SSO);\n        result.putString(Constants.SSO_USER_ID, userId);\n        result.putString(Constants.SSO_TOKEN, token);\n        result.putString(Constants.SSO_SERVER_URL, serverUrl);\n\n        Intent data = new Intent();\n        data.putExtra(NEXTCLOUD_SSO, result);\n        setResult(RESULT_OK, data);\n        finish();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func grantPermission() {\n    // create token\n    let sharedPreferences = UserDefaults.standard\n    let token = UUID().uuidString.replacingOccurrences(of: \"-\", with: \"\")\n\n    let hashedTokenWithSalt = EncryptionUtils.generateSHA512(token)\n\n    sharedPreferences.set(hashedTokenWithSalt, forKey: \"\\(packageName)\\(DELIMITER)\\(account.name)\")\n\n    var serverUrl: String\n    var userId: String\n    do {\n        let ocAccount = OwnCloudAccount(account: account, context: self)\n        serverUrl = ocAccount.getBaseUri().absoluteString\n        let accountManager = AccountManager(context: self)\n        userId = accountManager.getUserData(account: account, key: com.owncloud.android.lib.common.accounts.AccountUtils.Constants.KEY_USER_ID)\n    } catch AccountUtils.AccountNotFoundException {\n        Log_OC.e(TAG, \"Account not found\")\n        setResultAndExit(EXCEPTION_ACCOUNT_NOT_FOUND)\n        return\n    }\n\n    let result = Bundle()\n    result.setValue(account.name, forKey: AccountManager.KEY_ACCOUNT_NAME)\n    result.setValue(MainApp.getAccountType(context: self), forKey: AccountManager.KEY_ACCOUNT_TYPE)\n    result.setValue(NEXTCLOUD_SSO, forKey: AccountManager.KEY_AUTHTOKEN)\n    result.setValue(userId, forKey: Constants.SSO_USER_ID)\n    result.setValue(token, forKey: Constants.SSO_TOKEN)\n    result.setValue(serverUrl, forKey: Constants.SSO_SERVER_URL)\n\n    let data = Intent()\n    data.putExtra(NEXTCLOUD_SSO, result)\n    setResult(RESULT_OK, data)\n    finish()\n}\n```"
    }
]