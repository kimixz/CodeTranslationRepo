[
    {
        "method_name": "createDefaultOCFile",
        "method_code": "Before\n    public void createDefaultOCFile() {\n        mFile = new OCFile(PATH);\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled createDefaultOCFile from OCFileUnitTest.java into Swift.\n\n        Input:\n\n        Method Name: createDefaultOCFile\n\n        Method Code: Before\n    public void createDefaultOCFile() {\n        mFile = new OCFile(PATH);\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc createDefaultOCFile() {\n    mFile = OCFile(path: PATH)\n}\n```"
    },
    {
        "method_name": "writeThenReadAsParcelable",
        "method_code": "Test\n    public void writeThenReadAsParcelable() {\n\n        // Set up mFile with not-default values\n        mFile.setFileId(ID);\n        mFile.setParentId(PARENT_ID);\n        mFile.setStoragePath(STORAGE_PATH);\n        mFile.setMimeType(MIME_TYPE);\n        mFile.setFileLength(FILE_LENGTH);\n        mFile.setCreationTimestamp(CREATION_TIMESTAMP);\n        mFile.setModificationTimestamp(MODIFICATION_TIMESTAMP);\n        mFile.setModificationTimestampAtLastSyncForData(MODIFICATION_TIMESTAMP_AT_LAST_SYNC_FOR_DATA);\n        mFile.setLastSyncDateForProperties(LAST_SYNC_DATE_FOR_PROPERTIES);\n        mFile.setLastSyncDateForData(LAST_SYNC_DATE_FOR_DATA);\n        mFile.setEtag(ETAG);\n        mFile.setSharedViaLink(true);\n        mFile.setSharedWithSharee(true);\n        mFile.setPermissions(PERMISSIONS);\n        mFile.setRemoteId(REMOTE_ID);\n        mFile.setUpdateThumbnailNeeded(true);\n        mFile.setDownloading(true);\n        mFile.setEtagInConflict(ETAG_IN_CONFLICT);\n\n\n        // Write the file data in a Parcel\n        Parcel parcel = Parcel.obtain();\n        mFile.writeToParcel(parcel, mFile.describeContents());\n\n        // Read the data from the parcel\n        parcel.setDataPosition(0);\n        OCFile fileReadFromParcel = OCFile.CREATOR.createFromParcel(parcel);\n\n        // Verify that the received data are correct\n        assertThat(fileReadFromParcel.getRemotePath(), is(PATH));\n        assertThat(fileReadFromParcel.getFileId(), is(ID));\n        assertThat(fileReadFromParcel.getParentId(), is(PARENT_ID));\n        assertThat(fileReadFromParcel.getStoragePath(), is(STORAGE_PATH));\n        assertThat(fileReadFromParcel.getMimeType(), is(MIME_TYPE));\n        assertThat(fileReadFromParcel.getFileLength(), is(FILE_LENGTH));\n        assertThat(fileReadFromParcel.getCreationTimestamp(), is(CREATION_TIMESTAMP));\n        assertThat(fileReadFromParcel.getModificationTimestamp(), is(MODIFICATION_TIMESTAMP));\n        assertThat(\n                fileReadFromParcel.getModificationTimestampAtLastSyncForData(),\n                is(MODIFICATION_TIMESTAMP_AT_LAST_SYNC_FOR_DATA)\n        );\n        assertThat(fileReadFromParcel.getLastSyncDateForProperties(), is(LAST_SYNC_DATE_FOR_PROPERTIES));\n        assertThat(fileReadFromParcel.getLastSyncDateForData(), is(LAST_SYNC_DATE_FOR_DATA));\n        assertThat(fileReadFromParcel.getEtag(), is(ETAG));\n        assertThat(fileReadFromParcel.isSharedViaLink(), is(true));\n        assertThat(fileReadFromParcel.isSharedWithSharee(), is(true));\n        assertThat(fileReadFromParcel.getPermissions(), is(PERMISSIONS));\n        assertThat(fileReadFromParcel.getRemoteId(), is(REMOTE_ID));\n        assertThat(fileReadFromParcel.isUpdateThumbnailNeeded(), is(true));\n        assertThat(fileReadFromParcel.isDownloading(), is(true));\n        assertThat(fileReadFromParcel.getEtagInConflict(), is(ETAG_IN_CONFLICT));\n    }\n",
        "prompt": "\n        Please translate the following Java (Android) method titled writeThenReadAsParcelable from OCFileUnitTest.java into Swift.\n\n        Input:\n\n        Method Name: writeThenReadAsParcelable\n\n        Method Code: Test\n    public void writeThenReadAsParcelable() {\n\n        // Set up mFile with not-default values\n        mFile.setFileId(ID);\n        mFile.setParentId(PARENT_ID);\n        mFile.setStoragePath(STORAGE_PATH);\n        mFile.setMimeType(MIME_TYPE);\n        mFile.setFileLength(FILE_LENGTH);\n        mFile.setCreationTimestamp(CREATION_TIMESTAMP);\n        mFile.setModificationTimestamp(MODIFICATION_TIMESTAMP);\n        mFile.setModificationTimestampAtLastSyncForData(MODIFICATION_TIMESTAMP_AT_LAST_SYNC_FOR_DATA);\n        mFile.setLastSyncDateForProperties(LAST_SYNC_DATE_FOR_PROPERTIES);\n        mFile.setLastSyncDateForData(LAST_SYNC_DATE_FOR_DATA);\n        mFile.setEtag(ETAG);\n        mFile.setSharedViaLink(true);\n        mFile.setSharedWithSharee(true);\n        mFile.setPermissions(PERMISSIONS);\n        mFile.setRemoteId(REMOTE_ID);\n        mFile.setUpdateThumbnailNeeded(true);\n        mFile.setDownloading(true);\n        mFile.setEtagInConflict(ETAG_IN_CONFLICT);\n\n\n        // Write the file data in a Parcel\n        Parcel parcel = Parcel.obtain();\n        mFile.writeToParcel(parcel, mFile.describeContents());\n\n        // Read the data from the parcel\n        parcel.setDataPosition(0);\n        OCFile fileReadFromParcel = OCFile.CREATOR.createFromParcel(parcel);\n\n        // Verify that the received data are correct\n        assertThat(fileReadFromParcel.getRemotePath(), is(PATH));\n        assertThat(fileReadFromParcel.getFileId(), is(ID));\n        assertThat(fileReadFromParcel.getParentId(), is(PARENT_ID));\n        assertThat(fileReadFromParcel.getStoragePath(), is(STORAGE_PATH));\n        assertThat(fileReadFromParcel.getMimeType(), is(MIME_TYPE));\n        assertThat(fileReadFromParcel.getFileLength(), is(FILE_LENGTH));\n        assertThat(fileReadFromParcel.getCreationTimestamp(), is(CREATION_TIMESTAMP));\n        assertThat(fileReadFromParcel.getModificationTimestamp(), is(MODIFICATION_TIMESTAMP));\n        assertThat(\n                fileReadFromParcel.getModificationTimestampAtLastSyncForData(),\n                is(MODIFICATION_TIMESTAMP_AT_LAST_SYNC_FOR_DATA)\n        );\n        assertThat(fileReadFromParcel.getLastSyncDateForProperties(), is(LAST_SYNC_DATE_FOR_PROPERTIES));\n        assertThat(fileReadFromParcel.getLastSyncDateForData(), is(LAST_SYNC_DATE_FOR_DATA));\n        assertThat(fileReadFromParcel.getEtag(), is(ETAG));\n        assertThat(fileReadFromParcel.isSharedViaLink(), is(true));\n        assertThat(fileReadFromParcel.isSharedWithSharee(), is(true));\n        assertThat(fileReadFromParcel.getPermissions(), is(PERMISSIONS));\n        assertThat(fileReadFromParcel.getRemoteId(), is(REMOTE_ID));\n        assertThat(fileReadFromParcel.isUpdateThumbnailNeeded(), is(true));\n        assertThat(fileReadFromParcel.isDownloading(), is(true));\n        assertThat(fileReadFromParcel.getEtagInConflict(), is(ETAG_IN_CONFLICT));\n    }\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc writeThenReadAsParcelable() {\n    // Set up mFile with not-default values\n    mFile.fileId = ID\n    mFile.parentId = PARENT_ID\n    mFile.storagePath = STORAGE_PATH\n    mFile.mimeType = MIME_TYPE\n    mFile.fileLength = FILE_LENGTH\n    mFile.creationTimestamp = CREATION_TIMESTAMP\n    mFile.modificationTimestamp = MODIFICATION_TIMESTAMP\n    mFile.modificationTimestampAtLastSyncForData = MODIFICATION_TIMESTAMP_AT_LAST_SYNC_FOR_DATA\n    mFile.lastSyncDateForProperties = LAST_SYNC_DATE_FOR_PROPERTIES\n    mFile.lastSyncDateForData = LAST_SYNC_DATE_FOR_DATA\n    mFile.etag = ETAG\n    mFile.sharedViaLink = true\n    mFile.sharedWithSharee = true\n    mFile.permissions = PERMISSIONS\n    mFile.remoteId = REMOTE_ID\n    mFile.updateThumbnailNeeded = true\n    mFile.downloading = true\n    mFile.etagInConflict = ETAG_IN_CONFLICT\n\n    // Write the file data in a Parcel\n    let parcel = NSMutableData()\n    let archiver = NSKeyedArchiver(forWritingWith: parcel)\n    mFile.encode(with: archiver)\n    archiver.finishEncoding()\n\n    // Read the data from the parcel\n    let unarchiver = NSKeyedUnarchiver(forReadingWith: parcel as Data)\n    let fileReadFromParcel = OCFile(coder: unarchiver)\n\n    // Verify that the received data are correct\n    XCTAssertEqual(fileReadFromParcel?.remotePath, PATH)\n    XCTAssertEqual(fileReadFromParcel?.fileId, ID)\n    XCTAssertEqual(fileReadFromParcel?.parentId, PARENT_ID)\n    XCTAssertEqual(fileReadFromParcel?.storagePath, STORAGE_PATH)\n    XCTAssertEqual(fileReadFromParcel?.mimeType, MIME_TYPE)\n    XCTAssertEqual(fileReadFromParcel?.fileLength, FILE_LENGTH)\n    XCTAssertEqual(fileReadFromParcel?.creationTimestamp, CREATION_TIMESTAMP)\n    XCTAssertEqual(fileReadFromParcel?.modificationTimestamp, MODIFICATION_TIMESTAMP)\n    XCTAssertEqual(fileReadFromParcel?.modificationTimestampAtLastSyncForData, MODIFICATION_TIMESTAMP_AT_LAST_SYNC_FOR_DATA)\n    XCTAssertEqual(fileReadFromParcel?.lastSyncDateForProperties, LAST_SYNC_DATE_FOR_PROPERTIES)\n    XCTAssertEqual(fileReadFromParcel?.lastSyncDateForData, LAST_SYNC_DATE_FOR_DATA)\n    XCTAssertEqual(fileReadFromParcel?.etag, ETAG)\n    XCTAssertEqual(fileReadFromParcel?.sharedViaLink, true)\n    XCTAssertEqual(fileReadFromParcel?.sharedWithSharee, true)\n    XCTAssertEqual(fileReadFromParcel?.permissions, PERMISSIONS)\n    XCTAssertEqual(fileReadFromParcel?.remoteId, REMOTE_ID)\n    XCTAssertEqual(fileReadFromParcel?.updateThumbnailNeeded, true)\n    XCTAssertEqual(fileReadFromParcel?.downloading, true)\n    XCTAssertEqual(fileReadFromParcel?.etagInConflict, ETAG_IN_CONFLICT)\n}\n```"
    }
]