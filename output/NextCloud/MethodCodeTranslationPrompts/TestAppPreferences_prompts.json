[
    {
        "method_name": "setUp",
        "method_code": "@Before\n        public void setUp() {\n            MockitoAnnotations.initMocks(this);\n            when(appPreferences.getDarkThemeMode()).thenReturn(DarkMode.DARK);\n            registry = new AppPreferencesImpl.ListenerRegistry(appPreferences);\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled setUp from TestAppPreferences.java into Swift.\n\n        Input:\n\n        Method Name: setUp\n\n        Method Code: @Before\n        public void setUp() {\n            MockitoAnnotations.initMocks(this);\n            when(appPreferences.getDarkThemeMode()).thenReturn(DarkMode.DARK);\n            registry = new AppPreferencesImpl.ListenerRegistry(appPreferences);\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport XCTest\nimport Mockingbird\n\nclass TestAppPreferences: XCTestCase {\n    var appPreferences: AppPreferences!\n    var registry: AppPreferencesImpl.ListenerRegistry!\n\n    override func setUp() {\n        super.setUp()\n        appPreferences = mock(AppPreferences.self)\n        given(appPreferences.getDarkThemeMode()).willReturn(.dark)\n        registry = AppPreferencesImpl.ListenerRegistry(appPreferences: appPreferences)\n    }\n}\n```"
    },
    {
        "method_name": "canRemoveListenersFromCallback",
        "method_code": "@Test\n        public void canRemoveListenersFromCallback() {\n\n            // GIVEN\n            //      registery has few listeners\n            //      one listener will try to remove itself and other listener\n            registry.add(listener1);\n            registry.add(listener2);\n            registry.add(listener3);\n            registry.add(listener4);\n\n            doAnswer((i) -> {\n                registry.remove(listener2);\n                registry.remove(listener3);\n                return null;\n            }).when(listener2).onDarkThemeModeChanged(DarkMode.DARK);\n\n            // WHEN\n            //      callback is called twice\n            registry.onSharedPreferenceChanged(NOT_USED_NULL, AppPreferencesImpl.PREF__DARK_THEME);\n            registry.onSharedPreferenceChanged(NOT_USED_NULL, AppPreferencesImpl.PREF__DARK_THEME);\n\n            // THEN\n            //      no ConcurrentModificationException\n            //      1st time, all listeners (including removed) are called\n            //      2nd time removed callbacks are not called\n            verify(listener1, times(2)).onDarkThemeModeChanged(DarkMode.DARK);\n            verify(listener2).onDarkThemeModeChanged(DarkMode.DARK);\n            verify(listener3).onDarkThemeModeChanged(DarkMode.DARK);\n            verify(listener4, times(2)).onDarkThemeModeChanged(DarkMode.DARK);\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled canRemoveListenersFromCallback from TestAppPreferences.java into Swift.\n\n        Input:\n\n        Method Name: canRemoveListenersFromCallback\n\n        Method Code: @Test\n        public void canRemoveListenersFromCallback() {\n\n            // GIVEN\n            //      registery has few listeners\n            //      one listener will try to remove itself and other listener\n            registry.add(listener1);\n            registry.add(listener2);\n            registry.add(listener3);\n            registry.add(listener4);\n\n            doAnswer((i) -> {\n                registry.remove(listener2);\n                registry.remove(listener3);\n                return null;\n            }).when(listener2).onDarkThemeModeChanged(DarkMode.DARK);\n\n            // WHEN\n            //      callback is called twice\n            registry.onSharedPreferenceChanged(NOT_USED_NULL, AppPreferencesImpl.PREF__DARK_THEME);\n            registry.onSharedPreferenceChanged(NOT_USED_NULL, AppPreferencesImpl.PREF__DARK_THEME);\n\n            // THEN\n            //      no ConcurrentModificationException\n            //      1st time, all listeners (including removed) are called\n            //      2nd time removed callbacks are not called\n            verify(listener1, times(2)).onDarkThemeModeChanged(DarkMode.DARK);\n            verify(listener2).onDarkThemeModeChanged(DarkMode.DARK);\n            verify(listener3).onDarkThemeModeChanged(DarkMode.DARK);\n            verify(listener4, times(2)).onDarkThemeModeChanged(DarkMode.DARK);\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc testCanRemoveListenersFromCallback() {\n    // GIVEN\n    //      registry has few listeners\n    //      one listener will try to remove itself and other listener\n    registry.add(listener1)\n    registry.add(listener2)\n    registry.add(listener3)\n    registry.add(listener4)\n\n    stub(listener2) { stub in\n        when(stub.onDarkThemeModeChanged(.dark)).then { _ in\n            registry.remove(listener2)\n            registry.remove(listener3)\n        }\n    }\n\n    // WHEN\n    //      callback is called twice\n    registry.onSharedPreferenceChanged(NOT_USED_NULL, AppPreferencesImpl.PREF__DARK_THEME)\n    registry.onSharedPreferenceChanged(NOT_USED_NULL, AppPreferencesImpl.PREF__DARK_THEME)\n\n    // THEN\n    //      no ConcurrentModificationException\n    //      1st time, all listeners (including removed) are called\n    //      2nd time removed callbacks are not called\n    verify(listener1, times(2)).onDarkThemeModeChanged(.dark)\n    verify(listener2).onDarkThemeModeChanged(.dark)\n    verify(listener3).onDarkThemeModeChanged(.dark)\n    verify(listener4, times(2)).onDarkThemeModeChanged(.dark)\n}\n```"
    },
    {
        "method_name": "nullsAreNotAddedToRegistry",
        "method_code": "@Test\n        public void nullsAreNotAddedToRegistry() {\n            // GIVEN\n            //      registry has no listeners\n            //      attempt to add null listener was made\n            registry.add(null);\n\n            // WHEN\n            //      callback is called\n            registry.onSharedPreferenceChanged(NOT_USED_NULL, AppPreferencesImpl.PREF__DARK_THEME);\n\n            // THEN\n            //      nothing happens\n            //      null was not added to registry\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled nullsAreNotAddedToRegistry from TestAppPreferences.java into Swift.\n\n        Input:\n\n        Method Name: nullsAreNotAddedToRegistry\n\n        Method Code: @Test\n        public void nullsAreNotAddedToRegistry() {\n            // GIVEN\n            //      registry has no listeners\n            //      attempt to add null listener was made\n            registry.add(null);\n\n            // WHEN\n            //      callback is called\n            registry.onSharedPreferenceChanged(NOT_USED_NULL, AppPreferencesImpl.PREF__DARK_THEME);\n\n            // THEN\n            //      nothing happens\n            //      null was not added to registry\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport XCTest\n\nclass TestAppPreferences: XCTestCase {\n    func nullsAreNotAddedToRegistry() {\n        // GIVEN\n        //      registry has no listeners\n        //      attempt to add null listener was made\n        registry.add(nil)\n\n        // WHEN\n        //      callback is called\n        registry.onSharedPreferenceChanged(NOT_USED_NULL, AppPreferencesImpl.PREF__DARK_THEME)\n\n        // THEN\n        //      nothing happens\n        //      null was not added to registry\n    }\n}\n```"
    },
    {
        "method_name": "nullsAreNotRemovedFromRegistry",
        "method_code": "@Test\n        public void nullsAreNotRemovedFromRegistry() {\n            // GIVEN\n            //      registry has no listeners\n\n            // WHEN\n            //      attempt to remove null listener was made\n            registry.remove(null);\n\n            // THEN\n            //      null is ignored\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled nullsAreNotRemovedFromRegistry from TestAppPreferences.java into Swift.\n\n        Input:\n\n        Method Name: nullsAreNotRemovedFromRegistry\n\n        Method Code: @Test\n        public void nullsAreNotRemovedFromRegistry() {\n            // GIVEN\n            //      registry has no listeners\n\n            // WHEN\n            //      attempt to remove null listener was made\n            registry.remove(null);\n\n            // THEN\n            //      null is ignored\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc nullsAreNotRemovedFromRegistry() {\n    // GIVEN\n    //      registry has no listeners\n\n    // WHEN\n    //      attempt to remove null listener was made\n    registry.remove(nil)\n\n    // THEN\n    //      null is ignored\n}\n```"
    },
    {
        "method_name": "setUp",
        "method_code": "@Before\n        public void setUp() {\n            MockitoAnnotations.initMocks(this);\n            when(editor.remove(anyString())).thenReturn(editor);\n            when(sharedPreferences.edit()).thenReturn(editor);\n            appPreferences = new AppPreferencesImpl(testContext, sharedPreferences, userAccountManager);\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled setUp from TestAppPreferences.java into Swift.\n\n        Input:\n\n        Method Name: setUp\n\n        Method Code: @Before\n        public void setUp() {\n            MockitoAnnotations.initMocks(this);\n            when(editor.remove(anyString())).thenReturn(editor);\n            when(sharedPreferences.edit()).thenReturn(editor);\n            appPreferences = new AppPreferencesImpl(testContext, sharedPreferences, userAccountManager);\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport XCTest\nimport Mockingbird\n\nclass TestAppPreferences: XCTestCase {\n    var appPreferences: AppPreferencesImpl!\n    var sharedPreferences: SharedPreferencesMock!\n    var editor: SharedPreferencesEditorMock!\n    var userAccountManager: UserAccountManagerMock!\n    var testContext: TestContext!\n\n    override func setUp() {\n        super.setUp()\n        sharedPreferences = mock(SharedPreferences.self)\n        editor = mock(SharedPreferencesEditor.self)\n        userAccountManager = mock(UserAccountManager.self)\n        testContext = TestContext()\n\n        given(editor.remove(any())).willReturn(editor)\n        given(sharedPreferences.edit()).willReturn(editor)\n        appPreferences = AppPreferencesImpl(testContext: testContext, sharedPreferences: sharedPreferences, userAccountManager: userAccountManager)\n    }\n}\n```"
    },
    {
        "method_name": "removeLegacyPreferences",
        "method_code": "@Test\n        public void removeLegacyPreferences() {\n            appPreferences.removeLegacyPreferences();\n            InOrder inOrder = inOrder(editor);\n            inOrder.verify(editor).remove(\"instant_uploading\");\n            inOrder.verify(editor).remove(\"instant_video_uploading\");\n            inOrder.verify(editor).remove(\"instant_upload_path\");\n            inOrder.verify(editor).remove(\"instant_upload_path_use_subfolders\");\n            inOrder.verify(editor).remove(\"instant_upload_on_wifi\");\n            inOrder.verify(editor).remove(\"instant_upload_on_charging\");\n            inOrder.verify(editor).remove(\"instant_video_upload_path\");\n            inOrder.verify(editor).remove(\"instant_video_upload_path_use_subfolders\");\n            inOrder.verify(editor).remove(\"instant_video_upload_on_wifi\");\n            inOrder.verify(editor).remove(\"instant_video_uploading\");\n            inOrder.verify(editor).remove(\"instant_video_upload_on_charging\");\n            inOrder.verify(editor).remove(\"prefs_instant_behaviour\");\n            inOrder.verify(editor).apply();\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled removeLegacyPreferences from TestAppPreferences.java into Swift.\n\n        Input:\n\n        Method Name: removeLegacyPreferences\n\n        Method Code: @Test\n        public void removeLegacyPreferences() {\n            appPreferences.removeLegacyPreferences();\n            InOrder inOrder = inOrder(editor);\n            inOrder.verify(editor).remove(\"instant_uploading\");\n            inOrder.verify(editor).remove(\"instant_video_uploading\");\n            inOrder.verify(editor).remove(\"instant_upload_path\");\n            inOrder.verify(editor).remove(\"instant_upload_path_use_subfolders\");\n            inOrder.verify(editor).remove(\"instant_upload_on_wifi\");\n            inOrder.verify(editor).remove(\"instant_upload_on_charging\");\n            inOrder.verify(editor).remove(\"instant_video_upload_path\");\n            inOrder.verify(editor).remove(\"instant_video_upload_path_use_subfolders\");\n            inOrder.verify(editor).remove(\"instant_video_upload_on_wifi\");\n            inOrder.verify(editor).remove(\"instant_video_uploading\");\n            inOrder.verify(editor).remove(\"instant_video_upload_on_charging\");\n            inOrder.verify(editor).remove(\"prefs_instant_behaviour\");\n            inOrder.verify(editor).apply();\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc removeLegacyPreferences() {\n    appPreferences.removeLegacyPreferences()\n    let inOrder = InOrder(editor)\n    inOrder.verify(editor).remove(\"instant_uploading\")\n    inOrder.verify(editor).remove(\"instant_video_uploading\")\n    inOrder.verify(editor).remove(\"instant_upload_path\")\n    inOrder.verify(editor).remove(\"instant_upload_path_use_subfolders\")\n    inOrder.verify(editor).remove(\"instant_upload_on_wifi\")\n    inOrder.verify(editor).remove(\"instant_upload_on_charging\")\n    inOrder.verify(editor).remove(\"instant_video_upload_path\")\n    inOrder.verify(editor).remove(\"instant_video_upload_path_use_subfolders\")\n    inOrder.verify(editor).remove(\"instant_video_upload_on_wifi\")\n    inOrder.verify(editor).remove(\"instant_video_uploading\")\n    inOrder.verify(editor).remove(\"instant_video_upload_on_charging\")\n    inOrder.verify(editor).remove(\"prefs_instant_behaviour\")\n    inOrder.verify(editor).apply()\n}\n```"
    },
    {
        "method_name": "testBruteForceDelay",
        "method_code": "@Test\n        public void testBruteForceDelay() {\n            assertEquals(0, appPreferences.computeBruteForceDelay(0));\n            assertEquals(0, appPreferences.computeBruteForceDelay(2));\n            assertEquals(1, appPreferences.computeBruteForceDelay(3));\n            assertEquals(1, appPreferences.computeBruteForceDelay(5));\n            assertEquals(2, appPreferences.computeBruteForceDelay(6));\n            assertEquals(3, appPreferences.computeBruteForceDelay(11));\n            assertEquals(8, appPreferences.computeBruteForceDelay(25));\n            assertEquals(10, appPreferences.computeBruteForceDelay(50));\n            assertEquals(10, appPreferences.computeBruteForceDelay(100));\n        }",
        "prompt": "\n        Please translate the following Java (Android) method titled testBruteForceDelay from TestAppPreferences.java into Swift.\n\n        Input:\n\n        Method Name: testBruteForceDelay\n\n        Method Code: @Test\n        public void testBruteForceDelay() {\n            assertEquals(0, appPreferences.computeBruteForceDelay(0));\n            assertEquals(0, appPreferences.computeBruteForceDelay(2));\n            assertEquals(1, appPreferences.computeBruteForceDelay(3));\n            assertEquals(1, appPreferences.computeBruteForceDelay(5));\n            assertEquals(2, appPreferences.computeBruteForceDelay(6));\n            assertEquals(3, appPreferences.computeBruteForceDelay(11));\n            assertEquals(8, appPreferences.computeBruteForceDelay(25));\n            assertEquals(10, appPreferences.computeBruteForceDelay(50));\n            assertEquals(10, appPreferences.computeBruteForceDelay(100));\n        }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nimport XCTest\n\nclass TestAppPreferences: XCTestCase {\n    var appPreferences: AppPreferences!\n\n    override func setUp() {\n        super.setUp()\n        appPreferences = AppPreferences()\n    }\n\n    func testBruteForceDelay() {\n        XCTAssertEqual(0, appPreferences.computeBruteForceDelay(0))\n        XCTAssertEqual(0, appPreferences.computeBruteForceDelay(2))\n        XCTAssertEqual(1, appPreferences.computeBruteForceDelay(3))\n        XCTAssertEqual(1, appPreferences.computeBruteForceDelay(5))\n        XCTAssertEqual(2, appPreferences.computeBruteForceDelay(6))\n        XCTAssertEqual(3, appPreferences.computeBruteForceDelay(11))\n        XCTAssertEqual(8, appPreferences.computeBruteForceDelay(25))\n        XCTAssertEqual(10, appPreferences.computeBruteForceDelay(50))\n        XCTAssertEqual(10, appPreferences.computeBruteForceDelay(100))\n    }\n}\n```"
    }
]