[
    {
        "method_name": "storeExternalLink",
        "method_code": "public long storeExternalLink(ExternalLink externalLink) {\n        Log_OC.v(TAG, \"Adding \" + externalLink.getName());\n\n        ContentValues cv = createContentValuesFromExternalLink(externalLink);\n\n        Uri result = mContentResolver.insert(ProviderMeta.ProviderTableMeta.CONTENT_URI_EXTERNAL_LINKS, cv);\n\n        if (result != null) {\n            return Long.parseLong(result.getPathSegments().get(1));\n        } else {\n            Log_OC.e(TAG, \"Failed to insert item \" + externalLink.getName() + \" into external link db.\");\n            return -1;\n        }\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled storeExternalLink from ExternalLinksProvider.java into Swift.\n\n        Input:\n\n        Method Name: storeExternalLink\n\n        Method Code: public long storeExternalLink(ExternalLink externalLink) {\n        Log_OC.v(TAG, \"Adding \" + externalLink.getName());\n\n        ContentValues cv = createContentValuesFromExternalLink(externalLink);\n\n        Uri result = mContentResolver.insert(ProviderMeta.ProviderTableMeta.CONTENT_URI_EXTERNAL_LINKS, cv);\n\n        if (result != null) {\n            return Long.parseLong(result.getPathSegments().get(1));\n        } else {\n            Log_OC.e(TAG, \"Failed to insert item \" + externalLink.getName() + \" into external link db.\");\n            return -1;\n        }\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc storeExternalLink(_ externalLink: ExternalLink) -> Int64 {\n    Log_OC.v(TAG, \"Adding \\(externalLink.getName())\")\n\n    let cv = createContentValuesFromExternalLink(externalLink)\n\n    if let result = mContentResolver.insert(ProviderMeta.ProviderTableMeta.CONTENT_URI_EXTERNAL_LINKS, cv) {\n        return Int64(result.pathComponents[1]) ?? -1\n    } else {\n        Log_OC.e(TAG, \"Failed to insert item \\(externalLink.getName()) into external link db.\")\n        return -1\n    }\n}\n```"
    },
    {
        "method_name": "deleteAllExternalLinks",
        "method_code": "public int deleteAllExternalLinks() {\n        return mContentResolver.delete(ProviderMeta.ProviderTableMeta.CONTENT_URI_EXTERNAL_LINKS,\n                                       null,\n                                       null);\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled deleteAllExternalLinks from ExternalLinksProvider.java into Swift.\n\n        Input:\n\n        Method Name: deleteAllExternalLinks\n\n        Method Code: public int deleteAllExternalLinks() {\n        return mContentResolver.delete(ProviderMeta.ProviderTableMeta.CONTENT_URI_EXTERNAL_LINKS,\n                                       null,\n                                       null);\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc deleteAllExternalLinks() -> Int {\n    return mContentResolver.delete(ProviderMeta.ProviderTableMeta.CONTENT_URI_EXTERNAL_LINKS, where: nil, args: nil)\n}\n```"
    },
    {
        "method_name": "getExternalLink",
        "method_code": "public List<ExternalLink> getExternalLink(ExternalLinkType type) {\n        Cursor cursor = mContentResolver.query(\n                ProviderMeta.ProviderTableMeta.CONTENT_URI_EXTERNAL_LINKS,\n                null,\n                \"type = ?\",\n                new String[]{type.toString()},\n                null\n        );\n\n        if (cursor != null) {\n            List<ExternalLink> list = new ArrayList<>();\n            if (cursor.moveToFirst()) {\n                do {\n                    ExternalLink externalLink = createExternalLinkFromCursor(cursor);\n                    if (externalLink == null) {\n                        Log_OC.e(TAG, \"ExternalLink could not be created from cursor\");\n                    } else {\n                        list.add(externalLink);\n                    }\n                } while (cursor.moveToNext());\n\n            }\n            cursor.close();\n            return list;\n        } else {\n            Log_OC.e(TAG, \"DB error restoring externalLinks.\");\n        }\n\n        return new ArrayList<>();\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled getExternalLink from ExternalLinksProvider.java into Swift.\n\n        Input:\n\n        Method Name: getExternalLink\n\n        Method Code: public List<ExternalLink> getExternalLink(ExternalLinkType type) {\n        Cursor cursor = mContentResolver.query(\n                ProviderMeta.ProviderTableMeta.CONTENT_URI_EXTERNAL_LINKS,\n                null,\n                \"type = ?\",\n                new String[]{type.toString()},\n                null\n        );\n\n        if (cursor != null) {\n            List<ExternalLink> list = new ArrayList<>();\n            if (cursor.moveToFirst()) {\n                do {\n                    ExternalLink externalLink = createExternalLinkFromCursor(cursor);\n                    if (externalLink == null) {\n                        Log_OC.e(TAG, \"ExternalLink could not be created from cursor\");\n                    } else {\n                        list.add(externalLink);\n                    }\n                } while (cursor.moveToNext());\n\n            }\n            cursor.close();\n            return list;\n        } else {\n            Log_OC.e(TAG, \"DB error restoring externalLinks.\");\n        }\n\n        return new ArrayList<>();\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getExternalLink(type: ExternalLinkType) -> [ExternalLink] {\n    let contentUri = ProviderMeta.ProviderTableMeta.CONTENT_URI_EXTERNAL_LINKS\n    let selection = \"type = ?\"\n    let selectionArgs = [type.toString()]\n\n    if let cursor = mContentResolver.query(contentUri, null, selection, selectionArgs, null) {\n        var list = [ExternalLink]()\n        if cursor.moveToFirst() {\n            repeat {\n                if let externalLink = createExternalLinkFromCursor(cursor) {\n                    list.append(externalLink)\n                } else {\n                    Log_OC.e(TAG, \"ExternalLink could not be created from cursor\")\n                }\n            } while cursor.moveToNext()\n        }\n        cursor.close()\n        return list\n    } else {\n        Log_OC.e(TAG, \"DB error restoring externalLinks.\")\n    }\n\n    return []\n}\n```"
    },
    {
        "method_name": "createContentValuesFromExternalLink",
        "method_code": "@NonNull\n    private ContentValues createContentValuesFromExternalLink(ExternalLink externalLink) {\n        ContentValues cv = new ContentValues();\n        cv.put(ProviderMeta.ProviderTableMeta.EXTERNAL_LINKS_ICON_URL, externalLink.getIconUrl());\n        cv.put(ProviderMeta.ProviderTableMeta.EXTERNAL_LINKS_LANGUAGE, externalLink.getLanguage());\n        cv.put(ProviderMeta.ProviderTableMeta.EXTERNAL_LINKS_TYPE, externalLink.getType().toString());\n        cv.put(ProviderMeta.ProviderTableMeta.EXTERNAL_LINKS_NAME, externalLink.getName());\n        cv.put(ProviderMeta.ProviderTableMeta.EXTERNAL_LINKS_URL, externalLink.getUrl());\n        cv.put(ProviderMeta.ProviderTableMeta.EXTERNAL_LINKS_REDIRECT, externalLink.getRedirect());\n        return cv;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled createContentValuesFromExternalLink from ExternalLinksProvider.java into Swift.\n\n        Input:\n\n        Method Name: createContentValuesFromExternalLink\n\n        Method Code: @NonNull\n    private ContentValues createContentValuesFromExternalLink(ExternalLink externalLink) {\n        ContentValues cv = new ContentValues();\n        cv.put(ProviderMeta.ProviderTableMeta.EXTERNAL_LINKS_ICON_URL, externalLink.getIconUrl());\n        cv.put(ProviderMeta.ProviderTableMeta.EXTERNAL_LINKS_LANGUAGE, externalLink.getLanguage());\n        cv.put(ProviderMeta.ProviderTableMeta.EXTERNAL_LINKS_TYPE, externalLink.getType().toString());\n        cv.put(ProviderMeta.ProviderTableMeta.EXTERNAL_LINKS_NAME, externalLink.getName());\n        cv.put(ProviderMeta.ProviderTableMeta.EXTERNAL_LINKS_URL, externalLink.getUrl());\n        cv.put(ProviderMeta.ProviderTableMeta.EXTERNAL_LINKS_REDIRECT, externalLink.getRedirect());\n        return cv;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func createContentValuesFromExternalLink(_ externalLink: ExternalLink) -> [String: Any] {\n    var cv: [String: Any] = [:]\n    cv[ProviderMeta.ProviderTableMeta.EXTERNAL_LINKS_ICON_URL] = externalLink.iconUrl\n    cv[ProviderMeta.ProviderTableMeta.EXTERNAL_LINKS_LANGUAGE] = externalLink.language\n    cv[ProviderMeta.ProviderTableMeta.EXTERNAL_LINKS_TYPE] = externalLink.type.rawValue\n    cv[ProviderMeta.ProviderTableMeta.EXTERNAL_LINKS_NAME] = externalLink.name\n    cv[ProviderMeta.ProviderTableMeta.EXTERNAL_LINKS_URL] = externalLink.url\n    cv[ProviderMeta.ProviderTableMeta.EXTERNAL_LINKS_REDIRECT] = externalLink.redirect\n    return cv\n}\n```"
    },
    {
        "method_name": "createExternalLinkFromCursor",
        "method_code": "private ExternalLink createExternalLinkFromCursor(Cursor cursor) {\n        ExternalLink externalLink = null;\n        if (cursor != null) {\n            int id = cursor.getInt(cursor.getColumnIndexOrThrow(ProviderMeta.ProviderTableMeta._ID));\n            String iconUrl = cursor.getString(cursor.getColumnIndexOrThrow(\n                    ProviderMeta.ProviderTableMeta.EXTERNAL_LINKS_ICON_URL));\n            String language = cursor.getString(cursor.getColumnIndexOrThrow(\n                    ProviderMeta.ProviderTableMeta.EXTERNAL_LINKS_LANGUAGE));\n            ExternalLinkType type;\n            switch (cursor.getString(cursor.getColumnIndexOrThrow(\n                    ProviderMeta.ProviderTableMeta.EXTERNAL_LINKS_TYPE))) {\n                case \"link\":\n                    type = ExternalLinkType.LINK;\n                    break;\n                case \"settings\":\n                    type = ExternalLinkType.SETTINGS;\n                    break;\n                case \"quota\":\n                    type = ExternalLinkType.QUOTA;\n                    break;\n                default:\n                    type = ExternalLinkType.UNKNOWN;\n                    break;\n            }\n            String name = cursor.getString(cursor.getColumnIndexOrThrow(ProviderMeta.ProviderTableMeta.EXTERNAL_LINKS_NAME));\n            String url = cursor.getString(cursor.getColumnIndexOrThrow(ProviderMeta.ProviderTableMeta.EXTERNAL_LINKS_URL));\n            boolean redirect = cursor.getInt(\n                    cursor.getColumnIndexOrThrow(ProviderMeta.ProviderTableMeta.EXTERNAL_LINKS_REDIRECT)) == 1;\n\n            externalLink = new ExternalLink(id, iconUrl, language, type, name, url, redirect);\n        }\n        return externalLink;\n    }",
        "prompt": "\n        Please translate the following Java (Android) method titled createExternalLinkFromCursor from ExternalLinksProvider.java into Swift.\n\n        Input:\n\n        Method Name: createExternalLinkFromCursor\n\n        Method Code: private ExternalLink createExternalLinkFromCursor(Cursor cursor) {\n        ExternalLink externalLink = null;\n        if (cursor != null) {\n            int id = cursor.getInt(cursor.getColumnIndexOrThrow(ProviderMeta.ProviderTableMeta._ID));\n            String iconUrl = cursor.getString(cursor.getColumnIndexOrThrow(\n                    ProviderMeta.ProviderTableMeta.EXTERNAL_LINKS_ICON_URL));\n            String language = cursor.getString(cursor.getColumnIndexOrThrow(\n                    ProviderMeta.ProviderTableMeta.EXTERNAL_LINKS_LANGUAGE));\n            ExternalLinkType type;\n            switch (cursor.getString(cursor.getColumnIndexOrThrow(\n                    ProviderMeta.ProviderTableMeta.EXTERNAL_LINKS_TYPE))) {\n                case \"link\":\n                    type = ExternalLinkType.LINK;\n                    break;\n                case \"settings\":\n                    type = ExternalLinkType.SETTINGS;\n                    break;\n                case \"quota\":\n                    type = ExternalLinkType.QUOTA;\n                    break;\n                default:\n                    type = ExternalLinkType.UNKNOWN;\n                    break;\n            }\n            String name = cursor.getString(cursor.getColumnIndexOrThrow(ProviderMeta.ProviderTableMeta.EXTERNAL_LINKS_NAME));\n            String url = cursor.getString(cursor.getColumnIndexOrThrow(ProviderMeta.ProviderTableMeta.EXTERNAL_LINKS_URL));\n            boolean redirect = cursor.getInt(\n                    cursor.getColumnIndexOrThrow(ProviderMeta.ProviderTableMeta.EXTERNAL_LINKS_REDIRECT)) == 1;\n\n            externalLink = new ExternalLink(id, iconUrl, language, type, name, url, redirect);\n        }\n        return externalLink;\n    }\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func createExternalLinkFromCursor(cursor: Cursor?) -> ExternalLink? {\n    var externalLink: ExternalLink? = nil\n    if let cursor = cursor {\n        let id = cursor.getInt(cursor.getColumnIndexOrThrow(ProviderMeta.ProviderTableMeta._ID))\n        let iconUrl = cursor.getString(cursor.getColumnIndexOrThrow(ProviderMeta.ProviderTableMeta.EXTERNAL_LINKS_ICON_URL))\n        let language = cursor.getString(cursor.getColumnIndexOrThrow(ProviderMeta.ProviderTableMeta.EXTERNAL_LINKS_LANGUAGE))\n        \n        let typeString = cursor.getString(cursor.getColumnIndexOrThrow(ProviderMeta.ProviderTableMeta.EXTERNAL_LINKS_TYPE))\n        let type: ExternalLinkType\n        switch typeString {\n        case \"link\":\n            type = .link\n        case \"settings\":\n            type = .settings\n        case \"quota\":\n            type = .quota\n        default:\n            type = .unknown\n        }\n        \n        let name = cursor.getString(cursor.getColumnIndexOrThrow(ProviderMeta.ProviderTableMeta.EXTERNAL_LINKS_NAME))\n        let url = cursor.getString(cursor.getColumnIndexOrThrow(ProviderMeta.ProviderTableMeta.EXTERNAL_LINKS_URL))\n        let redirect = cursor.getInt(cursor.getColumnIndexOrThrow(ProviderMeta.ProviderTableMeta.EXTERNAL_LINKS_REDIRECT)) == 1\n        \n        externalLink = ExternalLink(id: id, iconUrl: iconUrl, language: language, type: type, name: name, url: url, redirect: redirect)\n    }\n    return externalLink\n}\n```"
    }
]