[
    {
        "method_name": "getBinding",
        "method_code": "blic ListFragmentBinding getBinding() {\n        return binding;\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getBinding from ExtendedListFragment.java into Swift.\n\n        Input:\n\n        Method Name: getBinding\n\n        Method Code: blic ListFragmentBinding getBinding() {\n        return binding;\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getBinding() -> ListFragmentBinding {\n    return binding\n}\n```"
    },
    {
        "method_name": "setRecyclerViewAdapter",
        "method_code": "otected void setRecyclerViewAdapter(RecyclerView.Adapter recyclerViewAdapter) {\n        mRecyclerView.setAdapter(recyclerViewAdapter);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setRecyclerViewAdapter from ExtendedListFragment.java into Swift.\n\n        Input:\n\n        Method Name: setRecyclerViewAdapter\n\n        Method Code: otected void setRecyclerViewAdapter(RecyclerView.Adapter recyclerViewAdapter) {\n        mRecyclerView.setAdapter(recyclerViewAdapter);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setRecyclerViewAdapter(_ recyclerViewAdapter: UICollectionViewDataSource) {\n    mRecyclerView.dataSource = recyclerViewAdapter\n}\n```"
    },
    {
        "method_name": "getRecyclerView",
        "method_code": "otected RecyclerView getRecyclerView() {\n        return mRecyclerView;\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getRecyclerView from ExtendedListFragment.java into Swift.\n\n        Input:\n\n        Method Name: getRecyclerView\n\n        Method Code: otected RecyclerView getRecyclerView() {\n        return mRecyclerView;\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getRecyclerView() -> UICollectionView? {\n    return mRecyclerView\n}\n```"
    },
    {
        "method_name": "setLoading",
        "method_code": "blic void setLoading(boolean enabled) {\n        mRefreshListLayout.setRefreshing(enabled);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setLoading from ExtendedListFragment.java into Swift.\n\n        Input:\n\n        Method Name: setLoading\n\n        Method Code: blic void setLoading(boolean enabled) {\n        mRefreshListLayout.setRefreshing(enabled);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setLoading(_ enabled: Bool) {\n    mRefreshListLayout.setRefreshing(enabled)\n}\n```"
    },
    {
        "method_name": "switchToGridView",
        "method_code": "blic void switchToGridView() {\n        if (!isGridEnabled()) {\n            getRecyclerView().setLayoutManager(new GridLayoutManager(getContext(), getColumnsCount()));\n        }\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled switchToGridView from ExtendedListFragment.java into Swift.\n\n        Input:\n\n        Method Name: switchToGridView\n\n        Method Code: blic void switchToGridView() {\n        if (!isGridEnabled()) {\n            getRecyclerView().setLayoutManager(new GridLayoutManager(getContext(), getColumnsCount()));\n        }\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc switchToGridView() {\n    if !isGridEnabled() {\n        getRecyclerView().setCollectionViewLayout(UICollectionViewFlowLayout(), animated: true)\n    }\n}\n```"
    },
    {
        "method_name": "switchToListView",
        "method_code": "blic void switchToListView() {\n        if (isGridEnabled()) {\n            getRecyclerView().setLayoutManager(new LinearLayoutManager(getContext()));\n        }\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled switchToListView from ExtendedListFragment.java into Swift.\n\n        Input:\n\n        Method Name: switchToListView\n\n        Method Code: blic void switchToListView() {\n        if (isGridEnabled()) {\n            getRecyclerView().setLayoutManager(new LinearLayoutManager(getContext()));\n        }\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc switchToListView() {\n    if isGridEnabled() {\n        getRecyclerView().setLayoutManager(LinearLayoutManager(context: getContext()))\n    }\n}\n```"
    },
    {
        "method_name": "isGridEnabled",
        "method_code": "blic boolean isGridEnabled() {\n        if (getRecyclerView() != null) {\n            return getRecyclerView().getLayoutManager() instanceof GridLayoutManager;\n        } else {\n            return false;\n        }\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled isGridEnabled from ExtendedListFragment.java into Swift.\n\n        Input:\n\n        Method Name: isGridEnabled\n\n        Method Code: blic boolean isGridEnabled() {\n        if (getRecyclerView() != null) {\n            return getRecyclerView().getLayoutManager() instanceof GridLayoutManager;\n        } else {\n            return false;\n        }\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc isGridEnabled() -> Bool {\n    if let recyclerView = getRecyclerView() {\n        return recyclerView.layoutManager is GridLayoutManager\n    } else {\n        return false\n    }\n}\n```"
    },
    {
        "method_name": "onCreateOptionsMenu",
        "method_code": "verride\n    public void onCreateOptionsMenu(Menu menu, @NonNull MenuInflater inflater) {\n        final MenuItem item = menu.findItem(R.id.action_search);\n        searchView = (SearchView) MenuItemCompat.getActionView(item);\n        viewThemeUtils.androidx.themeToolbarSearchView(searchView);\n        closeButton = searchView.findViewById(androidx.appcompat.R.id.search_close_btn);\n        searchView.setOnQueryTextListener(this);\n        searchView.setOnCloseListener(this);\n\n        final Handler handler = new Handler(Looper.getMainLooper());\n\n        DisplayMetrics displaymetrics = new DisplayMetrics();\n        Activity activity;\n        if ((activity = getActivity()) != null) {\n            activity.getWindowManager().getDefaultDisplay().getMetrics(displaymetrics);\n            int width = displaymetrics.widthPixels;\n            if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {\n                searchView.setMaxWidth((int) (width * 0.4));\n            } else {\n                if (activity instanceof FolderPickerActivity) {\n                    searchView.setMaxWidth((int) (width * 0.8));\n                } else {\n                    searchView.setMaxWidth(width);\n                }\n            }\n        }\n\n        searchView.setOnQueryTextFocusChangeListener((v, hasFocus) -> handler.post(() -> {\n            if (getActivity() != null && !(getActivity() instanceof FolderPickerActivity)\n                && !(getActivity() instanceof UploadFilesActivity)) {\n                if (getActivity() instanceof FileDisplayActivity) {\n                    Fragment fragment = ((FileDisplayActivity) getActivity()).getLeftFragment();\n                    if (fragment instanceof OCFileListFragment) {\n                        ((OCFileListFragment) fragment).setFabVisible(!hasFocus);\n                    }\n                }\n                if (TextUtils.isEmpty(searchView.getQuery())) {\n                    closeButton.setVisibility(View.INVISIBLE);\n                }\n            }\n        }));\n\n        // On close -> empty field, show keyboard and\n        closeButton.setOnClickListener(view -> {\n            searchView.setQuery(\"\", true);\n            searchView.requestFocus();\n            searchView.onActionViewExpanded();\n\n            InputMethodManager inputMethodManager =\n                (InputMethodManager) getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);\n\n            if (inputMethodManager != null) {\n                inputMethodManager.showSoftInput(searchView, InputMethodManager.SHOW_IMPLICIT);\n            }\n        });\n\n        LinearLayout searchBar = searchView.findViewById(R.id.search_bar);\n        searchBar.setLayoutTransition(new LayoutTransition());\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreateOptionsMenu from ExtendedListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onCreateOptionsMenu\n\n        Method Code: verride\n    public void onCreateOptionsMenu(Menu menu, @NonNull MenuInflater inflater) {\n        final MenuItem item = menu.findItem(R.id.action_search);\n        searchView = (SearchView) MenuItemCompat.getActionView(item);\n        viewThemeUtils.androidx.themeToolbarSearchView(searchView);\n        closeButton = searchView.findViewById(androidx.appcompat.R.id.search_close_btn);\n        searchView.setOnQueryTextListener(this);\n        searchView.setOnCloseListener(this);\n\n        final Handler handler = new Handler(Looper.getMainLooper());\n\n        DisplayMetrics displaymetrics = new DisplayMetrics();\n        Activity activity;\n        if ((activity = getActivity()) != null) {\n            activity.getWindowManager().getDefaultDisplay().getMetrics(displaymetrics);\n            int width = displaymetrics.widthPixels;\n            if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {\n                searchView.setMaxWidth((int) (width * 0.4));\n            } else {\n                if (activity instanceof FolderPickerActivity) {\n                    searchView.setMaxWidth((int) (width * 0.8));\n                } else {\n                    searchView.setMaxWidth(width);\n                }\n            }\n        }\n\n        searchView.setOnQueryTextFocusChangeListener((v, hasFocus) -> handler.post(() -> {\n            if (getActivity() != null && !(getActivity() instanceof FolderPickerActivity)\n                && !(getActivity() instanceof UploadFilesActivity)) {\n                if (getActivity() instanceof FileDisplayActivity) {\n                    Fragment fragment = ((FileDisplayActivity) getActivity()).getLeftFragment();\n                    if (fragment instanceof OCFileListFragment) {\n                        ((OCFileListFragment) fragment).setFabVisible(!hasFocus);\n                    }\n                }\n                if (TextUtils.isEmpty(searchView.getQuery())) {\n                    closeButton.setVisibility(View.INVISIBLE);\n                }\n            }\n        }));\n\n        // On close -> empty field, show keyboard and\n        closeButton.setOnClickListener(view -> {\n            searchView.setQuery(\"\", true);\n            searchView.requestFocus();\n            searchView.onActionViewExpanded();\n\n            InputMethodManager inputMethodManager =\n                (InputMethodManager) getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);\n\n            if (inputMethodManager != null) {\n                inputMethodManager.showSoftInput(searchView, InputMethodManager.SHOW_IMPLICIT);\n            }\n        });\n\n        LinearLayout searchBar = searchView.findViewById(R.id.search_bar);\n        searchBar.setLayoutTransition(new LayoutTransition());\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onCreateOptionsMenu(_ menu: Menu, inflater: MenuInflater) {\n    guard let item = menu.findItem(withId: R.id.action_search) else { return }\n    searchView = item.actionView as? UISearchBar\n    viewThemeUtils.androidx.themeToolbarSearchView(searchView)\n    closeButton = searchView?.value(forKey: \"cancelButton\") as? UIButton\n    searchView?.delegate = self\n\n    let handler = Handler(Looper.getMainLooper())\n\n    let displayMetrics = UIScreen.main.bounds\n    let width = displayMetrics.width\n    if let activity = self.activity {\n        if activity.traitCollection.verticalSizeClass == .compact {\n            searchView?.setWidth(width * 0.4)\n        } else {\n            if activity is FolderPickerActivity {\n                searchView?.setWidth(width * 0.8)\n            } else {\n                searchView?.setWidth(width)\n            }\n        }\n    }\n\n    searchView?.setOnFocusChangeListener { [weak self] (view, hasFocus) in\n        handler.post {\n            guard let self = self, let activity = self.activity else { return }\n            if !(activity is FolderPickerActivity) && !(activity is UploadFilesActivity) {\n                if let fileDisplayActivity = activity as? FileDisplayActivity,\n                   let fragment = fileDisplayActivity.getLeftFragment() as? OCFileListFragment {\n                    fragment.setFabVisible(!hasFocus)\n                }\n                if searchView?.text?.isEmpty ?? true {\n                    self.closeButton?.isHidden = true\n                }\n            }\n        }\n    }\n\n    closeButton?.addTarget(self, action: #selector(closeButtonTapped), for: .touchUpInside)\n\n    if let searchBar = searchView?.value(forKey: \"searchBar\") as? UIView {\n        searchBar.layoutTransition = LayoutTransition()\n    }\n}\n\n@objc func closeButtonTapped() {\n    searchView?.text = \"\"\n    searchView?.becomeFirstResponder()\n    searchView?.showsCancelButton = true\n\n    if let inputMethodManager = activity?.getSystemService(Context.INPUT_METHOD_SERVICE) as? InputMethodManager {\n        inputMethodManager.showSoftInput(searchView, InputMethodManager.SHOW_IMPLICIT)\n    }\n}\n```"
    },
    {
        "method_name": "onQueryTextChange",
        "method_code": "blic boolean onQueryTextChange(final String query) {\n        // After 300 ms, set the query\n\n        closeButton.setVisibility(View.VISIBLE);\n        if (query.isEmpty()) {\n            closeButton.setVisibility(View.INVISIBLE);\n        }\n        return false;\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onQueryTextChange from ExtendedListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onQueryTextChange\n\n        Method Code: blic boolean onQueryTextChange(final String query) {\n        // After 300 ms, set the query\n\n        closeButton.setVisibility(View.VISIBLE);\n        if (query.isEmpty()) {\n            closeButton.setVisibility(View.INVISIBLE);\n        }\n        return false;\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onQueryTextChange(_ query: String) -> Bool {\n    // After 300 ms, set the query\n\n    closeButton.isHidden = false\n    if query.isEmpty {\n        closeButton.isHidden = true\n    }\n    return false\n}\n```"
    },
    {
        "method_name": "onQueryTextSubmit",
        "method_code": "verride\n    public boolean onQueryTextSubmit(String query) {\n        RecyclerView.Adapter adapter = getRecyclerView().getAdapter();\n        if (adapter instanceof OCFileListAdapter) {\n            ArrayList<String> listOfHiddenFiles = ((OCFileListAdapter) adapter).listOfHiddenFiles;\n            performSearch(query, listOfHiddenFiles, false);\n            return true;\n        }\n        if (adapter instanceof LocalFileListAdapter) {\n            performSearch(query, new ArrayList<>(), false);\n            return true;\n        }\n        return false;\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onQueryTextSubmit from ExtendedListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onQueryTextSubmit\n\n        Method Code: verride\n    public boolean onQueryTextSubmit(String query) {\n        RecyclerView.Adapter adapter = getRecyclerView().getAdapter();\n        if (adapter instanceof OCFileListAdapter) {\n            ArrayList<String> listOfHiddenFiles = ((OCFileListAdapter) adapter).listOfHiddenFiles;\n            performSearch(query, listOfHiddenFiles, false);\n            return true;\n        }\n        if (adapter instanceof LocalFileListAdapter) {\n            performSearch(query, new ArrayList<>(), false);\n            return true;\n        }\n        return false;\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onQueryTextSubmit(_ query: String) -> Bool {\n    if let adapter = getRecyclerView().adapter as? OCFileListAdapter {\n        let listOfHiddenFiles = adapter.listOfHiddenFiles\n        performSearch(query, listOfHiddenFiles, false)\n        return true\n    }\n    if getRecyclerView().adapter is LocalFileListAdapter {\n        performSearch(query, [], false)\n        return true\n    }\n    return false\n}\n```"
    },
    {
        "method_name": "performSearch",
        "method_code": "blic void performSearch(final String query, final ArrayList<String> listOfHiddenFiles, boolean isBackPressed) {\n        handler.removeCallbacksAndMessages(null);\n        RecyclerView.Adapter adapter = getRecyclerView().getAdapter();\n        Activity activity = getActivity();\n\n        if (activity != null) {\n            if (activity instanceof FileDisplayActivity) {\n                if (isBackPressed && TextUtils.isEmpty(query)) {\n                    FileDisplayActivity fileDisplayActivity = (FileDisplayActivity) activity;\n                    fileDisplayActivity.resetSearchView();\n                    fileDisplayActivity.updateListOfFilesFragment(true);\n                } else {\n                    handler.post(() -> {\n                        if (adapter instanceof OCFileListAdapter) {\n                            if (accountManager\n                                .getUser()\n                                .getServer()\n                                .getVersion()\n                                .isNewerOrEqual(OwnCloudVersion.nextcloud_20)\n                            ) {\n                                ((FileDisplayActivity) activity).performUnifiedSearch(query, listOfHiddenFiles);\n                            } else {\n                                EventBus.getDefault().post(\n                                    new SearchEvent(query, SearchRemoteOperation.SearchType.FILE_SEARCH)\n                                                          );\n                            }\n                        } else if (adapter instanceof LocalFileListAdapter localFileListAdapter) {\n                            localFileListAdapter.filter(query);\n                        }\n                    });\n\n                    if (searchView != null) {\n                        searchView.clearFocus();\n                    }\n                }\n            } else if (activity instanceof UploadFilesActivity uploadFilesActivity) {\n                LocalFileListAdapter localFileListAdapter = (LocalFileListAdapter) adapter;\n                if (localFileListAdapter != null) {\n                    localFileListAdapter.filter(query);\n                    uploadFilesActivity.getFileListFragment().setLoading(false);\n                }\n            } else if (activity instanceof FolderPickerActivity) {\n                ((FolderPickerActivity) activity).search(query);\n            }\n        }\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled performSearch from ExtendedListFragment.java into Swift.\n\n        Input:\n\n        Method Name: performSearch\n\n        Method Code: blic void performSearch(final String query, final ArrayList<String> listOfHiddenFiles, boolean isBackPressed) {\n        handler.removeCallbacksAndMessages(null);\n        RecyclerView.Adapter adapter = getRecyclerView().getAdapter();\n        Activity activity = getActivity();\n\n        if (activity != null) {\n            if (activity instanceof FileDisplayActivity) {\n                if (isBackPressed && TextUtils.isEmpty(query)) {\n                    FileDisplayActivity fileDisplayActivity = (FileDisplayActivity) activity;\n                    fileDisplayActivity.resetSearchView();\n                    fileDisplayActivity.updateListOfFilesFragment(true);\n                } else {\n                    handler.post(() -> {\n                        if (adapter instanceof OCFileListAdapter) {\n                            if (accountManager\n                                .getUser()\n                                .getServer()\n                                .getVersion()\n                                .isNewerOrEqual(OwnCloudVersion.nextcloud_20)\n                            ) {\n                                ((FileDisplayActivity) activity).performUnifiedSearch(query, listOfHiddenFiles);\n                            } else {\n                                EventBus.getDefault().post(\n                                    new SearchEvent(query, SearchRemoteOperation.SearchType.FILE_SEARCH)\n                                                          );\n                            }\n                        } else if (adapter instanceof LocalFileListAdapter localFileListAdapter) {\n                            localFileListAdapter.filter(query);\n                        }\n                    });\n\n                    if (searchView != null) {\n                        searchView.clearFocus();\n                    }\n                }\n            } else if (activity instanceof UploadFilesActivity uploadFilesActivity) {\n                LocalFileListAdapter localFileListAdapter = (LocalFileListAdapter) adapter;\n                if (localFileListAdapter != null) {\n                    localFileListAdapter.filter(query);\n                    uploadFilesActivity.getFileListFragment().setLoading(false);\n                }\n            } else if (activity instanceof FolderPickerActivity) {\n                ((FolderPickerActivity) activity).search(query);\n            }\n        }\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc performSearch(query: String, listOfHiddenFiles: [String], isBackPressed: Bool) {\n    handler.removeCallbacksAndMessages(nil)\n    let adapter = getRecyclerView().adapter\n    let activity = getActivity()\n\n    if let activity = activity {\n        if let fileDisplayActivity = activity as? FileDisplayActivity {\n            if isBackPressed && query.isEmpty {\n                fileDisplayActivity.resetSearchView()\n                fileDisplayActivity.updateListOfFilesFragment(true)\n            } else {\n                handler.post {\n                    if let ocFileListAdapter = adapter as? OCFileListAdapter {\n                        if accountManager.user.server.version.isNewerOrEqual(to: OwnCloudVersion.nextcloud_20) {\n                            fileDisplayActivity.performUnifiedSearch(query: query, listOfHiddenFiles: listOfHiddenFiles)\n                        } else {\n                            EventBus.default.post(SearchEvent(query: query, searchType: .fileSearch))\n                        }\n                    } else if let localFileListAdapter = adapter as? LocalFileListAdapter {\n                        localFileListAdapter.filter(query: query)\n                    }\n                }\n\n                searchView?.clearFocus()\n            }\n        } else if let uploadFilesActivity = activity as? UploadFilesActivity {\n            if let localFileListAdapter = adapter as? LocalFileListAdapter {\n                localFileListAdapter.filter(query: query)\n                uploadFilesActivity.getFileListFragment().setLoading(false)\n            }\n        } else if let folderPickerActivity = activity as? FolderPickerActivity {\n            folderPickerActivity.search(query: query)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "onClose",
        "method_code": "verride\n    public boolean onClose() {\n        RecyclerView.Adapter adapter = getRecyclerView().getAdapter();\n        if (adapter instanceof OCFileListAdapter) {\n            ArrayList<String> listOfHiddenFiles = ((OCFileListAdapter) adapter).listOfHiddenFiles;\n            performSearch(\"\", listOfHiddenFiles,true);\n            return false;\n        }\n        return true;\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onClose from ExtendedListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onClose\n\n        Method Code: verride\n    public boolean onClose() {\n        RecyclerView.Adapter adapter = getRecyclerView().getAdapter();\n        if (adapter instanceof OCFileListAdapter) {\n            ArrayList<String> listOfHiddenFiles = ((OCFileListAdapter) adapter).listOfHiddenFiles;\n            performSearch(\"\", listOfHiddenFiles,true);\n            return false;\n        }\n        return true;\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onClose() -> Bool {\n    if let adapter = getRecyclerView().adapter as? OCFileListAdapter {\n        let listOfHiddenFiles = adapter.listOfHiddenFiles\n        performSearch(\"\", listOfHiddenFiles: listOfHiddenFiles, true)\n        return false\n    }\n    return true\n}\n```"
    },
    {
        "method_name": "onAttach",
        "method_code": "verride\n    public void onAttach(@NonNull Context context) {\n        super.onAttach(context);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onAttach from ExtendedListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onAttach\n\n        Method Code: verride\n    public void onAttach(@NonNull Context context) {\n        super.onAttach(context);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func didMove(toParent parent: UIViewController?) {\n    super.didMove(toParent: parent)\n}\n```"
    },
    {
        "method_name": "onCreateView",
        "method_code": "verride\n    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        Log_OC.d(TAG, \"onCreateView\");\n\n        binding = ListFragmentBinding.inflate(inflater, container, false);\n        View v = binding.getRoot();\n\n        setupEmptyList(v);\n\n        mRecyclerView = binding.listRoot;\n        mRecyclerView.setHasFooter(true);\n        mRecyclerView.setEmptyView(binding.emptyList.emptyListView);\n        mRecyclerView.setHasFixedSize(true);\n        mRecyclerView.setLayoutManager(new LinearLayoutManager(getContext()));\n\n        mScale = preferences.getGridColumns();\n        setGridViewColumns(1f);\n\n        mScaleGestureDetector = new ScaleGestureDetector(MainApp.getAppContext(), new ScaleListener());\n\n        getRecyclerView().setOnTouchListener((view, motionEvent) -> {\n            mScaleGestureDetector.onTouchEvent(motionEvent);\n\n            if (motionEvent.getAction() == MotionEvent.ACTION_UP) {\n                view.performClick();\n            }\n\n            return false;\n        });\n\n        // Pull-down to refresh layout\n        mRefreshListLayout = binding.swipeContainingList;\n        viewThemeUtils.androidx.themeSwipeRefreshLayout(mRefreshListLayout);\n        mRefreshListLayout.setOnRefreshListener(this);\n\n        mSortButton = getActivity().findViewById(R.id.sort_button);\n        if (mSortButton != null) {\n            viewThemeUtils.material.colorMaterialTextButton(mSortButton);\n        }\n        mSwitchGridViewButton = getActivity().findViewById(R.id.switch_grid_view_button);\n        if (mSwitchGridViewButton != null) {\n            viewThemeUtils.material.colorMaterialTextButton(mSwitchGridViewButton);\n        }\n\n        return v;\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onCreateView from ExtendedListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onCreateView\n\n        Method Code: verride\n    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        Log_OC.d(TAG, \"onCreateView\");\n\n        binding = ListFragmentBinding.inflate(inflater, container, false);\n        View v = binding.getRoot();\n\n        setupEmptyList(v);\n\n        mRecyclerView = binding.listRoot;\n        mRecyclerView.setHasFooter(true);\n        mRecyclerView.setEmptyView(binding.emptyList.emptyListView);\n        mRecyclerView.setHasFixedSize(true);\n        mRecyclerView.setLayoutManager(new LinearLayoutManager(getContext()));\n\n        mScale = preferences.getGridColumns();\n        setGridViewColumns(1f);\n\n        mScaleGestureDetector = new ScaleGestureDetector(MainApp.getAppContext(), new ScaleListener());\n\n        getRecyclerView().setOnTouchListener((view, motionEvent) -> {\n            mScaleGestureDetector.onTouchEvent(motionEvent);\n\n            if (motionEvent.getAction() == MotionEvent.ACTION_UP) {\n                view.performClick();\n            }\n\n            return false;\n        });\n\n        // Pull-down to refresh layout\n        mRefreshListLayout = binding.swipeContainingList;\n        viewThemeUtils.androidx.themeSwipeRefreshLayout(mRefreshListLayout);\n        mRefreshListLayout.setOnRefreshListener(this);\n\n        mSortButton = getActivity().findViewById(R.id.sort_button);\n        if (mSortButton != null) {\n            viewThemeUtils.material.colorMaterialTextButton(mSortButton);\n        }\n        mSwitchGridViewButton = getActivity().findViewById(R.id.switch_grid_view_button);\n        if (mSwitchGridViewButton != null) {\n            viewThemeUtils.material.colorMaterialTextButton(mSwitchGridViewButton);\n        }\n\n        return v;\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    print(\"onCreateView\")\n\n    binding = ListFragmentBinding.inflate(inflater: nil, container: nil, savedInstanceState: nil)\n    let v = binding.root\n\n    setupEmptyList(v)\n\n    mRecyclerView = binding.listRoot\n    mRecyclerView.hasFooter = true\n    mRecyclerView.emptyView = binding.emptyList.emptyListView\n    mRecyclerView.hasFixedSize = true\n    mRecyclerView.layoutManager = LinearLayoutManager(context: getContext())\n\n    mScale = preferences.getGridColumns()\n    setGridViewColumns(1.0)\n\n    mScaleGestureDetector = ScaleGestureDetector(target: self, action: #selector(scaleListener))\n\n    getRecyclerView().addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(handleTap)))\n\n    mRefreshListLayout = binding.swipeContainingList\n    viewThemeUtils.androidx.themeSwipeRefreshLayout(mRefreshListLayout)\n    mRefreshListLayout.addTarget(self, action: #selector(refreshList), for: .valueChanged)\n\n    mSortButton = getActivity()?.view.viewWithTag(R.id.sort_button) as? UIButton\n    if let sortButton = mSortButton {\n        viewThemeUtils.material.colorMaterialTextButton(sortButton)\n    }\n    mSwitchGridViewButton = getActivity()?.view.viewWithTag(R.id.switch_grid_view_button) as? UIButton\n    if let switchGridViewButton = mSwitchGridViewButton {\n        viewThemeUtils.material.colorMaterialTextButton(switchGridViewButton)\n    }\n}\n\n@objc func handleTap(_ sender: UITapGestureRecognizer) {\n    if sender.state == .ended {\n        sender.view?.performClick()\n    }\n}\n\n@objc func scaleListener(_ gestureRecognizer: UIPinchGestureRecognizer) {\n    // Handle scale gesture\n}\n\n@objc func refreshList() {\n    // Handle refresh\n}\n```"
    },
    {
        "method_name": "onDestroyView",
        "method_code": "verride\n    public void onDestroyView() {\n        super.onDestroyView();\n        binding = null;\n        var adapter = getRecyclerView().getAdapter();\n        if (adapter instanceof OCFileListAdapter ocFileListAdapter) {\n            ocFileListAdapter.onDestroy();\n        }\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onDestroyView from ExtendedListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onDestroyView\n\n        Method Code: verride\n    public void onDestroyView() {\n        super.onDestroyView();\n        binding = null;\n        var adapter = getRecyclerView().getAdapter();\n        if (adapter instanceof OCFileListAdapter ocFileListAdapter) {\n            ocFileListAdapter.onDestroy();\n        }\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n    binding = nil\n    if let adapter = getRecyclerView().adapter as? OCFileListAdapter {\n        adapter.onDestroy()\n    }\n}\n```"
    },
    {
        "method_name": "onScale",
        "method_code": "verride\n        public boolean onScale(ScaleGestureDetector detector) {\n            setGridViewColumns(detector.getScaleFactor());\n\n            preferences.setGridColumns(mScale);\n\n            getRecyclerView().getAdapter().notifyDataSetChanged();\n\n            return true;\n        }\n ",
        "prompt": "\n        Please translate the following Java (Android) method titled onScale from ExtendedListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onScale\n\n        Method Code: verride\n        public boolean onScale(ScaleGestureDetector detector) {\n            setGridViewColumns(detector.getScaleFactor());\n\n            preferences.setGridColumns(mScale);\n\n            getRecyclerView().getAdapter().notifyDataSetChanged();\n\n            return true;\n        }\n \n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onScale(_ detector: UIPinchGestureRecognizer) -> Bool {\n    setGridViewColumns(detector.scale)\n    \n    preferences.setGridColumns(mScale)\n    \n    collectionView.reloadData()\n    \n    return true\n}\n```"
    },
    {
        "method_name": "setGridViewColumns",
        "method_code": "otected void setGridViewColumns(float scaleFactor) {\n        if (mRecyclerView.getLayoutManager() instanceof GridLayoutManager) {\n            GridLayoutManager gridLayoutManager = (GridLayoutManager) mRecyclerView.getLayoutManager();\n            if (mScale == -1f) {\n                gridLayoutManager.setSpanCount(GridView.AUTO_FIT);\n                mScale = gridLayoutManager.getSpanCount();\n            }\n            mScale *= 1.f - (scaleFactor - 1.f);\n            mScale = Math.max(minColumnSize, Math.min(mScale, maxColumnSize));\n            Integer scaleInt = Math.round(mScale);\n            gridLayoutManager.setSpanCount(scaleInt);\n            mRecyclerView.getAdapter().notifyDataSetChanged();\n        }\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setGridViewColumns from ExtendedListFragment.java into Swift.\n\n        Input:\n\n        Method Name: setGridViewColumns\n\n        Method Code: otected void setGridViewColumns(float scaleFactor) {\n        if (mRecyclerView.getLayoutManager() instanceof GridLayoutManager) {\n            GridLayoutManager gridLayoutManager = (GridLayoutManager) mRecyclerView.getLayoutManager();\n            if (mScale == -1f) {\n                gridLayoutManager.setSpanCount(GridView.AUTO_FIT);\n                mScale = gridLayoutManager.getSpanCount();\n            }\n            mScale *= 1.f - (scaleFactor - 1.f);\n            mScale = Math.max(minColumnSize, Math.min(mScale, maxColumnSize));\n            Integer scaleInt = Math.round(mScale);\n            gridLayoutManager.setSpanCount(scaleInt);\n            mRecyclerView.getAdapter().notifyDataSetChanged();\n        }\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setGridViewColumns(scaleFactor: Float) {\n    if let gridLayoutManager = mRecyclerView.collectionViewLayout as? UICollectionViewFlowLayout {\n        if mScale == -1.0 {\n            gridLayoutManager.estimatedItemSize = UICollectionViewFlowLayout.automaticSize\n            mScale = Float(gridLayoutManager.estimatedItemSize.width)\n        }\n        mScale *= 1.0 - (scaleFactor - 1.0)\n        mScale = max(minColumnSize, min(mScale, maxColumnSize))\n        let scaleInt = Int(round(mScale))\n        gridLayoutManager.itemSize = CGSize(width: CGFloat(scaleInt), height: gridLayoutManager.itemSize.height)\n        mRecyclerView.reloadData()\n    }\n}\n```"
    },
    {
        "method_name": "setupEmptyList",
        "method_code": "otected void setupEmptyList(View view) {\n        mEmptyListContainer = binding.emptyList.emptyListView;\n        mEmptyListMessage = binding.emptyList.emptyListViewText;\n        mEmptyListHeadline = binding.emptyList.emptyListViewHeadline;\n        mEmptyListIcon = binding.emptyList.emptyListIcon;\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setupEmptyList from ExtendedListFragment.java into Swift.\n\n        Input:\n\n        Method Name: setupEmptyList\n\n        Method Code: otected void setupEmptyList(View view) {\n        mEmptyListContainer = binding.emptyList.emptyListView;\n        mEmptyListMessage = binding.emptyList.emptyListViewText;\n        mEmptyListHeadline = binding.emptyList.emptyListViewHeadline;\n        mEmptyListIcon = binding.emptyList.emptyListIcon;\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setupEmptyList(view: UIView) {\n    mEmptyListContainer = binding.emptyList.emptyListView\n    mEmptyListMessage = binding.emptyList.emptyListViewText\n    mEmptyListHeadline = binding.emptyList.emptyListViewHeadline\n    mEmptyListIcon = binding.emptyList.emptyListIcon\n}\n```"
    },
    {
        "method_name": "onViewCreated",
        "method_code": "verride\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\n        super.onViewCreated(view, savedInstanceState);\n        if (savedInstanceState == null) {\n            return;\n        }\n\n        mIndexes = savedInstanceState.getIntegerArrayList(KEY_INDEXES);\n        mFirstPositions = savedInstanceState.getIntegerArrayList(KEY_FIRST_POSITIONS);\n        mTops = savedInstanceState.getIntegerArrayList(KEY_TOPS);\n        mHeightCell = savedInstanceState.getInt(KEY_HEIGHT_CELL);\n        setMessageForEmptyList(savedInstanceState.getString(KEY_EMPTY_LIST_MESSAGE));\n\n        if (savedInstanceState.getBoolean(KEY_IS_GRID_VISIBLE, false) && getRecyclerView().getAdapter() != null) {\n            switchToGridView();\n        }\n\n        int referencePosition = savedInstanceState.getInt(KEY_SAVED_LIST_POSITION);\n        Log_OC.v(TAG, \"Setting grid position \" + referencePosition);\n        scrollToPosition(referencePosition);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onViewCreated from ExtendedListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onViewCreated\n\n        Method Code: verride\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\n        super.onViewCreated(view, savedInstanceState);\n        if (savedInstanceState == null) {\n            return;\n        }\n\n        mIndexes = savedInstanceState.getIntegerArrayList(KEY_INDEXES);\n        mFirstPositions = savedInstanceState.getIntegerArrayList(KEY_FIRST_POSITIONS);\n        mTops = savedInstanceState.getIntegerArrayList(KEY_TOPS);\n        mHeightCell = savedInstanceState.getInt(KEY_HEIGHT_CELL);\n        setMessageForEmptyList(savedInstanceState.getString(KEY_EMPTY_LIST_MESSAGE));\n\n        if (savedInstanceState.getBoolean(KEY_IS_GRID_VISIBLE, false) && getRecyclerView().getAdapter() != null) {\n            switchToGridView();\n        }\n\n        int referencePosition = savedInstanceState.getInt(KEY_SAVED_LIST_POSITION);\n        Log_OC.v(TAG, \"Setting grid position \" + referencePosition);\n        scrollToPosition(referencePosition);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    if savedInstanceState == nil {\n        return\n    }\n\n    mIndexes = savedInstanceState?.object(forKey: KEY_INDEXES) as? [Int]\n    mFirstPositions = savedInstanceState?.object(forKey: KEY_FIRST_POSITIONS) as? [Int]\n    mTops = savedInstanceState?.object(forKey: KEY_TOPS) as? [Int]\n    mHeightCell = savedInstanceState?.integer(forKey: KEY_HEIGHT_CELL) ?? 0\n    setMessageForEmptyList(savedInstanceState?.string(forKey: KEY_EMPTY_LIST_MESSAGE) ?? \"\")\n\n    if savedInstanceState?.bool(forKey: KEY_IS_GRID_VISIBLE) == true, getRecyclerView().adapter != nil {\n        switchToGridView()\n    }\n\n    let referencePosition = savedInstanceState?.integer(forKey: KEY_SAVED_LIST_POSITION) ?? 0\n    print(\"Setting grid position \\(referencePosition)\")\n    scrollToPosition(referencePosition)\n}\n```"
    },
    {
        "method_name": "onSaveInstanceState",
        "method_code": "verride\n    public void onSaveInstanceState(@NonNull Bundle savedInstanceState) {\n        super.onSaveInstanceState(savedInstanceState);\n        Log_OC.d(TAG, \"onSaveInstanceState()\");\n        savedInstanceState.putBoolean(KEY_IS_GRID_VISIBLE, isGridEnabled());\n        savedInstanceState.putIntegerArrayList(KEY_INDEXES, mIndexes);\n        savedInstanceState.putIntegerArrayList(KEY_FIRST_POSITIONS, mFirstPositions);\n        savedInstanceState.putIntegerArrayList(KEY_TOPS, mTops);\n        savedInstanceState.putInt(KEY_HEIGHT_CELL, mHeightCell);\n        savedInstanceState.putString(KEY_EMPTY_LIST_MESSAGE, getEmptyViewText());\n\n        preferences.setGridColumns(mScale);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onSaveInstanceState from ExtendedListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onSaveInstanceState\n\n        Method Code: verride\n    public void onSaveInstanceState(@NonNull Bundle savedInstanceState) {\n        super.onSaveInstanceState(savedInstanceState);\n        Log_OC.d(TAG, \"onSaveInstanceState()\");\n        savedInstanceState.putBoolean(KEY_IS_GRID_VISIBLE, isGridEnabled());\n        savedInstanceState.putIntegerArrayList(KEY_INDEXES, mIndexes);\n        savedInstanceState.putIntegerArrayList(KEY_FIRST_POSITIONS, mFirstPositions);\n        savedInstanceState.putIntegerArrayList(KEY_TOPS, mTops);\n        savedInstanceState.putInt(KEY_HEIGHT_CELL, mHeightCell);\n        savedInstanceState.putString(KEY_EMPTY_LIST_MESSAGE, getEmptyViewText());\n\n        preferences.setGridColumns(mScale);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func encodeRestorableState(with coder: NSCoder) {\n    super.encodeRestorableState(with: coder)\n    NSLog(\"onSaveInstanceState()\")\n    coder.encode(isGridEnabled(), forKey: KEY_IS_GRID_VISIBLE)\n    coder.encode(mIndexes, forKey: KEY_INDEXES)\n    coder.encode(mFirstPositions, forKey: KEY_FIRST_POSITIONS)\n    coder.encode(mTops, forKey: KEY_TOPS)\n    coder.encode(mHeightCell, forKey: KEY_HEIGHT_CELL)\n    coder.encode(getEmptyViewText(), forKey: KEY_EMPTY_LIST_MESSAGE)\n\n    preferences.setGridColumns(mScale)\n}\n```"
    },
    {
        "method_name": "getColumnsCount",
        "method_code": "blic int getColumnsCount() {\n        if (mScale == -1) {\n            return Math.round(AppPreferencesImpl.DEFAULT_GRID_COLUMN);\n        }\n        return Math.round(mScale);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getColumnsCount from ExtendedListFragment.java into Swift.\n\n        Input:\n\n        Method Name: getColumnsCount\n\n        Method Code: blic int getColumnsCount() {\n        if (mScale == -1) {\n            return Math.round(AppPreferencesImpl.DEFAULT_GRID_COLUMN);\n        }\n        return Math.round(mScale);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getColumnsCount() -> Int {\n    if mScale == -1 {\n        return Int(round(AppPreferencesImpl.DEFAULT_GRID_COLUMN))\n    }\n    return Int(round(mScale))\n}\n```"
    },
    {
        "method_name": "restoreIndexAndTopPosition",
        "method_code": "otected void restoreIndexAndTopPosition() {\n        if (mIndexes == null || mIndexes.isEmpty()) {\n            Log_OC.d(TAG,\"Indexes is null or empty\");\n            return;\n        }\n\n        // needs to be checked; not every browse-up had a browse-down before\n\n        int index = mIndexes.remove(mIndexes.size() - 1);\n        final int firstPosition = mFirstPositions.remove(mFirstPositions.size() - 1);\n        int top = mTops.remove(mTops.size() - 1);\n\n        Log_OC.v(TAG, \"Setting selection to position: \" + firstPosition + \"; top: \"\n            + top + \"; index: \" + index);\n\n        scrollToPosition(firstPosition);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled restoreIndexAndTopPosition from ExtendedListFragment.java into Swift.\n\n        Input:\n\n        Method Name: restoreIndexAndTopPosition\n\n        Method Code: otected void restoreIndexAndTopPosition() {\n        if (mIndexes == null || mIndexes.isEmpty()) {\n            Log_OC.d(TAG,\"Indexes is null or empty\");\n            return;\n        }\n\n        // needs to be checked; not every browse-up had a browse-down before\n\n        int index = mIndexes.remove(mIndexes.size() - 1);\n        final int firstPosition = mFirstPositions.remove(mFirstPositions.size() - 1);\n        int top = mTops.remove(mTops.size() - 1);\n\n        Log_OC.v(TAG, \"Setting selection to position: \" + firstPosition + \"; top: \"\n            + top + \"; index: \" + index);\n\n        scrollToPosition(firstPosition);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc restoreIndexAndTopPosition() {\n    guard let indexes = mIndexes, !indexes.isEmpty else {\n        Log_OC.d(TAG, \"Indexes is null or empty\")\n        return\n    }\n\n    let index = mIndexes.removeLast()\n    let firstPosition = mFirstPositions.removeLast()\n    let top = mTops.removeLast()\n\n    Log_OC.v(TAG, \"Setting selection to position: \\(firstPosition); top: \\(top); index: \\(index)\")\n\n    scrollToPosition(firstPosition)\n}\n```"
    },
    {
        "method_name": "scrollToPosition",
        "method_code": "ivate void scrollToPosition(int position) {\n        LinearLayoutManager linearLayoutManager = (LinearLayoutManager) mRecyclerView.getLayoutManager();\n\n        if (linearLayoutManager != null) {\n            int visibleItemCount = linearLayoutManager.findLastCompletelyVisibleItemPosition() -\n                linearLayoutManager.findFirstCompletelyVisibleItemPosition();\n            linearLayoutManager.scrollToPositionWithOffset(position, (visibleItemCount / 2) * mHeightCell);\n        }\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled scrollToPosition from ExtendedListFragment.java into Swift.\n\n        Input:\n\n        Method Name: scrollToPosition\n\n        Method Code: ivate void scrollToPosition(int position) {\n        LinearLayoutManager linearLayoutManager = (LinearLayoutManager) mRecyclerView.getLayoutManager();\n\n        if (linearLayoutManager != null) {\n            int visibleItemCount = linearLayoutManager.findLastCompletelyVisibleItemPosition() -\n                linearLayoutManager.findFirstCompletelyVisibleItemPosition();\n            linearLayoutManager.scrollToPositionWithOffset(position, (visibleItemCount / 2) * mHeightCell);\n        }\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nprivate func scrollToPosition(position: Int) {\n    if let linearLayoutManager = mRecyclerView.layoutManager as? UICollectionViewFlowLayout {\n        let visibleItemCount = linearLayoutManager.indexPathsForVisibleItems.last?.item ?? 0 -\n            linearLayoutManager.indexPathsForVisibleItems.first?.item ?? 0\n        let offset = (visibleItemCount / 2) * mHeightCell\n        mRecyclerView.scrollToItem(at: IndexPath(item: position, section: 0), at: .centeredVertically, animated: true)\n    }\n}\n```"
    },
    {
        "method_name": "saveIndexAndTopPosition",
        "method_code": "otected void saveIndexAndTopPosition(int index) {\n        if (mIndexes != null) {\n            mIndexes.add(index);\n        }\n\n        RecyclerView.LayoutManager layoutManager = mRecyclerView.getLayoutManager();\n        int firstPosition;\n        if (layoutManager instanceof GridLayoutManager) {\n            firstPosition = ((GridLayoutManager) layoutManager).findFirstCompletelyVisibleItemPosition();\n        } else {\n            firstPosition = ((LinearLayoutManager) layoutManager).findFirstCompletelyVisibleItemPosition();\n        }\n\n        mFirstPositions.add(firstPosition);\n\n        View view = mRecyclerView.getChildAt(0);\n        int top = (view == null) ? 0 : view.getTop();\n\n        mTops.add(top);\n\n        // Save the height of a cell\n        mHeightCell = (view == null || mHeightCell != 0) ? mHeightCell : view.getHeight();\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled saveIndexAndTopPosition from ExtendedListFragment.java into Swift.\n\n        Input:\n\n        Method Name: saveIndexAndTopPosition\n\n        Method Code: otected void saveIndexAndTopPosition(int index) {\n        if (mIndexes != null) {\n            mIndexes.add(index);\n        }\n\n        RecyclerView.LayoutManager layoutManager = mRecyclerView.getLayoutManager();\n        int firstPosition;\n        if (layoutManager instanceof GridLayoutManager) {\n            firstPosition = ((GridLayoutManager) layoutManager).findFirstCompletelyVisibleItemPosition();\n        } else {\n            firstPosition = ((LinearLayoutManager) layoutManager).findFirstCompletelyVisibleItemPosition();\n        }\n\n        mFirstPositions.add(firstPosition);\n\n        View view = mRecyclerView.getChildAt(0);\n        int top = (view == null) ? 0 : view.getTop();\n\n        mTops.add(top);\n\n        // Save the height of a cell\n        mHeightCell = (view == null || mHeightCell != 0) ? mHeightCell : view.getHeight();\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc saveIndexAndTopPosition(index: Int) {\n    if mIndexes != nil {\n        mIndexes.append(index)\n    }\n\n    let layoutManager = mRecyclerView.layoutManager\n    var firstPosition: Int\n    if let gridLayoutManager = layoutManager as? GridLayoutManager {\n        firstPosition = gridLayoutManager.findFirstCompletelyVisibleItemPosition()\n    } else if let linearLayoutManager = layoutManager as? LinearLayoutManager {\n        firstPosition = linearLayoutManager.findFirstCompletelyVisibleItemPosition()\n    } else {\n        firstPosition = 0\n    }\n\n    mFirstPositions.append(firstPosition)\n\n    let view = mRecyclerView.subviews.first\n    let top = view?.frame.origin.y ?? 0\n\n    mTops.append(Int(top))\n\n    // Save the height of a cell\n    mHeightCell = (view == nil || mHeightCell != 0) ? mHeightCell : Int(view?.frame.height ?? 0)\n}\n```"
    },
    {
        "method_name": "onItemClick",
        "method_code": "blic void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n        // to be @overridden\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onItemClick from ExtendedListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onItemClick\n\n        Method Code: blic void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n        // to be @overridden\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onItemClick(parent: AdapterView<Any>, view: View, position: Int, id: Int64) {\n    // to be overridden\n}\n```"
    },
    {
        "method_name": "onRefresh",
        "method_code": "verride\n    public void onRefresh() {\n\n        if (searchView != null) {\n            searchView.onActionViewCollapsed();\n\n            Activity activity;\n            if ((activity = getActivity()) != null && activity instanceof FileDisplayActivity fileDisplayActivity) {\n                fileDisplayActivity.setDrawerIndicatorEnabled(fileDisplayActivity.isDrawerIndicatorAvailable());\n                fileDisplayActivity.hideSearchView(fileDisplayActivity.getCurrentDir());\n            }\n        }\n        if (mOnRefreshListener != null) {\n            mOnRefreshListener.onRefresh();\n        }\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onRefresh from ExtendedListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onRefresh\n\n        Method Code: verride\n    public void onRefresh() {\n\n        if (searchView != null) {\n            searchView.onActionViewCollapsed();\n\n            Activity activity;\n            if ((activity = getActivity()) != null && activity instanceof FileDisplayActivity fileDisplayActivity) {\n                fileDisplayActivity.setDrawerIndicatorEnabled(fileDisplayActivity.isDrawerIndicatorAvailable());\n                fileDisplayActivity.hideSearchView(fileDisplayActivity.getCurrentDir());\n            }\n        }\n        if (mOnRefreshListener != null) {\n            mOnRefreshListener.onRefresh();\n        }\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func onRefresh() {\n    if let searchView = searchView {\n        searchView.onActionViewCollapsed()\n\n        if let activity = getActivity() as? FileDisplayActivity {\n            activity.setDrawerIndicatorEnabled(activity.isDrawerIndicatorAvailable())\n            activity.hideSearchView(activity.getCurrentDir())\n        }\n    }\n    mOnRefreshListener?.onRefresh()\n}\n```"
    },
    {
        "method_name": "setOnRefreshListener",
        "method_code": "blic void setOnRefreshListener(OnEnforceableRefreshListener listener) {\n        mOnRefreshListener = listener;\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setOnRefreshListener from ExtendedListFragment.java into Swift.\n\n        Input:\n\n        Method Name: setOnRefreshListener\n\n        Method Code: blic void setOnRefreshListener(OnEnforceableRefreshListener listener) {\n        mOnRefreshListener = listener;\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setOnRefreshListener(listener: OnEnforceableRefreshListener) {\n    mOnRefreshListener = listener\n}\n```"
    },
    {
        "method_name": "setSwipeEnabled",
        "method_code": "blic void setSwipeEnabled(boolean enabled) {\n        mRefreshListLayout.setEnabled(enabled);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setSwipeEnabled from ExtendedListFragment.java into Swift.\n\n        Input:\n\n        Method Name: setSwipeEnabled\n\n        Method Code: blic void setSwipeEnabled(boolean enabled) {\n        mRefreshListLayout.setEnabled(enabled);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setSwipeEnabled(_ enabled: Bool) {\n    mRefreshListLayout.isEnabled = enabled\n}\n```"
    },
    {
        "method_name": "setMessageForEmptyList",
        "method_code": "blic void setMessageForEmptyList(String message) {\n        if (mEmptyListContainer != null && mEmptyListMessage != null) {\n            mEmptyListMessage.setText(message);\n        }\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setMessageForEmptyList from ExtendedListFragment.java into Swift.\n\n        Input:\n\n        Method Name: setMessageForEmptyList\n\n        Method Code: blic void setMessageForEmptyList(String message) {\n        if (mEmptyListContainer != null && mEmptyListMessage != null) {\n            mEmptyListMessage.setText(message);\n        }\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setMessageForEmptyList(message: String) {\n    if let emptyListContainer = mEmptyListContainer, let emptyListMessage = mEmptyListMessage {\n        emptyListMessage.text = message\n    }\n}\n```"
    },
    {
        "method_name": "setMessageForEmptyList",
        "method_code": "blic void setMessageForEmptyList(@StringRes final int headline, @StringRes final int message,\n                                       @DrawableRes final int icon) {\n        setMessageForEmptyList(headline, message, icon, false);\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setMessageForEmptyList from ExtendedListFragment.java into Swift.\n\n        Input:\n\n        Method Name: setMessageForEmptyList\n\n        Method Code: blic void setMessageForEmptyList(@StringRes final int headline, @StringRes final int message,\n                                       @DrawableRes final int icon) {\n        setMessageForEmptyList(headline, message, icon, false);\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setMessageForEmptyList(headline: Int, message: Int, icon: Int) {\n    setMessageForEmptyList(headline: headline, message: message, icon: icon, flag: false)\n}\n```"
    },
    {
        "method_name": "setMessageForEmptyList",
        "method_code": "blic void setMessageForEmptyList(@StringRes final int headline, @StringRes final int message,\n                                       @DrawableRes final int icon, final boolean tintIcon) {\n        new Handler(Looper.getMainLooper()).post(() -> {\n\n            if (mEmptyListContainer != null && mEmptyListMessage != null) {\n                mEmptyListHeadline.setText(headline);\n                mEmptyListMessage.setText(message);\n\n                if (tintIcon) {\n                    if (getContext() != null) {\n                        mEmptyListIcon.setImageDrawable(\n                            viewThemeUtils.platform.tintPrimaryDrawable(getContext(), icon));\n                    }\n                } else {\n                    mEmptyListIcon.setImageResource(icon);\n                }\n\n                mEmptyListIcon.setVisibility(View.VISIBLE);\n                mEmptyListMessage.setVisibility(View.VISIBLE);\n            }\n        });\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setMessageForEmptyList from ExtendedListFragment.java into Swift.\n\n        Input:\n\n        Method Name: setMessageForEmptyList\n\n        Method Code: blic void setMessageForEmptyList(@StringRes final int headline, @StringRes final int message,\n                                       @DrawableRes final int icon, final boolean tintIcon) {\n        new Handler(Looper.getMainLooper()).post(() -> {\n\n            if (mEmptyListContainer != null && mEmptyListMessage != null) {\n                mEmptyListHeadline.setText(headline);\n                mEmptyListMessage.setText(message);\n\n                if (tintIcon) {\n                    if (getContext() != null) {\n                        mEmptyListIcon.setImageDrawable(\n                            viewThemeUtils.platform.tintPrimaryDrawable(getContext(), icon));\n                    }\n                } else {\n                    mEmptyListIcon.setImageResource(icon);\n                }\n\n                mEmptyListIcon.setVisibility(View.VISIBLE);\n                mEmptyListMessage.setVisibility(View.VISIBLE);\n            }\n        });\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setMessageForEmptyList(headline: Int, message: Int, icon: Int, tintIcon: Bool) {\n    DispatchQueue.main.async {\n        if let emptyListContainer = self.mEmptyListContainer, let emptyListMessage = self.mEmptyListMessage {\n            self.mEmptyListHeadline.text = NSLocalizedString(String(headline), comment: \"\")\n            self.mEmptyListMessage.text = NSLocalizedString(String(message), comment: \"\")\n\n            if tintIcon {\n                if let context = self.getContext() {\n                    self.mEmptyListIcon.image = viewThemeUtils.platform.tintPrimaryDrawable(context: context, icon: icon)\n                }\n            } else {\n                self.mEmptyListIcon.image = UIImage(named: String(icon))\n            }\n\n            self.mEmptyListIcon.isHidden = false\n            self.mEmptyListMessage.isHidden = false\n        }\n    }\n}\n```"
    },
    {
        "method_name": "setEmptyListMessage",
        "method_code": "blic void setEmptyListMessage(final SearchType searchType) {\n        new Handler(Looper.getMainLooper()).post(() -> {\n            if (searchType == SearchType.OFFLINE_MODE) {\n                setMessageForEmptyList(R.string.offline_mode_info_title,\n                                       R.string.offline_mode_info_description,\n                                       R.drawable.ic_cloud_sync,\n                                       true);\n            } else if (searchType == SearchType.NO_SEARCH) {\n                setMessageForEmptyList(R.string.file_list_empty_headline,\n                                       R.string.file_list_empty,\n                                       R.drawable.ic_list_empty_folder,\n                                       true);\n            } else if (searchType == SearchType.FILE_SEARCH) {\n                setMessageForEmptyList(R.string.file_list_empty_headline_server_search,\n                                       R.string.file_list_empty,\n                                       R.drawable.ic_search_light_grey);\n            } else if (searchType == SearchType.FAVORITE_SEARCH) {\n                setMessageForEmptyList(R.string.file_list_empty_favorite_headline,\n                                       R.string.file_list_empty_favorites_filter_list,\n                                       R.drawable.ic_star_light_yellow);\n            } else if (searchType == SearchType.RECENTLY_MODIFIED_SEARCH) {\n                setMessageForEmptyList(R.string.file_list_empty_headline_server_search,\n                                       R.string.file_list_empty_recently_modified,\n                                       R.drawable.ic_list_empty_recent);\n            } else if (searchType == SearchType.REGULAR_FILTER) {\n                setMessageForEmptyList(R.string.file_list_empty_headline_search,\n                                       R.string.file_list_empty_search,\n                                       R.drawable.ic_search_light_grey);\n            } else if (searchType == SearchType.SHARED_FILTER) {\n                setMessageForEmptyList(R.string.file_list_empty_shared_headline,\n                                       R.string.file_list_empty_shared,\n                                       R.drawable.ic_list_empty_shared);\n            } else if (searchType == SearchType.GALLERY_SEARCH) {\n                setMessageForEmptyList(R.string.file_list_empty_headline_server_search,\n                                       R.string.file_list_empty_gallery,\n                                       R.drawable.file_image);\n            } else if (searchType == SearchType.LOCAL_SEARCH) {\n                setMessageForEmptyList(R.string.file_list_empty_headline_server_search,\n                                       R.string.file_list_empty_local_search,\n                                       R.drawable.ic_search_light_grey);\n            }\n        });\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setEmptyListMessage from ExtendedListFragment.java into Swift.\n\n        Input:\n\n        Method Name: setEmptyListMessage\n\n        Method Code: blic void setEmptyListMessage(final SearchType searchType) {\n        new Handler(Looper.getMainLooper()).post(() -> {\n            if (searchType == SearchType.OFFLINE_MODE) {\n                setMessageForEmptyList(R.string.offline_mode_info_title,\n                                       R.string.offline_mode_info_description,\n                                       R.drawable.ic_cloud_sync,\n                                       true);\n            } else if (searchType == SearchType.NO_SEARCH) {\n                setMessageForEmptyList(R.string.file_list_empty_headline,\n                                       R.string.file_list_empty,\n                                       R.drawable.ic_list_empty_folder,\n                                       true);\n            } else if (searchType == SearchType.FILE_SEARCH) {\n                setMessageForEmptyList(R.string.file_list_empty_headline_server_search,\n                                       R.string.file_list_empty,\n                                       R.drawable.ic_search_light_grey);\n            } else if (searchType == SearchType.FAVORITE_SEARCH) {\n                setMessageForEmptyList(R.string.file_list_empty_favorite_headline,\n                                       R.string.file_list_empty_favorites_filter_list,\n                                       R.drawable.ic_star_light_yellow);\n            } else if (searchType == SearchType.RECENTLY_MODIFIED_SEARCH) {\n                setMessageForEmptyList(R.string.file_list_empty_headline_server_search,\n                                       R.string.file_list_empty_recently_modified,\n                                       R.drawable.ic_list_empty_recent);\n            } else if (searchType == SearchType.REGULAR_FILTER) {\n                setMessageForEmptyList(R.string.file_list_empty_headline_search,\n                                       R.string.file_list_empty_search,\n                                       R.drawable.ic_search_light_grey);\n            } else if (searchType == SearchType.SHARED_FILTER) {\n                setMessageForEmptyList(R.string.file_list_empty_shared_headline,\n                                       R.string.file_list_empty_shared,\n                                       R.drawable.ic_list_empty_shared);\n            } else if (searchType == SearchType.GALLERY_SEARCH) {\n                setMessageForEmptyList(R.string.file_list_empty_headline_server_search,\n                                       R.string.file_list_empty_gallery,\n                                       R.drawable.file_image);\n            } else if (searchType == SearchType.LOCAL_SEARCH) {\n                setMessageForEmptyList(R.string.file_list_empty_headline_server_search,\n                                       R.string.file_list_empty_local_search,\n                                       R.drawable.ic_search_light_grey);\n            }\n        });\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setEmptyListMessage(searchType: SearchType) {\n    DispatchQueue.main.async {\n        switch searchType {\n        case .offlineMode:\n            setMessageForEmptyList(title: R.string.offline_mode_info_title,\n                                   description: R.string.offline_mode_info_description,\n                                   icon: R.drawable.ic_cloud_sync,\n                                   showButton: true)\n        case .noSearch:\n            setMessageForEmptyList(title: R.string.file_list_empty_headline,\n                                   description: R.string.file_list_empty,\n                                   icon: R.drawable.ic_list_empty_folder,\n                                   showButton: true)\n        case .fileSearch:\n            setMessageForEmptyList(title: R.string.file_list_empty_headline_server_search,\n                                   description: R.string.file_list_empty,\n                                   icon: R.drawable.ic_search_light_grey)\n        case .favoriteSearch:\n            setMessageForEmptyList(title: R.string.file_list_empty_favorite_headline,\n                                   description: R.string.file_list_empty_favorites_filter_list,\n                                   icon: R.drawable.ic_star_light_yellow)\n        case .recentlyModifiedSearch:\n            setMessageForEmptyList(title: R.string.file_list_empty_headline_server_search,\n                                   description: R.string.file_list_empty_recently_modified,\n                                   icon: R.drawable.ic_list_empty_recent)\n        case .regularFilter:\n            setMessageForEmptyList(title: R.string.file_list_empty_headline_search,\n                                   description: R.string.file_list_empty_search,\n                                   icon: R.drawable.ic_search_light_grey)\n        case .sharedFilter:\n            setMessageForEmptyList(title: R.string.file_list_empty_shared_headline,\n                                   description: R.string.file_list_empty_shared,\n                                   icon: R.drawable.ic_list_empty_shared)\n        case .gallerySearch:\n            setMessageForEmptyList(title: R.string.file_list_empty_headline_server_search,\n                                   description: R.string.file_list_empty_gallery,\n                                   icon: R.drawable.file_image)\n        case .localSearch:\n            setMessageForEmptyList(title: R.string.file_list_empty_headline_server_search,\n                                   description: R.string.file_list_empty_local_search,\n                                   icon: R.drawable.ic_search_light_grey)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "setEmptyListLoadingMessage",
        "method_code": "blic void setEmptyListLoadingMessage() {\n        new Handler(Looper.getMainLooper()).post(() -> {\n            FileActivity fileActivity = FragmentExtensionsKt.getTypedActivity(this, FileActivity.class);\n            if (fileActivity != null) {\n                fileActivity.connectivityService.isNetworkAndServerAvailable(result -> {\n                    if (!result || mEmptyListContainer == null || mEmptyListMessage == null) return;\n\n                    mEmptyListHeadline.setText(R.string.file_list_loading);\n                    mEmptyListMessage.setText(\"\");\n                    mEmptyListIcon.setVisibility(View.GONE);\n                });\n            }\n        });\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled setEmptyListLoadingMessage from ExtendedListFragment.java into Swift.\n\n        Input:\n\n        Method Name: setEmptyListLoadingMessage\n\n        Method Code: blic void setEmptyListLoadingMessage() {\n        new Handler(Looper.getMainLooper()).post(() -> {\n            FileActivity fileActivity = FragmentExtensionsKt.getTypedActivity(this, FileActivity.class);\n            if (fileActivity != null) {\n                fileActivity.connectivityService.isNetworkAndServerAvailable(result -> {\n                    if (!result || mEmptyListContainer == null || mEmptyListMessage == null) return;\n\n                    mEmptyListHeadline.setText(R.string.file_list_loading);\n                    mEmptyListMessage.setText(\"\");\n                    mEmptyListIcon.setVisibility(View.GONE);\n                });\n            }\n        });\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setEmptyListLoadingMessage() {\n    DispatchQueue.main.async {\n        if let fileActivity = self as? FileActivity {\n            fileActivity.connectivityService.isNetworkAndServerAvailable { result in\n                guard result, self.mEmptyListContainer != nil, self.mEmptyListMessage != nil else { return }\n                \n                self.mEmptyListHeadline.text = NSLocalizedString(\"file_list_loading\", comment: \"\")\n                self.mEmptyListMessage.text = \"\"\n                self.mEmptyListIcon.isHidden = true\n            }\n        }\n    }\n}\n```"
    },
    {
        "method_name": "getEmptyViewText",
        "method_code": "blic String getEmptyViewText() {\n        return (mEmptyListContainer != null && mEmptyListMessage != null) ? mEmptyListMessage.getText().toString() : \"\";\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled getEmptyViewText from ExtendedListFragment.java into Swift.\n\n        Input:\n\n        Method Name: getEmptyViewText\n\n        Method Code: blic String getEmptyViewText() {\n        return (mEmptyListContainer != null && mEmptyListMessage != null) ? mEmptyListMessage.getText().toString() : \"\";\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc getEmptyViewText() -> String {\n    return (mEmptyListContainer != nil && mEmptyListMessage != nil) ? mEmptyListMessage.text ?? \"\" : \"\"\n}\n```"
    },
    {
        "method_name": "onRefresh",
        "method_code": "verride\n    public void onRefresh(boolean ignoreETag) {\n        if (mOnRefreshListener != null) {\n            if (mOnRefreshListener instanceof FileDisplayActivity) {\n                ((FileDisplayActivity) mOnRefreshListener).onRefresh(ignoreETag);\n            } else {\n                mOnRefreshListener.onRefresh();\n            }\n        }\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onRefresh from ExtendedListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onRefresh\n\n        Method Code: verride\n    public void onRefresh(boolean ignoreETag) {\n        if (mOnRefreshListener != null) {\n            if (mOnRefreshListener instanceof FileDisplayActivity) {\n                ((FileDisplayActivity) mOnRefreshListener).onRefresh(ignoreETag);\n            } else {\n                mOnRefreshListener.onRefresh();\n            }\n        }\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc onRefresh(ignoreETag: Bool) {\n    if let listener = mOnRefreshListener {\n        if let fileDisplayActivity = listener as? FileDisplayActivity {\n            fileDisplayActivity.onRefresh(ignoreETag: ignoreETag)\n        } else {\n            listener.onRefresh()\n        }\n    }\n}\n```"
    },
    {
        "method_name": "onConfigurationChanged",
        "method_code": "verride\n    public void onConfigurationChanged(@NonNull Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n\n        if (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {\n            maxColumnSize = 10;\n        } else if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT) {\n            maxColumnSize = 5;\n        }\n\n        if (isGridEnabled() && getColumnsCount() > maxColumnSize) {\n            ((GridLayoutManager) getRecyclerView().getLayoutManager()).setSpanCount(maxColumnSize);\n        }\n    }\n\n",
        "prompt": "\n        Please translate the following Java (Android) method titled onConfigurationChanged from ExtendedListFragment.java into Swift.\n\n        Input:\n\n        Method Name: onConfigurationChanged\n\n        Method Code: verride\n    public void onConfigurationChanged(@NonNull Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n\n        if (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {\n            maxColumnSize = 10;\n        } else if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT) {\n            maxColumnSize = 5;\n        }\n\n        if (isGridEnabled() && getColumnsCount() > maxColumnSize) {\n            ((GridLayoutManager) getRecyclerView().getLayoutManager()).setSpanCount(maxColumnSize);\n        }\n    }\n\n\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\noverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n\n    let isLandscape = size.width > size.height\n    maxColumnSize = isLandscape ? 10 : 5\n\n    if isGridEnabled() && getColumnsCount() > maxColumnSize {\n        if let layout = getRecyclerView().collectionViewLayout as? UICollectionViewFlowLayout {\n            layout.itemSize = CGSize(width: size.width / CGFloat(maxColumnSize), height: layout.itemSize.height)\n        }\n    }\n}\n```"
    },
    {
        "method_name": "setGridSwitchButton",
        "method_code": "otected void setGridSwitchButton() {\n        if (isGridEnabled()) {\n            mSwitchGridViewButton.setContentDescription(getString(R.string.action_switch_list_view));\n            mSwitchGridViewButton.setIcon(ContextCompat.getDrawable(requireContext(), R.drawable.ic_view_list));\n        } else {\n            mSwitchGridViewButton.setContentDescription(getString(R.string.action_switch_grid_view));\n            mSwitchGridViewButton.setIcon(ContextCompat.getDrawable(requireContext(), R.drawable.ic_view_module));\n        }\n    }\n}",
        "prompt": "\n        Please translate the following Java (Android) method titled setGridSwitchButton from ExtendedListFragment.java into Swift.\n\n        Input:\n\n        Method Name: setGridSwitchButton\n\n        Method Code: otected void setGridSwitchButton() {\n        if (isGridEnabled()) {\n            mSwitchGridViewButton.setContentDescription(getString(R.string.action_switch_list_view));\n            mSwitchGridViewButton.setIcon(ContextCompat.getDrawable(requireContext(), R.drawable.ic_view_list));\n        } else {\n            mSwitchGridViewButton.setContentDescription(getString(R.string.action_switch_grid_view));\n            mSwitchGridViewButton.setIcon(ContextCompat.getDrawable(requireContext(), R.drawable.ic_view_module));\n        }\n    }\n}\n\n        Abstract Syntax Tree: AST not available\n\n        Output Requirement: Return only the translated Swift code. No additional details, explanation, or formatting is required.\n        ",
        "translateMethod": "```swift\nfunc setGridSwitchButton() {\n    if isGridEnabled() {\n        mSwitchGridViewButton.accessibilityLabel = NSLocalizedString(\"action_switch_list_view\", comment: \"\")\n        mSwitchGridViewButton.setImage(UIImage(named: \"ic_view_list\"), for: .normal)\n    } else {\n        mSwitchGridViewButton.accessibilityLabel = NSLocalizedString(\"action_switch_grid_view\", comment: \"\")\n        mSwitchGridViewButton.setImage(UIImage(named: \"ic_view_module\"), for: .normal)\n    }\n}\n```"
    }
]